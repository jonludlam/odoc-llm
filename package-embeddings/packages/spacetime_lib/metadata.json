{
  "package": "spacetime_lib",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:04:49.537333",
  "modules": [
    {
      "module_path": "Spacetime_lib.Stats",
      "library": "spacetime_lib",
      "description": "This module provides functions to retrieve detailed garbage collection and memory usage statistics from a `t` type value, including metrics like minor and major heap allocations, garbage collections, and heap size. It works with the `t` data type, which represents a snapshot of runtime memory statistics. Concrete use cases include monitoring application memory behavior, diagnosing memory leaks, and optimizing garbage collection performance.",
      "description_length": 444,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Allocation_entry",
      "library": "spacetime_lib",
      "description": "This module represents allocation entries in a memory profiling context, providing access to metadata about memory allocations. It includes functions to retrieve the backtrace, block count, word count, and number of allocations associated with a given allocation entry. Concrete use cases include analyzing memory usage patterns and attributing memory consumption to specific call stacks.",
      "description_length": 388,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Snapshot",
      "library": "spacetime_lib",
      "description": "Captures and provides access to runtime metrics at specific points in time, including timestamps, statistical data, and allocation information. Works with snapshot data structures that record system state during execution. Useful for performance analysis and memory profiling by correlating time, stats, and allocation events.",
      "description_length": 326,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Series",
      "library": "spacetime_lib",
      "description": "This module represents a collection of profiling data collected during program execution. It provides access to snapshots, call entries, and timing information, enabling analysis of performance metrics such as function call counts and execution duration. It is used to inspect and process profiling results for performance tuning and debugging.",
      "description_length": 344,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Position",
      "library": "spacetime_lib",
      "description": "This module represents and manipulates source code positions with functions to retrieve filename, line number, and character range. It works with a concrete position type that encodes location metadata. Use cases include tracking error locations in parsers or compilers and generating precise diagnostic messages.",
      "description_length": 313,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Backtrace",
      "library": "spacetime_lib",
      "description": "Handles the representation and printing of backtraces using a list of locations. Provides a `print` function to format and output backtrace information. Useful for debugging and error reporting where detailed call stack traces are needed.",
      "description_length": 238,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Location",
      "library": "spacetime_lib",
      "description": "This module represents and manipulates memory locations in a program's execution trace. It provides access to the address, symbol name, position in source code, and whether the location is foreign to the program. Use it to analyze stack traces, profile memory usage, or map runtime execution to source code positions.",
      "description_length": 317,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Call_entry",
      "library": "spacetime_lib",
      "description": "This module represents individual entries in a call graph, capturing metadata about function calls. It provides access to the backtrace associated with a call entry, whether the call is direct, and the number of times it occurs. Useful for analyzing call patterns and performance characteristics in profiling tools.",
      "description_length": 315,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib",
      "library": "spacetime_lib",
      "description": "This module provides precise tracking of source code positions, memory locations, and execution backtraces, along with detailed memory and performance profiling capabilities. It works with structured types representing positions, locations, backtraces, allocation and call entries, runtime statistics, snapshots, and profiling series. Use it to build compilers, analyzers, and profiling tools that require fine-grained diagnostics, memory attribution, and performance insights tied to specific code locations and execution paths.",
      "description_length": 529,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 529,
    "min_description_length": 238,
    "avg_description_length": 357.1111111111111,
    "embedding_file_size_mb": 0.13079452514648438
  }
}