{
  "package": "spacetime_lib",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:06:11.444491",
  "modules": [
    {
      "module_path": "Spacetime_lib.Backtrace",
      "library": "spacetime_lib",
      "description": "This module represents and prints backtraces as lists of source locations. It provides a `print` function to format backtrace information for debugging. Use it to inspect call stacks during error handling or diagnostics.",
      "description_length": 220,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Spacetime_lib.Call_entry",
      "library": "spacetime_lib",
      "description": "This module represents individual entries in a call graph, capturing metadata about function calls. It provides access to the backtrace associated with a call entry, whether the call is direct, and the number of times the call occurs. These capabilities support analysis of call graphs for performance profiling or debugging.",
      "description_length": 325,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Location",
      "library": "spacetime_lib",
      "description": "This module represents and manipulates code locations in memory, primarily used for profiling and tracing. It provides access to the memory address, optional symbol name, position in the source code, and whether the location is foreign (outside the program's control). Functions are used to inspect and print these locations during performance analysis or debugging.",
      "description_length": 366,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Position",
      "library": "spacetime_lib",
      "description": "This module represents and manipulates source code positions with functions to retrieve the filename, line number, and character range of a position. It includes a function to print position details to a formatter. Concrete use cases include tracking and displaying the location of syntax errors or code annotations in a compiler or static analysis tool.",
      "description_length": 354,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Series",
      "library": "spacetime_lib",
      "description": "This module manages a sequence of profiling data collected over time, including snapshots and call entries. It provides access to time-based metrics, such as the final timestamp, and supports inspection of call counts and associated snapshots. Concrete use cases include analyzing performance profiles of executable runs and tracking function call activity over time.",
      "description_length": 367,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Snapshot",
      "library": "spacetime_lib",
      "description": "This module represents a snapshot of memory allocation data at a specific point in time. It provides access to the timestamp, memory statistics, and a list of allocation entries from that snapshot. Use it to analyze memory usage trends or inspect specific allocation details during profiling.",
      "description_length": 292,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Allocation_entry",
      "library": "spacetime_lib",
      "description": "This module represents allocation entries in a memory profiling context, providing access to associated backtraces, block counts, word sizes, and allocation counts. It works with structured allocation data to support analysis of memory usage patterns. Concrete use cases include inspecting heap allocations and tracking memory consumption by specific code paths.",
      "description_length": 362,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib.Stats",
      "library": "spacetime_lib",
      "description": "This module provides functions to retrieve detailed garbage collection and memory usage statistics from a `t` type value, including metrics like minor and major collections, heap size, and compaction events. It works with the `t` data type, which represents a snapshot of runtime memory statistics. Concrete use cases include monitoring application performance, analyzing memory allocation patterns, and optimizing garbage collection behavior.",
      "description_length": 443,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spacetime_lib",
      "library": "spacetime_lib",
      "description": "This module provides tools for profiling, debugging, and analyzing program execution through backtraces, call graphs, source positions, and memory usage. It includes data types for call entries, source locations, profiling sequences, memory snapshots, and allocation data, with operations to inspect call stacks, track function invocations, retrieve source positions, and analyze memory behavior. You can use it to diagnose errors via backtrace printing, profile performance using call graph metadata, track memory allocations over time, and inspect garbage collection statistics to optimize runtime behavior.",
      "description_length": 609,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 609,
    "min_description_length": 220,
    "avg_description_length": 370.8888888888889,
    "embedding_file_size_mb": 0.03312492370605469
  }
}