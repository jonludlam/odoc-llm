{
  "package": "raylib",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 59,
  "creation_timestamp": "2025-06-18T16:42:53.542039",
  "modules": [
    {
      "module_path": "Raylib.ConfigFlags",
      "description": "Converts between an opaque flag type and integers, enabling bitwise operations and configuration parsing. Works with an abstract type representing bit-flagged configurations. Used to encode and decode system or application settings via integer representations.",
      "description_length": 260,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.TraceLogLevel",
      "description": "Converts between a custom log level type and integers, enabling precise control over logging verbosity. Works with an abstract type representing log severity levels. Used to enforce type-safe log filtering and comparison in application logging systems.",
      "description_length": 252,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Key",
      "description": "Converts between integer values and a custom key type, enabling efficient storage and comparison. Works with an abstract type representing unique identifiers. Used to generate and manage numeric keys in data structures like hash tables and maps.",
      "description_length": 245,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.MouseButton",
      "description": "Converts between a custom button identifier and its integer representation, enabling direct use in system-level input handling. Operates on a type encapsulating mouse button values, suitable for low-level event processing. Used to map user input events to specific button actions in graphical applications.",
      "description_length": 306,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.MouseCursor",
      "description": "Converts between a custom cursor type and integers, enabling efficient storage and transmission. Works with an abstract type representing mouse cursor states. Used to serialize cursor identifiers for logging and inter-process communication.",
      "description_length": 240,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.GamepadButton",
      "description": "Converts between integer values and a custom type representing gamepad button identifiers. Works with an opaque type that encapsulates button constants. Used to safely map input events from gamepad devices to internal button representations.",
      "description_length": 241,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.GamepadAxis",
      "description": "Converts between integer values and a specialized axis representation, enabling precise control input handling. Works with a custom type `t` designed to model gamepad axis data. Used to normalize and validate axis inputs from hardware devices.",
      "description_length": 243,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.MaterialMapIndex",
      "description": "Converts between an opaque type and integers, enabling efficient storage and comparison. Works with an abstract type representing material map indices. Used to map material identifiers to compact integer representations in rendering pipelines.",
      "description_length": 243,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.ShaderLocationIndex",
      "description": "Provides conversion between integer values and a specialized type representing shader location indices. Works with an opaque type `t` that encapsulates integer-based shader attribute or uniform locations. Used to safely encode and decode shader variable positions in graphics programming contexts.",
      "description_length": 297,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.ShaderUniformDataType",
      "description": "Handles conversion between integer values and a custom type representing shader uniform data. Works with a sealed type `t` that encapsulates numeric values used in GPU shaders. Used to safely encode and decode uniform parameters for rendering pipelines.",
      "description_length": 253,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.ShaderAttributeDataType",
      "description": "Converts between integer values and a custom type representing shader attribute data types. Works with an abstract type encapsulating numeric identifiers used in graphics programming. Used to safely map shader attribute types to and from integer representations for low-level GPU interactions.",
      "description_length": 293,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.PixelFormat",
      "description": "Converts between integer values and a custom type representing pixel color formats. Works with an abstract type encapsulating specific pixel format identifiers. Used to serialize and deserialize format constants in graphics processing pipelines.",
      "description_length": 245,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.TextureFilter",
      "description": "Converts between an opaque texture identifier and an integer representation. Operates on an internal type representing texture handles. Used to serialize texture references for storage or transmission in graphics pipelines.",
      "description_length": 223,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.TextureWrap",
      "description": "Converts between an opaque texture identifier and an integer representation. Operates on an abstract type representing texture handles used in graphics rendering. Used to serialize and deserialize texture references in low-level graphics pipelines.",
      "description_length": 248,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.CubemapLayout",
      "description": "Encodes and decodes cubemap face indices using a custom type, mapping between integer representations and face identifiers. Operates on a sealed type `t` that represents the six faces of a cubemap. Used to generate texture coordinates for 3D rendering pipelines.",
      "description_length": 262,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.FontType",
      "description": "Converts between a custom font type and integer representations, enabling efficient storage and comparison. Operates on an abstract type `t` that encapsulates font identifiers. Used to serialize font configurations for logging and configuration files.",
      "description_length": 251,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.BlendMode",
      "description": "Converts between an opaque type representing blending modes and integers, enabling efficient storage and transmission. Operates on a hidden type that encapsulates specific blending behavior definitions. Used to serialize and deserialize blending settings in graphics rendering pipelines.",
      "description_length": 287,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Gesture",
      "description": "Converts between an opaque gesture type and integers, enabling efficient storage and comparison. Works with an abstract type representing specific user input gestures. Used to encode touch or mouse events for event logging and state tracking.",
      "description_length": 242,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.CameraMode",
      "description": "Converts between an abstract camera mode representation and integer values, enabling efficient storage and comparison. Operates on an opaque type `t` that encapsulates specific camera settings. Used to serialize and deserialize mode configurations in embedded systems or configuration files.",
      "description_length": 291,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.CameraProjection",
      "description": "Converts between an opaque camera projection type and integers, enabling efficient storage and retrieval. Works with an internal representation of camera projection data, abstracting low-level details. Used to serialize and deserialize projection settings in real-time rendering pipelines.",
      "description_length": 289,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.NPatchLayout",
      "description": "Converts between an abstract layout type and integers, enabling efficient storage and comparison. Works with an opaque type representing layout configurations. Used to serialize layout settings for logging or transmission.",
      "description_length": 222,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Vector2",
      "description": "This module offers a range of vector operations for 2D vectors, including arithmetic calculations, geometric transformations, and utility functions like normalization and interpolation. It manipulates a 2D vector type through element-wise computations and spatial manipulations. Use cases include game physics for movement and collision detection, computer graphics for rotation and scaling, and simulations requiring directional or positional adjustments.",
      "description_length": 456,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Vector3",
      "description": "The module provides arithmetic and geometric operations on 3D vectors, including addition, scaling, cross products, dot products, normalization, and transformations, utilizing a float-based vector type. It enables applications such as physics simulations, computer graphics, and 3D modeling through features like rotation, distance calculation, and linear interpolation.",
      "description_length": 370,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.Vector4",
      "description": "Provides arithmetic operations, transformations, and interpolation methods for 4D vectors, including addition, scaling, normalization, and spherical linear interpolation. Operates on 4D vectors, Vector3, matrices, and Euler angles, enabling applications in 3D graphics, animation, and physics simulations.",
      "description_length": 305,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Matrix",
      "description": "The module provides element-wise manipulation, linear algebra operations (determinants, traces, transposes, inverses), and transformation functions (rotation, translation, scaling) for matrices, with specialized support for 4x4 structures. It works with matrices of varying dimensions, particularly 4x4 matrices for 3D transformations, and includes tools for perspective/orthographic projections and camera view matrix construction. Use cases include 3D graphics rendering, computer vision, and simulation environments requiring geometric transformations.",
      "description_length": 555,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Color",
      "description": "This module enables manipulation of color values through operations like channel extraction, construction, and retrieval of predefined hues. It works with a structured type representing colors via red, green, blue, and alpha components, derived from Raylib's Color system. Use cases include graphics rendering and UI design, where precise color control or standardized palette access is required.",
      "description_length": 396,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Rectangle",
      "description": "Provides functions to create and manipulate rectangle structures with coordinates and dimensions. Works with float values for position and size, and allows modification of individual properties like x, y, width, and height. Used to represent and adjust rectangular areas in graphical applications or spatial calculations.",
      "description_length": 321,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Image",
      "description": "Provides functions to retrieve image dimensions, mipmap count, and pixel format. Works with image data structures encapsulating width, height, and format information. Used to inspect and validate image properties before rendering or processing.",
      "description_length": 244,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Texture",
      "description": "Provides functions to create and query OpenGL texture objects, including retrieving the texture ID, dimensions, mipmap count, and pixel format. Operates on a custom type encapsulating a C-compatible texture structure. Used to manage 2D textures in graphics rendering, such as loading game assets or applying surface details.",
      "description_length": 324,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.RenderTexture",
      "description": "Provides functions to retrieve and modify the OpenGL framebuffer object ID, color buffer texture, and depth buffer texture associated with a render target. Works with a custom type representing a render texture, encapsulating both a framebuffer and its attached textures. Used to configure and access rendering targets for off-screen rendering and post-processing effects.",
      "description_length": 372,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.NPatchInfo",
      "description": "Provides functions to create and manipulate n-patch information with a source rectangle, border offsets, and layout. Works with Rectangle.t for texture regions and NPatchLayout.t for defining the patch's structure. Used to configure how a texture is divided into resizable sections for UI elements.",
      "description_length": 298,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.GlyphInfo",
      "description": "Provides functions to create and manipulate glyph data, including setting and retrieving Unicode values, drawing offsets, advance positions, and associated image data. Works with a structured type that encapsulates character properties and an image reference. Used to manage font glyph metrics and rendering information in text layout systems.",
      "description_length": 343,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Font",
      "description": "Provides functions to access and modify font properties such as base size, glyph padding, texture atlas, and glyph rectangle data. Works with C-compatible types including textures, rectangles, and glyph information arrays. Used to configure and retrieve font data for rendering text in graphical applications.",
      "description_length": 309,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Camera3D",
      "description": "Provides functions to create and manipulate a 3D camera with position, target, up vector, field-of-view, and projection type. Operates on Vector3 and CameraProjection types to control camera orientation and rendering perspective. Used to configure camera behavior in real-time 3D applications like game engines or visualization tools.",
      "description_length": 334,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Camera2D",
      "description": "Provides functions to create and manipulate a 2D camera with offset, target, rotation, and zoom properties. Works with Vector2 for position data and float for rotation and zoom values. Used to control the view in a 2D scene, such as following a character's movement or adjusting the display during gameplay.",
      "description_length": 307,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Mesh",
      "description": "The module enables low-level manipulation of 3D mesh data, including vertex attributes like positions, normals, tangents, colors, and animation-related properties, operating on structured numeric arrays. It supports dynamic updates for animated meshes and skeletal systems, facilitating real-time rendering and deformation workflows through direct control of shader-compatible data structures.",
      "description_length": 393,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.ShaderLoc",
      "description": "Provides operations to manipulate and query shader location identifiers, including comparison, conversion to string, and arithmetic adjustments. Works with the int type to represent unique shader variable positions. Used to track and modify uniform and attribute locations during shader program linking.",
      "description_length": 303,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Shader",
      "description": "Provides functions to create and manipulate shader objects, including retrieving their unique identifier, accessing and modifying shader location arrays, and setting individual or multiple locations. Works with unsigned integer identifiers, shader location arrays, and opaque shader type representations. Used to manage GPU shader resources and their associated attribute or uniform locations during rendering setup.",
      "description_length": 416,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.MaterialMap",
      "description": "Provides functions to create and manipulate material maps with texture, color, and value components. Works with Texture.t, Color.t, and float to define surface properties for rendering. Allows dynamic updates to texture, color, and value attributes of a material map.",
      "description_length": 267,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Material",
      "description": "Manages material properties for rendering, including shader assignment, texture map arrays, and parameter adjustments. Operates on a custom type wrapped around Ctypes, interacting with shader and map data structures. Used to configure visual attributes in real-time graphics pipelines.",
      "description_length": 285,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Transform",
      "description": "Provides functions to construct and manipulate transformation matrices using vector components for translation, rotation, and scale. Works with Vector3.t and Vector4.t types to represent spatial transformations. Used to update and query transformation properties in 3D graphics pipelines.",
      "description_length": 288,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.BoneInfo",
      "description": "Provides access to and modification of bone parent relationships through dedicated getter and setter functions. Operates on a custom type wrapped around a Ctypes.typ, representing skeletal bone data. Used to manage hierarchical bone structures in animation systems.",
      "description_length": 265,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Model",
      "description": "Provides access to and modification of a 3D model's local transform matrix, mesh data, material assignments, and skeletal information. Works with C-compatible data structures including arrays of meshes, materials, and bone info, as well as a pointer to bone bind poses. Used to update model transformations and geometry during rendering or animation processing.",
      "description_length": 361,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.ModelAnimation",
      "description": "Provides functions to access and manipulate animation data, including bone information, frame count, and pose transformations per frame. Works with custom types representing animation skeletons and transform arrays. Used to load and query skeletal animation data for real-time rendering or simulation.",
      "description_length": 301,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.Ray",
      "description": "Provides operations to construct and manipulate rays using a position and direction, with functions to retrieve and update these components. Works with Vector3.t for position and direction, and a Ctypes.typ for interfacing with C libraries. Used to define ray paths in 3D space for applications like ray tracing or collision detection.",
      "description_length": 335,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.RayCollision",
      "description": "Provides methods to query and modify ray collision data, including checking if a collision occurred, retrieving the distance, hit point, and surface normal. Operates on a structured type encapsulating ray intersection information, along with a Ctypes-compatible representation. Used to track and update collision details during scene rendering or physics simulations.",
      "description_length": 367,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.BoundingBox",
      "description": "Encapsulates a 3D axis-aligned bounding box using two Vector3 points to define its extent. Provides methods to retrieve and modify the minimum and maximum corners of the box. Used to represent and manipulate spatial boundaries in geometry processing and collision detection.",
      "description_length": 274,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.Wave",
      "description": "Handles audio file metadata by providing access to and modification of sample rate, bit depth, and channel count. Operates on a wrapped C type representing audio format data. Used to configure and query audio properties in multimedia applications.",
      "description_length": 247,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.AudioStream",
      "description": "Provides methods to retrieve and modify audio stream properties such as sample rate, bit depth, and number of channels. Works with a wrapped C type representing an audio stream, exposing numeric values for configuration. Used to dynamically adjust audio parameters in real-time audio processing applications.",
      "description_length": 308,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.Sound",
      "description": "Provides functions to access and modify an audio stream associated with a sound object, using a custom type wrapped around a Ctypes typ. Operates on a structured type representing sound data and an audio stream type for handling audio playback. Used to dynamically assign and retrieve audio streams for real-time sound processing.",
      "description_length": 330,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Music",
      "description": "Provides methods to access and modify audio stream, looping status, and context type of a music object. Works with custom types representing music data and audio streams. Used to control playback behavior and format settings in audio applications.",
      "description_length": 247,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.VrDeviceInfo",
      "description": "This module enables manipulation of VR device configurations through functions that access and adjust display parameters, eye-tracking data, and optical properties like lens distortion and chroma aberration correction. It operates on a nested structured type `t` representing low-level hardware settings, facilitating precise control over spatial calibration and visual fidelity. Key use cases include optimizing visual accuracy for user comfort and calibrating hardware for immersive applications.",
      "description_length": 498,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.VrStereoConfig",
      "description": "Provides access to and modification of VR-specific matrix and coordinate data, including projection matrices, view offsets, lens and screen centers, and distortion scales. Operates on OCaml types wrapped from C types, such as matrices and float arrays, for VR rendering configurations. Used to configure stereo rendering parameters for virtual reality applications, adjusting per-eye visual properties and distortion correction.",
      "description_length": 428,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.FilePathList",
      "description": "Provides functions to create and manipulate a wrapped list of file paths, offering access to the underlying string list. Operates on a custom type encapsulating a list of strings representing file paths. Used to safely pass and retrieve file path lists between C and OCaml code.",
      "description_length": 278,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.AutomationEvent",
      "description": "Provides functions to define and manipulate event structures with a specific type representation using Ctypes. Works with opaque type wrappers and C-compatible data structures. Used to interface with low-level event handling in system automation workflows.",
      "description_length": 256,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.AutomationEventList",
      "description": "Provides functions to create, manipulate, and iterate over a list of automation events, including adding events, checking for existence, and extracting event data. Works with a custom opaque type representing a list of events, wrapped in a Ctypes-compatible structure. Used to manage audio automation data in real-time processing pipelines.",
      "description_length": 340,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.Rlgl",
      "description": "This module offers low-level OpenGL operations for 3D rendering, including matrix transformations, state management, and GPU resource handling, with functions for configuring rendering pipelines, managing textures, shaders, and vertex buffers. It works with numeric types, identifiers, pointers, and GPU object handles, enabling tasks like texture uploads, shader program setup, and transformation matrix adjustments. Specific use cases include initializing rendering contexts, rendering primitive shapes, and optimizing graphics pipelines for applications like real-time visualization or game development.",
      "description_length": 606,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "raylib",
      "description": "Provides functions for rendering 2D graphics, handling input, and managing game loops using a set of type-safe wrappers around raylib's C API. Works with types such as Color, Rectangle, and Key, offering direct access to low-level game development operations. Enables creation of interactive game elements like sprites, text, and user-controlled entities with minimal boilerplate.",
      "description_length": 380,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib",
      "description": "Provides type-safe conversions between abstract data types and integers, enabling efficient storage, comparison, and manipulation of configurations, log levels, keys, input identifiers, and graphics parameters. Supports vector, matrix, and color operations for 3D graphics, along with functions for managing textures, shaders, cameras, and audio settings. Examples include encoding log verbosity levels, normalizing gamepad axis inputs, and serializing texture references for rendering pipelines. Offers low-level GPU operations and event handling for real-time applications.",
      "description_length": 575,
      "index": 58,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 62,
    "meaningful_modules": 59,
    "filtered_empty_modules": 3,
    "retention_rate": 0.9516129032258065
  },
  "statistics": {
    "max_description_length": 606,
    "min_description_length": 222,
    "avg_description_length": 317.20338983050846,
    "embedding_file_size_mb": 0.21480083465576172
  }
}