{
  "package": "raylib",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 58,
  "creation_timestamp": "2025-07-15T23:14:43.001973",
  "modules": [
    {
      "module_path": "Raylib.AudioStream",
      "library": "raylib",
      "description": "This module manages audio stream configuration through direct manipulation of sample rate, bit depth, and channel count. It operates on the `t` type, which wraps a C-compatible audio stream structure. Concrete use cases include adjusting playback quality dynamically or configuring audio input/output parameters before streaming starts.",
      "description_length": 336,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.Vector2",
      "library": "raylib",
      "description": "This module offers arithmetic operations, magnitude calculations, and geometric transformations for 2D vectors, handling tasks like addition, normalization, linear interpolation, and angle computation. It works with 2D vector values composed of `x` and `y` components, supporting both mutable updates and functional transformations through immutable copies. These tools are ideal for game physics, spatial direction adjustments, and animation systems requiring precise coordinate manipulation.",
      "description_length": 493,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.MouseCursor",
      "library": "raylib",
      "description": "This module defines a set of cursor shapes and converts between cursor values and integers. It works with the `t` type, representing different mouse cursor styles like arrow, crosshair, and resize indicators. Use it to set or retrieve the current mouse cursor shape in a graphical application.",
      "description_length": 293,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Rlgl",
      "library": "raylib",
      "description": "This library provides low-level OpenGL-style operations for 2D/3D graphics rendering, including matrix transformations (`translatef`, `rotatef`), vertex buffer management, shader compilation, framebuffer control, and rendering state configuration (depth testing, blending, culling). It works directly with GPU resources such as vertex array objects, texture IDs, shader programs",
      "description_length": 378,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.BlendMode",
      "library": "raylib",
      "description": "This module defines constants and conversions for blend modes used in 2D rendering. It supports operations to convert blend mode values to and from integers, enabling use with graphics APIs that require numeric identifiers. Concrete use cases include setting transparency effects, additive blending for lighting, and custom blend configurations in shaders or rendering pipelines.",
      "description_length": 379,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.ShaderLoc",
      "library": "raylib",
      "description": "This module manages locations of shader parameters within a graphics pipeline, using integer identifiers to reference these locations. It provides functions to retrieve and manipulate shader uniform and attribute locations, enabling direct interaction with GPU shaders. Concrete use cases include setting up shader variables for rendering effects like lighting, texturing, or post-processing in real-time graphics applications.",
      "description_length": 427,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.RenderTexture",
      "library": "raylib",
      "description": "This module manages off-screen rendering targets with OpenGL framebuffer objects. It provides access to color and depth buffer attachments as textures and allows updating those attachments. Use it to implement post-processing effects, shadow mapping, or rendering to textures for dynamic materials.",
      "description_length": 298,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Color",
      "library": "raylib",
      "description": "This module provides functions to construct colors from RGB/alpha components and extract individual channel values. It supports operations on color values represented with red, green, blue, and alpha intensities, along with predefined constants for common hues like skyblue, darkblue, and magenta, enabling efficient color manipulation in graphics rendering or UI design workflows.",
      "description_length": 381,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.Image",
      "library": "raylib",
      "description": "This module handles image data manipulation, providing access to properties like width, height, mipmap levels, and pixel format. It works with the `t` type representing image resources, and integrates pixel format definitions from the `PixelFormat` module. Concrete use cases include querying image metadata and preparing image data for rendering or texture loading.",
      "description_length": 366,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.VrStereoConfig",
      "library": "raylib",
      "description": "This module manages VR stereo configuration data for rendering immersive 3D environments. It provides access to projection and view offset matrices for each eye, lens and screen center positions, and distortion scaling parameters. These functions are used to configure per-eye rendering parameters for virtual reality displays, enabling precise control over stereoscopic rendering and lens distortion correction.",
      "description_length": 412,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Wave",
      "library": "raylib",
      "description": "This module provides direct access to wave file properties including sample rate, bit depth, and channel count. It supports manipulation of audio data through low-level operations like setting and retrieving these properties. Concrete use cases include adjusting audio playback parameters or inspecting wave file metadata for processing or conversion tasks.",
      "description_length": 357,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Gesture",
      "library": "raylib",
      "description": "This module defines a set of gesture types for handling user input, such as taps, swipes, and pinches, along with conversions to and from integer representations. It works with the enumerated type `t`, representing discrete gesture events. Use this module to detect and respond to specific touch or mouse gestures in interactive applications like games or UIs.",
      "description_length": 360,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.NPatchInfo",
      "library": "raylib",
      "description": "This module defines and manipulates `NPatchInfo` structures that describe how to slice and render a texture for 3x3, 1x3, or 3x1 layouts. It provides functions to create, access, and modify fields such as source rectangle, border offsets, and layout type. Use this when implementing scalable UI elements like buttons or panels using 9-slice scaling in a 2D game or interface.",
      "description_length": 375,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Key",
      "library": "raylib",
      "description": "This module defines an enumerated type representing all standard keyboard keys, including alphanumeric keys, modifiers, function keys, and special symbols. It provides bidirectional conversion between key values and their integer representations. Use this module to handle keyboard input in games or applications by matching key presses against specific symbolic constants.",
      "description_length": 373,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Matrix",
      "library": "raylib",
      "description": "This module provides low-level matrix construction and element access for 4x4 matrices, along with linear algebra operations like determinant calculation, transposition, and inversion. It supports transformation operations essential for 3D graphics, including translation, rotation, scaling, and projection matrix generation, working with vectors and matrices to facilitate complex scene transformations. These utilities are designed for building and manipulating transformation and camera matrices in graphical applications.",
      "description_length": 525,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.Ray",
      "library": "raylib",
      "description": "This module defines a ray with a position and direction, both represented as 3D vectors. It provides functions to create a ray, access and modify its position and direction. Concrete use cases include raycasting for 3D picking and collision detection in games or simulations.",
      "description_length": 275,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Camera3D",
      "library": "raylib",
      "description": "This module defines a 3D camera configuration and manipulation interface, centered around the `t` type which encapsulates position, target, up vector, field-of-view, and projection type. It provides functions to create a camera with specified parameters and access or modify its individual properties. Concrete use cases include setting up view transformations for 3D rendering, adjusting camera orientation for scene navigation, and switching between perspective and orthographic projections in real-time graphics applications.",
      "description_length": 528,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.CameraMode",
      "library": "raylib",
      "description": "This module defines a set of camera movement modes used in 3D rendering, including free movement, orbital rotation, first-person, and third-person views. It provides conversions between the mode enumeration and integer values. These modes configure how user input affects camera orientation and position in a 3D scene.",
      "description_length": 318,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.GlyphInfo",
      "library": "raylib",
      "description": "This module defines a data structure for storing glyph information used in text rendering, including character value, positioning offsets, advance width, and image data. It provides functions to create and manipulate glyph records, enabling precise control over font rendering in graphical applications. Direct use cases include custom font handling and dynamic text layout in games or visual applications.",
      "description_length": 406,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.PixelFormat",
      "library": "raylib",
      "description": "This module defines pixel format enumerations for texture and image data, including uncompressed and compressed formats with varying bit depths and channel configurations. It provides conversions between these formats and integer representations. Use this module when specifying or interpreting pixel data layouts for graphics operations like texture loading or image processing.",
      "description_length": 379,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Shader",
      "library": "raylib",
      "description": "This module manages GPU shader programs by providing functions to create, access, and modify shader locations. It works with shader identifiers and arrays of shader location indices to configure rendering effects. Concrete use cases include setting up custom lighting models, texture sampling, and post-processing effects in graphics pipelines.",
      "description_length": 344,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Texture",
      "library": "raylib",
      "description": "This module manages GPU texture resources, providing functions to create textures with specified dimensions, pixel formats, and mipmap levels. It supports operations to access texture metadata such as width, height, OpenGL ID, and storage format. Concrete use cases include loading and managing 2D textures for rendering sprites, backgrounds, or procedural images in a graphics pipeline.",
      "description_length": 387,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.Camera2D",
      "library": "raylib",
      "description": "This module defines a 2D camera structure with operations to create and manipulate camera properties including offset, target, rotation, and zoom. It works with `Raylib.Vector2.t` for positional data and provides concrete controls for 2D rendering views, such as adjusting the camera's focus point or scaling the scene. Use this module to implement scrolling, rotation, or zooming in 2D games or visualizations.",
      "description_length": 411,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.GamepadButton",
      "library": "raylib",
      "description": "This module defines an enumeration of gamepad button inputs and provides conversions between the enumerated values and integers. It supports precise identification of gamepad controls such as face buttons, triggers, and thumbsticks. Use this module to map physical gamepad inputs to in-game actions or to handle controller input consistently across different platforms.",
      "description_length": 369,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.ShaderUniformDataType",
      "library": "raylib",
      "description": "This module defines types representing shader uniform data kinds like floats, vectors, and samplers. It provides conversions between these types and integer codes using `to_int` and `of_int`. Use this module when setting or retrieving uniform values in shaders, ensuring correct data mapping.",
      "description_length": 292,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.ShaderAttributeDataType",
      "library": "raylib",
      "description": "This module defines types and conversions for shader attribute data types used in graphics programming. It supports operations to convert between type representations and their integer equivalents. Use this module when handling vertex attribute types in shaders, such as specifying or interpreting attribute layouts in OpenGL or similar APIs.",
      "description_length": 342,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.GamepadAxis",
      "library": "raylib",
      "description": "This module defines identifiers for gamepad axes and provides conversions between those identifiers and integer values. It works with the enumerated type `t` representing gamepad axes like left and right joysticks and triggers. Use this module when handling gamepad input in a type-safe way, such as mapping raw axis indices to symbolic names or validating axis inputs.",
      "description_length": 369,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.BoundingBox",
      "library": "raylib",
      "description": "This module defines a bounding box structure using minimum and maximum 3D vector points. It provides functions to create a box from two corners and to get or set the min and max vertices. Use this module to represent and manipulate axis-aligned bounding boxes for collision detection or spatial queries in 3D environments.",
      "description_length": 322,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.TextureFilter",
      "library": "raylib",
      "description": "This module defines texture filtering modes used in graphics rendering, including point sampling, bilinear, trilinear, and anisotropic filtering at various levels. It provides conversions between the filtering modes and integer representations. Use these types to configure texture sampling behavior in rendering pipelines or graphical applications.",
      "description_length": 349,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Music",
      "library": "raylib",
      "description": "This module provides functions to manage and manipulate music data through operations like setting and retrieving audio streams, controlling looping behavior, and specifying music context types. It works with the `t` type representing a music resource, alongside related types like `AudioStream.t`. Concrete use cases include loading and playing background music with custom audio streams, enabling or disabling looped playback, and associating music files with specific audio formats.",
      "description_length": 485,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.RayCollision",
      "library": "raylib",
      "description": "This module represents collision data from ray casting operations. It stores and manipulates hit results including whether a collision occurred, the distance to the hit, the 3D point of impact, and the surface normal at the hit location. It is used to process ray intersections with 3D geometry, such as determining line-of-sight or calculating ray-based picking in a 3D scene.",
      "description_length": 377,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.ShaderLocationIndex",
      "library": "raylib",
      "description": "This module defines a set of symbolic identifiers for common shader input locations used in rendering pipelines. It maps each identifier to and from integer values for use in shader programs. These identifiers correspond to vertex attributes, transformation matrices, lighting parameters, and texture maps, enabling precise data binding in graphics operations.",
      "description_length": 360,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.BoneInfo",
      "library": "raylib",
      "description": "This module defines bone information structures used in skeletal animation, specifically providing access to a bone's parent index and allowing modification of that index. It works with the `t` type, which represents a bone's data in a format compatible with C libraries like Raylib. Concrete use cases include setting up hierarchical relationships between bones in a 3D model's skeleton for animation and rigging purposes.",
      "description_length": 423,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Material",
      "library": "raylib",
      "description": "This module manages material properties for 3D rendering, providing access to shaders, texture maps, and parameter settings. It works with material structures that include a shader, an array of material maps, and configurable float parameters. Use it to customize surface appearance in a rendering pipeline by assigning shaders, texture maps, and adjusting material-specific floats.",
      "description_length": 382,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Sound",
      "library": "raylib",
      "description": "This module manages audio playback through low-level sound and audio stream operations. It provides functions to access and modify audio streams associated with sound objects, enabling dynamic audio manipulation such as streaming or real-time synthesis. Concrete use cases include implementing custom audio effects, streaming large audio files, or synchronizing audio with gameplay events.",
      "description_length": 389,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.TraceLogLevel",
      "library": "raylib",
      "description": "This module defines a set of log severity levels and provides conversions between those levels and integers. It works with the `t` variant type representing different log levels such as `Trace`, `Debug`, `Error`, and `None`. Use this module to filter or interpret log messages based on severity in applications using the Raylib library.",
      "description_length": 336,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.MaterialMap",
      "library": "raylib",
      "description": "This module defines a material map structure that combines a texture, color, and scalar value, providing direct access and mutation of these fields. It operates on `Raylib.Texture.t`, `Raylib.Color.t`, and `float` values, encapsulating them into a single material component. It is used to configure and manage material properties for 3D models in a rendering context, such as setting diffuse maps, specular colors, or metallic values.",
      "description_length": 434,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.AutomationEvent",
      "library": "raylib",
      "description": "This module defines types for representing automation events, specifically using `t'` as the underlying type and `t` as a C-compatible type for interfacing with Raylib's automation system. It includes the type `t` registered with Ctypes for memory layout compatibility. Use this module when working with automated input recording or playback in Raylib, such as capturing and replaying user actions in a game or simulation.",
      "description_length": 422,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.VrDeviceInfo",
      "library": "raylib",
      "description": "This module provides operations to create and manipulate VR device calibration data, focusing on display properties like screen resolution, lens parameters, and distortion correction. It works with the `VrDeviceInfo.t` structure to configure optical settings such as lens separation and chromatic aberration coefficients, enabling precise adjustment of VR headset displays for optimal visual fidelity.",
      "description_length": 401,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.TextureWrap",
      "library": "raylib",
      "description": "This module defines texture wrapping modes as enumerated values and provides conversions between these modes and integers. It supports operations for specifying how textures are sampled beyond their original boundaries, such as repeating or clamping coordinates. Use this module when configuring texture sampling behavior in graphics rendering pipelines.",
      "description_length": 354,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.FontType",
      "library": "raylib",
      "description": "This module defines font types used for rendering text in graphics applications. It includes conversions between font type values and integers for use in low-level rendering APIs. The types are used to specify how fonts are rendered, such as using bitmap or signed distance field techniques.",
      "description_length": 291,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.FilePathList",
      "library": "raylib",
      "description": "Handles lists of file paths, providing access to the underlying data structure and conversion to standard OCaml string lists. Works directly with `Raylib.FilePathList.t'` and `Raylib.FilePathList.t` types, which wrap C-level representations. Useful for retrieving and manipulating collections of file paths, such as when enumerating assets or processing directories.",
      "description_length": 366,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.ModelAnimation",
      "library": "raylib",
      "description": "This module manages skeletal animation data, providing access to bones and frame-specific poses. It supports operations to retrieve and modify bone information, frame counts, and transformation poses for animated 3D models. Use it to load, inspect, or manipulate animations in a 3D scene, such as character movements or object transformations.",
      "description_length": 343,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.MouseButton",
      "library": "raylib",
      "description": "This module defines a set of mouse button identifiers and provides conversions between those identifiers and integer values. It works with the `t` sum type representing different mouse buttons, such as `Left`, `Right`, and `Middle`. Use this module when handling mouse input in a cross-platform application, particularly when mapping system-specific button codes to a standardized set of buttons.",
      "description_length": 396,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.CubemapLayout",
      "library": "raylib",
      "description": "This module defines an enumerated type representing different layouts for cubemap textures, such as vertical and horizontal lines, cross patterns, and panorama. It provides conversion functions `to_int` and `of_int` to map between the enumerated values and their corresponding integer representations. This is useful when interfacing with graphics APIs or file formats that expect specific integer codes for cubemap layouts.",
      "description_length": 424,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.NPatchLayout",
      "library": "raylib",
      "description": "This module defines an enumerated type representing different texture layout strategies, specifically nine-patch and three-patch (vertical or horizontal) layouts. It provides conversion functions to and from integers for these layout values. This is useful for specifying how textures are sliced and scaled in UI elements or 2D graphics rendering.",
      "description_length": 347,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.CameraProjection",
      "library": "raylib",
      "description": "This module defines camera projection types used in 3D rendering, specifically supporting perspective and orthographic projections. It provides conversion functions to and from integers for use in low-level graphics operations. These types are used when configuring camera settings for rendering scenes with different projection modes.",
      "description_length": 335,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.ConfigFlags",
      "library": "raylib",
      "description": "This module defines a set of configuration flags used to control window and rendering behavior. It provides conversions between flag values and integers, enabling bitwise operations for combining multiple flags. These flags are used to set display modes, window properties, and rendering hints when initializing and managing windows and graphics contexts.",
      "description_length": 355,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Model",
      "library": "raylib",
      "description": "This module provides direct access to model properties such as transformation matrices, meshes, materials, and bone data. It supports operations to get and set these components for 3D models, enabling dynamic modification of geometry and appearance. Concrete use cases include animating models by updating bone transforms or swapping materials at runtime.",
      "description_length": 355,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Vector3",
      "library": "raylib",
      "description": "This module supports arithmetic and geometric operations on 3D vectors with floating-point components, enabling tasks like vector creation, transformation, and spatial analysis. It provides functions for calculating lengths, dot products, cross products, and normals, as well as advanced operations such as barycentric coordinates, vector projection, and axis-aligned transformations. These capabilities are particularly useful for 3D graphics, physics simulations, and spatial reasoning in interactive applications.",
      "description_length": 516,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Vector4",
      "library": "raylib",
      "description": "This module provides functions for creating and manipulating 4D vectors with arithmetic operations (addition, subtraction, scaling), component access, normalization, and length calculations, using a C-compatible structure for low-level interoperability. It supports advanced workflows like linear/spherical interpolation, conversions between vector/matrix representations, and transformations involving Euler angles or axis-angle rotations, making it suitable for 3D graphics, animation, and physics computations.",
      "description_length": 513,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Mesh",
      "library": "raylib",
      "description": "This module provides tools to create and manipulate mesh data by configuring vertex attributes like positions, normals, and texture coordinates, along with bone information for skinning. It works directly with `Raylib.Mesh.t` objects and C arrays to manage dynamic vertex buffers, triangle indices, and animation data such as bone weights or animated vertex positions. Use cases include building custom 3D models, implementing skeletal animations, or optimizing mesh updates for rendering pipelines.",
      "description_length": 499,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Raylib.AutomationEventList",
      "library": "raylib",
      "description": "This module defines a data type for handling lists of automation events, specifically used for recording and replaying user input in a raylib-based application. It provides a structured format to store sequences of events such as key presses, mouse movements, and timing information. Concrete use cases include implementing gameplay recording, automated testing, and macro playback within a game or interactive application.",
      "description_length": 423,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Transform",
      "library": "raylib",
      "description": "This module provides functions to create and manipulate 3D transformations, including setting and retrieving translation, rotation, and scale values. It works with `Vector3` and `Vector4` types to represent positional and rotational data. Concrete use cases include building object transforms for 3D scenes, applying positional updates, and managing hierarchical transformations in game entities.",
      "description_length": 396,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Rectangle",
      "library": "raylib",
      "description": "This module defines a rectangle structure with precise positional and dimensional attributes, including x, y coordinates, width, and height. It provides functions to create rectangles and access or modify their individual components. Use cases include 2D collision detection, UI layout management, and rendering operations in graphical applications.",
      "description_length": 349,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.MaterialMapIndex",
      "library": "raylib",
      "description": "This module defines integer identifiers for material map types used in 3D rendering, such as Albedo, Normal, and Roughness. It provides conversions between these enumerated values and integers via `to_int` and `of_int`. These mappings are essential for configuring material properties in shaders and rendering pipelines.",
      "description_length": 320,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib.Font",
      "library": "raylib",
      "description": "This module manages font resources for rendering text in a graphics application. It provides access to font properties such as base size, glyph padding, texture atlas, and glyph metadata, along with functions to modify these properties. Direct use cases include loading custom fonts, adjusting spacing for visual consistency, and integrating text rendering with texture management.",
      "description_length": 381,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Raylib",
      "library": "raylib",
      "description": "This module provides real-time graphics, input, and audio capabilities for 2D and 3D applications, centered around data types like Vector2/3/4, Color, Texture, Mesh, and AudioStream. It supports rendering operations such as shape drawing, shader integration, and texture manipulation, while submodules handle vector math, audio configuration, mouse cursor control, and OpenGL-level rendering. You can create interactive scenes with 3D cameras, detect collisions using rays and bounding boxes, apply post-processing with framebuffers, and manage skeletal animations with bone and model modules. Additional tools for fonts, file paths, and VR rendering extend its use to games, visualizations, and immersive environments.",
      "description_length": 719,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 58,
    "meaningful_modules": 58,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 719,
    "min_description_length": 275,
    "avg_description_length": 388.5344827586207,
    "embedding_file_size_mb": 0.21113109588623047
  }
}