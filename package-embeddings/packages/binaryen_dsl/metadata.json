{
  "package": "binaryen_dsl",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:10:48.047800",
  "modules": [
    {
      "module_path": "Bindings",
      "library": "binaryen_dsl.bindings",
      "description": "This module manages associative mappings from keys to values, supporting operations like insertion, lookup, and deletion. It works with key-value pairs stored in a structured dictionary format, enabling efficient data retrieval. Concrete use cases include tracking variable assignments in interpreters or managing configuration settings.",
      "description_length": 337,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen_dsl.Dsl.Binaryen.Ptr",
      "library": "binaryen_dsl",
      "description": "This module provides low-level operations for pointer manipulation in WebAssembly code generation, including memory loads and stores, arithmetic operations, and comparisons. It works directly with expressions representing pointer values and immediate integers, allowing precise control over memory access and pointer arithmetic. Concrete use cases include implementing memory-safe data structures, custom memory management, and direct interaction with WebAssembly linear memory.",
      "description_length": 478,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen_dsl.Dsl.Binaryen.I32",
      "library": "binaryen_dsl",
      "description": "This module provides operations for working with 32-bit integers in WebAssembly code generation, including arithmetic (addition, subtraction, multiplication, division), comparisons (equality, ordering), and memory access (load, store). It manipulates values of type `Binaryen_dsl.Dsl.Bound.expression`, representing integer expressions in a WebAssembly function body. Concrete use cases include building low-level integer computations, accessing local and global variables, and interacting with linear memory in generated WebAssembly modules.",
      "description_length": 542,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen_dsl.Dsl.VarOperator",
      "library": "binaryen_dsl",
      "description": "This module implements WebAssembly variable and memory operations, including local/global variable access, memory loads and stores with alignment control, and arithmetic and comparison operations on bound expressions. It works directly with WebAssembly expressions, pointers, and memory offsets to construct low-level code structures. Concrete use cases include building Wasm function bodies that manipulate memory, perform calculations, and interact with Wasm variables.",
      "description_length": 471,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen_dsl.Dsl.Bound",
      "library": "binaryen_dsl",
      "description": "This module provides low-level WebAssembly module construction and manipulation capabilities through C API bindings, supporting operations like defining binary types (i32, f64, etc.), building expressions (arithmetic, control flow, memory access), and managing functions, globals, and memory. It works with data structures representing WebAssembly modules, expressions, literals, and raw memory pointers, enabling direct AST-level transformations and code generation. Specific use cases include programmatically building or modifying WASM binaries, embedding domain-specific expressions into WebAssembly AST nodes, and serializing modules to textual or binary formats for execution or analysis.",
      "description_length": 694,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Binaryen_dsl.Dsl.Binaryen",
      "library": "binaryen_dsl",
      "description": "This module enables constructing WebAssembly expressions with arithmetic, comparison, and control flow operations on 32-bit integers, alongside memory access and module-level constructs like function definitions and imports. It operates on Binaryen expressions, literals, locals, globals, and memory structures, facilitating low-level code generation for tasks such as defining WebAssembly functions, resolving imports, and manipulating pointers in memory.",
      "description_length": 456,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen_dsl.Dsl",
      "library": "binaryen_dsl",
      "description": "This module provides direct construction and manipulation of WebAssembly modules through low-level operations on binary types, expressions, and memory. It supports defining WebAssembly types (i32, i64, f32, f64), building arithmetic and control flow expressions, and emitting modules to binary or text format. Concrete use cases include generating custom WebAssembly functions, embedding expressions into AST nodes, and transforming module structures for execution or analysis.",
      "description_length": 477,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binaryen_dsl",
      "library": "binaryen_dsl",
      "description": "This module enables direct construction and manipulation of WebAssembly modules using low-level operations on binary types, expressions, and memory. It supports defining WebAssembly types (i32, i64, f32, f64), building arithmetic and control flow expressions, and emitting modules to binary or text format. Concrete use cases include generating custom WebAssembly functions, embedding expressions into AST nodes, and transforming module structures for execution or analysis.",
      "description_length": 474,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 8,
    "filtered_empty_modules": 2,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 694,
    "min_description_length": 337,
    "avg_description_length": 491.125,
    "embedding_file_size_mb": 0.1163492202758789
  }
}