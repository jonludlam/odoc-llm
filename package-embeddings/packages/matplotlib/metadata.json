{
  "package": "matplotlib",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:05:58.583626",
  "modules": [
    {
      "module_path": "Matplotlib.Ax.Expert",
      "library": "matplotlib",
      "description": "Converts a Matplotlib axis object into a Python object, enabling direct interaction with Python libraries. Works with `Matplotlib.Ax.t` types, which represent plotting axes. Useful for extending OCaml-based visualizations with custom Python plotting logic.",
      "description_length": 256,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Matplotlib.Fig.Expert",
      "library": "matplotlib",
      "description": "Converts a figure object into a Python object, enabling interaction with Python-based plotting libraries. Works with Matplotlib figure structures to facilitate low-level customization and direct API calls. Useful for integrating OCaml-generated figures with Python scripts or extending plots using Python-specific features.",
      "description_length": 323,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Matplotlib.Ax3d.Expert",
      "library": "matplotlib",
      "description": "Converts a 3D axis object into a Python object, enabling interaction with Python-based plotting libraries. Works with 3D axis data structures from the Matplotlib module. Useful for embedding OCaml-generated 3D plots into Python workflows or extending plots using Python code.",
      "description_length": 275,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Matplotlib.Ax3d",
      "library": "matplotlib",
      "description": "This module configures 3D axes for plotting, allowing customization of labels, limits, and titles, and supports rendering 3D scatter plots and image data with control over visual properties. It introduces core types like axis configurations and plot elements, enabling precise manipulation of three-dimensional datasets and surfaces. The child module bridges 3D axis objects with Python, facilitating integration with Matplotlib and extending plots using Python workflows. Together, they enable both standalone 3D visualization in OCaml and interoperability with Python-based tools.",
      "description_length": 582,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Matplotlib.Ax",
      "library": "matplotlib",
      "description": "This module configures and customizes individual plot axes, supporting operations like setting titles, limits, labels, aspect ratios, and grid lines. It provides direct manipulation of axes for line plots, histograms, scatter plots, and image displays, with concrete applications in time-series visualization and scientific plotting. A key data type is `Matplotlib.Ax.t`, representing an axis, which can be converted into a Python object to enable interoperability with Python libraries. This allows for hybrid workflows where OCaml-driven visualizations are extended with custom Python plotting code.",
      "description_length": 601,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Matplotlib.Pyplot",
      "library": "matplotlib",
      "description": "This module creates and customizes 2D plots using arrays of numerical data. It supports line plots, histograms, scatter plots, and image displays, with control over axes limits, labels, grid visibility, and legends. Use it to visualize mathematical functions, statistical distributions, or experimental data directly in OCaml applications.",
      "description_length": 339,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Matplotlib.Fig",
      "library": "matplotlib",
      "description": "This module manages the creation and configuration of figure objects for 2D and 3D plotting, supporting multi-axis layouts, subplot grids, and publication-quality visualizations. It provides core types like `t`, `Ax.t`, and `Ax3d.t` for defining figures and their axes, with operations to add subplots, set titles, and align layouts. A child module bridges figure objects to Python, enabling integration with Matplotlib for low-level customization or embedding in Python workflows. Examples include setting up multi-panel data comparisons, embedding 3D plots in 2D grids, and exporting figures for refinement in Python.",
      "description_length": 619,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Matplotlib",
      "library": "matplotlib",
      "description": "This module enables the creation and customization of 2D and 3D visualizations, supporting line plots, scatter plots, histograms, and image displays with full control over axes, labels, limits, and layout. Core data types include `Ax.t` for 2D axes and `Ax3d.t` for 3D axes, which allow precise configuration of plots and integration with Python for extended workflows. It supports direct visualization of numerical data and mathematical functions, with capabilities for multi-axis figures, subplot grids, and publication-quality output. Example uses include plotting time-series data in 2D, rendering 3D surfaces, and exporting figures for further refinement in Python.",
      "description_length": 670,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 670,
    "min_description_length": 256,
    "avg_description_length": 458.125,
    "embedding_file_size_mb": 0.029473304748535156
  }
}