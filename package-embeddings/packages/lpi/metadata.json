{
  "package": "lpi",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 13,
  "creation_timestamp": "2025-06-18T16:32:39.762798",
  "modules": [
    {
      "module_path": "Ast.Ast",
      "description": "Provides operations to generate unique variables, substitute variables in terms, and convert between strings and variables. Works with abstract syntax tree elements including variables, terms, and abstractions. Used to manipulate lambda expressions and perform variable substitution in formal logic systems.",
      "description_length": 307,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Interpret.Interpret",
      "description": "Parses a string into an abstract syntax tree node, then evaluates the tree within a given environment to produce a result tuple. It processes terms from the abstract syntax tree and maintains a mutable environment context during evaluation. This supports dynamic execution of structured code representations in a controlled runtime setting.",
      "description_length": 340,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Basis.Interpreter",
      "description": "Generates predefined variable-term pairs for static and dynamic evaluation contexts. Operates on lists of variable-term bindings represented as tuples. Used to initialize environments for interpreting expressions in different semantic modes.",
      "description_length": 241,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Interpreter.Interpreter",
      "description": "Provides functions to evaluate expressions within a context, manage context transformations, and control output verbosity. Operates with environment contexts represented as references to associative lists. Used to execute code snippets, modify variable scopes, and suppress diagnostic messages during execution.",
      "description_length": 311,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "lpi",
      "description": "Provides functions to parse and manipulate LPI (Linux Performance Infrastructure) data structures, including event extraction and timestamp normalization. Works with binary buffers and structured event records from performance monitoring tools. Used to process low-level system performance traces for analysis and reporting.",
      "description_length": 324,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Environment",
      "description": "Provides functions to retrieve type and value information from a list of variable bindings, and to add new bindings with optional values. Works with a context type that associates variables with pairs of terms and optional term values. Used to manage symbol tables during type checking and evaluation processes.",
      "description_length": 311,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ast",
      "description": "Manages variable generation, substitution, and conversion within abstract syntax trees, supporting manipulation of lambda expressions and logical terms. Key data types include variables, terms, and abstractions, with operations for substitution, renaming, and string conversion. It enables tasks such as replacing bound variables in lambda abstractions or translating between symbolic and textual representations. Examples include renaming variables to avoid conflicts or transforming term structures for logical evaluation.",
      "description_length": 524,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Staticsemantics",
      "description": "Processes lambda terms by normalizing beta reductions, substituting variables, and checking term equality. Operates on abstract syntax tree structures, including variables, terms, and abstractions. Used to verify type consistency, simplify expressions, and ensure substitution correctness in formal logic systems.",
      "description_length": 313,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lexer",
      "description": "Processes input streams to identify and extract tokens according to predefined lexical rules. Operates on lexing buffers and returns parsed tokens aligned with a grammar's expected structure. Used to convert raw source code into a sequence of meaningful syntactic elements for further processing.",
      "description_length": 296,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Interpret",
      "description": "Converts input strings into executable code structures, evaluates them in a mutable environment, and returns computed results. It handles abstract syntax trees, manages variable bindings, and supports dynamic execution of structured expressions. Operations include parsing, evaluation, and environment manipulation. For example, it can interpret arithmetic expressions, bind variables, and execute nested function calls.",
      "description_length": 420,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Basis",
      "description": "Manages variable-term bindings for evaluating expressions in various semantic contexts. Processes lists of (variable, term) pairs to construct environments for interpretation. Supports operations like lookup, extension, and context switching. Can initialize environments for static analysis or dynamic execution of code.",
      "description_length": 320,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parser",
      "description": "Parses a stream of tokens into an abstract syntax tree, consuming a lexer buffer and a tokenization function. It processes input using a custom token type to represent lexical elements. This is used to convert raw source code into a structured representation for evaluation or analysis.",
      "description_length": 286,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Interpreter",
      "description": "Provides functions to evaluate expressions within a context, construct context mappings, and manage execution state. Operates with environment contexts, association lists, and boolean flags. Used to run interpreted code, build scoped variable mappings, and control output verbosity during execution.",
      "description_length": 299,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 524,
    "min_description_length": 241,
    "avg_description_length": 330.15384615384613,
    "embedding_file_size_mb": 0.047677040100097656
  }
}