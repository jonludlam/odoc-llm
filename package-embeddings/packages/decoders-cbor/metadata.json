{
  "package": "decoders-cbor",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:56:35.701122",
  "modules": [
    {
      "module_path": "Decoders_cbor.Decode.Pipeline",
      "library": "decoders-cbor",
      "description": "This module provides composable decoding operations for CBOR data using a pipeline style. It supports structured decoding of maps with required and optional fields, nested paths, and custom transformations, producing decoder values. Typical use cases include parsing CBOR-encoded data structures like JSON-like objects with specific schemas or deeply nested values.",
      "description_length": 365,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_cbor.Decode.Infix",
      "library": "decoders-cbor",
      "description": "This module defines infix operators for composing CBOR decoding operations, enabling sequential and parallel decoding of structured data. It supports operations like chaining decoders with `>>=`, mapping results with `>|=`, and combining multiple decoders using `<*>`, `and+`, and `and*`. These functions are used to decode complex CBOR-encoded data structures such as tuples, records, and custom types by composing smaller decoders into larger ones.",
      "description_length": 450,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_cbor.Encode",
      "library": "decoders-cbor",
      "description": "This module encodes OCaml values into CBOR format. It supports primitive types like strings, integers, floats, booleans, and null, as well as structured data such as lists, arrays, and key-value objects. Common use cases include serializing configuration data, API payloads, or persistent state to CBOR for transmission or storage.",
      "description_length": 331,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_cbor.Decode",
      "library": "decoders-cbor",
      "description": "This module provides CBOR decoding capabilities for both primitive values (strings, integers, booleans) and structured data (lists, arrays, objects) using a decoder monad that supports error tracking and state management. It includes combinators for composing decoders through chaining, mapping, and combining operations, along with utilities for field access, dynamic decoder selection, and recursive decoding. Common use cases involve parsing CBOR-encoded data from strings or files, transforming values with customizable error handling, and extracting specific fields or indices from complex structures using optional/default patterns.",
      "description_length": 638,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_cbor",
      "library": "decoders-cbor",
      "description": "This module decodes and encodes CBOR data using a monadic decoder with error handling and state management, supporting structured data like lists, arrays, and objects. It provides combinators for composing decoders, extracting fields, and handling recursive or dynamic structures, along with direct encoding of OCaml values to CBOR. Use cases include parsing CBOR-encoded API responses, configuration files, or persisted state with precise error handling and selective decoding.",
      "description_length": 478,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 638,
    "min_description_length": 331,
    "avg_description_length": 452.4,
    "embedding_file_size_mb": 0.0728750228881836
  }
}