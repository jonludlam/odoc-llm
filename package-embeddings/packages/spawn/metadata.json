{
  "package": "spawn",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:54:41.872073",
  "modules": [
    {
      "module_path": "Spawn.Working_dir",
      "library": "spawn",
      "description": "Handles working directory specification for process spawning operations. It accepts paths, file descriptors pointing to directories (Unix-only), or the `Inherit` directive to propagate the parent's working directory. This module is used to configure the execution context of child processes created through the spawn library.",
      "description_length": 325,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Spawn.Env",
      "library": "spawn",
      "description": "Handles environment variable manipulation for process spawning. It provides a function to construct an environment from a list of key-value strings. This is used to configure the environment of a new process when spawning.",
      "description_length": 222,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spawn.Unix_backend",
      "library": "spawn",
      "description": "This module defines the backend strategy for process spawning on Unix systems, specifically using either `fork` or `vfork`. It provides a `default` value that selects the appropriate strategy based on the `SPAWN_USE_FORK` environment variable. Use this module to control process creation behavior in low-level system tooling or when fine-grained control over forking is required.",
      "description_length": 379,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spawn.Pgid",
      "library": "spawn",
      "description": "Handles process group ID manipulation for process management. Provides values representing process group IDs and operations to create a new process group or convert a process ID into a group ID. Useful when spawning child processes that need to be grouped under a specific ID, such as managing job control or signal handling in Unix environments.",
      "description_length": 346,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spawn",
      "library": "spawn",
      "description": "This module spawns child processes with configurable environment, working directory, and process group settings. It provides direct control over process creation parameters like signal masks, file descriptors, and forking strategy via `vfork` or `fork`. Concrete use cases include building custom process supervisors, managing job control in Unix shells, and fine-grained orchestration of external commands with specific execution contexts.",
      "description_length": 440,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 440,
    "min_description_length": 222,
    "avg_description_length": 342.4,
    "embedding_file_size_mb": 0.07282733917236328
  }
}