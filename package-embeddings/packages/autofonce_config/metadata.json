{
  "package": "autofonce_config",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 10,
  "creation_timestamp": "2025-08-14T23:06:17.269884",
  "modules": [
    {
      "module_path": "Autofonce_config.EzToml.ENCODING",
      "library": "autofonce_config",
      "description": "Converts an encoding for a value type into an encoding for a string map of that type. Works with string maps and TOML encodings. Useful for serializing dictionaries with string keys to TOML format.",
      "description_length": 197,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.EzToml.CONST",
      "library": "autofonce_config",
      "description": "This module provides functions to convert various OCaml values like strings, booleans, and lists into TOML values, along with utilities to construct file options and generate string representations of TOML sections. It works directly with TOML AST types and common OCaml types such as `string`, `bool`, `string list`, and `option`. These functions are used to programmatically build TOML configuration files from OCaml data structures.",
      "description_length": 435,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.EzToml.EZ",
      "library": "autofonce_config",
      "description": "This module provides functions for creating, modifying, and querying TOML tables, including parsing from and converting to strings, safely handling keys, and mapping values. It works directly with TOML tables, keys, and parser results, offering typed access and transformation of configuration data. Concrete use cases include loading and manipulating TOML-based configuration files, extracting specific values from TOML structures, and converting TOML data between different representations.",
      "description_length": 492,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.EzToml.TYPES",
      "library": "autofonce_config",
      "description": "This module defines the data structures used to represent TOML documents, including tables and arrays with typed values. It supports operations for constructing and deconstructing TOML data with specific types such as booleans, integers, floats, strings, dates, nested arrays, and tables. Concrete use cases include parsing and manipulating configuration files in TOML format.",
      "description_length": 376,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.Types",
      "library": "autofonce_config",
      "description": "This module defines core data structures for representing configuration settings in a testing framework. It includes types for environment sources, test suite configurations, and project-wide settings, supporting precise specification of test environments and execution contexts. These types are used to parse and store configuration files that determine how tests are discovered and executed across different directories.",
      "description_length": 422,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.EzToml",
      "library": "autofonce_config",
      "description": "This module enables parsing, reading, and writing TOML data structures with typed access to values through key-path navigation, supporting nested configurations and custom type encodings. It operates on TOML tables and values, offering utilities to serialize OCaml values into TOML format, manage configuration sections programmatically, and handle errors during parsing or conversion. Use cases include loading structured configuration files, extracting typed values with fallback defaults, and transforming TOML data while preserving type safety and schema constraints.",
      "description_length": 571,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.Globals",
      "library": "autofonce_config",
      "description": "Stores and provides access to global configuration paths and environment variables used across the application. It defines string values for directories and files related to project configuration, build outputs, and test environments. Used to centralize and standardize access to key paths without hardcoding them in multiple modules.",
      "description_length": 334,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.Version",
      "library": "autofonce_config",
      "description": "Stores and exposes version metadata including the current version string, optional commit hash, and optional commit date. Works with basic types like strings and options to represent build-time information. Used to provide version details for diagnostics, logging, or API endpoints.",
      "description_length": 282,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.Project_config",
      "library": "autofonce_config",
      "description": "Handles parsing and serialization of project configuration data. Works with strings and files, converting between JSON-like structures and the project_config type. Used to load configurations from disk or strings, and save them back in a consistent format.",
      "description_length": 256,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config",
      "library": "autofonce_config",
      "description": "This module organizes configuration handling for a testing framework, providing TOML parsing with type-safe access, global path definitions, project configuration serialization, core configuration types, and version metadata management. It works with TOML tables, file paths, JSON-like structures, and basic types to support loading and transforming structured configurations, managing environment variables, and exposing build-time version info. Concrete use cases include reading test suite settings from TOML files, standardizing access to project directories, and embedding version data into logs or diagnostics.",
      "description_length": 616,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 616,
    "min_description_length": 197,
    "avg_description_length": 398.1,
    "embedding_file_size_mb": 0.14535236358642578
  }
}