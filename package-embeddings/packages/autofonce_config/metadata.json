{
  "package": "autofonce_config",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-07-15T23:06:21.355717",
  "modules": [
    {
      "module_path": "Autofonce_config.EzToml.ENCODING",
      "library": "autofonce_config",
      "description": "Converts an encoding for a value type into an encoding for a string map of that type. Works with string maps and TOML encodings. Useful for serializing dictionaries with string keys to TOML format.",
      "description_length": 197,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.EzToml.EZ",
      "library": "autofonce_config",
      "description": "This module provides functions for creating, modifying, and querying TOML tables, including parsing from and printing to string and file. It supports operations like key creation, value lookup, table mapping, and location reporting, working directly with `Toml.Types.Table` and `Toml.Parser` results. Concrete use cases include loading configuration files, transforming TOML data structures, and handling parsing errors with both safe and exception-raising variants.",
      "description_length": 466,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.EzToml.CONST",
      "library": "autofonce_config",
      "description": "This module provides functions to convert basic OCaml types like strings, booleans, and lists into TOML values, handling optional and list variants. It includes utilities to define TOML file options with metadata like comments and defaults, and to generate string representations of option sections. These operations are used to construct and serialize configuration data into TOML format programmatically.",
      "description_length": 406,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_config.EzToml.TYPES",
      "library": "autofonce_config",
      "description": "This module defines the data types used to represent TOML values, including arrays and tables. It provides a structured way to parse and manipulate TOML data with specific variants for primitive types and nested structures. Concrete use cases include reading configuration files, validating TOML input, and mapping TOML data to OCaml values.",
      "description_length": 341,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.Types",
      "library": "autofonce_config",
      "description": "This module defines core data structures for representing configuration settings in a testing framework. It includes types for environment sources, test suite configurations, and project-wide settings, supporting precise setup and execution contexts. These structures are used to parse and manage configuration files, resolve build and source directories, and specify test execution environments.",
      "description_length": 396,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.Globals",
      "library": "autofonce_config",
      "description": "This module defines string constants for file paths used in the project, including directories for configuration, build artifacts, tests, and environment scripts. It provides direct access to these paths as values, enabling consistent referencing across the codebase. Concrete use cases include locating test files, building project outputs, and managing environment variables through shell scripts.",
      "description_length": 399,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.EzToml",
      "library": "autofonce_config",
      "description": "This module handles TOML configuration data with support for parsing, encoding, and manipulating nested tables, scalar values, lists, and optional fields. It provides direct access to TOML abstract syntax trees, flat key-value mappings, and utilities for preserving metadata like comments and defaults during configuration transformations. Operations include type-safe value access, table manipulation, and serialization of string-keyed maps into TOML format, with concrete uses in loading and persisting application settings. Submodules enhance this functionality by enabling dictionary encoding, table construction, basic type conversion, and direct AST manipulation.",
      "description_length": 669,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.Project_config",
      "library": "autofonce_config",
      "description": "Handles parsing and serialization of project configuration data. Works with strings and files to convert between JSON-like structures and an internal project_config type. Used to load configurations from disk or strings, and save them back in a consistent format.",
      "description_length": 263,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_config.Version",
      "library": "autofonce_config",
      "description": "Stores and exposes version metadata including the current version string, optional commit hash, and optional commit date. Works with basic types like strings and options to represent build-time information. Used to report version details in logs, APIs, or diagnostic outputs.",
      "description_length": 275,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_config",
      "library": "autofonce_config",
      "description": "This module manages configuration data for a testing framework, providing structured representations of test environments, project settings, and version metadata. It supports parsing and serializing configurations in TOML and JSON-like formats, resolves file paths for build, test, and configuration directories, and preserves metadata during transformations. Key data types include environment sources, test suite configurations, TOML ASTs, and version information with commit details. You can load and save project settings, access version data for diagnostics, and manipulate structured configuration files while retaining comments and defaults.",
      "description_length": 648,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 669,
    "min_description_length": 197,
    "avg_description_length": 406.0,
    "embedding_file_size_mb": 0.03678703308105469
  }
}