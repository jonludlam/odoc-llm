{
  "package": "autofonce_core",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:32.604730",
  "modules": [
    {
      "module_path": "Autofonce_core.Version",
      "library": "autofonce_core",
      "description": "This module defines version metadata including a version string, optional commit hash, and optional commit date. It works with basic string and option types to represent build-time version information. Concrete use cases include embedding version details into binaries or exposing them through command-line interfaces.",
      "description_length": 318,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_core.Types",
      "library": "autofonce_core",
      "description": "This module defines core data types and string conversion functions for representing test checks and their execution context. It includes structured types for test locations, check outputs, and detailed check configurations with associated commands, expected results, and conditional actions. These types and functions support precise test specification and reporting by encoding test steps, outcomes, and dependencies directly in the data model.",
      "description_length": 446,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_core.Parser",
      "library": "autofonce_core",
      "description": "Converts location information to string names, escapes strings for M4 processing, and reads test suites from files. Operates on strings, file paths, and structured test suite data. Used to parse input files into executable test suites while handling location tracking and macro expansion.",
      "description_length": 288,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_core",
      "library": "autofonce_core",
      "description": "This module provides types and utilities for managing version metadata, test specifications, and file-based test suite processing. It centers around data types for versions, test checks, execution contexts, and file-backed test suites, with operations for string conversion, macro escaping, and structured parsing. You can embed version info in binaries, define tests with expected outcomes and commands, and load test suites from files while preserving location data and handling macro expansion.",
      "description_length": 497,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 497,
    "min_description_length": 288,
    "avg_description_length": 387.25,
    "embedding_file_size_mb": 0.014908790588378906
  }
}