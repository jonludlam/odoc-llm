{
  "package": "stog",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 58,
  "creation_timestamp": "2025-08-15T15:02:52.503977",
  "modules": [
    {
      "module_path": "Stog_main",
      "library": "stog.main",
      "description": "This module manages configuration and execution workflows for static site generation, supporting operations like parsing command-line options, initializing templating and caching systems, and triggering site builds from directories or files. It operates on file paths, content types, and logging configurations, enabling use cases such as template-driven site generation, incremental builds with caching, and CLI-based customization with structured log output for debugging.",
      "description_length": 474,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog_ocaml_session_main",
      "library": "stog.ocaml_session_main",
      "description": "This module initializes and manages an OCaml toplevel session, handling input/output redirection, logging, and evaluation of OCaml phrases. It works with OCaml abstract syntax trees, file paths, and input/output channels. Concrete use cases include setting up a custom OCaml REPL environment, evaluating user-provided code snippets, and managing session-specific directories and packages.",
      "description_length": 388,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog_base.Misc",
      "library": "stog.base",
      "description": "This module offers functions for string manipulation, file system queries, list processing, and system interactions. It operates on strings, files, lists, timestamps, and optional values, enabling tasks like converting optional strings, computing relative paths, deduplicating lists, and checking file extensions. Specific applications include handling file metadata, transforming text data, and managing hierarchical path relationships.",
      "description_length": 437,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog_base.Ocaml_types",
      "library": "stog.base",
      "description": "This module defines types and serialization functions for exchanging OCaml code and evaluation results between processes. It handles input/output communication using custom `input` and `result` types, supporting marshaling to and from channels. It is used to send OCaml expressions to an evaluation session and retrieve structured outputs, including success, error, or exception cases.",
      "description_length": 385,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog_base",
      "library": "stog.base",
      "description": "This module includes two submodules: `Misc` provides concrete operations for string manipulation, file system queries, list deduplication, and timestamp handling, working directly with strings, paths, lists, and optional values. `Ocaml_types` defines types and serialization logic for transmitting OCaml expressions and evaluation outcomes between processes, using channels for communication. It supports use cases like dynamic code evaluation, file metadata processing, and structured inter-process data exchange.",
      "description_length": 514,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Path.Map",
      "library": "stog",
      "description": "This module offers ordered map operations for key-value pairs where keys represent hierarchical document paths, supporting efficient insertion, lookup, filtering, and ordered traversal. It provides transformations like mapping, folding, and partitioning, along with utilities for sequence conversion and range-based iteration, all maintaining key ordering. Designed for scenarios requiring hierarchical path management, it enables use cases such as document routing, path-based data aggregation, and ordered traversal of nested structures in document processing systems.",
      "description_length": 570,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Graph.Make_with_map",
      "library": "stog",
      "description": "This module implements directed, annotated graphs using a map-based structure where nodes are keys and edges carry associated data. It supports operations to modify graph topology (adding/removing nodes/edges, reversing direction), traverse relationships (predecessors, successors), and analyze paths (topological sorting, shortest paths with customizable edge costs). Use cases include dependency resolution, dynamic graph visualization via Graphviz output, and pathfinding in weighted networks.",
      "description_length": 496,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Trie.Make",
      "library": "stog",
      "description": "This module implements a trie structure for storing and retrieving data associated with paths, where each path is a list of symbols. It supports operations to add a value to a path, find all values associated with a specific path or its subpaths, and convert the trie to a string representation. Use cases include efficiently managing hierarchical data like file system paths or nested configuration keys.",
      "description_length": 405,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Types.Doc_set",
      "library": "stog",
      "description": "This module implements ordered sets of document identifiers with safe insertion, deletion, and membership checks, offering both strict and optional-result variants. It supports set algebra operations (union, intersection, difference), ordered iteration, and transformations like filtering or mapping while preserving element ordering. Designed for managing document collections, it enables efficient subset queries, ordered sequence conversions, and batch updates from iterables\u2014ideal for document indexing, dependency tracking, or version control systems requiring deterministic ordering.",
      "description_length": 589,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Graph.Make",
      "library": "stog",
      "description": "This module implements directed multigraphs with annotated edges and customizable vertex ordering, supporting operations like edge insertion with uniqueness constraints, node isolation, and graph reversal. It works with parameterized vertex keys (via a map module) and edge annotations that define comparison and cost metrics, enabling weighted traversals. Typical applications include dependency tracking, network routing with cost optimization, and generating visual representations of graph structures.",
      "description_length": 505,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Blocks.Smap",
      "library": "stog",
      "description": "This module implements a string-keyed map structure with ordered keys, supporting insertion, merging, and querying operations alongside transformations like `map`, `filter`, and `fold` that process bindings in key order. It provides utilities for sequence-based construction (`of_seq`, `add_seq`) and traversal (`to_seq_from`), enabling efficient data aggregation and iteration. Key use cases include managing hierarchical data configurations, processing ordered key-value collections with physical equality optimizations, and scenarios requiring deterministic binding enumeration or bulk transformations.",
      "description_length": 605,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Install.Sites",
      "library": "stog",
      "description": "This module defines lists of module and template locations used during site installation. It works with `Dune_site.Private_.Helpers.Location.t` values to specify where modules and templates are located. Concrete use cases include configuring installation paths for Dune-based projects during site setup.",
      "description_length": 303,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Types.Path_trie",
      "library": "stog",
      "description": "This module implements a trie structure for mapping paths to data, where paths are lists of string symbols. It supports adding entries to the trie, looking up data associated with a path or its subpaths, and converting the trie to a string representation. It is useful for hierarchical path-based data storage, such as routing or directory structure management.",
      "description_length": 361,
      "index": 12,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Stog.Of_latex.SMap",
      "library": "stog",
      "description": "This module implements a string-keyed map with ordered key operations, supporting value manipulation through standard transformations like addition, filtering, and merging, as well as ordered traversal and bulk updates from sequences. It handles arbitrary value types while maintaining key ordering, enabling use cases such as mapping LaTeX macros to Stog constructs, managing configuration overlays, or accumulating document metadata during translation. Key features include ordered iteration, list-specific mutations, and equality-preserving immutability optimizations for efficient document model assembly.",
      "description_length": 609,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Types.Int_map",
      "library": "stog",
      "description": "This module implements ordered integer-keyed maps with pure functional transformations, supporting construction (empty, singleton), modification (add, remove, update), and combination (merge, union) operations. It emphasizes ordered key traversal through list and sequence conversions (of_seq, to_seq_from), bidirectional iteration (to_rev_seq), and monotonic predicate-based queries. Typical applications include sparse integer-indexed data processing, frequency mapping, and ordered key-range accumulations where deterministic traversal and efficient key-based composition are required.",
      "description_length": 588,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Types.Str_map",
      "library": "stog",
      "description": "This module implements a persistent map structure for string-keyed associations, supporting insertion, deletion, ordered traversal, and lookup operations. It offers advanced transformations like merging, union, and list-accumulating updates, along with conversions between maps, lists, and sequences for ordered processing. Such functionality is useful for maintaining sorted key-value collections, combining configurations, or aggregating values into keyed lists while preserving immutability.",
      "description_length": 494,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Types.Graph",
      "library": "stog",
      "description": "This module implements directed graphs with labeled edges, supporting structural manipulation (edge addition/removal, reversal), traversal (predecessor/successor queries, recursive annotation-based walks), and analysis (cycle-agnostic topological sorting, cost-driven shortest paths). It operates on node-keyed document IDs and edge-annotated types, enabling applications like dependency resolution, path optimization with weighted annotations, and Graphviz visualization. Recursive traversal patterns and customizable DOT formatting further aid in processing hierarchical or annotated graph structures.",
      "description_length": 603,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Types.Depset",
      "library": "stog",
      "description": "This module provides ordered sets for managing collections of dependency elements with operations like union, intersection, ordered traversal, and sequence conversion. It works with a set type that maintains element ordering, supporting transformations, membership checks, and efficient modifications while preserving physical equality for unchanged structures. Typical use cases include dependency resolution workflows, incremental set updates with ordered processing, and bridging list/sequence-based data flows with set semantics.",
      "description_length": 533,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Tags",
      "library": "stog",
      "description": "This module provides predefined string constants serving as tags to manage document metadata, structural elements, and control identifiers during processing and templating. They operate on string data to handle content inclusion, formatting, language-specific handling, and layout controls, supporting tasks like site generation, TOC creation, and date formatting. Specific use cases include marking document properties (titles, paths), structural components (blocks, lists), separators, and special content directives (CDATAs, XML markers).",
      "description_length": 541,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Intl",
      "library": "stog",
      "description": "This module handles internationalization for date-related formatting by providing predefined language data for French and English, allowing registration of custom languages with month and day names, and formatting dates and datetimes according to the selected language. It operates on language abbreviations, date values, and optional dates, using arrays of localized strings for months and days. Concrete use cases include displaying blog post dates in different languages, formatting event schedules, and localizing datetime strings in generated HTML content.",
      "description_length": 561,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Dyn",
      "library": "stog",
      "description": "This module handles dynamic loading of code by providing functions to load files and OCaml packages at runtime. It works with lists of file paths and package names, ensuring files have extensions before loading. Concrete use cases include extending program functionality by loading plugins or external modules specified at runtime.",
      "description_length": 331,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Deps",
      "library": "stog",
      "description": "This module manages dependencies between documents in a static site generator. It provides functions to add dependencies, compute the latest modification date among dependencies, and retrieve the latest date for a document's dependencies. It works with document and dependency data structures to support incremental builds and dependency tracking.",
      "description_length": 347,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Engine",
      "library": "stog",
      "description": "The engine orchestrates document generation and environment manipulation by resolving document paths, applying transformation rules with contextual data, and managing hierarchical environments. It operates on modules, definitions, and documents while enabling dynamic module resolution and rule-based processing. This supports use cases like static site generation where content is dynamically assembled from modular components and contextualized templates.",
      "description_length": 457,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Log",
      "library": "stog",
      "description": "This module provides functions for logging messages at different severity levels (debug, info, warn, err, app) and supports setting log levels dynamically via string input. It works with log sources, message formatting functions, and location tags from the `Xtmpl.Types` module. Concrete use cases include tracking execution flow, reporting errors with optional fatal exit codes, and displaying contextual information during document processing.",
      "description_length": 445,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Filter",
      "library": "stog",
      "description": "Converts string expressions into document filtering functions and applies them to lists of documents. Works with document IDs and document data structures to select or transform content based on filter criteria. Useful for generating dynamic document collections like tag-based indexes or conditional content displays.",
      "description_length": 318,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Latex",
      "library": "stog",
      "description": "This module provides functions to process and render LaTeX content, including converting LaTeX to SVG images and rewriting LaTeX elements in templates. It works with strings representing LaTeX code and supports customization through packages, scaling, and definition files. Concrete use cases include embedding mathematical expressions in web pages and transforming LaTeX snippets during static site generation.",
      "description_length": 411,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Exec",
      "library": "stog",
      "description": "Handles execution and rendering of shell commands within generated documentation pages. Works with `Stog.Types.stog` and `Xtmpl.Rewrite.callback` to dynamically embed command output into templates. Useful for displaying live code examples or system command results in static documentation.",
      "description_length": 289,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Cut",
      "library": "stog",
      "description": "This module handles splitting documents into smaller pieces based on a specified level in the base structure. It provides `mk_path` for constructing new paths from existing ones and a separator, and `cut_docs` for processing a set of documents into a transformed output structure. It works primarily with paths, document sets, and environment configurations, used when generating hierarchical document views or paginated content.",
      "description_length": 429,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Blocks",
      "library": "stog",
      "description": "This module defines a `block` type representing structured document elements with metadata like identifiers, labels, classes, and formatted content. It provides functions to construct blocks (`mk_block`), convert them to document trees (`node_of_block`), and build processing modules (`make_module`). Concrete use cases include assembling and transforming structured content for documentation generation, where blocks represent sections, figures, or code examples with associated attributes and rendering rules.",
      "description_length": 511,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Html",
      "library": "stog",
      "description": "This module includes functions for resolving document references from href strings, escaping HTML entities, and constructing URLs from paths. It operates on documents, paths, and environments, supporting tasks like document lookup by path fragments and dynamic URL generation. Specific use cases include rendering document links with correct paths and handling fragment identifiers within HTML content.",
      "description_length": 402,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Version",
      "library": "stog",
      "description": "Returns the version number of the software as a string. Works with no input parameters and produces a textual representation of the current version. Useful for displaying version information in user interfaces or logs.",
      "description_length": 218,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Filter_parser",
      "library": "stog",
      "description": "Parses logical filter expressions into an abstract syntax tree for evaluation. It processes tokens like attributes, operators, and logical connectives to build filter conditions. Used to implement query-like filtering over structured data, such as selecting elements based on attribute values.",
      "description_length": 293,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Filter_lexer",
      "library": "stog",
      "description": "This module implements a lexer for parsing filter expressions, handling input through `Lexing.lexbuf` and producing tokens consumed by the filter parser. It includes functions for lexing strings and managing internal lexing state, such as `main` for entry-point lexing and recursive helpers for string processing. Concrete use cases include parsing conditional filters in configuration files or transforming structured text into executable filter logic.",
      "description_length": 453,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Of_latex",
      "library": "stog",
      "description": "This module translates LaTeX documents into Stog's internal document model, handling structure conversion, macro expansion, and metadata extraction. It processes LaTeX files into typed trees, supporting customizable parsing parameters such as macro prefixes, environment handling, and image size mappings. Concrete use cases include converting LaTeX-based articles into structured XML for documentation generation, and extracting document metadata like section hierarchies or image references during static site generation.",
      "description_length": 523,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Io",
      "library": "stog",
      "description": "This module handles the construction and manipulation of a stog structure from a project directory tree. It provides functions to read modules, parse documents from files, and populate document attributes and content. Concrete use cases include initializing a stog site from a directory, loading document metadata and body from a file path, and updating document fields using attributes and substitutions.",
      "description_length": 405,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Svg",
      "library": "stog",
      "description": "Transforms SVG documents by prefixing all ID attributes with a specified string, ensuring uniqueness when embedding multiple SVGs in a single document. Works directly with XML trees representing SVG content. Useful for safely combining multiple SVG files into a single HTML page without ID conflicts.",
      "description_length": 300,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Types",
      "library": "stog",
      "description": "This module provides document lookup, dependency management, and hierarchical path organization through persistent, ordered collections like maps, sets, and tries. It operates on structured data types including documents, file trees, and graphs, enabling efficient traversal and transformation for tasks like static site generation. Specific use cases involve resolving document references, sorting content by metadata, and managing dependencies in build systems.",
      "description_length": 463,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Doclist",
      "library": "stog",
      "description": "Handles document listing operations with filtering, sorting, and limiting capabilities. Works with document sets and document type lists, allowing retrieval based on type, maximum count, and reverse order. Used to generate structured document collections for templating or rendering purposes.",
      "description_length": 292,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Url",
      "library": "stog",
      "description": "This module handles URL manipulation and construction, providing operations to create URLs from strings, modify paths, fragments, and query parameters, and extract components like scheme, host, and port. It works with a custom URL type and supports structured configuration of public and private URLs. Concrete use cases include building absolute URLs from components, normalizing paths by removing trailing slashes, and updating URL fragments or paths in web applications.",
      "description_length": 473,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Highlight",
      "library": "stog",
      "description": "This module provides functions for syntax highlighting code snippets, producing XHTML output. It supports both internal language-specific highlighting (via Higlo) and an external command for fallback or custom options. Use cases include rendering code examples in documentation or web pages with proper syntax formatting.",
      "description_length": 321,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Config",
      "library": "stog",
      "description": "This module handles reading and managing configuration settings for a Stog project. It provides functions to locate configuration files and directories, as well as to parse and write configuration data. The main data structures include lists of ignored files, document paths, and module-specific log levels.",
      "description_length": 307,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Plug",
      "library": "stog",
      "description": "This module defines an interface for plugins to register configuration, language data, and HTML processing rules. It provides functions to resolve document references by href, create block nodes with metadata, and manage document dependencies. It works with document structures, XML trees, and internationalization data to support custom processing during document generation.",
      "description_length": 376,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Install",
      "library": "stog",
      "description": "This module manages installation configurations for Dune-based projects by defining locations of modules and templates. It operates on `Dune_site.Private_.Helpers.Location.t` values to specify and organize installation paths. Concrete use cases include setting up site-specific module and template directories during project installation.",
      "description_length": 338,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Graph",
      "library": "stog",
      "description": "This module implements directed graphs with annotated edges and supports operations for adding and removing nodes and edges, as well as traversing the graph in depth-first or breadth-first order. It works with nodes of any hashable type and edges that carry arbitrary annotations. Concrete use cases include representing control flow graphs, dependency networks, and routing structures in analysis or transformation tools.",
      "description_length": 422,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Find",
      "library": "stog",
      "description": "This module provides functions to search for files with customizable filters such as depth, file type, and name patterns. It supports operations like applying a function to each matched file or collecting results into a list. Concrete use cases include scanning directories for specific file types, filtering by modification time, or traversing directory trees with depth limits.",
      "description_length": 379,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Filter_types",
      "library": "stog",
      "description": "This module defines a recursive type for representing document filters, including logical operations like AND, OR, and NOT, as well as predicate checks on XML elements by name and value. It is used to build and manipulate filter expressions that can be applied to XML documents. Concrete use cases include selecting or excluding document sections based on tag names and attributes during document processing.",
      "description_length": 408,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Html5",
      "library": "stog",
      "description": "Converts self-closing XML tags into non-self-closing HTML5 tags, except for HTML5 void elements like `img` or `br`. Works with XML tree structures from the `Xtmpl.Rewrite` module. Useful for ensuring valid HTML5 output when generating markup from XML sources.",
      "description_length": 259,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Ocaml",
      "library": "stog",
      "description": "This module evaluates OCaml code snippets and integrates their output into generated documentation pages. It supports interactive sessions, code evaluation with directory context, and formatting of results within a templating system. Concrete uses include embedding executable examples, type-checking code blocks, and displaying evaluation results inline with documentation.",
      "description_length": 374,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Error",
      "library": "stog",
      "description": "This module defines error handling operations for template processing, including functions to raise errors with optional source locations. It works with a custom `error` type and exceptions, providing specific error constructors for common issues like missing template files or invalid dates. Concrete use cases include reporting template file not found errors and formatting invalid date errors with context.",
      "description_length": 409,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Tmap",
      "library": "stog",
      "description": "This module implements a typed map structure with operations to create, modify, and query bindings using keys of a specified type. It supports key comparison, value retrieval, and iteration, along with functions to add, remove, or update entries while maintaining a consistent key ordering. Concrete use cases include managing symbol tables with unique identifiers or tracking versioned data entries by structured keys.",
      "description_length": 419,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Info",
      "library": "stog",
      "description": "This module computes internal document graphs, date-based document navigation, and Graphviz representations from a stog structure. It operates on `Stog.Types.stog` and `Stog.Types.Graph.key`, generating document relationships and filtering unpublished content. Concrete uses include visualizing document links with metadata, navigating chronologically between documents, and pruning unpublished documents from a site structure.",
      "description_length": 427,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Init",
      "library": "stog",
      "description": "This module initializes document processing structures by loading content from directories or files, applying field transformations to the resulting document set. It operates on `Stog.Types.stog` values, which represent collections of structured documents. Use it to bootstrap document processing pipelines from filesystem inputs with optional metadata customization.",
      "description_length": 367,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Server_mode",
      "library": "stog",
      "description": "This module manages server configuration through mutable references for HTTP and WebSocket URLs, including optional public URL variants. It defines a polymorphic server mode type that distinguishes between single and multi-server setups, each accepting specific functions to handle server initialization. Concrete use cases include setting up a single server with a predefined configuration or launching multiple servers from a list of arguments.",
      "description_length": 446,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Date",
      "library": "stog",
      "description": "This module handles date parsing, formatting, and manipulation. It provides functions to convert dates to and from strings, floats, and date-time components, along with retrieving the current date and day of the week. Use it to process date inputs, generate timestamps, or extract weekday information for scheduling.",
      "description_length": 316,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Trie",
      "library": "stog",
      "description": "This module implements a trie structure for storing and retrieving data associated with paths, where each path is a list of symbols. It supports operations to add a value to a path, find all values associated with a specific path or its subpaths, and convert the trie to a string representation. Use cases include efficiently managing hierarchical data like file system paths or nested configuration keys.",
      "description_length": 405,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Path",
      "library": "stog",
      "description": "This module represents and manipulates hierarchical document paths as lists of strings with absolute/relative indicators. It supports operations like path construction, appending components, extracting parents, removing extensions, and string conversion. Concrete use cases include document routing, hierarchical data aggregation, and managing nested file structures in document processing pipelines.",
      "description_length": 400,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Tmpl",
      "library": "stog",
      "description": "This module provides functions for resolving and reading template files, processing them into structured content used for generating documents. It operates on `stog` and `doc` types, handling template paths, dependencies, and content rewriting. Concrete use cases include rendering pages, organizing content by keyword or topic, generating RSS feeds, and producing document lists.",
      "description_length": 380,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog",
      "library": "stog",
      "description": "This module facilitates structured document processing through operations like splitting, filtering, and translating formats (e.g., LaTeX to XML), alongside configuration management, dependency tracking, and dynamic OCaml code execution. It handles data structures such as document blocks,",
      "description_length": 289,
      "index": 57,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 61,
    "meaningful_modules": 58,
    "filtered_empty_modules": 3,
    "retention_rate": 0.9508196721311475
  },
  "statistics": {
    "max_description_length": 609,
    "min_description_length": 218,
    "avg_description_length": 420.05172413793105,
    "embedding_file_size_mb": 0.8406705856323242
  }
}