{
  "package": "stog",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 65,
  "creation_timestamp": "2025-07-15T23:17:08.256229",
  "modules": [
    {
      "module_path": "Stog_main",
      "library": "stog.main",
      "description": "This module orchestrates static site generation by configuring input/output paths, templating settings, and caching strategies, while managing command-line interface interactions and execution modes. It operates on configuration records, file paths, and log streams, with specific patterns for parsing CLI arguments, validating file types, and initializing site builds. Key use cases include setting up generator parameters from user input, handling directory/file-based content sources, and controlling output verbosity through logging configurations.",
      "description_length": 552,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog_base.Misc",
      "library": "stog.base",
      "description": "The module supports text processing tasks like splitting, stripping, and lowercasing, along with file operations such as reading, writing, and directory creation. It handles list transformations including deduplication and concatenation, and provides utilities for metadata extraction, path manipulation, and time formatting. These operations work on strings, lists, file paths, and time values, addressing use cases such as content hashing, file extension extraction, and timestamp normalization.",
      "description_length": 497,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog_base.Ocaml_types",
      "library": "stog.base",
      "description": "This module defines types and functions for exchanging data between Stog and an OCaml session. It includes serialization and deserialization functions for input and result values, enabling communication over channels. It is used to send OCaml code snippets and receive execution outputs or errors in a structured format.",
      "description_length": 320,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog_base",
      "library": "stog.base",
      "description": "This module provides text processing, file manipulation, and data exchange capabilities. It supports operations like string transformation, file I/O, list processing, path and time handling, along with serialization and deserialization for communicating with OCaml sessions. You can use it to process and normalize content, manage files and directories, or send code snippets and retrieve structured results. Examples include extracting file extensions, normalizing timestamps, and exchanging data over channels.",
      "description_length": 512,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog_ocaml_session_main",
      "library": "stog.ocaml_session_main",
      "description": "This module initializes and manages an OCaml toplevel session, handling input/output redirection, logging, and evaluation of OCaml phrases. It works with OCaml abstract syntax trees, file paths, and input/output channels. Concrete use cases include embedding an interactive OCaml environment, processing user input with custom preprocessing, and logging session output to files.",
      "description_length": 378,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Types.Path_trie",
      "library": "stog",
      "description": "This module implements a trie structure for mapping paths to data, where paths are lists of string symbols. It supports adding entries to the trie, retrieving all data associated with a specific path or its subpaths, and converting the trie to a string representation. It is useful for hierarchical path-based lookups, such as routing or configuration resolution.",
      "description_length": 363,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Path.Set",
      "library": "stog",
      "description": "This module supports union, intersection, difference, and ordered traversal operations on sets of document paths, leveraging comparison-based ordering and `option`-typed presence checks. It works with sets of `Stog.Path.path` values, offering transformations like `map`, `filter`, and sequence-based construction while preserving sorted iteration. Specific use cases include managing hierarchical path structures for document routing, resolving path dependencies, or generating ordered path listings for traversal validation.",
      "description_length": 525,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Engine.Module",
      "library": "stog",
      "description": "This module defines a data type `data` and a value `modul` that represents a rewrite engine module. It includes functions `cache_load` and `cache_store` for managing cached data during document processing. These operations support efficient reloading and storing of document-specific state within a static site generator.",
      "description_length": 321,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Graph.GMap",
      "library": "stog",
      "description": "Maps keys to values within a graph structure, enabling efficient insertion, retrieval, and removal of key-value pairs. Supports operations like `set`, `get`, and `remove`, along with traversal via `fold` and `iter`. Useful for maintaining per-node or per-edge metadata in sparse graphs, such as labels, weights, or annotations.",
      "description_length": 327,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Install.Sites",
      "library": "stog",
      "description": "This module defines lists of module and template locations used for site installation. It provides direct access to predefined paths for Dune site modules and templates. Useful for retrieving resource locations during site setup or configuration tasks.",
      "description_length": 252,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Trie.Make",
      "library": "stog",
      "description": "This module implements a trie structure for storing and retrieving data associated with paths, where each path is a list of symbols from a parameterized type. It supports operations to add a path with associated data, find all data linked to a specific path or its subpaths, and convert the trie to a string representation. Use cases include efficiently managing hierarchical path-based data like file system routes or nested configuration keys.",
      "description_length": 445,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Blocks.Smap",
      "library": "stog",
      "description": "This module provides a string-keyed map implementation with ordered traversal, supporting functional updates like insertion, deletion, merging, and conditional value transformations, alongside ordered iteration, key-based filtering, and partitioning. It operates on maps storing arbitrary values with lexicographically ordered keys, enabling efficient aggregation, subset selection, and ordered binding enumeration. Specific use cases include hierarchical data aggregation, configuration composition with precedence rules, and ordered key-value sequence processing pipelines.",
      "description_length": 575,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Of_latex.SMap",
      "library": "stog",
      "description": "This module provides string-keyed map operations for functional updates (e.g., adding, merging, filtering), ordered traversal (e.g., searching, folding, splitting), and sequence-based transformations (e.g., converting to/from sequences, bulk insertion). It works with ordered maps where keys are strings and values can be arbitrary types, including lists, while preserving key order and optimizing structural sharing. It is particularly useful for managing LaTeX macro definitions, document metadata, or structured configurations where ordered string-keyed data manipulation is required.",
      "description_length": 587,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Trie.S",
      "library": "stog",
      "description": "This module implements a trie structure for storing and retrieving data associated with paths, where each path is a list of symbols. It supports operations to add a path with its associated data, find all data linked to a specific path or its extensions, and convert the trie into a string representation. Use cases include efficiently managing hierarchical path-based data, such as routing tables, file system structures, or prefix-based indexing.",
      "description_length": 448,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Graph.Make_with_map",
      "library": "stog",
      "description": "This module implements directed multigraphs with typed edges and keys, supporting operations like edge/node manipulation, recursive traversal of predecessors/successors, graph reversal, and isolation of nodes. It leverages OCaml's Map module for efficient internal representation and provides advanced analysis features such as topological sorting, shortest path computation with customizable metrics, and Graphviz DOT output generation. Typical applications include dependency tracking, network flow analysis, and hierarchical data visualization where annotated graph structures require flexible traversal and transformation.",
      "description_length": 626,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Types.Depset",
      "library": "stog",
      "description": "This module implements an ordered set structure for dependency values, supporting operations like union, intersection, and difference, along with functional transformations such as map and filter. It enables ordered traversal, sequence conversion, and dependency relationship management, useful in scenarios like build system dependency tracking or topological sorting where element ordering is critical. The structure relies on comparator-driven ordering and provides utilities for converting between sets, lists, and sequences while preserving traversal order.",
      "description_length": 562,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Tmap.S",
      "library": "stog",
      "description": "Stores values of type `'a` indexed by unique, automatically generated keys, using a map structure. Provides operations to add, retrieve, modify, and remove values, along with folding and iteration functions. Useful for managing collections of documents or entities where each item needs a stable, unique identifier.",
      "description_length": 315,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Types.Int_set",
      "library": "stog",
      "description": "The module implements an ordered collection of integers with operations for set algebra (union, intersection, difference), membership checks, and extremal element retrieval. It supports transformations through mapping, filtering, and partitioning, along with ordered traversal via iterators and folds, and conversions to and from lists and sequences in ascending or descending order. This structure is ideal for applications requiring sorted integer storage with efficient manipulation and ordered data interchange.",
      "description_length": 515,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Types.Str_set",
      "library": "stog",
      "description": "This module offers operations for managing ordered collections of unique strings, supporting set algebra like union and difference, element-wise transformations, and membership checks. It works with a specialized set structure for string elements, maintaining lexicographical ordering and enabling bidirectional conversion with lists and sequences. Typical applications include deduplicating string sequences, performing set-based comparisons, and processing ordered string data with efficient lookups.",
      "description_length": 502,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Types.Doc_set",
      "library": "stog",
      "description": "This module provides operations for managing immutable sets of document IDs, supporting set algebra (union, intersection, difference), transformations (filtering, mapping), and membership queries. It works with abstract sets (`t`) of document identifiers, offering ordered traversal via sequences, subset decomposition, and efficient physical equality preservation. Typical use cases include document collection manipulation where immutability and precise set semantics are required, such as dependency tracking, document categorization, or incremental set updates with ordered iteration.",
      "description_length": 588,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Types.Graph",
      "library": "stog",
      "description": "This module enables the construction, modification, and analysis of directed graphs with edges labeled by type, supporting operations like node/edge addition, adjacency queries, recursive traversals, edge reversal, and serialization. It operates on a graph structure where nodes are uniquely identified by document IDs and edges carry type annotations, with marshaling capabilities for persistence or transfer. Key applications include dependency resolution via predecessor tracking, topological ordering of nodes, generating Graphviz visualizations, and pathfinding with user-defined cost functions for weighted edges.",
      "description_length": 619,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Graph.Make",
      "library": "stog",
      "description": "This module provides operations for building and analyzing directed, sparse graphs with vertices represented as keys from a map module and edges annotated with custom data. It supports adding or removing vertices and edges with uniqueness enforced via edge annotations, traversing reachable nodes, and performing topological sorts or shortest-path computations using user-defined cost functions. Typical applications include dependency resolution, task scheduling, and generating visualizations of graph structures through Graphviz integration.",
      "description_length": 544,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Types.Int_map",
      "library": "stog",
      "description": "This module implements integer-keyed maps with ordered semantics, offering operations for insertion, deletion, merging, and ordered traversal, along with value transformations and bulk processing via sequences. It supports efficient querying, conditional searches, and structural manipulations, making it ideal for scenarios requiring sorted key-based data management, such as frequency counting, ordered symbol tables, or sequence-driven map construction.",
      "description_length": 456,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Types.Str_map",
      "library": "stog",
      "description": "This module implements string-keyed maps with efficient insertion, deletion, and lookup, supporting operations like merging, ordered traversal, and bulk transformations from sequences. It enables functional manipulations such as filtering, partitioning, and key-value mapping, while handling arbitrary value types and conversions to/from lists and sequences. Typical applications include structured data aggregation, ordered key processing, and combining maps with sequence-driven bulk updates.",
      "description_length": 494,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Path.Map",
      "library": "stog",
      "description": "This module implements ordered maps for associating arbitrary values with hierarchical document paths, offering operations to insert, merge, and query path-keyed data while preserving traversal order. It supports transformations through folds, filters, and sequence-based bulk updates, with utilities to extract ordered subsets or extreme bindings. Typical applications include managing document hierarchies, routing path-based data, or processing ordered collections of path-value pairs.",
      "description_length": 488,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Of_latex",
      "library": "stog",
      "description": "This module translates LaTeX documents into Stog-compatible XML, processing custom directives, sectioning, and image configurations, while parsing LaTeX into abstract syntax trees for structured conversion. It exposes operations to manipulate ordered string-keyed maps, enabling functional updates, ordered traversal, and sequence transformations\u2014ideal for handling macro definitions and document metadata. You can, for example, convert a LaTeX article into XML with correctly nested sections or update macro mappings with preserved key order. The combination of direct translation capabilities and rich map manipulation supports end-to-end processing of LaTeX sources into structured, web-ready outputs.",
      "description_length": 704,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Install",
      "library": "stog",
      "description": "This module organizes predefined paths for Dune site modules and templates, simplifying resource location retrieval during installation or configuration. It exposes lists of module and template directories as direct access values. Developers can reference these paths to locate assets or structure site setups programmatically. For example, it allows fetching a list of available template directories to render site content dynamically.",
      "description_length": 436,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Plug",
      "library": "stog",
      "description": "This module defines an interface for plugins to register configuration, language data, and custom HTML rules. It provides functions to resolve documents by href, create block nodes with metadata, and manage dependencies between documents and files. It works with document types, XML trees, and internationalization data to support extensible document processing workflows.",
      "description_length": 372,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Html",
      "library": "stog",
      "description": "This module includes functions for resolving document references by URL, escaping HTML characters, and generating URLs from paths. It works with document structures, environment mappings, and path representations to support dynamic content generation. Specific use cases include building document lists, resolving links with `doc_by_href`, and registering base rules for document processing.",
      "description_length": 391,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Info",
      "library": "stog",
      "description": "This module computes internal document graphs, date-based document navigation, and Graphviz representations from a `Stog.Types.stog` structure. It supports operations like filtering unpublished documents, generating clickable graphs with topic annotations, and retrieving next/previous documents by date. Use cases include visualizing document relationships, generating site navigation, and filtering content for publication.",
      "description_length": 425,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Dyn",
      "library": "stog",
      "description": "This module handles dynamic loading of OCaml code, providing functions to load files and packages at runtime. It works with lists of file paths and package names, ensuring files have proper extensions before loading. Concrete use cases include extending applications with plugins or loading configuration modules on demand.",
      "description_length": 323,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Svg",
      "library": "stog",
      "description": "Transforms SVG document trees by prefixing all element IDs with a specified string, ensuring unique identifiers across merged SVG content. Works directly with XML tree structures representing SVG documents. Useful when combining multiple SVG files into a single document to avoid ID collisions.",
      "description_length": 294,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Log",
      "library": "stog",
      "description": "This module provides functions for logging messages at different severity levels (debug, info, warn, err, app) and supports location-aware message formatting. It works with log sources, message formatters, and location tags tied to the `Xtmpl.Types.loc` structure. Concrete use cases include tracking document processing locations during static site generation and controlling log verbosity via string-based level settings.",
      "description_length": 423,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Version",
      "library": "stog",
      "description": "Returns the version number of the Stog library as a string. Works with no input parameters and produces a single string value. Useful for checking the installed version of Stog at runtime or for logging purposes.",
      "description_length": 212,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Error",
      "library": "stog",
      "description": "This module defines error handling operations for template processing, including functions to raise errors with optional source locations. It works with a custom `error` type and exceptions, providing specific error constructors for common failure scenarios like missing template files or invalid dates. Concrete use cases include reporting template file not found errors and invalid date format errors during static site generation.",
      "description_length": 433,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Highlight",
      "library": "stog",
      "description": "This module provides code syntax highlighting by converting source code strings into XHTML trees. It supports two main operations: `highlight`, which attempts to use Higlo for known languages or falls back to an external command, and `external_highlight`, which directly invokes an external highlighting tool with custom options. It works with raw code strings and produces structured XHTML output for rendering in web contexts.",
      "description_length": 428,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Config",
      "library": "stog",
      "description": "This module handles reading and managing configuration settings for a Stog project. It provides functions to locate configuration files and directories, including cache, templates, and modules directories, and reads configuration data into a structured format. The primary data structures include paths, lists of files, and module-specific logging levels, used to control processing behavior and file handling during site generation.",
      "description_length": 433,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Cut",
      "library": "stog",
      "description": "This module provides functions to split documents into smaller pieces based on a specified level, using paths constructed from parent paths, separators, and identifiers. It operates on document sets and stog environments, transforming input documents into a structured output document set. Concrete use cases include generating paginated content or splitting large documents into sections for navigation.",
      "description_length": 404,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Server_mode",
      "library": "stog",
      "description": "This module manages server configuration and initialization for handling HTTP and WebSocket connections. It provides functions to set up single or multi-server modes, specifying how servers are launched with given URL configurations and command-line arguments. Concrete use cases include defining server behavior for static site generation with dynamic content updates via websockets.",
      "description_length": 384,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Latex",
      "library": "stog",
      "description": "This module provides functions to process and generate LaTeX content, including rendering LaTeX fragments to SVG images. It supports embedding LaTeX within templates using callback functions for document transformation. Concrete use cases include generating mathematical equations in HTML output and preprocessing LaTeX blocks with customizable packages and definitions.",
      "description_length": 370,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Ocaml",
      "library": "stog",
      "description": "This module evaluates OCaml code phrases within named sessions, captures output, and integrates results into document templates. It manages session state with references and provides callbacks for embedding evaluated code and formatted output directly into generated pages. Concrete use cases include displaying the result of OCaml expressions inline in HTML documentation and formatting multi-line code output in rendered documents.",
      "description_length": 433,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Exec",
      "library": "stog",
      "description": "Handles execution and rendering of shell commands within generated documentation pages. Works with `Stog.Types.stog` and `Xtmpl.Rewrite.callback` to dynamically display command outputs. Useful for embedding live code examples or system command results directly into static site content.",
      "description_length": 286,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Filter_lexer",
      "library": "stog",
      "description": "This module implements a lexer for parsing filter expressions, handling input through `Lexing.lexbuf` and producing tokens consumed by the filter parser. It includes functions for lexing strings and managing internal parsing state with a buffer. Concrete use cases involve processing custom filter syntax in configuration files or domain-specific language inputs.",
      "description_length": 363,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Init",
      "library": "stog",
      "description": "This module initializes document processing structures by loading content from directories or files, applying optional field transformations. It works with `Stog.Types.stog` to configure processing pipelines and supports concrete workflows like blog generation or static site building from source content. Key operations include directory traversal, file parsing, and metadata injection.",
      "description_length": 387,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Path",
      "library": "stog",
      "description": "This module manages hierarchical document paths using a custom `path` type that represents paths as lists of strings with absolute or relative flags. It provides core operations for path manipulation, such as appending components, stripping extensions, and navigating parent directories, making it ideal for static site generators or document processors. The associated set module enables set-theoretic operations and ordered traversal over collections of paths, supporting transformations like `map` and `filter` for tasks like dependency resolution or path routing. The map module extends this functionality by associating values with paths, enabling ordered storage, retrieval, and bulk manipulation of path-keyed data, useful for structured document routing or hierarchical data processing.",
      "description_length": 794,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Tags",
      "library": "stog",
      "description": "This module defines string constants for predefined tags used to represent document metadata (e.g., titles, dates, URLs), structural elements (sections, paragraphs, code blocks), and processing directives (file inclusion, OCaml evaluation). These tags operate on document content during static site generation, enabling tasks like metadata extraction, content organization, and dynamic code execution. They are integral to parsing and transforming input files into structured output formats.",
      "description_length": 491,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Tmap",
      "library": "stog",
      "description": "This module implements a typed map structure that associates unique keys with values of arbitrary types, supporting operations to add, remove, modify, and query entries. It uses a key type that includes an integer identifier and a comparison function, enabling efficient and type-safe management of uniquely identified resources such as configuration settings or system state. A child module extends this functionality by automatically generating unique keys for values of a uniform type, offering operations like insertion, retrieval, and iteration, which are useful for managing document collections or entity records. Together, these components provide a flexible interface for handling both heterogeneous and homogeneous keyed data with strong typing and stable identifiers.",
      "description_length": 778,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Html5",
      "library": "stog",
      "description": "Converts self-closing XML tags into non-self-closing HTML5 tags, except for standard HTML5 void elements like `img` or `br`. Works with XML tree structures produced by the `Xtmpl.Rewrite` module. Useful when generating HTML5 output from XML sources that use self-closing tags for non-void elements.",
      "description_length": 298,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Types",
      "library": "stog",
      "description": "This module organizes document metadata, dependency graphs, and hierarchical paths for static site generation workflows. It provides core operations for managing document sets, path tries, and typed maps to support tasks like sorting content by timestamps, resolving symbolic links, and tracking dependencies between files. Data structures include ordered sets for strings, integers, and document IDs, along with directed graphs for dependency tracking and path-based tries for hierarchical lookups. Examples include organizing blog posts chronologically, performing set-based comparisons on document collections, and generating topological builds using labeled dependency graphs.",
      "description_length": 680,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Graph",
      "library": "stog",
      "description": "This library provides a comprehensive framework for working with sparse directed graphs where nodes and edges carry custom annotations, enabling efficient creation, manipulation, and traversal. It supports polymorphic node and edge types, with core operations for adding and removing vertices and edges, computing shortest paths with customizable metrics, and performing topological sorts, all while maintaining metadata using map-based structures. Submodules enhance this functionality with specialized support for key-value storage within graphs, typed edges, recursive traversal, graph reversal, and Graphviz output generation. Example uses include dependency tracking, network flow analysis, task scheduling, and visualizing hierarchical data structures.",
      "description_length": 758,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Intl",
      "library": "stog",
      "description": "This module handles internationalization for date-related strings, providing functions to format dates and times according to specified languages. It works with language abbreviations and associated data, including arrays for day and month names, and formatting functions. Concrete use cases include retrieving localized month names, formatting dates in French or English, and registering custom language data for date localization.",
      "description_length": 432,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Trie",
      "library": "stog",
      "description": "This module provides a trie-based structure for managing hierarchical data indexed by paths, which are sequences of symbols. It supports adding paths with associated data, retrieving data for exact paths or traversing to find matches in subpaths or extensions, and converting the structure to a string. The trie enables efficient lookups and aggregations over shared prefixes, making it suitable for routing tables, file system representations, or nested configuration storage. Submodules extend this functionality with variations on path traversal and data retrieval strategies.",
      "description_length": 579,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Url",
      "library": "stog",
      "description": "This module handles URL manipulation and construction, providing functions to create URLs from strings, modify paths, fragments, and query parameters, and extract components like scheme, host, and port. It works with a custom URL type and supports operations such as concatenation, path appending, and normalization. Concrete use cases include building and sanitizing web links, generating static resource paths, and parsing URL components for routing or API requests.",
      "description_length": 468,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Filter_parser",
      "library": "stog",
      "description": "Parses logical filter expressions into a structured query type using a token stream from lexing buffers. It handles operators like AND, OR, NOT, and attribute comparisons, producing a typed representation suitable for evaluating conditions against structured data. This module is used to implement dynamic filtering of document metadata in static site generation workflows.",
      "description_length": 373,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Filter_types",
      "library": "stog",
      "description": "This module defines a recursive algebraic data type for representing document filters, combining conditions using logical operators. It supports operations to build and manipulate filter expressions, such as conjunctions, disjunctions, and negations of named XML node conditions. Concrete use cases include constructing and evaluating document selection criteria in document processing pipelines.",
      "description_length": 396,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Date",
      "library": "stog",
      "description": "This module handles date parsing, formatting, and conversion. It provides functions to create date values from strings or timestamps, retrieve the current date, and extract date components. The module works with a custom date type and supports operations like converting to and from Ptime representations, determining the weekday, and formatting dates using custom string patterns.",
      "description_length": 381,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Tmpl",
      "library": "stog",
      "description": "This module defines and provides access to specific template functions used for generating structured output, such as HTML or RSS, from document data. It operates on `Stog.Types.stog` and `Xtmpl.Rewrite.tree` structures, applying templates to produce output documents. Concrete use cases include rendering blog pages, keyword and topic indexes, monthly archives, document lists, and RSS feeds.",
      "description_length": 393,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Blocks",
      "library": "stog",
      "description": "This module organizes structured document elements like sections, figures, and code examples through block construction and metadata management, including titles, labels, and formatting rules. It supports conversion of blocks into XML trees and provides direct operations for block manipulation alongside a child module that handles ordered, string-keyed maps for hierarchical data aggregation and configuration composition. The map submodule enables functional updates, ordered traversal, and key-based filtering, useful for processing block metadata or managing document-wide settings. Together, they allow building and transforming complex, structured documents with customizable layouts and associated data.",
      "description_length": 711,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Filter",
      "library": "stog",
      "description": "Converts string expressions into filter functions and applies them to document collections. Works with document IDs and structured document data to refine content based on filtering rules. Useful for selecting or excluding documents during static site generation.",
      "description_length": 263,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Io",
      "library": "stog",
      "description": "This module handles the construction and manipulation of a stog structure from a project directory tree. It provides functions to read modules, parse documents from files, and populate document attributes and content. Concrete use cases include initializing a stog site from a directory, loading document metadata and body from a file path, and dynamically updating document content using attributes and substitutions.",
      "description_length": 418,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Engine",
      "library": "stog",
      "description": "This module orchestrates document processing for static site generation, handling URL resolution, file path manipulation, and environment management to support transformation workflows. It leverages modules, language configurations, and rule-based pipelines to enable tasks like multilingual site assembly and dynamic content generation. The `data` type and `modul` value represent core extensions, while `cache_load` and `cache_store` optimize state handling during document processing. Example uses include transforming source files into HTML, applying language-specific rules, and caching intermediate results for efficient rebuilds.",
      "description_length": 636,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog.Find",
      "library": "stog",
      "description": "This module traverses directories to locate files based on filters like depth, file type, modification time, or custom predicates. It supports operations such as applying a function to each matched file or collecting matches into a list. Concrete use cases include searching for log files modified within a time range or filtering source files by extension using regular expressions.",
      "description_length": 383,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Doclist",
      "library": "stog",
      "description": "This module generates lists of documents based on optional filters, sorting, and limiting parameters. It operates on document sets and document types, producing processed lists suitable for templating. Use it to retrieve and format subsets of documents dynamically within templates.",
      "description_length": 282,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog.Deps",
      "library": "stog",
      "description": "This module manages dependencies between documents in a static site generator. It provides functions to add dependencies, compute the latest modification date among dependencies, and retrieve the latest date including file changes. It works with document and dependency data structures to support incremental builds and dependency tracking.",
      "description_length": 340,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog",
      "library": "stog",
      "description": "This module ecosystem transforms LaTeX and structured content into web-ready formats, supporting document processing, internationalization, and dynamic content generation. Core data types include XML trees, document graphs, path hierarchies, and typed maps, with operations for filtering, transformation, and dependency tracking. You can convert LaTeX to HTML with syntax highlighting, generate SVG from math expressions, split documents into navigable sections, and build multilingual sites with localized dates and templates. Additional capabilities include runtime OCaml evaluation, shell command embedding, and server configuration for dynamic content delivery.",
      "description_length": 665,
      "index": 64,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 66,
    "meaningful_modules": 65,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9848484848484849
  },
  "statistics": {
    "max_description_length": 794,
    "min_description_length": 212,
    "avg_description_length": 458.9384615384615,
    "embedding_file_size_mb": 0.23656368255615234
  }
}