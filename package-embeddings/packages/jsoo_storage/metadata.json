{
  "package": "jsoo_storage",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 3,
  "creation_timestamp": "2025-08-14T22:57:45.478850",
  "modules": [
    {
      "module_path": "WebStorage.Local",
      "library": "jsoo_storage",
      "description": "This module provides persistent key-value storage operations with atomic read, write, and deletion capabilities, along with change event tracking for browser-based data synchronization. It operates on string-keyed value pairs stored in the browser's LocalStorage, supporting bulk transformations into hash tables and filtered event listeners that respond to modifications like insertions, removals, or updates. Typical applications include caching user preferences, maintaining offline application state, or coordinating cross-tab data consistency with prefix-based event filtering for scoped updates.",
      "description_length": 601,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "WebStorage.Session",
      "library": "jsoo_storage",
      "description": "This API provides operations for managing transient key-value pairs in a browser's session storage, supporting read, write, delete, and iteration over string-based entries. It includes mechanisms to observe and filter changes (insertions, updates, removals) with URL-specific context and prefix-based key scoping. Typical use cases involve tracking temporary application state across page reloads within a session or coordinating UI updates between browser tabs via event listeners.",
      "description_length": 482,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "WebStorage",
      "library": "jsoo_storage",
      "description": "This module provides persistent and session-scoped key-value storage operations with atomic read, write, and deletion, along with event tracking for storage changes. It works with string-keyed values in the browser's LocalStorage and SessionStorage, supporting bulk conversion to hash tables and filtered event listeners. Concrete use cases include caching user preferences in LocalStorage, managing temporary application state across page reloads with SessionStorage, and coordinating cross-tab data consistency with scoped event filtering.",
      "description_length": 541,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 3,
    "filtered_empty_modules": 1,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 601,
    "min_description_length": 482,
    "avg_description_length": 541.3333333333334,
    "embedding_file_size_mb": 0.04392719268798828
  }
}