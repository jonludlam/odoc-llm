{
  "package": "ppx_compose",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:04:11.575186",
  "modules": [
    {
      "module_path": "Compose",
      "library": "ppx_compose.runtime",
      "description": "This module defines two function composition operators. The `%` operator composes functions from right to left, while the `%>` operator composes them left to right. These operators enable chaining transformations on values, such as processing data through multiple stages or building complex functions from simpler ones.",
      "description_length": 320,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_compose",
      "library": "ppx_compose",
      "description": "This module manipulates expression trees to implement function composition operators. It provides utilities to generate fresh variable names, apply arguments to expressions, classify composition patterns, and rewrite expressions using forward or backward composition rules. Concrete use cases include transforming `|>` and `@@` expressions during OCaml PPX rewriting.",
      "description_length": 367,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 367,
    "min_description_length": 320,
    "avg_description_length": 343.5,
    "embedding_file_size_mb": 0.007697105407714844
  }
}