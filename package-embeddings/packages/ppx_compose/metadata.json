{
  "package": "ppx_compose",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-06-18T16:28:29.384172",
  "modules": [
    {
      "module_path": "ppx_compose",
      "description": "Rewrites function composition operators `%` and `%>` into inlined function calls, transforming nested compositions into sequential applications. Works with function values and curried arguments to eliminate composition syntax. Simplifies debugging and tracing by expanding compositions at compile time.",
      "description_length": 302,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_compose",
      "description": "Generates unique variable names from expressions, applies composed functions with labeled arguments, and simplifies composition patterns in abstract syntax trees. It operates on OCaml expressions and location data, handling transformations specific to function composition. Used to rewrite and optimize composed function calls during ppx preprocessing.",
      "description_length": 352,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Compose",
      "description": "Composes two functions, applying the second after the first, and vice versa, allowing for sequential transformation of values. It operates with function types that map between distinct type parameters. Used to chain data processing steps, such as transforming input through a series of type-preserving operations.",
      "description_length": 313,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 352,
    "min_description_length": 302,
    "avg_description_length": 322.3333333333333,
    "embedding_file_size_mb": 0.011307716369628906
  }
}