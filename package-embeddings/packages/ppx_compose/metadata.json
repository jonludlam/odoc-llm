{
  "package": "ppx_compose",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:47:20.964868",
  "modules": [
    {
      "module_path": "Ppx_compose",
      "library": "ppx_compose",
      "description": "This module manipulates OCaml expressions representing function composition, supporting operations like rewriting, reducing, and classifying composition forms. It works directly with `Ppxlib.expression` and related structures, handling labeled arguments and location information. Concrete use cases include transforming `|>` and `@@` expressions during PPX rewriting, enabling custom composition behaviors in user code.",
      "description_length": 419,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Compose",
      "library": "ppx_compose.runtime",
      "description": "This module defines function composition operators that combine two functions into a new function. The `(%)` operator applies the second function first, then the first, while `(%>)` applies the first function followed by the second. These operators are useful for chaining transformations, such as processing data through multiple stages or building complex mappings from simpler components.",
      "description_length": 391,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 419,
    "min_description_length": 391,
    "avg_description_length": 405.0,
    "embedding_file_size_mb": 0.0294036865234375
  }
}