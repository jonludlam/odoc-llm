{
  "package": "ninja_utils",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:06:01.315370",
  "modules": [
    {
      "module_path": "Ninja_utils.Expr",
      "library": "ninja_utils",
      "description": "This module represents Ninja expressions as lists of strings and provides a single function to format them into a string representation suitable for output. It escapes spaces within individual elements to ensure valid Ninja syntax. Used to construct and serialize expressions for Ninja build files, such as command lines or file paths.",
      "description_length": 335,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ninja_utils.Rule",
      "library": "ninja_utils",
      "description": "This module defines the structure and creation of Ninja build rules, including their commands and descriptions. It works with strings for rule names, expressions for commands and descriptions, and optional variable bindings. It is used to generate correctly formatted Ninja rules as part of a build configuration in systems like Clerk.",
      "description_length": 335,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ninja_utils.Build",
      "library": "ninja_utils",
      "description": "This module constructs Ninja build statements using types like `t`, `Expr.t`, and `Var.t`. It provides functions to define build rules with inputs, outputs, variables, and formatting, along with path manipulation utilities. Use it to programmatically generate Ninja build files with precise control over build commands and dependencies.",
      "description_length": 336,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ninja_utils.Var",
      "library": "ninja_utils",
      "description": "This module represents variables in Ninja build files, providing operations to create and manipulate variable names and their references. It works with a custom abstract type `t` to encapsulate variable identity, ensuring correct formatting when used in bindings or expressions. Concrete use cases include generating properly escaped variable references in Ninja syntax, such as turning a variable `x` into `$x` when building command lines or output paths.",
      "description_length": 456,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ninja_utils.Binding",
      "library": "ninja_utils",
      "description": "This module represents variable bindings in a Ninja build configuration, pairing variables with their corresponding expressions. It provides operations to construct these bindings and format them for output, supporting both global and local scope declarations. Useful for generating Ninja syntax programmatically when building rule or variable sections of a build file.",
      "description_length": 369,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ninja_utils.Default",
      "library": "ninja_utils",
      "description": "This module defines a type `t` for representing default values in Ninja build configurations and provides functions to construct and format these values. It works with `Ninja_utils.Expr.t` expressions, wrapping them into a structured default value type. Used to generate Ninja build files, it supports specifying default build targets and variables directly within Clerk's build system.",
      "description_length": 386,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ninja_utils",
      "library": "ninja_utils",
      "description": "This module provides utilities for constructing and formatting Ninja build files programmatically, combining direct manipulation of expressions, variables, and build statements with structured rule and binding definitions. It centers around key types like `Expr.t` for command-line fragments, `Var.t` for variable references, and `Build.t` for defining dependencies and outputs, all supporting proper Ninja syntax generation. With functions to create rules, bindings, and default values, it enables use cases such as generating Clerk build configurations, specifying compiler commands with inputs and outputs, and serializing Ninja syntax with correct escaping. Submodules handle expression formatting, rule definitions, variable management, and path utilities, offering a complete toolkit for building Ninja files tailored to Clerk's needs.",
      "description_length": 841,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 841,
    "min_description_length": 335,
    "avg_description_length": 436.85714285714283,
    "embedding_file_size_mb": 0.025832176208496094
  }
}