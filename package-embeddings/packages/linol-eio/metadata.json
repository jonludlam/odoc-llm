{
  "package": "linol-eio",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 384,
  "creation_timestamp": "2025-07-16T00:17:00.314368",
  "modules": [
    {
      "module_path": "Linol_eio.Jsonrpc2.Req_id",
      "library": "linol-eio",
      "description": "This module represents a unique identifier for JSON-RPC 2.0 requests, used to correlate requests with their corresponding responses. It provides a single function, `to_string`, which converts the request ID into a string for serialization or logging purposes. A typical use case involves tracking individual RPC calls in a distributed system or debugging communication between client and server.",
      "description_length": 395,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentUri.Private",
      "library": "linol-eio",
      "description": "Controls path formatting for document URIs based on the operating system. It uses a mutable reference `win32` to determine whether to apply Windows-style path conventions. This module is used internally to ensure correct URI serialization on different platforms.",
      "description_length": 262,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.Jsonrpc2.IO",
      "library": "linol-eio",
      "description": "This module implements asynchronous input/output operations for handling JSON-RPC 2.0 communication over channels. It provides primitives for reading from and writing to input/output channels, managing errors with backtraces, and sequencing asynchronous computations using applicative and monadic combinators. Concrete use cases include building JSON-RPC servers and clients that read requests from stdin, process them, and write responses to stdout.",
      "description_length": 450,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SignatureHelpContext",
      "library": "linol-eio",
      "description": "This module defines a context for managing signature help in a language server, specifically handling retriggering and trigger sources. It works with optional `SignatureHelp` values, boolean flags, strings, and trigger kinds to capture the state during code completion. Concrete use cases include determining whether to reuse existing signature help or fetch new information based on user input characters or other triggers.",
      "description_length": 424,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHintLabelPart",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing parts of an inlay hint label, including optional command, location, tooltip, and value fields. It provides functions to create instances of this structure and to serialize/deserialize them using Yojson. Concrete use cases include building and manipulating inlay hints in a language server protocol implementation.",
      "description_length": 367,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlineCompletionClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for inline completion client capabilities, specifically supporting dynamic registration. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Use this module to configure and exchange inline completion capabilities in JSON format during language server initialization.",
      "description_length": 341,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.WorkspaceSymbol",
      "library": "linol-eio",
      "description": "This module defines a record type for representing workspace symbols with fields like name, kind, location, and optional metadata such as container name and tags. It provides functions to construct these records and convert them to and from JSON format using Yojson. It is used to serialize and deserialize symbol data for transmission or storage in a JSON-compatible format.",
      "description_length": 375,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RenameClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to renaming operations in a language server. It includes fields to indicate support for dynamic registration, change annotations, and preparation steps, along with a default behavior setting for rename preparation. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for use in LSP communication.",
      "description_length": 431,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SymbolInformation",
      "library": "linol-eio",
      "description": "This module defines a record type for symbol information with optional fields like container name, deprecation status, and tags. It provides functions to construct symbol information records, convert them to and from JSON format. It is used to represent and serialize symbols such as variables, functions, or types in a codebase for features like navigation and documentation.",
      "description_length": 376,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentLinkParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used during document link resolution, including tokens for partial results and work progress, along with a text document identifier. It provides functions to construct these parameters and serialize or deserialize them using Yojson. Concrete use cases include handling document link requests in an LSP server where tracking work progress and document context is required.",
      "description_length": 423,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ServerCapabilities",
      "library": "linol-eio",
      "description": "This module constructs and serializes server capability configurations for an LSP server, supporting features like code navigation, diagnostics, document formatting, and workspace management. It defines nested structures for workspace, text document, and diagnostic capabilities, each with optional fields to specify support and associated options. Use cases include initializing server capabilities during LSP server setup and converting capabilities to or from JSON for communication.",
      "description_length": 486,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WatchKind",
      "library": "linol-eio",
      "description": "This module defines a variant type representing file system watch events: creation, modification, deletion, and other events with a string identifier. It provides functions to convert these event types to and from Yojson representations. This module is used to serialize and deserialize file system event data for communication or logging purposes.",
      "description_length": 348,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ChangeAnnotationIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type `t` as a string alias for identifiers used in change annotations. It includes functions to convert values of type `t` to and from Yojson representation, enabling JSON serialization and deserialization. These operations support persisting or transmitting change annotation identifiers in a structured format.",
      "description_length": 334,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MonikerKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing the kind of moniker (import, export, or local) and provides functions to convert between this type and Yojson for serialization and deserialization. It works directly with the `Yojson.Safe.t` type for parsing and generating JSON data. Concrete use cases include handling moniker kinds during data exchange or configuration processing where JSON format is required.",
      "description_length": 408,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in inline value requests, including context, range, text document identifier, and an optional work done token. It provides functions to construct instances, and serialize or deserialize them using Yojson. This structure is used to convey contextual information needed to fetch inline values in a text document.",
      "description_length": 367,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.PublishDiagnosticsClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines client capabilities for publishing diagnostics in a language server protocol implementation. It includes functions to construct and manipulate capability structures with optional support flags for features like code descriptions, related information, diagnostic tags, and versioning. The module also provides JSON serialization and deserialization for these capability structures.",
      "description_length": 400,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentItem",
      "library": "linol-eio",
      "description": "This module defines a data structure representing a text document with fields for language identifier, content, uniform resource identifier, and version number. It provides functions to construct instances, and to serialize and deserialize them using JSON. This structure is used to manage document state in language server protocol implementations, where precise document identification and version tracking are required.",
      "description_length": 422,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ReferenceRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for specifying options when registering reference providers in a language server. It includes fields for filtering documents and enabling work-done progress notifications. The structure supports serialization to and from JSON for use in LSP protocol exchanges.",
      "description_length": 297,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DiagnosticClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to diagnostics in a language server protocol implementation. It includes fields to indicate support for dynamic registration, markup messages, and related documents, all of which are optional boolean values. The module provides functions to construct the structure, and to serialize and deserialize it using Yojson for use in JSON-based communication.",
      "description_length": 433,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.NotebookCellKind",
      "library": "linol-eio",
      "description": "This module defines the type `t` representing the kind of a notebook cell, with variants `Markup` and `Code`. It provides functions to convert this type to and from Yojson for serialization and deserialization. This is used to distinguish between markdown and code cells when processing notebook data.",
      "description_length": 301,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TokenFormat",
      "library": "linol-eio",
      "description": "This module defines a single data type `t` representing token formatting options, specifically supporting relative formatting. It includes functions to convert values of type `t` to and from JSON using the `Yojson.Safe` format. This module is useful when serializing or deserializing token format configurations in JSON-based interfaces.",
      "description_length": 337,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RelatedFullDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a type for diagnostic reports associated with a full document, including a list of diagnostics and optional related documents with their diagnostic states. It provides functions to construct these reports, along with serialization and deserialization to JSON using Yojson. Use this module to generate and process diagnostic responses in an LSP server, particularly when handling full document diagnostics with related file contexts.",
      "description_length": 452,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.PrepareRenameParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in preparing a rename operation, including position, text document identifier, and an optional work done token. It provides functions to construct the structure, and serialize/deserialize it to and from JSON. It is used to handle rename requests in a language server, specifically for tracking where and in which document a rename should occur.",
      "description_length": 401,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TextDocumentPositionParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` that combines a position and a text document identifier, used for specifying positions within text documents. It provides functions to construct instances of this type and to serialize and deserialize them using Yojson. This is useful for implementing language server protocol features like hover or goto definition, where precise location information is required.",
      "description_length": 395,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.UnchangedDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing a diagnostic report for an unchanged document, containing a `resultId` string. It provides functions to create a value of this type, and to convert to and from JSON using the Yojson library. This type is used to handle diagnostic results in a document processing context where the document has not changed.",
      "description_length": 350,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing two variants of document diagnostic reports, specifically full and unchanged document diagnostics, using LSP types. It provides functions to convert these diagnostic reports to and from Yojson format for serialization and deserialization. This module is used to handle diagnostic data in a language server protocol context, enabling efficient transmission and storage of document diagnostics.",
      "description_length": 436,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing parameters for work done progress in JSON-RPC communication, specifically handling an optional token that can be either an integer or string. It provides functions to create instances, and to convert to and from Yojson representations. This is used to manage progress reporting in language server protocol interactions where a work done token is needed to track long-running operations.",
      "description_length": 430,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentEdit",
      "library": "linol-eio",
      "description": "This module represents a set of text edits applied to a specific text document, supporting both standard and annotated text edits. It works with text documents identified by an optional version, allowing precise tracking and application of changes. Concrete use cases include applying refactorings, code fixes, or formatting changes to a document in an editor that supports versioned updates.",
      "description_length": 392,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CallHierarchyIncomingCallsParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in a call hierarchy incoming calls request. It includes fields for a call hierarchy item, a partial result token, and a work done token, supporting optional values. The module provides functions to construct instances, and to convert to and from JSON representations, specifically using `Yojson.Safe.t`.",
      "description_length": 360,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValue",
      "library": "linol-eio",
      "description": "This module defines a polymorphic type `t` representing different kinds of inline values, including text, variable lookups, and evaluatable expressions, using variants. It provides functions to convert between this type and Yojson.Safe.t for serialization and deserialization. This module is useful when handling inline value information in a language server protocol context, where values need to be sent over JSON-based communication channels.",
      "description_length": 445,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DiagnosticOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring diagnostic behavior in a language server, with fields to control identifiers, inter-file dependencies, progress reporting, and workspace-wide diagnostics. It provides functions to construct instances with optional parameters and to serialize/deserialize them using Yojson. Concrete use cases include setting up diagnostic options during server initialization and persisting or transmitting these settings across sessions or components.",
      "description_length": 488,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CallHierarchyRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering call hierarchy capabilities in a language server. It includes fields to specify document selectors, an identifier, and whether work done progress is supported. The type supports serialization to and from JSON using Yojson.",
      "description_length": 280,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MarkupContent",
      "library": "linol-eio",
      "description": "This module defines a record type with `kind` and `value` fields, representing structured markup content. It provides functions to construct instances, and to convert to and from Yojson format. It is used to serialize and deserialize markup data for communication in a language server protocol context.",
      "description_length": 302,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidSaveTextDocumentParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing parameters for a text document save event, including the document identifier and optional saved text. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to handle document save notifications in a language server protocol implementation.",
      "description_length": 331,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RenameOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring rename operations with optional settings. It includes functions to create instances and serialize/deserialize them using Yojson. Concrete use cases include managing editor-specific rename behavior, such as enabling work done progress tracking or preparing a provider.",
      "description_length": 320,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Unregistration",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing unregistration events, with fields for an identifier and a method. It includes functions to create instances and to convert between JSON and the structure. It is used to handle unregistration data in a format compatible with JSON serialization and deserialization.",
      "description_length": 318,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.FileOperationOptions",
      "library": "linol-eio",
      "description": "This module defines a record type for configuring file operation options with optional fields corresponding to specific file events like creation, deletion, and renaming. It provides a `create` function to construct instances with labeled optional parameters and supports JSON serialization and deserialization through `t_of_yojson` and `yojson_of_t`. It is used to specify which file operations a language server should monitor or react to, based on the LSP (Language Server Protocol) registration options.",
      "description_length": 507,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.UnregistrationParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling a list of unregistration requests in the context of the LSP (Language Server Protocol). It provides functions to create instances of this structure and to serialize/deserialize them using Yojson. A concrete use case is managing client unregistration events in an LSP server implementation.",
      "description_length": 339,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ProgressToken",
      "library": "linol-eio",
      "description": "This module defines a polymorphic type `t` that can represent progress tokens as either integers or strings. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This is useful when handling progress reporting in JSON-based protocols where tokens may vary in type.",
      "description_length": 333,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.Position",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing positions in a text document, with line and character offsets. It provides functions to construct position values, convert them to and from JSON format using Yojson. Useful for tracking cursor locations or text ranges in editors and parsers.",
      "description_length": 295,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureInformation",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing signature information in a language server protocol context. It includes fields for a label, optional documentation, active parameter index, and parameter list, supporting serialization to and from JSON. It is used to convey function or method signature details during code analysis or autocompletion tasks.",
      "description_length": 361,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ExecuteCommandParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for command execution parameters, including command name, arguments, and an optional work done token. It supports serialization and deserialization to and from JSON using Yojson. Concrete use cases include handling LSP execute command requests with structured parameters and managing background work tokens.",
      "description_length": 344,
      "index": 41,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_eio.DocumentDiagnosticReportKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` with two variants, `Full` and `Unchanged`, representing diagnostic report kinds for documents. It provides functions to convert values of this type to and from Yojson representations. This is useful when serializing or deserializing document diagnostic data in JSON format, particularly in LSP (Language Server Protocol) implementations.",
      "description_length": 368,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.GeneralClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines client capability structures for handling stale requests, position encodings, markdown support, and regular expressions in the context of a language server protocol. It provides functions to construct and serialize capability objects, including support for canceling and retrying modified requests. Use cases include configuring client-specific behavior for text document synchronization and processing in an LSP-based editor integration.",
      "description_length": 458,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeDefinitionRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering type definition handlers, supporting document filters for text documents or notebook cells, an optional identifier, and progress reporting. It provides functions to construct these options, convert them to and from JSON. Used to configure language server type definition capabilities with precise document filtering and progress tracking.",
      "description_length": 382,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ApplyWorkspaceEditResult",
      "library": "linol-eio",
      "description": "This module defines a data structure representing the result of applying a workspace edit, including whether the edit was applied successfully, the index of a failed change if applicable, and a reason for failure. It provides functions to construct such a result and to serialize and deserialize it using Yojson. This is useful for handling and communicating the outcome of batched file modifications in a text editing or IDE context.",
      "description_length": 434,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FullDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing full document diagnostic reports, consisting of a list of diagnostics and an optional result identifier. It provides functions to construct instances, convert to and from JSON format using Yojson. Useful for handling diagnostic results in a structured way, particularly when integrating with systems that require JSON serialization.",
      "description_length": 386,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CompletionItem",
      "library": "linol-eio",
      "description": "This module defines a completion item structure used to represent suggestions in a code editor, including properties like label, documentation, insert text, and text edits. It provides functions to create completion items with customizable fields and to serialize or deserialize them using Yojson. Concrete use cases include generating auto-completion responses in a language server, where items are constructed dynamically based on context and sent to the client in JSON format.",
      "description_length": 479,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionItemLabelDetails",
      "library": "linol-eio",
      "description": "This module defines a data structure for holding optional description and detail strings associated with a completion item label. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to serialize and deserialize label metadata in language server protocol interactions.",
      "description_length": 311,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.WorkspaceEditClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for describing client capabilities related to workspace edits in a language server protocol implementation. It includes types for change annotations, document changes, failure handling, line endings normalization, and resource operations, along with functions to construct and serialize these capabilities. It is used to configure and communicate the editing features supported by a client during workspace operations such as file refactoring or bulk changes.",
      "description_length": 509,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileCreate",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file creation operations with a URI. It includes functions to construct instances, and serialize and deserialize them using Yojson. It is used to handle file creation metadata in JSON format during inter-process communication or configuration parsing.",
      "description_length": 305,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RelatedUnchangedDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module handles diagnostic reports for unchanged documents in a language server context. It structures data with an optional map of related documents, each associated with either a full or unchanged diagnostic report, along with a result ID. It supports creating, serializing, and deserializing diagnostic reports for efficient storage and transmission.",
      "description_length": 357,
      "index": 51,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_eio.ShowDocumentParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used to show a document in an editor, including options like focus behavior, selection range, and external display. It provides functions to construct instances, convert to and from JSON format. It is used to pass document display settings between components in an LSP-based editor integration.",
      "description_length": 346,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CreateFile",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file creation operations with optional annotations and settings, using a custom type `t` that includes a URI, annotation ID, and options. It provides functions to construct instances of this type, along with serialization and deserialization to and from JSON using the Yojson library. Concrete use cases include handling file creation requests in a language server protocol implementation, where precise control over file options and identifiers is required.",
      "description_length": 512,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Location",
      "library": "linol-eio",
      "description": "This module defines a data structure representing a location with a range and URI, along with functions to create and serialize/deserialize instances. It works with LSP-compliant range and URI types to support precise source code referencing. Concrete use cases include tracking positions in files for language server features like go-to-definition or find-references.",
      "description_length": 368,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentOnTypeFormattingRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering document-on-type formatting handlers in an LSP server. It includes a document selector to specify which documents the formatting applies to, along with trigger characters that initiate formatting as the user types. The module supports conversion to and from JSON for serialization and configuration purposes.",
      "description_length": 352,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering text document handlers, supporting filters for both standard text documents and notebook cell documents. It provides functions to create registration options and serialize/deserialize them using Yojson. A concrete use case is configuring language server capabilities to handle specific document types based on file patterns or notebook contexts.",
      "description_length": 389,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentColorClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to document color features in a language server. It includes functions to create and serialize instances of this structure, specifically supporting optional dynamic registration. Use this module to configure and exchange color-related capability settings between a language server and its client.",
      "description_length": 378,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ApplyWorkspaceEditParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for applying workspace edits with an optional label, using a record containing a `WorkspaceEdit.t` and a string option. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to serialize and deserialize workspace edit requests with labels, typically in LSP (Language Server Protocol) interactions.",
      "description_length": 376,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Definition",
      "library": "linol-eio",
      "description": "This module defines a polymorphic type `t` that represents either a single location or a list of locations, using the `Location` constructor or the `List` constructor. It provides bidirectional conversion functions between this type and Yojson.Safe.t, enabling serialization and deserialization of location data. This is used to handle structured location information in data exchange formats like JSON, particularly in LSP-related contexts.",
      "description_length": 441,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeKind",
      "library": "linol-eio",
      "description": "This module defines a variant type for categorizing folding ranges in source code, such as comments, imports, regions, and custom categories. It includes functions to convert between the variant type and Yojson representations. Useful for serializing and deserializing folding range kinds when integrating with tools that process or analyze source code structure.",
      "description_length": 363,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SemanticTokensLegend",
      "library": "linol-eio",
      "description": "This module defines a structure for representing semantic token legends, specifically handling mappings of token modifiers and types. It provides functions to construct instances and convert to and from JSON format using Yojson. Concrete use cases include serializing and deserializing token legend data for communication in language server protocols or configuration files.",
      "description_length": 374,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentSaveRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering text document save events, including filters for document selection and a flag to include text content. It works with text document filters, notebook cell filters, and boolean configurations. Use this to specify which documents trigger save notifications in an LSP server, such as filtering by language or including document text in the save event.",
      "description_length": 392,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.RegularExpressionsClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing regular expression engine capabilities, including the engine name and optional version. It provides functions to construct instances, convert to and from JSON format using Yojson. This is used to exchange regex engine metadata between a client and server in a language server protocol implementation.",
      "description_length": 354,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceDiagnosticReportPartialResult",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling partial results of workspace diagnostic reports, containing a list of either full or unchanged document diagnostic reports. It provides functions to create instances of this structure and to serialize or deserialize them using Yojson. Concrete use cases include managing incremental diagnostic updates in an LSP (Language Server Protocol) implementation.",
      "description_length": 404,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DidChangeConfigurationClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing client capabilities for handling configuration changes, specifically supporting optional dynamic registration. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to configure how clients signal support for dynamic configuration updates in language server protocol implementations.",
      "description_length": 381,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.LinkedEditingRangeOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for linked editing range features, primarily handling the `workDoneProgress` flag. It supports creating and serializing these options using `create`, `t_of_yojson`, and `yojson_of_t`. Concrete use cases include enabling or disabling progress reporting during linked editing operations in an editor or IDE.",
      "description_length": 347,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CallHierarchyPrepareParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in preparing call hierarchy requests, including position, text document identifier, and an optional work done token. It provides functions to construct instances, and serialize/deserialize them using Yojson. This module is used to pass contextual information when initiating call hierarchy operations in an LSP server.",
      "description_length": 375,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeConfigurationParams",
      "library": "linol-eio",
      "description": "This module handles the deserialization and reconfiguration of JSON-based settings updates in an LSP (Language Server Protocol) context. It provides a typed representation of the `settings` field and supports conversion to and from Yojson for serialization. It is used specifically for processing configuration change notifications sent by LSP clients.",
      "description_length": 352,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentFormattingOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for document formatting options, specifically supporting a boolean flag to enable or disable work done progress tracking. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This structure is used to configure formatting behavior in text processing tools where progress reporting is required.",
      "description_length": 376,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensRangeParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in semantic token range requests, including optional tokens for partial results and work progress. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This structure is used to request semantic token information for a specific text document range in a language server protocol implementation.",
      "description_length": 396,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.AnnotatedTextEdit",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing text edits with annotations, including the ID of the annotation, the new text to insert, and the range in the document where the edit applies. It provides functions to construct these edit records and to serialize and deserialize them using Yojson. This structure is used to manage and apply changes to source code during analysis or transformation tasks.",
      "description_length": 409,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeHierarchyClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to type hierarchy in a JSON-based communication protocol. It includes functions to construct the structure with an optional dynamic registration flag and to serialize or deserialize it using Yojson. A concrete use case is configuring client support for type hierarchy features in an editor or IDE extension that interacts with a language server.",
      "description_length": 427,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InitializeResult",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for handling initialization results in a server-client communication context. It includes operations to create and serialize server capability and server info records, which are used to exchange metadata and supported features during protocol initialization. The types and functions directly support parsing and generating JSON representations for transport over the wire.",
      "description_length": 422,
      "index": 73,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlineValueWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for inline value workspace client capabilities, primarily supporting a refresh operation. It includes functions to create and serialize instances, with optional refresh support. Concrete use cases include configuring language server clients to handle inline value refresh requests during debugging sessions.",
      "description_length": 344,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentSymbolRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering document symbol providers, supporting filtering by text document or notebook cell document types. It includes fields for specifying a label and enabling work done progress tracking. Use this module to configure symbol registration behavior in language server implementations targeting specific document types.",
      "description_length": 367,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionTriggerKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` with two variants, `Invoked` and `Automatic`, representing the trigger kinds for code actions. It provides functions `t_of_yojson` and `yojson_of_t` to convert between the type `t` and Yojson.Safe.t values. This module is used to serialize and deserialize code action trigger kinds to and from JSON, typically for communication with language servers or configuration handling.",
      "description_length": 407,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DeclarationClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to declaration features in a language server. It includes functions to construct the structure with optional fields for dynamic registration and link support, and to serialize/deserialize it using Yojson. It is used to configure and communicate client capabilities during language server initialization.",
      "description_length": 385,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueContext",
      "library": "linol-eio",
      "description": "This module defines a data structure for tracking inline value context during debugging, specifically associating a stack frame ID with a source code range where execution is paused. It provides functions to construct instances, convert to and from JSON format using Yojson, and works directly with integer frame identifiers and LSP range types. It is used to relay contextual information about paused execution points in a debugger integration.",
      "description_length": 445,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHintOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for inlay hints, specifically whether a resolve provider is enabled and if work done progress is supported. It provides functions to create instances and serialize/deserialize them using Yojson. It is used to configure inlay hint behavior in language server protocol implementations.",
      "description_length": 325,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DidOpenNotebookDocumentParams",
      "library": "linol-eio",
      "description": "This module handles parameters for a notebook document open event, containing a list of cell text documents and the associated notebook document. It provides functions to construct the parameter type, along with JSON serialization and deserialization. Useful for managing notebook state initialization in LSP-based editors.",
      "description_length": 323,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentLink",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing document links with optional metadata such as target URI, tooltip, and arbitrary JSON data. It provides functions to construct link instances and serialize/deserialize them using Yojson. Concrete use cases include handling clickable links in text editors, such as cross-references in documentation or code navigation targets.",
      "description_length": 379,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentHighlightKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing different kinds of document highlights, including text, read, and write operations. It provides functions to convert between this type and JSON using Yojson. This is useful for serializing and deserializing document highlight data in applications that process or transmit such information.",
      "description_length": 333,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RelativePattern",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing relative patterns with a base URI and a string pattern. It provides functions to construct instances, serialize to and from JSON using Yojson. Concrete use cases include handling file paths or resource identifiers in a structured format.",
      "description_length": 291,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ShowMessageRequestParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters of a show message request, including message content, type, and optional actionable items. It provides functions to construct instances, and serialize/deserialize to and from JSON. It is used to format and handle interactive messages in a language server protocol context.",
      "description_length": 324,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextEdit",
      "library": "linol-eio",
      "description": "This module represents text edits as a combination of a string and a range, enabling precise modifications to text documents. It provides functions to construct edits, convert them to and from JSON, and integrates directly with LSP range definitions. Concrete use cases include applying single or batched code changes in an editor or implementing automated refactoring tools.",
      "description_length": 375,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentColorRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering document color providers, including filters for text documents or notebook cells, an optional registration ID, and progress reporting. It supports creating and serializing these options with optional fields. Useful for configuring color provider registrations in LSP servers handling text or notebook documents.",
      "description_length": 355,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlineCompletionTriggerKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` with two variants, `Invoked` and `Automatic`, representing the possible trigger kinds for inline completion events. It provides functions `t_of_yojson` and `yojson_of_t` for converting between the type and Yojson representations. This module is used to serialize and deserialize trigger kind data when handling inline completion requests in an editor or language server integration.",
      "description_length": 413,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentRangeFormattingOptions",
      "library": "linol-eio",
      "description": "This module defines options for document range formatting, including support for ranges and work done progress. It provides functions to create instances and convert to and from JSON using Yojson. Concrete use cases include configuring formatting behavior in text editors or language servers where partial document ranges need to be processed.",
      "description_length": 343,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentOnTypeFormattingParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling document formatting parameters triggered by a specific character input. It includes functions to construct the structure and serialize/deserialize it using JSON. It is used to pass formatting options, cursor position, and document identifier during on-type formatting operations in a language server.",
      "description_length": 350,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TypeHierarchySupertypesParams",
      "library": "linol-eio",
      "description": "This module defines a data structure representing parameters for a type hierarchy supertypes request, including a type hierarchy item and optional tokens for partial results and work progress. It provides functions to construct instances, and to convert to and from JSON format using Yojson. It is used to manage and serialize the parameters needed during type hierarchy traversal in a language server protocol implementation.",
      "description_length": 426,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHintRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for inlay hint registration, including document filters, an optional identifier, and flags for resolution and progress handling. It supports creating and serializing these configurations with optional fields for flexibility. Use cases include setting up inlay hint providers in an LSP server with specific document filtering and progress reporting requirements.",
      "description_length": 403,
      "index": 91,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.VersionedNotebookDocumentIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing a versioned notebook document identifier, consisting of a URI and an integer version. It provides functions to construct such identifiers, convert them to and from JSON format using Yojson, ensuring proper serialization and deserialization. This module is used to uniquely identify specific versions of notebook documents in a system that tracks changes over time.",
      "description_length": 408,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling parameters related to folding ranges in a text document, including optional tokens for partial results and work progress. It provides functions to construct instances, and to convert to and from JSON format using Yojson. It is used to manage and serialize request parameters sent between a language server and a client for code folding operations.",
      "description_length": 397,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookDocumentChangeEvent",
      "library": "linol-eio",
      "description": "This module defines data structures and constructors for representing changes to notebook documents, including text content updates, cell structure modifications, and metadata changes. It works with versioned text documents, notebook cells, and JSON metadata, providing precise tracking of edits, additions, and removals. Concrete use cases include handling notebook synchronization events in an LSP server, managing incremental updates to notebook cells, and serializing change events for transport.",
      "description_length": 500,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RenameParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for holding parameters related to renaming operations in a text document. It includes functions to construct the structure, convert it to and from JSON format. It is used to handle rename requests in language server protocol interactions, specifically for tracking the new name, position, and document context during a rename operation.",
      "description_length": 373,
      "index": 95,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CompletionParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for holding parameters used in a completion request, including position, text document identifier, and optional context and tokens. It provides functions to construct instances of this structure and to serialize/deserialize it using Yojson. Concrete use cases include handling auto-completion events in an LSP server by capturing the necessary contextual and positional data.",
      "description_length": 412,
      "index": 96,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ShowDocumentClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing client capabilities for showing documents, with a single boolean field indicating support. It provides functions to create instances, serialize to, and deserialize from JSON using Yojson. This is used to communicate document display capabilities in a language server protocol implementation.",
      "description_length": 341,
      "index": 97,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for client capabilities in a language server protocol implementation, supporting optional fields like text document, workspace, and window capabilities. It provides functions to construct instances with optional parameters and to serialize or deserialize them using Yojson. Concrete use cases include configuring client features during LSP initialization and parsing capability data from JSON payloads.",
      "description_length": 439,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionTriggerKind",
      "library": "linol-eio",
      "description": "This module defines a variant type `t` representing different kinds of triggers for completion events, including explicit invocation, trigger characters, and triggers for incomplete completions. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This type is used to distinguish how a completion request was initiated, typically in language server protocol implementations.",
      "description_length": 444,
      "index": 99,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CompletionClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for specifying client capabilities related to code completion in a language server protocol implementation. It includes types for completion items, item kinds, list settings, and support features like insert text modes, tags, and resolve capabilities. These structures are used to configure and exchange completion-related metadata between a client and a language server during initialization.",
      "description_length": 443,
      "index": 100,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SetTraceParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring trace parameters with a specific type `t` that wraps a `TraceValues.t` value. It provides functions to create instances of this structure and to serialize and deserialize them using Yojson. It is used to manage trace settings in JSON format, particularly for communication or configuration purposes.",
      "description_length": 352,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DeclarationRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering document declarations, supporting filters for text documents or notebook cells, an optional identifier, and progress tracking. It provides functions to construct these options, convert them to and from JSON format. It is used to specify parameters when registering features like hover or completion handlers in language server extensions.",
      "description_length": 396,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensDelta",
      "library": "linol-eio",
      "description": "This module represents semantic token updates using a list of edits and an optional result identifier. It provides functions to construct these updates, convert them to and from JSON format. It is used to efficiently transmit changes in semantic token annotations between a language server and client.",
      "description_length": 301,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.HoverClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines hover client capabilities for LSP, including content format and dynamic registration support. It works with LSP markup kinds and boolean options. It is used to configure hover functionality in language servers, enabling clients to specify supported formats and registration methods.",
      "description_length": 302,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InsertReplaceEdit",
      "library": "linol-eio",
      "description": "This module defines a record type with `insert`, `newText`, and `replace` fields to represent text edits in a document. It provides functions to construct instances of this type and to serialize/deserialize them using Yojson. It is used to model precise text modifications for language server protocol interactions, such as applying code fixes or refactoring changes.",
      "description_length": 367,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ExecuteCommandRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for specifying command execution registration options, including a list of commands and an optional work done progress flag. It provides functions to create instances, convert to and from JSON format using Yojson. It is used to configure command registration in language server protocol implementations where command execution capabilities must be explicitly declared.",
      "description_length": 405,
      "index": 106,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.WorkspaceFolder",
      "library": "linol-eio",
      "description": "This module defines a workspace folder structure with a name and URI, providing functions to create instances and serialize or deserialize them using Yojson. It works with string names and LSP-compliant URIs. It is used to manage and persist workspace folder configurations in an editor or IDE environment.",
      "description_length": 306,
      "index": 107,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.UniquenessLevel",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing levels of uniqueness scope, including document, project, group, scheme, and global. It provides functions to convert values of this type to and from Yojson for serialization and deserialization. This is used to handle configuration or state data that must persist across sessions or be shared between components with different uniqueness requirements.",
      "description_length": 395,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookDocumentSyncClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure with two optional boolean fields, `dynamicRegistration` and `executionSummarySupport`, representing client capabilities for notebook document synchronization. It provides functions to construct instances, and to convert to and from JSON format using Yojson. It is used to configure and exchange client-side notebook synchronization settings in a language server protocol implementation.",
      "description_length": 423,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineCompletionItem",
      "library": "linol-eio",
      "description": "This module defines a data structure for inline completion items in a language server protocol context, including fields like command, filter text, insert text, and range. It provides functions to construct these items, and to serialize and deserialize them using Yojson. Use this module to generate or process inline code completions with precise formatting and contextual commands.",
      "description_length": 383,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling code action parameters in the context of the LSP (Language Server Protocol), including fields like context, range, and text document identifiers. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to request code actions such as quick fixes or refactorings at specific locations in a text document.",
      "description_length": 399,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InitializedParams_",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for handling initialization parameters in an LSP (Language Server Protocol) context. It includes types for client information and initialization parameters, with functions to construct and serialize these types. It is used to capture client capabilities, configuration options, and runtime settings during LSP server initialization.",
      "description_length": 382,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentRangesFormattingParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for formatting parameters that includes a text document identifier, a list of ranges, formatting options, and an optional work done token. It provides functions to construct instances, convert to and from JSON format. It is used to specify how and where to apply text formatting in a document, particularly in the context of language server protocol operations.",
      "description_length": 398,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentSymbolClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines and manipulates client capabilities related to document symbols in a language server protocol implementation. It includes structures for specifying supported symbol kinds, tags, and features like hierarchical symbols and label support, primarily used during protocol negotiation. The module works directly with LSP types and supports JSON serialization for communication with clients.",
      "description_length": 404,
      "index": 114,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DiagnosticServerCancellationData",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling cancellation requests in a diagnostic server context. It includes operations to create and serialize a cancellation data record with a `retriggerRequest` boolean field. The module supports JSON serialization and deserialization using the Yojson library, enabling straightforward integration with JSON-based communication protocols.",
      "description_length": 381,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a record type `t` that captures client capabilities for text document features in a language server, with optional fields for specific capabilities like code actions, completion, hover, and synchronization. It provides a `create` function to construct values of `t` with optional parameters for each capability, allowing fine-grained configuration of client support. The module also includes functions to convert between `t` and Yojson for serialization and deserialization, enabling use in JSON-based communication protocols.",
      "description_length": 546,
      "index": 116,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DidChangeWatchedFilesParams",
      "library": "linol-eio",
      "description": "Handles parameters for file change events in a language server protocol implementation. Works with lists of file events to track modifications to watched files. Converts between JSON representations and typed data structures for efficient serialization and processing.",
      "description_length": 268,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentSelector",
      "library": "linol-eio",
      "description": "This module defines a type for document selectors used to match text documents or notebook cell documents based on criteria like language, URI, or notebook type. It includes functions to convert between JSON representations and the document selector type. Concrete use cases include filtering which documents a language server should handle, such as applying specific diagnostics only to Python files in a notebook environment.",
      "description_length": 427,
      "index": 118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CompletionList",
      "library": "linol-eio",
      "description": "This module constructs and serializes completion lists for code editors, handling insertion and replacement ranges, text formatting, and commit characters. It works with LSP completion items, ranges, and JSON data structures to define how suggestions are displayed and applied. Use it to generate structured autocompletion responses in language servers or editor integrations.",
      "description_length": 376,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentColorOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for document color options with a single field indicating whether work done progress is enabled. It provides functions to create instances, convert to and from JSON using Yojson, and manage optional configuration values. It is used to configure document color-related behavior in LSP (Language Server Protocol) implementations.",
      "description_length": 364,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceDiagnosticReport",
      "library": "linol-eio",
      "description": "This module represents diagnostic reports for workspace documents, supporting creation from mixed full and unchanged document diagnostic entries. It handles serialization and deserialization to and from JSON using Yojson, specifically working with lists of workspace diagnostic report variants. It is used to structure and exchange diagnostic data in LSP (Language Server Protocol) implementations.",
      "description_length": 398,
      "index": 121,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.LogTraceParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for log trace parameters, including a required message and an optional verbose string. It provides functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include serializing log data for storage or transmission and reconstructing log traces from JSON input.",
      "description_length": 338,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Locations",
      "library": "linol-eio",
      "description": "This module defines a type `t` that represents either a list of LSP locations or a list of LSP location links. It provides functions to convert this type to and from Yojson for serialization and deserialization. It is used to handle structured location data in LSP-related operations, such as symbol definitions or references.",
      "description_length": 326,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RenameFileOptions",
      "library": "linol-eio",
      "description": "This module defines options for file renaming operations, specifically handling behaviors for `ignoreIfExists` and `overwrite`. It works with boolean values wrapped in `option` types to represent optional configuration parameters. It is used to configure file rename actions in JSON format, enabling serialization and deserialization of rename settings.",
      "description_length": 353,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ColorInformation",
      "library": "linol-eio",
      "description": "This module defines a type `t` that pairs a color with a range, representing a specific color annotation in a text document. It provides functions to construct instances of this type, convert them to and from JSON format using Yojson. It is used to serialize and deserialize color information for features like syntax highlighting or inline color previews in an editor or IDE.",
      "description_length": 376,
      "index": 125,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ResourceOperationKind",
      "library": "linol-eio",
      "description": "This module defines a variant type representing resource operation kinds such as create, rename, and delete. It includes functions to convert these operations to and from JSON format using Yojson. This enables direct serialization and deserialization of resource operations for use in logging, configuration, or communication protocols.",
      "description_length": 336,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeLensParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in code lens operations, including tokens for partial results and work done notifications, along with a text document identifier. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This structure is used to pass contextual information during code lens processing in an LSP server.",
      "description_length": 385,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ConfigurationItem",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing configuration items with optional scope URIs and sections. It provides functions to create instances and convert to and from JSON format using Yojson. Concrete use cases include parsing and serializing configuration data for LSP (Language Server Protocol) clients or servers.",
      "description_length": 329,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SelectionRangeRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering selection range capabilities in a language server. It includes fields for specifying document filters, an optional registration ID, and whether work done progress is supported. The module provides functions to construct these options and serialize/deserialize them to and from JSON.",
      "description_length": 340,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeDefinitionParams",
      "library": "linol-eio",
      "description": "This module defines a record type for parameters used in type definition requests, including optional tokens and references to a text document and position. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to pass contextual information for type definition queries in a language server protocol implementation.",
      "description_length": 357,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SymbolTag",
      "library": "linol-eio",
      "description": "This module defines a single variant type `t` representing symbol tags, currently only `Deprecated`. It provides direct serialization and deserialization to and from Yojson for this type. Useful for handling tagged symbols in JSON-based data processing workflows.",
      "description_length": 263,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookCell",
      "library": "linol-eio",
      "description": "This module defines a notebook cell structure with fields for document URI, execution summary, cell kind, and metadata. It provides functions to create a cell with optional parameters and to serialize/deserialize cells using Yojson. Concrete use cases include managing individual cells in a notebook interface, tracking execution state, and persisting cell data to disk or over the network.",
      "description_length": 390,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing workspace client capabilities in a language server protocol implementation. It includes fields for enabling or configuring specific features like code lenses, diagnostics, file operations, and workspace edits, each tied to corresponding capability types. The module provides functions to construct instances, and serialize or deserialize them using Yojson for communication over JSON-based protocols.",
      "description_length": 450,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentHighlightRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for document highlight registration, including a list of document filters and an optional work done progress flag. It provides functions to create instances of these options and to serialize or deserialize them using Yojson. Use this module to specify which documents should trigger highlight operations and to manage progress reporting in LSP integrations.",
      "description_length": 399,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.FileOperationPattern",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file operation patterns with glob matching, optional match kinds, and pattern options. It provides functions to construct these patterns, and serialize/deserialize them to and from JSON. It is used to specify which file operations should trigger specific behaviors, such as watching or processing files based on their paths or types.",
      "description_length": 387,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.HoverOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for hover options with a single optional boolean field indicating whether work done progress is enabled. It provides functions to create instances, serialize to and from JSON using Yojson. A concrete use case is configuring hover behavior in a language server where progress reporting is conditionally required.",
      "description_length": 348,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DefinitionClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines client capabilities related to dynamic registration and link support features. It provides functions to construct capability records, and serialize or deserialize them using Yojson. It is used to configure and exchange feature support metadata between a language server and client.",
      "description_length": 301,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DeclarationParams",
      "library": "linol-eio",
      "description": "This module defines a record type for parameters used in a declaration request, including optional tokens for partial results and work progress, along with position and text document identifiers. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This structure is used to pass parameters in LSP (Language Server Protocol) requests related to symbol declarations, such as handling client-specified positions and document contexts.",
      "description_length": 478,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueEvaluatableExpression",
      "library": "linol-eio",
      "description": "This module defines a data structure representing an inline value evaluatable expression with an optional expression string and a range. It provides functions to create instances, serialize to, and deserialize from JSON using Yojson. It is used to handle inline value expressions in the context of language server protocol interactions.",
      "description_length": 336,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.HoverParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling hover request parameters in a language server protocol implementation. It includes fields for position, text document identifier, and an optional work done token, with support for JSON serialization and deserialization. It is used to pass contextual information when retrieving hover content for a specific location in a text document.",
      "description_length": 385,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RegistrationParams",
      "library": "linol-eio",
      "description": "This module handles the creation and JSON serialization of registration parameters, specifically working with a list of registration objects. It provides functions to construct a parameter record and convert it to and from JSON format using Yojson. A concrete use case includes preparing and parsing registration data for transmission in a language server protocol implementation.",
      "description_length": 380,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeConfigurationRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing configuration change registration options, specifically allowing a configuration section to be specified either as a single string or a list of strings. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. This is useful for handling dynamic configuration updates in a structured and type-safe manner during runtime.",
      "description_length": 409,
      "index": 142,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.RenameRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering rename operations in a language server, supporting document filters, preparation providers, and progress reporting. It works with document selectors that target text documents or notebook cells, using LSP types for filtering and JSON serialization. Concrete use cases include setting up rename capabilities in an LSP server with optional work done progress tracking and client-side preparation.",
      "description_length": 452,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InitializeError",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling initialization errors with a boolean flag indicating whether a retry is needed. It provides functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include managing error states during system initialization where retry logic depends on the error type.",
      "description_length": 344,
      "index": 144,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DidSaveNotebookDocumentParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` that represents parameters for a notebook document save event, containing a `notebookDocument` field of type `Linol_lsp__Types.NotebookDocumentIdentifier.t`. It provides functions to construct instances of `t`, and to convert between `t` and `Yojson.Safe.t` for JSON serialization and deserialization. This module is used to handle document identifiers during notebook save operations in a language server protocol context.",
      "description_length": 454,
      "index": 145,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlineCompletionRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for inline completion features in a language server, specifically supporting document filtering, identifier assignment, and progress tracking. It works with document selectors that target either text documents or notebook cells, using corresponding filter types. The module is used to configure inline completion registration in LSP (Language Server Protocol) implementations, enabling features like contextual code suggestions in editors.",
      "description_length": 481,
      "index": 146,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SelectionRangeOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for selection range options, specifically supporting a `workDoneProgress` boolean flag. It provides functions to create instances, and to convert to and from JSON format using Yojson. This is useful for configuring and serializing options related to text selection range processing in language tools or editors.",
      "description_length": 348,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ExecuteCommandOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring command execution options, including a list of commands and an optional work progress flag. It provides functions to construct instances, convert to and from JSON format. Useful for managing and serializing command execution settings in a JSON-based configuration or communication context.",
      "description_length": 342,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionContext",
      "library": "linol-eio",
      "description": "This module defines a completion context with optional trigger character and trigger kind, using LSP completion trigger kinds. It provides functions to create instances and serialize/deserialize them using Yojson. Useful for handling language server protocol completion requests with precise trigger information.",
      "description_length": 312,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for configuring folding range capabilities in a language server. It includes types for specifying supported folding range kinds, options for folding behavior such as collapsed text display and line-only folding, and functions to construct these configurations. These capabilities are used to customize how code folding is handled in text editors supporting the Language Server Protocol.",
      "description_length": 436,
      "index": 150,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ShowMessageRequestClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and serialization functions for handling client capabilities related to showing message requests. It includes types for `messageActionItem` with optional `additionalPropertiesSupport`, and a main type `t` that holds an optional `messageActionItem`. The module supports converting these structures to and from Yojson for use in LSP (Language Server Protocol) communication, specifically for capabilities negotiation during client initialization.",
      "description_length": 480,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MessageActionItem",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing message action items with a title. It provides functions to create instances, serialize to and from JSON using Yojson. It is used to handle actionable messages in a type-safe way during communication or storage operations.",
      "description_length": 276,
      "index": 152,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SemanticTokensClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines and constructs capabilities for semantic token handling in a language server, focusing on client-side configuration. It supports operations to specify token formats, dynamic registration, syntax augmentation, and request types like range or full token updates. Concrete use cases include configuring a language server client to handle syntax highlighting with specific token modifiers and formats.",
      "description_length": 417,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ExecuteCommandClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to command execution in a JSON-based communication protocol. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances to and from JSON format. A typical use case involves configuring and transmitting client capabilities during the initialization phase of a language server or similar service.",
      "description_length": 450,
      "index": 154,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Linol_eio.FailureHandlingKind",
      "library": "linol-eio",
      "description": "This module defines a polymorphic variant type representing different strategies for handling failures in operations, such as aborting, applying transactional behavior, or enabling undo functionality. It includes functions to convert between the type and Yojson representations, supporting serialization and deserialization. This is useful when configuring error recovery mechanisms in systems requiring precise control over transactional or reversible actions.",
      "description_length": 461,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MonikerRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering moniker providers in a language server, supporting configuration of document selectors and work done progress. It works with LSP text document filters and notebook cell filters to specify which documents to handle. Use this to configure moniker-related capabilities in LSP extensions for editors like VS Code.",
      "description_length": 353,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CreateFilesParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling a list of file creation requests and provides functions to serialize and deserialize instances of this structure using Yojson. It works with a record type `t` containing a list of `FileCreate.t` values. Concrete use cases include parsing file creation parameters from JSON input and preparing them for processing in an LSP server.",
      "description_length": 380,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionOptions",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for configuring code completion features in an editor or IDE. It includes types for completion items and global completion settings, supporting fields like trigger characters, commit characters, and progress indicators. The module is used to serialize and deserialize completion configurations to and from JSON, enabling storage or transmission of editor preferences.",
      "description_length": 417,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SemanticTokens",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing semantic token data as an integer array with an optional result identifier. It includes functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include serializing and deserializing semantic token information for transport or storage in JSON-based protocols.",
      "description_length": 355,
      "index": 159,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.Range",
      "library": "linol-eio",
      "description": "This module represents a range defined by start and end positions, typically used to describe regions within a text document. It provides functions to construct ranges and serialize or deserialize them using Yojson. Concrete use cases include tracking text edits or highlighting specific sections of code in an editor.",
      "description_length": 318,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueText",
      "library": "linol-eio",
      "description": "This module defines a data structure representing inline text values with associated source code ranges. It provides functions to construct these values, along with serialization and deserialization to and from JSON. It is used to encode textual annotations positioned within source files, such as inline variable values during debugging.",
      "description_length": 338,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentHighlightOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for document highlighting features, primarily controlling whether work done progress is enabled. It works with JSON data structures through serialization and deserialization functions. Concrete use cases include parsing and generating configuration data for language server protocol interactions.",
      "description_length": 338,
      "index": 162,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentFilter",
      "library": "linol-eio",
      "description": "This module defines a type `t` that represents filters for text documents and notebook cell text documents, supporting discrimination between the two via polymorphic variants. It provides functions to convert values of type `t` to and from Yojson representations, enabling serialization and deserialization for use in LSP-related communication. These conversions are essential when handling document filter configurations or matching document events in an editor integration scenario.",
      "description_length": 484,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureHelpParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in signature help requests, including position, text document identifier, optional context, and a work done token. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to pass signature help request data between components in an LSP server implementation.",
      "description_length": 361,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.LinkedEditingRangeParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in linked editing range requests, including position, text document identifier, and an optional work done token. It provides functions to construct instances, and to convert to and from JSON format using Yojson. It is used to handle linked editing ranges in a text document, such as when multiple sections of code need to be edited simultaneously based on a single change.",
      "description_length": 429,
      "index": 165,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlineCompletionOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for inline completion features, specifically supporting optional work-done progress tracking. It provides functions to create and serialize these options using `Yojson.Safe.t` for JSON encoding and decoding. Use this module to manage inline completion settings in JSON-based communication, such as with language server protocols.",
      "description_length": 371,
      "index": 166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CodeActionOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for code actions, including supported kinds, resolution capability, and progress reporting. It works with LSP code action kinds and boolean flags. It is used to serialize and deserialize code action settings to and from JSON for editor integration.",
      "description_length": 290,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookCellTextDocumentFilter",
      "library": "linol-eio",
      "description": "This module defines a filter for notebook cell text documents, allowing specification by language and notebook identifier. It supports creating filters with optional language and notebook criteria, and serializing or deserializing them using Yojson. Concrete use cases include configuring language-specific notebook cell processing or filtering cells during document synchronization.",
      "description_length": 383,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressCancelParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing cancellation parameters for work progress, with a `token` field that can be an integer or string. It provides functions to create instances, convert to and from JSON using Yojson. Useful for handling cancellation requests in LSP (Language Server Protocol) implementations where progress tokens need to be parsed or serialized.",
      "description_length": 370,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for tracking work progress, with a single field indicating whether work progress is enabled. It provides functions to create instances, convert to and from JSON using Yojson. This is used to serialize or deserialize progress tracking settings in LSP (Language Server Protocol) implementations.",
      "description_length": 334,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.StaticRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for static registration options with an optional string identifier. It provides functions to create instances, serialize to and from JSON using Yojson. A concrete use case is handling configuration data that requires optional identifiers during system initialization.",
      "description_length": 304,
      "index": 171,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DefinitionLink",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing links between definitions, with support for serialization and deserialization to and from JSON using Yojson. It provides functions to convert values of type `t` to and from `Yojson.Safe.t`, enabling persistent storage or transmission of definition link data. Concrete use cases include saving definition relationships in a database or exchanging them over a network.",
      "description_length": 420,
      "index": 172,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.LogMessageParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for log messages with a message string and a message type from the LSP specification. It includes functions to construct instances, and to serialize and deserialize them using Yojson. It is used to handle logging of structured messages in an LSP server implementation.",
      "description_length": 305,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.BaseSymbolInformation",
      "library": "linol-eio",
      "description": "This module defines a record type for representing symbol information with optional container name, symbol kind, name, and tags. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to serialize and deserialize symbol data for communication in a language server protocol implementation.",
      "description_length": 329,
      "index": 174,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.Diagnostic",
      "library": "linol-eio",
      "description": "This module defines a diagnostic data structure for representing code analysis results, including severity, message, range, and optional metadata like code descriptions or related information. It provides functions to construct diagnostics and serialize them to and from JSON. Concrete use cases include reporting syntax errors, type-checking issues, or linting warnings in an editor integration.",
      "description_length": 396,
      "index": 175,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentRangeFormattingParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in document range formatting operations, including formatting options, a text range, and a document identifier. It provides functions to construct instances and serialize/deserialize them using Yojson. Concrete use cases include handling formatting requests in a language server where specific document regions need to be reformatted according to given settings.",
      "description_length": 419,
      "index": 176,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.WorkspaceEdit",
      "library": "linol-eio",
      "description": "This module constructs and serializes workspace edit operations for LSP (Language Server Protocol) interactions. It handles text document modifications, file creations, renames, and deletions through structured JSON representations. Use it to generate or parse LSP-compliant workspace edits during code refactoring or batch file operations.",
      "description_length": 340,
      "index": 177,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CodeLensRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for code lens registration, including document selectors, resolve provider enablement, and work done progress tracking. It works with document filter types to specify which files or notebook cells the code lens applies to, and serializes/deserializes these options using JSON. Concrete use cases include setting up code lens features in an LSP server for specific document types and managing progress reporting during code lens resolution.",
      "description_length": 481,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and serialization functions for representing client capabilities related to code actions in a language server protocol implementation. It includes types for resolve support, code action kinds, and literal support, along with optional fields for various capability flags like dynamic registration and data support. The module is used to configure and exchange code action capabilities between a language client and server, enabling features like annotation handling and preferred action resolution.",
      "description_length": 533,
      "index": 179,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlineValueOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring inline value options, specifically supporting work done progress tracking. It provides functions to create instances, convert to and from JSON format, and is used to customize behavior in scenarios requiring progress reporting. Concrete use cases include enabling or disabling progress notifications in interactive tools or long-running processes.",
      "description_length": 400,
      "index": 180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ResourceOperation",
      "library": "linol-eio",
      "description": "This module defines a data structure representing resource operations with optional annotations. It supports creating instances with a specified kind and optional identifier, and serializing or deserializing them using Yojson. It is useful for tracking and persisting resource modifications in a JSON-based workflow.",
      "description_length": 316,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Hover",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing hover information in a language server protocol, containing either markup content, a marked string, or a list of marked strings, along with an optional range. It provides functions to construct hover values, and to serialize and deserialize them using Yojson. It is used to generate rich hover tooltips in editors supporting LSP, such as displaying documentation or type information at specific source code locations.",
      "description_length": 461,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.PrepareSupportDefaultBehavior",
      "library": "linol-eio",
      "description": "This module defines a single variant type `t` representing an identifier and provides direct serialization and deserialization functions to and from Yojson.Safe.t. It is used to handle JSON data for a specific identifier case, enabling straightforward conversion between JSON values and the `Identifier` constructor. Concrete use cases include parsing and generating JSON payloads where a simple identifier structure is required, such as configuration files or API responses.",
      "description_length": 475,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentLinkOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring document link resolution behavior, with fields to enable or disable link resolution and progress reporting. It provides functions to construct instances, convert to and from JSON format. Used to customize document link handling in language server protocols.",
      "description_length": 310,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to inline value registration, specifically supporting optional dynamic registration. It provides functions to construct instances, convert to and from JSON format using Yojson, and manage boolean flags indicating capability support. Concrete use cases include configuring language server clients to handle inline value requests dynamically during code editing sessions.",
      "description_length": 451,
      "index": 185,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentDiagnosticParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing parameters for document diagnostic requests, including optional fields like `identifier`, `partialResultToken`, `previousResultId`, and `workDoneToken`, along with a required `textDocument` field. It provides functions to construct instances of this type, and to serialize and deserialize them using Yojson. This module is used to pass diagnostic request parameters in an LSP (Language Server Protocol) context, specifically for handling document diagnostics with support for incremental results and work tokens.",
      "description_length": 556,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeDefinitionOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for handling work progress options, specifically supporting optional boolean flags. It provides functions to create instances, serialize, and deserialize these configurations using JSON. Useful for managing progress reporting settings in JSON-based communication protocols.",
      "description_length": 314,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressEnd",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing the end of a work done progress notification, containing an optional message. It provides functions to create a value of this type, and to convert it to and from JSON using the Yojson library. This is useful for signaling the completion of a long-running operation with an optional final message in a JSON-based protocol.",
      "description_length": 365,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeLens",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing code lenses in a text editor, including optional command and data fields along with a required range. It provides functions to construct code lens instances and to serialize or deserialize them using Yojson. Concrete use cases include attaching actionable metadata to specific regions of source code, such as displaying references or quick fixes in an editor interface.",
      "description_length": 423,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DeleteFilesParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling file deletion requests, specifically a list of file delete operations. It provides functions to create instances of this structure and to serialize or deserialize them using Yojson. It is used to manage batch file deletions in a format compatible with JSON-based communication protocols.",
      "description_length": 337,
      "index": 190,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DeleteFile",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file deletion operations, including an optional annotation ID, deletion options, and a URI. It provides functions to construct instances, convert to and from JSON using Yojson. Concrete use cases include handling file deletion requests in a language server protocol implementation.",
      "description_length": 335,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CancelParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing cancellation parameters in JSON-RPC requests, specifically containing an `id` field that identifies the request to cancel. It provides functions to construct instances of this structure, convert them to and from JSON format using Yojson, and ensures compatibility with the JSON-RPC specification. Concrete use cases include handling cancellation of ongoing operations in a language server or similar service that uses JSON-RPC over Eio for concurrency.",
      "description_length": 506,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SymbolKind",
      "library": "linol-eio",
      "description": "This module defines a variant type representing different kinds of symbols in a programming context, such as `Class`, `Function`, `Variable`, and `Enum`. It includes functions to convert values between this type and Yojson for serialization and deserialization. This type is useful for tools that analyze or manipulate code, such as language servers or static analyzers.",
      "description_length": 370,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeHierarchyPrepareParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for preparing type hierarchy parameters, including position, text document identifier, and an optional work done token. It provides functions to create instances, and serialize/deserialize to and from JSON. It is used to pass parameters for type hierarchy operations in a language server protocol implementation.",
      "description_length": 349,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidCloseNotebookDocumentParams",
      "library": "linol-eio",
      "description": "This module handles parameters for a notebook document close event, capturing the notebook identifier and associated cell text documents. It provides functions to construct the parameter type, along with JSON serialization and deserialization. It is used when notifying the server that a notebook document has been closed, ensuring related cell documents are properly tracked.",
      "description_length": 376,
      "index": 195,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TextDocumentSyncKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing the synchronization kind for text documents, with variants `None`, `Full`, and `Incremental`. It provides functions to convert between this type and Yojson for serialization and deserialization. This is used to handle document sync configurations in language server protocol implementations.",
      "description_length": 335,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentSymbolParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in document symbol requests, including optional tokens for partial results and progress tracking, along with a text document identifier. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This structure is used to request symbol information from a text document in the context of language server protocol interactions.",
      "description_length": 423,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ColorPresentation",
      "library": "linol-eio",
      "description": "This module defines a type `t` for representing color presentation data with optional text edits and a label. It provides functions to construct instances of this type and to serialize and deserialize them using Yojson. The module is used to handle color formatting and text adjustments in a language server protocol context.",
      "description_length": 325,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ProgressParams",
      "library": "linol-eio",
      "description": "This module handles the creation and JSON serialization of progress parameters, specifically for tracking or reporting progress in a structured format. It works with abstract data types wrapped in a `t` type, which includes a token (integer or string) and a generic value. Concrete use cases include encoding and decoding progress updates to and from JSON, such as in LSP (Language Server Protocol) implementations.",
      "description_length": 415,
      "index": 199,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.WorkspaceDiagnosticParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for workspace diagnostic parameters, including optional identifiers, partial result tokens, previous result IDs, and work done tokens. It provides functions to create instances and convert to and from JSON format. It is used to manage diagnostic data in a workspace, particularly for handling incremental updates and tracking diagnostic results across sessions.",
      "description_length": 398,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ShowDocumentResult",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing the result of a document display operation, specifically indicating success or failure. It includes functions to create instances, serialize to JSON, and deserialize from JSON. A concrete use case is handling responses in a document management system where the outcome of displaying a document must be communicated in a structured format.",
      "description_length": 392,
      "index": 201,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InsertTextMode",
      "library": "linol-eio",
      "description": "This module defines an enumeration with two values, `AsIs` and `AdjustIndentation`, representing modes for inserting text. It provides functions to convert these values to and from JSON format using the Yojson library. This module is used to specify whether inserted text should maintain its original formatting or be adjusted to match the current indentation level in a text editor context.",
      "description_length": 391,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DeleteFileOptions",
      "library": "linol-eio",
      "description": "This module defines options for file deletion operations, including flags to ignore non-existent files and enable recursive deletion. It provides functions to construct these options and serialize/deserialize them to and from JSON. Concrete use cases include configuring file removal behavior in a filesystem management tool or a build system that needs to clean up directories.",
      "description_length": 378,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueVariableLookup",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing inline value variable lookups, including whether the lookup is case-sensitive, the associated range, and an optional variable name. It provides functions to construct instances, serialize to and from JSON. It is used to pass inline value information between language server components during debugging sessions.",
      "description_length": 365,
      "index": 204,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SemanticTokensParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in semantic token requests, including optional tokens for partial results and work done tracking, along with a text document identifier. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This structure is used to pass semantic token request parameters between components in a language server implementation.",
      "description_length": 413,
      "index": 205,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ReferenceOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring reference-related options, specifically supporting a boolean flag for work-done progress. It provides functions to create instances, convert to and from JSON format. This module is used to serialize and deserialize configuration settings for reference handling in JSON-based communication.",
      "description_length": 342,
      "index": 206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Declaration",
      "library": "linol-eio",
      "description": "This module defines a type `t` that represents either a single location or a list of locations, using the `Location.t` type from the `Linol_lsp__Types` module. It provides serialization and deserialization functions for converting values of type `t` to and from Yojson. It is used to handle location-based declarations in JSON format, particularly in LSP-related contexts.",
      "description_length": 372,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidCloseTextDocumentParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` that represents parameters for a text document close event, containing a `textDocument` field of type `TextDocumentIdentifier.t`. It provides functions to create instances of this type, and to convert to and from JSON using the `Yojson` library. This module is used to handle notifications when a text document is closed in an LSP (Language Server Protocol) server.",
      "description_length": 396,
      "index": 208,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.NotebookDocument",
      "library": "linol-eio",
      "description": "This module defines a notebook document structure with operations to create and serialize documents. It works with lists of notebook cells, JSON metadata, URIs, and version numbers. Use it to construct or parse notebook documents from JSON, such as when loading or saving notebooks in an editor or LSP server.",
      "description_length": 309,
      "index": 209,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SemanticTokensRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for semantic token registration in a language server, supporting full or delta token computation. It works with document filters, semantic token legends, and optional boolean flags to control token range and progress reporting. Use this to specify how semantic tokens should be provided for text documents or notebook cells in an LSP-compliant editor integration.",
      "description_length": 405,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookDocumentSyncRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines empty data structures and serialization functions for notebook document synchronization options. It provides `t_of_yojson` and `yojson_of_t` to convert between JSON and an empty unit type. Used to handle configuration data during notebook document sync setup in a language server.",
      "description_length": 300,
      "index": 211,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TraceValues",
      "library": "linol-eio",
      "description": "This module defines a polymorphic variant type `t` representing trace verbosity levels, including `Compact`, `Off`, `Messages`, and `Verbose`. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. These functions enable configuration of trace output in JSON-based settings, such as reading trace settings from a configuration file or sending trace data over a network.",
      "description_length": 436,
      "index": 212,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DiagnosticWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing workspace client capabilities related to diagnostics, specifically supporting an optional refresh flag. It provides functions to create instances, serialize to JSON, and deserialize from JSON using Yojson. This is used to configure diagnostic capabilities in a language server, enabling or disabling dynamic refresh support.",
      "description_length": 378,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentUri",
      "library": "linol-eio",
      "description": "This module handles document URIs by converting them to and from strings, paths, and JSON, while supporting comparison, equality, and hashing for use in sets and maps. It allows parsing URI components like query and fragment, and serializing URIs for inter-process communication, particularly in language servers. The child module adjusts path formatting based on the operating system, using a mutable `win32` flag to ensure correct URI serialization across platforms. Together, they enable robust URI manipulation and platform-aware path handling in applications like file system integrations and networked language tools.",
      "description_length": 623,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DiagnosticSeverity",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing diagnostic severity levels with four variants: `Error`, `Warning`, `Information`, and `Hint`. It includes functions to convert values of this type to and from Yojson representations, enabling serialization and deserialization for use in JSON-based communication such as language server protocols. These conversions are essential for transmitting diagnostic data between tools and editors in development environments.",
      "description_length": 460,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ImplementationRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering implementation handlers in a language server. It includes fields for specifying which documents to apply the handler to, an optional identifier, and whether to support progress reporting. The module provides functions to construct these options, along with serialization and deserialization to and from JSON.",
      "description_length": 366,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InsertTextFormat",
      "library": "linol-eio",
      "description": "This module defines two text format types, `PlainText` and `Snippet`, and provides functions to convert between these types and Yojson.Safe.t. It is used to serialize and deserialize text format data for storage or transmission. Concrete use cases include saving user-inserted text formatting preferences or exchanging structured text format information between systems.",
      "description_length": 370,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceUnchangedDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a diagnostic report structure for tracking unchanged documents in a workspace. It includes operations to create reports with a result ID, URI, and optional version, and supports JSON serialization and deserialization. It is used to maintain diagnostic state across editing sessions without re-analyzing unchanged files.",
      "description_length": 339,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionContext",
      "library": "linol-eio",
      "description": "This module defines a data structure for code action contexts, including diagnostics, optional action kinds, and trigger information. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to pass contextual information for code actions in a language server protocol implementation.",
      "description_length": 329,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileChangeType",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing file system events: created, modified, or deleted files. It includes functions to convert values of type `t` to and from JSON using Yojson. This enables tracking and serializing file changes, useful in scenarios like monitoring file system activity or persisting change logs.",
      "description_length": 319,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DefinitionOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for handling work progress options, specifically supporting optional boolean flags. It provides functions to create instances, convert to and from JSON format using Yojson. This is used to manage serialization and deserialization of definition options in LSP-related workflows.",
      "description_length": 318,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.PartialResultParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling optional partial result tokens, which can be either integers or strings. It includes functions to create instances, and to convert to and from JSON format using Yojson. This is useful when implementing pagination or resumable operations that require a token to track progress.",
      "description_length": 326,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeWorkspaceFoldersParams",
      "library": "linol-eio",
      "description": "This module handles workspace folder change events in an LSP server. It provides functions to create, serialize, and deserialize event data using Yojson. The main use case is processing notifications when workspace folders are added or removed during an LSP session.",
      "description_length": 266,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Registration",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing registration entries with fields for an identifier, method name, and optional registration options in JSON format. It provides functions to construct these entries, convert them to and from JSON using Yojson, and ensures proper serialization and deserialization. Concrete use cases include managing dynamic registration of language server capabilities in an LSP (Language Server Protocol) implementation.",
      "description_length": 458,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileDelete",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file deletion operations, specifically using a `uri` field to specify the target file path. It provides functions to create instances, and to convert to and from JSON format using Yojson. This structure is used to serialize and deserialize file deletion commands, particularly in distributed or persistent task systems where precise file references are required.",
      "description_length": 416,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceSymbolRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for workspace symbol registration, specifically controlling whether a resolve provider is used and if work done progress is reported. It works with boolean values wrapped in options to represent optional settings. These configurations are used to customize behavior when registering workspace symbol providers in language server implementations.",
      "description_length": 387,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SelectionRangeParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling parameters related to selection range requests in a language server protocol. It includes fields for tracking partial results, specifying positions in a text document, and associating operations with a work done token. The module provides functions to construct these parameters and serialize or deserialize them using Yojson.",
      "description_length": 376,
      "index": 227,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DiagnosticRelatedInformation",
      "library": "linol-eio",
      "description": "This module defines a data structure for diagnostic-related information, consisting of a location and a message. It provides functions to create instances, convert to and from JSON format using Yojson. It is used to associate diagnostic messages with specific locations in source files, such as reporting additional context for compiler errors.",
      "description_length": 344,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FormattingOptions",
      "library": "linol-eio",
      "description": "This module defines formatting options for text manipulation, including settings like newline insertion, spacing, and trimming. It works with boolean and integer values to configure text formatting behavior. Concrete use cases include parsing and serializing formatting configurations from JSON and constructing options for code formatters or text processors.",
      "description_length": 359,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ImplementationOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for tracking work progress, with a single optional boolean field. It provides functions to create instances, convert to and from JSON using Yojson. It is used to serialize and deserialize progress tracking settings in JSON format.",
      "description_length": 271,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeLensWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing workspace client capabilities related to code lens refresh support. It includes functions to create instances, serialize to JSON, and deserialize from JSON. It is used to configure and exchange code lens capabilities between a language server and client.",
      "description_length": 304,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureHelpOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for signature help features in language tooling, specifically supporting the specification of retrigger and trigger characters, as well as work done progress tracking. It works with JSON data structures through Yojson integration, enabling serialization and deserialization of configuration values. Concrete use cases include parsing and constructing signature help settings for language servers or editors.",
      "description_length": 449,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeHierarchyOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for handling type hierarchy options, specifically supporting work done progress tracking. It provides functions to create a configuration with an optional work done progress flag, and to serialize and deserialize configurations using Yojson. This is used to manage and persist type hierarchy-related settings in a JSON-compatible format.",
      "description_length": 378,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidOpenTextDocumentParams",
      "library": "linol-eio",
      "description": "This module handles the creation and JSON serialization of parameters for a text document open event. It works with the `TextDocumentItem` type to represent the document being opened and provides functions to convert to and from JSON format. It is used to process \"didOpen\" notifications in a language server protocol implementation.",
      "description_length": 333,
      "index": 234,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DiagnosticTag",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing diagnostic tags used in code analysis, specifically for marking code as either `Unnecessary` or `Deprecated`. It includes functions to convert values of type `t` to and from JSON format using the `Yojson.Safe` type. These conversions support serialization and deserialization of diagnostic data, enabling integration with JSON-based tools and APIs.",
      "description_length": 392,
      "index": 235,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentLinkRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering document link handlers in a language server. It includes fields to specify which documents to target using filters, whether to resolve links dynamically, and whether to track progress. These options are used when setting up document link capabilities in LSP (Language Server Protocol) integrations.",
      "description_length": 356,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.StringValue",
      "library": "linol-eio",
      "description": "This module defines a concrete type `t` that wraps a string value, providing functions to create instances and convert to and from JSON using Yojson. It supports parsing and serializing string-based data structures to and from JSON representations. Use this module when handling JSON-encoded string values in APIs or configuration files.",
      "description_length": 337,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentChangeRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering text document change handlers, specifying which documents to observe using filters and the synchronization behavior via `syncKind`. It supports operations to create these options, and serialize or deserialize them using JSON. It is used to configure document event subscriptions in language server protocol implementations.",
      "description_length": 381,
      "index": 238,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DefinitionRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering definition handlers in a language server, supporting document-specific filtering and progress reporting. It works with document selectors that target either text documents or notebook cells, along with an optional work done progress flag. Concrete use cases include configuring definition request behavior based on document type and enabling progress tracking during long-running operations.",
      "description_length": 435,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressReport",
      "library": "linol-eio",
      "description": "This module defines a data structure for reporting progress in a work-done notification system. It includes fields for cancellation status, progress message, and percentage completion, along with functions to construct and serialize these reports to and from JSON. It is used to communicate incremental progress updates in long-running operations.",
      "description_length": 347,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering folding range capabilities in a language server. It includes fields to specify document selectors, an optional registration ID, and whether to enable progress reporting. The type supports conversion to and from JSON for use in LSP communication.",
      "description_length": 303,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Color",
      "library": "linol-eio",
      "description": "This module defines a color record with red, green, blue, and alpha components, each as integers. It provides functions to construct colors and to convert between color values and Yojson.Safe.t for JSON serialization and parsing. Use this module when handling RGBA color values in applications such as graphics rendering or configuration files requiring color data.",
      "description_length": 365,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MonikerClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to moniker functionality, specifically supporting optional dynamic registration. It provides functions to create instances, convert to and from JSON using Yojson, and manage the `dynamicRegistration` field. Concrete use cases include configuring and serializing client capability settings for moniker-related features in language server protocols.",
      "description_length": 429,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileOperationClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file operation capabilities in a JSON-based communication protocol. It includes functions to construct capability records and convert them to and from JSON format. It is used to negotiate and serialize file operation support between a client and a server in a language server protocol implementation.",
      "description_length": 354,
      "index": 244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHintClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and serialization functions for inlay hint client capabilities. It supports creating and managing configurations with optional dynamic registration and resolve support features. The module works with boolean options and string lists, and integrates with Yojson for JSON serialization and deserialization.",
      "description_length": 340,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentColorParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in document color-related operations, including optional tokens for partial results and work progress tracking. It provides functions to construct instances, convert to and from JSON format using Yojson. The module is used to handle color information requests in a text document context, such as retrieving color data for specific elements within the document.",
      "description_length": 417,
      "index": 246,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentOnTypeFormattingClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing client capabilities for document on-type formatting in a language server. It includes functions to create instances, serialize to, and deserialize from JSON. It is used to configure formatting behavior based on client support during language server initialization.",
      "description_length": 314,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressCreateParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing parameters for creating a work done progress token, which can be either an integer or string. It provides functions to construct a value of this type, and to serialize and deserialize it using Yojson. This is used to manage progress reporting tokens in language server protocol implementations where the token type must be explicitly handled.",
      "description_length": 386,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MarkedString",
      "library": "linol-eio",
      "description": "This module defines a data structure for strings annotated with an optional language identifier and provides bidirectional conversion between this structure and Yojson representations. It works with strings and optional language tags, enabling precise handling of localized or language-specific text data. Concrete use cases include parsing and serializing language-marked strings in JSON-based configurations or APIs.",
      "description_length": 418,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ImplementationParams",
      "library": "linol-eio",
      "description": "This module defines a record type for parameters used in implementing LSP (Language Server Protocol) requests, including optional tokens for partial results and work done reporting, along with required position and text document identifiers. It provides functions to construct these parameters and serialize/deserialize them to and from JSON using Yojson. Concrete use cases include handling \"implementation\" requests in an LSP server where precise document location and progress tracking are needed.",
      "description_length": 500,
      "index": 250,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.FileOperationPatternOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for file operation patterns, specifically supporting case-insensitive matching through the `ignoreCase` field. It provides functions to create and serialize these options, enabling consistent handling of pattern-based file operations. Use cases include configuring file search or filtering logic where case sensitivity is optional.",
      "description_length": 373,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Pattern",
      "library": "linol-eio",
      "description": "This module defines a pattern type as a string and provides serialization and deserialization functions to and from Yojson.Safe.t. It enables working with textual patterns in JSON format, suitable for configuration or data exchange. Use this module when handling pattern-based logic that needs to be persisted or transmitted as JSON.",
      "description_length": 333,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DeclarationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling declaration options with a focus on work progress tracking. It provides functions to create instances, serialize, and deserialize these options using JSON. A concrete use case is configuring and persisting settings for document declaration processes in a text editor or analysis tool.",
      "description_length": 334,
      "index": 253,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ColorPresentationParams",
      "library": "linol-eio",
      "description": "This module defines a record type for parameters used in color presentation operations, including fields for color, range, text document identifier, and optional tokens. It provides functions to construct instances, convert to and from JSON format. Used to handle color formatting requests in text editors with LSP integration.",
      "description_length": 327,
      "index": 254,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Linol_eio.TextDocumentFilter",
      "library": "linol-eio",
      "description": "This module defines a filter for text documents based on language, URI scheme, and file pattern. It supports creating document filter instances with optional matching criteria and is used to selectively apply document processing logic. Concrete use cases include filtering log files by extension, restricting operations to specific programming languages, or targeting documents under certain URI schemes.",
      "description_length": 404,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileOperationPatternKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing file operation pattern kinds, specifically distinguishing between files and folders. It provides functions to convert values of this type to and from JSON format using the Yojson library. This enables serialization and deserialization of file operation patterns, useful for configuration or state persistence in applications dealing with file system operations.",
      "description_length": 405,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensEdit",
      "library": "linol-eio",
      "description": "This module defines a record type for representing semantic token edits in a text buffer, with fields for optional replacement data, the number of tokens to delete, and the starting position. It includes functions to construct these records and serialize them to and from JSON. This is used to efficiently communicate incremental syntax highlighting updates in an editor or IDE.",
      "description_length": 378,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WindowClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines client capabilities related to window operations in an LSP (Language Server Protocol) context. It includes optional support for showing documents, handling message requests, and tracking work progress. These capabilities are used to configure and communicate UI-related features between a language server and client.",
      "description_length": 336,
      "index": 258,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TypeHierarchyRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering type hierarchy handlers in a language server. It supports creating and serializing records that specify document filters, an optional identifier, and whether work done progress is enabled. It is used to configure how type hierarchy requests are processed for specific document types in an LSP server.",
      "description_length": 358,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MarkupKind",
      "library": "linol-eio",
      "description": "This module defines a polymorphic variant type with two constructors, `PlainText` and `Markdown`, representing different markup formats. It includes functions to convert values of this type to and from Yojson representations, enabling JSON serialization and deserialization. These conversions are useful when parsing or generating configuration or data files that specify markup types.",
      "description_length": 385,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CreateFileOptions",
      "library": "linol-eio",
      "description": "This module defines options for file creation with `ignoreIfExists` and `overwrite` flags. It provides functions to construct these options, along with serialization and deserialization to and from JSON. It is used to configure file creation behavior in EIO-based applications, such as deciding whether to skip creating a file if it exists or to overwrite it.",
      "description_length": 359,
      "index": 261,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CompletionItemTag",
      "library": "linol-eio",
      "description": "This module defines a single enumerated type representing tags for completion items, specifically supporting serialization and deserialization to and from JSON. It includes conversions to and from `Yojson.Safe.t` for use in JSON-based communication, such as language server protocol messages. A typical use case involves marking deprecated completion items in an editor integration where JSON is used for data exchange.",
      "description_length": 419,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeWatchedFilesClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to file watching in a language server protocol. It includes fields for dynamic registration and relative pattern support, both optional boolean values. The module provides functions to construct the structure, convert it to and from JSON, enabling seamless integration with JSON-based communication protocols.",
      "description_length": 391,
      "index": 263,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlayHintParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in inlay hint requests, including range, text document identifier, and an optional work done token. It provides functions to construct instances, convert to and from JSON format. Used to handle inlay hint operations in a language server context.",
      "description_length": 302,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileOperationRegistrationOptions",
      "library": "linol-eio",
      "description": "This module handles the creation and JSON serialization of file operation registration options. It works with a list of file operation filters to define which files are affected by specific operations. It is used to configure file system watchers or handlers that respond to changes in specified files or directories.",
      "description_length": 317,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookDocumentClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for notebook document client capabilities, primarily handling synchronization settings. It provides functions to create instances and convert to and from JSON format using Yojson. It is used to configure how notebook documents are synchronized between a client and a language server.",
      "description_length": 320,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionKind",
      "library": "linol-eio",
      "description": "This module defines a polymorphic variant type for categorizing code actions in an editor integration, such as quick fixes, refactoring operations, and source organization. It includes functions to convert between the type and Yojson representations for serialization and parsing. Concrete use cases include handling LSP (Language Server Protocol) code action requests and responses in an OCaml-based editor or IDE.",
      "description_length": 415,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeWatchedFilesRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for managing file system watchers in the context of language server protocol interactions. It includes functions to create an instance with a list of watchers and to serialize or deserialize the structure using Yojson. A concrete use case is registering file change notifications in an LSP-based editor integration.",
      "description_length": 352,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceSymbolParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling workspace symbol parameters in a JSON-based communication protocol. It includes fields for a query string, a partial result token, and a work done token, supporting both integer and string token types. The module provides functions to construct instances, and to convert to and from JSON representations, facilitating integration with JSON-based APIs.",
      "description_length": 401,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceFoldersServerCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing server capabilities related to workspace folder management in a language server protocol implementation. It includes fields for indicating whether workspace folder changes are supported and how change notifications are delivered, either as a boolean flag or a custom string identifier. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for communication over JSON-based protocols.",
      "description_length": 489,
      "index": 270,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CodeLensClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to code lens features, specifically supporting dynamic registration. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to configure and communicate client-side code lens support in language server protocol implementations.",
      "description_length": 357,
      "index": 271,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentSymbolOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring document symbol requests, including optional label and work progress tracking. It provides functions to create instances and convert to and from JSON format. Used to customize symbol retrieval in language server interactions.",
      "description_length": 278,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing workspace client capabilities related to semantic tokens in a language server. It includes functions to create instances, serialize to, and deserialize from JSON, specifically handling an optional refresh support flag. It is used to configure and communicate semantic token capabilities between a language server and client during protocol negotiation.",
      "description_length": 406,
      "index": 273,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TextDocumentSaveReason",
      "library": "linol-eio",
      "description": "This module defines a polymorphic variant type representing the reason a text document was saved, with constructors for manual saves, automatic saves after a delay, and saves triggered by focus loss. It includes functions to convert between the type and Yojson.Safe.t for serialization and deserialization. This module is useful for tracking and responding to different save events in an editor or IDE, such as triggering different behaviors based on whether a save was manual or automatic.",
      "description_length": 490,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ImplementationClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for client capabilities related to dynamic registration and link support. It provides functions to create instances and serialize or deserialize them using Yojson. Use this module to configure and exchange client capability information in JSON format.",
      "description_length": 288,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureHelpRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for signature help features in a language server, supporting document selectors, trigger characters, and progress reporting. It works with text document filters, string lists, and boolean flags to customize when and how signature assistance is provided. Concrete use cases include setting up signature help for specific file types or languages, defining characters that retrigger assistance, and enabling work progress tracking in editor integrations.",
      "description_length": 493,
      "index": 276,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.WorkspaceDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a variant type for representing either a full or unchanged document diagnostic report in a workspace. It includes functions to convert this type to and from Yojson for serialization and deserialization. It is used to handle diagnostic data sent from a language server in response to document changes.",
      "description_length": 320,
      "index": 277,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Linol_eio.PositionEncodingKind",
      "library": "linol-eio",
      "description": "This module defines an enumerated type representing different character encoding schemes such as UTF8, UTF16, and UTF32, along with a variant for custom encodings. It includes functions to convert values of this type to and from JSON format using the Yojson library. This is useful when handling text position data in different encodings, particularly in language server protocols or text processing tools that require precise character indexing.",
      "description_length": 446,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeHierarchySubtypesParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in type hierarchy subtypes requests, including a type hierarchy item and optional tokens for partial results and work done. It provides functions to create instances, and to convert to and from JSON format using Yojson. This structure is used to manage request parameters in LSP (Language Server Protocol) interactions involving type hierarchy subtypes.",
      "description_length": 410,
      "index": 279,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CodeDescription",
      "library": "linol-eio",
      "description": "This module defines a data structure with a single field representing a URI reference. It provides functions to create instances of this structure, convert to and from JSON format using Yojson. It is used to handle code descriptions that include a link to a specific resource location.",
      "description_length": 285,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentSymbol",
      "library": "linol-eio",
      "description": "This module defines a record type representing document symbols with fields like name, kind, range, and optional metadata such as deprecation and tags. It provides functions to construct symbol values and convert them to and from JSON using the Yojson library. These operations are used to process and serialize symbol information in a document, such as for code navigation or outlining features in an editor.",
      "description_length": 409,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensPartialResult",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing partial semantic token results as an integer array. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to encode lexical information like token types and modifiers in a compact, efficient format for language server responses.",
      "description_length": 331,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.LocationLink",
      "library": "linol-eio",
      "description": "This module defines a data structure representing a link between two locations in a document, typically used for features like \"Go to Definition\" or \"Find References.\" It includes functions to construct the link with optional origin and required target ranges, and to serialize or deserialize the structure using JSON. The module is useful for implementing navigation and cross-referencing features in code editors or language servers.",
      "description_length": 435,
      "index": 283,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_eio.SignatureHelpClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and creation functions for signature help client capabilities, including support for parameter labels, documentation formats, and active parameter features. It works with records that represent signature information, parameter details, and context or dynamic registration support. It is used to configure and serialize capabilities related to signature help in language server protocol implementations.",
      "description_length": 438,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WillSaveTextDocumentParams",
      "library": "linol-eio",
      "description": "This module handles parameters for a text document save event, including the save reason and document identifier. It provides functions to construct instances, convert to and from JSON format. Used to manage document state changes before saving in an editor integration.",
      "description_length": 270,
      "index": 285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DeclarationLink",
      "library": "linol-eio",
      "description": "This module defines a data type `t` representing links between declarations in a codebase. It includes functions to convert values of type `t` to and from JSON format using the `Yojson.Safe.t` type. This module is used to serialize and deserialize declaration link data for storage or transmission.",
      "description_length": 298,
      "index": 286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.MarkdownClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for specifying Markdown client capabilities, including allowed HTML tags, the parser name, and an optional version. It provides functions to construct instances, serialize to and from JSON using Yojson. It is used to configure Markdown rendering behavior in clients that require strict control over tag whitelisting and parser identification.",
      "description_length": 379,
      "index": 287,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentFormattingClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to document formatting in an editor integration. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these capabilities using Yojson. It is used to configure formatting behavior based on client-side features in language server protocols.",
      "description_length": 384,
      "index": 288,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentHighlightClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to document highlighting in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is configuring and exchanging document highlight settings between a language server and a client editor.",
      "description_length": 400,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeDefinitionClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to type definitions in a language server. It includes functions to construct the structure with optional fields for dynamic registration and link support, and to serialize or deserialize it using Yojson. It is used to configure and communicate client features during language server protocol initialization.",
      "description_length": 389,
      "index": 290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressBegin",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing the beginning of a work done progress notification, including fields like title, message, percentage, and cancellable status. It provides functions to create instances, and serialize/deserialize them using Yojson. This is used to report the start of long-running operations in a structured format, such as in language server protocol implementations.",
      "description_length": 404,
      "index": 291,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DiagnosticRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering diagnostic capabilities in a language server, supporting document-specific filters, dependency tracking, and workspace-level diagnostics. It works with text document filters, notebook cell filters, and boolean flags to control diagnostic behavior. Concrete use cases include setting up per-document or workspace-wide diagnostic reporting with optional progress tracking and inter-file dependency analysis.",
      "description_length": 463,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.PublishDiagnosticsParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for publishing diagnostic information associated with a file URI, including a list of diagnostics and an optional version number. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. It is used to communicate linting or analysis results for a specific file version in an editor or IDE integration.",
      "description_length": 373,
      "index": 293,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CallHierarchyClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to call hierarchy in a language server. It includes functions to create and serialize the structure, primarily working with a record type that holds an optional boolean. It is used to configure and exchange capability information in JSON format during language server initialization.",
      "description_length": 365,
      "index": 294,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CallHierarchyItem",
      "library": "linol-eio",
      "description": "This module defines a record type representing items in a call hierarchy, including their name, kind, location ranges, and associated metadata like tags and URIs. It provides functions to construct these records and serialize or deserialize them using Yojson. Concrete use cases include representing function calls and their relationships in code navigation tools.",
      "description_length": 364,
      "index": 295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.OptionalVersionedTextDocumentIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing a text document identifier with an optional version number. It provides functions to create such identifiers, convert them to and from JSON format using Yojson. It is used to uniquely reference text documents in a version-aware context, such as tracking changes in a text editor buffer.",
      "description_length": 330,
      "index": 296,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CallHierarchyOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring call hierarchy operations, specifically supporting an optional `workDoneProgress` flag. It provides functions to create instances, convert to and from JSON format using Yojson. A concrete use case is enabling or disabling progress reporting during call hierarchy resolution in an LSP server implementation.",
      "description_length": 359,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileSystemWatcher",
      "library": "linol-eio",
      "description": "This module defines a file system watcher configuration with a glob pattern and optional watch kind. It supports creating watchers for file system events using either a string pattern or a relative pattern. The module serializes and deserializes watcher configurations to and from JSON for storage or transmission.",
      "description_length": 314,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureHelpTriggerKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing the possible trigger kinds for signature help in an editor context, including invocation, trigger characters, and content changes. It provides functions to convert between JSON and the `t` type. These conversions are used to serialize and deserialize trigger kind data when communicating with language servers or storing editor state.",
      "description_length": 378,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionItemKind",
      "library": "linol-eio",
      "description": "This module defines an enumeration type representing kinds of completion items in a code editor or language server context. It includes functions to convert between the type and Yojson representations, enabling serialization and deserialization for use in JSON-based communication protocols. The module is used to specify the type of a completion item, such as a function, variable, or keyword, in editor integrations or language tools.",
      "description_length": 436,
      "index": 300,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.GlobPattern",
      "library": "linol-eio",
      "description": "This module defines a type `t` for representing glob patterns, including both absolute and relative patterns. It provides serialization and deserialization functions for converting between JSON values and glob pattern values. It is used to handle file matching patterns in JSON-based configurations or communication protocols.",
      "description_length": 326,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentRangeFormattingRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering document range formatting capabilities, including support for specific document types and range-based formatting. It works with document selectors, boolean flags for feature support, and integrates with JSON serialization through Yojson. Used to configure formatting behavior in language server protocol implementations.",
      "description_length": 364,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ExecutionSummary",
      "library": "linol-eio",
      "description": "This module defines a data structure representing the outcome of an execution step, with fields for the execution order and success status. It provides functions to create instances, convert to and from JSON using Yojson, and manage optional success values. Concrete use cases include logging execution results and serializing them for storage or transmission.",
      "description_length": 360,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRange",
      "library": "linol-eio",
      "description": "This module defines a record type representing a folding range in a text document, with optional fields for start and end positions, kind, and collapsed text. It provides functions to create instances, convert to and from JSON using Yojson. Concrete use cases include serializing and deserializing folding ranges for communication in language server protocols.",
      "description_length": 360,
      "index": 304,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlineCompletionParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for inline completion parameters in a text editor, including context, position, and document identifier. It provides functions to construct instances and convert to and from JSON format. It is used to handle requests for inline code completions in an editor implementing the LSP protocol.",
      "description_length": 325,
      "index": 305,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InitializeParams",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for handling initialization parameters in a language server protocol (LSP) context. It includes types for client information and initialization parameters, along with constructors and JSON serialization/deserialization functions. It is used to configure and communicate client capabilities, workspace settings, and runtime options during LSP server initialization.",
      "description_length": 414,
      "index": 306,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SelectedCompletionInfo",
      "library": "linol-eio",
      "description": "This module defines a data structure representing selected completion information with a text range and associated content. It provides functions to construct instances, convert to and from JSON format. It is used to serialize and deserialize completion data for features like code auto-completion in an editor integration.",
      "description_length": 323,
      "index": 307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeAction",
      "library": "linol-eio",
      "description": "This module defines and constructs code actions with optional properties like commands, diagnostics, and workspace edits, primarily used for implementing features like quick fixes or refactorings in an LSP server. It works with LSP protocol types such as `Command`, `Diagnostic`, `WorkspaceEdit`, and `CodeActionKind`, along with JSON serialization. Concrete use cases include creating and serializing code actions sent to an editor in response to LSP requests.",
      "description_length": 461,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DefinitionParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in a language server protocol request, specifically for handling document positions and identifiers along with optional tokens. It includes functions to construct the data structure, and to convert it to and from JSON format using Yojson. This module is used to pass parameters when querying for symbol definitions in a text document within an LSP server implementation.",
      "description_length": 427,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for completion features in a language server, supporting fields like trigger characters, document selectors, and commit characters. It provides functions to construct and manipulate completion item and registration option records with optional parameters. Use cases include setting up auto-completion behavior for specific document types or enabling resolution of additional completion details on demand.",
      "description_length": 446,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineCompletionList",
      "library": "linol-eio",
      "description": "This module defines a structure for managing a list of inline completion items, primarily used in language server protocol implementations. It provides functions to create instances and serialize/deserialize them using Yojson. The module is useful for handling code completion suggestions in an editor or IDE context, where items need to be efficiently passed between components or stored in a structured format.",
      "description_length": 412,
      "index": 311,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.RenameFile",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file rename operations, including old and new URIs, optional annotations, and rename options. It provides functions to construct instances and serialize/deserialize them using Yojson. Concrete use cases include handling file rename requests in a language server, where precise tracking of file moves and associated metadata is required.",
      "description_length": 390,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookDocumentIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type `t` that wraps a URI to identify notebook documents. It provides functions to create an identifier from a URI and to serialize and deserialize identifiers using Yojson. It is used to uniquely reference notebook documents in a format that supports JSON encoding, such as for communication in a language server protocol.",
      "description_length": 345,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Command",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing commands with titles and optional JSON-encoded arguments. It provides functions to construct command values, convert them to and from JSON format using Yojson, and specify their behavior in an LSP context. Concrete use cases include encoding editor commands like \"restart server\" or \"format document\" with associated parameters for transmission over an LSP connection.",
      "description_length": 422,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.LinkedEditingRangeRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering linked editing range features in text documents. It supports creating and serializing structured data that specifies document filters, registration IDs, and progress tracking. Use this module to configure and persist linked editing behavior in language server integrations.",
      "description_length": 331,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ShowMessageParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing message parameters with a string message and a message type. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to serialize and deserialize message data for communication in a language server protocol context.",
      "description_length": 316,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ChangeAnnotation",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing change annotations with optional description and confirmation requirements. It provides functions to create annotations, convert them to and from JSON format using Yojson. Useful for logging or tracking changes in a system where metadata like descriptions and confirmation flags are needed.",
      "description_length": 344,
      "index": 317,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SemanticTokensDeltaParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling semantic token delta parameters in a language server protocol implementation. It includes fields for partial and previous result identifiers, a text document identifier, and an optional work-done token, supporting efficient incremental updates. The module provides functions to construct instances, and serialize or deserialize them using Yojson for communication over LSP.",
      "description_length": 423,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentFormattingRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering document formatting capabilities, including an optional list of document selectors and a flag for work done progress. It provides functions to create these options and serialize or deserialize them using Yojson. Use cases include configuring formatting support for text documents or notebook cells in an LSP server.",
      "description_length": 359,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHint",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing inlay hints in a text editor, including fields for label, position, kind, and optional text edits or tooltips. It provides functions to construct these hints with customizable properties and to serialize or deserialize them using JSON. Concrete use cases include displaying inline type annotations, parameter hints, or code navigation markers in an editor interface.",
      "description_length": 420,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.IO_eio",
      "library": "linol-eio",
      "description": "This module implements effect-based IO operations using Eio, providing functions for reading from and writing to channels, error handling, and concurrency-friendly composition. It works with Eio-specific types like `env`, `in_channel`, and `out_channel`, supporting direct interaction with standard input/output. Concrete use cases include asynchronous file reading, network stream processing, and structured error recovery in concurrent applications.",
      "description_length": 451,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceSymbolClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for specifying client capabilities related to workspace symbol handling in a language server protocol implementation. It supports operations to create and manage configurations for symbol kinds, tag support, and resolve properties, along with dynamic registration flags. Concrete use cases include configuring symbol response filtering and enabling resolution of additional symbol properties during workspace queries.",
      "description_length": 467,
      "index": 322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentFormattingParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in document formatting operations, including formatting options, text document identifiers, and optional work done tokens. It provides functions to construct instances of this structure and to serialize/deserialize them using Yojson. Concrete use cases include handling formatting requests in a language server where structured data needs to be passed between components or persisted in JSON format.",
      "description_length": 456,
      "index": 323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring folding range options in JSON format. It includes functions to create a configuration with an optional work progress flag and to serialize or deserialize the configuration using Yojson. A concrete use case is managing editor settings for code folding in a language server.",
      "description_length": 325,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookCellArrayChange",
      "library": "linol-eio",
      "description": "This module represents changes to a notebook cell array with three fields: `cells` (optional list of cells), `deleteCount` (number of cells to delete), and `start` (index to begin changes). It provides functions to create instances, convert to and from JSON using Yojson. Useful for tracking and applying incremental updates to notebook documents in a structured, serializable format.",
      "description_length": 384,
      "index": 325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CallHierarchyOutgoingCall",
      "library": "linol-eio",
      "description": "This module defines a data structure representing outgoing calls in a call hierarchy, with functions to create instances and serialize/deserialize them using Yojson. It works with ranges and call hierarchy items from the LSP types module. It is used to model and exchange call relationships between functions or methods in a codebase, particularly during language server protocol interactions.",
      "description_length": 393,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.VersionedTextDocumentIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing a versioned text document identifier with a URI and integer version. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to uniquely identify specific versions of text documents in LSP-related workflows.",
      "description_length": 291,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokenModifiers",
      "library": "linol-eio",
      "description": "This module defines a set of semantic token modifiers used to annotate program elements with specific attributes such as `Async`, `Deprecated`, or `Readonly`. It provides bidirectional conversion between these modifiers and Yojson representations for serialization and deserialization. These annotations are typically used in language tooling to convey additional semantic information during analysis or editing.",
      "description_length": 412,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineCompletionContext",
      "library": "linol-eio",
      "description": "This module defines a data structure for inline completion context with optional selected completion info and trigger kind. It provides functions to create instances, and serialize/deserialize to and from JSON. It is used to capture the context in which inline code completions are requested or applied, such as tracking the trigger type and any previously selected completion.",
      "description_length": 377,
      "index": 329,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CallHierarchyOutgoingCallsParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in outgoing call hierarchy requests, including a call hierarchy item and optional tokens for partial results and work progress. It provides functions to construct instances, convert to and from JSON, and handles polymorphic variants for token types. It is used to manage request parameters in LSP call hierarchy operations with precise type handling.",
      "description_length": 407,
      "index": 330,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.FileEvent",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file change events, including the type of change and the associated file URI. It provides functions to construct these events and to serialize or deserialize them using Yojson. Concrete use cases include tracking file modifications in a language server or handling file system events in a JSON-based communication protocol.",
      "description_length": 377,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.PreviousResultId",
      "library": "linol-eio",
      "description": "This module defines a data structure for storing a URI and a string value, with functions to create instances and serialize them to and from JSON. It works with `Linol_lsp.Uri0.t` and strings, using Yojson for JSON encoding and decoding. It is used to manage and persist result identifiers associated with specific URIs in a JSON-compatible format.",
      "description_length": 348,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileOperationFilter",
      "library": "linol-eio",
      "description": "This module defines a filter for file operations based on a pattern and an optional URI scheme. It provides functions to create a filter, and to serialize/deserialize it using Yojson. It is used to specify which file operations should be monitored or processed, based on matching rules and protocol schemes.",
      "description_length": 307,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentHighlightParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for document highlight parameters, including position, text document identifier, and optional tokens. It provides functions to construct instances, convert to and from JSON format. Used to process and transmit document highlight requests in a language server protocol context.",
      "description_length": 313,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ParameterInformation",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing parameter information, including a label and optional documentation. It supports serialization and deserialization to and from JSON using Yojson. Concrete use cases include handling parameter metadata in language server protocol implementations, such as displaying function parameter hints with optional rich formatting.",
      "description_length": 374,
      "index": 335,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.LinkedEditingRanges",
      "library": "linol-eio",
      "description": "This module defines a data structure for managing linked editing ranges with an optional word pattern. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for implementing features like synchronized renaming in code editors where multiple ranges need to be edited together.",
      "description_length": 317,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookDocumentFilter",
      "library": "linol-eio",
      "description": "This module defines a notebook document filter with JSON serialization and deserialization capabilities. It works with the `Yojson.Safe.t` type to convert between JSON representations and the unit-type filter structure. It is used to process and validate notebook document data in JSON format, particularly during configuration or state loading.",
      "description_length": 345,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceSymbolOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for workspace symbol handling, specifically supporting JSON serialization and deserialization. It works with boolean flags to enable or disable symbol resolution and progress reporting. Concrete use cases include parsing and generating configuration data for language server protocol (LSP) requests involving workspace symbols.",
      "description_length": 369,
      "index": 338,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentRangeFormattingClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines capabilities for document range formatting in a language server, specifically supporting dynamic registration and range formatting features. It works with boolean options to indicate support for these features and provides functions to create and serialize the capability structure. It is used to configure a language server's ability to handle range-based formatting requests from clients.",
      "description_length": 410,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentSyncOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for text document synchronization in an editor or IDE. It includes fields to specify when and how document changes, saves, and lifecycle events are handled, such as whether to track will-save events or support save with options. The module supports serialization to and from JSON for use in protocol communication.",
      "description_length": 356,
      "index": 340,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentDiagnosticReportPartialResult",
      "library": "linol-eio",
      "description": "This module represents a partial result for document diagnostic reports in a language server protocol implementation. It stores a collection of related documents, each associated with either a full or unchanged diagnostic report, keyed by document URI. It is used to efficiently return incremental diagnostic updates for multiple files in response to LSP requests.",
      "description_length": 364,
      "index": 341,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.Moniker",
      "library": "linol-eio",
      "description": "This module defines a structured type for representing monikers with fields for identifier, kind, scheme, and uniqueness level. It provides functions to construct moniker instances, and to serialize and deserialize them using Yojson. This module is used to handle document symbols and identifiers in a language server protocol context.",
      "description_length": 335,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for inline value registration, including document filters, an optional identifier, and progress tracking. It supports creating and serializing these configurations with optional fields for flexibility. Use cases include setting up inline value providers in language servers with specific document scopes and progress reporting.",
      "description_length": 369,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing workspace client capabilities related to folding range refresh support. It includes functions to create instances, serialize to and from JSON format using Yojson. A concrete use case is enabling or checking support for dynamic refresh of code folding ranges in an editor integration.",
      "description_length": 333,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceFoldersInitializeParams",
      "library": "linol-eio",
      "description": "This module handles initialization parameters for workspace folders in a language server protocol implementation. It provides functions to create and serialize a structure that holds an optional list of workspace folders. The module supports parsing and generating JSON representations of the parameters, specifically using `Yojson.Safe.t` for JSON handling and `Linol_lsp__Types.WorkspaceFolder.t` for folder data.",
      "description_length": 415,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceFoldersChangeEvent",
      "library": "linol-eio",
      "description": "This module represents changes to workspace folders, tracking added and removed folders. It provides functions to construct these change events and serialize them to and from JSON. It is used to handle dynamic updates to project workspace configurations in LSP (Language Server Protocol) implementations.",
      "description_length": 304,
      "index": 346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CallHierarchyIncomingCall",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing incoming calls in a call hierarchy, containing a source item and a list of ranges. It provides functions to construct instances, convert to and from JSON using Yojson. Used to serialize and deserialize call hierarchy data for inter-process communication or storage.",
      "description_length": 309,
      "index": 347,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ReferenceParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for holding parameters used in a reference resolution operation, including contextual information, document position, and optional tokens for partial and work completion tracking. It provides functions to construct instances of this structure and to serialize/deserialize them using Yojson. Concrete use cases include handling reference requests in a language server where precise document and position data must be passed alongside optional progress tokens.",
      "description_length": 495,
      "index": 348,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.MessageType",
      "library": "linol-eio",
      "description": "This module defines a variant type for representing message severity levels such as error, warning, info, log, and debug. It includes functions to convert these message types to and from Yojson representations. It is used to serialize and deserialize message types for communication or logging purposes.",
      "description_length": 303,
      "index": 349,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SelectionRangeClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to selection range features, specifically supporting dynamic registration. It includes functions to create instances, serialize to JSON, and deserialize from JSON. This is used to configure and communicate client support for selection range operations in language server protocols.",
      "description_length": 363,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ConfigurationParams",
      "library": "linol-eio",
      "description": "This module handles the parsing and creation of configuration parameters for LSP (Language Server Protocol) requests, specifically managing a list of configuration items. It provides functions to convert between JSON representations and OCaml data structures, ensuring compatibility with LSP standards. Concrete use cases include initializing configuration data from JSON input and serializing configuration state for transmission over LSP.",
      "description_length": 440,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookDocumentSyncOptions",
      "library": "linol-eio",
      "description": "This module defines empty notebook document synchronization options with JSON serialization and deserialization functions. It works with the `Yojson.Safe.t` type for JSON handling and the unit type representing no configuration. A concrete use case is parsing and generating JSON for notebook sync settings in an editor integration.",
      "description_length": 332,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHintWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing workspace client capabilities related to inlay hints, specifically supporting an optional boolean flag for refresh capability. It provides functions to construct the structure, convert it to and from JSON format using Yojson. This is used to configure and communicate inlay hint capabilities between a language server and client in an LSP (Language Server Protocol) context.",
      "description_length": 428,
      "index": 353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Jsonrpc2",
      "library": "linol-eio",
      "description": "This module orchestrates bidirectional JSON-RPC 2.0 communication for a language server, managing document state, requests, notifications, and responses over input/output channels. It handles LSP-specific data types and uses request IDs to track and correlate RPC calls, enabling precise error handling and message routing. The module reads and writes JSON-RPC messages asynchronously, using channel primitives to sequence operations and manage I/O errors with backtraces. For example, it can implement a language server that processes LSP requests from stdin, updates document state, and sends responses or notifications to the client over stdout.",
      "description_length": 648,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MonikerOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring moniker-related options, specifically supporting work done progress tracking. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for managing configuration parameters in language server protocol implementations where progress reporting is required.",
      "description_length": 346,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureHelp",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing signature help information in a language server protocol implementation. It includes fields for tracking the active parameter, active signature, and a list of available signatures, along with functions to construct and serialize these structures. It is used to provide contextual function signature guidance during code editing, such as in IDEs or text editors with LSP support.",
      "description_length": 432,
      "index": 356,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeLensOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for code lens features, specifically controlling whether a resolve provider is enabled and whether work done progress is reported. It works with boolean values wrapped in options to represent optional settings. These settings are used to configure code lens behavior in language server protocols, typically for managing feature flags during JSON serialization and deserialization.",
      "description_length": 422,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHintKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` with two variants, `Type` and `Parameter`, representing kinds of inlay hints. It provides functions `t_of_yojson` and `yojson_of_t` for converting between the type and Yojson.Safe.t values. This module is used to serialize and deserialize inlay hint kind data when working with JSON-based protocols or storage.",
      "description_length": 341,
      "index": 358,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.FileRename",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file rename operations, with fields for the old and new file paths. It provides functions to construct rename records, and to serialize and deserialize them using Yojson. This module is used to handle file renaming events in a JSON-based communication protocol, such as in a language server or file synchronization tool.",
      "description_length": 374,
      "index": 359,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ReferenceContext",
      "library": "linol-eio",
      "description": "This module defines a reference context configuration with a boolean flag indicating whether declarations are included. It provides functions to create the context, convert it to and from JSON format using Yojson. It is used to manage contextual settings during JSON serialization and deserialization in configurations that require declaration tracking.",
      "description_length": 353,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensDeltaPartialResult",
      "library": "linol-eio",
      "description": "This module represents partial results for semantic token deltas, specifically handling lists of semantic token edits. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to efficiently transmit incremental updates of semantic token information in language server protocol implementations.",
      "description_length": 340,
      "index": 361,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DidChangeTextDocumentParams",
      "library": "linol-eio",
      "description": "This module handles parameters for text document change events in a language server protocol implementation. It provides functions to construct, serialize, and deserialize a record containing content changes and document identifiers. It is used to process and propagate text document updates between a client and a language server.",
      "description_length": 331,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeNotebookDocumentParams",
      "library": "linol-eio",
      "description": "This module represents parameters for a notebook document change event in a language server protocol implementation. It includes functions to construct the event with a change and document identifier, and to serialize/deserialize the data using Yojson. It is used to handle updates to notebook documents, tracking both the document version and the specific changes made.",
      "description_length": 370,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.HoverRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering hover handlers in a language server, supporting document-specific configuration through text or notebook cell filters. It includes functions to create configuration objects and serialize/deserialize them using Yojson. Concrete use cases include setting up hover functionality for different document types in an LSP-compliant editor.",
      "description_length": 376,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.LinkedEditingRangeClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to linked editing ranges in a text editor. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is enabling or disabling dynamic registration of linked editing features in an editor extension.",
      "description_length": 388,
      "index": 365,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SaveOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for saving operations, specifically controlling whether text content should be included. It provides functions to create and serialize these options using Yojson. Use cases include customizing file save behavior in text editors or document processors.",
      "description_length": 292,
      "index": 366,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_eio.CodeActionResult",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing a list of either LSP commands or code actions, with optional presence. It provides functions to convert this type to and from Yojson for serialization and deserialization. This is used to handle and transmit code action results in an LSP server implementation.",
      "description_length": 304,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeHierarchyItem",
      "library": "linol-eio",
      "description": "This module defines a record type representing items in a type hierarchy, with fields for metadata like name, kind, and ranges, along with optional data and tags. It provides functions to construct these records and serialize/deserialize them using Yojson. Concrete use cases include representing type hierarchy elements in a language server, such as classes, interfaces, or type parameters, with support for rich metadata and JSON interchange.",
      "description_length": 444,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MonikerParams",
      "library": "linol-eio",
      "description": "This module defines a record type for parameters used in moniker-related operations, including optional tokens and references to a text document and position. It provides functions to construct instances, convert to and from JSON format. It is used to pass parameters for moniker resolution in a language server protocol context.",
      "description_length": 329,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentSyncClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to text document synchronization, including options like `didSave`, `dynamicRegistration`, `willSave`, and `willSaveWaitUntil`. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to configure and communicate text document sync behavior in language server protocol implementations.",
      "description_length": 413,
      "index": 370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for code action registration, including supported action kinds, document selectors, and optional capabilities like resolution and progress reporting. It works with lists of code action kinds, document filters, and boolean flags. It is used to specify how code actions should be registered and processed in an LSP server.",
      "description_length": 362,
      "index": 371,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SelectionRange",
      "library": "linol-eio",
      "description": "This module represents hierarchical selection ranges with parent-child relationships, using LSP-style ranges. It provides functions to create ranges with optional parent links and serialize/deserialize them using Yojson. Concrete use cases include managing nested text selections in an editor or tracking hierarchical document regions.",
      "description_length": 335,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokenTypes",
      "library": "linol-eio",
      "description": "This module defines a variant type representing semantic token categories used in code analysis, such as `Function`, `Variable`, and `Comment`. It includes functions to serialize and deserialize these tokens to and from JSON using Yojson. This module is useful for integrating semantic token processing with JSON-based tools or APIs.",
      "description_length": 333,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentOnTypeFormattingOptions",
      "library": "linol-eio",
      "description": "This module defines formatting options for document-on-type operations, specifically capturing the first trigger character and optional additional trigger characters. It provides functions to create these options and convert them to and from JSON format. Use cases include configuring auto-formatting behavior in text editors based on specific user input characters.",
      "description_length": 366,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ReferenceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities in a JSON-based communication protocol, specifically supporting optional dynamic registration. It provides functions to construct instances, convert to and from JSON format using Yojson, and manage the presence of dynamic registration. Concrete use cases include parsing and serializing client capability data during protocol handshake or configuration exchange.",
      "description_length": 436,
      "index": 375,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SemanticTokensOptions",
      "library": "linol-eio",
      "description": "This module defines and constructs configuration options for semantic token handling, including full, delta, legend, range, and work progress settings. It works with records and variants to represent token legends and boolean flags, along with JSON serialization and deserialization. It is used to configure and exchange semantic token capabilities in a language server protocol implementation.",
      "description_length": 394,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentContentChangeEvent",
      "library": "linol-eio",
      "description": "This module represents changes to a text document, capturing the modified range, length, and new text content. It provides functions to construct change events, and serialize/deserialize them using Yojson. It is used to process document updates in language server protocol interactions, such as tracking edits made by a user in an editor buffer.",
      "description_length": 345,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceFullDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a data structure for reporting diagnostics associated with a specific document version in a workspace. It includes functions to construct reports, serialize them to JSON, and deserialize them from JSON. The structure holds diagnostics, an optional result ID, a document URI, and an optional version number, enabling precise tracking of diagnostic results across document changes.",
      "description_length": 399,
      "index": 378,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.RenameFilesParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling file rename operations, specifically a list of file rename specifications. It provides functions to construct instances, convert to and from JSON format using Yojson. Useful for processing batch file rename requests in JSON-based APIs or configuration files.",
      "description_length": 308,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type `t` that wraps a URI to identify text documents, along with functions to create instances and serialize/deserialize them using Yojson. It works directly with `Linol_lsp.Uri0.t` and Yojson.Safe.t types. A concrete use case is handling document identifiers in LSP (Language Server Protocol) requests and responses, particularly when integrating with JSON-based communication layers.",
      "description_length": 407,
      "index": 380,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentLinkClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to document links, including dynamic registration and tooltip support. It provides functions to construct instances, convert to and from JSON using Yojson. This is used to configure document link behavior in language server clients.",
      "description_length": 314,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentHighlight",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing document highlights in a text editor, including an optional highlight kind and a specific range. It provides functions to construct highlights, convert them to and from JSON format using Yojson. This module is used to serialize and deserialize document highlight information for features like syntax highlighting or reference tracking in an editor.",
      "description_length": 402,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio",
      "library": "linol-eio",
      "description": "This module provides concurrency primitives, LSP protocol message handling, and structured data management for implementing language servers. It operates on document identifiers, semantic tokens, position/range tracking types, and capability negotiation structures to support features like code navigation, diagnostics, and notebook synchronization. Main data types include versioned text documents, semantic token edits, document highlights, and workspace edits. Operations include managing document lifecycle events, handling client capabilities for hover/completion features, and coordinating workspace edits with versioned document state. Child modules enhance functionality by defining structured data for signature help, inlay hints, inline completion capabilities, workspace symbols, and semantic token legends. They provide serialization/deserialization with Yojson, support for dynamic registration, and precise tracking of document state and user interactions. For example, the inlay hint module allows building and manipulating hints with optional tooltips and commands, while the semantic token module handles efficient transmission of syntax highlighting data. Together, they enable comprehensive language server features with robust JSON-based communication and configuration.",
      "description_length": 1290,
      "index": 383,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 387,
    "meaningful_modules": 384,
    "filtered_empty_modules": 3,
    "retention_rate": 0.9922480620155039
  },
  "statistics": {
    "max_description_length": 1290,
    "min_description_length": 262,
    "avg_description_length": 381.1640625,
    "embedding_file_size_mb": 1.3950042724609375
  }
}