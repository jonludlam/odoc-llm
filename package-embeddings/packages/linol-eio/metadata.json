{
  "package": "linol-eio",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:48:58.437823",
  "modules": [
    {
      "module_path": "Linol_eio.Jsonrpc2.IO",
      "description": "Provides asynchronous I/O operations for reading from and writing to channels, including non-blocking reads and writes, line reading, and exception handling. Works with channel types, byte buffers, and exception tracking. Used to manage input/output in event-driven applications, such as handling network data or logging.",
      "description_length": 321,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Jsonrpc2.Req_id",
      "description": "Generates and converts request identifiers to string format for tracking JSONRPC interactions. Operates on a type wrapped around JSONRPC's internal ID representation. Used to ensure consistent mapping between requests and their corresponding responses in distributed systems.",
      "description_length": 275,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.IO_eio",
      "description": "Provides monadic operations for sequencing I/O actions, including binding, lifting, and combining results. Works with channel types for reading from and writing to standard input/output, and handles exceptions with structured error propagation. Enables asynchronous I/O workflows by allowing safe composition of read, write, and error-handling operations.",
      "description_length": 355,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "linol-eio",
      "description": "Provides methods for handling JSON-RPC communication using Lwt or Eio, with object-oriented abstractions for protocol interactions. Works with LSP base types, including requests, responses, and notifications. Enables custom server implementations by allowing selective method overriding for specific language server features.",
      "description_length": 325,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio",
      "description": "The module provides a framework for managing I/O operations through monadic composition, enabling structured sequencing of reads, writes, and error handling on channels. It defines operations for binding, lifting, and combining I/O actions, along with channel types for input and output. For example, it allows chaining a read from standard input followed by a write to standard output, while safely propagating errors through the computation.",
      "description_length": 443,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 388,
    "meaningful_modules": 5,
    "filtered_empty_modules": 383,
    "retention_rate": 0.01288659793814433
  },
  "statistics": {
    "max_description_length": 443,
    "min_description_length": 275,
    "avg_description_length": 343.8,
    "embedding_file_size_mb": 0.018613815307617188
  }
}