{
  "package": "linol-eio",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 384,
  "creation_timestamp": "2025-08-15T18:32:15.074087",
  "modules": [
    {
      "module_path": "Linol_eio.DocumentUri.Private",
      "library": "linol-eio",
      "description": "Controls path formatting for document URIs based on the operating system. It uses a mutable reference `win32` to determine whether to apply Windows-style path separators. This module is used internally to ensure correct URI path representation on different platforms.",
      "description_length": 267,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.Jsonrpc2.IO",
      "library": "linol-eio",
      "description": "This module implements monadic IO operations for handling input and output channels in a JSON-RPC 2.0 server or client. It provides functions for reading from and writing to channels, including line-based input and raw byte transfers, along with error handling and monadic composition via `let*`, `let+`, and `and+`. Concrete use cases include parsing incoming JSON-RPC messages from stdin and sending formatted responses to stdout in an event-driven context.",
      "description_length": 459,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Jsonrpc2.Req_id",
      "library": "linol-eio",
      "description": "This module represents a unique identifier for JSON-RPC 2.0 requests, used to correlate requests with their corresponding responses. It provides a single function, `to_string`, which converts the request ID into a string for serialization or logging purposes. A typical use case involves tracking individual RPC calls in a distributed system or debugging communication between client and server.",
      "description_length": 395,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.LogMessageParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for log messages with a message string and a message type from the `MessageType` module. It includes functions to construct instances, and to serialize and deserialize them using Yojson. It is used to handle structured log data in JSON format for communication in a language server protocol context.",
      "description_length": 336,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MonikerRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering moniker providers in a language server, supporting configuration of document selectors and progress reporting. It works with text document filters and notebook cell text document filters to specify which documents to handle, along with an optional flag to enable work done progress. It is used to configure and serialize moniker registration settings for LSP clients and servers.",
      "description_length": 423,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.NotebookDocumentSyncOptions",
      "library": "linol-eio",
      "description": "This module defines empty notebook document synchronization options with JSON serialization and deserialization functions. It works with the `Yojson.Safe.t` type for JSON handling and the unit type representing no configuration. A concrete use case is parsing and generating JSON representations of notebook sync options in LSP (Language Server Protocol) implementations.",
      "description_length": 371,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceSymbolRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for workspace symbol registration, specifically controlling whether a resolve provider is used and if work done progress is reported. It works with boolean values wrapped in options to represent optional settings. These configurations are used to customize symbol handling behavior in language server implementations.",
      "description_length": 359,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueEvaluatableExpression",
      "library": "linol-eio",
      "description": "This module defines a data structure representing an inline value evaluatable expression with an optional string expression and a range. It provides functions to create instances, serialize to, and deserialize from JSON using Yojson. Useful for handling inline evaluation data in a language server protocol context.",
      "description_length": 315,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureHelpOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for signature help features, including characters that trigger or retrigger assistance and whether work progress should be tracked. It provides functions to construct these options and convert them to and from JSON format using Yojson. It is used to customize and serialize signature help behavior in language server implementations.",
      "description_length": 375,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionResult",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing a list of either LSP commands or code actions, used to return structured results from code action handlers. It includes functions to convert values between this type and Yojson for serialization and deserialization. It is used to produce valid LSP responses that editors can interpret to apply fixes or refactorings.",
      "description_length": 360,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeNotebookDocumentParams",
      "library": "linol-eio",
      "description": "This module represents parameters for a notebook document change event in a language server protocol implementation. It combines a notebook document change event and a versioned notebook document identifier into a single structure. The module supports creating instances, and serializing to and from JSON using Yojson.",
      "description_length": 318,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering folding range providers in a language server. It includes fields to specify which documents to target, an optional registration ID, and whether to enable progress reporting. The module supports converting these options to and from JSON format for use in LSP communication.",
      "description_length": 330,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensRangeParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling semantic token range parameters in the context of the LSP (Language Server Protocol). It includes fields for specifying a text document, a range within that document, and optional tokens for partial results and work progress. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 382,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for inline value registration, including document selectors, an optional identifier, and progress tracking. It supports creating and serializing these configurations using `create`, `t_of_yojson`, and `yojson_of_t`. It is used to specify how inline values should be registered and reported in text documents or notebook cells.",
      "description_length": 368,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHintOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for inlay hints, specifically whether a resolve provider is enabled and if work done progress is supported. It provides functions to create instances and serialize/deserialize them using Yojson. Use cases include configuring language server features and exchanging hint settings in JSON format.",
      "description_length": 336,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentPositionParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing parameters that combine a position in a text document with an identifier for the document itself. It provides functions to create instances of this structure, convert it to and from JSON format using Yojson, and directly access its fields. Concrete use cases include handling requests in a language server where a specific location within a file must be identified, such as hover or goto-definition features.",
      "description_length": 462,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CallHierarchyOutgoingCallsParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in handling outgoing call hierarchy requests. It includes fields for a call hierarchy item and optional tokens for partial results and work progress tracking. The module supports JSON serialization and deserialization, making it suitable for use in LSP (Language Server Protocol) communication where hierarchical call relationships need to be transmitted efficiently.",
      "description_length": 424,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.PreviousResultId",
      "library": "linol-eio",
      "description": "This module defines a data structure for storing a URI and an associated string value, along with functions to create instances and serialize/deserialize them using Yojson. It works with Linol_lsp.Uri0.t and string types. A concrete use case is tracking previous result identifiers in a language server protocol implementation, where each result is tied to a specific document URI.",
      "description_length": 381,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.LinkedEditingRangeOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for linked editing range features, specifically supporting the `workDoneProgress` flag to indicate progress reporting. It provides functions to create and serialize these options using `Yojson.Safe.t` for JSON encoding and decoding. Use this module to configure and exchange linked editing range settings in JSON-based tool integrations.",
      "description_length": 379,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TypeHierarchySubtypesParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in type hierarchy subtype queries, including a type hierarchy item and optional tokens for partial results and work tracking. It provides functions to construct instances, convert to and from JSON format. Used to handle parameter serialization and deserialization in LSP type hierarchy operations.",
      "description_length": 354,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DeleteFilesParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling a list of file deletion requests, supporting JSON serialization and deserialization. It provides operations to create instances and convert to and from JSON format. Concrete use cases include processing batch file deletion commands in a language server protocol implementation.",
      "description_length": 327,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DidSaveNotebookDocumentParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` that represents parameters for a notebook document save event, containing a `notebookDocument` identifier. It provides functions to create instances of this type, and to convert to and from JSON using the `Yojson.Safe` format. This is used to handle document save notifications in a language server protocol implementation, specifically for notebook documents.",
      "description_length": 391,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensOptions",
      "library": "linol-eio",
      "description": "This module defines and constructs configuration options for semantic token handling, including full token computation modes, token legends, and optional range and progress tracking. It supports data types like boolean flags, semantic token legends, and JSON-compatible representations. It is used to configure and serialize semantic token settings for language server protocol interactions.",
      "description_length": 391,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing either a full or unchanged document diagnostic report, using variants from the `Linol_lsp__Types` module. It provides functions to convert values of type `t` to and from Yojson for serialization and deserialization. It is used to handle diagnostic reporting in document processing workflows that require structured JSON input/output.",
      "description_length": 377,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ApplyWorkspaceEditParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for applying workspace edits with an optional label, using LSP-compatible types. It includes functions to construct instances, convert to and from JSON, and integrates with LSP workspace edit operations. It is used to serialize and apply changes to a codebase, such as during refactoring or automated code fixes.",
      "description_length": 349,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRange",
      "library": "linol-eio",
      "description": "This module defines a data structure representing a folding range in a text document, with optional fields for start and end positions, kind, and collapsed text. It provides functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include managing code folding regions in an editor or processing structured text data with hierarchical sections.",
      "description_length": 386,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CompletionItemKind",
      "library": "linol-eio",
      "description": "This module defines a concrete enumeration type `t` representing various kinds of completion items in a code editor or language tool. It includes direct conversions to and from JSON using `Yojson.Safe.t` for serialization and deserialization. This module is useful for implementing language server protocol features where precise item kinds are required for autocompletion suggestions.",
      "description_length": 385,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineCompletionItem",
      "library": "linol-eio",
      "description": "This module defines a data structure for inline completion items in a language server protocol context. It includes fields for optional commands, filter text, insertable text content, and ranges, supporting precise code completion suggestions. The module provides functions to construct these items, along with serialization and deserialization to and from JSON.",
      "description_length": 362,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ConfigurationParams",
      "library": "linol-eio",
      "description": "This module handles the parsing and creation of configuration parameters for LSP (Language Server Protocol) requests, specifically managing a list of configuration items. It provides functions to construct a configuration parameter object and to serialize or deserialize it using Yojson. A typical use case involves preparing configuration data for transmission over a JSON-RPC channel in an LSP server implementation.",
      "description_length": 418,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileDelete",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file deletion operations, specifically handling the conversion between a JSON format and a typed record with a `uri` field. It includes functions to create an instance from a URI string, parse JSON into the record type, and serialize the record back to JSON. Concrete use cases include managing file deletion requests in a system that communicates via JSON, such as a web service or distributed task queue.",
      "description_length": 460,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileOperationPatternKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing file operation pattern kinds, with variants for files and folders. It provides functions to convert between this type and Yojson for serialization and deserialization. This enables working with file and folder patterns in JSON-based configurations or APIs.",
      "description_length": 300,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHintClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for working with inlay hint client capabilities in the context of language server protocol implementations. It includes types for resolution support and top-level capabilities, along with functions to construct and serialize these types. Use cases include configuring and exchanging client capability settings during language server initialization.",
      "description_length": 398,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Position",
      "library": "linol-eio",
      "description": "This module represents and manipulates text positions using a record type with `character` and `line` fields. It provides functions to construct position values, and to convert them to and from JSON format using Yojson. It is useful for tracking cursor or text span locations in editors or parsers that require precise position information.",
      "description_length": 340,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.WorkspaceFoldersChangeEvent",
      "library": "linol-eio",
      "description": "This module represents changes to workspace folders, tracking added and removed folders. It provides functions to construct these change events and serialize/deserialize them using Yojson. It is used to handle dynamic updates to project workspace configurations in LSP (Language Server Protocol) implementations.",
      "description_length": 312,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentFilter",
      "library": "linol-eio",
      "description": "This module defines a type `t` that represents document filters for text documents and notebook cell text documents, using variants from the LSP types. It provides JSON serialization and deserialization functions for these filters using Yojson. It is used to convert document filter data to and from JSON format, typically for communication with language servers.",
      "description_length": 363,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookDocumentIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing a notebook document identifier, which wraps a URI. It provides functions to create an identifier from a URI, and to serialize and deserialize it using Yojson. This module is used to uniquely identify notebook documents in the system, particularly when handling communication between components like a language server and a client.",
      "description_length": 374,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MessageType",
      "library": "linol-eio",
      "description": "This module defines a variant type for representing message severity levels such as error, warning, info, log, and debug. It includes functions to convert these values to and from Yojson representations. It is used to serialize and deserialize message types in JSON format for logging or communication purposes.",
      "description_length": 311,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.VersionedNotebookDocumentIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing a versioned notebook document identifier, combining a URI and an integer version. It provides functions to construct such identifiers, and to serialize and deserialize them using YoJSON. This is used to uniquely identify specific versions of notebook documents in a version-controlled context.",
      "description_length": 337,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CancelParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing cancellation parameters in JSON-RPC requests, specifically containing a request identifier. It provides functions to construct instances, convert to and from JSON format using Yojson, and is used to handle cancellation signals in asynchronous operations tied to specific JSON-RPC requests.",
      "description_length": 343,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SelectedCompletionInfo",
      "library": "linol-eio",
      "description": "This module defines a data structure representing selected completion information, including a text range and the inserted content. It provides functions to construct instances, and to serialize and deserialize them using Yojson. It is used to capture and persist details about code completions in an editor integration scenario.",
      "description_length": 329,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and capabilities related to code actions in a language server protocol implementation. It includes types for resolve support, code action kinds, and literal support, along with functions to construct these types and serialize/deserialize them using Yojson. It is used to configure and communicate code action capabilities between a language server and client, such as supporting dynamic registration or resolving additional code action details.",
      "description_length": 480,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceFullDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a data structure for reporting diagnostics associated with a specific document version in a workspace. It includes functions to construct reports with diagnostic items, an optional result ID, document URI, and version number, and supports JSON serialization and deserialization. It is used to communicate analysis results such as errors or warnings for a particular file in an editor or language server context.",
      "description_length": 431,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensDelta",
      "library": "linol-eio",
      "description": "This module represents semantic token updates using a list of edit operations and an optional result identifier. It provides functions to construct these updates, convert them to and from JSON format. It is used to efficiently transmit changes in semantic token annotations between a language server and client.",
      "description_length": 311,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InsertReplaceEdit",
      "library": "linol-eio",
      "description": "This module defines a record type with `insert`, `newText`, and `replace` fields to represent text edits in a document. It provides functions to construct these edit records and to serialize and deserialize them using Yojson. This module is used to apply precise text modifications in a document, such as when implementing code refactoring or auto-correction features.",
      "description_length": 368,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ExecuteCommandOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring command execution options, including a list of commands and an optional work-done progress flag. It provides functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include parsing configuration files or API requests that specify command sequences and progress tracking behavior.",
      "description_length": 375,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentOnTypeFormattingParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling document formatting parameters triggered by a specific character input. It includes fields for the character input, formatting options, cursor position, and text document identifier, along with functions to construct and serialize the structure. It is used to implement on-type formatting logic in a language server, where the formatting is applied based on the character typed and the current document state.",
      "description_length": 459,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlineCompletionContext",
      "library": "linol-eio",
      "description": "This module defines a data structure for inline completion context with optional selected completion info and trigger kind. It provides functions to create instances, and serialize/deserialize to and from JSON. It is used to capture the context of an inline completion request in an LSP server, such as handling user input triggers and previously selected completions.",
      "description_length": 368,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ReferenceOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for managing reference-related options, specifically supporting work done progress tracking. It provides functions to create instances, convert to and from JSON format using Yojson. It is used to configure behavior when handling references in contexts requiring progress reporting.",
      "description_length": 318,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentLinkRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering document link providers in a language server. It includes settings to specify which documents to target using filters, whether to resolve links dynamically, and whether to report progress. These options are used when enabling document link features in an LSP-based editor integration.",
      "description_length": 342,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.PositionEncodingKind",
      "library": "linol-eio",
      "description": "This module defines an enumerated type representing different character encoding schemes such as UTF-8, UTF-16, and UTF-32, along with a variant for custom encodings. It includes functions to convert these encoding values to and from JSON format using the Yojson library. This is useful when handling text position data in editors or parsers that require precise encoding information for correct character indexing.",
      "description_length": 415,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.RenameFile",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file rename operations, including old and new URIs, optional annotations, and rename options. It provides functions to construct instances and serialize/deserialize them using Yojson. It is used to manage file renaming in the context of language server protocol interactions.",
      "description_length": 329,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.HoverClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines hover client capabilities for LSP, including content format and dynamic registration options. It provides functions to create capability instances and serialize/deserialize them using Yojson. Use this module to configure hover support in an LSP client or server implementation.",
      "description_length": 297,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionContext",
      "library": "linol-eio",
      "description": "This module defines a completion context with fields for a trigger character and trigger kind, using a specific LSP-defined completion trigger kind type. It provides functions to construct a completion context, along with serialization and deserialization to and from JSON using Yojson. This module is used to pass contextual information during code completion in an LSP server, such as the character that triggered the completion and the type of trigger.",
      "description_length": 455,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentSaveRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering text document save events, including filters for document selection and a flag to include text content. It works with text document filters and notebook cell filters to specify which documents trigger save notifications. Concrete use cases include configuring save handlers in language servers for specific file types or notebook cells, and controlling whether full document text is sent on save.",
      "description_length": 440,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MonikerOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for moniker-related operations, specifically supporting optional work-done progress tracking. It provides functions to create a configuration instance, and to convert instances to and from JSON format using Yojson. This is used to manage and serialize options when handling moniker requests in a language server context.",
      "description_length": 361,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileCreate",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file creation operations with a URI. It provides functions to construct instances, and serialize and deserialize them using Yojson. It is used to handle file creation metadata in JSON format for configuration or logging purposes.",
      "description_length": 283,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookCellKind",
      "library": "linol-eio",
      "description": "This module defines the type `t` representing the kind of a notebook cell, with variants `Markup` and `Code`. It provides functions to convert this type to and from Yojson for serialization and deserialization. Useful for handling notebook cell metadata in JSON format during file I/O or API communication.",
      "description_length": 306,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TextEdit",
      "library": "linol-eio",
      "description": "This module represents text edits as a combination of a string and a range, enabling precise modifications to documents. It includes functions to construct edits, and serialize or deserialize them using JSON. Useful for implementing document update features in editors that track changes within specific ranges.",
      "description_length": 311,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeHierarchyRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering type hierarchy handlers in a language server. It supports creating and serializing structured data that specifies document filters, an optional identifier, and progress reporting settings. It is used to configure how type hierarchy requests are processed for specific document types in an LSP-compatible editor integration.",
      "description_length": 381,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentHighlightKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing different kinds of document highlights, including text, read, and write operations. It provides functions to convert values of type `t` to and from Yojson for serialization and deserialization. This module is used to handle document highlight kinds in JSON-based communication, such as in language server protocol implementations.",
      "description_length": 374,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DiagnosticSeverity",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing diagnostic severity levels, including `Error`, `Warning`, `Information`, and `Hint`. It provides functions to convert values of this type to and from JSON using the `Yojson.Safe.t` format. These conversions are useful when serializing or deserializing diagnostic data for storage or transmission, such as in language server protocol implementations.",
      "description_length": 393,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ResourceOperationKind",
      "library": "linol-eio",
      "description": "This module defines a polymorphic variant type `t` representing three distinct resource operations: creation, renaming, and deletion. It includes functions to convert values of type `t` to and from JSON using the Yojson library. These conversions enable serialization and deserialization of resource operation kinds for use in persistent storage or network communication.",
      "description_length": 371,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHintRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for inlay hint registration, including document selectors, optional identifiers, and flags for resolution and progress handling. It works with document filter types to specify which documents hints apply to, alongside boolean flags and string identifiers. It is used to configure language server capabilities for providing inlay hints in specific document contexts.",
      "description_length": 407,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ReferenceParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling reference parameters in a language server protocol implementation. It includes fields for context, position, text document identifier, and optional tokens for partial results and work done tracking. The module provides functions to construct instances, and serialize/deserialize them using Yojson for communication over the protocol.",
      "description_length": 383,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SemanticTokensRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for semantic token registration in a language server, supporting both full and delta synchronization modes. It works with structured data types like `TextDocumentFilter`, `NotebookCellTextDocumentFilter`, and `SemanticTokensLegend` to describe document scope and token encoding rules. Concrete use cases include setting up semantic highlighting in editors by specifying document filters and token legends during language server initialization.",
      "description_length": 485,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionContext",
      "library": "linol-eio",
      "description": "This module defines a data structure for code action contexts, including diagnostics, optional action kinds, and trigger information. It provides functions to construct instances and convert to and from JSON format. It is used to pass contextual information for code actions in a language server protocol implementation.",
      "description_length": 320,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentSelector",
      "library": "linol-eio",
      "description": "This module defines a list-based type for representing document selectors used in language server protocol configurations. It supports parsing and serializing these selectors to and from JSON using Yojson, specifically handling text document filters and notebook cell text document filters. It is used to specify which documents a language server should handle based on pattern matching or notebook context.",
      "description_length": 407,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileOperationOptions",
      "library": "linol-eio",
      "description": "This module defines a record type for configuring file operation options with optional fields corresponding to specific file events like creation, deletion, and renaming. It provides a `create` function to construct instances with specified behaviors for each event type, using `FileOperationRegistrationOptions`. The module includes JSON serialization and deserialization functions for converting between JSON values and the record type, using the `Yojson` library.",
      "description_length": 466,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentLinkClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to document links, including dynamic registration and tooltip support. It provides functions to create instances and convert to and from JSON format using Yojson. This is used to configure and communicate document link features in a language server protocol implementation.",
      "description_length": 355,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DiagnosticRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering diagnostic capabilities in a language server, supporting document selectors, dependency tracking, and workspace diagnostics. It works with text document filters, notebook cell filters, and boolean flags to control diagnostic behavior. Concrete use cases include setting up per-document or workspace-wide diagnostics with optional progress reporting and inter-file dependency analysis.",
      "description_length": 442,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ImplementationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuration options related to progress reporting in a JSON-RPC implementation. It includes functions to create an option record, and to serialize and deserialize the record using Yojson. A concrete use case is enabling or disabling progress notifications in a language server based on client capabilities.",
      "description_length": 349,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeLens",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing code lenses in a text editor, including optional commands and metadata. It provides functions to construct code lens instances and serialize them to and from JSON. Concrete use cases include displaying inline actions or references in a code editor, such as showing available refactorings or symbol definitions.",
      "description_length": 364,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CallHierarchyPrepareParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in preparing call hierarchy requests, including position, text document identifier, and an optional work done token. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to pass structured parameters between LSP components when handling call hierarchy operations.",
      "description_length": 369,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.StringValue",
      "library": "linol-eio",
      "description": "This module defines a concrete type `t` that wraps a string value, providing functions to create instances and convert to and from JSON using Yojson. It supports parsing and serializing string-based data structures in contexts like configuration files or network protocols. The `create` function constructs a new instance, while `t_of_yojson` and `yojson_of_t` enable bidirectional conversion with JSON representations.",
      "description_length": 419,
      "index": 73,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.FileRename",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file rename operations, with fields for the old and new file paths. It provides functions to construct rename records and serialize them to and from JSON format using Yojson. This module is used to capture and persist file renaming events in a structured way, particularly during operations like file system synchronization or version control.",
      "description_length": 397,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TypeDefinitionRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering type definition handlers in a language server. It supports specifying document filters, unique identifiers, and progress reporting for type definition requests. The module is used to configure how a language server responds to type definition queries, particularly in scenarios involving text documents or notebook cells.",
      "description_length": 379,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentColorOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for document color options, specifically supporting a boolean flag for work done progress. It provides functions to create instances, convert to and from JSON format using Yojson. This module is used to configure document color settings in a JSON-based communication protocol, such as language server interactions.",
      "description_length": 351,
      "index": 76,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ColorInformation",
      "library": "linol-eio",
      "description": "This module defines a data structure representing color information with an associated range. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to serialize and deserialize color data for transmission or storage, particularly in language server protocol implementations.",
      "description_length": 323,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokenModifiers",
      "library": "linol-eio",
      "description": "This module defines a set of semantic token modifiers used to annotate program elements with specific attributes such as `Async`, `Deprecated`, or `Readonly`. It provides functions to convert these modifiers to and from JSON format using Yojson, enabling serialization and deserialization for use in language tools like editors or linters. The module is useful when integrating with systems that require structured metadata about code elements, such as language servers or static analysis tools.",
      "description_length": 495,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeHierarchySupertypesParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing parameters used in type hierarchy operations, specifically for handling supertypes in a language server protocol. It includes functions to construct the structure with required and optional tokens, and to serialize and deserialize it using Yojson. Concrete use cases include managing request parameters for type hierarchy navigation in an LSP implementation.",
      "description_length": 412,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Pattern",
      "library": "linol-eio",
      "description": "This module defines a type alias for strings used as patterns and provides serialization and deserialization functions to and from JSON using the Yojson library. It enables working with pattern data in JSON format, supporting parsing and encoding operations. Concrete use cases include reading patterns from JSON configuration files and converting pattern values to JSON for storage or transmission.",
      "description_length": 399,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.VersionedTextDocumentIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type for identifiers of versioned text documents, combining a URI and an integer version. It provides functions to construct these identifiers and to serialize and deserialize them using Yojson. This is used to track specific versions of files in a language server protocol implementation.",
      "description_length": 311,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SelectionRange",
      "library": "linol-eio",
      "description": "This module represents hierarchical selection ranges with parent-child relationships, using LSP-style ranges. It provides functions to construct ranges with optional parent links and serialize/deserialize them using Yojson. Concrete use cases include managing nested text selections in an editor or tracking hierarchical document regions.",
      "description_length": 338,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.Range",
      "library": "linol-eio",
      "description": "This module defines a `t` record representing a range with start and end positions, using LSP position types. It provides functions to construct ranges, and to convert them to and from JSON using Yojson. It is used to model text ranges in documents, such as for tracking edits or selections in an editor integration.",
      "description_length": 316,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceSymbolOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for workspace symbol handling, specifically controlling whether a resolve provider is used and whether work done progress is reported. It provides functions to create instances with optional fields and to serialize/deserialize values to and from JSON using Yojson. Concrete use cases include configuring language server behavior for symbol resolution and progress tracking during workspace-wide symbol queries.",
      "description_length": 452,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RenameOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring rename operations with optional flags. It supports creating instances with specified boolean options and converting to and from JSON format. Concrete use cases include managing configuration settings during file or variable renaming tasks in an editor or IDE integration.",
      "description_length": 324,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensPartialResult",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing partial semantic token results as an integer array. It provides functions to create instances, convert to and from JSON format using Yojson. It is used to encode and decode semantic token data for incremental updates in a language server protocol implementation.",
      "description_length": 316,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CompletionItemLabelDetails",
      "library": "linol-eio",
      "description": "This module defines a data structure for holding optional description and detail strings associated with a completion item label. It provides functions to construct instances, convert to and from JSON format using Yojson. Useful for representing additional metadata in code completion suggestions within an editor or IDE integration.",
      "description_length": 333,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for configuring completion registration options in a language server. It includes types for completion items with optional label details support and a main configuration type that specifies document selectors, trigger characters, and other completion-related settings. The module supports serialization to and from JSON, enabling integration with language server protocol messages.",
      "description_length": 431,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentHighlightRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for document highlight registration, including a list of document filters and an optional work done progress flag. It provides functions to create instances of these options and to serialize or deserialize them using Yojson. It is used to specify which documents should trigger highlight operations and whether progress reporting is enabled.",
      "description_length": 383,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.WatchKind",
      "library": "linol-eio",
      "description": "This module defines a variant type representing file system watch events\u2014create, change, delete, or other custom events\u2014and provides functions to convert these events to and from JSON format using Yojson. It works directly with the `Yojson.Safe.t` type for serialization and deserialization. Concrete use cases include tracking and transmitting file system changes over a network or persisting event logs in JSON format.",
      "description_length": 420,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Location",
      "library": "linol-eio",
      "description": "This module defines a data structure representing a location in a source file, combining a URI and a range. It provides functions to construct such locations and to serialize and deserialize them using Yojson. Concrete use cases include tracking positions in files for language server responses or logging source code references.",
      "description_length": 329,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RenameClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing client capabilities related to rename operations in a language server protocol. It includes fields for dynamic registration, change annotation handling, and preparation support, along with their optional default behaviors. The module provides functions to construct instances, and serialize/deserialize them to and from JSON format.",
      "description_length": 382,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ChangeAnnotation",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing change annotations with optional description and confirmation requirements. It provides functions to create annotations, convert them to and from JSON format using Yojson. Useful for logging or tracking changes in a system where metadata like descriptions and confirmation flags are needed.",
      "description_length": 344,
      "index": 93,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DidCloseTextDocumentParams",
      "library": "linol-eio",
      "description": "This module defines a data structure representing parameters for a text document close event, containing a text document identifier. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to handle notifications when a text document is closed in an LSP server.",
      "description_length": 307,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeDefinitionClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to type definitions in a language server. It includes functions to construct the structure with optional fields for dynamic registration and link support, and to serialize or deserialize it using Yojson. It is used to configure and communicate client features during language server protocol initialization.",
      "description_length": 389,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MonikerClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to moniker functionality, specifically supporting optional dynamic registration. It provides functions to construct instances, convert to and from JSON format using Yojson. This is used to configure and communicate client-specific settings during language server initialization.",
      "description_length": 360,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InitializeResult",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for handling initialization results in a language server protocol implementation. It includes types for server information and capabilities, along with functions to construct and serialize these types. It is used to represent and process the response sent by a language server during the initialization phase of an LSP session.",
      "description_length": 377,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressCancelParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing cancellation parameters for work-done progress in a JSON-RPC context, with a cancellation token that can be either an integer or a string. It provides functions to construct instances of this type and to serialize and deserialize them using Yojson. This is used to handle client-initiated cancellation of long-running operations in a language server or similar service.",
      "description_length": 413,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DefinitionLink",
      "library": "linol-eio",
      "description": "This module defines a data type `t` representing links between definitions in a codebase. It includes functions to convert values of type `t` to and from JSON format using the `Yojson.Safe` module. This module is useful for serializing and deserializing definition link data, such as when storing or transmitting cross-references between code elements.",
      "description_length": 352,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SaveOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for saving operations, specifically controlling whether text content should be included. It provides functions to create and serialize these options, primarily used when persisting or transmitting structured data with optional text fields. The type works directly with `Yojson.Safe.t` for JSON serialization and deserialization.",
      "description_length": 369,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines client capabilities for semantic token handling in a language server, supporting operations to configure token formats, request types, and feature flags like dynamic registration or multiline token support. It works with structured types representing client capability parameters, including nested configurations for full/delta updates and range requests. Concrete use cases include initializing and serializing client capability settings for LSP communication, enabling features like token modifiers, overlapping tokens, or cancellation support.",
      "description_length": 566,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities in a language server protocol implementation, with optional fields for different capability categories like text documents, notebooks, and workspace features. It provides functions to construct instances with optional parameters and to serialize or deserialize them using Yojson. It is used to configure client-specific features during language server initialization.",
      "description_length": 441,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureHelpParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in signature help requests, including position, text document identifier, optional context, and an optional work done token. It provides functions to construct instances, and to convert to and from JSON format using Yojson. It is used to pass contextual information during language server protocol interactions, specifically when retrieving signature help for function calls in a text document.",
      "description_length": 451,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentHighlightParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for document highlight parameters, including position, text document identifier, and optional tokens. It provides functions to construct instances, convert to and from JSON using Yojson. This structure is used to request document highlights in a language server protocol context.",
      "description_length": 316,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentUri",
      "library": "linol-eio",
      "description": "This module provides functions for converting document URIs to and from strings, paths, JSON representations, and common operations like comparison, equality checks, and hashing. It works with document URIs, which are based on LSP URIs, and supports extracting query and fragment components from URIs. Concrete use cases include handling file paths in cross-platform editors, serializing/deserializing URIs for communication with language servers, and comparing URIs for document tracking.",
      "description_length": 489,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SelectionRangeOptions",
      "library": "linol-eio",
      "description": "This module defines a single data type `t` that represents options for selection range operations, primarily supporting serialization and deserialization to and from JSON. It includes functions to create an option record with an optional `workDoneProgress` flag and to convert between JSON values and the record type. Concrete use cases include configuring and transmitting selection range settings in JSON-based communication, such as in language server protocol extensions.",
      "description_length": 475,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineCompletionClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure `t` representing client capabilities for inline completion features, specifically supporting dynamic registration. It provides functions to construct instances, convert to and from JSON using Yojson. Used to configure language server clients that support inline code completions.",
      "description_length": 316,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileOperationPattern",
      "library": "linol-eio",
      "description": "This module defines a file operation pattern with glob matching, optional match kind, and pattern options. It supports creating patterns, serializing, and deserializing them using JSON. Useful for configuring file monitoring or batch processing rules based on file paths and types.",
      "description_length": 281,
      "index": 108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.UnchangedDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing a diagnostic report for an unchanged document, containing a `resultId` string. It provides functions to create a value of this type, and to convert to and from JSON using the Yojson library. This type is used to handle diagnostic results in the context of document processing, where a stable identifier for the result is required.",
      "description_length": 374,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ProgressParams",
      "library": "linol-eio",
      "description": "This module constructs and serializes progress parameters for asynchronous operations, primarily handling values tagged with an integer or string token. It supports converting between custom types and JSON representations using provided functions. Concrete use cases include reporting intermediate results in long-running computations or streaming data over a network.",
      "description_length": 368,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Color",
      "library": "linol-eio",
      "description": "This module defines a color representation with red, green, blue, and alpha components, each as integers. It provides functions to construct a color from component values and to serialize and deserialize colors using Yojson. It is used for handling RGBA color data in JSON formats, such as when loading or saving graphical settings or themes.",
      "description_length": 342,
      "index": 111,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ReferenceRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for specifying options when registering reference providers in a language server. It includes fields for filtering documents and enabling work-done progress notifications. The structure supports serialization to and from JSON for use in LSP protocol communication.",
      "description_length": 301,
      "index": 112,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.MarkedString",
      "library": "linol-eio",
      "description": "This module defines a data structure for strings annotated with an optional language identifier and provides bidirectional conversion between this structure and JSON using Yojson. It supports parsing and serializing marked strings, where each string can carry a language tag for localization or syntax identification. Typical use cases include handling multilingual text data or encoding language-specific content in JSON formats.",
      "description_length": 430,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentColorRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering document color providers, including filters for text documents or notebook cells, an optional identifier, and progress tracking. It supports serialization to and from JSON using Yojson. This is used to specify how and when a language server should provide document color information in LSP-compatible editors.",
      "description_length": 367,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RegistrationParams",
      "library": "linol-eio",
      "description": "This module handles the creation and JSON serialization of registration parameters containing a list of registration items. It provides functions to construct a parameter object, convert it to and from JSON format using Yojson. Concrete use cases include preparing and parsing registration data for LSP (Language Server Protocol) communication.",
      "description_length": 344,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeConfigurationRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing configuration change registration options, specifically allowing a section to be specified either as a single string or a list of strings. It provides functions to create instances, convert to and from JSON format using Yojson. This is useful when handling dynamic configuration updates in language server protocols where section identifiers need to be serialized or deserialized.",
      "description_length": 434,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeDefinitionParams",
      "library": "linol-eio",
      "description": "This module defines a record type for parameters used in type definition requests, including optional tokens and references to a text document and position. It provides functions to construct instances, convert to and from JSON format. It is used to handle type definition events in a language server protocol implementation.",
      "description_length": 325,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.IO_eio",
      "library": "linol-eio",
      "description": "This module implements effect-based input/output operations using the Eio concurrency framework. It provides functions for reading from and writing to channels, handling exceptions with backtraces, and composing asynchronous actions using applicative and monadic combinators. Concrete use cases include building network clients, processing streaming data, and managing concurrent I/O tasks with structured concurrency.",
      "description_length": 418,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceFoldersInitializeParams",
      "library": "linol-eio",
      "description": "This module handles initialization parameters for workspace folders in a language server protocol implementation. It provides functions to create and serialize a structure that holds an optional list of workspace folders. The module supports parsing and generating JSON representations of the initialization parameters, specifically for managing multiple root directories in an editor or IDE context.",
      "description_length": 400,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileChangeType",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing file system events: `Created`, `Changed`, or `Deleted`. It includes functions to convert values of type `t` to and from JSON using the `Yojson.Safe` module. These conversions are useful for serializing file change events for logging, inter-process communication, or configuration management.",
      "description_length": 335,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CallHierarchyItem",
      "library": "linol-eio",
      "description": "This module defines a structured representation of call hierarchy items, including symbol metadata and location information. It provides functions to construct these items and serialize or deserialize them using JSON. This is used to support features like \"Find Callers\" or \"Show Call Hierarchy\" in language servers by capturing symbol relationships across files.",
      "description_length": 363,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DiagnosticOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring diagnostic behavior in a language server, with fields to control identifiers, inter-file dependencies, progress reporting, and workspace-wide diagnostics. It provides functions to construct instances with optional parameters and to serialize/deserialize them using Yojson. Concrete use cases include setting up diagnostic options during server initialization and parsing configuration from JSON input.",
      "description_length": 454,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Declaration",
      "library": "linol-eio",
      "description": "This module defines a type `t` that represents either a single location or a list of locations, using the `Linol_lsp__Types.Location.t` type. It provides functions to convert values of type `t` to and from JSON format using the `Yojson.Safe` module. This is useful for serializing and deserializing location data when communicating with language servers or storing structured location information.",
      "description_length": 397,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureHelpRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for signature help features in a language server, supporting document selectors, trigger characters, and progress reporting. It works with text document filters, string lists, and boolean flags to customize when and how signature assistance is provided. Concrete use cases include setting up signature help for specific file types or notebooks, defining characters that trigger or retrigger assistance, and enabling work progress tracking.",
      "description_length": 481,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RenameRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering rename operations in a language server. It includes fields to specify which documents to target, whether to enable preparation of the rename provider, and whether to track progress. The module supports serialization to and from JSON for use in LSP communication.",
      "description_length": 320,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeLensOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for code lens features, specifically controlling whether a resolve provider is enabled and whether work done progress is reported. It provides functions to create instances and serialize/deserialize them using Yojson. It is used to configure code lens behavior in language server implementations where such options need to be passed between components or stored in configuration files.",
      "description_length": 427,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentSymbolClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines and constructs data structures for specifying client capabilities related to document symbols in a language server protocol. It supports operations to create and manage configurations for symbol kinds, tags, and hierarchical symbol support, using types like `symbolKind`, `tagSupport`, and `t`. It is used to serialize and deserialize these capability structures to and from JSON, enabling communication between a language client and server.",
      "description_length": 461,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionItem",
      "library": "linol-eio",
      "description": "This module defines a completion item structure used to represent suggestions in a code editor, including details like labels, documentation, and text edits. It provides functions to create and manipulate completion items with specific properties such as insert behavior, sorting, and deprecation status. The module also supports serialization and deserialization to and from JSON using Yojson.",
      "description_length": 394,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SymbolInformation",
      "library": "linol-eio",
      "description": "This module defines a data structure representing symbol information with fields for name, kind, location, container name, deprecation status, and tags. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to serialize and deserialize symbol data for transmission or storage, particularly in language server protocol implementations.",
      "description_length": 376,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensDeltaPartialResult",
      "library": "linol-eio",
      "description": "This module represents partial results for semantic token deltas, specifically handling lists of semantic token edits. It provides functions to construct instances from edit lists and to serialize/deserialize to and from JSON. It is used to efficiently transmit incremental updates to semantic token data in language server protocol implementations.",
      "description_length": 349,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentFilter",
      "library": "linol-eio",
      "description": "This module defines a filter for text documents based on language, URI scheme, and file pattern. It allows creating filters that match documents by optional criteria such as language identifier, URI scheme (e.g., \"file\" or \"untitled\"), and glob patterns for file paths. Use this to specify which documents a language server should handle, such as filtering for JavaScript files on disk or restricting to in-memory documents.",
      "description_length": 424,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentEdit",
      "library": "linol-eio",
      "description": "This module represents a set of edits applied to a specific text document, supporting both plain and annotated text edits. It works with structured data types including lists of text edit variants and versioned document identifiers. It is used to serialize and deserialize text document changes for transport or storage, particularly in language server protocol implementations.",
      "description_length": 378,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceEdit",
      "library": "linol-eio",
      "description": "This module constructs and serializes workspace edit operations for LSP (Language Server Protocol) interactions. It supports creating edits with text changes, file creations, renames, deletions, and annotations, using JSON associations for document and change tracking. Typical use cases include applying batched code modifications across multiple files in an editor or IDE.",
      "description_length": 374,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileEvent",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file events with a change type and URI. It provides functions to create instances and convert to and from JSON format. It is used to handle file change notifications in language server protocol implementations.",
      "description_length": 264,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.RelatedUnchangedDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module handles diagnostic reports for unchanged documents, specifically associating diagnostic results with URIs and managing result identifiers. It provides operations to create diagnostic report structures and serialize or deserialize them using Yojson. Concrete use cases include processing and persisting diagnostic data in a language server context where document diagnostics remain unchanged across versions.",
      "description_length": 419,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeConfigurationClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing client capabilities for handling configuration changes, specifically supporting optional dynamic registration. It provides functions to construct instances, and to convert to and from JSON format using Yojson. It is used to manage client-side configuration update capabilities in language server protocol implementations.",
      "description_length": 371,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionItemTag",
      "library": "linol-eio",
      "description": "This module defines a single enumerated type representing tags for completion items, specifically supporting serialization and deserialization to and from JSON. It includes conversions to and from `Yojson.Safe.t` for use in JSON-based communication, such as language server protocol interactions. A typical use case involves marking deprecated completion items in an editor integration where JSON is used for data exchange.",
      "description_length": 423,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SelectionRangeRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering selection range capabilities in a language server. It includes fields for specifying document selectors, an optional registration ID, and whether work done progress is supported. The module provides functions to construct these options and serialize/deserialize them using Yojson.",
      "description_length": 338,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentLinkParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in document link resolution, including optional tokens for partial results and progress tracking, along with a text document identifier. It provides functions to construct these parameters and serialize or deserialize them using Yojson. Concrete use cases include handling document link requests in an LSP server where structured data exchange is required.",
      "description_length": 413,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MonikerParams",
      "library": "linol-eio",
      "description": "This module defines a record type for parameters used in moniker-related operations, including optional tokens for partial results and work done, along with required position and text document identifiers. It provides functions to construct instances, and to convert to and from JSON format. It is used to pass parameters between LSP clients and servers when handling moniker requests with support for progress tracking.",
      "description_length": 420,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentOnTypeFormattingClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing client capabilities for document on-type formatting in a language server. It includes functions to create and serialize the structure, primarily working with boolean options and JSON. It is used to configure formatting behavior in language server protocol implementations.",
      "description_length": 322,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Unregistration",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing unregistration events, with fields for an identifier and a method. It includes functions to construct instances and to convert between JSON and the structure. It is used to handle unregistration data in JSON format, particularly for parsing and serializing event information.",
      "description_length": 329,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceSymbol",
      "library": "linol-eio",
      "description": "This module defines a record type for representing workspace symbols with fields like name, kind, location, and optional metadata such as container name and tags. It includes functions to construct these records and convert them to and from JSON using Yojson. It is used to model and serialize symbol information for features like workspace-wide symbol search in an LSP server.",
      "description_length": 377,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ConfigurationItem",
      "library": "linol-eio",
      "description": "This module defines a data structure representing configuration items with optional scope URIs and sections. It provides functions to create instances and serialize or deserialize them using Yojson. Use this module to handle configuration data in JSON format, particularly when integrating with systems that require structured configuration items with optional contextual information.",
      "description_length": 384,
      "index": 144,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DidChangeWorkspaceFoldersParams",
      "library": "linol-eio",
      "description": "This module handles workspace folder change events in an LSP server. It provides functions to create and serialize event data using Yojson. The main type `t` wraps a `WorkspaceFoldersChangeEvent.t` to represent changes in workspace folders during a session.",
      "description_length": 257,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceDiagnosticReport",
      "library": "linol-eio",
      "description": "This module represents diagnostic reports for workspace documents, handling both full and unchanged document diagnostics. It provides functions to construct reports from lists of diagnostic items and to serialize/deserialize them using Yojson. It is used to communicate diagnostic results between the language server and the editor in a structured, JSON-compatible format.",
      "description_length": 372,
      "index": 146,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CodeLensRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for code lens registration, including document selectors, resolve provider enablement, and work progress tracking. It works with document filter types to specify which files or notebook cells the code lens applies to, and supports JSON serialization/deserialization. It is used to configure code lens features in language servers by specifying when and how code lenses should be resolved and displayed.",
      "description_length": 444,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.PrepareRenameParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in preparing a rename operation, including position, text document identifier, and an optional work done token. It provides functions to construct instances, and serialize/deserialize to and from JSON. It is used to handle rename requests in a language server, where precise location and document context are required.",
      "description_length": 375,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressReport",
      "library": "linol-eio",
      "description": "This module defines a data structure for reporting progress in a work-done notification system. It includes functions to create a progress report with optional cancellable, message, and percentage fields, and supports JSON serialization and deserialization. It is used to communicate progress updates in LSP (Language Server Protocol) interactions.",
      "description_length": 348,
      "index": 149,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DeclarationParams",
      "library": "linol-eio",
      "description": "This module defines a record type for parameters used in a declaration request, including optional tokens for partial results and work progress, along with position and text document identifiers. It provides functions to construct instances, and serialize and deserialize them using Yojson. This module is used to handle and transmit parameters in LSP (Language Server Protocol) related operations involving document positions and progress tracking.",
      "description_length": 449,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Command",
      "library": "linol-eio",
      "description": "This module defines a command structure with a title, command identifier, and optional JSON-encoded arguments. It provides functions to construct commands, and to serialize and deserialize them using Yojson. It is used to represent executable actions in contexts like language server protocol interactions.",
      "description_length": 306,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileOperationClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file operation capabilities, including support for create, delete, and rename operations, both in response to events and in anticipation of them. It provides functions to construct instances with optional boolean flags and to serialize or deserialize these instances using Yojson. This structure is used to configure and communicate client capabilities in file system event handling scenarios.",
      "description_length": 447,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InsertTextFormat",
      "library": "linol-eio",
      "description": "This module defines a type `t` with two variants, `PlainText` and `Snippet`, representing different modes of handling text insertion. It includes functions to convert values of type `t` to and from Yojson format, enabling serialization and deserialization for storage or transmission. These operations are useful when persisting or exchanging structured text formatting options, such as in configuration files or API payloads.",
      "description_length": 426,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeKind",
      "library": "linol-eio",
      "description": "This module defines a variant type for categorizing different kinds of folding ranges in source code, such as comments, imports, regions, and custom string tags. It includes functions to convert between the variant type and Yojson representations. It is used to serialize and deserialize folding range kind data when integrating with tools that support the Language Server Protocol.",
      "description_length": 382,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureHelpClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and creation functions for client capabilities related to signature help in a language server. It handles nested capability flags like parameter label offsets, documentation formats, and active parameter support, enabling precise configuration of signature help features. These capabilities are used to negotiate supported functionality between a language client and server during initialization.",
      "description_length": 432,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Jsonrpc2",
      "library": "linol-eio",
      "description": "This module implements JSON-RPC 2.0 communication for language servers, handling message serialization, request-response correlation, and event-driven I/O. It works with LSP protocol types, JSON values, and IO channels to manage bidirectional communication between clients and servers. Concrete use cases include routing incoming LSP requests to handler functions, sending asynchronous notifications, and managing document state updates over standard input/output streams.",
      "description_length": 472,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TokenFormat",
      "library": "linol-eio",
      "description": "This module defines a single data type `t` with one constructor `Relative`, representing a specific token format. It provides functions to convert values of this type to and from Yojson representations. This module is used to handle JSON serialization and deserialization for the `Relative` token format in data exchange contexts.",
      "description_length": 330,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Locations",
      "library": "linol-eio",
      "description": "This module defines a type `t` that represents either a list of LSP locations or a list of LSP location links, supporting precise navigation and reference handling in language server protocol implementations. It includes functions to convert this type to and from Yojson representations, enabling serialization and deserialization for communication or storage. It is used specifically for managing and transferring location data in LSP-related workflows, such as handling \"go to definition\" or \"find references\" requests.",
      "description_length": 521,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentColorParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in document color-related operations, including identifiers for partial results, text documents, and work done tokens. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to pass color context data in LSP (Language Server Protocol) interactions involving text document analysis.",
      "description_length": 385,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing workspace client capabilities related to inline value refresh support. It provides functions to create instances, serialize to, and deserialize from JSON format using Yojson. A concrete use case includes configuring language server clients to indicate whether they support refreshing inline values during debugging sessions.",
      "description_length": 374,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InitializedParams_",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for handling initialization parameters in an LSP (Language Server Protocol) server setup. It includes types for client information and server configuration, supporting operations like creating client metadata, parsing initialization options, and serializing/deserializing configuration data using Yojson. Concrete use cases include setting up server capabilities, tracking client versions, and managing root directories or URIs during LSP initialization.",
      "description_length": 504,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensEdit",
      "library": "linol-eio",
      "description": "This module defines a record type for representing semantic token edits, including optional array data, a count of deleted tokens, and a starting position. It provides functions to construct instances and convert to and from JSON using Yojson. It is used to serialize and deserialize token edit information for transmission or storage.",
      "description_length": 335,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentLink",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing document links in a text editor, including their range, target URI, optional tooltip, and additional metadata. It provides functions to construct these link objects and serialize or deserialize them using JSON. This is used to support features like clickable links in code editors that navigate to specific locations in a document.",
      "description_length": 385,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RenameFilesParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling a list of file rename operations and provides functions to serialize and deserialize the structure to and from JSON. It works with lists of `FileRename.t` records, each representing a file rename action. It is used to prepare and manage batch file rename parameters for transmission or storage.",
      "description_length": 344,
      "index": 164,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlineValueContext",
      "library": "linol-eio",
      "description": "This module defines a data structure representing the context of inline values during debugging, specifically capturing the frame ID and the range of the stopped location. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for serializing and deserializing inline value context data when integrating with debug adapters or logging systems.",
      "description_length": 380,
      "index": 165,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CodeAction",
      "library": "linol-eio",
      "description": "This module defines and constructs code action objects for use in LSP (Language Server Protocol) implementations. It supports creating code actions with optional commands, diagnostics, workspace edits, and metadata like titles and kinds. The module also provides JSON serialization and deserialization for code action instances, enabling seamless data exchange in editor integrations.",
      "description_length": 384,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookDocumentSyncRegistrationOptions",
      "library": "linol-eio",
      "description": "This module handles JSON serialization and deserialization for notebook document synchronization registration options. It defines a type `t` representing the structure of these options and provides functions to convert between JSON values and this type. It is used to configure notebook synchronization settings in a language server implementation.",
      "description_length": 348,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for holding parameters used in a completion request, including position, text document identifier, and optional context and tokens. It provides functions to construct instances, convert to and from JSON format using Yojson. Useful for handling language server protocol completion requests with structured data.",
      "description_length": 347,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CreateFilesParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing parameters used to create files, specifically a list of file creation operations. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to serialize and deserialize file creation requests, typically in communication with a language server handling file operations.",
      "description_length": 367,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.HoverOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for hover options in a language server protocol implementation. It includes a single field `workDoneProgress` to indicate whether work done progress is supported. The module provides functions to create instances, and serialize or deserialize them using Yojson for communication over JSON-based protocols.",
      "description_length": 342,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RegularExpressionsClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for specifying regular expression engine capabilities, including the engine name and optional version. It provides functions to create instances, convert to and from JSON format using Yojson. This module is used to exchange regex engine metadata in language server protocols or configuration interfaces.",
      "description_length": 340,
      "index": 171,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DeclarationRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing registration options for document declarations, including optional document selectors, an identifier, and progress tracking. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to configure how document declarations are registered and processed, particularly in scenarios involving text documents or notebook cells.",
      "description_length": 410,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SelectionRangeParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing parameters used in a selection range request, including positions, a text document identifier, and optional tokens. It provides functions to construct instances, convert to and from JSON format. Used to handle requests for selection ranges in a text document, such as when a user selects a region in a code editor and additional context ranges are needed.",
      "description_length": 409,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentSymbolOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for document symbol requests, specifically supporting the `label` and `workDoneProgress` fields. It provides functions to construct these options, along with serialization and deserialization to and from JSON using Yojson. These capabilities are used to manage and transmit symbol-related settings in language server protocol implementations.",
      "description_length": 384,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ChangeAnnotationIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type `t` as a string alias for identifiers used in change annotations. It includes functions to convert values of type `t` to and from Yojson.Safe.t, enabling JSON serialization and deserialization. These operations support persisting or transmitting change annotation identifiers in a structured format.",
      "description_length": 326,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookCell",
      "library": "linol-eio",
      "description": "This module defines a notebook cell structure with fields for document URI, execution summary, cell kind, and metadata. It provides functions to create cells and serialize/deserialize them using Yojson. Concrete use cases include managing individual cells in a notebook interface and persisting their state to disk or transmitting them over a network.",
      "description_length": 351,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookCellTextDocumentFilter",
      "library": "linol-eio",
      "description": "This module defines a type `t` that represents a filter for notebook cell text documents, optionally specifying a language and a notebook source. It includes functions to create instances of this filter and to serialize or deserialize them using Yojson. The module is used to configure which notebook cells are processed based on their document type and language.",
      "description_length": 363,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceUnchangedDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a diagnostic report structure for unchanged documents in a workspace, containing a result ID, URI, and optional version. It provides functions to create instances, and serialize/deserialize them using Yojson. This is used to track and persist diagnostic results without reprocessing unchanged files.",
      "description_length": 319,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ExecuteCommandParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for command execution parameters, including command name, arguments, and an optional work done token. It provides functions to create instances, convert to and from JSON using Yojson, and supports optional fields for flexible command configuration. Concrete use cases include serializing and deserializing command parameters for inter-process communication or logging.",
      "description_length": 405,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeLensClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to code lens features in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is configuring and exchanging code lens capabilities between a language server and client during initialization.",
      "description_length": 405,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ShowDocumentResult",
      "library": "linol-eio",
      "description": "This module defines a result type for document display operations, containing a single boolean field indicating success or failure. It provides functions to construct instances, convert to and from JSON using Yojson. This type is used to return the outcome of document rendering actions in a structured format.",
      "description_length": 310,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentRangesFormattingParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for specifying formatting parameters for document ranges, including formatting options, target ranges, and document identifiers. It supports operations to create instances and serialize/deserialize them using Yojson. It is used to pass structured formatting requests to an editor or language server, enabling precise control over document transformations.",
      "description_length": 392,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionTriggerKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` with two variants, `Invoked` and `Automatic`, representing the trigger kinds for code actions. It provides functions `t_of_yojson` and `yojson_of_t` for converting between the type and Yojson representations. This module is used to serialize and deserialize code action trigger kinds when handling language server protocol messages.",
      "description_length": 363,
      "index": 183,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.MarkupContent",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing markup content with a specific kind and string value. It provides functions to create instances, convert to and from JSON using Yojson. It is used to handle formatted text data in contexts like language server protocol responses.",
      "description_length": 283,
      "index": 184,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.WorkspaceFolder",
      "library": "linol-eio",
      "description": "This module defines a workspace folder structure with a name and URI, providing functions to create instances and serialize/deserialize them using Yojson. It works with string names and `Linol_lsp.Uri0.t` URIs. It is used to represent and exchange workspace folder data in LSP-related contexts.",
      "description_length": 294,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type `t` that wraps a URI to identify text documents, along with functions to create instances and serialize/deserialize them using Yojson. It works directly with `Linol_lsp.Uri0.t` and Yojson.Safe.t for structured data handling. It is used to uniquely reference text documents in a format compatible with JSON-based protocols.",
      "description_length": 349,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentChangeRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering text document change notifications, including a document selector and synchronization kind. It supports creating and serializing these options using `create`, `t_of_yojson`, and `yojson_of_t`. Concrete use cases include configuring document synchronization settings for a language server.",
      "description_length": 332,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentDiagnosticReportPartialResult",
      "library": "linol-eio",
      "description": "This module represents a partial result for document diagnostic reports in a language server protocol implementation. It stores a collection of related documents, each associated with either a full or unchanged diagnostic report, indexed by URI. It is used to efficiently handle and serialize diagnostic data during incremental analysis or partial result updates in an LSP session.",
      "description_length": 381,
      "index": 188,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.FullDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a data structure for storing a list of diagnostics along with an optional result identifier. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to represent and serialize diagnostic reports for full documents in a language server context.",
      "description_length": 310,
      "index": 189,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.NotebookDocumentClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for notebook document client capabilities, primarily handling synchronization settings. It provides functions to create instances and convert to and from JSON format using Yojson. It is used to configure how notebook documents are synchronized between a client and a language server.",
      "description_length": 320,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DiagnosticTag",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing diagnostic tags used in code analysis, specifically for marking code as either `Unnecessary` or `Deprecated`. It includes functions to convert values of type `t` to and from Yojson format, enabling serialization and deserialization for use in JSON-based communication or storage. These conversions are useful when integrating with tools that consume or emit diagnostics in JSON format, such as language servers or linters.",
      "description_length": 466,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeWatchedFilesRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for managing file system watchers in the context of the LSP (Language Server Protocol). It includes functions to create an instance with a list of watchers and to serialize/deserialize instances using Yojson. It is used to configure notifications for changes to watched files in a language server implementation.",
      "description_length": 349,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WillSaveTextDocumentParams",
      "library": "linol-eio",
      "description": "This module handles parameters for a text document save event, capturing the save reason and document identifier. It provides functions to construct instances, convert to and from JSON, and work with LSP-compatible data structures. Use this when implementing or interacting with language server protocol handlers for document saving operations.",
      "description_length": 344,
      "index": 193,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ColorPresentationParams",
      "library": "linol-eio",
      "description": "This module defines a record type for parameters used in color presentation operations, including fields for color, partial result token, range, text document identifier, and work done token. It provides functions to construct instances, convert to and from JSON format. Used to handle color formatting requests in text editors with support for asynchronous operations and document tracking.",
      "description_length": 391,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokens",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing semantic token data as an integer array with an optional result identifier. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to serialize and deserialize semantic token information for transport or storage, specifically in contexts requiring JSON encoding.",
      "description_length": 364,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.UnregistrationParams",
      "library": "linol-eio",
      "description": "This module handles the creation and JSON serialization of unregistration parameters containing a list of unregistration requests. It provides functions to construct an unregistration parameter instance and convert it to and from Yojson format. Concrete use cases include processing unregistration requests in a language server protocol implementation.",
      "description_length": 352,
      "index": 196,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TextDocumentContentChangeEvent",
      "library": "linol-eio",
      "description": "This module represents a text document content change event with optional range and range length fields, along with the new text. It provides functions to construct such events, and to convert them to and from JSON format using Yojson. It is used to model incremental text changes in a document, such as those sent by an editor during live editing sessions.",
      "description_length": 357,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentLinkOptions",
      "library": "linol-eio",
      "description": "This module defines options for document link resolution, including whether to use a resolve provider and enable work-done progress. It provides functions to create and serialize these options using `Yojson.Safe.t`. Useful for configuring document link behavior in editors or tools that support LSP (Language Server Protocol) extensions.",
      "description_length": 337,
      "index": 198,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TextDocumentSyncClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing client capabilities for text document synchronization, including flags for save events and dynamic registration. It provides functions to construct instances with optional fields and to serialize or deserialize them using Yojson. This structure is used to configure how a language server client handles document events like saving or changes.",
      "description_length": 392,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DeclarationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring work progress reporting in a JSON-based communication protocol. It includes functions to create an options record with an optional work progress flag and to serialize or deserialize the record to and from JSON. A concrete use case is enabling or disabling progress notifications in a language server implementation.",
      "description_length": 368,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeLensWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing workspace client capabilities related to code lens refresh support. It provides functions to create instances, serialize to JSON, and deserialize from JSON. It is used to configure and exchange code lens capabilities between a language server and client.",
      "description_length": 304,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentRangeFormattingOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for document range formatting, supporting fields like `rangesSupport` and `workDoneProgress`. It provides functions to create instances and convert to and from JSON using Yojson. It is used to configure formatting behavior in text editors or language servers where partial document ranges are processed.",
      "description_length": 345,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DiagnosticRelatedInformation",
      "library": "linol-eio",
      "description": "This module defines a data structure for diagnostic-related information, consisting of a location and a message. It provides functions to create instances, convert to and from JSON using Yojson. It is used to represent additional diagnostic details in a format compatible with language server protocols.",
      "description_length": 303,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionList",
      "library": "linol-eio",
      "description": "This module constructs and serializes completion lists for code editors, handling insertion and replacement ranges, text formatting, and optional metadata. It works with LSP completion items, ranges, and JSON data structures to define how suggestions should be applied during autocompletion. Concrete use cases include building response payloads for language server protocol (LSP) completion requests with precise edit ranges and formatting instructions.",
      "description_length": 454,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeWatchedFilesParams",
      "library": "linol-eio",
      "description": "This module represents parameters for handling file change events in a language server protocol implementation. It provides functions to construct and serialize/deserialize a list of file events, specifically for tracking changes to watched files. The module is used when processing notifications about modified files, enabling integration with JSON-based communication in LSP workflows.",
      "description_length": 387,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ShowDocumentClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to showing documents, specifically whether showing documents is supported. It provides functions to create an instance of this capability, and to serialize and deserialize it using Yojson. This is used to communicate client features in a language server protocol implementation.",
      "description_length": 360,
      "index": 206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentRangeFormattingClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for client capabilities related to document range formatting in a language server. It includes fields to indicate support for dynamic registration and range-based formatting, along with functions to construct, serialize, and deserialize these capabilities. It is used to configure formatting behavior in LSP clients that handle source code ranges during editing sessions.",
      "description_length": 408,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureInformation",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing signature information in a language server protocol context. It includes fields for a label, optional active parameter index, documentation, and parameter details, supporting serialization to and from JSON. It is used to convey function or method signature details during code analysis or autocompletion in an editor integration.",
      "description_length": 383,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentFormattingOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for document formatting options, specifically supporting a boolean flag for work-done progress. It provides functions to create instances, convert to and from JSON format using Yojson. This structure is used to configure formatting behavior in text processing tools where progress tracking is required.",
      "description_length": 339,
      "index": 209,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.LocationLink",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing location links in a codebase, primarily used in language server protocol implementations. It includes functions to construct location link instances with optional origin ranges and serialize or deserialize them using JSON. Concrete use cases include mapping identifiers to their definitions across files in an editor integration.",
      "description_length": 383,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SymbolKind",
      "library": "linol-eio",
      "description": "This module defines a variant type representing different kinds of symbols in a programming context, such as `Class`, `Function`, `Variable`, and `Enum`. It includes functions to convert values between this type and Yojson for serialization and deserialization. This is useful when handling symbol data in JSON-based protocols like LSP (Language Server Protocol).",
      "description_length": 363,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ReferenceContext",
      "library": "linol-eio",
      "description": "This module defines a reference context configuration with a boolean flag indicating whether declarations should be included. It provides functions to create an instance, serialize to JSON, and deserialize from JSON. Used to control contextual behavior in reference resolution processes.",
      "description_length": 287,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RelativePattern",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing relative patterns with a base URI and a string pattern. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for handling file path patterns with embedded JSON data.",
      "description_length": 258,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineCompletionOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for inline completion features, specifically supporting the `workDoneProgress` field to indicate progress reporting capabilities. It provides functions to create and serialize these options using `Yojson.Safe.t` for JSON parsing and generation. Use this module to configure inline completion behavior in language server implementations where progress tracking is required.",
      "description_length": 414,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValue",
      "library": "linol-eio",
      "description": "This module defines a polymorphic type `t` representing different kinds of inline values, including text, variable lookups, and evaluatable expressions, using variants. It provides bidirectional JSON serialization and deserialization for these values via `t_of_yojson` and `yojson_of_t`. These functions enable seamless conversion between JSON data and the corresponding inline value types, primarily used in language server protocol implementations.",
      "description_length": 450,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionOptions",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for configuring code completion features in an editor or IDE. It includes types for completion item options and global completion settings, supporting fields like trigger characters, commit characters, and progress indicators. The module enables parsing and serializing these configurations to and from JSON, facilitating integration with language server protocols or editor settings.",
      "description_length": 434,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for inline value parameters, including context, range, and text document identifiers, along with optional work done tokens. It provides functions to construct instances and convert to and from JSON using Yojson. It is used to represent parameters for inline value requests in language server protocol implementations.",
      "description_length": 354,
      "index": 217,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DiagnosticServerCancellationData",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling cancellation data in a diagnostic server, specifically tracking whether a retrigger request should occur. It provides functions to create instances, convert to and from JSON format using Yojson, and ensures proper serialization for communication. Concrete use cases include managing cancellation signals between a client and a diagnostic server during code analysis.",
      "description_length": 416,
      "index": 218,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TextDocumentSyncKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing the synchronization kind for text documents, with variants `None`, `Full`, and `Incremental`. It provides functions to convert between this type and JSON values. This module is used to specify how text document changes are synchronized between a client and a language server.",
      "description_length": 319,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DefinitionRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering definition handlers in a language server, supporting document-specific filtering and progress reporting. It works with text document filters, notebook cell filters, and boolean flags for work progress. Concrete use cases include configuring definition request handling for specific document types or enabling progress tracking during long-running operations.",
      "description_length": 402,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MessageActionItem",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing message action items with a title field. It provides functions to create instances, serialize to and from JSON using Yojson. Useful for handling user interface actions or message metadata that needs structured titles.",
      "description_length": 271,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.GeneralClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines client capability structures for handling stale requests and optional features in a language server protocol. It includes operations to create and manipulate capability records with support for cancellation, retry policies, and encodings. Use cases include configuring client behavior for handling modified content and specifying supported features like markdown rendering or position encodings.",
      "description_length": 415,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookDocumentSyncClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure with optional boolean fields for dynamic registration and execution summary support. It provides functions to create instances, and to convert to and from JSON format. It is used to represent client capabilities for notebook document synchronization in a language server protocol implementation.",
      "description_length": 332,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureHelpContext",
      "library": "linol-eio",
      "description": "This module defines a context for managing signature help in a language server, specifically handling retriggering and trigger sources. It works with optional `SignatureHelp` values, boolean flags, and trigger kinds to capture the state during code completion. Concrete use cases include determining whether to reuse existing signature help or fetch new data based on user input characters or automatic triggers.",
      "description_length": 412,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensDeltaParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling semantic token delta parameters in a language server protocol implementation. It includes fields for partial and previous result identifiers, a text document identifier, and an optional work done token, supporting efficient incremental updates. The module provides functions to construct instances, and serialize or deserialize them using Yojson for communication over LSP.",
      "description_length": 423,
      "index": 225,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DidOpenNotebookDocumentParams",
      "library": "linol-eio",
      "description": "This module handles parameters for a notebook document open event, containing the notebook document and its associated cell text documents. It provides functions to construct the parameter type, along with JSON serialization and deserialization. Useful for processing notebook-related events in a language server, particularly when integrating with clients that send such events in JSON format.",
      "description_length": 394,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.LinkedEditingRangeParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in linked editing range requests, including position, text document identifier, and an optional work done token. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to pass parameters for linked editing operations in a language server protocol context.",
      "description_length": 360,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CallHierarchyRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering call hierarchy providers in a language server. It includes fields for specifying document selectors, an optional registration ID, and whether to enable progress reporting. The module supports serialization to and from JSON for use in protocol exchanges.",
      "description_length": 311,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FormattingOptions",
      "library": "linol-eio",
      "description": "This module defines formatting options for text manipulation, including settings like newline insertion, spacing, and trimming. It works with boolean and integer values to configure text formatting behavior. Concrete use cases include serializing and deserializing formatting configurations to and from JSON, and creating structured formatting rules for code formatters or text processors.",
      "description_length": 389,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling code action parameters in the context of the LSP (Language Server Protocol). It includes fields for the code action context, text document identifier, and range, along with optional tokens for partial and work done progress. The module supports serialization and deserialization to and from JSON, enabling seamless integration with LSP clients and servers.",
      "description_length": 406,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` that represents parameters for work done progress in JSON-RPC communication, specifically handling an optional token that can be either an integer or a string. It provides functions to create instances of this type, and to convert to and from Yojson representations. It is used to manage progress reporting in language server protocol interactions where a work done token is needed to track long-running operations.",
      "description_length": 446,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentFormattingClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to document formatting in an editor integration. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these capabilities using Yojson. A concrete use case is configuring formatting features in an editor plugin based on client-provided JSON data.",
      "description_length": 391,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeDefinitionOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for handling work progress options, specifically supporting optional boolean flags. It provides functions to create instances, convert to and from JSON format using Yojson. Useful for serializing and deserializing type definition settings in JSON-based communication.",
      "description_length": 308,
      "index": 233,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ExecutionSummary",
      "library": "linol-eio",
      "description": "This module defines a data structure to represent the outcome and sequence of an execution step. It includes functions to construct summaries with an execution order and optional success status, and to serialize or deserialize them using Yojson. It is used to track and persist step results in workflows requiring ordered processing and status reporting.",
      "description_length": 354,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SetTraceParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring trace parameters using a specific trace value type. It provides functions to create instances, convert to and from JSON format using Yojson, and ensures compatibility with serialization workflows. It is used to manage trace settings in contexts requiring structured data exchange, such as logging or debugging protocols.",
      "description_length": 373,
      "index": 235,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.PrepareSupportDefaultBehavior",
      "library": "linol-eio",
      "description": "This module defines a single enumerated type `t` with a constructor `Identifier`, representing a simple data structure for modeling default behavior states. It includes functions to convert values of type `t` to and from JSON format using the `Yojson.Safe.t` type. This module is useful for serializing and deserializing state information in JSON-based configurations or communication protocols.",
      "description_length": 395,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressEnd",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing the end of a work done progress notification, containing an optional message. It provides functions to create a `t` value with an optional message, and to convert between `t` and Yojson.Safe.t for serialization and deserialization. This is useful for handling progress reporting in language server protocol implementations where structured end notifications are required.",
      "description_length": 415,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeDescription",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing code descriptions with a URI reference. It provides functions to create instances, serialize to JSON, and deserialize from JSON. It is used to associate code elements with their source locations in a JSON-based interchange format.",
      "description_length": 284,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.PublishDiagnosticsParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for publishing diagnostic information associated with a specific document URI and version. It includes functions to construct the structure, convert it to and from JSON format using Yojson. The structure is used to report errors or warnings in a document, such as during language server protocol communication.",
      "description_length": 347,
      "index": 239,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ShowMessageRequestParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters of a show message request, including message content, type, and optional actionable items. It provides functions to construct instances, and to serialize and deserialize them using Yojson. It is used to format and handle user-facing messages with interaction options in a JSON-based communication layer.",
      "description_length": 355,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidCloseNotebookDocumentParams",
      "library": "linol-eio",
      "description": "This module handles parameters for a notebook document close event, capturing the notebook identifier and associated cell text documents. It provides functions to construct instances, and serialize or deserialize them using Yojson. Use this module to manage notebook closure data in LSP communication, ensuring accurate tracking of closed notebooks and their cells.",
      "description_length": 365,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in folding range operations, including optional tokens for partial results and work done notifications, along with a text document identifier. It provides functions to create instances of this structure and to serialize/deserialize it using Yojson. Concrete use cases include handling requests in a language server where folding ranges need to be communicated with client-specific identifiers and progress tracking.",
      "description_length": 472,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ApplyWorkspaceEditResult",
      "library": "linol-eio",
      "description": "This module defines a data structure to represent the outcome of applying a workspace edit, including whether the edit was applied successfully, the index of a failed change if applicable, and a reason for failure. It provides functions to construct such a result, along with serialization and deserialization to and from JSON. This is useful for handling and communicating the results of batched file operations in an editor or language server.",
      "description_length": 445,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing workspace client capabilities related to semantic tokens in a language server. It includes functions to create instances, serialize to JSON, and deserialize from JSON. A concrete use case is configuring a language server's support for refreshing semantic token data during development.",
      "description_length": 339,
      "index": 244,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CallHierarchyOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for call hierarchy options with a single field indicating whether work done progress is enabled. It provides functions to create instances, convert to and from JSON format using Yojson. It is used to configure call hierarchy requests in language server protocols where progress reporting is optional.",
      "description_length": 337,
      "index": 245,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CreateFileOptions",
      "library": "linol-eio",
      "description": "This module defines options for file creation operations, specifically handling behaviors for existing files. It provides functions to construct and serialize these options, supporting JSON conversion for configuration or logging purposes. Concrete use cases include setting up file creation parameters in applications that process or manage files, such as log rotation tools or batch importers.",
      "description_length": 395,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ResourceOperation",
      "library": "linol-eio",
      "description": "This module defines a data structure representing resource operations with optional annotations. It supports creating operation records, serializing them to JSON, and deserializing them from JSON. It is used to track and persist resource modifications in a structured format.",
      "description_length": 275,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ImplementationClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for tracking client capabilities related to dynamic registration and link support. It provides functions to create instances, serialize to JSON, and deserialize from JSON. It is used to configure and communicate feature support in a language server implementation.",
      "description_length": 301,
      "index": 248,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.WorkspaceDiagnosticReportPartialResult",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling partial diagnostic reports in a workspace, containing a list of either full or unchanged document diagnostic reports. It provides functions to create instances of this structure and to serialize or deserialize them using Yojson. Concrete use cases include managing incremental diagnostic updates in an LSP (Language Server Protocol) implementation.",
      "description_length": 398,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RenameFileOptions",
      "library": "linol-eio",
      "description": "This module defines options for file renaming operations, including flags to control behavior when files exist or should be overwritten. It provides functions to create option sets and convert them to and from JSON format. It is used to configure file renaming actions in a structured and serializable way.",
      "description_length": 306,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeHierarchyClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to type hierarchy in a JSON-based communication protocol. It includes functions to construct instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. It is used to exchange capability information between a language server and client over JSON.",
      "description_length": 383,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceSymbolClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for specifying client capabilities related to workspace symbol handling in a language server protocol implementation. It supports operations to create and manage symbol kinds, tag support, and resolve support, enabling precise control over symbol resolution and filtering. Concrete use cases include configuring symbol response formats and enabling dynamic registration for workspace symbol features.",
      "description_length": 450,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineCompletionParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in inline completion requests, including context, position, text document identifier, and an optional work done token. It provides functions to construct instances, convert to and from JSON format. It is used to handle inline code completion in text editors supporting the LSP protocol.",
      "description_length": 343,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.StaticRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for static registration options with an optional string identifier. It provides functions to create instances, serialize to and from JSON using Yojson. A concrete use case is handling configuration data for language server registrations where an optional ID is needed.",
      "description_length": 305,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceDiagnosticParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for workspace diagnostic parameters, including optional identifiers, partial result tokens, previous result IDs, and work done tokens. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to manage diagnostic data in a workspace, particularly for handling incremental updates and tracking diagnostic sessions.",
      "description_length": 389,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentRangeFormattingRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering document range formatting capabilities, including filters for text documents or notebook cells, support for formatting ranges, and progress reporting. It works with document selectors, boolean flags, and JSON representations. It is used to configure formatting behavior in language server protocol integrations, specifically for handling range-based formatting requests.",
      "description_length": 414,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CallHierarchyClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing client capabilities for call hierarchy operations, specifically supporting dynamic registration. It provides functions to create instances, convert to and from JSON format using Yojson. This is used to configure and exchange client capabilities in language server protocol implementations.",
      "description_length": 339,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering text document handlers, primarily using a document selector that can filter by text document or notebook cell criteria. It supports creating and serializing these options with optional document selectors. Useful for configuring language server features that apply to specific document types or contexts, such as syntax highlighting or code completion.",
      "description_length": 395,
      "index": 258,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlayHintParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in inlay hint requests, including range, text document identifier, and an optional work done token. It provides functions to construct instances, and serialize/deserialize to and from JSON. It is used to handle inlay hint data in the context of language server protocol interactions.",
      "description_length": 340,
      "index": 259,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CreateFile",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file creation requests, including an optional annotation ID, creation options, and a URI. It provides functions to construct instances, convert to and from JSON using Yojson. Concrete use cases include handling file creation events in an editor or IDE integration where structured data needs to be serialized or deserialized.",
      "description_length": 379,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InitializeParams",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for handling initialization parameters in an LSP (Language Server Protocol) context. It includes types for client information and initialization parameters, along with constructors and JSON serialization/deserialization functions. It is used to configure a language server during the initialization handshake, capturing client capabilities, root paths, process IDs, and other session-specific settings.",
      "description_length": 452,
      "index": 261,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CodeActionRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for code action registration, including supported action kinds, document selectors, and optional capabilities like resolution and progress reporting. It works with lists of code action kinds, document filters, and boolean flags. It is used to specify how code actions should be registered and processed in an LSP server.",
      "description_length": 362,
      "index": 262,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ShowMessageRequestClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for handling client capabilities related to showing message requests in a JSON-based communication protocol. It includes types for `messageActionItem` with optional support for additional properties, and a main type `t` that wraps an optional `messageActionItem`. The module supports serialization and deserialization to and from JSON using Yojson, enabling integration with protocol message handling.",
      "description_length": 451,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.HoverParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling hover request parameters in a language server protocol implementation. It includes fields for the cursor position, text document identifier, and an optional work done token, with support for JSON serialization and deserialization. It is used to convey contextual information needed to fetch hover content during code editing sessions.",
      "description_length": 384,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ReferenceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities in a JSON-based communication protocol, specifically supporting optional dynamic registration. It provides functions to construct the structure, convert it to and from JSON format using Yojson, and manage boolean flags for capability settings. Concrete use cases include configuring client behavior in language server protocol implementations where dynamic registration of features is required.",
      "description_length": 468,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SignatureHelpTriggerKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing the possible triggers for signature help in an editor, including invocation, trigger characters, and content changes. It provides functions to convert between JSON and the `t` type. Used to handle and respond to user actions that request signature assistance in code editors.",
      "description_length": 319,
      "index": 266,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.FileOperationRegistrationOptions",
      "library": "linol-eio",
      "description": "This module handles the creation and JSON serialization of file operation registration options. It works with a list of file operation filters to define which files are affected by server operations. Concrete use cases include configuring file watchers and specifying file type restrictions during language server setup.",
      "description_length": 320,
      "index": 267,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DeclarationClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to declaration features in a language server. It includes functions to construct capability instances and serialize or deserialize them using Yojson. Concrete use cases include configuring and exchanging client capability information during language server initialization.",
      "description_length": 354,
      "index": 268,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ServerCapabilities",
      "library": "linol-eio",
      "description": "This module defines and constructs server capabilities for an LSP (Language Server Protocol) server, including support for features like code actions, diagnostics, document formatting, hover information, and workspace management. It works with nested records and polymorphic variants to represent optional capabilities and their configurations, such as `textDocumentSync`, `workspaceFolders`, and `hoverProvider`. Concrete use cases include configuring a language server's feature set during initialization and serializing or deserializing capability data to and from JSON for communication with an LSP client.",
      "description_length": 610,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHint",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing inlay hints with optional data, kind, label formatting, positioning, and tooltips. It provides functions to construct hints with precise parameters and convert them to and from JSON. It is used to generate inline code annotations in an editor, such as type hints or parameter names, with support for rich formatting and edit actions.",
      "description_length": 377,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueText",
      "library": "linol-eio",
      "description": "This module defines a data structure representing inline text values with associated ranges. It provides functions to construct these values, serialize them to JSON, and deserialize them from JSON. Useful for mapping textual content to specific positions in a document, such as tracking variable values in source code.",
      "description_length": 318,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileSystemWatcher",
      "library": "linol-eio",
      "description": "This module defines a file system watcher configuration with a glob pattern and optional watch kind. It supports creating watchers for specific file patterns or relative paths, and serializing/deserializing configurations using Yojson. Concrete use cases include setting up file change monitoring in editors or tools that need to track files matching specific patterns.",
      "description_length": 369,
      "index": 272,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TypeHierarchyItem",
      "library": "linol-eio",
      "description": "This module defines a data structure representing an item in a type hierarchy, with fields for metadata like name, kind, and location ranges. It provides functions to construct instances and serialize/deserialize them using Yojson. Concrete use cases include processing and transmitting type hierarchy data in a language server implementation.",
      "description_length": 343,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MonikerKind",
      "library": "linol-eio",
      "description": "This module defines a polymorphic variant type `t` with three constructors: `Import`, `Export`, and `Local`, representing different kinds of monikers. It provides bidirectional conversion functions between this type and `Yojson.Safe.t` for serialization and deserialization. This module is used to distinguish and handle moniker roles in data exchange formats, particularly when interfacing with JSON-based protocols or storage.",
      "description_length": 428,
      "index": 274,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.LinkedEditingRangeRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering linked editing range features in a language server. It includes a document selector to specify which documents or notebook cells the feature applies to, an optional registration ID, and a flag to enable progress reporting. These options are used when setting up language server extensions that provide synchronized editing across related document regions.",
      "description_length": 413,
      "index": 275,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentSymbolRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering document symbol providers, supporting filtering by text document or notebook cell document types. It includes fields for specifying a label and enabling work done progress tracking. Use this module to configure symbol registration behavior in language server extensions handling document symbols.",
      "description_length": 354,
      "index": 276,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DidSaveTextDocumentParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing parameters for a text document save event, including the document identifier and optional saved text. It provides functions to construct instances, and serialize/deserialize them using Yojson. Concrete use cases include handling save notifications in a language server implementation.",
      "description_length": 328,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for code actions, including supported kinds, resolution capability, and progress reporting. It provides functions to create and serialize these options using LSP-compatible types and Yojson. Use this to customize code action behavior in an LSP server implementation.",
      "description_length": 308,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.BaseSymbolInformation",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing symbol information with optional container names, symbol kinds, names, and tags. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for processing and serializing symbol data in language server protocol implementations.",
      "description_length": 314,
      "index": 279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and creation functions for specifying client capabilities related to code completion in a language server protocol implementation. It handles nested capability types like `completionItem`, `completionItemKind`, and `insertTextModeSupport`, each capturing specific feature flags or value sets for completion behavior. Use cases include configuring a language client's completion features, such as supporting documentation formats, snippet insertion, or dynamic registration of completion providers.",
      "description_length": 533,
      "index": 280,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DeleteFile",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing file deletion operations, including an optional annotation ID, deletion options, and a URI. It provides functions to construct instances, convert to and from JSON format. It is used to serialize and deserialize file deletion requests in a language server protocol context.",
      "description_length": 326,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing workspace-related client capabilities in an LSP (Language Server Protocol) implementation. It includes boolean flags and nested capability structures for features like code lenses, diagnostics, configuration changes, file operations, and workspace edits. The module provides functions to construct, serialize, and deserialize these capabilities, enabling precise communication of client support for optional LSP features during protocol negotiation.",
      "description_length": 499,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in semantic token requests, including optional tokens for partial results and work done tracking, along with a text document identifier. It provides functions to create instances of this structure and to serialize/deserialize it using Yojson. Concrete use cases include handling semantic token queries in a language server where document context and cancellation tokens are required.",
      "description_length": 440,
      "index": 283,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Linol_eio.ImplementationRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering implementation handlers in a language server. It includes fields for specifying which documents to handle, an optional registration ID, and whether to support progress reporting. The module provides functions to construct these options and convert them to and from JSON format for serialization.",
      "description_length": 353,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TraceValues",
      "library": "linol-eio",
      "description": "This module defines a set of trace verbosity levels\u2014`Compact`, `Off`, `Messages`, and `Verbose`\u2014used to control logging detail in tracing contexts. It provides direct serialization and deserialization to and from JSON using the `t_of_yojson` and `yojson_of_t` functions. These values are used to configure trace output in systems requiring structured logging or runtime trace control.",
      "description_length": 384,
      "index": 285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueVariableLookup",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing inline value variable lookups, including whether the lookup is case-sensitive, the associated range, and an optional variable name. It provides functions to construct instances, serialize to and from JSON. It is used to pass inline value information between language server protocol components and execution environments.",
      "description_length": 375,
      "index": 286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TextDocumentSaveReason",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing the reason a text document was saved, with variants for manual saves, delayed autosaves, and saves after focus loss. It includes functions to convert between `t` values and Yojson.Safe.t for serialization and deserialization. This is used to communicate save reasons between a language server and client over LSP.",
      "description_length": 357,
      "index": 287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentHighlight",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing document highlights in a text editor, including a range and an optional highlight kind. It provides functions to construct highlights, convert them to and from JSON format using Yojson. Useful for implementing features like syntax highlighting or reference tracking in code editors.",
      "description_length": 336,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Hover",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing hover information in a language server protocol context, supporting content variations like markup, marked strings, or lists of marked strings, along with an optional range. It provides functions to construct instances, convert to and from JSON format using Yojson, enabling seamless serialization and deserialization. Concrete use cases include generating tooltip content with precise source location information for IDE integrations.",
      "description_length": 489,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing client capabilities for text document features in a language server protocol. It includes fields for optional capabilities like code actions, hover, completion, and document synchronization, each tied to specific feature modules. The module provides functions to construct instances, and serialize/deserialize them using Yojson for use in LSP handshake and configuration exchange.",
      "description_length": 430,
      "index": 290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DiagnosticClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to diagnostics in a language server protocol implementation. It includes fields to indicate support for dynamic registration, markup messages, and related documents, all of which influence how diagnostic information is exchanged between client and server. The module provides functions to construct capability instances, and to serialize and deserialize them using Yojson for integration with JSON-based communication.",
      "description_length": 500,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceSymbolParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling workspace symbol parameters in a JSON-based communication protocol. It includes fields for a query string and optional tokens for partial results and work progress, supporting efficient symbol lookup in large codebases. The module provides functions to construct instances and serialize/deserialize them to and from JSON.",
      "description_length": 371,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineCompletionTriggerKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` with two variants, `Invoked` and `Automatic`, representing the possible kinds of triggers for inline completion. It provides functions `t_of_yojson` and `yojson_of_t` for converting between the type `t` and Yojson.Safe.t values. This module is useful for serializing and deserializing inline completion trigger kinds when working with JSON-based APIs or storage formats.",
      "description_length": 401,
      "index": 293,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.NotebookDocumentFilter",
      "library": "linol-eio",
      "description": "This module defines a trivial filter for notebook documents, used to represent empty or universal selection criteria. It includes functions to convert the filter to and from JSON format using Yojson. A concrete use case is deserializing and serializing notebook document filters in a JSON-based configuration or communication protocol.",
      "description_length": 335,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CompletionTriggerKind",
      "library": "linol-eio",
      "description": "This module defines a variant type `t` representing different kinds of triggers for completion events, such as user invocation, trigger characters, or incomplete completions. It includes functions to convert between the type and Yojson representations. This is useful for serializing and deserializing completion trigger data in JSON format, particularly in language server protocol implementations.",
      "description_length": 399,
      "index": 295,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.OptionalVersionedTextDocumentIdentifier",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing a text document identifier with an optional version number. It provides functions to create instances, serialize to and from JSON using Yojson. It is used to identify documents in LSP-related operations where versioning may be required.",
      "description_length": 280,
      "index": 296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InitializeError",
      "library": "linol-eio",
      "description": "This module defines a single data type `t` with a boolean field `retry`, representing errors that may require retrying an operation. It includes functions to create instances of this type and to serialize and deserialize them using Yojson. This is useful for handling initialization errors in a way that supports JSON-based error reporting or inter-process communication.",
      "description_length": 371,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineCompletionList",
      "library": "linol-eio",
      "description": "This module defines a structure for managing a list of inline completion items, primarily used in language server protocol implementations. It provides functions to create instances and convert to and from JSON format using Yojson. The module is useful for handling code completion suggestions in an editor or IDE context.",
      "description_length": 322,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeConfigurationParams",
      "library": "linol-eio",
      "description": "This module handles the deserialization and reconfiguration of JSON-based settings updates in an LSP (Language Server Protocol) context. It provides a typed representation of the `settings` field and supports conversion to and from Yojson for wire-level handling. It is used specifically for processing configuration change notifications sent from an LSP client to a language server.",
      "description_length": 383,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ImplementationParams",
      "library": "linol-eio",
      "description": "This module defines a record type for parameters used in implementing language server protocol features, including position, text document identifier, and optional tokens. It provides functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include handling requests for code navigation, such as finding implementation locations in an editor integration.",
      "description_length": 396,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RelatedFullDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a type for diagnostic reports associated with a document, including a list of diagnostics and optional related documents with their diagnostic states. It provides functions to construct these reports, along with serialization and deserialization to JSON using Yojson. Use this module to manage and exchange diagnostic data in a language server context, particularly when tracking full or unchanged document diagnostics across related files.",
      "description_length": 460,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TextDocumentItem",
      "library": "linol-eio",
      "description": "This module defines a data structure representing a text document with fields for language ID, content, URI, and version. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to manage document state in a language server, enabling serialization for communication over LSP.",
      "description_length": 315,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentOnTypeFormattingRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering document-on-type formatting handlers, supporting configuration through document selectors and trigger characters. It works with text document filters and string-based triggers to specify when formatting should be applied. Concrete use cases include setting up automatic code formatting in an editor based on file type or specific input characters.",
      "description_length": 391,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.LogTraceParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for log trace parameters with a required message and an optional verbose string. It provides functions to create instances, convert to and from JSON using Yojson. It is used to serialize and deserialize log trace data with optional detailed information.",
      "description_length": 290,
      "index": 304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SemanticTokensLegend",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing semantic token legends, specifically used in language server protocols to describe token modifiers and types. It provides functions to construct instances and serialize or deserialize them using Yojson. A typical use case involves configuring token legends for syntax highlighting in an editor integration.",
      "description_length": 360,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DeclarationLink",
      "library": "linol-eio",
      "description": "This module defines a data type `t` representing links between declarations in a codebase. It includes functions to convert values of type `t` to and from JSON format using the Yojson library. Concrete use cases include serializing and deserializing declaration link data for storage or transmission.",
      "description_length": 300,
      "index": 306,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlayHintLabelPart",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing parts of an inlay hint label, including optional command, location, tooltip, and value fields. It provides functions to create instances of this structure and to serialize/deserialize them using Yojson. Concrete use cases include building and manipulating inlay hints in a language server protocol implementation, where each label part may carry actionable commands or rich tooltips.",
      "description_length": 437,
      "index": 307,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentSymbolParams",
      "library": "linol-eio",
      "description": "This module defines parameters for requesting document symbols, including identifiers for partial results and work done tokens. It works with JSON representations of text documents and tokens. Use this module to construct and serialize document symbol requests in LSP workflows.",
      "description_length": 278,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentSymbol",
      "library": "linol-eio",
      "description": "This module defines a data structure representing document symbols in a code editor, including metadata like name, kind, range, and optional details such as deprecation status and tags. It provides functions to construct symbol instances and serialize/deserialize them using Yojson. Concrete use cases include parsing and transmitting symbol information for features like code navigation and outline views in an LSP-based editor.",
      "description_length": 429,
      "index": 309,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SignatureHelp",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing signature help information in a language server protocol implementation. It includes functions to construct the structure with optional active parameter and signature indices, along with serialization and deserialization to and from JSON. It is used to provide contextual function signature details during code editing in an IDE or editor.",
      "description_length": 393,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeHierarchyOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for type hierarchy operations with an optional `workDoneProgress` flag. It provides functions to create instances, convert to and from JSON using Yojson. It is used to configure type hierarchy requests in language server protocols, specifically controlling whether work done progress is reported.",
      "description_length": 337,
      "index": 311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentDiagnosticReportKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` with two variants, `Full` and `Unchanged`, representing diagnostic report kinds for documents. It provides functions to convert values of this type to and from Yojson representations. This is useful when serializing or deserializing document diagnostic data in JSON format, particularly in LSP (Language Server Protocol) implementations.",
      "description_length": 368,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ColorPresentation",
      "library": "linol-eio",
      "description": "This module defines a type `t` for representing color presentation data with optional text edits and a label. It provides functions to construct instances, convert to and from JSON, and handles data used in language server protocol responses for color formatting. Concrete use cases include managing text edits and labels when presenting color information in IDEs or editors via LSP.",
      "description_length": 383,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FailureHandlingKind",
      "library": "linol-eio",
      "description": "This module defines a polymorphic variant type representing different strategies for handling failures in operations, such as aborting, applying transactional behavior, or enabling undo functionality. It includes functions to convert between the type and Yojson representations for serialization and deserialization. This module is used to specify and persist failure handling policies in systems requiring robust error recovery mechanisms.",
      "description_length": 440,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ExecuteCommandRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for specifying options related to command execution registration, including a list of commands and an optional work done progress flag. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to configure command registration behavior in language server implementations where progress tracking is required.",
      "description_length": 390,
      "index": 315,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.LinkedEditingRangeClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to linked editing ranges in a text editor. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is enabling or disabling dynamic registration of linked editing features in an editor extension.",
      "description_length": 388,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.TypeHierarchyPrepareParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in preparing type hierarchy requests, including position, text document identifier, and an optional work done token. It provides functions to construct instances, and serialize/deserialize to and from JSON. It is used to pass contextual information during type hierarchy operations in language server protocol implementations.",
      "description_length": 383,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeActionKind",
      "library": "linol-eio",
      "description": "This module defines a polymorphic type `t` representing specific code action kinds used in language server protocols, such as `QuickFix`, `Refactor`, and `SourceOrganizeImports`. It includes functions to convert between this type and Yojson for serialization and deserialization. This module is used to handle and transmit code action metadata in JSON format during language server communication.",
      "description_length": 396,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DefinitionClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for client capabilities related to definition handling, including optional dynamic registration and link support. It provides functions to construct instances, convert to and from JSON using Yojson. Used to configure and communicate client capabilities in a language server protocol context.",
      "description_length": 328,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Diagnostic",
      "library": "linol-eio",
      "description": "This module defines a diagnostic data structure for representing code analysis results, including message, severity, range, and optional metadata like code descriptions or related information. It provides functions to construct diagnostics and serialize them to and from JSON. Concrete use cases include reporting syntax errors, type mismatches, or linting issues in a language server.",
      "description_length": 385,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceDocumentDiagnosticReport",
      "library": "linol-eio",
      "description": "This module defines a variant type for representing either full or unchanged document diagnostic reports in a workspace. It provides serialization and deserialization functions to and from Yojson for these diagnostic report types. Concrete use cases include handling diagnostic data sent from a language server to a client, specifically when reporting changes or lack thereof in document diagnostics.",
      "description_length": 400,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceEditClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for describing client capabilities related to workspace edits in a language server protocol implementation. It includes types for optional features like change annotations, document changes, failure handling, and resource operations, along with functions to construct and serialize these capabilities. Concrete use cases include configuring and exchanging client-specific workspace edit settings during LSP initialization.",
      "description_length": 472,
      "index": 322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentHighlightClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to document highlighting in a language server. It includes functions to create and serialize the structure, primarily working with a boolean option for dynamic registration. It is used to configure and exchange document highlight capabilities between a language server and its clients.",
      "description_length": 367,
      "index": 323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.LinkedEditingRanges",
      "library": "linol-eio",
      "description": "This module defines a data structure for managing linked editing ranges, each associated with an optional word pattern. It provides functions to construct instances, serialize to and from JSON, and includes direct access to the underlying range list and pattern. Concrete use cases include synchronizing edits across multiple locations in a text editor or implementing refactoring tools that require coordinated changes.",
      "description_length": 420,
      "index": 324,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.NotebookDocument",
      "library": "linol-eio",
      "description": "This module defines a notebook document structure with operations to create and serialize documents. It works with lists of notebook cells, JSON metadata, URIs, and version numbers. Use it to construct or parse notebook documents from JSON, such as when loading or saving Jupyter-like notebooks.",
      "description_length": 295,
      "index": 325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentFormattingParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in document formatting operations, including formatting options, text document identifiers, and optional work done tokens. It provides functions to construct instances and convert to and from JSON representations. Concrete use cases include handling formatting requests in a language server, where structured data is required for processing and communication with clients.",
      "description_length": 429,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineCompletionRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for inline completion features in a language server, specifically handling document selectors, identifier assignment, and progress tracking. It works with lists of text document filters, string identifiers, and boolean flags for work progress. Use cases include setting up inline completion capabilities for specific document types in an LSP-based editor integration.",
      "description_length": 409,
      "index": 327,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ProgressToken",
      "library": "linol-eio",
      "description": "This module defines a polymorphic type `t` that represents progress tokens as either integers or strings. It includes functions to convert values between this type and Yojson.Safe.t for JSON serialization and deserialization. It is used to handle progress tracking identifiers in JSON-based communication where tokens can be numeric or textual.",
      "description_length": 344,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ExecuteCommandClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to command execution, specifically supporting optional dynamic registration. It provides functions to create instances, convert to and from JSON using Yojson, and manage the `dynamicRegistration` field. Use this when handling language server protocol capabilities in JSON format, such as during client initialization or capability negotiation.",
      "description_length": 425,
      "index": 329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DeleteFileOptions",
      "library": "linol-eio",
      "description": "This module defines options for configuring file deletion behavior, including whether to ignore missing files and enable recursive deletion. It provides functions to construct these options and serialize or deserialize them using Yojson. Concrete use cases include safely deleting files or directories in a controlled manner, such as during cleanup operations or configuration-driven file management.",
      "description_length": 400,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InsertTextMode",
      "library": "linol-eio",
      "description": "This module defines two insertion modes for handling text in an editor: `AsIs`, which inserts text without modification, and `AdjustIndentation`, which automatically adjusts indentation based on context. It includes functions to convert these modes to and from JSON format using the Yojson library. This is useful when persisting or transmitting editor settings, such as user preferences for code formatting behavior.",
      "description_length": 417,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.RenameParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for holding parameters related to renaming operations in a text document. It includes functions to construct the structure, convert it to and from JSON format. It is used to handle rename requests in language server protocol interactions, specifically for tracking new names, positions, and associated document identifiers.",
      "description_length": 360,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Registration",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing registration entries with fields for an identifier, method name, and optional registration options in JSON format. It provides functions to construct registration instances, and to serialize and deserialize them using Yojson. Concrete use cases include managing protocol extensions or feature registrations in a language server implementation.",
      "description_length": 397,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.UniquenessLevel",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing levels of uniqueness in a project hierarchy, including document, project, group, scheme, and global levels. It provides functions to convert values of this type to and from JSON format using the Yojson library. This is used to serialize and deserialize uniqueness level configurations in a structured data processing context.",
      "description_length": 369,
      "index": 334,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentColorClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to document color features in a language server protocol implementation. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these capabilities using Yojson. A concrete use case is configuring and exchanging color-related client capabilities during the initialization phase of a language server.",
      "description_length": 442,
      "index": 335,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DocumentHighlightOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for document highlight options with a single field indicating whether work done progress is enabled. It provides functions to create instances, serialize to, and deserialize from JSON. It is used to configure document highlighting behavior in language server protocols.",
      "description_length": 306,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CallHierarchyIncomingCall",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing incoming calls in a call hierarchy, containing a source item and a list of ranges. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to model and serialize call relationships between code elements in language server protocol implementations.",
      "description_length": 331,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ShowMessageParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing messages with a text payload and a message type. It provides functions to construct instances, convert to and from JSON format. It is used to serialize and deserialize message parameters for communication in a language server protocol implementation.",
      "description_length": 304,
      "index": 338,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.TextDocumentSyncOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for text document synchronization in an editor or language server. It includes fields to specify change tracking, document open/close events, save behavior, and pre-save hooks. The module supports serialization to and from JSON for use in protocol exchanges like LSP (Language Server Protocol).",
      "description_length": 336,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DefinitionParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in a language server protocol request, specifically for handling document definitions. It includes fields for position, text document identifier, and optional tokens for partial results and work done, supporting precise navigation and tracking in code analysis. The module provides functions to construct these parameters and serialize or deserialize them using Yojson for communication in an LSP context.",
      "description_length": 462,
      "index": 340,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlineValueOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring inline value options, specifically supporting work done progress tracking. It provides functions to create instances, convert to and from JSON format. Useful for serializing and deserializing configuration settings in JSON-based communication.",
      "description_length": 296,
      "index": 341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.HoverRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for registering hover handlers in a language server. It includes a document selector to specify which documents trigger hovers and a flag to enable progress reporting. The module supports conversion to and from JSON for serialization, commonly used when setting up language server capabilities.",
      "description_length": 336,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeTextDocumentParams",
      "library": "linol-eio",
      "description": "This module handles text document change events in an LSP server, specifically tracking content modifications and document versions. It provides functions to construct change events, and serialize/deserialize them using Yojson. A typical use case involves processing `DidChangeTextDocument` notifications to update the server's internal document state.",
      "description_length": 352,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidOpenTextDocumentParams",
      "library": "linol-eio",
      "description": "This module handles the creation and JSON serialization of parameters for a text document open event. It works with the `TextDocumentItem` type to represent the document being opened. Concrete use cases include parsing incoming JSON requests and constructing valid document open payloads for LSP communication.",
      "description_length": 310,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.GlobPattern",
      "library": "linol-eio",
      "description": "This module defines a type `t` for representing glob patterns, including both simple string patterns and relative patterns with directory-based matching. It provides serialization and deserialization functions to and from Yojson for use in JSON-based communication, such as with language servers. Concrete use cases include parsing and transmitting file inclusion/exclusion rules in editor integrations or build systems.",
      "description_length": 420,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DidChangeWatchedFilesClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to file watching in a language server. It includes fields to indicate support for dynamic registration and relative patterns, with functions to construct the structure and convert it to and from JSON. It is used to configure how a language server monitors file changes during development.",
      "description_length": 370,
      "index": 346,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CallHierarchyOutgoingCall",
      "library": "linol-eio",
      "description": "This module defines a data structure representing outgoing calls in a call hierarchy, with functions to create instances and serialize/deserialize them using Yojson. It works with ranges and call hierarchy items from the LSP types module. It is used to model and transfer call relationships in language server protocol implementations.",
      "description_length": 335,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MarkupKind",
      "library": "linol-eio",
      "description": "This module defines a polymorphic variant type with two constructors, `PlainText` and `Markdown`, representing different markup formats. It includes functions to convert values between this type and Yojson.Safe.t for serialization and deserialization. This type is useful when handling configuration or data inputs that specify how text should be rendered or processed, such as choosing between plain text and Markdown formatting in an editor or viewer.",
      "description_length": 453,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SymbolTag",
      "library": "linol-eio",
      "description": "This module defines a single variant type `t` representing symbol tags, currently only `Deprecated`. It provides functions to convert values of type `t` to and from Yojson.Safe.t, enabling JSON serialization and deserialization. This is useful when reading or writing configuration or metadata that includes symbol status information, such as in linters or code analysis tools.",
      "description_length": 377,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentRangeFormattingParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in document range formatting operations, including formatting options, a text range, and a document identifier. It provides functions to construct instances and convert to and from JSON format. It is used to configure and serialize formatting requests for specific document regions in text editing tools.",
      "description_length": 361,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlineValueClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to inline value registration, specifically supporting optional dynamic registration. It provides functions to construct instances, convert to and from JSON format using Yojson, and manage configuration data for language server clients. Concrete use cases include configuring LSP clients to handle inline value features dynamically during code editing sessions.",
      "description_length": 442,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentFormattingRegistrationOptions",
      "library": "linol-eio",
      "description": "This module defines options for registering document formatting capabilities, including an optional list of document selectors (either text documents or notebook cell filters) and a flag for work done progress. It provides functions to construct these options, along with serialization and deserialization to and from JSON. This is used to configure formatting support in a language server, specifying which documents to apply formatting to and whether to track progress.",
      "description_length": 471,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.CodeLensParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling code lens parameters in the context of the LSP (Language Server Protocol). It includes fields for tracking partial results, identifying the text document, and managing work done tokens, all supporting asynchronous processing. The structure is used to serialize and deserialize JSON payloads for communication between a language server and a client.",
      "description_length": 398,
      "index": 353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.NotebookCellArrayChange",
      "library": "linol-eio",
      "description": "Represents changes to a notebook cell array with optional replacement cells, number of cells to delete, and starting index. Serializes and deserializes change data using Yojson for storage or transmission. Used to apply or revert edits in a notebook document efficiently.",
      "description_length": 271,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressCreateParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing parameters for creating a work done progress token, which can be either an integer or a string. It provides functions to construct a value of this type, and to convert it to and from JSON using the Yojson library. This is useful when handling progress reporting in language server protocol implementations where structured data needs to be serialized or deserialized.",
      "description_length": 411,
      "index": 355,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.ShowDocumentParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used to show a document in an editor, including options like focus behavior, selection range, and external display. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. Concrete use cases include passing document display instructions between an editor and a language server.",
      "description_length": 365,
      "index": 356,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for tracking work progress, with a single field indicating whether work progress is enabled. It provides functions to create instances, and to convert to and from JSON format using Yojson. This is useful for serializing progress settings in distributed or persistent systems.",
      "description_length": 316,
      "index": 357,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.SemanticTokenTypes",
      "library": "linol-eio",
      "description": "This module defines a variant type representing semantic token categories for code analysis, such as `Function`, `Variable`, and `Comment`. It includes functions to serialize and deserialize these tokens to and from JSON using Yojson. It is used to label and process syntactic elements in source code for tools like linters or language servers.",
      "description_length": 344,
      "index": 358,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.InlayHintKind",
      "library": "linol-eio",
      "description": "This module defines a type `t` with two variants, `Type` and `Parameter`, representing kinds of inlay hints. It provides functions `t_of_yojson` and `yojson_of_t` for converting between the type and Yojson.Safe.t values. This module is used to serialize and deserialize inlay hint kind data when working with JSON-based protocols or storage.",
      "description_length": 341,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.AnnotatedTextEdit",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing text edits with annotations, including the annotation ID, new text, and a range specifying where the edit applies. It provides functions to construct these edit records and serialize them to and from JSON format. This structure is useful for implementing features like code refactoring or collaborative editing where changes must be associated with specific annotations or user inputs.",
      "description_length": 439,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WindowClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines client capabilities related to window operations in an LSP (Language Server Protocol) context. It includes optional support for showing documents, handling message requests, and tracking work progress. These capabilities are used to configure and communicate UI-related features between a language server and client.",
      "description_length": 336,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DefinitionOptions",
      "library": "linol-eio",
      "description": "This module defines a configuration type for handling work progress options, specifically supporting optional boolean tracking of work completion. It provides functions to create instances, convert to and from JSON format using Yojson. Useful for serializing and deserializing progress state in asynchronous or task-based workflows.",
      "description_length": 332,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentOnTypeFormattingOptions",
      "library": "linol-eio",
      "description": "This module defines formatting options for document-on-type operations, specifically capturing the first trigger character and optional subsequent trigger characters. It provides functions to create these options and convert them to and from JSON format. Use this module to configure auto-formatting behavior in text editors based on specific input characters.",
      "description_length": 360,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Moniker",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing monikers with fields for identifier, kind, scheme, and uniqueness level. It provides functions to construct monikers, and to serialize and deserialize them using Yojson. It is used to handle symbolic identifiers in the context of language server protocol operations.",
      "description_length": 310,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.MarkdownClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for specifying Markdown client capabilities, including allowed HTML tags, the parser name, and an optional version. It provides functions to construct instances, serialize to and from JSON using Yojson. It is used to configure Markdown rendering behavior in clients that require strict control over parsing and output.",
      "description_length": 355,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.ParameterInformation",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing parameter information, including a label and optional documentation. It supports serialization and deserialization to and from JSON using Yojson, enabling integration with LSP-based tools. It is used to convey parameter details such as function argument names and descriptions in language server protocol implementations.",
      "description_length": 375,
      "index": 366,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.SelectionRangeClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing client capabilities related to selection range features, specifically supporting dynamic registration. It includes functions to create instances, serialize to JSON, and deserialize from JSON. This is used to configure and communicate client support for selection range operations in language server protocols.",
      "description_length": 363,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.Definition",
      "library": "linol-eio",
      "description": "This module defines a polymorphic type `t` that represents either a single location or a list of locations, using the `Location` variant or the `List` variant respectively. It provides functions to convert values of this type to and from JSON format using the `t_of_yojson` and `yojson_of_t` functions. This is useful for handling definition responses in a language server protocol implementation where definitions can be singular or multiple.",
      "description_length": 443,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeOptions",
      "library": "linol-eio",
      "description": "This module defines a data structure for configuring folding range options in JSON format. It includes functions to create a configuration with an optional work progress flag and to serialize or deserialize the configuration using Yojson. A concrete use case is handling editor requests for code folding ranges with progress reporting in an LSP server.",
      "description_length": 352,
      "index": 369,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.PublishDiagnosticsClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and serialization functions for client capabilities related to diagnostic publishing in a language server protocol. It includes support flags for features like code descriptions, related information, and diagnostic tags, along with optional versioning. The module is used to configure how diagnostic data is exchanged between a language server and client, specifically handling capabilities negotiation during initialization.",
      "description_length": 461,
      "index": 370,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.PartialResultParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for handling optional partial result tokens, which can be either integers or strings. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for managing incremental results in APIs that support pagination or streaming responses.",
      "description_length": 307,
      "index": 371,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing workspace client capabilities related to folding range refresh support. It includes functions to create instances with an optional refresh support flag, and to serialize and deserialize the structure using Yojson. It is used to configure and communicate client capabilities for handling code folding ranges in a language server context.",
      "description_length": 386,
      "index": 372,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.NotebookDocumentChangeEvent",
      "library": "linol-eio",
      "description": "This module represents changes to notebook documents, including text content updates, cell structure modifications, and metadata changes. It works with versioned text documents, notebook cells, and JSON metadata. It is used to track and serialize notebook document edits for language server protocol interactions.",
      "description_length": 313,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.DocumentDiagnosticParams",
      "library": "linol-eio",
      "description": "This module defines a type `t` representing parameters for document diagnostic requests, including optional fields like `identifier`, `partialResultToken`, `previousResultId`, and `workDoneToken`, along with a required `textDocument` field. It provides functions to construct instances of this type, convert to and from JSON using `Yojson.Safe`. It is used to pass diagnostic request data in an LSP (Language Server Protocol) context, specifically for handling document diagnostics with support for incremental results and work tokens.",
      "description_length": 535,
      "index": 374,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.FileOperationPatternOptions",
      "library": "linol-eio",
      "description": "This module defines configuration options for file operation patterns, specifically supporting case-insensitive matching through the `ignoreCase` field. It provides functions to create and serialize these options, enabling consistent handling of pattern-based file operations. Use cases include configuring file search or filtering logic where case sensitivity is optional.",
      "description_length": 373,
      "index": 375,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.DiagnosticWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure representing client capabilities related to diagnostic workspace features, specifically supporting an optional refresh flag. It provides functions to construct instances, serialize to JSON, and deserialize from JSON using Yojson. This is used to communicate client support for refreshing diagnostics in a language server protocol implementation.",
      "description_length": 382,
      "index": 376,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_eio.CallHierarchyIncomingCallsParams",
      "library": "linol-eio",
      "description": "This module defines a data structure for parameters used in a call hierarchy incoming calls request. It includes fields for a call hierarchy item, a partial result token, and a work done token, supporting asynchronous processing and result tracking. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 356,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.InlayHintWorkspaceClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing workspace client capabilities related to inlay hints, specifically supporting an optional refresh capability. It provides functions to construct the structure, convert it to and from JSON format using Yojson. This is used to configure and communicate inlay hint capabilities in a language server workspace environment.",
      "description_length": 372,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FileOperationFilter",
      "library": "linol-eio",
      "description": "This module defines a filter for file operations based on a pattern and an optional URI scheme. It provides functions to create a filter, and to serialize/deserialize it using Yojson. It is used to match and process file operation requests in language server protocol implementations.",
      "description_length": 284,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.FoldingRangeClientCapabilities",
      "library": "linol-eio",
      "description": "This module defines data structures and functions for configuring folding range capabilities in a language server. It includes types for specifying supported folding range kinds, collapsed text behavior, dynamic registration, line folding constraints, and range limits. These capabilities are used to communicate client folding preferences to a language server using the LSP protocol.",
      "description_length": 384,
      "index": 380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkspaceFoldersServerCapabilities",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing server capabilities related to workspace folder management in a language server protocol implementation. It includes fields for indicating whether workspace folder changes are supported and how change notifications are handled, either as boolean flags or custom string identifiers. The module provides functions to construct these capability records, and to serialize and deserialize them using Yojson for use in LSP communication.",
      "description_length": 485,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio.WorkDoneProgressBegin",
      "library": "linol-eio",
      "description": "This module defines a data structure for representing the beginning of a work done progress notification, including fields like title, message, percentage, and cancellable status. It provides functions to create instances, and serialize/deserialize them using Yojson. This is used to report the start of long-running operations in a structured format, such as in language server protocol implementations.",
      "description_length": 404,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_eio",
      "library": "linol-eio",
      "description": "This module provides bidirectional JSON serialization for LSP-specific data structures like document URIs, client capabilities, diagnostic parameters, and notebook document sync options, using `Yojson.Safe.t` for typed data exchange. It supports operations for modeling text/document changes, workspace edits, semantic tokens, and capability negotiations, while also implementing an effect-based I/O monad for handling low-level communication over channels. The functionality enables building language servers that perform code navigation, diagnostics, autocompletion, and document synchronization with editors via JSON-RPC 2.0 over standard I/O streams.",
      "description_length": 654,
      "index": 383,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 387,
    "meaningful_modules": 384,
    "filtered_empty_modules": 3,
    "retention_rate": 0.9922480620155039
  },
  "statistics": {
    "max_description_length": 654,
    "min_description_length": 257,
    "avg_description_length": 376.4791666666667,
    "embedding_file_size_mb": 5.563516616821289
  }
}