{
  "package": "yurt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 21,
  "creation_timestamp": "2025-06-18T16:36:31.699055",
  "modules": [
    {
      "module_path": "Yurt.Server.IO",
      "description": "Provides monadic operations for asynchronous I/O, including binding computations, lifting values, and handling errors. Works with input and output channels, connection flows, and exception-based error handling. Enables reading from and writing to streams, flushing buffers, and safely catching exceptions in asynchronous workflows.",
      "description_length": 331,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_html.Tag",
      "description": "Converts tag values to their corresponding HTML string representations. Operates on a variant type representing HTML elements and self-closing tags. Used to generate valid HTML markup from structured data.",
      "description_length": 205,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_request_ctx.Body",
      "description": "This module handles serialization and conversion of a custom type to and from S-expressions, string lists, forms, and HTTP bodies, with support for asynchronous streaming and transformation using Lwt. It provides low-level HTTP body operations like draining content and inspecting transfer encoding, tailored for use in Cohttp_lwt-based web applications. Specific use cases include processing HTTP request/response payloads and managing data formats in asynchronous network workflows.",
      "description_length": 484,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_request_ctx.Query",
      "description": "Provides functions to extract and convert query string parameters from a request into a hashtable, JSON objects, or specific value types like strings, integers, and floats. Works with request objects and associative data structures such as hashtables and JSON values. Used to parse and access query parameters in web applications, enabling direct retrieval of typed values from URL queries.",
      "description_length": 390,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Route",
      "description": "Converts routes to strings and regular expressions, and constructs routes from strings. Extracts typed parameters (strings, integers, floats) from route matches and converts them to JSON. Used to dynamically generate and parse URL segments with type-safe parameter extraction.",
      "description_length": 276,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Body",
      "description": "Converts request bodies between string, stream, and JSON formats, and allows modification, length retrieval, and content inspection. Operates on HTTP body data represented as a Cohttp_lwt.Body.t type. Used to process incoming HTTP payloads, validate content size, and transform data for further processing.",
      "description_length": 306,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt.Query",
      "description": "Parses and extracts query string parameters from HTTP requests, supporting string, integer, float, and JSON values. Operates on request objects and returns structured data using hash tables and JSON representations. Converts query strings to JSON format for easy integration with API responses.",
      "description_length": 294,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Server",
      "description": "manages asynchronous I/O through monadic operations, enabling safe error handling, stream manipulation, and connection flow control. It supports reading from and writing to channels, flushing buffers, and lifting values into asynchronous contexts. Key data types include input and output channels, error handlers, and asynchronous computations. Examples include handling HTTP requests, managing socket connections, and processing data streams with guaranteed cleanup.",
      "description_length": 467,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt.Client",
      "description": "Sends HTTP requests with support for GET, POST, and custom methods, handling raw bodies, form-encoded data, and JSON responses. Operates on context, headers, body content, and URL strings, returning responses paired with parsed JSON or raw strings. Used for interacting with REST APIs, submitting forms, and fetching structured data asynchronously.",
      "description_length": 348,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt.Form",
      "description": "Parses HTTP request bodies into key-value pairs, JSON, or multipart data structures. Processes URL-encoded data, extracts attributes from multipart forms, and identifies multipart requests. Used to handle file uploads and form submissions in web applications.",
      "description_length": 259,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Util",
      "description": "Extracts values from options, generating a runtime error or using a default as needed. Generates UUID version 4 strings for unique identifiers. Validates whether a path is safe relative to a given prefix, preventing directory traversal attacks.",
      "description_length": 244,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_header.Cookie",
      "description": "Provides functions to construct, serialize, and extract cookies from HTTP headers, along with accessors to inspect attributes like name, value, expiration, domain, path, secure, and http_only. Works with Cohttp's cookie type and S-expression serialization. Used to parse incoming cookies from headers and generate HTTP response headers containing cookies.",
      "description_length": 355,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "yurt",
      "description": "Handles HTTP request routing using regex patterns and processes multipart form data. Accepts raw HTTP requests and extracts structured data from form submissions. Enables dynamic web endpoints that respond to specific URL patterns with parsed input.",
      "description_length": 249,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_form",
      "description": "Parses URL-encoded forms and multipart data from HTTP requests, extracting attributes and handling file uploads. Works with Cohttp_lwt body streams, regular expressions for parsing, and custom types for multipart and form data. Used to process form submissions, extract key-value pairs, and identify file fields in HTTP requests.",
      "description_length": 329,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_route",
      "description": "Provides functions to convert routes to regular expressions, match strings against routes, and extract parameters. Works with route structures that include path segments, variables, and type-specific matches. Enables parsing of URL-like strings into structured route components and extracting typed parameters like integers, floats, or strings.",
      "description_length": 344,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_html",
      "description": "Encodes structured HTML elements and self-closing tags into properly formatted strings. Processes a variant type that represents tags and their attributes, producing valid HTML output. Supports operations like escaping values and rendering nested elements. For example, it can transform a `<div>` with class and child nodes into a complete HTML snippet.",
      "description_length": 353,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_client",
      "description": "Provides HTTP GET, POST, and JSON-aware request methods with customizable context and headers, supporting form data and raw bodies. Operates on URLs, HTTP methods, and JSON-compatible data structures. Used for interacting with REST APIs, submitting form data, and handling JSON responses in asynchronous network calls.",
      "description_length": 318,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_request_ctx",
      "description": "Handles serialization, conversion, and extraction of data formats for web requests, including S-expressions, string lists, forms, HTTP bodies, and query parameters. Supports asynchronous operations with Lwt, enabling efficient processing of request payloads and query strings. Provides low-level HTTP body manipulation and typed access to URL parameters. Can parse and transform request data into structured formats like hashtables and JSON, suitable for use in Cohttp_lwt-based web services.",
      "description_length": 492,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt",
      "description": "Handles HTTP route parsing, body transformation, query extraction, and request sending, with support for type-safe parameter handling, asynchronous I/O, and data validation. Key data types include routes, HTTP bodies, query parameters, and channels, with operations for conversion, extraction, and manipulation. It enables dynamic URL generation, JSON serialization of route and query parameters, and safe handling of file uploads and form data. Examples include parsing a route like \"/users/123\" into a typed record, converting a JSON body to a stream, and validating a query string for API input.",
      "description_length": 598,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_header",
      "description": "Encapsulates HTTP cookie handling by enabling construction, serialization, and extraction of cookies from headers, with support for attributes such as name, value, and secure flags. Offers operations to parse incoming cookies and generate response headers containing serialized cookie data. Utilizes Cohttp's cookie type and S-expression formats for interoperability. Examples include extracting session cookies from a request and setting a secure, timed cookie in a response.",
      "description_length": 476,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_util",
      "description": "Provides functions to handle option types by unwrapping or providing defaults, generate UUIDs, and validate paths to prevent directory traversal attacks. Operates on options, strings, and regular expressions. Used to safely process user-provided paths and ensure unique identifier generation.",
      "description_length": 292,
      "index": 20,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 29,
    "meaningful_modules": 21,
    "filtered_empty_modules": 8,
    "retention_rate": 0.7241379310344828
  },
  "statistics": {
    "max_description_length": 598,
    "min_description_length": 205,
    "avg_description_length": 352.85714285714283,
    "embedding_file_size_mb": 0.0767507553100586
  }
}