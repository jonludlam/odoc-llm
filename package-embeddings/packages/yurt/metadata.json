{
  "package": "yurt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 20,
  "creation_timestamp": "2025-07-15T23:10:00.428118",
  "modules": [
    {
      "module_path": "Yurt.Server.IO",
      "library": "yurt",
      "description": "This module implements asynchronous I/O operations for handling network connections, including reading from input channels, writing to output channels, and managing connection flows. It provides functions for line-based and fixed-length data reading, output flushing, and error handling with result types. Concrete use cases include processing client requests over TCP connections and managing bidirectional communication streams in a server.",
      "description_length": 442,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt.Util",
      "library": "yurt",
      "description": "This module provides functions for handling optional values, generating UUIDs, and validating file paths. It includes operations to extract values from options, generate version 4 UUIDs, and check if a path is safe relative to an optional prefix. These functions are useful for configuration loading, path sanitization, and unique identifier generation.",
      "description_length": 353,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_html.Tag",
      "library": "yurt",
      "description": "This module defines a polymorphic variant type representing HTML tag names and provides a function to convert them to strings. It includes a list of self-closing tags used for rendering HTML without closing tags. Directly used in generating and manipulating HTML structures programmatically.",
      "description_length": 291,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Server",
      "library": "yurt",
      "description": "This module configures and runs HTTP servers with TLS support, declarative routing, and response generation from JSON, HTML, files, or redirects. It handles server lifecycle management, process daemonization, and composable transformations, enabling secure endpoint setup and streaming responses. The child module provides low-level asynchronous I/O for network connections, supporting line-based and fixed-length data transfer, output flushing, and TCP request processing. Together, they allow building robust, secure web services that handle complex communication patterns while abstracting server setup and connection management.",
      "description_length": 632,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Query",
      "library": "yurt",
      "description": "This module parses query string parameters from HTTP requests and provides typed access to individual parameters. It works with `Request.t` to extract values as strings, integers, floats, or JSON values. Use it to retrieve and convert query parameters directly from a request in a type-safe manner.",
      "description_length": 298,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_request_ctx.Query",
      "library": "yurt",
      "description": "This module handles query string parameters from HTTP requests, providing direct access to values by key and supporting conversion to common data types like strings, integers, floats, and JSON. It works with query strings that may have multiple values per key, storing them internally as a hash table mapping strings to lists of strings. Concrete use cases include extracting filter criteria from API requests, parsing pagination parameters, and retrieving user input from web forms.",
      "description_length": 483,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Route",
      "library": "yurt",
      "description": "This module provides functions to construct and manipulate routes with typed parameters, converting them to strings or regular expressions for URL matching. It supports data types like strings, integers, floats, and nested routes, along with extracting typed values from matched routes. Concrete use cases include building type-safe URL routers and extracting structured data from HTTP request paths.",
      "description_length": 400,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_request_ctx.Body",
      "library": "yurt",
      "description": "This module offers operations to manage HTTP message bodies through a polymorphic type with variants for empty, streamed, and string-based content, supporting transformations between these forms, streaming-aware manipulations, and format conversions. It integrates with `Cohttp_lwt` for transfer encoding detection and body draining, while enabling serialization to S-expressions, JSON via `Ezjsonm`, and form data parsing. Key applications include efficient processing of large payloads through streaming, bidirectional conversion between textual and structured formats, and handling HTTP message bodies in web frameworks or clients without full in-memory buffering.",
      "description_length": 667,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt.Form",
      "library": "yurt",
      "description": "This module handles parsing HTTP form data from request bodies, supporting both URL-encoded and multipart formats. It provides functions to extract form fields as hashtables, lists, or JSON, and processes multipart streams with attributes. Use it to retrieve user input from HTML forms or file uploads in web applications.",
      "description_length": 322,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_header.Cookie",
      "library": "yurt",
      "description": "This module defines a type `t` representing HTTP cookie headers with fields for cookie value, expiration, domain, path, and flags like secure and HTTP-only. It provides functions to construct, serialize, and extract cookies from HTTP headers, along with accessors for each field. Concrete use cases include managing session cookies, parsing incoming cookie headers from clients, and generating `Set-Cookie` headers for responses.",
      "description_length": 429,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Body",
      "library": "yurt",
      "description": "This module handles request body manipulation, providing direct conversions between bodies and strings, streams, or JSON values. It supports operations like mapping over content, checking length or emptiness, and extracting transfer encoding. Use it to process or transform HTTP request payloads efficiently, such as parsing incoming JSON data or streaming large body content.",
      "description_length": 376,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Client",
      "library": "yurt",
      "description": "This module sends HTTP requests and handles responses with JSON or raw string data. It supports GET, POST, and custom HTTP methods, including form-encoded and JSON payloads. Use it to interact with REST APIs, submit forms, or fetch remote resources with optional custom headers and network contexts.",
      "description_length": 299,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_client",
      "library": "yurt",
      "description": "This module implements HTTP client operations for sending GET, POST, and form-based requests, returning responses paired with body content. It handles raw string bodies and JSON-encoded data using `Cohttp` and `Ezjsonm` types, with optional custom headers and contexts. Concrete use cases include querying APIs, submitting forms, and interacting with JSON-based web services.",
      "description_length": 375,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_util",
      "library": "yurt",
      "description": "This module includes functions for safely unwrapping optional values, generating UUIDs, and validating file paths. It works with option types, strings, and regular expressions. Use cases include handling optional configuration values, generating unique identifiers, and preventing path traversal vulnerabilities in file operations.",
      "description_length": 331,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_header",
      "library": "yurt",
      "description": "This module manages cookie handling for HTTP requests, providing functions to set cookies in headers, extract all cookies, or find a specific cookie by name. It works with request and header types from Yurt_request_ctx and uses the Cookie submodule's `t` type to represent individual cookies with fields like value, expiration, domain, path, and security flags. The Cookie submodule includes utilities to construct, serialize, and parse cookies, enabling tasks like session management and state tracking across requests. Together, the module and its submodule support both reading cookies from incoming requests and generating `Set-Cookie` headers for responses.",
      "description_length": 662,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt",
      "library": "yurt",
      "description": "This module coordinates HTTP routing, request parsing, and client-server communication, enabling the creation of type-safe web servers with custom endpoints. It supports defining routes with typed parameters, extracting query and form data, and processing request bodies in formats like JSON or multipart, while submodules handle low-level I/O, TLS configuration, and response generation. You can build secure services that parse URL parameters as integers, handle file uploads, stream responses, or make outgoing HTTP requests with custom headers. Additional utilities for UUID generation, path validation, and option handling complement server logic for configuration and data processing.",
      "description_length": 690,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_html",
      "library": "yurt",
      "description": "This module represents HTML structures as typed nodes, enabling creation of elements like headings, forms, and semantic tags through attribute lists and nested content. It supports dynamic content with placeholders, fragment imports, and template serialization, using hashtables for template management and utilities for rendering trees to strings. The polymorphic variant type for tag names allows safe, programmatic generation and manipulation of HTML, including handling self-closing tags. Examples include building type-safe documents, implementing templating systems, and modifying DOM-like structures with precise attribute and content control.",
      "description_length": 650,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_request_ctx",
      "library": "yurt",
      "description": "Manages HTTP request contexts with typed status codes, enabling precise handling of web requests through structured access to query parameters and message bodies. The query module extracts and converts query string values to typed data, supporting multi-value keys for tasks like filtering and pagination, while the body module provides polymorphic representations for empty, streamed, or string-based content, allowing format conversions and streaming-aware processing. This structure supports efficient handling of large payloads, parsing form data, and transforming request content between structured and textual formats like JSON or S-expressions. Combined, they streamline request processing in Cohttp-based servers by unifying typed context management with flexible data extraction and transformation capabilities.",
      "description_length": 820,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_form",
      "library": "yurt",
      "description": "This module parses HTTP form data from request bodies, supporting both URL-encoded and multipart formats. It provides functions to extract form fields as hashtables, lists, or JSON, and handles file uploads by detecting filename attributes in multipart data. Use cases include processing user input from HTML forms, handling file uploads in web applications, and converting form data into structured formats for further processing.",
      "description_length": 431,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_route",
      "library": "yurt",
      "description": "This module processes and matches URL routes with typed parameters using a custom algebraic data type. It converts route definitions to regular expressions, extracts variables, and parses parameters from URLs into typed values like strings, integers, or floats. Concrete use cases include routing HTTP requests in a web application based on path components and capturing dynamic segments with specific type constraints.",
      "description_length": 419,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 21,
    "meaningful_modules": 20,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9523809523809523
  },
  "statistics": {
    "max_description_length": 820,
    "min_description_length": 291,
    "avg_description_length": 468.5,
    "embedding_file_size_mb": 0.07307243347167969
  }
}