{
  "package": "yurt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 21,
  "creation_timestamp": "2025-08-15T12:10:47.051417",
  "modules": [
    {
      "module_path": "Yurt.Server.IO",
      "library": "yurt",
      "description": "This module implements asynchronous I/O operations for handling network connections using Lwt, including reading from and writing to input/output channels. It provides functions like `read_line`, `read`, `write`, and `flush`, which interact with types such as `ic`, `oc`, and `conn` for network communication. It is used to manage low-level data transfer in a server, such as receiving client input or sending responses over TCP connections.",
      "description_length": 441,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt.Body",
      "library": "yurt",
      "description": "This module provides functions to convert request bodies to and from strings, JSON, and streams, allowing modification, length inspection, and content draining. It works with body types from Cohttp_lwt, string streams, and JSON values via Ezjsonm. Concrete use cases include parsing incoming request data into JSON for processing, streaming large payloads, and modifying or measuring body content before sending a response.",
      "description_length": 423,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Util",
      "library": "yurt",
      "description": "This module provides functions for handling optional values, generating UUIDs, and validating file paths. It includes utilities to safely extract values from options, generate version 4 UUIDs, and check if a path is safe relative to an optional prefix. These operations are useful when processing user input, managing file systems, or handling configuration data.",
      "description_length": 363,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_html.Tag",
      "library": "yurt",
      "description": "This module defines a polymorphic variant type representing HTML tag names and provides a function to convert them to strings. It includes a list of self-closing tags used for rendering HTML without closing tags. The module is used to model and manipulate HTML structure in a type-safe way, ensuring valid tag handling during document generation.",
      "description_length": 346,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_request_ctx.Query",
      "library": "yurt",
      "description": "This module handles query string parameters from HTTP requests, providing direct access to values by key and supporting conversion to common data types like strings, integers, floats, and JSON. It works with query data structured as a hash table mapping string keys to lists of string values, enabling precise extraction and type-safe decoding. Concrete use cases include parsing filter criteria, pagination parameters, and configuration flags from URLs.",
      "description_length": 454,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Form",
      "library": "yurt",
      "description": "This module handles parsing HTTP form data from request bodies, supporting both URL-encoded and multipart formats. It provides functions to extract form fields as hashtables, lists, or JSON, and processes multipart streams with attributes. Use it to retrieve user input from HTML forms or file uploads in web applications.",
      "description_length": 322,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_header.Cookie",
      "library": "yurt",
      "description": "This module defines a structured representation of HTTP cookies, including fields for name, value, expiration, domain, path, and security flags. It provides functions to construct, serialize, and extract cookies from HTTP headers, as well as access individual components like the cookie value or expiration time. Concrete use cases include managing session cookies with specific domains and paths, enforcing secure transmission, and parsing cookies from incoming HTTP requests.",
      "description_length": 477,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Server",
      "library": "yurt",
      "description": "The module facilitates building HTTP servers using Lwt for asynchronous I/O and Cohttp for request handling, offering operations to define route handlers, generate responses (JSON, HTML, files, redirects), and configure TLS, logging, and static file endpoints. It manages server lifecycle tasks like asynchronous startup and daemonization, working with server instances and route definitions to support dynamic content delivery, API hosting, and file-serving workflows. Pipeline operators enable fluent configuration through chained transformations and side-effect application during server setup.",
      "description_length": 597,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt.Query",
      "library": "yurt",
      "description": "This module parses HTTP request query strings into structured data, supporting extraction of values as strings, integers, floats, or JSON. It works with query strings by converting them into a hash table mapping keys to lists of values, and provides direct access to individual parameters in a type-safe manner. Use it to handle query parameters in web handlers, such as filtering or sorting data based on user input.",
      "description_length": 417,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt.Route",
      "library": "yurt",
      "description": "This module provides functions to construct and manipulate routes with typed parameters, converting them to strings or regular expressions for URL matching. It works with route values that can represent strings, integers, floats, paths, or nested routes, and handles parameter extraction from matched routes. Concrete use cases include building dynamic URL patterns for web applications, extracting typed parameters from HTTP requests, and generating URLs from structured data.",
      "description_length": 477,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt.Client",
      "library": "yurt",
      "description": "This module sends HTTP requests and handles responses, supporting GET, POST, and custom methods with optional headers, bodies, and JSON or form-encoded data. It works with strings for URLs, headers, and raw responses, and with JSON values for structured data input and output. Use it to interact with web APIs, submit forms, or retrieve and parse JSON resources from remote services.",
      "description_length": 383,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_request_ctx.Body",
      "library": "yurt",
      "description": "The module provides operations to convert between various body representations (like JSON, form data, and raw strings), manipulate content through streaming or serialization, and interface with HTTP body handling. It works with a polymorphic type encapsulating empty, streamed, or buffered content forms, alongside JSON and form data structures. These capabilities support use cases such as parsing HTTP request/response bodies, handling multipart form submissions, and efficiently streaming large payloads.",
      "description_length": 507,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_util",
      "library": "yurt",
      "description": "This module includes functions for safely unwrapping optional values, generating UUIDs, and validating file paths. It works with option types, strings, and regular expressions. Use cases include handling optional configuration values, generating unique identifiers, and preventing path traversal vulnerabilities in file operations.",
      "description_length": 331,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_html",
      "library": "yurt",
      "description": "The module enables constructing and manipulating HTML elements through a type `t` representing nodes with tags, attributes, content, and children, ensuring type-safe structure via the `Tag` module. It supports building semantic tags, forms, lists, and media elements with functions that handle attributes as string pairs, manage templates using hashtables, and convert HTML components to strings or load them from files. Use cases include dynamic HTML generation for web interfaces, template-driven content assembly, and static site generation where structured, valid HTML trees are required.",
      "description_length": 592,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_request_ctx",
      "library": "yurt",
      "description": "This module handles HTTP request context operations, including parsing and manipulating request bodies and query parameters. It supports converting between JSON, form data, and raw string body representations, and provides typed access to URL query values. Use it for processing HTTP payloads, handling form submissions, and extracting structured parameters from URLs.",
      "description_length": 368,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_route",
      "library": "yurt",
      "description": "This module provides functions to parse, match, and extract parameters from URL-like routes using a custom algebraic data type. It supports operations to convert routes to regular expressions, check string matches, and retrieve typed parameters like integers, floats, or strings from matched routes. Concrete use cases include routing in web applications, extracting dynamic segments from URLs, and serializing routes to JSON for API definitions.",
      "description_length": 446,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_header",
      "library": "yurt",
      "description": "This module handles HTTP cookie management through structured types and operations. It provides functions to create, serialize, and extract cookies, with direct access to fields like name, value, domain, and security flags. Use cases include setting session cookies with specific attributes, parsing incoming cookies from HTTP requests, and retrieving cookies by name for validation or processing.",
      "description_length": 397,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_server",
      "library": "yurt",
      "description": "This module provides HTTP server functionality with operations for routing requests based on HTTP methods, generating responses in formats like JSON, HTML, and binary files, and managing server lifecycle tasks like startup and daemonization. It works with types such as `Cohttp.Request.t`, `Cohttp.Response.t`, `Uri.t`, and `Ezjsonm.value`, supporting use cases like RESTful API endpoints, static file hosting, and TLS-secured server configurations. Key patterns include declarative route registration, response composition via chaining, and middleware-style request handling with logging or streaming capabilities.",
      "description_length": 615,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt",
      "library": "yurt",
      "description": "This module provides structured handling of HTTP routes, request bodies, query parameters, and forms, along with utilities for server configuration, client requests, and data validation. It supports typed route parameters, JSON and stream-based body processing, query parsing, and form data extraction, working with Cohttp_lwt and Ezjsonm types. Concrete use cases include building type-safe web APIs, handling file uploads, parsing user input, and constructing dynamic URL routes for server endpoints.",
      "description_length": 502,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yurt_form",
      "library": "yurt",
      "description": "This module parses HTTP form data from request bodies, supporting both URL-encoded and multipart formats. It extracts form fields into structured representations like hashtables, JSON, or custom multipart records, with utilities to inspect attributes and detect file uploads. Concrete use cases include handling user input from HTML forms, processing file uploads, and converting form data into JSON for API responses.",
      "description_length": 418,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yurt_client",
      "library": "yurt",
      "description": "This module implements HTTP client operations for sending GET, POST, and form-based requests, returning responses paired with body content. It handles raw string bodies and JSON payloads using `Cohttp` and `Ezjsonm` types, with support for custom headers and contexts. Concrete use cases include querying APIs, submitting forms, and interacting with web services using standard HTTP methods.",
      "description_length": 391,
      "index": 20,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 21,
    "meaningful_modules": 21,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 615,
    "min_description_length": 322,
    "avg_description_length": 441.2857142857143,
    "embedding_file_size_mb": 0.30469608306884766
  }
}