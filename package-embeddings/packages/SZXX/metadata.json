{
  "package": "SZXX",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-06-18T16:34:02.113425",
  "modules": [
    {
      "module_path": "SZXX.Xml.SAX.Expert.Stream.Hash_state",
      "description": "Provides operations to convert hash states to S-expressions, compare them for ordering, and check equality. Works with the `Base.Hash.state` type, representing cryptographic hash states. Used to serialize hash values for debugging and to enforce consistent comparisons in ordered data structures.",
      "description_length": 296,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "SZXX.Xml.SAX.Expert.To_DOM",
      "description": "Assembles SAX node events into a complete XML document using a stateful folding process, handling element nesting and self-closing rules based on a strictness flag. It operates on a `state` type that tracks current element context and document structure. The module supports parsing and validation of XML streams, particularly useful for converting event-based XML processing into a structured document model.",
      "description_length": 409,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xml.SAX.Expert.Stream",
      "description": "Assembles SAX node events into a shallow DOM while streaming specific child elements based on a path. Supports operations on hash states, including conversion to S-expressions, ordering, and equality checks. Enables serialization of hash values for debugging and consistent comparisons in ordered structures. Can be used to inspect hash contents or ensure deterministic ordering in data processing pipelines.",
      "description_length": 408,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xml.SAX.Expert",
      "description": "Encapsulates XML parsing and transformation by combining event-based processing with structured document assembly and hash-based data manipulation. It manages a `state` type for tracking element context and supports both deep document construction and shallow DOM extraction based on specified paths. Operations include hash conversion, ordering, and equality checks, enabling deterministic data handling and debugging. Users can build full XML trees or extract specific elements while maintaining control over parsing behavior and data representation.",
      "description_length": 552,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xlsx.Expert.SST",
      "description": "Extracts and resolves shared string data from XLSX documents using specific file operations and XML parsing. Works with string lists, file handles, and feed sources to efficiently retrieve and map string references. Enables precise access to individual entries in the shared strings table without processing the entire file.",
      "description_length": 324,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "SZXX.Xml.DOM",
      "description": "Provides functions to serialize and compare XML elements and attribute lists, extract specific child elements or their text, and navigate nested structures. Works with attribute lists as pairs of strings and elements represented as records. Used to process XML data by accessing attributes, checking for specific properties like `xml:space`, and traversing element hierarchies.",
      "description_length": 377,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xml.SAX",
      "description": "Processes XML documents using event-based parsing, maintaining a `state` type to track element context and enabling both full tree construction and selective element extraction. Supports hash-based operations for data manipulation, including conversion, ordering, and equality checks, ensuring consistent and debuggable results. Users can customize parsing behavior and extract specific document fragments efficiently. Examples include building structured XML representations or isolating key elements from large files.",
      "description_length": 519,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "SZXX.Zip.Action",
      "description": "Provides functions to process decompressed ZIP file data in chunks, collect entire contents as strings or bigstrings, and apply parsers incrementally. Works with strings, bigstrings, and Angstrom parsers to handle compressed data without full decompression. Supports efficient parsing of ZIP entries, early termination of processing, and safe handling of volatile bigstring data.",
      "description_length": 379,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "SZXX.Zip.Data",
      "description": "Provides functions to convert parser states and data structures to S-expressions, compare them using custom predicates, and check equality. Works with parser states containing unconsumed data and generic data types wrapped in a result. Enables serialization, comparison, and validation of parsing progress and parsed values.",
      "description_length": 324,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "SZXX.Xlsx.Expert",
      "description": "Processes and maps shared string data from XLSX files by parsing XML and managing file handles, allowing direct access to specific entries in the shared strings table. It handles string lists, file sources, and reference mappings to extract only necessary data. Operations include reading, resolving, and retrieving individual string entries. Example tasks include fetching a specific cell value from a large spreadsheet without loading the entire file.",
      "description_length": 453,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Zip",
      "description": "Processes ZIP file data in chunks using string or bigstring buffers, applying parsers incrementally without full decompression. Supports early termination and safe handling of volatile data, with operations on parser states and parsed results. Converts parser states to S-expressions for serialization and comparison, enabling validation of parsing progress and parsed values. Can extract and validate ZIP entry contents, track unconsumed data, and compare parsing outcomes with custom predicates.",
      "description_length": 497,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xml",
      "description": "manages XML document structure and content through serialization, navigation, and event-driven parsing. it handles elements as records with attributes as string pairs, enabling operations like attribute extraction, text retrieval, and hierarchy traversal. it supports stateful parsing, selective data extraction, and hash-based comparisons for efficient processing. users can build structured representations, isolate specific elements, or check for properties like `xml:space` within complex documents.",
      "description_length": 503,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "SZXX.Xlsx",
      "description": "Processes and maps shared string data from XLSX files by parsing XML and managing file handles, enabling direct access to specific entries in the shared strings table. It manages string lists, file sources, and reference mappings to extract only necessary data, with operations for reading, resolving, and retrieving individual string entries. Users can fetch specific cell values from large spreadsheets without loading the entire file. It supports efficient handling of string references and provides direct access to parsed string data.",
      "description_length": 539,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Feed",
      "description": "Creates a data source that yields string or bigstring chunks, supporting both sequential and random access. Works with Eio flows, file handles, and string generators, allowing controlled reading of data in fixed-size slices. Useful for processing large files or streaming data without loading everything into memory at once.",
      "description_length": 324,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX",
      "description": "combines chunked data processing, XML navigation, XLSX string mapping, and flexible data sourcing into a unified workflow. It handles ZIP parser states, XML element records, XLSX shared strings, and byte stream sources, enabling incremental parsing, structured data extraction, and memory-efficient operations. Users can validate ZIP entries, traverse XML hierarchies, retrieve specific XLSX cell values, and read large files in segments. Operations include state serialization, attribute extraction, reference resolution, and custom predicate-based comparisons.",
      "description_length": 562,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 562,
    "min_description_length": 296,
    "avg_description_length": 431.06666666666666,
    "embedding_file_size_mb": 0.05490303039550781
  }
}