{
  "package": "SZXX",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 14,
  "creation_timestamp": "2025-08-14T23:19:33.882962",
  "modules": [
    {
      "module_path": "SZXX.Xml.SAX.Expert.Stream.Hash_state",
      "library": "SZXX",
      "description": "This module provides hash state management for streaming XML parsing, enabling efficient tracking and comparison of parsing states during SAX event processing. It works with `SAX.node` events and hash state values to support custom folding logic over XML streams. Concrete use cases include incremental parsing of large XML files with selective DOM construction, where state consistency and efficient equality checks are required.",
      "description_length": 430,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xml.SAX.Expert.Stream",
      "library": "SZXX",
      "description": "Processes a stream of XML SAX events into a shallow DOM structure while filtering and extracting child elements matching a specified path. Uses a state type tracking element stacks, path components, and optional element attributes, with `folder` applying a custom filter and callback to handle matching elements during streaming. Designed for efficient parsing of large XML files where only specific subtrees are needed and full DOM construction is impractical.",
      "description_length": 461,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xml.SAX.Expert.To_DOM",
      "library": "SZXX",
      "description": "This module folds a sequence of SAX XML events into a DOM tree using a stateful accumulator. It processes `SAX.node` values through the `folder` function to build structured XML elements, handling nested tags and attributes. Use it to construct valid XML documents from streamed input, with support for lenient parsing of self-closing tags.",
      "description_length": 340,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xlsx.Expert.SST",
      "library": "SZXX",
      "description": "This module extracts and resolves shared strings tables (SST) from XLSX documents using either a file or a feed input. It provides direct access to SST entries through index resolution and supports efficient, minimal-byte reading from file sources. Use cases include parsing large XLSX files without loading the entire document and retrieving localized string values referenced in spreadsheet cells.",
      "description_length": 399,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xml.SAX.Expert",
      "library": "SZXX",
      "description": "Handles XML SAX event folding with custom state management through two submodules. `To_DOM` incrementally builds XML DOM trees from SAX events, while `Stream` filters and extracts specific XML subtrees during parsing. Works directly with XML element stacks, attribute lists, and path-based selectors for efficient, memory-conscious processing of large XML files.",
      "description_length": 362,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Zip.Data",
      "library": "SZXX",
      "description": "This module defines operations for converting and comparing parser states and data structures to S-expressions, comparing their values, and extracting results from parser states. It works with generic data types `'a` and structured types like `parser_state` and `t` that encapsulate parsing information. Concrete use cases include serializing parser states for debugging, comparing parsed data for consistency checks, and extracting final results or error messages from parsing processes.",
      "description_length": 488,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xml.SAX",
      "library": "SZXX",
      "description": "Processes XML documents using a SAX-based parser with customizable options for handling malformed HTML-like syntax. It supports streaming large XML files by parsing into a sequence of `node` values, including elements, text, CDATA, and prologues. Concrete use cases include incremental parsing of XML logs, extracting specific subtrees from large documents, and transforming XML into DOM structures with controlled memory usage.",
      "description_length": 428,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xlsx.Expert",
      "library": "SZXX",
      "description": "This module processes XLSX spreadsheet rows by parsing and resolving cell data using shared string tables (SST). It handles delayed string references through index resolution and efficiently converts raw XML row elements into structured data with or without SST context. It is used to parse and unwrap spreadsheet rows incrementally, particularly when working with large files where full document loading is impractical.",
      "description_length": 420,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xml.DOM",
      "library": "SZXX",
      "description": "This module defines core XML data structures like `element` and `attr_list`, along with utilities for attribute lookup, text unescaping, and navigating element hierarchies. It supports operations such as `get_attr` for retrieving named attributes, `dot` and `at` for accessing child elements by tag or index, and `filter_map` for extracting and transforming specific child elements. Concrete use cases include parsing and querying XML documents, extracting structured data from XML trees, and manipulating XML elements with precise attribute and text handling.",
      "description_length": 560,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xml",
      "library": "SZXX",
      "description": "This module implements XML parsing and manipulation with a focus on structured data extraction and transformation. It provides DOM-based tree navigation and mutation, attribute and text handling, and SAX-driven streaming parsing for large documents. Use cases include processing XML logs, extracting specific subtrees from large XML files, and parsing malformed HTML-like content with precise control over memory usage and error handling.",
      "description_length": 438,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Feed",
      "library": "SZXX",
      "description": "This module provides functions to create and manipulate data feeds that produce chunks of input as strings, bigstrings, or end-of-file markers. It supports reading from Eio flows, seekable file sources, string and bigstring dispensers, and direct string inputs. Use cases include streaming data from files or network sources in a controlled manner, handling large inputs efficiently, and simulating input streams with custom data providers.",
      "description_length": 440,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Xlsx",
      "library": "SZXX",
      "description": "This module parses XLSX files into structured rows of typed data using memory-efficient streaming. It supports parsing cells into strings or JSON values, converting date and datetime floats to time types, and resolving column references. It is used to process large spreadsheets without loading the entire document into memory, enabling efficient data extraction from files or feeds.",
      "description_length": 383,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX.Zip",
      "library": "SZXX",
      "description": "This module provides type-safe data structures like `descriptor`, `extra_field`, and `entry` to model ZIP file metadata, compression methods (`Stored`, `Deflated`), and archive versions (`Zip_2_0`, `Zip_4_5`). It enables efficient ZIP archive processing through streaming-based file extraction, single-pass indexing, and precise file retrieval from indexed entries, ideal for handling large archives without requiring full in-memory decompression.",
      "description_length": 447,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SZXX",
      "library": "SZXX",
      "description": "This module provides precise handling of ZIP archives, XML documents, XLSX spreadsheets, and input data feeds. It supports structured parsing, streaming extraction, and memory-efficient processing of large files, enabling tasks like selective XML subtree extraction, ZIP entry indexing, spreadsheet cell parsing, and controlled input stream consumption.",
      "description_length": 353,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 14,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9333333333333333
  },
  "statistics": {
    "max_description_length": 560,
    "min_description_length": 340,
    "avg_description_length": 424.92857142857144,
    "embedding_file_size_mb": 0.20328426361083984
  }
}