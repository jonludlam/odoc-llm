{
  "package": "bson",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 13,
  "creation_timestamp": "2025-06-18T16:32:17.687899",
  "modules": [
    {
      "module_path": "Bson_ext.Default",
      "description": "Converts values of type 'a to and from BSON elements, enabling serialization and deserialization of custom data structures. Works with arbitrary user-defined types through polymorphic functions. Used to store and retrieve complex data in BSON-compatible formats, such as database records or configuration objects.",
      "description_length": 313,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson_ext.Bson_ext_int",
      "description": "Converts integer values to and from BSON elements using explicit serialization and deserialization functions. Operates directly on the built-in integer type for efficient data encoding and decoding. Used to store or retrieve integer values in BSON-formatted data streams.",
      "description_length": 271,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson_ext.Bson_ext_int32",
      "description": "Converts 32-bit integers to and from BSON elements, enabling serialization and deserialization of int32 values. Operates directly on the int32 type, ensuring precise handling of 32-bit numeric data. Used to store and retrieve 32-bit integers in BSON-encoded data structures.",
      "description_length": 274,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson_ext.Bson_ext_int64",
      "description": "Converts between int64 values and Bson.element representations, enabling serialization and deserialization of 64-bit integers in BSON format. Works directly with the int64 type, ensuring precise handling of large integer values. Used to store and retrieve int64 data in BSON-encoded data structures.",
      "description_length": 299,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson_ext.Bson_ext_bool",
      "description": "Converts boolean values to and from BSON elements, enabling serialization and deserialization of boolean data in BSON format. Works exclusively with the `bool` type, ensuring precise handling of true/false values. Used to encode boolean flags in database records or decode user input from BSON-encoded data.",
      "description_length": 307,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson_ext.Bson_ext_float",
      "description": "Converts a float value to a BSON element and parses a BSON element back into a float. Operates directly on the float type for serialization and deserialization. Used to encode and decode floating-point numbers in BSON format within data exchange workflows.",
      "description_length": 256,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bson_ext.Bson_ext_string",
      "description": "Converts a string to a Bson.element using a specific encoding format and reconstructs a string from a Bson.element using corresponding decoding logic. Operates exclusively with the string type, ensuring accurate serialization and deserialization of textual data. Used to store and retrieve string values in BSON-encoded data structures, such as when interacting with a database or network protocol.",
      "description_length": 398,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson_ext.Bson_ext_list",
      "description": "Converts values of type 'a to and from Bson.element, enabling serialization and deserialization of custom data structures. Works with arbitrary types that can be encoded as BSON elements. Used to store and retrieve complex records in a BSON-compatible format within a database or network protocol.",
      "description_length": 297,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson_ext.Bson_ext_array",
      "description": "Converts a custom array type to and from BSON elements, enabling serialization and deserialization of structured data. Works with a user-defined array type `a` that represents ordered collections of values. Used to store and retrieve complex data structures in BSON format within a database or network protocol.",
      "description_length": 311,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson_ext.Bson_ext_option",
      "description": "Converts values of type 'a to and from BSON elements, enabling serialization and deserialization. Works with arbitrary data types that are compatible with BSON encoding. Used to store and retrieve custom data structures in BSON format within applications.",
      "description_length": 255,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "bson",
      "description": "Provides functions to encode and decode BSON documents, including support for nested records and arrays. Operates on OCaml's native data types such as lists, variants, and records, mapping them to BSON's binary format. Used to serialize complex data structures for storage in MongoDB or transmission over networks.",
      "description_length": 314,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bson_ext",
      "description": "Encodes and decodes values of type 'a to and from BSON elements using explicit conversion functions. Works with custom data types that require serialization to and from BSON format. Used to persist and retrieve complex OCaml values in a BSON-compatible storage system.",
      "description_length": 268,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bson",
      "description": "The module provides functions for constructing, modifying, and querying BSON documents, along with creating and extracting elements that represent diverse data types such as numbers, strings, binary data, and specialized values like JavaScript code, UUIDs, and regular expressions. It supports operations on BSON data structures to access specific element types, including timestamps, minkey, and maxkey, enabling tasks like data serialization, format conversion, and handling complex document hierarchies. Use cases include building dynamic BSON documents, decoding/encoding nested structures, and processing domain-specific data formats within applications.",
      "description_length": 659,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 659,
    "min_description_length": 255,
    "avg_description_length": 324.7692307692308,
    "embedding_file_size_mb": 0.04769611358642578
  }
}