{
  "package": "httpaf-async",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:51.691849",
  "modules": [
    {
      "module_path": "Httpaf_async.Server",
      "description": "Handles HTTP connections by defining request and error handlers for incoming traffic, using socket addresses and asynchronous deferred operations. Processes HTTP requests through a configured server setup, supporting custom logic for each request and error scenario. Integrates with the Async library to manage non-blocking I/O and event-driven processing.",
      "description_length": 356,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpaf_async.Client",
      "description": "Handles HTTP requests using a specified socket and configuration, processing responses through dedicated handlers. Operates with socket addresses, HTTP requests, and body streams. Used to establish and manage outgoing HTTP connections with custom error and response handling.",
      "description_length": 275,
      "index": 1,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "httpaf-async",
      "description": "Provides HTTP request parsing, response serialization, and connection management using a state machine. Works with byte streams, headers, and request/response objects compliant with HTTP 1.1. Used to build scalable web servers that handle pipelined requests and integrate with asynchronous runtimes like Async and Lwt.",
      "description_length": 318,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpaf_async",
      "description": "manages HTTP communication through asynchronous request and response handling, utilizing socket addresses and deferred operations for non-blocking I/O. It supports custom logic for processing incoming and outgoing HTTP traffic, including handling of request bodies and error scenarios. Key data types include socket addresses, HTTP requests, and body streams, with operations for establishing connections and managing handlers. It enables building scalable HTTP servers and clients by integrating with the Async library for event-driven processing.",
      "description_length": 548,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 548,
    "min_description_length": 275,
    "avg_description_length": 374.25,
    "embedding_file_size_mb": 0.014924049377441406
  }
}