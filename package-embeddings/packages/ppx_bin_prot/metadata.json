{
  "package": "ppx_bin_prot",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:00.768558",
  "modules": [
    {
      "module_path": "Bin_shape_expand",
      "library": "ppx_bin_prot.shape-expander",
      "description": "This module generates shape and digest functions for type declarations, producing expressions that describe the structure and compute the hash of OCaml values. It operates on type declarations and core types, producing expressions used in binary serialization and hashing. It is used during code generation to automatically derive shape and digest implementations for types.",
      "description_length": 374,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_bin_prot.For_f_sharp",
      "library": "ppx_bin_prot",
      "description": "Implements functions to generate F#-compatible binary serialization and deserialization code for OCaml types. Works with OCaml type declarations and produces structure items that can be integrated into modules. Use this when bridging OCaml and F# codebases that need to exchange data efficiently in binary format.",
      "description_length": 313,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_bin_prot",
      "library": "ppx_bin_prot",
      "description": "This module enables efficient binary serialization and deserialization of OCaml types, offering operations to compute type size, shape, and I/O behavior. It supports generating code for marshaling data to disk or over the network, and includes a child module that produces F#-compatible binary codecs for seamless data exchange between OCaml and F# systems. Direct APIs let you define custom readers and writers, while the child module integrates generated structure items into OCaml modules for cross-language compatibility. Example uses include persisting complex data structures in binary format and implementing high-performance network protocols with strict serialization requirements.",
      "description_length": 690,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 690,
    "min_description_length": 313,
    "avg_description_length": 459.0,
    "embedding_file_size_mb": 0.011307716369628906
  }
}