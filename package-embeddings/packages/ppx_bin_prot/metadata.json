{
  "package": "ppx_bin_prot",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:29.504074",
  "modules": [
    {
      "module_path": "Ppx_bin_prot.For_f_sharp",
      "description": "Writes and reads binary representations of OCaml type declarations, using a specified file path and location. Operates on tuples containing recursive flags and lists of type declarations. Used to serialize and deserialize type definitions during code generation or transformation processes.",
      "description_length": 290,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ppx_bin_prot",
      "description": "Generates functions for serializing and deserializing values according to the bin-prot format, using type definitions to derive the necessary logic. Works with OCaml types that have corresponding bin-prot representations, including records, variants, and polymorphic variants. Enables efficient binary data exchange between systems that share the same type definitions.",
      "description_length": 369,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bin_shape_expand",
      "description": "Generates code for serializing and deserializing OCaml types by expanding type declarations into shape representations. It processes structure and signature elements, producing expressions that encode type information. Used to create custom serialization logic for types during ppx preprocessing.",
      "description_length": 296,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_bin_prot",
      "description": "Handles binary serialization and deserialization of OCaml type declarations, using file paths to store or retrieve structured type data. Processes tuples with recursive flags and lists of type definitions, enabling efficient storage and retrieval of type information. Supports code generation workflows by converting type structures into binary formats and reconstructing them later. Examples include saving type metadata for later use in compilers or tools and reloading it for analysis or transformation.",
      "description_length": 506,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 506,
    "min_description_length": 290,
    "avg_description_length": 365.25,
    "embedding_file_size_mb": 0.014952659606933594
  }
}