{
  "package": "ocamlbuild-pkg",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:03:42.805845",
  "modules": [
    {
      "module_path": "Ocamlbuild_pkg.Pkg.Lib",
      "library": "ocamlbuild-pkg",
      "description": "This module defines and constructs library packages with specific metadata, dependencies, and module lists. It supports operations to specify required packages, public and private modules, build backend, and subpackages. Concrete use cases include defining installable OCaml libraries with controlled visibility and dependency management during package construction.",
      "description_length": 366,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlbuild_pkg.Pkg.Bin",
      "library": "ocamlbuild-pkg",
      "description": "This module defines an executable specification with a main module, optional compilation backend, and installation target. It works with OCaml module names and string identifiers to configure binary builds. Concrete use cases include defining native or bytecode executables to be built and installed by ocamlbuild_pkg.",
      "description_length": 318,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocamlbuild_pkg.Pkg",
      "library": "ocamlbuild-pkg",
      "description": "This module assembles OCaml packages by combining libraries, executables, and installation directories into a unified build configuration. It operates on structured definitions of libraries and binaries, enabling precise control over dependencies, module visibility, and installation paths. Concrete use cases include defining multi-component OCaml projects with custom build and installation logic for deployment via ocamlbuild_pkg.",
      "description_length": 433,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlbuild_pkg.Substs",
      "library": "ocamlbuild-pkg",
      "description": "Performs in-place substitution of placeholders in files using key-value pairs. Operates on lists of file paths and substitution maps, applying transformations during the build process. Useful for generating configuration files or templated source code from `.in` templates.",
      "description_length": 273,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocamlbuild_pkg.META",
      "library": "ocamlbuild-pkg",
      "description": "This module defines a type `t` for representing META file descriptions and a `package` type alias for strings. It provides `create` to construct META descriptions with fields like name, version, and dependencies, and `dispatcher` to generate a META file from a description. It is used to programmatically create and write META files for OCaml packages, including handling subpackages and required dependencies.",
      "description_length": 410,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlbuild_pkg.Mllib",
      "library": "ocamlbuild-pkg",
      "description": "This module generates `.mllib` and `.mldylib` files containing lists of module names. It provides the `dispatcher` function that writes these files based on a list of module paths. Useful for automating library file creation during OCaml project builds.",
      "description_length": 253,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocamlbuild_pkg.Install",
      "library": "ocamlbuild-pkg",
      "description": "This module defines types and functions for specifying files and directories to be installed during a build. It provides `file` and `dir` constructors to declare individual files and grouped files within a directory, supporting optional existence checks and target renaming. The `dispatcher` function generates installation rules that write these specifications into `.install` files, commonly used for packaging and deployment workflows.",
      "description_length": 438,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlbuild_pkg",
      "library": "ocamlbuild-pkg",
      "description": "This module provides tools for defining and managing OCaml package builds, including file installation, template substitution, META file generation, and library assembly. It works with file paths, module lists, and package descriptions to automate tasks like generating configuration files, writing installation rules, and building distributable OCaml packages. Concrete use cases include templating source files from `.in` templates, creating `.install` and `.mllib` files, and programmatically defining package metadata and structure for deployment.",
      "description_length": 551,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 551,
    "min_description_length": 253,
    "avg_description_length": 380.25,
    "embedding_file_size_mb": 0.11631202697753906
  }
}