{
  "package": "ocamlbuild-pkg",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:06:02.154670",
  "modules": [
    {
      "module_path": "Ocamlbuild_pkg.Pkg.Bin",
      "library": "ocamlbuild-pkg",
      "description": "This module defines a value type `t` representing executable binaries and provides the `create` function to construct them. It takes a main module, optional backend compilation target (`Native` or `Byte`), and an optional installation name. Use this module to declare standalone executables in package configurations, specifying how they should be built and installed.",
      "description_length": 368,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocamlbuild_pkg.Pkg.Lib",
      "library": "ocamlbuild-pkg",
      "description": "This module defines and constructs library packages with specific metadata, dependencies, and module lists. It handles library installation details, including private modules and compilation backend selection. Use it to declare and manage OCaml libraries within a build system, specifying their sources, dependencies, and visibility.",
      "description_length": 333,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlbuild_pkg.Substs",
      "library": "ocamlbuild-pkg",
      "description": "Substitutes variables in template files during the build process by replacing placeholders with specified values. Works with lists of file paths and key-value pairs, applying substitutions to generate output files in the build directory. Useful for generating configuration files or source code from templates with environment-specific values.",
      "description_length": 343,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocamlbuild_pkg.Mllib",
      "library": "ocamlbuild-pkg",
      "description": "This module generates `.mllib` and `.mldylib` files containing lists of modules for OCaml libraries. It works with module lists and file paths, using a dispatcher function to write the module names into the appropriate files. A concrete use case is automating the creation of library description files during the build process for OCaml projects.",
      "description_length": 346,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlbuild_pkg.Pkg",
      "library": "ocamlbuild-pkg",
      "description": "This module organizes OCaml projects into structured packages by combining libraries, executables, and installation logic into a unified build configuration. It provides core functions to define package components and generate installation hooks, working in tandem with its submodules that handle specific package types. The first submodule models executable binaries with the `t` type and `create` function, allowing precise control over compilation targets and installation names, while the second manages libraries with support for dependencies, module visibility, and backend selection. Together, they enable defining and installing complex, multi-component OCaml projects with custom directory layouts and build settings.",
      "description_length": 726,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocamlbuild_pkg.Install",
      "library": "ocamlbuild-pkg",
      "description": "This module defines types and functions for specifying files and directories to be installed during the build process. It provides `file` and `dir` constructors to declare individual files and grouped files under a specific directory, supporting optional existence checks and target renaming. The `dispatcher` function generates an installation rule that writes the specified structure to an `.install` file, typically used for packaging with opam.",
      "description_length": 448,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocamlbuild_pkg.META",
      "library": "ocamlbuild-pkg",
      "description": "This module creates and writes META file descriptions for OCaml packages, including fields like name, version, and dependencies. It works with strings, lists of package names, and abstract syntax trees representing package metadata. Concrete use cases include generating META files during build configuration to specify library dependencies and versions for use with OCaml's package manager.",
      "description_length": 391,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocamlbuild_pkg",
      "library": "ocamlbuild-pkg",
      "description": "This module processes templates by substituting variables with build-time values, generates library description files, and manages package definitions for OCaml projects. It provides data types for files, directories, modules, and package metadata, along with operations to create install rules, generate `.mllib` files, and configure executables and libraries. You can use it to automate configuration file generation, build package metadata, and define complex project structures with custom installation layouts. For example, it enables creating a `.install` file that specifies which compiled binaries and libraries should be installed, or generating a META file with dependency information for opam.",
      "description_length": 704,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 726,
    "min_description_length": 333,
    "avg_description_length": 457.375,
    "embedding_file_size_mb": 0.02947998046875
  }
}