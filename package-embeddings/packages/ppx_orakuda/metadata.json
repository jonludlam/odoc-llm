{
  "package": "ppx_orakuda",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 18,
  "creation_timestamp": "2025-06-18T16:36:22.341307",
  "modules": [
    {
      "module_path": "Ppx_orakuda.Regexp_re_pcre.Literal.OrakudaRegexpInternal",
      "description": "Provides functions to extract and manipulate captured groups from regular expression matches. Works with pattern-matched data structures generated by the regexp engine. Enables precise access to submatches during parsing or transformation tasks.",
      "description_length": 245,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_orakuda.Regexp_pcre.Literal.OrakudaRegexpInternal",
      "description": "Provides functions to extract and manipulate captured groups from regular expression matches. Works with pattern-matched data structures generated by the regexp engine. Used to access specific submatches in parsed input for text processing tasks.",
      "description_length": 246,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_orakuda.Regexp_re_pcre.Infix",
      "description": "Provides pattern matching on strings using a chain of guards and transformations, with support for error handling and fallback values. Operates on string inputs and returns results wrapped in a variant type that includes success or error states. Used to build structured, readable parsing logic where each case applies a transformation and propagates errors or defaults.",
      "description_length": 370,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_orakuda.Regexp_re_pcre.Literal",
      "description": "Provides functions to extract and manipulate captured groups from regular expression matches, enabling precise access to submatches during parsing or transformation. Operates on pattern-matched data structures generated by the regexp engine, supporting operations like group retrieval and modification. Examples include isolating specific parts of a matched string or reformatting submatches during text processing. Key data types include the regexp engine's internal match structures and functions to navigate and alter their contents.",
      "description_length": 536,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_orakuda.Regexp_pcre.Infix",
      "description": "Provides pattern matching on strings using regular expressions with the `=~` operator, and chains transformations with the `==>` operator. Works with string data and custom type `t` for pattern matching results. Used to parse and transform input strings with error handling and fallback defaults.",
      "description_length": 296,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_orakuda.Regexp_pcre.Literal",
      "description": "Provides functions to extract and manipulate captured groups from regular expression matches, operating on pattern-matched data structures. It supports operations like accessing submatches, transforming captured values, and combining groups into new structures. Users can retrieve specific parts of a match, such as extracting a date from a string or isolating a username in a log entry. Examples include parsing structured text, validating input formats, and generating custom output from matched patterns.",
      "description_length": 507,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_orakuda_plugin.Lexformat",
      "description": "Provides functions to parse and process formatted strings, converting them into structured token lists and handling errors with position-aware messages. Works with custom types like conversion, token, and ctype, and supports string-based lexical analysis with special character handling. Used to implement format string validation and transformation, such as converting format specifiers into executable parsing rules.",
      "description_length": 418,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_orakuda_plugin.Lexrex",
      "description": "Parses a regular expression string into tokens and flags, and generates a string representation from tokens. Processes replacement patterns by extracting their structure and flags. Works with custom token and type representations to model and manipulate regular expression components.",
      "description_length": 284,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_orakuda_plugin.P_format",
      "description": "Parses a list of characters and a location into a formatted string, returning either a constant expression or a function that transforms expressions based on a list of integers. Works with character lists, location data, and OCaml AST expressions. Used to generate and manipulate code structures during parsing or transformation phases.",
      "description_length": 336,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_orakuda_plugin.P_top",
      "description": "Provides operations to track and modify a boolean flag indicating top-level status and maintain a list of structure items parsed at the top level. Works with boolean values and lists of AST structure items from the OCaml 4.05 version. Used to control parsing behavior and preserve top-level constructs during migration processes.",
      "description_length": 329,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_orakuda.Cformat",
      "description": "Formats numeric values into strings using specified format strings, supporting floats, integers, and their 32-bit, 64-bit, and native variants. Accepts format specifiers similar to C's printf for precise control over output. Used to generate human-readable representations of numerical data in logging, reporting, and user-facing output.",
      "description_length": 337,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_orakuda.Qx",
      "description": "Processes command-line inputs, returning exit status and output lines. Operates on strings and process status values. Used to execute shell commands and capture their results in scripts.",
      "description_length": 186,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_orakuda.Regexp_gen",
      "description": "Provides functions to generate regular expressions from sample strings, with support for escaping special characters and handling repeated patterns. Works with strings and lists of characters to construct pattern-matching expressions. Used to dynamically create regex patterns for text validation and parsing tasks.",
      "description_length": 315,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_orakuda.Regexp_pcre",
      "description": "Matches strings against regular expressions and transforms results using `=~` and `==>` operators, handling both raw strings and custom `t` types. Extracts and manipulates captured groups, enabling precise data retrieval and restructuring from matches. Users can isolate specific elements like dates or usernames, validate formats, or generate new outputs from matched patterns. Operations include submatch access, value transformation, and group combination for structured text processing.",
      "description_length": 490,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_orakuda.Regexp_re_pcre",
      "description": "Processes string inputs through a series of guarded transformations, returning results in a stateful variant type that encodes success or error conditions. Enables extraction and modification of captured groups from regex matches, allowing precise control over submatch data during parsing. Operations include isolating specific segments of a matched string or reformatting them for further processing. Key data types include match structures from the regexp engine and transformation functions that operate on these structures.",
      "description_length": 528,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ppx_orakuda",
      "description": "Provides pattern matching and substitution using PCRE with syntax {m|...|m}, and custom string interpolation with {X|...|X} and [%X \"...\"]. Operates on strings and regular expressions, supporting Perl-compatible syntax. Enables efficient text processing and regex-based transformations in code.",
      "description_length": 294,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_orakuda_plugin",
      "description": "Processes formatted strings and regular expressions, converting them into structured representations and enabling manipulation of parsing rules, replacement patterns, and code generation. Handles tokenization, error tracking, and AST modifications using custom types like tokens, conversion, and location data. Supports tasks such as format specifier transformation, regex component extraction, and top-level structure preservation during parsing. Can generate executable parsing rules from format strings or track top-level items during code migration.",
      "description_length": 553,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_orakuda",
      "description": "Converts numeric values to formatted strings, executes shell commands, generates and applies regular expressions, and processes string matches with transformation capabilities. Key data types include numeric values, process outputs, regex patterns, and match structures, with operations like format specification, command execution, regex generation, and submatch manipulation. It enables tasks such as logging numerical data, automating shell interactions, validating text with dynamic patterns, and restructuring matched content. Examples include formatting floating-point numbers for reports, capturing command output in scripts, creating regex from sample text, and extracting dates from log entries.",
      "description_length": 704,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 18,
    "filtered_empty_modules": 5,
    "retention_rate": 0.782608695652174
  },
  "statistics": {
    "max_description_length": 704,
    "min_description_length": 186,
    "avg_description_length": 387.44444444444446,
    "embedding_file_size_mb": 0.06584644317626953
  }
}