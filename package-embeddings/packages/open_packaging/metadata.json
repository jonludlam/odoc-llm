{
  "package": "open_packaging",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:31:39.486539",
  "modules": [
    {
      "module_path": "Open_packaging.Relationship.Fields.Direct",
      "description": "Provides operations to iterate over, fold, filter, and transform fields of a structured data type, including target mode, target, type, and id fields. Processes records with nested field accessors and mutable state. Used to generate lists, apply transformations, and validate or modify field values in a structured data model.",
      "description_length": 326,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Open_packaging.Relationship.Target_mode",
      "description": "Provides conversion from a string to a specific internal representation and serialization to S-expression format. Works with a custom type `t` designed to encapsulate target-specific configuration data. Used to parse command-line arguments and generate configuration outputs in a structured format.",
      "description_length": 298,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Open_packaging.Relationship.Fields",
      "description": "Processes structured data by enabling iteration, folding, filtering, and transformation of fields such as target mode, target, type, and id, supporting nested accessors and mutable state. Key data types include records with field descriptors and transformation functions, while operations include map, filter, fold, and validation. Examples include generating filtered lists of fields, applying conditional updates, and extracting specific attributes from complex data structures.",
      "description_length": 480,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Open_packaging.Relationship",
      "description": "Converts string inputs to internal representations and serializes data into S-expressions, using a custom type to store configuration details. Supports advanced data manipulation through operations like map, filter, and fold, enabling structured processing of fields such as target mode and type. Allows for nested field access and state modification, facilitating tasks like filtering configurations or extracting specific attributes. Examples include parsing command-line arguments, generating filtered output, and applying conditional transformations to structured data.",
      "description_length": 573,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Open_packaging.Relationships",
      "description": "Provides functions to convert a list of relationship records to and from XML format. Operates on XML data and a list of relationship objects. Used to parse and serialize relationship data in XML-based configurations.",
      "description_length": 216,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Open_packaging.Utils",
      "description": "Converts unsigned integer types to S-expressions, extracts and validates XML elements and PCData, and maps XSD boolean strings to OCaml booleans. Operates on XML nodes, lists of attribute-value pairs, and string representations of boolean values. Used to parse and validate structured data in XML formats, ensuring correct type conversion and attribute presence.",
      "description_length": 362,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "open_packaging",
      "description": "Provides functions to extract and navigate XML content from Excel files, including parsing sheet data, cell values, and workbook metadata. Works with XML documents, DOM-like structures, and typed data representations of spreadsheet elements. Used to convert XLSX files into structured data for analysis or migration workflows.",
      "description_length": 326,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Open_packaging",
      "description": "Processes and transforms structured data between string, XML, and S-expression formats, supporting configuration parsing, validation, and manipulation. Operates on custom configuration types, XML nodes, and lists of relationship records, with operations including mapping, filtering, and folding over data structures. Enables tasks such as parsing command-line arguments, converting boolean strings to OCaml values, and serializing relationship data to XML. Supports nested field access, attribute validation, and conditional data transformations.",
      "description_length": 547,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 573,
    "min_description_length": 216,
    "avg_description_length": 391.0,
    "embedding_file_size_mb": 0.02946949005126953
  }
}