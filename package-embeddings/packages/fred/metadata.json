{
  "package": "fred",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 26,
  "creation_timestamp": "2025-07-15T23:10:42.413589",
  "modules": [
    {
      "module_path": "Fred.Models.Search",
      "library": "fred",
      "description": "This module defines types and conversions for search parameters used in querying economic data. It includes `search_type` and `order_by` variants that specify how searches are performed and sorted. These types are directly used in constructing API requests to filter and order results based on criteria like title, frequency, or popularity.",
      "description_length": 340,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Filter",
      "library": "fred",
      "description": "This module defines a `filter_value` type with variants `Macro`, `Regional`, and `All`, representing distinct filtering categories for economic data. It includes the `filter_value_to_string` function to convert these variants into their string representations. This module is used to apply categorical filters when querying datasets like economic indicators or regional statistics.",
      "description_length": 381,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Maps_series_group",
      "library": "fred",
      "description": "This module defines and manipulates `maps_series_group` and `series_group` types, primarily handling serialization and pretty-printing. It provides functions to convert JSON data into these types using `maps_series_group_of_yojson` and `series_group_of_yojson`, along with formatters and string converters for debugging and logging. Use cases include parsing and displaying structured map series data from JSON sources.",
      "description_length": 419,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Api_error",
      "library": "fred",
      "description": "This module defines a data structure for representing API errors with an error code and message. It includes functions for converting JSON responses into error records, formatting errors for debugging, and converting errors to string representations. It is used to handle and inspect error responses from external API calls within the library.",
      "description_length": 343,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Maps_series_data",
      "library": "fred",
      "description": "This module handles parsing and pretty-printing of map series data from FRED, specifically converting between JSON representations and OCaml types. It works with the `maps_series_data` type, which includes metadata, and supports reading and displaying data from the FRED API. Concrete use cases include deserializing map series metadata responses and formatting them for debugging or logging.",
      "description_length": 392,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Releases",
      "library": "fred",
      "description": "This module defines data structures and JSON serialization functions for handling FRED release data. It provides types like `releases` and `release` with associated parsers and pretty-printers for working with API responses. Concrete use cases include deserializing FRED API JSON payloads into OCaml records and formatting release metadata for debugging or display.",
      "description_length": 365,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Release_dates",
      "library": "fred",
      "description": "This module defines data structures and serialization functions for handling release dates in the FRED API. It includes types for `release_dates` and `release_date`, along with JSON parsing and pretty-printing utilities using Yojson and Ppx_deriving. Concrete use cases include deserializing FRED API responses containing release date information and formatting that data for debugging or display.",
      "description_length": 397,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Sources",
      "library": "fred",
      "description": "This module defines data structures and serialization functions for handling FRED (Federal Reserve Economic Data) source information. It provides types like `sources` and `source`, along with JSON parsing and pretty-printing utilities using Yojson and Ppx_deriving. Concrete use cases include querying and displaying metadata about FRED data sources, such as filtering by real-time periods or sorting by source name or ID.",
      "description_length": 422,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Categories",
      "library": "fred",
      "description": "This module defines and serializes category data structures used to represent hierarchical classifications. It provides functions to convert category lists and individual categories to and from JSON, along with pretty-printing and string conversion utilities. These operations support data ingestion and debugging in contexts like API response handling or configuration parsing.",
      "description_length": 378,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Vintage_dates",
      "library": "fred",
      "description": "This module handles parsing and formatting of vintage date responses from FRED API queries. It works with the `vintage_dates` record type, which includes metadata like start/end times, sorting options, and a list of dates. Concrete use cases include converting JSON responses into structured data and displaying vintage date information in a human-readable format.",
      "description_length": 364,
      "index": 9,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Fred.Models.Sort_order",
      "library": "fred",
      "description": "This module defines a polymorphic variant type `sort_order` with two constructors, `Ascending` and `Descending`, representing directional sorting preferences. It includes a function `sort_order_to_string` that maps each variant to its string representation. This module is used to specify sort direction in query-building operations across the Fred library.",
      "description_length": 357,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Maps_regional_data",
      "library": "fred",
      "description": "This module defines data structures and serialization functions for handling regional map data responses, including metadata and transformation, frequency, and aggregation method enums. It provides functions to convert these enums to strings and to serialize/deserialize the main data type to and from JSON. Concrete use cases include parsing and formatting regional map data retrieved from the FRED API, and configuring data transformation and aggregation settings for map visualizations.",
      "description_length": 489,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Observations",
      "library": "fred",
      "description": "This module defines data structures and operations for handling economic observation data, including parsing and pretty-printing observation records with metadata like time ranges, units, and output types. It works with structured types representing observation lists, individual observations, and metadata enums for units, frequency, and aggregation methods. Concrete use cases include deserializing observation data from JSON responses and formatting observation metadata for logging or display.",
      "description_length": 497,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Tables",
      "library": "fred",
      "description": "This module defines data structures and JSON serialization functions for working with FRED database tables and their hierarchical elements. It provides types like `tables` and `element` that represent table metadata and nested table rows, including fields like names, IDs, and observation values. These structures are used to parse and display FRED economic data tables, particularly for handling nested elements with parent-child relationships.",
      "description_length": 445,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Series",
      "library": "fred",
      "description": "This module defines data structures and JSON serialization functions for working with economic time series data. It includes types for filtering and sorting series results, along with functions to convert JSON responses into typed records. Concrete use cases include parsing API responses containing lists of time series metadata and formatting query parameters for time series filtering and sorting.",
      "description_length": 400,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Tags",
      "library": "fred",
      "description": "This module defines data structures and JSON serialization functions for handling tags and tag groups in a FRED API client. It supports parsing and pretty-printing of tag lists with metadata like sorting options, pagination, and tag group identifiers. Concrete use cases include processing API responses containing tag data, transforming tag lists into readable formats, and constructing queries based on tag attributes.",
      "description_length": 420,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Maps_shape_file",
      "library": "fred",
      "description": "This module parses and converts GeoJSON-like shape data into JSON and string formats, supporting coordinate reference systems, features, geometries, and metadata. It enables debugging, data interchange, and mapping workflows by serializing geographic structures for storage or transmission.",
      "description_length": 290,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Categories_query",
      "library": "fred",
      "description": "This module constructs and executes FRED API queries for category-related data, including categories, child categories, related categories, series, tags, and related tags. It operates on category IDs and optional query parameters like time ranges, filters, and sorting, returning parsed result streams. Concrete use cases include fetching hierarchical category data, retrieving series within a category, and querying tags associated with a category.",
      "description_length": 449,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Maps_query",
      "library": "fred",
      "description": "This module constructs and executes specific map-related API queries for geographic shapes, series data, and regional statistics. It handles data types like map shape files, series groups, time-series data, and regional data with parameters such as date, frequency, and transformation. Use cases include retrieving geographic boundaries, time-series visualizations, and aggregated regional statistics for economic or demographic analysis.",
      "description_length": 438,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Releases_query",
      "library": "fred",
      "description": "This module constructs and executes queries for retrieving release-related data from the FRED API, including release lists, release dates, associated series, sources, tags, and tables. It operates on query strings and API response types specific to FRED releases, supporting filtering, sorting, and pagination through optional parameters. Concrete use cases include fetching scheduled release dates for economic data, querying series linked to a release, or retrieving release tables with optional observation values.",
      "description_length": 517,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Tags_query",
      "library": "fred",
      "description": "This module constructs and executes FRED API queries for tags, related tags, and tag-series relationships. It operates on string-based query parameters and returns typed result wrappers for tags or series data. Concrete use cases include fetching tags by name or group, retrieving related tags filtered by exclusion, and listing series associated with specific tags.",
      "description_length": 366,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Series_query",
      "library": "fred",
      "description": "This module constructs and executes FRED API queries for time series data, categories, observations, releases, and metadata. It handles query parameters like filtering, sorting, and time ranges, producing typed query strings and running them asynchronously with an API key. Use cases include fetching economic data series by ID, searching for series by tags, retrieving observation history, and accessing vintage date information.",
      "description_length": 430,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models",
      "library": "fred",
      "description": "This module organizes data types and operations for querying, filtering, and processing economic data from sources like FRED. It includes variants for search parameters, sorting (`sort_order`), filtering (`filter_value`), and categorical structures, along with JSON serialization for complex types like `maps_series_group`, `release`, `source`, `category`, and `observation`. These tools enable tasks such as constructing API queries with filters and sort directions, parsing JSON responses into typed records, and formatting data for display or logging. Specific use cases include querying time series metadata, handling map and regional data, and processing vintage dates and API errors.",
      "description_length": 689,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Sources_query",
      "library": "fred",
      "description": "This module constructs and executes API queries for retrieving sources, a single source, or releases associated with a source from the FRED API. It works with string-based query parameters and handles responses asynchronously, returning parsed source or release data. Concrete use cases include fetching a paginated list of sources, getting details for a specific source by ID, and retrieving releases linked to a source with optional filtering and sorting.",
      "description_length": 457,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Conf",
      "library": "fred",
      "description": "This module defines configuration values and API key utilities for interacting with FRED services. It provides functions to retrieve base URLs for FRED and GeoFRED, and constructs API keys from strings or environment variables. It works directly with the `t` type containing `base_url` and `file_type`, and is used to configure API requests in the library.",
      "description_length": 356,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred",
      "library": "fred",
      "description": "This module orchestrates access to FRED's API by combining query execution logic with structured data handling for categories, series, releases, tags, maps, and sources. It exposes operations to fetch economic time series, retrieve metadata, and manage API configurations using typed query parameters, filters, and serializers defined across submodules. Key data types include category IDs, map shape files, release dates, tag strings, and source identifiers, all processed through functions that support filtering, sorting, and asynchronous retrieval. Examples include fetching series by tag, retrieving geographic boundaries, querying release tables, and configuring API requests with environment-based keys.",
      "description_length": 710,
      "index": 25,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 26,
    "meaningful_modules": 26,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 710,
    "min_description_length": 290,
    "avg_description_length": 427.34615384615387,
    "embedding_file_size_mb": 0.09490776062011719
  }
}