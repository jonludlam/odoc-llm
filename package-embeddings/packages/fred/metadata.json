{
  "package": "fred",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 26,
  "creation_timestamp": "2025-08-15T12:17:58.587405",
  "modules": [
    {
      "module_path": "Fred.Models.Maps_series_data",
      "library": "fred",
      "description": "This module handles parsing and pretty-printing of map series data, specifically working with a `maps_series_data` type that contains metadata. It provides functions to convert JSON representations into typed structures and display them as strings or formatted output. Concrete use cases include deserializing map series metadata from JSON responses and logging or debugging the structure of map series data.",
      "description_length": 408,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Tags",
      "library": "fred",
      "description": "This module defines data structures and serialization functions for handling tags and tag groups in the FRED API. It includes types for tag filtering parameters like `order_by` and `tag_group_id`, along with converters to string representations. It is used to parse and format tag-related responses from FRED API endpoints, particularly when querying for series metadata.",
      "description_length": 371,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Observations",
      "library": "fred",
      "description": "This module defines data structures and serialization functions for handling economic observation data, including units, frequency, aggregation methods, and output types. It provides functions to convert JSON representations into typed structures and utilities to format and display observation data. Concrete use cases include parsing FRED API responses into typed observations and formatting time series data for reporting or further processing.",
      "description_length": 447,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Vintage_dates",
      "library": "fred",
      "description": "This module handles parsing and formatting of vintage date responses from FRED API queries. It works with a record type containing metadata like start/end times, sorting parameters, and a list of vintage dates. It supports converting JSON responses into structured data and pretty-printing for debugging or logging.",
      "description_length": 315,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Maps_shape_file",
      "library": "fred",
      "description": "This module handles parsing and serializing GeoJSON-like geographic data structures, such as features, geometries, and coordinate reference systems, to and from JSON representations. It provides utilities to convert OCaml data types like `shape` into human-readable strings for debugging or data exchange, aligning with workflows that require geographic shape file manipulation in mapping applications. Key operations include deserialization from YoJSON and structured pretty-printing, supporting use cases like geospatial data processing and visualization.",
      "description_length": 557,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Search",
      "library": "fred",
      "description": "Handles search queries and sorting for time series data. Converts search types and sort criteria to string representations for API requests. Useful for constructing FRED API calls with specific search parameters and ordering options.",
      "description_length": 233,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Tables",
      "library": "fred",
      "description": "This module defines data structures and JSON serialization functions for working with tables and nested elements in the FRED API. It provides types for representing hierarchical table data, including identifiers, metadata, and recursive child elements, along with functions to parse and display these structures. Concrete use cases include processing FRED API responses containing table-based datasets and serializing them for storage or further transformation.",
      "description_length": 461,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Filter",
      "library": "fred",
      "description": "This module defines a `filter_value` type with variants `Macro`, `Regional`, and `All`, representing different filtering criteria. It includes the `filter_value_to_string` function to convert these variants into string representations. This module is used to specify and handle data filtering options in queries related to economic or regional data models.",
      "description_length": 356,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Series",
      "library": "fred",
      "description": "This module defines data structures and serialization functions for working with FRED series data, including types for filtering, sorting, and parsing series responses from JSON. It handles `series` and `seriess` types, which represent individual time series and collections of series with metadata like pagination and filtering options. Concrete use cases include parsing API responses containing time series data, applying filters and sorting options when querying series, and formatting series information for logging or display.",
      "description_length": 532,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Maps_series_group",
      "library": "fred",
      "description": "This module defines data structures and operations for handling map series groups, specifically parsing and pretty-printing `maps_series_group` and `series_group` types from and to JSON. It works with custom record types that represent grouped map series data, including associated metadata. Concrete use cases include deserializing map series group responses from an API and formatting them for debugging or logging.",
      "description_length": 417,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Maps_regional_data",
      "library": "fred",
      "description": "This module handles regional map data from FRED, primarily through parsing and pretty-printing operations. It works with data structures like `maps_regional_data`, `transformation`, `frequency`, and `aggregation_method`. Specific use cases include converting JSON responses into typed data and formatting transformation and frequency enums for API requests.",
      "description_length": 357,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Sort_order",
      "library": "fred",
      "description": "This module defines a polymorphic comparison function type and utilities for creating and combining comparison functions. It supports transforming values into comparable keys and composing multiple sort criteria. Useful for implementing multi-field sorting logic in queries or data processing pipelines.",
      "description_length": 303,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Sources",
      "library": "fred",
      "description": "This module defines data structures and JSON serialization functions for handling FRED (Federal Reserve Economic Data) source information. It provides types like `sources` and `source` to represent collections and individual data sources, along with converters from Yojson and pretty-printing utilities. Concrete use cases include parsing and displaying FRED API responses that list data sources with optional filtering, sorting, and pagination parameters.",
      "description_length": 456,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Categories",
      "library": "fred",
      "description": "This module defines data structures and JSON serialization/deserialization functions for working with categories. It provides types for representing a collection of categories and individual category entries, along with pretty-printing and string conversion utilities. It is used to process and display category data retrieved from JSON sources, particularly in the context of FRED API responses.",
      "description_length": 396,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Api_error",
      "library": "fred",
      "description": "This module defines and handles API error structures with specific operations for parsing and displaying errors. It works with the `api_error` type, which includes an error code and message, and provides functions to convert from JSON, format, and display error values. Concrete use cases include handling failed API responses and generating readable error output for debugging or logging.",
      "description_length": 389,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Releases",
      "library": "fred",
      "description": "This module defines data structures and JSON serialization functions for handling FRED release data. It provides types like `releases` and `release` with fields for metadata and sorting options, along with converters from Yojson and pretty-printing utilities. It is used to process and display lists of economic data releases from the FRED API, supporting filtering and ordering by specific fields like release ID or date range.",
      "description_length": 428,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Release_dates",
      "library": "fred",
      "description": "This module defines data structures and serialization functions for handling release date information from the FRED API. It includes types for configuring queries, such as sorting and pagination options, and represents individual release dates with associated metadata. Concrete use cases include parsing and displaying release schedules, filtering by time ranges, and integrating with API responses for economic data releases.",
      "description_length": 427,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Releases_query",
      "library": "fred",
      "description": "This module constructs and executes queries for retrieving release-related data from the FRED API, including release lists, release dates, series, sources, tags, and tables. It operates on query parameters like `release_id`, `realtime_start`, `realtime_end`, and sorting options, producing typed query strings that are passed to execution functions returning asynchronous results. Specific use cases include fetching economic data releases by date ranges, querying series associated with a release, and retrieving tagged or related data for analysis.",
      "description_length": 550,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models",
      "library": "fred",
      "description": "This module defines core data models and serialization logic for working with FRED API responses, including types for economic data series, categories, observations, and metadata. It provides functions to parse JSON into typed structures like `maps_series_data`, `observations`, and `releases`, and includes utilities for pretty-printing and converting these values to strings. Concrete use cases include deserializing API responses into structured data, formatting time series and map data for display, and supporting logging and debugging of FRED data models.",
      "description_length": 561,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Tags_query",
      "library": "fred",
      "description": "This module constructs and executes FRED API queries for tags, related tags, and series filtered by tags. It operates on tag names, group IDs, search text, and pagination parameters to build query strings for specific API endpoints. Use it to retrieve economic data tags or related series from the FRED API using a configured query.",
      "description_length": 332,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Maps_query",
      "library": "fred",
      "description": "This module constructs and executes specific API queries for map-related data, including shape files, series groups, series data, and regional data. It works with string-based query parameters and handles responses using result and Lwt types for asynchronous operations. Concrete use cases include retrieving geographic shape files, grouping economic series data, fetching time-series values, and aggregating regional statistics for visualization or analysis.",
      "description_length": 459,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Categories_query",
      "library": "fred",
      "description": "This module constructs and executes FRED API queries for category-related data. It supports operations to retrieve categories, their children, related categories, associated series, tags, and related tags, using category IDs and optional query parameters. Concrete use cases include fetching hierarchical category data, filtering series within categories, and retrieving tag relationships for analysis.",
      "description_length": 402,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Sources_query",
      "library": "fred",
      "description": "This module constructs and executes API queries for retrieving sources, specific source details, and source releases from the FRED API. It works with string-based query parameters and handles responses as either source or release data models. Concrete use cases include fetching paginated source lists, querying a single source by ID, and retrieving releases associated with a specific source ID.",
      "description_length": 396,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Series_query",
      "library": "fred",
      "description": "This module constructs and executes FRED API queries for time series data, categories, observations, releases, and metadata. It supports operations like searching for series by tags, retrieving observation data with customizable filters, and fetching vintage dates or related tags. Concrete use cases include fetching economic data series by ID, searching for series matching specific criteria, and retrieving associated metadata like categories or release information.",
      "description_length": 469,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Conf",
      "library": "fred",
      "description": "This module defines configuration values and API key handling for interacting with FRED services. It provides functions to retrieve base URLs for FRED and GeoFRED, and constructs API keys from strings or environment variables. It works directly with the `t` type containing `base_url` and `file_type`, and is used to configure API requests in the library.",
      "description_length": 355,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred",
      "library": "fred",
      "description": "This module orchestrates access to the FRED API through specialized query modules for categories, releases, series, sources, tags, and map data. It works with string-based query parameters, typed data models, and asynchronous result types to support concrete operations like fetching economic time series by ID, retrieving geographic shape files, and querying release dates or tag relationships. Use it to construct and execute parameterized API requests, deserialize responses into structured models, and configure API access with base URLs and keys.",
      "description_length": 551,
      "index": 25,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 26,
    "meaningful_modules": 26,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 561,
    "min_description_length": 233,
    "avg_description_length": 420.3076923076923,
    "embedding_file_size_mb": 0.3771390914916992
  }
}