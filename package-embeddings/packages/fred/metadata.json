{
  "package": "fred",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 27,
  "creation_timestamp": "2025-06-18T16:37:30.048559",
  "modules": [
    {
      "module_path": "Fred.Models.Api_error",
      "description": "Converts JSON values to a structured error type, formats error messages for output, and generates string representations of errors. Works with the `api_error` record type containing error details. Used to handle and display API-related error responses in a consistent format.",
      "description_length": 275,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Categories",
      "description": "Converts JSON values to typed category structures and vice versa, handling errors through a custom error type. Provides pretty-printing and string representation for category data, supporting both individual categories and collections. Works with nested JSON data to serialize and deserialize structured category information.",
      "description_length": 325,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Filter",
      "description": "Converts specific filter values to their string representations, handling different data types such as integers, strings, and dates. Processes filter conditions by applying custom formatting rules for output. Used in generating human-readable logs and debugging information from structured filter data.",
      "description_length": 302,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Maps_regional_data",
      "description": "Parses and serializes regional data structures from and to JSON, converting internal representations of transformations, frequencies, and aggregation methods to human-readable strings. Works with custom types representing geographic data mappings, statistical transformations, and data aggregation strategies. Used to generate readable outputs for logging, debugging, and user-facing reports.",
      "description_length": 392,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Maps_series_data",
      "description": "Parses and serializes data structures representing time series metadata and associated maps from and to JSON. It handles complex nested records containing numerical data and metadata fields. Provides pretty-printing and string representation for debugging and logging purposes.",
      "description_length": 277,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Maps_series_group",
      "description": "Converts JSON data to structured representations of map series groups and individual series groups, with error handling. Outputs formatted and string representations of these structures for debugging and logging. Processes nested data containing map identifiers and associated series configurations.",
      "description_length": 299,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Maps_shape_file",
      "description": "This module facilitates JSON serialization and deserialization for geospatial data, enabling conversion between structured representations of shape files, coordinate systems, features, and geometries and their JSON equivalents. It operates on nested, typed records that encapsulate spatial properties, ensuring precise handling of complex geographic data. Use cases include integrating spatial data into web services, validating shape file formats, and generating human-readable outputs for geographic information systems.",
      "description_length": 522,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Observations",
      "description": "Converts JSON data to structured observation records and vice versa, with error handling. Serializes and pretty-prints observation data using custom formatting functions. Provides string representations for enumerated types like units, frequency, and output types.",
      "description_length": 264,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Release_dates",
      "description": "Converts JSON data to structured release date information and formats it for display. Handles parsing of JSON objects into typed records representing release dates and their collections. Provides functions to serialize order-by parameters into strings and pretty-print release date data.",
      "description_length": 287,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Releases",
      "description": "Parses and serializes release data from and to JSON, handling errors through a custom error type. It formats release records for pretty printing and string representation, supporting ordered output based on specified criteria. The module works with structured data types representing collections of releases and individual release entries.",
      "description_length": 339,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Search",
      "description": "Converts search type and order by enum values to their corresponding string representations. Works with custom types representing search criteria and sorting options. Used to generate human-readable labels for search parameters in user interfaces.",
      "description_length": 247,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Series",
      "description": "Converts JSON values to structured series data types with error handling, and provides pretty-printing and string representation for series collections and individual series. Handles complex data structures representing time series and filtering criteria, including ordered sorting parameters. Enables serialization and debugging output for data analysis workflows.",
      "description_length": 365,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Sort_order",
      "description": "Converts a custom sort order representation to its corresponding string label. Operates on a type that encodes directional sorting preferences, such as ascending or descending. Used to generate human-readable output for sorting configurations in user interfaces or logs.",
      "description_length": 270,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Sources",
      "description": "Converts JSON values to structured source data and vice versa, with error handling. Serializes and pretty-prints source collections and individual sources using custom formatting. Provides string representations of sorting order enums for logging or display.",
      "description_length": 258,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Tables",
      "description": "Converts JSON data to structured table and element representations, and provides pretty-printing and string serialization for these types. Works with nested JSON structures to parse and display tabular data and individual elements. Used to process and visualize configuration files or data schemas stored in JSON format.",
      "description_length": 320,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models.Tags",
      "description": "Converts JSON values to tagged data structures and vice versa, with error handling. Serializes and pretty-prints tag collections and individual tags using OCaml's format module. Provides string representations for order-by directives and tag group identifiers.",
      "description_length": 260,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Models.Vintage_dates",
      "description": "Provides functions to parse JSON data into a structured vintage dates record, pretty-print the record, and generate a string representation. Works with a record type containing date fields and associated metadata. Used to validate and display wine vintage information from JSON input.",
      "description_length": 284,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Categories_query",
      "description": "Provides functions to construct and execute API queries for category-related data, including children, related categories, series, and tags, with support for time ranges, filters, and sorting. Operates on category IDs and custom query parameters, returning structured results or errors. Used to fetch hierarchical category data, associated series, and tagged elements from a financial data API.",
      "description_length": 394,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Releases_query",
      "description": "Constructs and executes API queries for fetching release data, including release details, dates, series, sources, tags, related tags, and tables. Operates on parameters like release IDs, date ranges, and sorting options, producing query strings for specific endpoints. Used to retrieve structured data from economic or financial data sources via API.",
      "description_length": 350,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Series_query",
      "description": "Provides functions to construct and execute various API queries for economic series data, including categories, observations, releases, searches, tags, updates, and vintage dates. Works with query parameters, API keys, and structured responses from the Fred API. Used to fetch detailed series information, filter results, and retrieve time-series data with specific constraints.",
      "description_length": 378,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Sources_query",
      "description": "Generates query strings for fetching source data, source details, and associated releases with time ranges, limits, and sorting. Operates on integers, strings, and custom types like `Models.Sources.order_by` and `Models.Releases.order_by`. Used to construct and execute API requests for retrieving economic data sources and their related releases.",
      "description_length": 347,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Tags_query",
      "description": "Generates query strings for fetching tags, related tags, and tag-based series data, supporting filters like time ranges, tag names, and search text. Processes query parameters and executes API requests using an API key, returning structured results or errors. Works with string-based queries and specific data types such as tag groups, timestamps, and sorting configurations.",
      "description_length": 375,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fred.Maps_query",
      "description": "Generates and executes API queries for geographic data, including shape files, series groups, and regional datasets. Works with custom query types and API response structures, handling parameters like dates, frequencies, and aggregation methods. Supports specific endpoints for fetching structured spatial and temporal data.",
      "description_length": 324,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Models",
      "description": "Converts JSON data into structured representations of errors, categories, filters, regional data, time series metadata, map series, geospatial features, observations, release dates, search criteria, series, sorting orders, sources, tables, tags, and vintage dates, with error handling and custom formatting. Supports operations like parsing, serialization, pretty-printing, and string conversion for complex, nested data types including records, enums, and collections. Examples include generating human-readable error messages, serializing geographic data for reports, formatting release dates for display, and converting search parameters to labels. Each module handles specific data structures, ensuring consistent output and reliable transformation between JSON and OCaml types.",
      "description_length": 782,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred.Conf",
      "description": "Provides functions to construct base URLs for specific services and to create API keys from strings or environment variables. Works with the `t` type, representing URL strings, and handles string-based API keys. Used to configure service endpoints and authenticate API requests in networked applications.",
      "description_length": 304,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "fred",
      "description": "Fetches economic data series from FRED using identifiers, retrieves metadata, and handles time-based queries. Works with series IDs, date ranges, and structured response data from the FRED API. Used to retrieve GDP, inflation rates, and employment statistics for analysis.",
      "description_length": 272,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fred",
      "description": "combines query construction, execution, and data parsing for financial and economic data, supporting category, release, series, source, tag, and geographic data retrieval. It handles structured data types like categories, series, releases, tags, and geographic features, with operations for query building, API key management, and JSON serialization. Functions enable fetching hierarchical category data, economic series with time ranges, source details with sorting, and geographic datasets with custom parameters. Examples include retrieving tagged financial series, generating release date summaries, and constructing queries for regional economic data.",
      "description_length": 656,
      "index": 26,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 27,
    "meaningful_modules": 27,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 782,
    "min_description_length": 247,
    "avg_description_length": 350.6666666666667,
    "embedding_file_size_mb": 0.09850597381591797
  }
}