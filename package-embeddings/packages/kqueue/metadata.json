{
  "package": "kqueue",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:03:12.922530",
  "modules": [
    {
      "module_path": "Kqueue.Event_list.Event",
      "library": "kqueue",
      "description": "This module represents individual events within a kqueue-based event notification system. It provides accessors and mutators for event fields such as identifier, filter, flags, fflags, data, and udata, allowing precise configuration and inspection of event parameters. It is used to manage I/O and system event notifications efficiently on BSD-derived systems.",
      "description_length": 360,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kqueue.Util",
      "library": "kqueue",
      "description": "Converts between Unix file descriptors and integers for use with kevent identifiers. Works with `Unix.file_descr` and `int` types. Enables registration of file descriptor-based events in kqueue by transforming descriptors into integer identifiers and vice versa.",
      "description_length": 262,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kqueue.Timeout",
      "library": "kqueue",
      "description": "This module defines a `t` type representing timeouts for event notifications and provides constants `never` and `immediate` for controlling wait behavior. It includes `of_ns` to create timeouts from nanosecond durations. Use this module to specify how long to wait for events when calling kevent-based I/O operations.",
      "description_length": 317,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kqueue.Filter",
      "library": "kqueue",
      "description": "This module defines constants representing event filters for use with the kqueue system call, such as read, write, timer, vnode, and proc. These values are used to specify the type of event to monitor when registering or modifying events in a kqueue instance. They are essential for setting up asynchronous I/O, file descriptor monitoring, process state changes, and timer-based events.",
      "description_length": 386,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kqueue.Flag",
      "library": "kqueue",
      "description": "This module represents event flags used with the kqueue system call, supporting bitwise operations to combine and test flags. It provides constants for common flags like `add`, `delete`, `enable`, and `disable`, along with functions to check intersection, equality, and inclusion. These flags configure and control event registration and behavior in kqueue-based I/O monitoring systems.",
      "description_length": 386,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kqueue.Note",
      "library": "kqueue",
      "description": "This module defines a set of constants representing event flags used with the kqueue system call for monitoring file descriptors and process events. It provides direct mappings to `EVFILT_*` filters and related flags like `EV_ADD`, `EV_DELETE`, and `EV_ENABLE`, enabling precise control over event registration and handling. These values are used when setting up or modifying events in a kqueue instance, such as watching for file descriptor readiness, process state changes, or signal delivery.",
      "description_length": 495,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kqueue.Event_list",
      "library": "kqueue",
      "description": "This module manages a list of event objects for use with the kqueue system call, providing operations to create and access event entries. It works with the `t` type, which represents a collection of events, and interacts directly with the `Event` submodule to retrieve individual event structures. Concrete use cases include setting up event buffers for monitoring file descriptors, handling I/O readiness notifications, and processing kernel-level events in high-performance network servers.",
      "description_length": 492,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kqueue",
      "library": "kqueue",
      "description": "This module provides direct access to the kqueue system call interface for monitoring file descriptors, process events, and timers. It supports creating and managing event queues with precise control over event registration using filters like read, write, and timer, along with timeout configuration and flag manipulation. Concrete use cases include implementing high-performance network servers, handling asynchronous I/O, and monitoring file or process state changes with low-level kernel integration.",
      "description_length": 503,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 503,
    "min_description_length": 262,
    "avg_description_length": 400.125,
    "embedding_file_size_mb": 0.11632823944091797
  }
}