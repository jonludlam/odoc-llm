{
  "package": "sexp_grammar",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:13:47.599450",
  "modules": [
    {
      "module_path": "Sexp_grammar.Unroll_recursion",
      "library": "sexp_grammar",
      "description": "Converts recursive sexp grammars into non-recursive equivalents by unrolling recursion, replacing `Recursive`, `Tycon`, and `Tyvar` nodes with expanded structures wrapped in `Lazy` to prevent infinite expansion. Works directly with `Sexp_grammar` types, including list grammars, enabling processing of self-referential grammars without type-level tracking. Useful for analyzing or transforming complex grammars in a finite, normalized form.",
      "description_length": 440,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_grammar.Fold_nonrecursive",
      "library": "sexp_grammar",
      "description": "Implements nonrecursive folding over S-expression grammars using callback-driven traversal. Processes grammar definitions by applying user-defined callbacks to nodes without recursive descent, supporting transformations and analyses of grammar structures. Useful for inspecting or converting grammar elements into alternative representations.",
      "description_length": 342,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_grammar.Field",
      "library": "sexp_grammar",
      "description": "Maps the value of a field using a provided function, transforming its type. Works with S-expression grammar fields representing structured data. Useful for converting field values between representations while preserving grammatical structure.",
      "description_length": 243,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_grammar.Eager_copy",
      "library": "sexp_grammar",
      "description": "Converts grammars with lazy nodes into equivalent grammars with all nodes eagerly expanded. Works with Sexp_grammar's grammar, list_grammar, and typed grammars. Used to prepare grammars for serialization by eliminating lazy constructors before generating S-expressions.",
      "description_length": 269,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_grammar.Case_sensitivity",
      "library": "sexp_grammar",
      "description": "This module defines a type `t` representing different case sensitivity modes for string comparison. It provides a function `sexp_of_t` to convert values of `t` to S-expressions and `to_string_comparator` to create a comparator module for strings based on the selected case sensitivity. It is used to control how string keys are compared in contexts like maps or sets where case handling must be explicitly defined.",
      "description_length": 414,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_grammar.Fold_recursive",
      "library": "sexp_grammar",
      "description": "Implements folding over recursive S-expression grammars by tying the knot in the grammar definition, handling recursive types correctly. It processes grammars that include self-referential or mutually recursive structures, ensuring proper traversal and interpretation. Useful for parsing nested data formats like configuration files or domain-specific languages with recursive syntax.",
      "description_length": 384,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sexp_grammar",
      "library": "sexp_grammar",
      "description": "This module enables parsing and transformation of S-expressions into structured grammars composed of options, lists, and variants, with support for binary serialization, recursion handling via folding and unrolling, and structural equality checks. It operates on data structures including records, variants, clauses, and definitions derived from S-expressions, facilitating use cases like binary protocol generation, data validation, and normalization of recursive grammars while managing case-sensitive string operations.",
      "description_length": 522,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 522,
    "min_description_length": 243,
    "avg_description_length": 373.42857142857144,
    "embedding_file_size_mb": 0.10183238983154297
  }
}