{
  "package": "cohttp-async",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-06-18T16:33:18.166398",
  "modules": [
    {
      "module_path": "Cohttp_async.Body.Private",
      "description": "Writes HTTP body data asynchronously using a provided handler, supports streaming via a pipe, allows disabling chunked encoding to retrieve the content length, and drains remaining data from a response. Operates on HTTP response objects and handles asynchronous I/O operations. Used for managing large payloads, custom streaming logic, and ensuring proper response termination.",
      "description_length": 377,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_async.Server.Expert",
      "description": "Handles HTTP requests by binding a custom handler to a socket, allowing direct manipulation of reader and writer streams for low-level control. Processes HTTP bodies, addresses, and requests, and supports response actions that access underlying I/O channels. Useful for implementing custom server logic requiring fine-grained control over network I/O.",
      "description_length": 351,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_async.Io.IO",
      "description": "Provides monadic operations for sequencing I/O actions, including binding results between computations and lifting values into the I/O context. Works with input channels, output channels, and deferred values to handle asynchronous reading and writing. Enables reading lines, buffering input, and ensuring data is fully written or flushed.",
      "description_length": 338,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async.Io.Request",
      "description": "Handles reading and writing HTTP requests, including parsing headers, streaming body content, and managing chunked transfer encoding. Operates on input and output channels, as well as request objects with specific body handling capabilities. Used to process incoming request data, construct outgoing requests, and manage body transmission in networked applications.",
      "description_length": 365,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_async.Io.Response",
      "description": "Handles HTTP response parsing and body streaming, including reading headers, writing body content, and managing chunked transfers. Operates on IO channels and HTTP response objects, supporting both synchronous and asynchronous data flow. Enables precise control over response construction and consumption in networked applications.",
      "description_length": 331,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async.Client.Connection",
      "description": "Establishes asynchronous TCP or SSL connections using a URI, supports sending HTTP requests with optional body data, and provides methods to manage connection state and termination. Operates on connection handles of type `t` and HTTP message types from the `Http` module. Used to initiate secure or insecure network communications and handle request-response cycles in event-driven applications.",
      "description_length": 395,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async.Body",
      "description": "Handles asynchronous HTTP body transmission, supporting streaming, chunked encoding control, and response cleanup. Operates on response objects, enabling custom data handling and large payload management. Allows piping data, retrieving content length, and draining residual data. Useful for real-time data delivery, memory-efficient transfers, and precise control over HTTP responses.",
      "description_length": 384,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async.Client",
      "description": "Manages network communication through asynchronous TCP or SSL connections, enabling HTTP request sending and response handling. Operates on connection handles and HTTP messages, supporting secure and insecure transfers. Allows control over connection lifecycle, including state management and termination. Examples include fetching data from a URL, sending JSON payloads, and managing persistent connections.",
      "description_length": 408,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_async.Io",
      "description": "Encapsulates I/O and HTTP processing capabilities through monadic sequencing, channel manipulation, and request/response handling. Supports reading and writing lines, buffering, asynchronous operations, and HTTP message parsing with header and body management. Enables construction and transmission of HTTP requests and responses, including chunked encoding and streaming. Facilitates networked application development by providing low-level control over data flow and protocol handling.",
      "description_length": 487,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_async.Server",
      "description": "Manages HTTP communication through direct control of I/O streams, enabling custom handling of requests, bodies, and responses. Processes raw network data, allowing manipulation of reader and writer channels for low-level interaction. Supports custom logic for routing, body parsing, and response generation. Examples include implementing WebSocket protocols, streaming large files, or enforcing custom authentication at the network layer.",
      "description_length": 438,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "cohttp-async",
      "description": "Provides HTTP request and response parsing, handling, and serialization using a fast, portable parser. Works with core HTTP data types such as headers, status codes, and body content. Enables building secure, asynchronous HTTP servers with TLS support through Lwt and ocaml-tls.",
      "description_length": 278,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async",
      "description": "Provides low-level control over asynchronous HTTP communication, including stream management, connection handling, and message parsing. Offers operations for reading/writing data, managing content length, and controlling chunked encoding, along with support for TCP/SSL connections and custom I/O processing. Enables tasks such as streaming large files, implementing WebSocket protocols, and handling raw network data with precise control. Includes utilities for draining residual data, piping streams, and constructing HTTP requests and responses.",
      "description_length": 548,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 12,
    "filtered_empty_modules": 3,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 548,
    "min_description_length": 278,
    "avg_description_length": 391.6666666666667,
    "embedding_file_size_mb": 0.04400825500488281
  }
}