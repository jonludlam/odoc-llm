{
  "package": "cohttp-async",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 11,
  "creation_timestamp": "2025-08-14T23:11:12.562459",
  "modules": [
    {
      "module_path": "Cohttp_async.Server.Expert",
      "library": "cohttp-async",
      "description": "Handles HTTP server creation with low-level control over connection handling, using custom socket addresses, readers, and writers. It allows defining handlers that process HTTP requests and produce responses or response actions, including direct manipulation of the underlying I/O. Useful for integrating HTTP services into custom networking stacks or extending server behavior beyond standard interfaces.",
      "description_length": 405,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async.Io.Request",
      "library": "cohttp-async",
      "description": "This module handles reading and writing HTTP request headers and bodies over asynchronous IO channels. It provides functions to parse incoming requests, stream request bodies in chunks, and serialize outgoing requests with optional flushing. Concrete use cases include implementing HTTP servers that process requests incrementally or clients that send large payloads efficiently.",
      "description_length": 379,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async.Io.Response",
      "library": "cohttp-async",
      "description": "This module handles reading and writing HTTP responses over asynchronous IO channels, including parsing response headers, streaming response bodies, and managing chunked transfers. It works with `Http.Response.t` values along with `reader` and `writer` types for handling body data. Concrete use cases include implementing HTTP servers that asynchronously send responses with headers and streaming content, or clients that read and process HTTP response streams.",
      "description_length": 462,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async.Body.Private",
      "library": "cohttp-async",
      "description": "This module handles asynchronous body data transfer in HTTP requests and responses. It provides functions to write body content, convert bodies into readable pipes, disable chunked encoding with a content length, and drain unused body data. Concrete use cases include streaming large payloads, processing incoming data incrementally, and managing body content without relying on chunked encoding.",
      "description_length": 396,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async.Io.IO",
      "library": "cohttp-async",
      "description": "This module implements asynchronous input/output operations for handling network connections using low-level channel types. It supports reading from input channels (`ic`) with operations like line-based or fixed-length reads, and writing to output channels (`oc`) with buffered writes and explicit flushing. Typical use cases include implementing custom network protocols over TCP where precise control over I/O buffering and connection state is required.",
      "description_length": 455,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async.Client.Connection",
      "library": "cohttp-async",
      "description": "This module manages HTTP client connections, enabling asynchronous requests over established connections. It provides functions to connect to a URI, send HTTP requests, and handle connection lifecycle events like closing and monitoring closure. Concrete use cases include making HTTP GET/POST requests, managing persistent connections to a server, and handling SSL-secured communication.",
      "description_length": 387,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async.Server",
      "library": "cohttp-async",
      "description": "This module implements HTTP server functionality with support for handling requests and generating responses using the Async concurrency model. It provides functions to create servers with custom request handlers, manage connections, and generate responses from strings, files, or pipes, including redirect and error handling. Concrete use cases include building asynchronous web services, REST APIs, and file servers with precise control over HTTP interactions.",
      "description_length": 462,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_async.Io",
      "library": "cohttp-async",
      "description": "This module provides asynchronous I/O primitives for handling network communication, including reading from and writing to low-level channels. It supports operations such as line-based reads, buffered writes, and explicit flushing, working directly with `ic` and `oc` channel types. It is used for implementing network protocols like HTTP, where precise control over connection state and data streaming is required.",
      "description_length": 415,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async.Client",
      "library": "cohttp-async",
      "description": "This module implements asynchronous HTTP client operations for sending requests and receiving responses over network connections. It supports standard HTTP methods like GET, POST, PUT, DELETE, and PATCH, with options to configure SSL, headers, and request bodies. Concrete use cases include interacting with REST APIs, uploading data to web services, and fetching remote resources with asynchronous I/O.",
      "description_length": 403,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_async.Body",
      "library": "cohttp-async",
      "description": "This module handles HTTP message bodies in an asynchronous context. It supports creating bodies from strings, form data, or pipes, and converting them back into strings, lists, or pipes. Use cases include streaming large files, processing incremental data uploads, and handling form submissions in HTTP servers or clients.",
      "description_length": 322,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_async",
      "library": "cohttp-async",
      "description": "This module provides asynchronous HTTP functionality, handling client and server operations with support for streaming data through customizable I/O primitives. It works with HTTP requests and responses, managing bodies, headers, and connections using Async's concurrency model. Concrete use cases include building and interacting with REST APIs, streaming large files, handling form submissions, and implementing custom HTTP servers with precise control over network communication.",
      "description_length": 482,
      "index": 10,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 482,
    "min_description_length": 322,
    "avg_description_length": 415.27272727272725,
    "embedding_file_size_mb": 0.15975093841552734
  }
}