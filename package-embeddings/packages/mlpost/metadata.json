{
  "package": "mlpost",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 47,
  "creation_timestamp": "2025-07-15T23:14:55.238848",
  "modules": [
    {
      "module_path": "Mlpost_dot.Dot.Make",
      "library": "mlpost.dot",
      "description": "Implements directed graph layout using Graphviz, converting abstract nodes and edges into positioned boxlike elements and connecting paths. Works with nodes derived from a boxlike type and edges as node pairs, producing a list of placed boxlikes and paths. Useful for visualizing hierarchical or networked structures like flowcharts or dependency graphs.",
      "description_length": 354,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost_dot.Dot",
      "library": "mlpost.dot",
      "description": "This module lays out directed graphs using Graphviz, transforming abstract nodes and edges into positioned boxlike elements and connecting paths. It operates on nodes derived from a boxlike type and edges represented as node pairs, producing visual structures such as flowcharts or dependency graphs. The core functionality includes converting hierarchical or networked data into a list of placed boxlikes and their connecting paths. For example, it can visualize a dependency graph by positioning each node as a labeled box and drawing directed arrows between them based on edge relationships.",
      "description_length": 594,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost_dot",
      "library": "mlpost.dot",
      "description": "This module arranges directed graphs into visual layouts using Graphviz, converting abstract nodes and edges into positioned boxes and connecting paths. It works with nodes based on a boxlike type and edges as pairs of nodes, generating structures like flowcharts and dependency graphs. The output consists of a list of placed boxlike elements and their connecting paths, enabling precise visual representation of hierarchical or networked data. For instance, it can render a dependency graph with labeled boxes and directed arrows showing relationships between nodes.",
      "description_length": 568,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost_version",
      "library": "mlpost.version",
      "description": "This module defines constants for the version string, the path to the ocamlfind executable, and a list of package names. It is used to configure and provide metadata about the Mlpost build environment. These values are typically referenced during package installation or version reporting tasks.",
      "description_length": 295,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost_desc_options",
      "library": "mlpost.desc_options",
      "description": "This module provides configuration options and command-line argument parsing for controlling document generation workflows. It manages mutable boolean and string settings that influence output formats (like PDF, SVG), tool behavior (verbosity, interactivity), and file dependencies, while exposing structured command-line flags for user customization. These capabilities are used to tailor typesetting pipelines, manage build artifacts, and integrate with LaTeX-based document processing.",
      "description_length": 488,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost_options",
      "library": "mlpost.options",
      "description": "This module handles command-line arguments by parsing and removing Mlpost-specific options, allowing user-defined options to follow after a `\"--\"` delimiter. It shifts remaining arguments to the front for further processing and automatically triggers figure dumping on program exit. It works directly with `string array` arguments and integrates with figure generation workflows to produce output files.",
      "description_length": 403,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.Concrete.CPoint.Infix",
      "library": "mlpost",
      "description": "This module defines infix operators for arithmetic operations on concrete points, including addition, subtraction, scalar multiplication, and scalar division. It works directly with `Mlpost.Concrete.CPoint.t` values, representing 2D points with numeric coordinates. These operators simplify point manipulation in geometric calculations, such as positioning elements in a layout or transforming coordinates in a drawing.",
      "description_length": 419,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.Brush.Dash",
      "library": "mlpost",
      "description": "This module defines dash patterns for drawing lines with alternating segments of visible and invisible strokes. It provides predefined patterns like evenly spaced dashes and dotted lines, along with operations to scale or shift existing patterns. Custom patterns can be constructed using the `on_off` type with specified lengths for on and off segments.",
      "description_length": 353,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Tree.Simple",
      "library": "mlpost",
      "description": "This module implements a simple tree structure with nodes and leaves, supporting operations to construct and render hierarchical tree layouts. It works with `Mlpost.Box.t` for node content and provides `node` and `bin` functions to build trees with customizable spacing, alignment, and visual styles. Trees can be rendered into drawing commands via `draw`, making it suitable for generating visual diagrams in documents or graphical outputs.",
      "description_length": 441,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Concrete.CTransform",
      "library": "mlpost",
      "description": "Performs affine transformations on geometric primitives such as points and paths using matrix operations. It supports translation, scaling, rotation, and matrix composition for precise manipulation of 2D shapes. Useful for generating transformed drawings or adjusting coordinates in vector graphics workflows.",
      "description_length": 309,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Concrete.CPoint",
      "library": "mlpost",
      "description": "This module supports arithmetic operations on 2D points represented as concrete numeric values, enabling precise geometric computations such as addition, subtraction, scalar multiplication, and negation. Its core API includes direct functions for manipulating points, while its child module introduces infix operators that streamline common operations in layout and drawing tasks. For example, you can add two points together using `+` or scale a point by a scalar with `*`. These capabilities facilitate tasks like coordinate transformation and element positioning in graphical applications.",
      "description_length": 592,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.Brush.Pen",
      "library": "mlpost",
      "description": "This module defines operations to create and manipulate pens that control line appearance in vector graphics. It provides functions to scale, rotate, shift, and transform pens, along with predefined circular and square pens. Use cases include customizing line endings, creating dashed patterns, or adjusting stroke thickness in diagrams.",
      "description_length": 337,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Concrete.CPath",
      "library": "mlpost",
      "description": "This module handles concrete path manipulations, including computing path length, checking if a path is closed or represents a single point, and finding intersections between paths. It supports operations like reversing paths, iterating over and folding path segments, splitting and subpath extraction, and calculating geometric properties such as direction and position at specific abscissae. Use cases include path clipping, collision detection, and rendering in vector graphics applications.",
      "description_length": 494,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.Num.Scale",
      "library": "mlpost",
      "description": "This module defines functions to create scaled numeric values in specific units such as points, centimeters, millimeters, inches, and big points. It operates on and returns values of type `Mlpost.Num.scale`, which represents abstract numeric values tied to a unit of measure. These functions are used to specify dimensions in typeset documents, such as setting lengths for spacing, margins, or font sizes in a unit-aware way.",
      "description_length": 425,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.Tree_adv.Overlays",
      "library": "mlpost",
      "description": "This module defines operations for managing time intervals and overlay-aware tree structures, where each node or element can be associated with a visibility interval. Functions like `in_interval`, `min_interval`, and `max_interval` manipulate these intervals, while `min_tree` and `max_tree` compute temporal bounds of tree elements based on visibility. Use cases include animating or dynamically displaying hierarchical data with time-based visibility control, such as in visualizations where elements appear or disappear at specific time steps.",
      "description_length": 546,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Tree_adv.Place",
      "library": "mlpost",
      "description": "This module provides functions for positioning and aligning tree structures using customizable spacing and alignment parameters. It operates on tree data types enhanced with box layout information, allowing precise control over vertical and horizontal alignment, as well as inter-node spacing. Concrete use cases include arranging graphical tree layouts with specific aesthetic constraints, such as centering nodes or adjusting gaps between subtrees.",
      "description_length": 450,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Num.Infix",
      "library": "mlpost",
      "description": "This module defines infix operators for performing arithmetic operations on abstract numeric values representing symbolic lengths or dimensions. It supports addition, subtraction, multiplication, and division between numeric values, as well as scaling by float values. These operations are specifically designed for use in layout and graphics calculations where symbolic numeric expressions are manipulated before final evaluation.",
      "description_length": 431,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Signature.Boxlike",
      "library": "mlpost",
      "description": "This module defines operations for working with box-like objects, including retrieving their width and height as floats and setting their position using a point. It manipulates a single abstract data type `t` representing such objects. Concrete use cases include positioning and measuring graphical elements in a layout or drawing context.",
      "description_length": 339,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Tree_adv.Overlays_Boxlike",
      "library": "mlpost",
      "description": "This module represents tree structures with overlay specifications, where each node is visualized as a box-like element. It provides operations to retrieve the width and height of these box-like nodes and to set their position in a 2D space using a specific point coordinate. It is particularly useful for rendering tree layouts with precise spatial control, such as in diagram generation or graphical tree visualizations.",
      "description_length": 422,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.MetaPath",
      "library": "mlpost",
      "description": "This module provides operations to construct and manipulate abstract geometric paths composed of knots with directional constraints and joints defining segments like lines or curves. It works with points, knots (points with optional incoming/outgoing directions), and joints to build metapaths, which are resolved into concrete paths (Path.t) via constraint-based heuristics. This enables declarative path creation for shapes, diagrams, or illustrations by specifying high-level constraints rather than manually computing control points.",
      "description_length": 537,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Arrow",
      "library": "mlpost",
      "description": "This component enables drawing arrows with customizable heads, feet, and belts between points or along paths, supporting both predefined styles like `classic` and user-defined arrow types. It operates on `Arrow.kind` values to compose complex arrow shapes and uses `Path.t` or coordinate pairs to define arrow trajectories. Common applications include diagramming tools, flowchart generation, and precise vector graphics annotations.",
      "description_length": 433,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.Concrete",
      "library": "mlpost",
      "description": "This module computes concrete representations of abstract numeric, point, and path values, enabling direct manipulation and inspection. It provides conversions between types like `Num.t` and `float`, `Point.t` and `CPoint.t`, and supports operations such as baseline calculation for TeX strings, affine transformations, and path analysis. You can translate and rotate geometric primitives, perform arithmetic on 2D points with or without infix operators, and compute path intersections or extract subpaths for rendering and layout tasks. Submodules enable precise coordinate manipulation, streamlined geometric expressions, and advanced path processing in vector graphics workflows.",
      "description_length": 682,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Path",
      "library": "mlpost",
      "description": "This module enables constructing and manipulating geometric paths through operations like knot and joint specification, path closure, concatenation, and subpath extraction. It works with `Path.t`, `Point.t`, `Num.t`, and `Joint.t` types to create curves, lines, and complex shapes, supporting transformations such as scaling, rotation, and shifting. Use cases include generating precise diagrams, applying stylistic effects like tension control or cyclic paths, and rendering predefined forms such as `fullcircle` or `unitsquare` with customizable joints and orientations.",
      "description_length": 572,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Legend",
      "library": "mlpost",
      "description": "Creates a graphical legend for diagrams using a list of color-label pairs. It generates a picture element with colored markers and corresponding text labels. This function is useful for adding explanatory keys to visualizations like charts or plots.",
      "description_length": 249,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Radar",
      "library": "mlpost",
      "description": "This module creates radar diagrams from lists of floating-point data, with each sublist representing a separate radar chart. It provides two main operations: one to overlay multiple radars in a single image and another to generate individual images for each radar. The module supports customization of appearance through parameters like color, line style, and axis scaling, making it suitable for visualizing comparative data sets such as performance metrics or survey results.",
      "description_length": 477,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Diag",
      "library": "mlpost",
      "description": "This module creates diagrams by arranging nodes in a table-like structure with customizable styling, arrows, and labels. It works with nodes containing LaTeX content and supports arrows with directional control, color, and line properties. Concrete use cases include generating flowcharts or labeled diagrams where nodes and connections require precise visual configuration.",
      "description_length": 374,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Brush",
      "library": "mlpost",
      "description": "This module controls how lines are drawn by defining and manipulating dash patterns and pens. It provides types like `on_off` for custom dash patterns and supports operations to scale, shift, and transform pens for precise control over line appearance. You can create dashed or dotted lines, adjust stroke thickness, and apply rounded or square line endings in vector graphics. Predefined patterns and pens simplify common tasks like drawing evenly spaced dashes or circular strokes.",
      "description_length": 483,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Helpers",
      "library": "mlpost",
      "description": "This module creates graphical elements like arrows, lines, and loops between points and boxes in a diagram. It supports drawing labeled arrows, connecting boxes with customizable paths, and positioning annotations relative to shapes. These functions are used to build complex diagrams with precise layout and styling, such as flowcharts or structured graphics.",
      "description_length": 360,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Command",
      "library": "mlpost",
      "description": "This module constructs figure commands for drawing paths, filling shapes, inserting images, and positioning labels. It operates on paths, pictures, points, and positional flags to align text or graphics. Concrete uses include composing vector graphics with labeled elements, overlaying images, and generating sequences of drawing operations programmatically.",
      "description_length": 358,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Transform",
      "library": "mlpost",
      "description": "This module applies linear transformations like scaling, rotation, shifting, slanting, and reflection to graphical objects such as pictures, pens, and paths. It supports both basic transformations through predefined functions and custom transformations via transformation matrices. Concrete use cases include adjusting the size of a drawn shape, rotating text around a specific point, or reflecting an image across a line.",
      "description_length": 422,
      "index": 29,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Mlpost.Tree_adv",
      "library": "mlpost",
      "description": "This module enables advanced tree manipulation and layout customization, supporting operations like mapping, folding, and filtering over generic tree structures while integrating time-based visibility, spatial alignment, and visual rendering through its submodules. It provides core transformations such as `map`, `combine`, and `filter`, alongside functions to associate nodes with time intervals, align tree elements with customizable spacing, and position nodes in 2D space based on box dimensions. Use it to generate dynamic tree visualizations that appear or change over time, arrange nodes with precise alignment and spacing, or render hierarchical data with custom layouts. Examples include interactive tree animations, aesthetically optimized diagrams, and structured graphical outputs with spatially-aware nodes.",
      "description_length": 821,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Hist",
      "library": "mlpost",
      "description": "Draws bar diagrams including simple, comparative, and stacked histograms from lists of floating-point values. Supports customization of dimensions, colors, labels, and layout. Useful for visualizing distributions and comparisons in numerical data sets.",
      "description_length": 252,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Ctypes",
      "library": "mlpost",
      "description": "This module defines basic geometric data structures and transformations used in vector graphics. It provides operations for manipulating points and matrices, including functions for point creation, matrix initialization, and applying transformations. These are used to handle coordinate manipulations and affine transformations in drawing tasks.",
      "description_length": 345,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Box",
      "library": "mlpost",
      "description": "The module provides operations to create, position, and style 2D graphical elements with support for geometric transformations, alignment, and layout composition. It works with structured boxes (`Box.t`), coordinate points (`Point.t`), paths (`Path.t`), and drawing commands (`Command.t`), enabling precise control over visual properties like stroke, fill, and dimensions. Typical use cases include diagram generation, technical illustrations, and structured document layouts where elements require alignment, grouping, or dynamic styling.",
      "description_length": 539,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.Plot",
      "library": "mlpost",
      "description": "This module draws grids, axes, and functions on a 2D canvas using a skeleton structure that defines dimensions and scaling. It supports customizable styling for grid lines, axis labels, ticks, and function plots with options for color, pens, and drawing modes. Concrete use cases include visualizing mathematical functions over integer domains, generating labeled coordinate systems, and creating publication-quality plots with precise layout control.",
      "description_length": 451,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.Tree",
      "library": "mlpost",
      "description": "This module creates and renders tree structures composed of nodes and leaves with customizable visual properties, such as edge style, arrow direction, and layout. It supports construction of basic trees using `node` and `bin` functions, and provides rendering into vector graphics via `draw`, using `Mlpost.Box.t` for node content. The module enables precise diagram generation with control over spacing, alignment, and visual styling, making it suitable for generating structured visual outputs in documents or graphical interfaces.",
      "description_length": 533,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.File",
      "library": "mlpost",
      "description": "Represents file paths as abstract values. Provides conversions between string representations and typed file path objects. Useful for ensuring type-safe manipulation of file paths in graphics or document generation workflows.",
      "description_length": 225,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Shapes",
      "library": "mlpost",
      "description": "This module creates geometric shapes as paths, including rectangles, circles, ellipses, and rounded variants. It operates on numeric values to define dimensions and radii, producing path objects for rendering. Use it to generate precise 2D shapes for graphics or diagrams, such as drawing a rounded rectangle with specified corner radii or creating an ellipse aligned to the coordinate axes.",
      "description_length": 391,
      "index": 37,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Mlpost.Num",
      "library": "mlpost",
      "description": "This module enables symbolic manipulation of numeric values, primarily representing lengths in typesetting units like points or centimeters, supporting arithmetic operations, scaling, and unit conversions. It includes submodules for creating unit-specific values and defining infix operators for layout-focused calculations. Main data types include `Num.t` for abstract numeric values and `Num.scale` for unit-bound measurements, with operations such as `add`, `scale_by`, and `maxn`. Examples include combining lengths with `+.` or setting margins using `cm`-scoped values for precise document layout.",
      "description_length": 602,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Defaults",
      "library": "mlpost",
      "description": "This module configures default settings for document generation, such as prelude content, output file naming, required files inclusion, verbosity level, and optional Type 1 font disassembly. It works with strings, string lists, and boolean values to customize the behavior of document rendering pipelines. Concrete use cases include setting up LaTeX prelude for generated documents, controlling output file names, and enabling debug output during document generation.",
      "description_length": 467,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Real_plot",
      "library": "mlpost",
      "description": "This module creates and renders 2D plots of mathematical functions from float to float, supporting single functions, partial functions with gaps, and multiple disconnected segments. It works with real-valued functions and configurable drawing parameters like brush style, labels, axis bounds, and plot dimensions. Concrete use cases include visualizing mathematical expressions, piecewise functions, and sampled data series with customizable appearance and axis scaling.",
      "description_length": 470,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.Color",
      "library": "mlpost",
      "description": "This module enables creating and manipulating colors across RGB, CMYK, HSV, and transparency-aware models (RGBA, CMYKA), with operations to adjust opacity levels and check transparency. It provides predefined color constants, grayscale generators, and a lookup system for X11 color names, producing color values compatible with graphics rendering and document generation workflows. Key use cases include converting named colors to RGB, generating shades of gray, and managing semi-transparent overlays in visual outputs.",
      "description_length": 520,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Signature",
      "library": "mlpost",
      "description": "This module represents and manipulates geometric points and box-like structures for layout and drawing operations. It provides core types like `point` and `t` for boxes, with operations to measure dimensions, set positions, and align elements in two-dimensional space. The child module extends `t` with functions to retrieve width and height as floats and update positions using points, enabling precise layout composition. Examples include arranging graphical components, generating diagrams, and managing coordinate-based spacing and alignment.",
      "description_length": 546,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mlpost.Triangle",
      "library": "mlpost",
      "description": "This module creates and manipulates triangular shapes with a root at the top and a horizontal bottom line, supporting precise positioning and labeling. It provides operations to construct triangles from depth or around pictures or TeX labels, and to attach labels or other triangles at specific coordinates within a triangle. Functions allow positioning triangles relative to each other using anchor points such as the root, bottom left, or bottom right.",
      "description_length": 454,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Metapost",
      "library": "mlpost",
      "description": "This module generates Metapost code for creating vector graphics, primarily working with geometric shapes, paths, and text elements. It provides functions to define and manipulate drawing primitives such as lines, curves, and labels, and to output them into a Metapost file. Concrete use cases include programmatically generating technical illustrations, diagrams, and figures for inclusion in LaTeX documents.",
      "description_length": 410,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost.Cairost",
      "library": "mlpost",
      "description": "This module provides functions to render vector graphics using the Cairo backend, supporting output formats like PDF, PNG, SVG, and PostScript. It operates on `Mlpost.Command.t` values and lists, with additional support for multi-page PDF generation and direct Cairo context manipulation. Concrete use cases include exporting figures to files, batch-generating multi-page PDFs, and integrating with Cairo-based rendering pipelines.",
      "description_length": 431,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mlpost",
      "library": "mlpost",
      "description": "This library enables declarative construction and manipulation of vector graphics through geometric primitives, paths, and transformations. It centers on data types like `Path.t` for resolved paths, `Point.t` for coordinates, `Num.t` for unit-aware numeric values, and `Command.t` for drawing operations, supporting operations such as path building with knots and joints, affine transformations, arrow drawing, and shape generation. You can define complex diagrams using high-level constraints, render mathematical plots, generate bar or radar charts, create labeled trees and flowcharts, and export results to formats like PDF or SVG. Specific tasks include drawing a rounded rectangle with custom radii, composing arrows with user-defined heads along a path, or programmatically laying out a flowchart with labeled nodes and connecting lines.",
      "description_length": 844,
      "index": 46,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 49,
    "meaningful_modules": 47,
    "filtered_empty_modules": 2,
    "retention_rate": 0.9591836734693877
  },
  "statistics": {
    "max_description_length": 844,
    "min_description_length": 225,
    "avg_description_length": 457.6170212765957,
    "embedding_file_size_mb": 0.17124176025390625
  }
}