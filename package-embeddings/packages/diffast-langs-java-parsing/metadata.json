{
  "package": "diffast-langs-java-parsing",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 30,
  "creation_timestamp": "2025-07-15T23:13:32.513955",
  "modules": [
    {
      "module_path": "Java_parsing.Scanner.F.U.P.Incremental",
      "library": "diffast-langs-java-parsing",
      "description": "This module provides incremental parsing capabilities for Java source code, supporting partial input analysis and error recovery. It operates on lexical positions and constructs checkpoints for parsing states, specifically handling block statements, assert statements, and compilation units. Concrete use cases include building interactive development tools, such as IDEs or linters, where parsing incomplete or evolving code is required.",
      "description_length": 438,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Scanner.F.U.P.MenhirInterpreter",
      "library": "diffast-langs-java-parsing",
      "description": "This module provides low-level parsing and interpreter operations for incremental parser manipulation, focusing on token processing, state transitions, and grammar analysis. It works directly with parser environments, checkpoints, and symbolic representations of grammar elements (terminals, nonterminals, productions) to enable precise control over parsing workflows. Specific capabilities include stack inspection, state comparison, reduction forcing, and lexer integration, making it suitable for advanced parsing strategies like error recovery, custom lookahead implementations, or dynamic grammar analysis.",
      "description_length": 611,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Scanner.F.U.Aux",
      "library": "diffast-langs-java-parsing",
      "description": "This module facilitates the construction and manipulation of Java abstract syntax tree (AST) nodes, handling lexical position tracking, parsing diagnostics, and semantic symbol registration for identifiers (e.g., classes, methods, variables). It operates on AST components like expressions, declarations, modifiers, and annotations, integrating source code positions and error-handling mechanisms to ensure well-formed node creation. These utilities are critical for parsing Java source code, enabling tasks like compiler front-end development, static analysis tools, and language-specific IDE features that require precise syntactic and semantic representations.",
      "description_length": 663,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Scanner.F.U.P",
      "library": "diffast-langs-java-parsing",
      "description": "This module parses Java source code into structured AST elements, handling constructs like block statements, assert statements, and compilation units from `Lexing.lexbuf` input. It supports both full and incremental parsing through submodules that manage parsing checkpoints, lexical positions, and error recovery, enabling analysis of incomplete or evolving code. The low-level submodule provides direct access to parser states, tokens, and grammar elements, allowing advanced operations such as stack inspection, state transitions, and custom lexer integration. Together, these capabilities facilitate tools like compilers, linters, and IDEs that require precise control over Java code parsing and interpretation.",
      "description_length": 715,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_parsing.Ulexer.F.P.Incremental",
      "library": "diffast-langs-java-parsing",
      "description": "This module provides incremental parsing entry points for Java source code, allowing the parser to start at specific positions and handle partial input. It supports parsing of reserved keywords, block statements, assert statements, and top-level compilation units. Concrete use cases include implementing IDE features like code completion, error recovery, and partial file parsing during editing.",
      "description_length": 396,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Parser.Make.MenhirInterpreter",
      "library": "diffast-langs-java-parsing",
      "description": "This module provides low-level parsing control and introspection capabilities for incremental parser implementations, focusing on operations like token consumption, state transitions, and grammar symbol analysis. It works directly with parser states, grammar symbols (terminals and nonterminals), and positional metadata to enable precise manipulation of parsing stacks and environments. Specific applications include error recovery in Java parsers, incremental parsing of partial inputs, and AST node generation through grammar-specific nonterminal definitions tied to Java language constructs.",
      "description_length": 595,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Ulexer.F.P",
      "library": "diffast-langs-java-parsing",
      "description": "This module lexes Java source code into tokens and parses partial or complete constructs like block statements, assert statements, and compilation units, producing AST nodes from Java_parsing.Ast. It works directly with Lexing.lexbuf input buffers and supports incremental parsing, enabling use cases such as code completion, error recovery, and parsing incomplete files during editing. The child module extends this by providing entry points for starting parsing at specific positions and handling partial input, including reserved keywords and top-level constructs. Together, they facilitate integration with Menhir-based parsers and support interactive or incremental parsing workflows.",
      "description_length": 689,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Scanner.F.U",
      "library": "diffast-langs-java-parsing",
      "description": "This module performs lexical analysis of Java source code, converting `Sedlexing.lexbuf` input into tokens annotated with positional information, including handling of comments, string blocks, and markers. It supports context-sensitive tokenization and maintains token queues for lookahead during parsing. The AST submodule builds and manipulates Java syntax trees with precise position tracking and error handling, enabling creation of expressions, declarations, and modifiers. The parser submodule converts Java code into structured AST elements, supporting full and incremental parsing with error recovery and low-level access to parser states for tools like compilers and linters.",
      "description_length": 684,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_parsing.Ulexer.F.Aux",
      "library": "diffast-langs-java-parsing",
      "description": "This module provides utilities for lexical analysis, AST node construction, and semantic validation in Java parsing workflows. It operates on lexing positions, buffers, and Java AST components (expressions, types, declarations) to enable source range tracking, error reporting, symbol registration, and context-aware node creation with positional typing. Key use cases include resolving qualified names, enforcing JLS compliance during scope transitions, and assembling complex syntactic structures like class bodies or switch blocks with precise error handling.",
      "description_length": 562,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_parsing.Parser.Make.Incremental",
      "library": "diffast-langs-java-parsing",
      "description": "This module provides incremental parsing checkpoints for Java syntax structures, enabling partial parsing of reserved keywords, block statements, assert statements, and top-level compilation units. It works with Java AST types and Lexing positions to support incremental parsing workflows. Concrete use cases include building IDE features like code completion, error recovery, and partial evaluation of incomplete Java programs.",
      "description_length": 428,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Tokens.Make.MenhirInterpreter",
      "library": "diffast-langs-java-parsing",
      "description": "This module defines a comprehensive set of terminal symbols for parsing Java source code, each associated with specific semantic values such as locations, strings, or unit. It includes tokens for keywords, operators, literals, and syntactic elements like parentheses and braces, enabling precise recognition and handling of Java syntax during parsing. Use cases include building abstract syntax trees (ASTs) from Java source files and supporting error recovery and reporting during the parsing process.",
      "description_length": 502,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_parsing.Parser_aux.STATE_T",
      "library": "diffast-langs-java-parsing",
      "description": "This module represents the state of a Java parser, primarily tracking the current parsing environment. It includes operations to access and manipulate the environment during parsing. Concrete use cases include managing symbol tables and contextual information while parsing Java source files.",
      "description_length": 292,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Parser_aux.F",
      "library": "diffast-langs-java-parsing",
      "description": "This module's functions focus on parsing Java source code, constructing abstract syntax trees (ASTs), and registering symbols during semantic analysis. They manipulate lexical positions, identifiers, qualified names, and AST components like declarations, modifiers, and annotations, following patterns for node creation and error handling. These operations support use cases such as Java compilation pipelines, static analysis tools, and systems requiring precise source location tracking, semantic validation, or AST transformations for tasks like code refactoring or linting.",
      "description_length": 577,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Ulexer.F",
      "library": "diffast-langs-java-parsing",
      "description": "This module implements lexical analysis for Java source code, converting `Sedlexing.lexbuf` input into tokens with source positions, handling comments, string literals, and text blocks according to the Java Language Specification. It includes parsers for assert and block statements that interface with Menhir, along with utilities for token queue manipulation and keyword conversion. The child modules extend this functionality by enabling incremental parsing of partial constructs, supporting interactive workflows like code completion and error recovery, and providing semantic validation tools for AST construction and scope management. Together, they allow precise parsing, context-aware node creation, and integration with Menhir-based parsers for complete or incomplete Java source files.",
      "description_length": 795,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_parsing.Parser.Make",
      "library": "diffast-langs-java-parsing",
      "description": "This module implements a Java parser that processes lexed tokens to construct abstract syntax trees, using a Menhir-based grammar to parse reserved keywords, block statements, assert statements, and complete compilation units. It supports low-level parsing control through operations on parser states, grammar symbols, and positional metadata, enabling error recovery, incremental parsing, and precise AST construction. Submodules facilitate parsing checkpoints and partial input evaluation, useful for IDE features like code completion and live error detection. Concrete operations include consuming tokens, analyzing grammar symbols, and generating AST nodes tied to Java language constructs.",
      "description_length": 694,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Tokens.Make",
      "library": "diffast-langs-java-parsing",
      "description": "This module defines the lexical structure of Java code by processing input into a stream of tokens, each annotated with location information and semantic values. It recognizes keywords, operators, literals, and punctuation, handling complex cases like string interpolation and error states. The module supports building structured token representations used directly in parsing and enables precise AST construction with accurate source positioning. Submodules extend this foundation to handle specific syntactic elements and error recovery during analysis.",
      "description_length": 556,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Scanner.F",
      "library": "diffast-langs-java-parsing",
      "description": "This module handles lexical scanning and position tracking for Java source code, converting input into tokens annotated with positional information and transforming lexical positions into structured location data used in abstract syntax trees. It provides key operations like `loc_of_poss` for location construction and scanner state management, while its submodules support context-sensitive tokenization, token queues for lookahead, and AST construction with precise error handling. The AST submodule enables creation and manipulation of Java expressions, declarations, and modifiers, and the parser submodule supports full and incremental parsing with error recovery. Together, they allow tools like compilers and linters to process Java code with accurate position tracking and low-level parser control.",
      "description_length": 807,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Classtbl",
      "library": "diffast-langs-java-parsing",
      "description": "Maintains a mapping of class names to sets of method signatures for Java bytecode analysis. Provides direct access to inheritance and method override relationships through the `stdtbl` hash table. Used to resolve method calls and check class hierarchies during static analysis of Java programs.",
      "description_length": 294,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Token",
      "library": "diffast-langs-java-parsing",
      "description": "This module handles token manipulation and position tracking for Java parsing, providing functions to convert tokens to strings, extract original source text, and retrieve lexical positions. It works with token types that include position information, such as `Java_parsing.Tokens_.token` and `PB.token`, and supports creating and decomposing tokens with positional metadata. Concrete use cases include source code analysis, error reporting with precise locations, and preserving original token text during parsing transformations.",
      "description_length": 531,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Scanner",
      "library": "diffast-langs-java-parsing",
      "description": "This module processes token queues from Java source code, enabling manipulation, filtering, and inspection of token sequences with support for converting queues to strings, extracting source positions, and outlining token structures for analysis. It integrates lexical scanning, position tracking, and AST construction through submodules that provide context-sensitive tokenization, lookahead capabilities, and precise error handling during parsing. Key operations include `loc_of_poss` for location data and scanner state management, facilitating tasks like compiler preprocessing, linting, and refactoring. Tools can perform full or incremental parsing, build Java expressions and declarations, and manage modifiers with detailed source position tracking.",
      "description_length": 757,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_parsing.Common",
      "library": "diffast-langs-java-parsing",
      "description": "This module handles parsing and manipulation of Java source code elements, providing functions to extract package names, resolve source directories, and transform qualified identifiers. It works with string-based paths and Java language specification versions, supporting operations like pattern replacement and string decomposition. Concrete use cases include parsing Java file structures, handling package-to-path conversions, and processing qualified names during static analysis or code transformation tasks.",
      "description_length": 512,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Parser",
      "library": "diffast-langs-java-parsing",
      "description": "This module parses Java source code into abstract syntax trees by processing lexed tokens according to a Menhir-based grammar, handling constructs like keywords, blocks, and assertions. It provides data types for parser states, grammar symbols, and AST nodes, along with operations to consume tokens, analyze syntax, and track positional metadata. These features support advanced parsing control, including error recovery, incremental parsing, and partial input evaluation. Examples include building compilation units, detecting syntax errors in incomplete code, and generating ASTs for code analysis tools.",
      "description_length": 607,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_parsing.Ulexer",
      "library": "diffast-langs-java-parsing",
      "description": "This module provides lexical analysis for Java source code, converting UTF-8 encoded input into tokens with source positions using SEDLex-generated state machines and Unicode-aware classification. It handles complex lexical constructs like comments, string literals, text blocks, and embedded dollar signs, while tracking positional information for parser consumption. Submodules extend this with support for incremental parsing, interactive workflows such as code completion, and semantic validation tools for AST construction. Together, they enable precise, context-aware tokenization and parsing integration with Menhir for both complete and partial Java source files.",
      "description_length": 671,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Tokens",
      "library": "diffast-langs-java-parsing",
      "description": "This module processes Java source code into a structured stream of tokens, each carrying location and semantic data. It identifies core elements like keywords, operators, literals, and punctuation, while managing complex cases such as string interpolation and error states. The token stream supports precise AST construction and parsing, enabling accurate source mapping and syntactic analysis. Submodules build on this to handle specific language constructs and improve error recovery during lexical analysis.",
      "description_length": 510,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Tokens_",
      "library": "diffast-langs-java-parsing",
      "description": "This module defines a rich set of lexical tokens representing Java language elements such as keywords, operators, literals, and punctuation, each carrying location or string data for precise parsing and analysis. It supports building abstract syntax trees, implementing linters, and performing static analysis with accurate source position tracking. The direct API allows token creation and manipulation, while the empty submodule reserves space for future specialized token groupings. Together, they form a structured foundation for lexical analysis and source code processing tasks.",
      "description_length": 584,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_parsing.Lib",
      "library": "diffast-langs-java-parsing",
      "description": "Extracts the line and column numbers from a Lexing.position value. Works with OCaml's standard Lexing.position type. Useful for reporting precise source code locations during parsing or error handling.",
      "description_length": 201,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Parser_aux",
      "library": "diffast-langs-java-parsing",
      "description": "This module manages the parsing state and drives the construction of Java abstract syntax trees, integrating environment tracking with AST generation. It provides data types for parser state, lexical positions, identifiers, and AST nodes, along with operations to manipulate context, register symbols, and build structured code representations. The core module handles state transitions and node creation, while submodules support semantic analysis, error handling, and source location tracking. Examples include building ASTs during Java compilation, implementing linters that require contextual symbol resolution, and performing refactoring through precise AST transformations.",
      "description_length": 679,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_parsing.Printer",
      "library": "diffast-langs-java-parsing",
      "description": "The module provides functions for pretty-printing Java code with precise indentation, punctuation, and layout control, handling Java AST elements like expressions, types, and control structures. It operates on structured data including AST nodes for declarations, modifiers, and statements, supporting customizable formatting through block style options (`BSshort`, `BStall`) and precedence-aware conversions. Use cases include generating Java source code from ASTs, pretty-printing for code visualization, and converting nested AST components (e.g., lambda expressions, annotations, type parameters) into textual representations with context-sensitive formatting.",
      "description_length": 664,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_parsing.Ast",
      "library": "diffast-langs-java-parsing",
      "description": "This module provides operations for resolving and analyzing Java identifiers, names, and abstract syntax tree (AST) structures, with a focus on contextual classification, name decomposition, and type checking. It works with data types representing Java syntax elements such as identifiers, expressions, types, modifiers, and declarations, along with attributes like resolution status and qualification. Specific use cases include parsing Java code to extract naming conventions, traversing AST nodes for static analysis, and transforming or validating Java syntax structures during compilation or refactoring tasks.",
      "description_length": 615,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_parsing",
      "library": "diffast-langs-java-parsing",
      "description": "This module suite provides comprehensive tools for parsing, analyzing, and transforming Java source code. It supports lexical analysis, token manipulation, AST construction, and pretty-printing, with rich handling of source positions for precise error reporting and code transformation. Key data types include tokens with positional metadata, parser states, AST nodes, and formatting directives. You can parse Java files into ASTs, analyze class hierarchies, resolve identifiers, report precise error locations, or pretty-print structured Java code with custom formatting.",
      "description_length": 572,
      "index": 29,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 40,
    "meaningful_modules": 30,
    "filtered_empty_modules": 10,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 807,
    "min_description_length": 201,
    "avg_description_length": 573.3666666666667,
    "embedding_file_size_mb": 0.10945320129394531
  }
}