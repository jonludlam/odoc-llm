{
  "package": "ocaml-migrate-parsetree",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 92,
  "creation_timestamp": "2025-08-18T18:40:31.650592",
  "modules": [
    {
      "module_path": "Migrate_parsetree.Migrate_403_402.Def",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines a variant type `missing_feature` listing language constructs present in OCaml 4.03 but not in 4.02. It provides functions to describe each feature, report the minimal OCaml version introducing it, and generate migration error messages when unsupported features are encountered. It is used to detect and explain incompatibilities when downgrading OCaml ASTs from 4.03 to 4.02.",
      "description_length": 395,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_403.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core AST types and variants used for representing OCaml syntax constructs, including constants, flags for recursion and mutability, labels, and variances. It provides precise data structures for parsing and manipulating OCaml source code, particularly handling literals, type annotations, and language-specific modifiers. These types are essential for tools that analyze or transform OCaml code, such as compilers, linters, or refactoring utilities.",
      "description_length": 469,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_403.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "Contains constants for magic numbers used to identify OCaml AST implementations and interfaces. Works with string values representing binary identifiers. Used during AST migration to ensure compatibility between different OCaml versions.",
      "description_length": 237,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_406.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core AST types used in OCaml's parser and type checker, including constants, recursion flags, mutability, and variance indicators. It provides enumerated types for representing language constructs like integer literals, recursive bindings, and labeled function arguments. These types are used directly in constructing and manipulating abstract syntax trees during compilation or analysis of OCaml code.",
      "description_length": 422,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_408_407.Def",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines a list of language features that were present in OCaml 4.08 but removed or altered in 4.07. It provides functions to describe each feature, determine the minimal OCaml version where it was introduced, and generate migration error messages when these features are used in incompatible contexts. These tools are used to detect and report on unsupported syntax or constructs when downgrading code from OCaml 4.08 to 4.07.",
      "description_length": 438,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_408.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "Contains magic numbers identifying the implementation and interface AST versions for OCaml 4.08. Used to validate and distinguish AST files during parsing and compilation workflows. Directly supports version-specific AST handling in tools like ppx rewriters and compilers.",
      "description_length": 272,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_411.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "Contains magic numbers identifying the implementation and interface AST versions for OCaml 4.11. Used to validate and distinguish AST files during parsing and compilation workflows. Directly supports version-specific AST handling in tools like ppx rewriters or compilers.",
      "description_length": 271,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_413.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core data types representing constants, flags, labels, and variance annotations used in OCaml's abstract syntax tree. It includes discriminated unions for integer, character, string, and floating-point constants, as well as flags for recursion, mutability, privacy, and override behavior. These types are used to represent language constructs like function arguments, type declarations, and pattern matching in compiler frontends and AST transformations.",
      "description_length": 474,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_405.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines magic numbers used to identify implementation and interface AST files in OCaml 4.05. It provides the values `ast_impl_magic_number` and `ast_intf_magic_number` for checking or generating valid AST file headers. These strings are essential when working directly with OCaml's abstract syntax trees, such as in tools that serialize or deserialize ASTs for analysis or transformation.",
      "description_length": 400,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_406.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml code parsed into version 4.06 of the parsetree format, including core language constructs, class and module expressions, and toplevel phrases. It provides types such as `constant`, `attribute`, and `toplevel_phrase` used to represent literals, extensions, and top-level definitions or directives. Concrete use cases include analyzing or transforming OCaml source code during compilation or refactoring tools.",
      "description_length": 469,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_410.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core data types representing constants, flags, labels, and variance indicators used in OCaml's abstract syntax tree. It includes discriminated unions for integer, character, string, and floating-point constants, as well as flags for recursion, mutability, privacy, and override behavior. These types are used to represent language constructs like function arguments, type declarations, and loop directions in compiler frontends and AST transformations.",
      "description_length": 472,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_414.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml 4.14, including core data types like `constant`, `location_stack`, and `attribute`. It provides constructors and types for representing OCaml source code structures, such as integers, strings, characters, and top-level phrases. Concrete use cases include parsing, analyzing, and transforming OCaml code programmatically, such as building custom linters or refactoring tools.",
      "description_length": 435,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_413.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml 4.13, including core elements like constants, attributes, and toplevel phrases. It provides data structures for representing OCaml source code in a structured form, such as `toplevel_phrase` for top-level definitions and directives. Concrete use cases include parsing, analyzing, and transforming OCaml code during compilation or tooling tasks like linting and refactoring.",
      "description_length": 434,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_500.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml code in version 500 of the parsetree, including core elements like constants, attributes, and toplevel phrases. It supports manipulation of parsed OCaml constructs such as integers, strings, characters, and floats, along with their source locations and attributes. Concrete use cases include writing custom syntax extensions, analyzing or transforming OCaml source code during compilation, and implementing tools that process OCaml programs programmatically.",
      "description_length": 519,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_402.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "Contains constants for magic numbers used to identify implementation and interface AST files in OCaml 4.02. Works directly with string values representing binary identifiers. Useful when handling or inspecting compiled OCaml source files, such as in tooling that reads or generates .cmi or .cmo files.",
      "description_length": 301,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_405.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core AST types used in the representation and manipulation of OCaml abstract syntax trees. It includes types for constants, flags (recursive, private, mutable, etc.), labels, argument labels, and variances, enabling precise modeling of language constructs. These types are used directly in parsing, type checking, and code transformation tasks, such as handling integer literals, labeled function arguments, and class field mutability.",
      "description_length": 455,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_412.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml 4.12, including core elements like expressions, patterns, and type declarations. It provides data types for constants, attributes, and toplevel phrases used during parsing and compilation. Concrete use cases include AST manipulation in compilers, linters, and code transformation tools targeting OCaml 4.12.",
      "description_length": 368,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_500.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines magic numbers used to identify implementation and interface AST files in OCaml 5.00. It provides the values `ast_impl_magic_number` and `ast_intf_magic_number` for checking or generating valid AST file headers. These strings are used when reading or writing serialized ASTs to ensure format compatibility.",
      "description_length": 325,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_409.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "Contains constants for magic numbers used to identify implementation and interface AST files. Works with string values representing file identifiers. Used during AST migration to ensure correct parsing and version compatibility of OCaml source files.",
      "description_length": 250,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_407.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml code parsed into core, class, module, and toplevel constructs. It includes types for constants, attributes, and phrases used to represent source code structure and metadata. Concrete use cases include analyzing or transforming OCaml source code during compilation or tooling tasks such as linting, refactoring, or code generation.",
      "description_length": 391,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_409.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core data types representing constants, flags, labels, and variance indicators used in OCaml's abstract syntax tree. It includes discriminated unions for integer, character, string, and floating-point constants, as well as flags for recursion, mutability, privacy, and override behavior. These types are used to represent language constructs like function arguments, type declarations, and loop directions in compiler frontends and AST transformations.",
      "description_length": 472,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_404.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "Contains constants for magic numbers used to identify OCaml AST implementations and interfaces. Works with string values representing binary identifiers. Used during AST migration to ensure compatibility between different OCaml compiler versions.",
      "description_length": 246,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_410.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines magic numbers used to identify implementation and interface AST files. It provides the values `ast_impl_magic_number` and `ast_intf_magic_number` for checking or generating valid AST file headers. These strings are essential when working directly with serialized OCaml ASTs, such as in tools that read or write `.ast` files for analysis or transformation.",
      "description_length": 375,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_414_413.Def",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines a variant type `missing_feature` listing language constructs present in OCaml 4.14 but absent in 4.13. It provides functions to describe each feature, determine the minimal OCaml version introducing it, and generate migration error messages when unsupported features are encountered. Concrete use cases include tooling that detects and reports on code using newer syntax or features when targeting older OCaml versions.",
      "description_length": 439,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_410_409.Def",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines a set of constructors representing language features present in OCaml 4.10 but not in 4.09. It provides functions to describe each missing feature, determine the minimal OCaml version required, and generate migration error messages. These facilities are used when detecting incompatible syntax or constructs during version-specific code migration.",
      "description_length": 367,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_500.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core data types representing constants, flags, labels, and variances used in OCaml's abstract syntax tree. It includes discriminated unions for integer, character, string, and floating-point constants, along with boolean-like enumerations for modifiers such as recursion, mutability, and override behavior. These types are used to represent language constructs like function arguments, type declarations, and pattern matching in compiler frontends and AST transformations.",
      "description_length": 492,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_412.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core data types representing constants, flags, labels, and variance indicators used in OCaml's abstract syntax tree. It includes discriminated unions for integer, character, string, and floating-point constants, as well as flags for recursion, mutability, privacy, and override behavior. These types are used to represent language constructs like function arguments, type declarations, and pattern matching in compiler frontends and AST transformations.",
      "description_length": 473,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_410.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml 4.10, including core data types like `constant`, `location_stack`, `attribute`, and `toplevel_phrase`. It provides constructors and types for representing OCaml source code structures such as integers, strings, characters, floats, and top-level definitions and directives. Concrete use cases include parsing, analyzing, and transforming OCaml code programmatically, such as building custom linters or refactoring tools.",
      "description_length": 480,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_405.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml code parsed into version 405 of the AST format, including core language constructs, class and module structures, and toplevel phrases. It provides types such as `constant`, `attribute`, and `toplevel_phrase` to represent literals, extension points, and top-level definitions or directives. Concrete use cases include analyzing or transforming OCaml source code during compilation or tooling tasks like linting, refactoring, or code generation.",
      "description_length": 504,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_402.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module represents the abstract syntax tree (AST) for OCaml code parsed by version 402 of the OCaml compiler. It includes data structures for core language elements, class and module constructs, and top-level phrases such as definitions and directives. Concrete use cases include analyzing or transforming OCaml source code during compilation or tooling tasks like linting and refactoring.",
      "description_length": 393,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Migrate_413_412.Def",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines a polymorphic variant type `missing_feature` listing language constructs present in OCaml 4.13 but absent in 4.12. It provides functions to describe each feature, report the minimal OCaml version introducing it, and generate migration error messages when unsupported features are encountered. It is used to detect and report incompatibilities when downgrading OCaml ASTs from 4.13 to 4.12.",
      "description_length": 409,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_407.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core AST types used in OCaml's parser and type checker, including constants, recursion flags, mutability, and variance indicators. It supports concrete syntax and type representation with constructs like integer, string, and float constants, along with flags for object-oriented and module system features. These types are used directly in constructing and manipulating OCaml abstract syntax trees during compilation or analysis tasks.",
      "description_length": 455,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_403.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml code parsed into version 403 of the AST format. It includes types for constants, attributes, and top-level phrases used in parsing OCaml source code. It is used to represent and manipulate the structure of OCaml programs during compilation or analysis tasks.",
      "description_length": 319,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_404.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml code parsed into core, class, module, and toplevel constructs. It includes types for constants, attributes, and phrases used to represent source code structure and metadata. Concrete use cases include analyzing or transforming OCaml source code during compilation or tooling tasks like linting and refactoring.",
      "description_length": 371,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_411.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml 4.11, including core elements like expressions, patterns, and structures, along with support for attributes, extension points, and toplevel phrases. It works with data types such as `constant`, `attribute`, `toplevel_phrase`, and `location_stack` to represent and manipulate OCaml source code constructs. Concrete use cases include parsing, analyzing, and transforming OCaml code during compilation or tooling tasks like linting and refactoring.",
      "description_length": 506,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_402.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core data types representing constants, flags, labels, and variances used in OCaml's abstract syntax tree. It includes discriminated unions for constants (integers, characters, strings, floats, etc.) and boolean-like flags for recursion, mutability, privacy, and variance. These types are used to construct and manipulate AST nodes for OCaml code analysis, transformation, and compilation tasks.",
      "description_length": 415,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_413.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "Contains magic numbers identifying the implementation and interface AST versions for OCaml 4.13. Used to validate and distinguish AST files during parsing and compilation processes.",
      "description_length": 181,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_407.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "Contains magic numbers identifying the implementation and interface AST versions for OCaml 4.07. Used to validate and distinguish AST file formats during parsing and compilation workflows.",
      "description_length": 188,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_408.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core data types representing constants, flags, labels, and variance indicators used in OCaml's abstract syntax tree. It includes discriminated unions for various syntactic constructs such as integer, character, and string constants, as well as flags for recursion, mutability, privacy, and override behavior. These types are used to model language features directly in AST manipulations, such as parsing, type checking, and code generation.",
      "description_length": 460,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_414.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core data types representing constants, flags, labels, and variance annotations used in OCaml's abstract syntax tree. It includes enumerated types for modifiers like `rec`, `private`, `mutable`, and `override`, along with structured types for literals and function argument labels. These types are used to represent language constructs in parsed OCaml code, enabling analysis, transformation, and code generation tasks.",
      "description_length": 439,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_406_407.Def",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines a set of OCaml language features that are absent in version 4.06 but present in 4.07, represented as the `missing_feature` variant type. It includes functions to describe each feature, determine the minimal OCaml version where it was introduced, and generate migration error messages when the feature is used in incompatible code. These tools support precise detection and reporting of incompatibilities during AST migration between OCaml versions.",
      "description_length": 468,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_414.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "Stores magic numbers for OCaml 4.14 implementation and interface files. These values identify the specific version of the AST used in migration tools. Useful when working with serialized ASTs or checking file compatibility during parsing and compilation workflows.",
      "description_length": 264,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_409.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml 4.09, including core data types like `constant`, `attribute`, and `toplevel_phrase`. It provides constructors and definitions for parsing and representing OCaml source code elements such as integers, strings, attributes, and top-level phrases. Concrete use cases include building and manipulating OCaml ASTs for compilers, linters, or code transformation tools targeting OCaml 4.09.",
      "description_length": 443,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Migrate_406_405.Def",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines a polymorphic variant type `missing_feature` listing OCaml language features present in version 4.06 but absent in 4.05. It provides functions to retrieve a descriptive string, the minimal OCaml version introducing each feature, and formatted error messages for migration issues. These utilities assist in detecting and explaining incompatibilities when downgrading OCaml ASTs from 4.06 to 4.05.",
      "description_length": 415,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_404.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core AST types used in OCaml's parser and type checker, including constants, recursion flags, mutability, and variance indicators. It supports concrete operations like constant value representation, flag-based control flow in declarations, and label handling for function arguments. These types are essential for constructing and analyzing OCaml syntax trees during compilation or tooling tasks like linters and refactoring tools.",
      "description_length": 450,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_406.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines magic numbers used to identify the implementation and interface AST formats for OCaml version 4.06. It provides the values `ast_impl_magic_number` and `ast_intf_magic_number`, which are used to ensure correct parsing and serialization of ASTs during cross-version code migration. These identifiers are essential when reading or writing ASTs to files, enabling tools to detect the exact OCaml version and parse the structure accurately.",
      "description_length": 455,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_408.Parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines the abstract syntax tree (AST) for OCaml version 4.08, including core data types like `constant`, `attribute`, and `toplevel_phrase`. It provides constructors and accessors for AST nodes used in parsing and manipulating OCaml source code. Concrete use cases include writing custom PPX rewriters, analyzing or transforming OCaml code during compilation, and building tools that process OCaml programs programmatically.",
      "description_length": 437,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_412.Config",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines magic numbers used to identify implementation and interface AST files. It provides two string values: one for recognizing compiled implementation file formats and another for interface file formats. These values are used during AST migration to ensure correct parsing and compatibility checks.",
      "description_length": 313,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_404_403.Def",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines a set of constructors representing language features introduced after OCaml 4.03 and provides functions to describe them, determine their minimal OCaml version, and generate migration error messages. It works directly with the `missing_feature` enumerated type, which lists specific syntactic and type constructs. Concrete use cases include reporting unsupported syntax when migrating code from newer OCaml versions to 4.03 and guiding users to the required language version for specific features.",
      "description_length": 517,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_411.Asttypes",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines core data types representing constants, flags, labels, and variances used in OCaml's abstract syntax tree. It includes discriminated unions for integer, character, string, and floating-point constants, as well as flags for recursion, mutability, privacy, and variance. These types are used to represent language constructs like function arguments, class fields, and type parameters in compiler extensions or AST transformations.",
      "description_length": 448,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Migrate_407_406",
      "library": "ocaml-migrate-parsetree",
      "description": "This module transforms OCaml abstract syntax tree (AST) nodes to ensure compatibility between version 4.07 and 4.06, performing deep copies of constructs like expressions, patterns, types, modules, and class declarations while preserving semantic details and source location information. It operates on parsetree and asttypes components, recursively converting structures such as type declarations, extensions, and module signatures. Such migrations are critical for downgrading codebases to earlier OCaml versions or maintaining tooling that supports multiple compiler releases.",
      "description_length": 579,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_407",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides direct access to OCaml 4.07's core AST types, syntax tree structures, and version identifiers. It works with abstract syntax trees, parsing constants, attributes, and language constructs for OCaml code analysis, transformation, and tooling. Concrete use cases include building custom linters, refactoring tools, and code generators that operate on OCaml source at the AST level.",
      "description_length": 399,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_410_411",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides functions to convert and deep copy OCaml AST nodes between version 4.10 and 4.11, covering constructs like expressions, patterns, types, modules, classes, and attributes. It operates on structured AST representations, preserving semantic and syntactic relationships through recursive migration of components such as module bindings, type declarations, and class fields. The conversions enable compatibility for codebases or tools transitioning between these OCaml versions, ensuring seamless handling of language-specific features like open declarations, extensions, and location-annotated values.",
      "description_length": 618,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_413",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides data types and structures for representing OCaml 4.13 source code in a compiler-ready form. It includes types for constants, flags, labels, and AST nodes used in parsing, analyzing, and transforming code during compilation or tooling tasks. Concrete use cases include implementing linters, refactoring tools, and custom compilers that process OCaml source code.",
      "description_length": 382,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_403",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides data structures and constants for working with OCaml's abstract syntax tree in version 403. It includes core AST types for representing language constructs, definitions for parsing and transforming OCaml code, and magic number identifiers for ensuring AST compatibility across OCaml versions. It is used in tools like compilers, linters, and code transformers that need to process or migrate OCaml source code.",
      "description_length": 431,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Migrate_500_414",
      "library": "ocaml-migrate-parsetree",
      "description": "This module converts OCaml abstract syntax trees from version 500 to version 414. It includes functions to migrate structures, signatures, top-level phrases, core types, expressions, patterns, and various declaration types between the two AST representations. It is used when downgrading OCaml code or tooling to ensure compatibility with older compiler versions.",
      "description_length": 363,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Def",
      "library": "ocaml-migrate-parsetree",
      "description": "This module defines a set of constructors representing OCaml language features that may be missing in earlier compiler versions. It provides functions to describe each feature, determine the minimal OCaml version required, and generate migration error messages. It is used to handle version-specific syntax differences when converting parsetrees between OCaml versions.",
      "description_length": 369,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_412",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides data types and constants for working with OCaml 4.12's abstract syntax tree, including core AST elements like expressions, patterns, type declarations, and language flags. It supports compiler frontends, linters, and code transformation tools by enabling precise AST manipulation and migration tasks. The module also includes identifiers for AST file format compatibility checks during parsing and compilation.",
      "description_length": 431,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_402",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides precise definitions for OCaml version 402's abstract syntax tree, including core data types for constants, flags, and AST node structures. It supports analysis and transformation of OCaml source code through typed representations of language constructs such as expressions, patterns, and module signatures. Direct use cases include building compiler extensions, custom linters, and refactoring tools that operate on OCaml's concrete syntax and structure.",
      "description_length": 475,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Migrate_405_406",
      "library": "ocaml-migrate-parsetree",
      "description": "This module facilitates the conversion of OCaml abstract syntax trees (ASTs) between version 405 and 406 through systematic deep-copying of nodes and metadata. It operates on a wide range of AST components\u2014including expressions, patterns, types, classes, modules, signatures, and associated attributes, flags, and locations\u2014to ensure structural and semantic consistency during version migrations. The functionality is particularly useful for tools requiring compatibility across OCaml compiler updates, such as code transformers, linters, or custom compilers processing legacy or evolving AST formats.",
      "description_length": 601,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_412_411",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides functions to convert OCaml abstract syntax trees (ASTs) from version 4.12 to 4.11, handling expressions, patterns, types, modules, class constructs, and structural elements like let bindings, match cases, and signatures. It operates on compiler AST nodes and related types, performing deep transformations to preserve semantic consistency during version downgrades. These utilities are essential for tools requiring compatibility between OCaml compiler versions, such as cross-version code analysis or transformation systems.",
      "description_length": 546,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_406",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides OCaml AST definitions and utilities for version 4.06, including core types like constants, attributes, and toplevel phrases. It supports code analysis and transformation tools by exposing the structure of parsed OCaml programs, along with magic numbers for AST format identification during serialization. Use cases include refactoring tools, linters, and cross-version code migration that rely on direct AST manipulation.",
      "description_length": 442,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_413_412",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides functions to perform lossless downgrades of OCaml abstract syntax trees (ASTs) from version 4.13 to 4.12, focusing on structural conversions of expressions, patterns, types, and Parsetree constructs. It operates on version-specific AST nodes\u2014including module types, class fields, attributes, and open declarations\u2014using recursive traversal to preserve semantic equivalence while reporting version mismatches via explicit error variants. Typical use cases involve cross-version codebase migrations, compiler plugin compatibility layers, or tooling that processes OCaml source code across different compiler releases.",
      "description_length": 636,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Migrate_404_405",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides deep-copy and conversion functions for migrating Abstract Syntax Tree (AST) components between OCaml versions 404 and 405, handling expressions, patterns, types, classes, modules, signatures, and associated metadata. It operates on `From.Parsetree` and `To.Parsetree` types, systematically preserving structural and semantic equivalence during version transitions. These utilities are critical for tools requiring AST compatibility across OCaml releases, such as compilers, linters, or code transformers.",
      "description_length": 525,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_407_408",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides functions to deeply copy and convert OCaml abstract syntax tree (AST) components\u2014such as expressions, patterns, types, classes, modules, and their associated metadata\u2014when transitioning between OCaml versions 407 and 408. It systematically migrates constructs like type declarations, module signatures, class types, and attributes while preserving their structural and semantic relationships, ensuring compatibility for tools or codebases that rely on AST manipulation during compiler version upgrades.",
      "description_length": 523,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_409",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides data types and definitions for working with OCaml 4.09's abstract syntax tree, including constants, attributes, and top-level phrases. It supports operations for parsing, constructing, and transforming OCaml source code representations, targeting use in compilers, linters, and code analysis tools. The module also includes version identifiers for ensuring compatibility during AST migration tasks.",
      "description_length": 419,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_414_500",
      "library": "ocaml-migrate-parsetree",
      "description": "This module converts OCaml abstract syntax trees from version 4.14 to 5.00, handling structures, signatures, top-level phrases, core types, expressions, patterns, cases, type declarations, type extensions, and extension constructors. Each function maps a specific AST node from the older version to its equivalent in the newer version. It is used when writing tools that analyze or transform OCaml code across compiler versions, such as refactoring tools or linters.",
      "description_length": 466,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_409_408",
      "library": "ocaml-migrate-parsetree",
      "description": "This suite of functions enables structural conversion of OCaml's parsetree nodes between compiler versions 409 and 408, focusing on backward compatibility for AST elements like expressions, types, modules, classes, and directives. It operates on hierarchical data structures including row fields, attributes, signatures, and location metadata through deep copying with version-specific adaptations. These utilities are critical for tools processing OCaml code across compiler versions, such as cross-version linters, compilers targeting older AST formats, or analysis tools maintaining compatibility with evolving language features.",
      "description_length": 632,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_408",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides direct access to OCaml 4.08's abstract syntax tree (AST) data structures, including constants, attributes, and top-level phrases, along with version identifiers for AST validation. It supports precise AST manipulation for tasks like code analysis, transformation, and custom PPX rewriting targeting OCaml 4.08. Key data types include syntactic constructs for expressions, patterns, and declarations, used in compiler plugins and source code processing tools.",
      "description_length": 479,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_411_412",
      "library": "ocaml-migrate-parsetree",
      "description": "This module transforms OCaml abstract syntax trees between versions 4.11 and 4.12, handling nodes like expressions, patterns, types, and structural constructs such as module bindings, class types, and extension points. It operates on low-level elements (e.g., constants, location metadata) and complex structures (e.g., recursive flags, type declarations) through deep copying and semantic-preserving conversions. It is essential for tooling that must bridge compiler version differences, such as refactoring utilities or linters processing codebases targeting multiple OCaml releases.",
      "description_length": 585,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_406_405",
      "library": "ocaml-migrate-parsetree",
      "description": "This module converts and deeply copies OCaml abstract syntax tree (AST) nodes between versions 4.06 and 4.05, focusing on expressions, patterns, types, classes, modules, signatures, and metadata like attributes and flags. It ensures safe downgrades by handling version-specific incompatibilities through error reporting and preserves semantic structure during migrations. Use cases include downgrading codebases to older OCaml versions, maintaining cross-version compatibility in toolchains, and enabling analysis tools to process historical AST formats without data loss.",
      "description_length": 572,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_403_402",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides functions to migrate and transform OCaml abstract syntax trees (ASTs) between versions 4.03 and 4.02, focusing on expressions, patterns, types, module and class structures, and associated metadata. It performs deep copies of AST nodes while preserving semantic details like locations, flags, and identifiers, and handles version-specific incompatibilities by reporting errors for unsupported features. These operations enable tools and developers to ensure code compatibility across OCaml compiler versions, particularly when downgrading or interoperating between AST representations.",
      "description_length": 605,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Migrate_413_414",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides deep copy functions that convert abstract syntax tree (AST) nodes from OCaml 4.13 to 4.14, handling expressions, patterns, types, module types, class types, extensions, and structural elements like let bindings, case constructs, and module expressions. It preserves metadata and recursive structure during migration, ensuring compatibility between compiler versions. Such operations are critical for tools processing OCaml code across version boundaries, such as compiler plugins, linters, or automated refactoring systems.",
      "description_length": 544,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_404_403",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides functions to convert and deeply copy OCaml abstract syntax tree (AST) nodes between versions 4.04 and 4.03, handling constructs like expressions, patterns, types, class definitions, module types, and signatures. It preserves semantic structure and location metadata during migration while addressing version-specific differences in AST shape and type definitions. These utilities are particularly useful for tools like PPX rewriters or compilers that need to process code across OCaml versions, including error reporting for unsupported language features encountered during conversion.",
      "description_length": 606,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_410_409",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides deep copying and structural conversion operations for OCaml abstract syntax trees (ASTs) between compiler versions 4.10 and 4.09. It handles migration of expressions, patterns, types, module expressions, class constructs, and top-level declarations while preserving metadata like locations, flags, and type information. The functionality is used to adapt codebases or tooling relying on 4.10 ASTs to work with 4.09 environments, addressing version-specific incompatibilities through targeted node transformations and error reporting for unsupported features.",
      "description_length": 579,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_408_407",
      "library": "ocaml-migrate-parsetree",
      "description": "This module transforms OCaml abstract syntax trees (ASTs) between versions 4.08 and 4.07 by deep-copying and converting parsetree nodes such as expressions, types, modules, class constructs, and attributes, ensuring structural and semantic preservation. It supports use cases like downgrading codebases to older OCaml versions or enabling cross-version tooling by handling migration errors when encountering unsupported 4.08 features.",
      "description_length": 434,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Compiler_libs",
      "library": "ocaml-migrate-parsetree",
      "description": "This module handles OCaml abstract syntax tree (AST) manipulations, providing direct access to AST node definitions and helper functions for traversing and transforming OCaml source code structures. It works with data types representing OCaml's syntactic elements, such as expressions, patterns, and type declarations. Concrete use cases include writing custom code transformers, linters, or refactoring tools that operate on OCaml source code at the AST level.",
      "description_length": 461,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_411_410",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides deep copy functions that translate AST nodes from OCaml 4.11 to 4.10, ensuring structural and metadata preservation. It operates on Parsetree elements such as expressions, types, modules, class constructs, and type declarations, converting them between AST versions through recursive traversal and type-specific transformations. These operations support version compatibility, enabling code migration and tooling interoperability between OCaml releases while maintaining precise source representations.",
      "description_length": 523,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_406_407",
      "library": "ocaml-migrate-parsetree",
      "description": "This module facilitates migration of OCaml abstract syntax trees (ASTs) from version 4.06 to 4.07 through systematic deep copying and translation of nodes, including expressions, patterns, types, and module structures. It processes Parsetree elements like class types, extensions, and declarations, preserving metadata and semantics while adapting to the target version's AST schema. This functionality is essential for maintaining compatibility in toolchains, upgrading projects, and handling deprecated language features with detailed error diagnostics.",
      "description_length": 555,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_414_413",
      "library": "ocaml-migrate-parsetree",
      "description": "This module converts OCaml abstract syntax tree (AST) constructs between versions 4.14 and 4.13, handling expressions, patterns, types, module types, class types, and structural elements like bindings or signatures through direct node-by-node translation. It operates on Parsetree and Asttypes data structures, preserving metadata such as locations, identifiers, and flags while mapping newer AST representations to their older equivalents. Specific use cases include downgrading OCaml codebases to maintain compatibility with older toolchains and detecting unsupported 4.14 features via error handling during migration.",
      "description_length": 620,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_403_404",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides deep-copy and conversion functions for migrating OCaml abstract syntax tree (AST) nodes between version 403 and 404, handling expressions, patterns, types, attributes, class constructs, modules, and associated metadata like flags and locations. It systematically transforms structural elements and their recursive components while preserving semantic relationships and version-specific details. These operations are essential for tools processing OCaml code across compiler versions, such as linters, refactoring utilities, or cross-version analysis frameworks.",
      "description_length": 582,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_411",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides precise definitions for OCaml 4.11's abstract syntax tree, including core data types for constants, expressions, patterns, and attributes. It supports operations for parsing, analyzing, and transforming OCaml source code, specifically targeting compiler extensions, linters, and refactoring tools. The module includes version identifiers critical for ensuring compatibility in AST processing workflows such as ppx rewriting.",
      "description_length": 445,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Ast_500",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides precise definitions for OCaml's abstract syntax tree in version 500, including core data types for constants, language constructs, and AST file identifiers. It supports operations for representing and manipulating parsed OCaml code elements such as literals, attributes, and toplevel phrases, along with utilities to validate AST file headers. Concrete use cases include implementing syntax extensions, performing source code analysis, and ensuring compatibility when serializing or deserializing ASTs.",
      "description_length": 523,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Migrate_parsetree.Migrate_408_409",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides deep conversion functions for migrating OCaml abstract syntax trees (ASTs) between version 4.08 and 4.09, handling constructs like expressions, patterns, types, modules, classes, and attributes. It operates on version-specific AST nodes, preserving structural and semantic properties while adapting representations to match the target version's schema. The conversions are useful for tools requiring AST compatibility across OCaml compiler upgrades, such as refactoring tools or version-agnostic static analyzers.",
      "description_length": 534,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_405",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides direct access to OCaml's version 405 AST definitions, including core types like constants, attributes, and toplevel phrases, along with magic numbers for AST file identification. It works with abstract syntax tree structures used in parsing and compiling OCaml code. Concrete use cases include building custom linting tools, performing source code transformations, and handling AST serialization for analysis or refactoring tasks.",
      "description_length": 451,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_414",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides direct access to the OCaml 4.14 abstract syntax tree (AST) data structures, including types for constants, expressions, patterns, and attributes. It enables precise manipulation of parsed OCaml code, supporting tasks like code analysis, transformation, and generation. Concrete use cases include implementing linters, refactoring tools, and custom compilers targeting OCaml 4.14.",
      "description_length": 400,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_405_404",
      "library": "ocaml-migrate-parsetree",
      "description": "This module transforms Abstract Syntax Tree (AST) nodes between OCaml compiler versions 4.05 and 4.04, handling expressions, patterns, types, class constructs, module declarations, and signature elements through recursive conversion. It systematically preserves structural and semantic relationships during migration, including metadata like locations, flags, and labels. Tools processing OCaml code across version boundaries\u2014such as refactoring utilities, cross-version linters, or compiler plugins\u2014leverage this for compatibility.",
      "description_length": 532,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_412_413",
      "library": "ocaml-migrate-parsetree",
      "description": "This module transforms abstract syntax trees (ASTs) between OCaml versions by converting core constructs like expressions, patterns, types, modules, and class definitions, along with structural elements such as attributes, extensions, and type declarations. It operates on versioned AST representations, preserving semantic relationships while adapting to changes in node structure, flags, and lexical components like locations and identifiers. Designed for tools requiring cross-version compatibility, it enables use cases like PPX rewriters, linters, or compilers that process code across OCaml 4.12 and 4.13 ecosystems.",
      "description_length": 622,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_404",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides precise definitions for OCaml's abstract syntax tree (AST) and related types as they exist in OCaml 4.04. It includes core AST node structures, language construct representations, and version-specific identifiers necessary for AST manipulation and migration. Concrete use cases include cross-version code transformation, syntax analysis, and tooling interoperability with OCaml 4.04 compilers.",
      "description_length": 414,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Ast_410",
      "library": "ocaml-migrate-parsetree",
      "description": "This module provides direct access to the OCaml 4.10 abstract syntax tree (AST) data types and related utilities. It includes core types for representing language constructs such as constants, attributes, and top-level phrases, along with magic numbers for identifying AST file formats. It is used for parsing, analyzing, and transforming OCaml source code in tools like linters, refactoring utilities, and custom compilers.",
      "description_length": 424,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree.Migrate_409_410",
      "library": "ocaml-migrate-parsetree",
      "description": "The functions convert and deeply copy OCaml abstract syntax trees (ASTs) between versions 4.09 and 4.10, focusing on Parsetree and Asttypes structures like expressions, patterns, types, modules, and classes. They systematically adapt node descriptors, recursive flags, attributes, and locations while preserving semantic equivalence during version transitions. These operations are essential for tooling that processes OCaml code across compiler versions, such as linters, refactoring tools, or codebase migration utilities.",
      "description_length": 524,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Migrate_parsetree",
      "library": "ocaml-migrate-parsetree",
      "description": "This module enables cross-version compatibility for OCaml abstract syntax trees (ASTs) by providing deep-copy and structural conversion functions between compiler versions (e.g., 4.02 to 5.00). It operates on Parsetree and Asttypes components\u2014including expressions, patterns, types, and location metadata\u2014to preserve semantic integrity during migrations, supporting tools like refactoring utilities and linters that analyze or transform code across OCaml releases. The implementation systematically addresses version-specific differences in AST structures, signatures, and module systems to ensure interoperability between compiler toolchains.",
      "description_length": 643,
      "index": 91,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 93,
    "meaningful_modules": 92,
    "filtered_empty_modules": 1,
    "retention_rate": 0.989247311827957
  },
  "statistics": {
    "max_description_length": 643,
    "min_description_length": 181,
    "avg_description_length": 450.92391304347825,
    "embedding_file_size_mb": 1.3334980010986328
  }
}