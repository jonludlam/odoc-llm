{
  "package": "linol-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 384,
  "creation_timestamp": "2025-08-18T19:21:11.616400",
  "modules": [
    {
      "module_path": "Linol_lwt.Jsonrpc2.IO",
      "library": "linol-lwt",
      "description": "This module implements asynchronous input/output operations for handling JSON-RPC 2.0 communication over channels. It provides primitives for reading from and writing to input/output channels, managing errors with backtraces, and sequencing asynchronous computations using monadic bindings. Concrete use cases include building JSON-RPC servers and clients that read requests, write responses, and handle exceptions during communication.",
      "description_length": 436,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentUri.Private",
      "library": "linol-lwt",
      "description": "Controls path formatting for document URIs in LSP communication, ensuring correct handling of Windows vs. POSIX-style paths. Works with string-based URIs and file paths. Used internally to normalize paths when sending or receiving document references over LSP in cross-platform editors.",
      "description_length": 286,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.Jsonrpc2.Req_id",
      "library": "linol-lwt",
      "description": "This module represents a request ID used to correlate JSON-RPC requests with their responses. It provides a type alias for an ID from the Linol_jsonrpc module and includes a function to convert the ID to a string. This is useful when handling asynchronous RPC calls where tracking request-response pairs is necessary.",
      "description_length": 317,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DefinitionOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for handling work progress options, specifically supporting optional boolean flags. It provides functions to create instances, convert to and from JSON format using Yojson. This is used to manage progress reporting settings during language server operations.",
      "description_length": 299,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.AnnotatedTextEdit",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing text edits with annotations, including the annotation ID, new text, and a range specifying the edit's location. It provides functions to construct these edit records and serialize them to and from JSON. This structure is used to manage and apply annotated changes to source code, such as those generated by linters or code transformation tools.",
      "description_length": 398,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentRangeFormattingParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in document range formatting operations, including formatting options, a text range, and a document identifier. It provides functions to construct instances and convert to and from JSON format. It is used to configure and pass context when requesting code formatting within a specific range of a document.",
      "description_length": 362,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticTag",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with two variants, `Unnecessary` and `Deprecated`, representing diagnostic tags for code analysis. It includes functions to convert values of type `t` to and from Yojson format for serialization and deserialization. This module is useful for tools that report diagnostic information, such as linters or compilers, where tags need to be persisted or transmitted in JSON format.",
      "description_length": 407,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RenameParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used during a rename operation, including the new name, position, text document identifier, and an optional work done token. It provides functions to construct instances of this structure and to serialize or deserialize them using Yojson. Concrete use cases include handling rename requests in a language server, where precise parameter parsing and JSON conversion are required.",
      "description_length": 430,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Registration",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing registration entries with fields for an identifier, method name, and optional registration options in JSON format. It provides functions to construct these entries, convert them to and from JSON using Yojson, and ensures proper serialization and deserialization for use in LSP (Language Server Protocol) communication. Concrete use cases include managing dynamic registration of capabilities in a language server implementation.",
      "description_length": 482,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeLensParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling code lens parameters in the context of the LSP (Language Server Protocol). It includes fields for tracking partial results, identifying the text document, and managing work done tokens, all supporting asynchronous operations. The structure is used to pass contextual information during code lens resolution, enabling features like on-demand loading of additional data in an editor.",
      "description_length": 431,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RelatedFullDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module constructs and serializes diagnostic reports containing a list of diagnostics and optional related document entries. It handles full or unchanged document diagnostic reports mapped to URIs, with optional result identifiers. Use this to generate structured diagnostic responses for language server protocol interactions.",
      "description_length": 331,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentLinkOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for document link resolution, including whether to use a resolve provider and enable work-done progress tracking. It provides functions to create instances and serialize/deserialize them using Yojson. It is used to configure document link behavior in LSP (Language Server Protocol) implementations.",
      "description_length": 340,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.GlobPattern",
      "library": "linol-lwt",
      "description": "This module defines a type `t` for representing glob patterns, including both absolute and relative patterns. It provides functions to convert between this type and JSON using the `Yojson` library. It is used to handle pattern matching for file paths in a way that supports both standard and relative path specifications.",
      "description_length": 321,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ExecuteCommandOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring command execution options, including a list of commands and an optional work progress flag. It provides functions to construct instances, convert to and from JSON format. Useful for managing settings when executing commands in a JSON-based configuration workflow.",
      "description_length": 316,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SemanticTokenModifiers",
      "library": "linol-lwt",
      "description": "This module defines a set of semantic token modifiers used to annotate symbols in a programming language context. It includes functions to convert these modifiers to and from JSON format using Yojson. Concrete use cases include serializing and deserializing token modifier data for transmission or storage in language server protocols or IDE extensions.",
      "description_length": 353,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentSyncKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing the synchronization kind for text documents, with variants `None`, `Full`, and `Incremental`. It provides functions to convert between this type and Yojson for serialization and deserialization. This is used to handle document sync configurations in language server protocol implementations.",
      "description_length": 335,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensEdit",
      "library": "linol-lwt",
      "description": "This module defines a record type for representing semantic token edits, with fields for token data, deletion count, and start position. It includes functions to create instances and convert to and from JSON format. It is used to encode changes in semantic token sequences for efficient transmission or storage.",
      "description_length": 311,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InitializedParams_",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for handling initialization parameters in an LSP (Language Server Protocol) server. It includes types for client information and server configuration, supporting operations to construct and serialize these structures. Concrete use cases include parsing client-provided initialization data and building responses during the LSP initialization handshake.",
      "description_length": 402,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpContext",
      "library": "linol-lwt",
      "description": "This module defines a context for managing signature help in a language server, specifically handling retriggering and trigger characters. It works with optional `SignatureHelp` values and `SignatureHelpTriggerKind` enums, structured into a record type `t`. Concrete use cases include parsing and serializing signature help state to and from JSON, and constructing contexts with optional fields like active help or trigger character.",
      "description_length": 433,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for signature help features in a language server, supporting document selectors, trigger characters, and progress reporting. It works with text document filters, string lists, and boolean flags to customize when and how signature assistance is provided. Concrete use cases include setting up signature help for specific file types or languages, defining characters that trigger or retrigger help, and enabling work-done progress tracking.",
      "description_length": 480,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to inline value features in a language server. It includes functions to construct the structure, convert it to and from JSON, and supports optional dynamic registration of inline value capabilities. It is used to configure and communicate supported inline value features between a language client and server.",
      "description_length": 390,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CreateFile",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file creation requests with optional annotations and settings, using a record type that includes a URI, annotation ID, and creation options. It provides functions to construct instances of this type, along with serialization and deserialization to and from JSON using Yojson. Concrete use cases include handling file creation events in an LSP (Language Server Protocol) server, where structured data must be passed between components or persisted in a serialized format.",
      "description_length": 524,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentSymbolClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines client capabilities for document symbol features in an LSP server. It includes operations to construct and manipulate capability structures with support for dynamic registration, hierarchical symbols, labels, symbol kinds, and tags. Use cases include configuring symbol-related behavior in an LSP client or server implementation.",
      "description_length": 349,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Locations",
      "library": "linol-lwt",
      "description": "This module handles serialization and deserialization of location data structures used in language server protocol responses. It supports two primary data formats: a list of standard locations and a list of location links, both derived from LSP types. The module is used to convert between these structured location formats and their JSON representations, typically for transmission over LSP-compatible communication channels.",
      "description_length": 426,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SemanticTokensDeltaPartialResult",
      "library": "linol-lwt",
      "description": "This module represents partial results for semantic token delta updates, containing a list of edits. It provides functions to construct instances and serialize/deserialize them using Yojson. It is used to efficiently transmit incremental changes to semantic token data in a language server protocol context.",
      "description_length": 307,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentColorRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering document color providers in a language server. It includes fields for specifying document selectors, an optional registration ID, and progress reporting. The module supports serialization to and from JSON for use in LSP protocol communication.",
      "description_length": 301,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ShowMessageParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing messages with a text body and a type, along with functions to construct instances and convert to and from JSON. It works with strings and a message type enumeration, using Yojson for serialization. Concrete use cases include sending structured messages over a network or storing them in JSON format.",
      "description_length": 353,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionTriggerKind",
      "library": "linol-lwt",
      "description": "This module defines an inline completion trigger kind with two possible states: `Invoked` and `Automatic`. It provides functions to convert between these states and JSON representations using Yojson. This is useful for serializing and deserializing trigger kind data when communicating with language servers or storing configuration settings.",
      "description_length": 342,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering text document handlers, primarily used to specify filters for text documents or notebook cells. It includes functions to create registration options and to serialize/deserialize them using Yojson. A typical use case is configuring which documents a language server should process based on file type or language.",
      "description_length": 355,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceSymbolOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for workspace symbol handling, specifically supporting resolution and progress reporting. It works with boolean values to enable or disable features like `resolveProvider` and `workDoneProgress`. Concrete use cases include customizing symbol lookup behavior in language servers and serializing these settings to and from JSON for communication with clients.",
      "description_length": 399,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CallHierarchyClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to call hierarchy in a JSON-compatible format. It provides functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. Concrete use cases include configuring language server clients to handle call hierarchy requests and exchanging capability information in LSP (Language Server Protocol) communications.",
      "description_length": 460,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeLensClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to code lens features in a language server. It includes functions to create and serialize the structure, primarily working with optional boolean values. It is used to configure and communicate code lens support in JSON format during language server initialization.",
      "description_length": 346,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Pattern",
      "library": "linol-lwt",
      "description": "This module defines a pattern type as a string and provides functions to convert between this type and Yojson.Safe.t. It supports parsing and serializing patterns to and from JSON format. Concrete use cases include handling pattern data in JSON-based configurations or APIs.",
      "description_length": 274,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureInformation",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing signature information in a language server protocol context. It includes fields for the label, active parameter index, documentation, and parameters, supporting optional values for flexibility. The module provides functions to construct instances, convert to and from JSON, and works directly with parameter lists and markup content types.",
      "description_length": 393,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeDefinitionRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering type definition handlers in a language server. It supports specifying document filters, an identifier, and progress reporting settings. The module is used to configure how type definition requests are handled based on document types and enables structured data serialization via Yojson.",
      "description_length": 344,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceFoldersInitializeParams",
      "library": "linol-lwt",
      "description": "This module handles initialization parameters for workspace folders in a language server protocol context. It provides functions to create, serialize, and deserialize a structure that optionally contains a list of workspace folders. Use this module when configuring or parsing LSP initialization requests that include workspace folder information.",
      "description_length": 347,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceSymbolRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for workspace symbol registration, including whether to enable a resolve provider and work done progress tracking. It provides functions to create these options, convert them to and from JSON format using Yojson. Concrete use cases include setting up symbol resolution behavior in language server implementations and serializing configuration for transport or storage.",
      "description_length": 410,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeleteFile",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file deletion operations, including an optional annotation ID, deletion options, and a URI. It provides functions to construct instances, convert to and from JSON using Yojson. Concrete use cases include handling file deletion requests in a language server protocol implementation.",
      "description_length": 335,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for inline completion registration, including document selectors, an optional identifier, and progress tracking. It supports creating and serializing these options with functions like `create`, `t_of_yojson`, and `yojson_of_t`. Concrete use cases include setting up inline completion features in an LSP server with specific document filters and progress reporting.",
      "description_length": 406,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensOptions",
      "library": "linol-lwt",
      "description": "This module defines and manipulates semantic token options for a language server, supporting configuration of full token delivery, token legends, range-based token reporting, and work progress tracking. It works with record types representing token options and legends, along with JSON serialization functions. It is used to configure how semantic tokens are requested and processed in the context of a language server protocol implementation.",
      "description_length": 443,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlineValueContext",
      "library": "linol-lwt",
      "description": "This module defines a context type for inline value evaluation, containing a frame ID and a stopped location range. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for debugging scenarios where variable values are evaluated at specific code locations.",
      "description_length": 295,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.IO_lwt",
      "library": "linol-lwt",
      "description": "This module implements asynchronous input/output operations using Lwt, providing functions to read from and write to channels, handle exceptions with backtraces, and sequence or combine I/O actions. It works with Lwt I/O channels, bytes, strings, and exceptions, offering concrete operations like reading lines, writing strings, and error handling with precise backtrace capture. Use cases include building non-blocking I/O pipelines, handling network streams, and writing asynchronous file or socket I/O logic.",
      "description_length": 511,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkspaceFolder",
      "library": "linol-lwt",
      "description": "This module defines a workspace folder with a name and URI, providing functions to create instances and serialize them to and from JSON. It works with strings and `Linol_lsp.Uri0.t` values, structured as a record type. Concrete use cases include managing project folder metadata in a language server protocol implementation.",
      "description_length": 324,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressEnd",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing the end of a work done progress notification, containing an optional message. It provides functions to create a value of this type, and to convert to and from Yojson for serialization. This is used to signal the completion of a long-running operation with an optional final message in JSON-RPC communication.",
      "description_length": 352,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines client capabilities for semantic token handling in a language server, supporting operations to configure token formats, request types, and feature flags. It works with structured types representing client capabilities, including nested configurations for full/delta updates and range requests. Concrete use cases include specifying supported token formats, enabling dynamic registration, and configuring overlapping or multiline token support for a language server.",
      "description_length": 485,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for semantic token registration in a language server, supporting both full and delta-based token updates. It works with structured data types like `TextDocumentFilter`, `NotebookCellTextDocumentFilter`, and `SemanticTokensLegend` to describe document scope and token encoding rules. Concrete use cases include setting up semantic highlighting in editors by specifying document filters and token legends during server initialization.",
      "description_length": 474,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.UnregistrationParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling a list of unregistration requests in the context of the LSP (Language Server Protocol). It provides functions to create instances, convert to and from JSON format using Yojson, and ensures compatibility with LSP message serialization requirements. It is used specifically for managing client unregistrations during LSP session teardown or dynamic capability adjustments.",
      "description_length": 420,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentHighlightClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to document highlighting in a language server. It includes functions to create the structure, serialize it to JSON, and deserialize it from JSON. It is used to configure whether dynamic registration of document highlight capabilities is supported by the client.",
      "description_length": 343,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Color",
      "library": "linol-lwt",
      "description": "This module defines a color type with red, green, blue, and alpha components, each represented as integers. It provides functions to construct color values and to convert between color values and Yojson representations. It is used for handling RGBA color data in JSON format, particularly in serialization and deserialization workflows.",
      "description_length": 336,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DefinitionParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for holding parameters used in a language server protocol request, specifically for definition-related operations. It includes fields for tracking partial results, work tokens, and document positions, along with functions to construct and serialize the structure. It is used to pass contextual information when handling definition lookups in an LSP server implementation.",
      "description_length": 408,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ShowDocumentResult",
      "library": "linol-lwt",
      "description": "This module defines a result type for document display operations, with a single boolean field indicating success. It provides functions to construct instances, convert to and from JSON using Yojson. Used to return the outcome of document rendering in Lwt-based applications.",
      "description_length": 275,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeHierarchyClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to type hierarchy in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is configuring and exchanging client capability settings during the initialization of a language server connection.",
      "description_length": 404,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentHighlightParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for document highlight parameters, including position, text document identifier, and optional tokens. It provides functions to construct instances, convert to and from JSON format. Used to request document highlights in a language server protocol implementation.",
      "description_length": 299,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ChangeAnnotationIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type `t` as a string alias for identifiers used in change annotations. It includes functions to convert values of type `t` to and from Yojson.Safe.t format, enabling JSON serialization and deserialization. These operations support handling change annotations in JSON-based data exchange, such as storing or transmitting annotated document changes.",
      "description_length": 369,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ReferenceRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering reference providers in a language server, supporting configuration through document selectors and progress reporting. It works with document filter types to specify which documents or notebook cells to apply the reference feature to, and includes a flag to enable work done progress tracking. Concrete use cases include setting up reference resolution capabilities for specific file types or notebook contexts in an LSP-based editor integration.",
      "description_length": 489,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.LogTraceParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for log trace parameters, including a required message and an optional verbose string. It provides functions to create instances, convert to and from JSON using Yojson, and parse JSON into the structured type. Concrete use cases include logging diagnostic information with optional verbose context and serializing log data for storage or transmission.",
      "description_length": 388,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeclarationRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering document declarations, supporting filters for text documents or notebook cells, an optional identifier, and progress tracking. It provides functions to construct these options, convert them to and from JSON format. It is used to specify parameters when registering features like code declarations in an LSP server.",
      "description_length": 372,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentSymbol",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing document symbols in a codebase, such as functions, variables, or classes, with metadata like name, kind, range, and optional details like deprecation status or tags. It provides functions to construct symbol instances and serialize/deserialize them to and from JSON. It is used to model hierarchical code structures for features like outline views or symbol navigation in an editor.",
      "description_length": 432,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocument",
      "library": "linol-lwt",
      "description": "This module defines a notebook document structure with operations to create and serialize instances. It works with lists of notebook cells, JSON metadata, URIs, and versioned documents. Use it to construct or parse notebook documents from JSON, manage their content, and access structured data like cells and metadata directly.",
      "description_length": 327,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentHighlightRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for document highlight registration, including a list of document filters and an optional work done progress flag. It provides functions to create instances and convert to and from JSON format. It is used to specify which documents should support highlight operations and track progress in an LSP server.",
      "description_length": 346,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities in a language server protocol implementation, with optional fields for notebook documents, text documents, workspace features, and other client-specific settings. It provides functions to construct capability instances with optional components and to serialize or deserialize them using Yojson. Concrete use cases include configuring client-side behavior for features like code completion, diagnostics, and document synchronization in an LSP-based editor integration.",
      "description_length": 541,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FullDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module defines a data structure for storing a list of diagnostics along with an optional result identifier. It includes functions to construct instances, convert to and from JSON format using Yojson. It is used to represent and serialize diagnostic reports for full documents in a language server context.",
      "description_length": 310,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentSyncRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module handles serialization and deserialization of notebook document sync registration options using Yojson. It defines a type `t` as a unit and provides functions to convert between Yojson values and this type. It is used to manage configuration data for notebook document synchronization in LSP (Language Server Protocol) implementations.",
      "description_length": 346,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentChangeEvent",
      "library": "linol-lwt",
      "description": "This module represents changes to notebook documents, including text content modifications, cell structure updates, and metadata changes. It works with nested records containing versioned text documents, cell arrays, and JSON metadata. It is used to capture and propagate edits in a notebook interface, such as when cells are added, removed, or their content is updated.",
      "description_length": 370,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FileOperationPatternOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for file operation patterns, specifically supporting case-insensitive matching through the `ignoreCase` field. It provides functions to create and serialize these options, enabling consistent handling of file pattern operations in environments requiring JSON configuration. The module works directly with `Yojson.Safe.t` for JSON serialization and deserialization.",
      "description_length": 406,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SymbolKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic variant type representing different kinds of symbols in a programming context, such as files, modules, classes, functions, and various data types. It includes functions to convert values between this type and Yojson.Safe.t for serialization and deserialization. This module is useful for tools that process or analyze code structures, such as language servers or static analyzers, where symbol kinds need to be exchanged in JSON format.",
      "description_length": 470,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookCellTextDocumentFilter",
      "library": "linol-lwt",
      "description": "This module defines a type `t` that represents a filter for notebook cell text documents, optionally specifying a language and a notebook identifier either as a string or a document filter. It provides functions to construct instances of this type, along with serialization and deserialization to and from JSON using `Yojson`. Concrete use cases include configuring language-specific notebook filters for editors or tools that process notebook-based source files.",
      "description_length": 463,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in semantic token requests, including optional tokens for partial results and work done tracking, along with a text document identifier. It provides functions to create instances of this structure, and to convert to and from JSON format using Yojson. This module is used to handle and serialize the parameters passed during semantic token processing in a language server protocol implementation.",
      "description_length": 452,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentRangesFormattingParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for specifying formatting parameters over multiple ranges in a text document, including formatting options, the ranges to format, and an optional work done token. It provides functions to construct instances of this structure and serialize/deserialize them using Yojson. It is used to send batched formatting requests to a language server, targeting specific regions within a document.",
      "description_length": 422,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RegistrationParams",
      "library": "linol-lwt",
      "description": "This module handles the creation and JSON serialization of registration parameters containing a list of registration items. It provides functions to construct a parameter object, convert it to and from JSON format. Useful for managing dynamic registration data in LSP (Language Server Protocol) interactions.",
      "description_length": 308,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeleteFileOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for file deletion options with optional flags to ignore non-existent files and enable recursive deletion. It provides functions to construct these options and serialize/deserialize them to and from JSON using Yojson. Concrete use cases include configuring file removal behavior in a filesystem management tool or a build system that needs to clean up directories selectively.",
      "description_length": 412,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentItem",
      "library": "linol-lwt",
      "description": "This module defines a record type for representing text document items with fields for language ID, content, URI, and version. It provides functions to construct instances, and serialize or deserialize them using Yojson. It is used to manage document state in language server protocol implementations, where precise document metadata and content versioning are required.",
      "description_length": 370,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentFilter",
      "library": "linol-lwt",
      "description": "This module defines a filter for text documents based on language, URI scheme, and file pattern. It includes a function to create filters with optional criteria such as language identifier, URI scheme, or glob pattern. Use this to specify which documents a language server should handle, such as filtering for JavaScript files over HTTP or Markdown files on disk.",
      "description_length": 363,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeLensOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for code lens features in an LSP (Language Server Protocol) implementation. It includes fields to enable or disable the resolve provider and work done progress tracking. The module provides functions to create instances, and serialize/deserialize them to and from JSON using Yojson.",
      "description_length": 324,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeTextDocumentParams",
      "library": "linol-lwt",
      "description": "Handles text document change events by capturing versioned document identifiers and associated content changes. It supports creating instances with specified content updates and document versions, and serializing or deserializing these instances using Yojson. This module is used to process document modification notifications in language server protocol implementations.",
      "description_length": 371,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InsertTextMode",
      "library": "linol-lwt",
      "description": "This module defines two insertion modes for handling text in an editor: `AsIs`, which inserts text without modification, and `AdjustIndentation`, which automatically adjusts indentation based on context. It includes functions to serialize and deserialize these modes using Yojson for configuration or state persistence. These modes are used to control how pasted or inserted text behaves in an editing buffer, particularly in structured documents where indentation matters.",
      "description_length": 473,
      "index": 75,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.TextDocumentChangeRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering text document change notifications, including the document selector and synchronization kind. It supports operations to create registration options and serialize/deserialize them using Yojson. It is used to configure how text document changes are synchronized between a client and a language server.",
      "description_length": 343,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentDiagnosticReportPartialResult",
      "library": "linol-lwt",
      "description": "This module represents partial results for document diagnostic reports in the context of the LSP (Language Server Protocol). It handles structured data associating URIs with either full or unchanged document diagnostic reports, supporting serialization and deserialization via Yojson. It is used to efficiently transmit and process diagnostic information for multiple documents during language server operations.",
      "description_length": 412,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileEvent",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file change events, including the type of change and the associated file URI. It provides functions to construct these events and to serialize and deserialize them using Yojson. Concrete use cases include tracking file modifications in a language server or handling file system events in a distributed system.",
      "description_length": 363,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring call hierarchy operations, specifically supporting optional work-done progress tracking. It provides functions to create instances, serialize to JSON, and deserialize from JSON. This structure is used to pass configuration options when initiating call hierarchy requests in LSP (Language Server Protocol) implementations.",
      "description_length": 374,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentHighlightKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with three variants representing different kinds of document highlights: `Text`, `Read`, and `Write`. It includes functions to convert values of this type to and from Yojson format. This module is used to serialize and deserialize document highlight kinds for communication in LSP (Language Server Protocol) contexts.",
      "description_length": 348,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceSymbol",
      "library": "linol-lwt",
      "description": "This module defines a workspace symbol type with fields for name, kind, location, container name, data, and tags, supporting structured representation of symbols in a codebase. It provides functions to construct symbols, convert them to and from JSON format using Yojson, and manage optional metadata. Concrete use cases include indexing and querying symbols across files in an editor or IDE integration.",
      "description_length": 404,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidOpenTextDocumentParams",
      "library": "linol-lwt",
      "description": "This module handles the creation and JSON serialization of parameters for a text document open event. It works with the `TextDocumentItem` type to capture document details like URI, language, and content. Concrete use cases include parsing incoming JSON requests from an LSP client and constructing valid document open payloads for transmission.",
      "description_length": 345,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyIncomingCall",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing incoming calls in a call hierarchy, consisting of a source function and a list of ranges indicating where it is called. It provides functions to construct instances, convert to and from JSON using Yojson. This is used to support features like \"Find Incoming Calls\" in an LSP-based editor, enabling navigation from a function's usage sites back to its definition.",
      "description_length": 406,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentLinkParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in document link resolution, including optional tokens for partial results and work progress tracking. It provides functions to construct instances, convert to and from JSON format. It is used to manage contextual information during document link processing in language server protocol implementations.",
      "description_length": 359,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ImplementationOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for handling progress reporting in LSP implementations, specifically supporting a `workDoneProgress` flag. It provides functions to create instances, and to convert to and from JSON representations using Yojson. It is used to configure server capabilities in LSP-related code where progress tracking is required.",
      "description_length": 353,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SelectedCompletionInfo",
      "library": "linol-lwt",
      "description": "This module represents and serializes information about a selected text completion, including the range of the completion and the inserted text. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for handling completion responses in language server protocol implementations.",
      "description_length": 315,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ColorPresentation",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing color presentation data with optional text edits and a label. It provides functions to construct instances, convert to and from JSON, and manage text edit operations. It is used to handle color formatting and text adjustments in code editors supporting language server protocol features.",
      "description_length": 331,
      "index": 87,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeActionKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` representing various code action kinds used in language server protocols, such as `QuickFix`, `Refactor`, and `SourceOrganizeImports`. It includes functions `t_of_yojson` and `yojson_of_t` for converting between the type and Yojson.Safe.t for serialization and deserialization. This module is used to handle code actions in LSP requests, enabling features like automated refactoring and source code organization.",
      "description_length": 455,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyOutgoingCall",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing outgoing calls in a call hierarchy, with functions to create instances and serialize/deserialize them using Yojson. It works with lists of ranges and call hierarchy items to model source locations and target call information. Concrete use cases include building and transmitting call hierarchy data in language server implementations.",
      "description_length": 384,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ResourceOperationKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic variant type representing resource operations such as creation, renaming, and deletion. It includes functions to convert these operation values to and from Yojson representations. This is useful for serializing and deserializing resource operation data when working with JSON-based APIs or storage formats.",
      "description_length": 340,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionContext",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inline completion context with optional selected completion info and a trigger kind. It provides functions to create instances, and serialize/deserialize them using Yojson. It is used to manage contextual data during inline code completion in an LSP-based editor integration.",
      "description_length": 316,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ReferenceParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for holding parameters used in a reference resolution request, including contextual information, document position, and optional tokens for partial results and work tracking. It provides functions to construct instances of this structure and to serialize/deserialize it using Yojson. This structure is used to pass parameters between LSP clients and servers when resolving references in a document.",
      "description_length": 435,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyPrepareParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for preparing call hierarchy parameters, including position, text document identifier, and an optional work done token. It provides functions to create instances, and serialize/deserialize to and from JSON. It is used to pass parameters when initiating call hierarchy operations in a language server protocol context.",
      "description_length": 354,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticSeverity",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing diagnostic severity levels with variants `Error`, `Warning`, `Information`, and `Hint`. It includes functions `t_of_yojson` and `yojson_of_t` for converting between JSON values and the severity type. These conversions are useful when serializing or deserializing diagnostic data for communication between tools or storage.",
      "description_length": 366,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.HoverClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines hover client capabilities for a language server, specifically supporting configuration of content formatting options and dynamic registration. It works with optional lists of markup kinds and boolean flags. Use cases include initializing and serializing client capability settings for hover features in a language server protocol implementation.",
      "description_length": 365,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeActionClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for specifying client capabilities related to code actions in a language server protocol implementation. It includes types for resolve support, code action kinds, and literal support, along with a main capabilities type that aggregates optional features like dynamic registration, data support, and change annotation handling. The module is used to configure and communicate client-side code action capabilities between an LSP client and server.",
      "description_length": 495,
      "index": 96,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeActionOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for code actions, including supported kinds, resolution capability, and progress reporting. It provides functions to create and serialize these options using LSP and Yojson standards. Concrete use cases include setting up code action capabilities in an LSP server and converting between JSON and OCaml representations for transport or storage.",
      "description_length": 385,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inline value workspace client capabilities, primarily supporting a refresh operation. It includes functions to create instances, serialize to JSON, and deserialize from JSON. A concrete use case is configuring language server clients to handle inline value refresh requests during debugging sessions.",
      "description_length": 341,
      "index": 98,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.TypeHierarchyItem",
      "library": "linol-lwt",
      "description": "This module defines a record type for representing items in a type hierarchy, with fields for metadata like name, kind, ranges, and associated data. It provides functions to construct these records, convert them to and from JSON using Yojson. It is used to model type hierarchy information in language server protocol implementations, specifically for features like type navigation and symbol exploration.",
      "description_length": 405,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileSystemWatcher",
      "library": "linol-lwt",
      "description": "This module represents file system watch configurations using glob or relative patterns and optional watch kinds. It provides functions to create these configurations and serialize or deserialize them using Yojson. Concrete use cases include defining which files or directories to monitor for changes in an LSP server.",
      "description_length": 318,
      "index": 100,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.MarkupKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic variant type with two constructors, `PlainText` and `Markdown`, representing different markup formats. It includes functions to convert values of this type to and from Yojson representation, enabling JSON serialization and deserialization. This is useful when handling configuration or data inputs that specify content formatting in JSON-based interfaces.",
      "description_length": 389,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressReport",
      "library": "linol-lwt",
      "description": "This module defines a data structure for reporting progress in long-running operations, including optional fields for cancellation status, descriptive messages, and completion percentage. It provides functions to construct progress reports, and to serialize and deserialize them using Yojson. This module is useful for implementing progress tracking in asynchronous tasks, such as file transfers or background computations, where status updates need to be communicated over a network or to a user interface.",
      "description_length": 507,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.GeneralClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines client capabilities for handling stale requests and optional features in a language server protocol. It includes operations to create and manipulate capability structures with fields for markdown support, position encodings, regular expressions, and stale request handling. Concrete use cases include configuring client behavior for cancellation and retry policies during language server communication.",
      "description_length": 422,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentOnTypeFormattingOptions",
      "library": "linol-lwt",
      "description": "This module defines document formatting options triggered by specific characters, using a record type with a first trigger character and an optional list of additional triggers. It provides functions to create instances, convert to and from JSON using Yojson, and specify formatting behavior based on typed characters. Concrete use cases include configuring auto-formatting in text editors based on user-defined trigger characters.",
      "description_length": 431,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentOnTypeFormattingParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling document formatting parameters triggered by typing. It includes fields for the character typed, formatting options, cursor position, and text document identifier, along with functions to construct and serialize the structure. It is used to pass formatting context data between an editor and a language server during on-the-fly code formatting.",
      "description_length": 393,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeActionRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for code actions in an LSP server, including supported action kinds, document selectors, and optional capabilities like resolution and progress reporting. It works with lists of code action kinds, document filters, and boolean flags. Use this to specify how a code action provider should behave when integrated with an editor like VS Code.",
      "description_length": 381,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceUnchangedDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module defines a diagnostic report structure for tracking unchanged documents in a workspace. It includes operations to create reports with a result ID, URI, and optional version, and supports JSON serialization and deserialization. It is used to maintain diagnostic state across editing sessions without reprocessing unchanged files.",
      "description_length": 339,
      "index": 107,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SemanticTokensDeltaParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling semantic token delta parameters in the context of the LSP (Language Server Protocol). It includes fields for partial and previous result identifiers, a text document identifier, and an optional work-done token, supporting efficient incremental updates. The module provides functions to construct instances, and serialize or deserialize them using Yojson for communication between client and server.",
      "description_length": 448,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeLensWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing workspace client capabilities related to code lens refresh support. It includes functions to create instances, serialize to JSON, and deserialize from JSON. It is used to configure and exchange code lens capabilities between a language server and client.",
      "description_length": 304,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.HoverParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling hover request parameters in a language server protocol implementation. It includes fields for the cursor position, text document identifier, and an optional work done token, with support for JSON serialization and deserialization. The module is used to pass contextual information when requesting hover content, such as displaying type information or documentation at a specific location in a text editor.",
      "description_length": 455,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelp",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing signature help information in a language server protocol implementation. It includes fields for tracking the active parameter and signature indices, along with a list of signature information entries. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 361,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentHighlight",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing document highlights in a text editor, including a range and an optional highlight kind. It provides functions to construct highlights, convert them to and from JSON format using Yojson. This is used to serialize and deserialize highlight data for features like syntax highlighting or reference navigation in an LSP-based editor.",
      "description_length": 382,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentOnTypeFormattingRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering document-on-type formatting handlers, specifying document selectors and trigger characters that initiate formatting. It supports operations to create configuration instances and serialize or deserialize them using Yojson. The module is used to configure formatting behavior in language servers based on file type or notebook cell context.",
      "description_length": 382,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CreateFileOptions",
      "library": "linol-lwt",
      "description": "This module defines options for file creation with `ignoreIfExists` and `overwrite` flags. It provides functions to construct these options, along with serialization and deserialization to and from JSON. It is used to configure file creation behavior in Lwt-based I/O operations.",
      "description_length": 279,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionList",
      "library": "linol-lwt",
      "description": "This module defines a structure for managing lists of inline completion items, primarily used in language server protocol implementations. It provides functions to construct these lists and serialize or deserialize them using Yojson. Concrete use cases include handling code completion suggestions sent from a language server to a client editor.",
      "description_length": 345,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inline completion client capabilities with a single field indicating dynamic registration support. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for configuring language server clients that support inline completions.",
      "description_length": 308,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for inline value registration in a language server, including document selectors, an optional identifier, and progress tracking. It supports creating and serializing these options using `create`, `t_of_yojson`, and `yojson_of_t`. It is used to specify when and how inline values should be registered during language server operation.",
      "description_length": 375,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Definition",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` that represents either a single location or a list of locations, using variants. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This is used to handle definition responses in a language server protocol implementation, where definitions can be singular or multiple.",
      "description_length": 382,
      "index": 118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FailureHandlingKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic variant type for handling failures in different contexts, such as aborting, performing transactional rollbacks, text-only transactional recovery, or undo operations. It includes functions to convert values between this type and Yojson representations. This enables serialization and deserialization of failure handling strategies, useful in configurations or state persistence scenarios.",
      "description_length": 421,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ImplementationParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in implementing LSP (Language Server Protocol) requests, specifically handling document identifiers, position data, and optional tokens. It includes functions to construct parameter values and serialize or deserialize them using Yojson. Concrete use cases include managing request metadata in LSP server implementations, such as tracking progress with `workDoneToken` and identifying source documents and positions.",
      "description_length": 472,
      "index": 120,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DidCloseTextDocumentParams",
      "library": "linol-lwt",
      "description": "This module handles parameters for a text document close event in an LSP server. It includes serialization to and from JSON and constructs the event with a text document identifier. It is used when a client signals that a text document has been closed.",
      "description_length": 252,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceFullDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module defines a data structure for reporting diagnostics associated with a specific document version in a workspace. It includes functions to construct reports with diagnostic items, an optional result ID, document URI, and version number. The module supports serialization to and from JSON, enabling storage or transmission of diagnostic results for a specific document state.",
      "description_length": 383,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ResourceOperation",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing resource operations with optional annotations and a specific kind. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for serializing and deserializing operation data in web services or distributed systems.",
      "description_length": 297,
      "index": 123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SemanticTokensLegend",
      "library": "linol-lwt",
      "description": "This module defines a structure for representing semantic token legends, specifically through a type `t` that holds lists of token modifiers and types. It provides functions to construct instances of this structure, as well as to serialize and deserialize them using Yojson. It is used to manage metadata for semantic highlighting in language server protocols, enabling precise token classification in editors.",
      "description_length": 410,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RenameFileOptions",
      "library": "linol-lwt",
      "description": "This module defines options for file renaming operations, specifically handling behaviors for `ignoreIfExists` and `overwrite`. It supports parsing and serializing these options to and from JSON using Yojson. Concrete use cases include configuring rename behavior in file management workflows and persisting or transmitting these settings across systems.",
      "description_length": 354,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeclarationClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to declaration features in a language server protocol. It includes functions to construct the structure with optional fields for dynamic registration and link support, and to serialize or deserialize it using Yojson. Concrete use cases include configuring and exchanging client capability settings during language server initialization.",
      "description_length": 418,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.LinkedEditingRanges",
      "library": "linol-lwt",
      "description": "This module defines a data structure for managing linked editing ranges, including an optional word pattern. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for implementing features like simultaneous editing of multiple code sections in an IDE, where ranges indicate editable regions and the word pattern restricts valid edits.",
      "description_length": 376,
      "index": 127,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentSymbolParams",
      "library": "linol-lwt",
      "description": "This module defines parameters for requesting document symbols, including identifiers for partial results, text documents, and work done tokens. It provides functions to construct these parameters, convert them to and from JSON format. It is used to manage symbol information in a document during language server operations.",
      "description_length": 324,
      "index": 128,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.LocationLink",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing a link between source code locations, typically used for features like \"Go to Definition\" or \"Find References\" in IDEs. It includes functions to construct the link with optional origin and target ranges, and to serialize/deserialize the structure to/from JSON. The module works with URI and range types to precisely identify positions in source files, enabling navigation across different files or within the same file.",
      "description_length": 469,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentFormattingOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for document formatting options, specifically supporting a `workDoneProgress` flag. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for configuring formatting behavior in tools that process or transform structured documents.",
      "description_length": 309,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeHierarchyOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring type hierarchy operations with an optional work-done progress flag. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for managing hierarchical type relationships with progress tracking in JSON-based workflows.",
      "description_length": 309,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MonikerKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing the kind of a moniker as either `Import`, `Export`, or `Local`. It includes functions to convert values of this type to and from Yojson format. This enables serialization and deserialization of moniker kinds, typically used when exchanging data with external systems or storing metadata in JSON format.",
      "description_length": 346,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WatchKind",
      "library": "linol-lwt",
      "description": "This module defines a variant type representing file system watch events: creation, modification, deletion, and other events with a custom string identifier. It includes functions to convert these event types to and from Yojson representations. Use this module to handle and serialize file system event notifications in Lwt-based applications.",
      "description_length": 343,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InitializeParams",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for handling initialization parameters in a language server protocol (LSP) context. It includes types for client information and initialization parameters, along with constructors and JSON serialization functions. It is used to configure a language server during the initialization handshake, capturing client capabilities, root paths, workspace folders, and other session-specific settings.",
      "description_length": 441,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ProgressToken",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` that represents progress tokens as either integers or strings. It includes functions to convert values between this type and Yojson.Safe.t for JSON serialization and deserialization. It is used to handle progress tracking identifiers in JSON-based communication, such as in language server protocol implementations.",
      "description_length": 358,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Command",
      "library": "linol-lwt",
      "description": "This module defines a command structure with a title, command identifier, and optional JSON-encoded arguments. It provides functions to construct commands, and to serialize and deserialize them using Yojson. It is used to represent and manipulate LSP (Language Server Protocol) commands in a JSON-compatible format.",
      "description_length": 315,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueEvaluatableExpression",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing an inline value evaluatable expression with an optional expression string and a range. It provides functions to create instances, serialize to, and deserialize from JSON using Yojson. Useful for handling inline evaluation data in a language server protocol implementation.",
      "description_length": 322,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TraceValues",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic variant type `t` representing different levels of trace verbosity, including `Compact`, `Off`, `Messages`, and `Verbose`. It provides direct serialization and deserialization functions to and from Yojson for these trace level values. This module is useful for configuring logging output in applications that require fine-grained control over trace message detail, such as network services or distributed systems.",
      "description_length": 446,
      "index": 138,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.TextDocumentIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type `t` that wraps a URI to identify text documents, along with functions to create instances and serialize/deserialize them using Yojson. It works with `Linol_lsp.Uri0.t` and `Yojson.Safe.t` types. A concrete use case is handling document identifiers in LSP (Language Server Protocol) requests over Lwt-based async communication.",
      "description_length": 353,
      "index": 139,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DidChangeWatchedFilesParams",
      "library": "linol-lwt",
      "description": "This module represents parameters for handling file change events in a language server protocol. It provides functions to construct and serialize/deserialize a list of file events, enabling tracking of changes to watched files. It is used to process notifications about file modifications sent from a client to the server.",
      "description_length": 322,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.RenameClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to renaming operations in a language server. It includes fields to indicate support for dynamic registration, change annotations, and preparation steps, along with a default behavior setting for preparation. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 396,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyOutgoingCallsParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in outgoing call hierarchy requests, including a call hierarchy item and optional tokens for partial results and work progress. It provides functions to construct instances, convert to and from JSON format. Used to manage and serialize call hierarchy navigation parameters in LSP-compliant tools.",
      "description_length": 353,
      "index": 142,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SelectionRangeOptions",
      "library": "linol-lwt",
      "description": "This module defines a single data type `t` with an optional boolean field `workDoneProgress`. It provides functions to create instances of `t`, and to convert between `t` and Yojson representations. It is used to configure selection range options in LSP-related code, particularly for indicating progress reporting capabilities.",
      "description_length": 328,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionItemLabelDetails",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with optional `description` and `detail` fields, representing additional information for completion items. It provides functions to construct values of this type, and to serialize and deserialize them using Yojson. It is used to enrich code completion suggestions in language server implementations by attaching supplementary metadata.",
      "description_length": 366,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeActionTriggerKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with two variants, `Invoked` and `Automatic`, representing the possible triggers for code actions. It provides functions to convert values of this type to and from Yojson format. This module is used to serialize and deserialize code action trigger kinds when communicating with language clients over LSP.",
      "description_length": 335,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MessageActionItem",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing message action items with a title. It provides functions to create instances, serialize to and from JSON using Yojson. It is used to manage actionable items in messages that require structured title data.",
      "description_length": 258,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueVariableLookup",
      "library": "linol-lwt",
      "description": "This module defines a record type for configuring inline value variable lookups, including case sensitivity, a range, and an optional variable name. It provides functions to create instances and serialize/deserialize them using Yojson. It is used to pass configuration data for inline value evaluation in a language server protocol implementation.",
      "description_length": 347,
      "index": 147,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.RegularExpressionsClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing regular expression client capabilities, including the engine name and optional version. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to serialize and deserialize capability information for communication in a client-server context.",
      "description_length": 342,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ReferenceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to dynamic registration, with functions to create instances and serialize to or from JSON. It includes a record type with an optional boolean field for dynamic registration support. Use this module when configuring or exchanging client capability information in a JSON-based communication protocol.",
      "description_length": 380,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressCancelParams",
      "library": "linol-lwt",
      "description": "This module handles cancellation parameters for work progress tracking, specifically supporting cancellation via integer or string tokens. It provides functions to create a cancellation parameter instance, and to convert between JSON representations and the internal type. Useful for implementing cancellation logic in asynchronous operations where progress is monitored, such as in language server protocol extensions.",
      "description_length": 419,
      "index": 150,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing workspace client capabilities in an LSP (Language Server Protocol) implementation. It includes fields for optional features like applying edits, code lens, diagnostics, configuration changes, file watching, command execution, and more. The module provides functions to construct this structure, convert it to and from JSON, and supports specifying capabilities such as workspace folder support or semantic token handling.",
      "description_length": 471,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FormattingOptions",
      "library": "linol-lwt",
      "description": "This module defines a set of formatting options for text manipulation, including controls for newlines, spacing, and trimming. It provides functions to construct these options, convert them to and from JSON format. It is used to configure text formatting behavior in editors or code formatters where precise control over whitespace and line endings is required.",
      "description_length": 361,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionList",
      "library": "linol-lwt",
      "description": "This module constructs and manipulates completion lists for code editors, handling insertion and replacement ranges, commit characters, text formatting, and metadata. It works with LSP completion items, ranges, and JSON data structures to define how suggestions should be applied in an editor context. Concrete use cases include building auto-completion responses in language servers, specifying how selected suggestions modify source code, and customizing insertion behavior based on user input.",
      "description_length": 496,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeDefinitionClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to type definition features in a language server. It includes functions to construct the structure with optional fields for dynamic registration and link support, and to serialize or deserialize it using Yojson. Concrete use cases include configuring language server clients and exchanging capability information over JSON-based protocols.",
      "description_length": 421,
      "index": 154,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SemanticTokensWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing workspace client capabilities related to semantic tokens in a language server. It includes functions to create a capability record with an optional refresh support flag, and to serialize and deserialize the record using Yojson. A concrete use case is configuring a language server's response to semantic token requests based on client-provided capabilities.",
      "description_length": 411,
      "index": 155,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SelectionRangeRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering selection range capabilities in a language server. It includes fields to specify document filters, an optional registration ID, and whether to enable progress reporting. These options are used to customize how selection range requests are handled for different document types in an LSP-compliant editor integration.",
      "description_length": 373,
      "index": 156,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentColorClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to document color features in a language server protocol implementation. It includes functions to create and serialize instances of this structure, which are used to negotiate color-related functionality between a language client and server. The structure contains an optional boolean indicating whether the client supports dynamic registration of color providers.",
      "description_length": 446,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MonikerRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering moniker providers in a language server. It includes a document selector for filtering text documents or notebook cells, and a flag to enable progress reporting. The module supports serialization to and from JSON for use in LSP registration messages.",
      "description_length": 307,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ParameterInformation",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing parameter information with optional documentation and a label, which can be either a string or a character range offset. It includes functions to serialize and deserialize instances to and from JSON, enabling integration with JSON-based protocols. It is suitable for scenarios requiring structured parameter metadata with optional rich documentation, such as language server protocol implementations.",
      "description_length": 454,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeConfigurationClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing client capabilities for dynamic configuration changes, specifically supporting optional dynamic registration. It provides functions to construct instances, and serialize/deserialize them using Yojson. This is used to communicate client support for configuration updates in language server protocol implementations.",
      "description_length": 364,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RelatedUnchangedDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module handles diagnostic reports for documents, specifically managing both full and unchanged document diagnostics using a JSON-backed associative structure. It provides functions to create diagnostic reports with an optional map of related documents and a result ID, and supports serialization and deserialization to and from JSON. Concrete use cases include generating and processing diagnostic data in a language server protocol implementation where document state changes need to be reported or tracked efficiently.",
      "description_length": 525,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ApplyWorkspaceEditParams",
      "library": "linol-lwt",
      "description": "This module constructs and serializes parameters for applying workspace edits in an LSP server. It handles a workspace edit and an optional label, enabling structured data exchange in editor integrations. Use it to send batched file changes with descriptive labels to an LSP client.",
      "description_length": 282,
      "index": 162,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module defines a variant type for representing either a full or unchanged document diagnostic report, using LSP-related types. It provides serialization and deserialization functions to and from Yojson for these diagnostic report types. It is used to handle diagnostic data in a language server protocol implementation, specifically for reporting document diagnostics in different states.",
      "description_length": 393,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a type `t` that captures client capabilities for notebook document synchronization, including a synchronization field of type `Linol_lsp__Types.NotebookDocumentSyncClientCapabilities.t`. It provides functions to create instances of this type and to serialize and deserialize them using Yojson. This module is used to configure notebook document synchronization behavior in LSP clients.",
      "description_length": 405,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Range",
      "library": "linol-lwt",
      "description": "This module represents a range defined by start and end positions, typically used to describe spans of text in a document. It provides functions to construct ranges, convert them to and from JSON format using Yojson, and works directly with position objects from the Linol_lsp__Types module. Concrete use cases include tracking text selections or edits in a language server protocol implementation.",
      "description_length": 398,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHintKind",
      "library": "linol-lwt",
      "description": "This module defines an enumerated type representing categories of inlay hints, specifically `Type` and `Parameter`. It includes functions for converting values between this type and Yojson representations, enabling serialization and deserialization. These conversions are used when transmitting inlay hint data over a protocol that requires JSON encoding.",
      "description_length": 355,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ExecutionSummary",
      "library": "linol-lwt",
      "description": "This module defines a data structure to represent the outcome and sequence of an execution step. It includes functions to construct summaries with explicit ordering and optional success status, and to serialize or deserialize them using JSON. It is useful for tracking stepwise execution results in workflows where order and success/failure states must be persisted or transmitted.",
      "description_length": 381,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokens",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing semantic token data in an array format, along with an optional result identifier. It provides functions for constructing instances, converting to and from JSON using Yojson. It is used to serialize and deserialize semantic token information, typically for transmission or storage in JSON-based protocols.",
      "description_length": 358,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentSymbolOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring document symbol requests, including optional label and work done progress settings. It provides functions to create instances with optional parameters and to serialize and deserialize these configurations using Yojson. This is used to manage and transmit document symbol metadata in a language server protocol implementation.",
      "description_length": 378,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentOnTypeFormattingClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing client capabilities for document on-type formatting in a language server. It includes functions to create instances, serialize to, and deserialize from JSON. It is used to configure formatting behavior based on client support during language server initialization.",
      "description_length": 314,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValue",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` representing different kinds of inline values, including text, variable lookups, and evaluatable expressions, using variants. It provides functions to convert between this type and Yojson for serialization and deserialization. Useful for handling inline value data in language server protocol implementations where precise value representation is required.",
      "description_length": 399,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentPositionParams",
      "library": "linol-lwt",
      "description": "This module defines a type `t` that pairs a position with a text document identifier, used for specifying locations within a document. It includes functions to construct instances, convert to and from JSON, and is typically used for operations like querying document symbols or finding definitions at specific positions. The module directly supports features such as code navigation and inline documentation lookup.",
      "description_length": 415,
      "index": 172,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeActionParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in code action requests, including context, range, text document identifier, and optional tokens for partial results and work done tracking. It provides functions to construct instances of this structure and to serialize/deserialize them using Yojson. Concrete use cases include handling code action requests in an LSP server, where structured data is needed to process and respond to client interactions.",
      "description_length": 462,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceEditClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines capabilities for workspace edit operations in a language server, supporting features like document changes, failure handling, and resource operations. It works with boolean flags, optional structures, and lists of resource operation kinds. Concrete use cases include configuring how a language server handles batch edits, file renames, and error recovery during workspace modifications.",
      "description_length": 406,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidSaveTextDocumentParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling text document save events, including the saved text and document identifier. It provides functions to construct instances, and serialize/deserialize them using Yojson. Concrete use cases include processing document save notifications in an LSP server implementation.",
      "description_length": 316,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidOpenNotebookDocumentParams",
      "library": "linol-lwt",
      "description": "This module defines a type `t` that represents parameters for a notebook document open event, containing a list of cell text documents and the notebook document itself. It provides functions to construct instances of this type, convert them to and from JSON format using Yojson. This is used to handle notebook document initialization in a language server protocol context, specifically for processing events sent by clients when opening notebook files.",
      "description_length": 453,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRangeOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for folding range operations with an optional work done progress flag. It provides functions to create instances, convert to and from JSON format using Yojson. It is used to specify whether progress reporting is enabled during folding range computations in LSP-related workflows.",
      "description_length": 320,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a notebook document identifier with a URI. It provides functions to create an identifier, convert it to and from JSON format using Yojson. It is used to uniquely identify notebook documents in a notebook-aware language server context.",
      "description_length": 278,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionItemKind",
      "library": "linol-lwt",
      "description": "This module defines an enumeration type representing kinds of completion items in a code editor or language server context, such as `Function`, `Variable`, `Class`, and `Enum`. It includes functions to convert between the enumeration and Yojson representations, enabling serialization and deserialization for communication with clients. These values are used to categorize and display auto-completion suggestions in development tools.",
      "description_length": 434,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceDiagnosticParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for workspace diagnostic parameters used in the LSP (Language Server Protocol) context. It includes fields for identifiers, partial result tokens, previous result IDs, and work done tokens, supporting precise diagnostic tracking and continuation. The module provides functions to construct instances, and serialize/deserialize them using Yojson for communication over JSON-based protocols.",
      "description_length": 426,
      "index": 180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileOperationPatternKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` representing file or folder operation patterns. It includes functions to convert values between this type and Yojson.Safe.t for JSON serialization and deserialization. It is used to distinguish between file and folder targets in operations that require type-specific handling, such as configuration parsing or I/O processing.",
      "description_length": 368,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentLinkClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to document links, including dynamic registration and tooltip support. It provides functions to create instances, convert to and from JSON using Yojson, and manage optional fields. Concrete use cases include configuring document link features in an LSP (Language Server Protocol) client and serializing capabilities for transmission.",
      "description_length": 415,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SetTraceParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for setting trace parameters, specifically encapsulating a trace value from the `Linol_lsp__Types` module. It provides functions to create an instance, and to convert to and from JSON format using Yojson. It is used to configure trace settings in a JSON-based communication context, such as initializing or updating trace configurations in an LSP server.",
      "description_length": 391,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentRangeFormattingClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines capabilities for document range formatting in a client, specifically supporting dynamic registration and range formatting features. It works with boolean options to indicate support for these features and provides functions to create and serialize the capabilities structure. It is used to configure client behavior in language server protocol implementations where precise formatting ranges are required.",
      "description_length": 425,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Diagnostic",
      "library": "linol-lwt",
      "description": "This module defines a diagnostic data structure for representing code analysis results, including message, severity, range, and optional metadata like code descriptions or related information. It provides functions to construct diagnostics and serialize them to and from JSON. Useful for implementing language server protocol features like linting or error reporting where structured diagnostics are required.",
      "description_length": 409,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DefinitionRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering definition handlers in a language server, supporting document-specific filtering and progress reporting. It works with document selectors that target text documents or notebook cells, along with an optional work-done progress flag. Use this module to configure how definition requests are registered and processed in an LSP-compliant server.",
      "description_length": 385,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ReferenceContext",
      "library": "linol-lwt",
      "description": "This module defines a context type for handling reference declarations with a boolean flag indicating whether to include declarations. It provides functions to create the context, and to convert it to and from JSON format using Yojson. The module is used to configure reference processing in JSON serialization workflows.",
      "description_length": 321,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.UnchangedDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a diagnostic report for an unchanged document, containing a `resultId` string. It provides functions to create instances of this type, and to convert to and from JSON using the Yojson library. This module is useful for handling diagnostic data in a document processing pipeline where reports need to be serialized or deserialized for storage or transmission.",
      "description_length": 402,
      "index": 188,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.TypeHierarchyRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering type hierarchy handlers in a language server. It supports creating and serializing a record with an optional document selector, identifier, and progress tracking flag. It is used to specify which documents a type hierarchy provider applies to and whether to report progress during processing.",
      "description_length": 350,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.PartialResultParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling partial result tokens, which can be either an integer or a string. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for managing pagination or incremental data retrieval in JSON-based APIs.",
      "description_length": 286,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.StaticRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for static registration options with an optional string identifier. It provides functions to create instances, serialize to and from JSON using Yojson. Useful for managing configuration data that requires optional identifiers, such as in registration or settings contexts.",
      "description_length": 309,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHintRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering inlay hint providers in a language server. It includes fields to specify document selectors, an optional registration ID, and flags to enable resolution of hints and progress reporting. These configurations are used to customize how inlay hints are provided for text documents or notebook cells during language server setup.",
      "description_length": 382,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileOperationFilter",
      "library": "linol-lwt",
      "description": "This module defines a filter for file operations based on a pattern and an optional URI scheme. It provides functions to create a filter, and to serialize/deserialize it using Yojson. It is used to specify which file operations should be monitored or processed, based on matching rules and protocol schemes like \"file\" or \"http\".",
      "description_length": 329,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionOptions",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for configuring code completion features in an editor or IDE. It includes types for completion items and global completion options, supporting fields like trigger characters, commit characters, and progress indicators. The module is used to serialize and deserialize these configurations to and from JSON, specifically integrating with the Yojson library for data exchange in language tooling scenarios.",
      "description_length": 453,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inline value parameters used during language server protocol interactions. It includes functions to construct instances with contextual information, document ranges, and optional work tokens, and supports JSON serialization and deserialization. It is used to handle inline value requests in an LSP server implementation, specifically for conveying source document and evaluation context data.",
      "description_length": 433,
      "index": 195,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.PrepareSupportDefaultBehavior",
      "library": "linol-lwt",
      "description": "This module defines a single variant type `t` representing an identifier and provides functions to convert values of this type to and from Yojson format. It is used for serializing and deserializing identifier values in JSON, specifically with the `Identifier` constructor. Concrete use cases include persisting identifier states to JSON files or transmitting them over JSON-based APIs.",
      "description_length": 386,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in inline completion requests, including context, position, text document identifier, and an optional work done token. It provides functions to construct instances, convert to and from JSON format using Yojson. This module is used to handle inline code completion in a language server protocol implementation.",
      "description_length": 366,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RenameFilesParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing parameters used in file renaming operations, specifically a list of file rename actions. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to handle batch file rename requests in LSP (Language Server Protocol) workflows.",
      "description_length": 327,
      "index": 198,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FileCreate",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a file creation request with a URI. It provides functions to construct a value of type `t`, and to serialize and deserialize it using Yojson. It is used to handle file creation requests in JSON format, particularly for encoding and decoding data in Lwt-based applications.",
      "description_length": 316,
      "index": 199,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentFormattingClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to document formatting in an LSP (Language Server Protocol) context. It includes functions to create instances with optional dynamic registration support and to serialize/deserialize instances to and from JSON using Yojson. It is used to configure and communicate formatting capabilities between a language client and server.",
      "description_length": 407,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ExecuteCommandClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to command execution in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these capabilities using Yojson. A typical use case involves configuring a language server client to indicate whether it can dynamically register execute command handlers.",
      "description_length": 413,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentHighlightOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for document highlighting features, primarily controlling whether work done progress is reported. It works with boolean values wrapped in an option type to represent optional settings. The module is used to serialize and deserialize these settings to and from JSON, specifically for integrating with language server protocol extensions.",
      "description_length": 378,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.HoverRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines and manipulates options for registering hover handlers in a language server. It supports creating configuration values that specify document filters and whether work done progress is enabled. These configurations are used to control hover behavior based on document types and to manage progress reporting during hover operations.",
      "description_length": 349,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CreateFilesParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing parameters used to create files, specifically a list of file creation operations. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to serialize and deserialize file creation requests, typically in communication with a language server handling file operations.",
      "description_length": 367,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module represents diagnostic reports for workspace documents, supporting creation from mixed full and unchanged document diagnostic entries. It works with LSP diagnostic report types and Yojson for serialization. Useful for handling and transmitting workspace-wide diagnostic data in LSP-compatible editors.",
      "description_length": 312,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.PositionEncodingKind",
      "library": "linol-lwt",
      "description": "This module defines an enumerated type representing different character encoding standards, including UTF8, UTF16, UTF32, and a catch-all for other encodings. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This is used to handle encoding metadata in text processing tasks where precise character positioning is required.",
      "description_length": 395,
      "index": 206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SymbolTag",
      "library": "linol-lwt",
      "description": "This module defines a single variant type `t` representing symbol tags, currently only `Deprecated`. It provides functions to convert values of type `t` to and from JSON using Yojson, enabling serialization and deserialization of symbol tag data. This is useful when parsing or generating JSON-based configuration or metadata files that include symbol status information.",
      "description_length": 371,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inline value options with a single optional boolean field indicating work done progress. It provides functions to create instances, and to convert to and from JSON using the Yojson library. This structure is used to configure inline value handling in language server protocols where progress reporting is optional.",
      "description_length": 355,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.VersionedTextDocumentIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a versioned text document identified by a URI and an integer version. It provides functions to construct instances, and to convert to and from JSON using the Yojson library. It is used to track specific versions of text documents in language server protocol interactions.",
      "description_length": 315,
      "index": 209,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.RenameRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering rename operations in a language server, supporting document filtering, preparation, and progress tracking. It works with document selectors, boolean flags, and JSON serialization. It is used to configure rename capabilities in LSP (Language Server Protocol) implementations, enabling features like workspace-wide symbol renaming with filtered document scopes.",
      "description_length": 417,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ImplementationRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering implementation handlers in a language server, supporting document filtering via text document or notebook cell filters. It provides functions to construct registration options, convert them to and from JSON, and manage optional fields like identifiers and progress reporting. Concrete use cases include configuring per-document or notebook-specific implementation logic in LSP extensions.",
      "description_length": 432,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DefinitionClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines client capabilities related to dynamic registration and link support in LSP (Language Server Protocol) communication. It provides functions to construct capability records, serialize them to JSON, and deserialize JSON into capability records. Concrete use cases include configuring client features for definition resolution in language servers.",
      "description_length": 364,
      "index": 212,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FileRename",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file rename operations with old and new URIs. It provides functions to construct rename records and serialize or deserialize them using Yojson. Useful for tracking file moves in applications like text editors or version control systems.",
      "description_length": 290,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokenTypes",
      "library": "linol-lwt",
      "description": "This module defines a variant type representing semantic token categories for code analysis, such as `Function`, `Variable`, and `Comment`. It includes functions to serialize and deserialize these tokens to and from Yojson format. It is used to encode and decode semantic token data for tools like language servers that require structured token information.",
      "description_length": 357,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentSymbolRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering document symbol providers, including filters for text documents or notebook cells, an optional label, and progress tracking. It supports operations to create these configurations and serialize or deserialize them using Yojson. Concrete use cases include setting up symbol navigation features in an LSP server for specific document types or notebooks.",
      "description_length": 408,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeDefinitionOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling type definition options, specifically supporting a `workDoneProgress` boolean flag. It provides functions to create instances, convert to and from JSON format using Yojson. This is useful for configuring behavior in language server protocol implementations where progress reporting is optional.",
      "description_length": 344,
      "index": 216,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlineCompletionItem",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inline completion items in a language server protocol implementation. It includes fields for optional commands, filter text, insert text (as a string or structured value), and an optional range. The module supports creating, serializing, and deserializing these items, primarily used to represent code suggestions in an editor integration scenario.",
      "description_length": 389,
      "index": 217,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ShowDocumentParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used to show a document in an editor, including options like focus behavior, selection range, and external display. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. It is used to pass document display settings between components in an LSP-based editor integration.",
      "description_length": 359,
      "index": 218,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeLensRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for code lens registration, including document selectors, resolve provider enablement, and work progress tracking. It works with LSP text document filters and notebook cell filters to specify where code lenses apply. Use this to configure code lens features in an LSP server, such as enabling dynamic code analysis in specific file types or notebooks.",
      "description_length": 393,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for holding parameters used in a completion request, including position, text document identifier, and optional context and token fields. It provides functions to construct instances of this structure and to serialize/deserialize it to and from JSON using Yojson. Concrete use cases include handling auto-completion requests in an LSP (Language Server Protocol) server implementation.",
      "description_length": 421,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TokenFormat",
      "library": "linol-lwt",
      "description": "This module defines a single data type `t` representing token formatting options, specifically supporting relative formatting. It includes functions to convert values of type `t` to and from JSON using the `Yojson.Safe` format. This module is useful when serializing or deserializing token formatting configurations in JSON-based interfaces.",
      "description_length": 341,
      "index": 221,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkspaceDiagnosticReportPartialResult",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling partial results of workspace diagnostic reports, specifically containing a list of either full or unchanged document diagnostic reports. It provides functions to construct instances of this structure, convert them to and from JSON format using Yojson. It is used to efficiently transmit and process incremental diagnostic updates in a language server protocol context.",
      "description_length": 418,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentSyncClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing client capabilities for text document synchronization, including options like `didSave`, `dynamicRegistration`, `willSave`, and `willSaveWaitUntil`. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This structure is used to configure and communicate text document sync behavior in language server protocol implementations.",
      "description_length": 422,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRangeKind",
      "library": "linol-lwt",
      "description": "This module defines a variant type for categorizing different kinds of folding ranges in source code, such as comments, imports, regions, and custom categories. It includes functions to convert between the variant type and Yojson representations. It is used to serialize and deserialize folding range kind data when interfacing with tools like language servers.",
      "description_length": 361,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeConfigurationParams",
      "library": "linol-lwt",
      "description": "This module handles the deserialization and serialization of configuration change parameters using JSON. It defines a record type with a `settings` field and supports conversion to and from Yojson representations. It is used to process configuration updates in an LSP server, such as when a client sends new editor settings.",
      "description_length": 324,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MarkedString",
      "library": "linol-lwt",
      "description": "This module represents strings with an optional associated language tag, using a record type with `value` and `language` fields. It provides serialization and deserialization to and from Yojson format, enabling structured data exchange. Useful for handling localized or syntax-marked strings in JSON-based APIs or configuration files.",
      "description_length": 334,
      "index": 226,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WindowClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines client capabilities related to window operations in an LSP (Language Server Protocol) context. It includes fields for handling document display, message requests, and progress tracking, all optional to allow flexible client configurations. The type `t` works with LSP-specific capability types and standard JSON serialization via Yojson.",
      "description_length": 357,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeclarationParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for holding parameters used in a language server protocol declaration request. It includes fields for position, text document identifier, and optional tokens for partial results and work done tracking. The module provides functions to construct instances, and serialize or deserialize them using Yojson.",
      "description_length": 340,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ConfigurationParams",
      "library": "linol-lwt",
      "description": "This module handles the parsing and creation of configuration parameters for LSP (Language Server Protocol) requests, specifically managing a list of `ConfigurationItem` values. It provides functions to construct a configuration parameter instance and to serialize or deserialize it using Yojson. A typical use case involves preparing configuration data to query or update settings in an LSP-compatible editor or IDE.",
      "description_length": 417,
      "index": 229,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentDiagnosticReportKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with two variants, `Full` and `Unchanged`, representing diagnostic report kinds for documents. It provides functions to convert values of this type to and from Yojson representations. This module is used to serialize and deserialize document diagnostic report kinds when interfacing with systems that require JSON-based communication.",
      "description_length": 365,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceSymbolClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines and constructs workspace symbol client capabilities for LSP (Language Server Protocol) interactions. It supports operations to create and manage structures for symbol kinds, tag support, resolve properties, and dynamic registration flags. These capabilities configure how symbol queries are handled, including which symbol types and tags are supported and which properties can be resolved during symbol requests.",
      "description_length": 432,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensDelta",
      "library": "linol-lwt",
      "description": "This module represents semantic token edits for incremental updates in a language server protocol. It provides functions to construct and serialize token delta responses, including optional result identifiers. It works with lists of semantic token edit structures and integrates directly with JSON serialization for LSP communication.",
      "description_length": 334,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentRangeFormattingRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering document range formatting capabilities in a language server. It includes fields to specify which documents are supported, whether range formatting is enabled, and whether work progress reporting is used. The module provides functions to construct these options, convert them to and from JSON, and works with text document filters and notebook cell filters.",
      "description_length": 414,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MarkdownClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for specifying Markdown client capabilities, including allowed HTML tags, parser identifier, and version. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to configure Markdown rendering behavior in a client-server context, such as restricting tag usage or specifying parser versions.",
      "description_length": 374,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Jsonrpc2",
      "library": "linol-lwt",
      "description": "This module implements asynchronous JSON-RPC 2.0 communication over input/output channels, providing functions to send and handle RPC requests and notifications, manage server lifecycle, and correlate responses with requests using identifiers. It works with JSON values, input/output channels, and LSP-specific data types such as document state and server requests. Concrete use cases include building language servers that process incoming requests, send notifications, and manage document state changes over standard input/output or sockets.",
      "description_length": 543,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for signature help features in an LSP (Language Server Protocol) implementation. It includes fields to specify characters that trigger or retrigger signature help, and whether work done progress is supported. The type `t` is used to configure signature help behavior, with functions to create instances and serialize to or from JSON.",
      "description_length": 375,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentSaveReason",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic variant type `t` representing reasons for saving a text document, including manual saves, delayed saves, and saves after focus loss. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This module is used to handle and persist different save triggers in a text editing context.",
      "description_length": 381,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentDiagnosticParams",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing parameters for document diagnostic requests, including optional metadata like `identifier`, `partialResultToken`, `previousResultId`, and `workDoneToken`, along with a required `textDocument` field. It provides functions to construct instances of this type, and to serialize and deserialize them using Yojson. This structure is used to pass diagnostic request parameters in an LSP (Language Server Protocol) implementation, specifically handling document-related diagnostics with support for incremental results and cancellation tokens.",
      "description_length": 580,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InsertTextFormat",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with two variants, `PlainText` and `Snippet`, representing different text insertion formats. It includes functions to convert values of type `t` to and from Yojson.Safe.t for JSON serialization and deserialization. This module is useful when handling text input formats that need to be persisted or transmitted as JSON, such as in configuration files or API payloads.",
      "description_length": 398,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.OptionalVersionedTextDocumentIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type for identifiers of text documents that include an optional version number. It provides functions to create these identifiers from a URI and optional version, and to serialize and deserialize them using Yojson. It is used to track specific versions of text documents in language server protocol interactions.",
      "description_length": 334,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentUri",
      "library": "linol-lwt",
      "description": "This module handles document URIs as strings, providing conversions to and from file paths, LSP-compatible URIs, and JSON. It supports comparison, equality checks, and hashing for use in maps and sets, along with extracting query and fragment components from URIs. It is used to manage document identifiers in LSP communication, ensuring correct path formatting across different operating systems.",
      "description_length": 397,
      "index": 241,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentFormattingRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering document formatting capabilities, including an optional list of document selectors (text or notebook cell filters) and a flag for work-done progress tracking. It provides functions to construct these options, along with serialization and deserialization to and from JSON. It is used to configure formatting behavior in language server protocol implementations, specifically for handling document formatting requests with LWT-based async workflows.",
      "description_length": 491,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookCell",
      "library": "linol-lwt",
      "description": "This module defines a notebook cell structure with fields for document URI, execution summary, cell kind, and metadata. It provides functions to create cells, parse them from JSON, and serialize them back to JSON. It is used to represent individual cells in a notebook environment, supporting operations like tracking execution state and storing cell-specific data.",
      "description_length": 365,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRangeWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing workspace client capabilities related to folding range refresh support. It provides functions to create instances, serialize to JSON, and deserialize from JSON. It is used to configure and exchange capabilities between a language server and client during protocol negotiation.",
      "description_length": 326,
      "index": 244,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CallHierarchyIncomingCallsParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in a call hierarchy incoming calls request. It includes fields for a call hierarchy item, a partial result token, and a work done token, supporting asynchronous processing and result tracking. The module provides functions to construct instances, and to convert to and from JSON representations, enabling integration with JSON-based communication protocols.",
      "description_length": 414,
      "index": 245,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SaveOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for save operations with an optional `includeText` flag. It provides functions to create instances, convert to and from JSON using Yojson. It is used to specify whether text content should be included when saving data structures to persistent storage.",
      "description_length": 292,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileChangeType",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing file system events: `Created`, `Changed`, or `Deleted`. It includes functions to convert values of this type to and from Yojson format. These conversions are useful for serializing file change events, for example when logging or transmitting them over a network.",
      "description_length": 306,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring diagnostic behavior in a language server, with fields to control identifiers, inter-file dependencies, progress reporting, and workspace-wide diagnostics. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. Concrete use cases include setting up diagnostic options for a language server and transmitting these options between client and server.",
      "description_length": 436,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SymbolInformation",
      "library": "linol-lwt",
      "description": "This module defines a record type for symbol information with fields like name, kind, location, and optional metadata such as container name and deprecation status. It provides functions to construct symbol information records, and to serialize and deserialize them using Yojson. It is used to represent and manipulate symbols in a codebase, such as during language server protocol operations.",
      "description_length": 393,
      "index": 249,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkspaceSymbolParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for workspace symbol query parameters, including a query string and optional tokens for partial results and work tracking. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to handle symbol search requests in a language server, where queries are made with optional pagination and progress tracking.",
      "description_length": 388,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentLinkRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering document link providers in a language server. It includes settings to specify which documents to target using filters, whether to resolve links dynamically, and whether to track progress. These options are used when setting up document link capabilities in LSP-based editors.",
      "description_length": 333,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionItemTag",
      "library": "linol-lwt",
      "description": "This module defines a single enumerated type representing tags for completion items, specifically supporting serialization and deserialization to and from JSON. It includes two functions for converting between JSON values and the enumerated type. A typical use case involves handling language server protocol messages where completion item tags need to be parsed from or formatted into JSON.",
      "description_length": 391,
      "index": 252,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DeclarationLink",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing links between declarations in a codebase. It includes functions to convert values of type `t` to and from JSON format using the Yojson library. These conversions enable serialization and deserialization of declaration link data for storage or transmission.",
      "description_length": 300,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ProgressParams",
      "library": "linol-lwt",
      "description": "This module handles the creation and JSON serialization of progress parameters, specifically for tracking or reporting progress in asynchronous operations. It works with tokens of type `int` or `string` and arbitrary values of type `'a`. Concrete use cases include encoding and decoding progress updates in LSP (Language Server Protocol) implementations using Lwt for concurrency.",
      "description_length": 380,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SelectionRangeClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to selection range features in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is configuring and exchanging capability metadata between a language server and client during protocol negotiation.",
      "description_length": 414,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRangeClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for configuring folding range capabilities in a language server. It includes types for specifying supported folding range kinds, collapsed text behavior, dynamic registration, and line folding constraints. These capabilities are used to communicate client preferences for code folding features to a language server via JSON serialization.",
      "description_length": 388,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHintLabelPart",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing parts of an inlay hint label, including optional command, location, tooltip, and value fields. It provides functions to create instances of this structure and to serialize/deserialize them using Yojson. Concrete use cases include building and manipulating inlay hints in an LSP-based editor integration, where each label part may trigger actions or display additional information.",
      "description_length": 434,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ConfigurationItem",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing configuration items with optional scope URIs and sections. It provides functions to construct these items and serialize or deserialize them using Yojson. Concrete use cases include managing editor configuration settings scoped to specific files or sections within an LSP server.",
      "description_length": 328,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentEdit",
      "library": "linol-lwt",
      "description": "This module represents a set of text edits applied to a specific text document, supporting both standard and annotated text edits. It works with document identifiers that may include version information and provides functions to construct instances and serialize/deserialize them using Yojson. It is used to bundle changes with the target document reference, typically for sending edit batches in language server protocol interactions.",
      "description_length": 435,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InitializeError",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing initialization errors with a boolean flag indicating whether the error is retryable. It provides functions to construct instances, serialize them to JSON, and deserialize JSON into instances. This is useful for handling and communicating retryable initialization failures in systems that use JSON for data exchange.",
      "description_length": 369,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.BaseSymbolInformation",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing symbol information with optional container names, symbol kinds, names, and tags. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for handling symbol data in language server protocol implementations.",
      "description_length": 296,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.HoverOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for hover options with an optional work done progress flag. It provides functions to create instances, serialize to and from JSON using Yojson. A concrete use case is configuring hover behavior in a language server where progress reporting is optional.",
      "description_length": 289,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for tracking work progress, with a boolean flag to enable or disable progress reporting. It provides functions to create and serialize these configuration values, using `Yojson.Safe.t` for JSON encoding and decoding. Concrete use cases include setting up progress tracking options in LSP (Language Server Protocol) implementations and serializing server configuration over JSON.",
      "description_length": 419,
      "index": 263,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressParams",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing parameters for work done progress in LSP (Language Server Protocol) interactions, specifically containing an optional `workDoneToken` which can be an integer or string. It provides functions to create instances, convert to and from JSON using Yojson, enabling seamless serialization and deserialization. Concrete use cases include handling progress reporting in LSP servers, such as tracking the completion of long-running operations like code indexing or build tasks.",
      "description_length": 512,
      "index": 264,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.Declaration",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing either a single location or a list of locations, using variants from the `Linol_lsp__Types.Location` module. It provides serialization and deserialization functions to and from Yojson for this type. Useful for handling location-based data in LSP-related operations, such as mapping or transforming source code positions during analysis or refactoring tasks.",
      "description_length": 401,
      "index": 265,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.Unregistration",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing unregistration events, with fields for an identifier and a method. It includes functions to construct instances and to convert between JSON and the structure. It is used to handle unregistration data in JSON format, particularly for parsing and serializing event information.",
      "description_length": 329,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressCreateParams",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing parameters for creating a work done progress token, which can be either an integer or string. It provides functions to construct a value of this type, convert it to and from JSON format using Yojson. This is used specifically for handling progress reporting in language server protocol implementations where a token must be serialized or deserialized.",
      "description_length": 395,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeWatchedFilesRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for specifying file system watchers in a language server protocol implementation. It includes functions to create and serialize the structure, which holds a list of file system watchers. It is used to register interest in file changes during language server initialization.",
      "description_length": 310,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for diagnostic workspace client capabilities, specifically supporting an optional refresh feature. It provides functions to create instances, serialize to JSON, and deserialize from JSON. This is used to configure client capabilities in a language server for handling diagnostic refresh operations.",
      "description_length": 335,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentLink",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing document links in a text editor, with support for creating, serializing, and deserializing link objects. It works with ranges, optional URIs, JSON metadata, and tooltips, enabling features like clickable links in code editors. It is used to implement navigation and interactive document features in language tooling.",
      "description_length": 370,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentColorOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for document color operations, specifically tracking whether work done progress is enabled. It provides functions to create instances, and to convert to and from JSON representations. It is used to configure color-related features in a document processing context where progress tracking is optional.",
      "description_length": 341,
      "index": 271,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FileDelete",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file deletion operations by URI. It includes functions to create instances, serialize to, and deserialize from JSON using Yojson. A concrete use case is handling file deletion requests in a web service where operations are transmitted or stored in JSON format.",
      "description_length": 314,
      "index": 272,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DidChangeConfigurationRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines a type `t` that represents registration options for handling configuration changes, specifically allowing an optional configuration section to be specified either as a string or a list of strings. It provides functions to create instances of this type, and to convert to and from JSON using the Yojson library. This is useful when working with dynamic configuration updates in a server that needs to react to specific configuration sections being changed.",
      "description_length": 475,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RenameOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring rename operations with optional settings. It provides functions to create instances and serialize/deserialize them using JSON. Concrete use cases include setting up rename options for language server protocol interactions where JSON encoding is required.",
      "description_length": 307,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookCellArrayChange",
      "library": "linol-lwt",
      "description": "Represents changes to a notebook cell array with optional cell updates, deletion count, and start index. Provides functions to create instances and convert to/from JSON using Yojson. Used to apply or serialize incremental updates to notebook content in a text editor or collaborative environment.",
      "description_length": 296,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentSyncClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for notebook document synchronization capabilities, including dynamic registration and execution summary support. It provides functions to create instances and convert to and from JSON format using Yojson. This is used to configure client capabilities for notebook synchronization in language server protocols.",
      "description_length": 347,
      "index": 276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionItem",
      "library": "linol-lwt",
      "description": "This module defines a completion item structure used to represent suggestions in a code editor, including details like labels, documentation, and text edits. It supports creating and serializing completion items with optional fields for behavior customization, such as insert formats and commit characters. Use cases include generating auto-completion responses in an LSP server implementation.",
      "description_length": 394,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.UniquenessLevel",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing levels of uniqueness, including document, project, group, scheme, and global. It provides functions to convert values of this type to and from Yojson for serialization and deserialization. This is used to handle configuration or state data that must be persisted or transmitted in JSON format.",
      "description_length": 337,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeHierarchyPrepareParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for preparing type hierarchy parameters, including position, text document identifier, and an optional work done token. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to pass parameters for type hierarchy operations in LSP-related workflows.",
      "description_length": 333,
      "index": 279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ShowMessageRequestClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for handling client capabilities related to showing message requests in a JSON-RPC based editor integration. It includes types for `messageActionItem` with optional support for additional properties, and a top-level type `t` that wraps an optional `messageActionItem`. The module supports serialization and deserialization to and from JSON using Yojson, enabling seamless communication with language servers or clients that require capability negotiation.",
      "description_length": 505,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentFormattingParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for document formatting parameters, including formatting options, a text document identifier, and an optional work done token. It provides functions to construct instances, convert to and from JSON using Yojson. Used to pass parameters for formatting a specific document in an LSP server implementation.",
      "description_length": 340,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentSyncOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for text document synchronization in an LSP server. It includes fields to specify change tracking, document open/close events, save behavior, and pre-save hooks. Use this to configure how a language server handles document updates and persistence during editing sessions.",
      "description_length": 313,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRangeRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering folding range providers in a language server. It includes fields to specify document selectors, an optional registration ID, and whether to enable progress reporting. The `create` function initializes these options, while `t_of_yojson` and `yojson_of_t` handle JSON serialization and deserialization for communication with the client.",
      "description_length": 392,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeNotebookDocumentParams",
      "library": "linol-lwt",
      "description": "This module represents parameters for a notebook document change event, containing a change object and a versioned notebook document identifier. It provides functions to construct instances and convert to and from JSON format using Yojson. It is used to handle updates to notebook documents in a language server protocol context, tracking both the document identifier and the associated change events.",
      "description_length": 401,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyItem",
      "library": "linol-lwt",
      "description": "This module defines a structured representation of call hierarchy items in a codebase, capturing metadata such as symbol name, kind, location ranges, and associated URI. It provides functions to construct these items programmatically and serialize/deserialize them using JSON. This is used to support features like call hierarchy navigation in language servers by organizing and transmitting symbol relationships and positions within source files.",
      "description_length": 447,
      "index": 285,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.RenameFile",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file rename operations, including old and new URIs, optional annotations, and rename options. It provides functions to construct instances, and to convert to and from JSON format using Yojson. It is used to serialize and deserialize rename file requests in an LSP (Language Server Protocol) context.",
      "description_length": 353,
      "index": 286,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileOperationOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring file operation notifications in an LSP server, with optional handlers for events like file creation, deletion, and renaming. It provides functions to construct and serialize these configurations, supporting integration with JSON-based LSP clients. Use cases include setting up file event monitoring in an editor or IDE extension.",
      "description_length": 382,
      "index": 287,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DidChangeWatchedFilesClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to file watching in a language server. It includes fields to indicate support for dynamic registration and relative patterns, with functions to construct the structure and serialize or deserialize it using Yojson. It is used to configure how a language server monitors file changes during development.",
      "description_length": 383,
      "index": 288,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ChangeAnnotation",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing change annotations with optional descriptions and confirmation flags. It provides functions to construct instances, convert to and from JSON using Yojson, and specify labels and metadata. Use this module when handling user-facing change tracking or version control features that require structured annotations with serialization support.",
      "description_length": 391,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used to request signature help in a text document. It includes fields for the cursor position, document identifier, optional context, and an optional work token. The module supports creating parameter instances, and serializing or deserializing them using Yojson for use in LSP communication.",
      "description_length": 344,
      "index": 290,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CancelParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for cancellation parameters used in JSON-RPC requests, specifically containing a request identifier. It provides functions to create instances, convert to and from JSON format using Yojson, and is used to handle cancellation of ongoing operations in a server-client communication context. A concrete use case includes managing cancellation of language server requests in an IDE.",
      "description_length": 415,
      "index": 291,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DiagnosticRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for diagnostic registration, including document selectors, dependency tracking, and workspace diagnostics. It supports creating and serializing these options with optional parameters for progress reporting and document filtering. Use this to specify how diagnostics should be registered and processed across different document types and workspace files.",
      "description_length": 395,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHintClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for managing inlay hint client capabilities in an LSP (Language Server Protocol) implementation. It includes types for `resolveSupport` with property lists and a main `t` type that holds optional dynamic registration and resolve support fields. It provides JSON serialization/deserialization for these types, enabling configuration exchange between language clients and servers.",
      "description_length": 428,
      "index": 293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceFoldersChangeEvent",
      "library": "linol-lwt",
      "description": "This module represents changes to workspace folders, tracking added and removed folders. It provides functions to construct events and serialize/deserialize them using Yojson. It is used to handle dynamic updates to workspace folder configurations in LSP clients.",
      "description_length": 263,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InitializeResult",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for handling initialization results in a language server protocol implementation. It includes types for server information and capabilities, with functions to construct and serialize these types. It is used to represent and process the response from a language server's initialization handshake.",
      "description_length": 345,
      "index": 295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.LinkedEditingRangeClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to linked editing ranges in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is configuring and exchanging client capabilities during the initialization phase of a language server protocol session.",
      "description_length": 416,
      "index": 296,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.Location",
      "library": "linol-lwt",
      "description": "This module represents a location in a text document, defined by a range and a URI. It provides functions to construct a location, convert it to and from JSON format. Used to identify positions in source files when implementing features like \"Go to Definition\" or \"Find All References\" in an LSP server.",
      "description_length": 303,
      "index": 297,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DidCloseNotebookDocumentParams",
      "library": "linol-lwt",
      "description": "This module handles parameters for a notebook document close event, capturing the notebook identifier and its associated cell text documents. It provides functions to construct the parameter type, along with serialization and deserialization to and from JSON. This is used when notifying the server that a notebook and its cells have been closed, ensuring proper resource cleanup and state management.",
      "description_length": 401,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.StringValue",
      "library": "linol-lwt",
      "description": "This module defines a concrete type `t` that wraps a string value, providing functions to create instances, convert to and from JSON using Yojson. It is used to handle string-based data with explicit structure, particularly in contexts requiring JSON serialization and deserialization. Typical use cases include parsing configuration values or API payloads where each string value is encapsulated in a known record type.",
      "description_length": 420,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRange",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing a folding range in a text document, with optional fields for start and end positions, kind, and collapsed text. It provides functions to construct instances, convert to and from JSON, and works with line and character positions. Concrete use cases include managing code folding in an editor by tracking ranges that can be collapsed or expanded.",
      "description_length": 394,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeHierarchySupertypesParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in type hierarchy operations, specifically handling type hierarchy items along with optional partial result and work done tokens. It provides functions to construct instances, and to convert to and from JSON representations. It is used to manage request parameters when fetching supertypes in a type hierarchy, supporting progress tracking and result pagination.",
      "description_length": 419,
      "index": 301,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.MonikerOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring moniker-related options, specifically supporting work done progress tracking. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for managing configuration parameters in JSON-based communication protocols.",
      "description_length": 303,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering call hierarchy capabilities in a language server. It includes fields to specify document selectors, an identifier, and whether work done progress is supported. The `create` function initializes these options, while `t_of_yojson` and `yojson_of_t` handle JSON serialization and deserialization for transport or storage.",
      "description_length": 376,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Moniker",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing monikers with fields for identifier, kind, scheme, and uniqueness level. It provides functions to create moniker instances and serialize or deserialize them using Yojson. The module is used to manage symbolic identifiers in the context of language server protocol operations.",
      "description_length": 319,
      "index": 304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHintParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inlay hint parameters, including range, text document identifier, and an optional work done token. It provides functions to construct instances, convert to and from JSON format. Used to process and serialize inlay hint requests in a language server protocol implementation.",
      "description_length": 314,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticRelatedInformation",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing diagnostic-related information with a location and a message. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to associate diagnostic messages with specific source code locations in LSP-based tools.",
      "description_length": 290,
      "index": 306,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlineCompletionOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inline completion options with an optional work done progress flag. It provides functions to create instances, serialize to and from JSON. It is used to configure inline completion behavior in language server protocols.",
      "description_length": 260,
      "index": 307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.LinkedEditingRangeOptions",
      "library": "linol-lwt",
      "description": "This module defines a single data type `t` that represents options for linked editing range functionality, specifically including a boolean flag for work done progress. It provides functions to create instances of this type, and to convert to and from JSON format using the Yojson library. This module is used to configure behavior when handling linked editing ranges in a language server, particularly for tracking progress during operations.",
      "description_length": 443,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines client capabilities for signature help in a language server, including support for parameter labels, documentation formats, and active parameter tracking. It works with nested records containing optional boolean flags and markup kinds, primarily for configuring signature information. Concrete use cases include serializing and deserializing client capability settings to and from JSON for protocol communication.",
      "description_length": 433,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentSyncOptions",
      "library": "linol-lwt",
      "description": "This module defines a unit type for notebook document synchronization options, primarily used to represent the absence of configuration data. It includes functions to convert between the unit type and Yojson.Safe.t for serialization and deserialization. This is useful when handling LSP (Language Server Protocol) messages where empty or placeholder options are required.",
      "description_length": 371,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextEdit",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing text edits with a new string and a specific range in a document. It includes functions to create an edit, convert it to and from JSON format using Yojson. A concrete use case is applying precise text modifications in an editor buffer based on language server protocol responses.",
      "description_length": 332,
      "index": 311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DefinitionLink",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing links between definitions, primarily used in parsing or analyzing structured documents. It includes functions to convert instances of this structure to and from Yojson representations, enabling serialization and deserialization. Concrete use cases include storing and transmitting definition relationships in JSON format for tools like language servers or documentation generators.",
      "description_length": 435,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHint",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing inlay hints in a text editor, including fields like label, position, and optional text edits or tooltips. It provides functions to construct these hints with customizable properties and convert them to and from JSON format. Concrete use cases include displaying inline type annotations, parameter hints, or code actions directly within an editor's UI.",
      "description_length": 405,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeAction",
      "library": "linol-lwt",
      "description": "This module constructs and serializes code action objects for use in language server protocols, supporting optional fields like commands, diagnostics, and workspace edits. It works with structured types such as `Command.t`, `Diagnostic.t`, `WorkspaceEdit.t`, and `CodeActionKind.t`, along with JSON serialization via Yojson. Concrete use cases include generating code fix responses with optional metadata and transmitting them over LSP-compatible communication channels.",
      "description_length": 470,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentRangeFormattingOptions",
      "library": "linol-lwt",
      "description": "This module defines and manipulates formatting options for document ranges, specifically supporting flags for range formatting and progress tracking. It works with boolean options to indicate capability support, using JSON for serialization and deserialization. It is used to configure and exchange formatting behavior in text editing tools that require precise range handling and progress reporting.",
      "description_length": 400,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering completion features in a language server, supporting fields like trigger characters, document selectors, and commit characters. It provides functions to construct and manipulate completion item and registration option records, enabling precise control over completion behavior. Use cases include setting up custom completion providers with specific document filters or enabling resolution of additional completion details on demand.",
      "description_length": 490,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpTriggerKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing the possible trigger kinds for signature help in an editor context, including invocation, trigger characters, and content changes. It provides functions to convert between JSON values and the `t` type. These conversions are useful when handling language server protocol requests that require serializing or deserializing trigger events.",
      "description_length": 380,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ServerCapabilities",
      "library": "linol-lwt",
      "description": "This module defines and constructs server capabilities for an LSP (Language Server Protocol) server, specifying support for features like code navigation, diagnostics, document formatting, and workspace management. It works with nested records and polymorphic variants to represent optional capabilities and their configurations, such as text document sync modes or file operation options. Concrete use cases include configuring a language server's behavior during initialization to declare support for features like hover tooltips, code actions, or workspace folder management.",
      "description_length": 578,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceEdit",
      "library": "linol-lwt",
      "description": "This module constructs and serializes workspace edit operations for LSP (Language Server Protocol) interactions. It handles text document modifications, file creations, renames, and deletions through structured types like `TextEdit`, `CreateFile`, and `DeleteFile`. Use it to generate or parse JSON representations of batched editing commands sent to or received from an LSP server.",
      "description_length": 382,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ColorInformation",
      "library": "linol-lwt",
      "description": "This module represents color information with associated ranges, providing functions to create instances from color and range values. It supports JSON serialization and deserialization using the Yojson library. Concrete use cases include handling color data in text editors or IDEs where color annotations are tied to specific document ranges.",
      "description_length": 343,
      "index": 320,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeActionContext",
      "library": "linol-lwt",
      "description": "This module defines a data structure for code action contexts, including diagnostics, optional action kinds, and optional trigger kind. It provides functions to construct instances, and serialize/deserialize to and from JSON. It is used to pass contextual information for code actions in a language server protocol implementation.",
      "description_length": 330,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeDefinitionParams",
      "library": "linol-lwt",
      "description": "This module defines a record type for parameters used in type definition requests, including optional tokens and references to a text document and position. It provides functions to construct instances, convert to and from JSON. It is used to handle type definition events in a language server protocol implementation.",
      "description_length": 318,
      "index": 322,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.VersionedNotebookDocumentIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a versioned notebook document identifier, combining a URI and an integer version. It provides functions to construct such identifiers, convert them to and from JSON format using Yojson. This is used to uniquely identify specific versions of notebook documents in a notebook-aware language server.",
      "description_length": 340,
      "index": 323,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlineValueText",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing inline text values with associated ranges, along with functions to create instances and serialize to and from JSON. It works with `Range.t` and `string` types, and is used for handling textual annotations in source code, such as displaying inline variable values during debugging. The serialization functions support integration with JSON-based protocols like LSP for editor tooling.",
      "description_length": 433,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticServerCancellationData",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling cancellation requests in a diagnostic server context. It includes functions to create a cancellation data instance with a retrigger flag, and to serialize or deserialize this data using Yojson. A concrete use case is managing client-initiated cancellations during diagnostic processing in an LSP (Language Server Protocol) implementation.",
      "description_length": 388,
      "index": 325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentContentChangeEvent",
      "library": "linol-lwt",
      "description": "This module represents text document content change events with optional range and range length fields, along with the new text to apply. It provides functions to construct these events, and to serialize and deserialize them using Yojson. Concrete use cases include handling document updates in an LSP server, where precise changes need to be communicated between client and server.",
      "description_length": 382,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeLens",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing code lenses in a text editor, including associated commands, metadata, and source ranges. It provides functions to construct code lens instances and serialize or deserialize them using Yojson. Concrete use cases include embedding actionable elements like refactoring suggestions or inline documentation within an LSP-based editor interface.",
      "description_length": 394,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MonikerParams",
      "library": "linol-lwt",
      "description": "This module defines a record type for parameters used in moniker-related operations, including optional tokens and references to text documents and positions. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to pass parameters for moniker resolution in a language server context, where document identifiers, positional data, and progress tokens are required.",
      "description_length": 405,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookCellKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` representing the two possible kinds of notebook cells: `Markup` and `Code`. It includes functions for converting values of this type to and from Yojson representations, enabling serialization and deserialization. These conversions are useful when loading or saving notebook data to disk or transmitting it over a network.",
      "description_length": 364,
      "index": 329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeHierarchySubtypesParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in type hierarchy subtypes requests, including a type hierarchy item and optional tokens for partial results and work done. It provides functions to create instances, and to convert to and from JSON format using Yojson. This structure is used to pass parameters when handling type hierarchy queries in a language server protocol implementation.",
      "description_length": 401,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SelectionRange",
      "library": "linol-lwt",
      "description": "This module represents hierarchical selection ranges with parent-child relationships, using LSP-compatible range definitions. It supports creating nested ranges, serializing and deserializing them to and from JSON. Useful for tracking document selections in collaborative editing environments where hierarchical context matters.",
      "description_length": 328,
      "index": 331,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ColorPresentationParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for specifying parameters used in color presentation operations, including fields for color, document range, text document identifier, and optional tokens. It provides functions to construct instances, convert to and from JSON format. Used to pass color styling and positioning data when rendering color annotations in a text editor.",
      "description_length": 370,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileOperationPattern",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file operation patterns with glob matching, optional match kinds, and pattern options. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to specify file monitoring or processing rules in language server protocols.",
      "description_length": 313,
      "index": 333,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FileOperationClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to file operations, with boolean flags indicating support for events like file creation, deletion, and renaming. It provides functions to construct instances with optional fields and to serialize/deserialize them using Yojson. Concrete use cases include configuring and exchanging file operation capabilities in a language server protocol implementation.",
      "description_length": 436,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionTriggerKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` representing different kinds of triggers for completion events, including explicit invocation, character-triggered completions, and triggers for incomplete input. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This module is used to handle and persist different completion trigger sources in a language server protocol implementation.",
      "description_length": 452,
      "index": 335,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SemanticTokensRangeParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in semantic token range requests, including optional tokens for partial results and work tracking, a range, and a text document identifier. It provides functions to construct instances, and serialize/deserialize to and from JSON. It is used to request semantic token information for a specific document range in a language server protocol implementation.",
      "description_length": 411,
      "index": 336,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ShowDocumentClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a capability indicating whether a client supports showing documents. It provides functions to create, serialize, and deserialize a boolean flag that represents client support for document display. The capability is used to configure or query client-specific features in a document management system.",
      "description_length": 319,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentSelector",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing document selectors used to match text documents or notebook cell documents based on criteria like language, URI, or notebook type. It provides functions to convert values of type `t` to and from Yojson representations, enabling serialization and deserialization for use in LSP (Language Server Protocol) communication. It is used to specify which documents a language server should handle, such as filtering by file extension or notebook format.",
      "description_length": 489,
      "index": 338,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.Hover",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing hover information in a language server protocol implementation. It includes functions to construct hover objects with optional range information and supports serialization to and from JSON. It is used to provide contextual documentation or metadata when a user hovers over a symbol in a code editor.",
      "description_length": 353,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeclarationOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling declaration options with a focus on work progress tracking. It provides functions to create instances, serialize, and deserialize the structure using JSON. A concrete use case is configuring and exchanging declaration settings in a language server protocol implementation.",
      "description_length": 322,
      "index": 340,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.PublishDiagnosticsClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines client capabilities for publishing diagnostics in a language server protocol implementation. It includes functions to create and manipulate capability structures with optional boolean flags and nested tag support, using diagnostic tags from the `Linol_lsp__Types` module. The module supports serialization and deserialization to and from JSON using the Yojson library.",
      "description_length": 388,
      "index": 341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ExecuteCommandParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for command execution parameters, including command string, arguments as JSON values, and an optional work done token. It provides functions to create instances, and serialize/deserialize to and from Yojson. It is used to pass parameters for executing commands within an LSP (Language Server Protocol) context, particularly handling JSON-based communication.",
      "description_length": 395,
      "index": 342,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.PrepareRenameParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in preparing a rename operation, including position, text document identifier, and an optional work done token. It provides functions to construct instances, and serialize/deserialize to and from JSON. It is used to handle rename requests in a language server, specifically for passing parameters between client and server during rename operations.",
      "description_length": 405,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentFilter",
      "library": "linol-lwt",
      "description": "This module defines a notebook document filter with JSON serialization and deserialization capabilities. It works with the `Yojson.Safe.t` type to convert between JSON representations and the unit-type filter structure. Concrete use cases include parsing notebook filter configurations from JSON and serializing filter settings for storage or transmission.",
      "description_length": 356,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressBegin",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing the beginning of a work progress notification, with optional fields for cancellability, message, and percentage, and a required title. It provides functions to create instances of this type and to serialize/deserialize them to and from JSON using Yojson. This is useful for encoding progress events in language server protocol implementations where structured notifications are required.",
      "description_length": 431,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensPartialResult",
      "library": "linol-lwt",
      "description": "This module represents partial results for semantic token processing, primarily used in language server implementations. It provides functions to create and serialize/deserialize a structure containing an integer array representing token data. The module integrates directly with JSON serialization libraries to facilitate communication between language servers and clients.",
      "description_length": 374,
      "index": 346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MonikerClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing client capabilities related to moniker handling, specifically supporting optional dynamic registration. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to configure and communicate client-specific moniker features in LSP (Language Server Protocol) implementations.",
      "description_length": 369,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Position",
      "library": "linol-lwt",
      "description": "This module represents and manipulates text positions using line and character offsets. It provides functions to construct position values, convert them to and from JSON format using Yojson. Concrete use cases include tracking cursor locations or parsing errors in text editors and compilers.",
      "description_length": 292,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeWorkspaceFoldersParams",
      "library": "linol-lwt",
      "description": "This module handles workspace folder change events in an LSP server. It provides functions to construct and serialize these events using the `WorkspaceFoldersChangeEvent` type. Use this module when implementing dynamic workspace folder updates in an editor or IDE integration.",
      "description_length": 276,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to diagnostics in a language server protocol implementation. It includes fields for dynamic registration, markup message support, and related document support, all of which are optional boolean values. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 390,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ReferenceOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring reference options with an optional work progress flag. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for managing configuration settings in JSON-based APIs or persistent storage.",
      "description_length": 281,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileOperationRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for file operation registrations, primarily used to specify a list of file operation filters. It supports creating instances with custom filters and serializing or deserializing them using Yojson. Concrete use cases include setting up file system watchers or handling file operation requests in an LSP server.",
      "description_length": 351,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module defines a variant type for representing workspace document diagnostic reports, supporting both full and unchanged diagnostic report kinds. It provides serialization and deserialization functions to and from Yojson for these report types. Concrete use cases include handling diagnostic data responses in an LSP (Language Server Protocol) implementation using Lwt for asynchronous processing.",
      "description_length": 402,
      "index": 353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RelativePattern",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a relative pattern with a base URI and a string pattern. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for handling relative paths or patterns in a type-safe way, especially when serializing or deserializing configuration data.",
      "description_length": 317,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing client capabilities for text document features in a language server protocol. It includes fields for optional capabilities like code actions, hover, completion, diagnostics, and document synchronization, each tied to specific LSP feature types. The module provides functions to construct instances with optional fields, and to serialize/deserialize them using Yojson for use in JSON-based communication.",
      "description_length": 453,
      "index": 355,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WillSaveTextDocumentParams",
      "library": "linol-lwt",
      "description": "This module handles parameters for a text document save event, capturing the save reason and document identifier. It provides functions to construct these parameters and serialize or deserialize them using Yojson. Useful for implementing save logic in text editors or IDEs that need to process document changes before saving.",
      "description_length": 325,
      "index": 356,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHintWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing workspace client capabilities related to inlay hints, specifically supporting an optional refresh capability. It provides functions to create instances, serialize to JSON, and deserialize from JSON. This is used to configure language server clients that need to communicate inlay hint refresh support during protocol exchanges.",
      "description_length": 381,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidSaveNotebookDocumentParams",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing parameters for a notebook document save event, containing a `notebookDocument` identifier. It provides functions to create instances of this type, and to convert to and from JSON using the `Yojson` library. This is used to handle document save notifications in a language server protocol implementation, specifically for notebook documents.",
      "description_length": 384,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InsertReplaceEdit",
      "library": "linol-lwt",
      "description": "This module defines a record type with `insert`, `newText`, and `replace` fields to represent text edits in a document. It includes functions to construct instances of this type and to serialize/deserialize them using Yojson. It is used to model precise text modifications for features like code completion or refactoring in an LSP server.",
      "description_length": 339,
      "index": 359,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkspaceFoldersServerCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing server capabilities related to workspace folder management in a language server protocol implementation. It includes fields for indicating whether workspace folder changes are supported and how change notifications are delivered, either as a boolean flag or a custom string identifier. The module provides functions to construct instances, and serialize or deserialize them using Yojson for use in LSP communication.",
      "description_length": 470,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentSaveRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering text document save events, including filters for targeting specific documents or notebook cells and a flag to control whether the document content is included in the save event. It provides functions to construct these options, convert them to and from JSON format. It is used to configure save event handlers in language server protocols where document filtering and content inclusion are required.",
      "description_length": 457,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentColorParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in document color-related operations, including optional tokens for partial results and work done notifications, along with a text document identifier. It provides functions to construct instances, and serialize/deserialize them using Yojson. This structure is used to pass document color request parameters between client and server in an LSP (Language Server Protocol) implementation.",
      "description_length": 443,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionContext",
      "library": "linol-lwt",
      "description": "This module handles the creation and serialization of completion context data used in language server protocol interactions. It works with JSON values and a completion trigger kind type to capture the context in which a code completion request was triggered. It is used to pass contextual information like trigger characters and trigger kinds between components during code completion workflows.",
      "description_length": 395,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SelectionRangeParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling parameters related to selection range operations in a text document. It includes fields for positions, document identifiers, and optional tokens for partial results and work tracking. It supports serialization to and from JSON and is used to pass selection range data between components in an editor or IDE backend.",
      "description_length": 365,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for configuring completion-related client capabilities in a language server protocol implementation. It includes types for completion items, item kinds, list options, and supporting features like insert text modes, tags, and resolve properties, each with corresponding creation functions. These capabilities are used to specify client-side behavior for code completion features such as snippet support, documentation formatting, and dynamic registration.",
      "description_length": 504,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ExecuteCommandRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for specifying command execution registration options, including a list of commands and an optional work done progress flag. It provides functions to create instances, convert to and from JSON format using Yojson. It is used to configure command registration with progress tracking capabilities in LSP-related workflows.",
      "description_length": 357,
      "index": 366,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.LinkedEditingRangeParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in linked editing range requests, including position, text document identifier, and an optional work done token. It provides functions to construct instances, and serialize/deserialize them using Yojson. This module is used to handle linked editing operations in a language server protocol context, where changes in one part of a document affect other linked locations.",
      "description_length": 426,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentFilter",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing document filters for text documents and notebook cell text documents. It provides functions to convert values of type `t` to and from Yojson representations. It is used to serialize and deserialize document filter configurations in JSON format for LSP-related workflows.",
      "description_length": 314,
      "index": 368,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.MarkupContent",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing markup content with a specific kind and string value. It provides functions to create instances, convert to and from JSON using Yojson, and ensures compatibility with the LSP markup kind definitions. Useful for handling formatted text in language server protocol implementations, such as documentation or hover responses.",
      "description_length": 375,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.PublishDiagnosticsParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for publishing diagnostic information associated with a file URI, including a list of diagnostics and an optional version number. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to communicate diagnostic results, such as compiler errors or linter warnings, in a language server protocol context.",
      "description_length": 387,
      "index": 370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRangeParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in a folding range request, including optional tokens for partial results and work done notifications, along with a text document identifier. It provides functions to create instances of this structure and to serialize/deserialize it using Yojson. This is used when handling requests for code folding ranges in a language server, where structured data needs to be passed between client and server.",
      "description_length": 454,
      "index": 371,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeDescription",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing code descriptions with a URI reference. It provides functions to create instances, serialize to and from JSON, and ensures compatibility with LSP (Language Server Protocol) standards. Concrete use cases include handling code navigation and documentation links in IDE extensions or LSP clients.",
      "description_length": 347,
      "index": 372,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ShowMessageRequestParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters of a show message request, including a message string, message type, and optional list of message action items. It provides functions to construct instances, and to serialize and deserialize them using Yojson. It is used to format and handle user-facing messages with actionable options in a language server protocol implementation.",
      "description_length": 384,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.LogMessageParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for log messages with a message string and a message type from the `MessageType` module. It includes functions to construct instances, convert to and from JSON using Yojson, and ensures proper serialization and deserialization. It is used to handle structured log messages in LSP communication.",
      "description_length": 331,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ApplyWorkspaceEditResult",
      "library": "linol-lwt",
      "description": "This module defines a result type for tracking the outcome of workspace edit operations, including whether the edit was applied, the index of a failed change if applicable, and an optional failure reason. It provides functions to construct such results and serialize or deserialize them using Yojson. Concrete use cases include reporting partial success or failure when applying multi-step workspace edits in an LSP server.",
      "description_length": 423,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeleteFilesParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing parameters used to delete files, specifically a list of file deletion operations. It provides functions to construct instances of this structure and to serialize or deserialize them using Yojson. A concrete use case is handling file deletion requests in a language server protocol implementation, where structured data needs to be parsed from or formatted to JSON.",
      "description_length": 418,
      "index": 376,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.MessageType",
      "library": "linol-lwt",
      "description": "This module defines a variant type for representing message severity levels such as `Error`, `Warning`, and `Info`. It includes functions to convert these values to and from Yojson representations, enabling serialization and deserialization for use in logging or communication protocols. The primary use case is handling structured message types in JSON-based systems.",
      "description_length": 368,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ImplementationClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to dynamic registration and link support in a language server protocol implementation. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to configure and communicate client-specific features during language server initialization.",
      "description_length": 364,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.LinkedEditingRangeRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering linked editing range providers in a language server. It includes fields to specify document selectors, an optional registration ID, and whether work done progress is supported. These options are used to configure behavior when linking edits across multiple text documents or notebook cells.",
      "description_length": 348,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHintOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for inlay hints, including whether a resolve provider is enabled and whether work done progress is supported. It provides functions to create instances of these options and to serialize and deserialize them using Yojson. Use this module to configure and manage inlay hint behavior in language server implementations.",
      "description_length": 358,
      "index": 380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.PreviousResultId",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing a previous result identifier, combining a URI and a string value. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for tracking result identifiers in LSP-related workflows where JSON serialization is required.",
      "description_length": 302,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeActionResult",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a list of either LSP commands or code actions, used to return structured results from code action handlers. It includes functions to convert between this type and Yojson for serialization and deserialization. It is specifically used to handle responses in LSP servers where code actions or commands need to be sent back to the client in a structured format.",
      "description_length": 401,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt",
      "library": "linol-lwt",
      "description": "This module enables structured data handling and asynchronous communication for Language Server Protocol (LSP) implementations, focusing on features like document synchronization, diagnostics, code actions, and capability negotiation. It operates on custom variant and record types representing LSP entities (e.g., text edits, document filters, semantic tokens) and uses Yojson for JSON serialization/deserialization, while leveraging Lwt for asynchronous workflows such as progress tracking and event-driven document management. Key use cases include building language servers with support for notebook environments, real-time code analysis, and client-server feature negotiation via JSON-RPC.",
      "description_length": 694,
      "index": 383,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 387,
    "meaningful_modules": 384,
    "filtered_empty_modules": 3,
    "retention_rate": 0.9922480620155039
  },
  "statistics": {
    "max_description_length": 694,
    "min_description_length": 252,
    "avg_description_length": 379.203125,
    "embedding_file_size_mb": 5.563187599182129
  }
}