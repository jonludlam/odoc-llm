{
  "package": "linol-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 384,
  "creation_timestamp": "2025-07-16T00:16:52.101976",
  "modules": [
    {
      "module_path": "Linol_lwt.Jsonrpc2.Req_id",
      "library": "linol-lwt",
      "description": "This module represents a request ID used in JSONRPC to correlate requests with their responses. It provides a type alias for an ID from the Linol_jsonrpc module and a function to convert the ID to a string. It is used to track individual requests in a JSONRPC client-server interaction.",
      "description_length": 286,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentUri.Private",
      "library": "linol-lwt",
      "description": "Controls path formatting for document URIs in cross-platform scenarios. It uses the `win32` reference to determine whether to apply Windows-style path separators. This module is useful when handling file paths in LSP (Language Server Protocol) implementations where URI consistency across operating systems matters.",
      "description_length": 315,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Jsonrpc2.IO",
      "library": "linol-lwt",
      "description": "This module implements asynchronous input/output operations for handling JSON-RPC 2.0 communication over channels. It provides primitives for reading from and writing to in_channels and out_channels, including line-based reading and byte-level transfers, all returning wrapped result values. Key use cases include building JSON-RPC servers and clients that interact with stdin/stdout or network streams using Lwt for concurrency.",
      "description_length": 429,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InsertReplaceEdit",
      "library": "linol-lwt",
      "description": "This module defines a record type with `insert`, `newText`, and `replace` fields, representing text edits in a document. It provides functions to construct instances of this type and to serialize/deserialize them using Yojson. This module is used to model precise text modifications for language server protocol interactions, such as code insertions and replacements.",
      "description_length": 367,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeAction",
      "library": "linol-lwt",
      "description": "This module constructs and serializes code action objects for use in language server protocol interactions. It supports creating code actions with optional commands, diagnostics, workspace edits, and metadata like titles and kinds. The module directly works with LSP types for commands, diagnostics, and workspace edits, along with JSON serialization through Yojson.",
      "description_length": 366,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FullDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module represents a full document diagnostic report with a list of diagnostics and an optional result identifier. It provides functions to construct the report, convert it to and from JSON format using Yojson. Concrete use cases include reporting diagnostic results for a document in a language server protocol implementation.",
      "description_length": 331,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeDefinitionParams",
      "library": "linol-lwt",
      "description": "This module defines a record type for parameters used in type definition requests, including optional tokens and references to text documents and positions. It provides functions to construct instances, convert to and from JSON format. It is used to handle type definition events in a language server, where precise document and position data must be passed alongside optional progress tokens.",
      "description_length": 393,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressBegin",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing the beginning of a work progress notification, with optional fields for cancellability, message, and percentage. It provides functions to create instances of this type and to serialize and deserialize them using Yojson. Concrete use cases include sending structured progress updates in LSP (Language Server Protocol) implementations.",
      "description_length": 377,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ServerCapabilities",
      "library": "linol-lwt",
      "description": "This module defines and constructs server capabilities for an LSP (Language Server Protocol) server, including support for features like code navigation, diagnostics, document formatting, and workspace management. It works with structured types representing capability configurations, such as `workspace`, `textDocument`, and `diagnostic`, along with their respective options. Concrete use cases include enabling hover support, defining document symbol providers, and configuring file operations and workspace folder handling in an LSP server.",
      "description_length": 543,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DidChangeTextDocumentParams",
      "library": "linol-lwt",
      "description": "This module handles text document change events in an LSP server, specifically tracking content modifications and document versions. It provides functions to construct change events, and serialize/deserialize them to and from JSON. It is used when processing client notifications about open document edits, enabling the server to update its internal document state accurately.",
      "description_length": 376,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SemanticTokenModifiers",
      "library": "linol-lwt",
      "description": "This module defines a set of semantic token modifiers used to classify and annotate code elements in a programming language. It includes functions to convert these modifiers to and from JSON format, enabling integration with tools that process or display code semantics. Use cases include enhancing code editors with precise symbol information and supporting language servers in conveying token attributes during analysis.",
      "description_length": 422,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentUri",
      "library": "linol-lwt",
      "description": "This module handles document URIs by converting them to and from strings, paths, and Yojson values, supporting comparison, equality checks, and hashing. It extracts query and fragment components for use in LSP communications and cross-system document identification. The child module controls path formatting based on the operating system, ensuring consistent URI representation across platforms using the `win32` reference. Together, they enable robust handling of document identifiers in heterogeneous environments.",
      "description_length": 517,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentLinkParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling document link parameters in the context of the Language Server Protocol. It includes fields for tracking partial results, identifying the text document, and managing work done tokens, all with support for JSON serialization and deserialization. It is used to pass document link-related metadata between client and server during code navigation operations.",
      "description_length": 405,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SelectionRangeOptions",
      "library": "linol-lwt",
      "description": "This module defines a single data type `t` that represents options for selection range functionality, specifically including a boolean flag for work done progress. It provides functions to create instances of this type, convert to and from JSON format using Yojson. This module is used to configure and serialize selection range settings in LSP-related workflows.",
      "description_length": 363,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionContext",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inline completion context with optional selected completion info and trigger kind. It provides functions to create instances, and serialize/deserialize to and from JSON. It is used to manage contextual data during inline code completion in an LSP-based editor integration.",
      "description_length": 313,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidOpenTextDocumentParams",
      "library": "linol-lwt",
      "description": "This module handles the creation and JSON serialization of parameters for a text document open event. It works with the `TextDocumentItem` type to represent the document data and provides functions to convert between JSON and the parameter type. It is used to process \"textDocument/didOpen\" notifications in an LSP server implementation.",
      "description_length": 337,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlineValueClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing inline value client capabilities, specifically supporting dynamic registration. It provides functions to create instances, convert to and from JSON using Yojson, and manage optional fields. Use this when configuring language server capabilities for inline value handling in LSP implementations.",
      "description_length": 348,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticRelatedInformation",
      "library": "linol-lwt",
      "description": "This module represents diagnostic-related information with a location and a message. It provides functions to create, serialize, and deserialize diagnostic entries using LSP-compliant types. Useful for reporting structured diagnostics in editors or tools that consume LSP data.",
      "description_length": 277,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DefinitionRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering definition handlers in a language server, supporting document-specific filtering and progress reporting. It works with document selectors that target either text documents or notebook cells, alongside an optional work-done progress flag. Use this module to configure how definition requests are registered and processed in an LSP-compliant server.",
      "description_length": 391,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DefinitionLink",
      "library": "linol-lwt",
      "description": "This module defines a data structure `t` for representing definition links in a JSON-compatible format, with functions to convert between the structure and `Yojson.Safe.t`. It supports parsing and serializing definition link data, enabling integration with JSON-based APIs or storage systems. Use cases include handling cross-references in documentation or code analysis tools where links must be persisted or transmitted as JSON.",
      "description_length": 430,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type `t` that wraps a URI to identify notebook documents. It provides functions to create an identifier from a URI and to serialize and deserialize identifiers using Yojson. This module is used to uniquely reference notebook documents in a format compatible with JSON-based protocols.",
      "description_length": 306,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticTag",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with two variants, `Unnecessary` and `Deprecated`, representing diagnostic severity levels. It includes functions to convert values of this type to and from Yojson format. This module is used to serialize and deserialize diagnostic tags for tools like language servers.",
      "description_length": 300,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MonikerRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering moniker providers in a language server, supporting configuration of document selectors and work done progress. It works with text document filters and notebook cell text document filters to specify which documents to handle. Use this to configure moniker-related capabilities in LSP extensions for editors like VS Code.",
      "description_length": 363,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DefinitionParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for holding parameters used in a language server protocol request, specifically for definition queries. It includes fields for tracking partial results, position in a document, and the document identifier, along with optional tokens for progress reporting. The module supports creating instances with optional parameters and serializing to and from JSON format.",
      "description_length": 398,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SymbolInformation",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing symbol information with fields like name, kind, location, and deprecation status. It provides functions to construct symbol instances, convert them to and from JSON format using Yojson. It is used to process and serialize symbol data in the context of language server protocol implementations.",
      "description_length": 347,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentLinkClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to document links, specifically supporting dynamic registration and tooltip features. It provides functions to create instances with optional fields and to serialize and deserialize these capabilities using Yojson. This is used to configure document link behavior in language server clients based on the LSP (Language Server Protocol).",
      "description_length": 417,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.Pattern",
      "library": "linol-lwt",
      "description": "This module defines a pattern type as a string and provides direct serialization and deserialization to and from Yojson.Safe.t. It works with JSON data structures for parsing and generating pattern values. Concrete use cases include handling pattern data in JSON-based configuration files or APIs.",
      "description_length": 297,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyOutgoingCall",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing outgoing calls in a call hierarchy, with functions to create instances and serialize/deserialize them using Yojson. It works with ranges and call hierarchy items from the LSP types module. It is used to model and exchange call relationships in language server protocol implementations.",
      "description_length": 335,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.GeneralClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines client capabilities for handling stale requests and optional features like markdown, position encodings, and regex support. It provides functions to construct capability objects and serialize/deserialize them using Yojson. Concrete use cases include configuring LSP client behavior for request cancellation, retries, and content encoding preferences.",
      "description_length": 370,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.BaseSymbolInformation",
      "library": "linol-lwt",
      "description": "This module defines a record type for symbol information with optional container name, symbol kind, name, and tags. It provides functions to create instances, and to convert to and from JSON using Yojson. It is used to represent and serialize symbols in a codebase, such as functions or variables, for tools like language servers.",
      "description_length": 330,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValue",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` representing different kinds of inline values, including text, variable lookups, and evaluatable expressions, using variants tagged with specific type constructors. It provides bidirectional JSON serialization and deserialization functions for these inline value types. This module is useful for handling inline value data in language server protocol implementations, particularly when integrating with LSP clients that require structured inline value representations.",
      "description_length": 511,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing workspace-related client capabilities in an LSP (Language Server Protocol) implementation. It includes fields for enabling or configuring specific features like code lenses, diagnostics, file operations, and workspace edits, allowing precise control over client-side behavior. The module provides functions to construct instances, and serialize/deserialize them to and from JSON, enabling integration with LSP-compliant editors and tools.",
      "description_length": 488,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.Position",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing positions in a text buffer, with line and character offsets. It provides functions to construct position values, and to serialize and deserialize them using Yojson. Concrete use cases include tracking cursor locations or text ranges in an editor buffer.",
      "description_length": 307,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentDiagnosticReportPartialResult",
      "library": "linol-lwt",
      "description": "This module handles partial diagnostic reports for documents by associating URIs with either full or unchanged diagnostic reports. It provides functions to create instances, convert to and from JSON, and manage related document diagnostics efficiently. Use this when processing incremental diagnostic updates in an LSP server implementation.",
      "description_length": 341,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Definition",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` that represents either a single location or a list of locations, using the `Location` variant or the `List` variant, respectively. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This module is useful for handling structured location data in JSON format, particularly in contexts like language server protocol implementations where such representations are needed for responses or messages.",
      "description_length": 507,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentSyncKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing the synchronization kind for text documents, with variants `None`, `Full`, and `Incremental`. It provides functions to convert between this type and Yojson for serialization and deserialization. Used to specify how text document changes are synchronized between a client and server in a language server protocol implementation.",
      "description_length": 371,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.PreviousResultId",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing a previous result identifier, combining a URI and a string value. It provides functions to construct instances, serialize to and from JSON using Yojson. Useful for tracking result identifiers in language server protocol implementations where persistence or transmission is required.",
      "description_length": 332,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentEdit",
      "library": "linol-lwt",
      "description": "This module represents a set of edits to be applied to a specific text document, supporting both standard and annotated text edits. It works with text documents identified by an optional version, allowing precise tracking and modification. Concrete use cases include applying refactorings, code fixes, or formatting changes to a document in an editor that supports LSP (Language Server Protocol).",
      "description_length": 396,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeActionTriggerKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with two variants, `Invoked` and `Automatic`, representing the trigger kinds for code actions. It provides functions to convert values of this type to and from Yojson format. This module is used to serialize and deserialize code action trigger kinds when communicating with language servers over JSON-RPC.",
      "description_length": 336,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentSymbolParams",
      "library": "linol-lwt",
      "description": "This module defines parameters for requesting document symbols, including identifiers for the text document, partial result token, and work done token. It provides functions to construct these parameters, along with serialization and deserialization to and from JSON. It is used to handle symbol information requests in a language server, specifically mapping to LSP document symbol queries.",
      "description_length": 391,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ImplementationRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering implementation handlers in a language server. It includes fields to specify which documents the handler applies to, an optional identifier, and whether to track progress. The module supports serialization to and from JSON for communication with the client.",
      "description_length": 314,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines and constructs capabilities for semantic token handling in a language server, focusing on client-side configuration. It supports data types like `full`, `requests`, and `t`, which include options for delta updates, range requests, token formats, and modifiers. Concrete use cases include configuring token registration, specifying supported formats, and enabling or disabling features like multiline or overlapping tokens.",
      "description_length": 442,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlayHintKind",
      "library": "linol-lwt",
      "description": "This module defines two specific inlay hint kinds, `Type` and `Parameter`, used to categorize hints in code editors. It provides functions to convert these hint kinds to and from Yojson representations. This enables serialization and deserialization of hint data for use in editor integrations that require JSON-based communication.",
      "description_length": 332,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RelativePattern",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a relative pattern with a base URI and a string pattern. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for handling relative paths or patterns with associated base locations in JSON-based configurations.",
      "description_length": 293,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensPartialResult",
      "library": "linol-lwt",
      "description": "This module represents partial results for semantic token processing, primarily used in language server implementations. It provides functions to create and serialize/deserialize a structure containing an integer array representing token data. The module is useful when streaming semantic token updates incrementally over a network or storing intermediate token processing results.",
      "description_length": 381,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticSeverity",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing diagnostic severity levels, including `Error`, `Warning`, `Information`, and `Hint`. It provides functions to convert values of this type to and from Yojson representations, enabling serialization and deserialization for use in JSON-based communication. These functions are useful when integrating diagnostic data with tools or protocols that require JSON encoding, such as language servers or logging systems.",
      "description_length": 454,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FoldingRangeRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering folding range providers in a language server. It includes fields to specify document selectors, an optional registration ID, and whether to enable progress reporting. The type supports conversion to and from JSON for serialization, commonly used when interfacing with LSP clients.",
      "description_length": 338,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Jsonrpc2",
      "library": "linol-lwt",
      "description": "This module orchestrates bidirectional JSON-RPC 2.0 communication for a language server, managing requests, responses, notifications, and document state changes over IO channels or stdio. It leverages an asynchronous IO submodule to handle reading from and writing to communication streams, using Lwt for concurrency, while a request ID submodule tracks individual requests via string-convertible identifiers. Main data types include request IDs, LSP protocol messages, and IO channels, with core operations for sending notifications, processing incoming requests, and maintaining document state. Examples include building a language server that reads LSP messages from stdin, responds to code completion requests, and sends diagnostics notifications over stdout.",
      "description_length": 763,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering completion features in a language server, supporting fields like trigger characters, document selectors, and commit characters. It includes functions to construct and manipulate these options, specifically tailored for integration with LSP (Language Server Protocol) clients. The types and values enable precise control over completion behavior, such as whether to support label details or use a resolve provider, and are directly used when setting up completion capabilities in an LSP session.",
      "description_length": 552,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeHierarchySupertypesParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in type hierarchy operations, specifically handling type hierarchy items along with optional partial result and work done tokens. It provides functions to construct instances of this structure and to serialize/deserialize them using Yojson. Concrete use cases include passing parameters between LSP components during type hierarchy resolution and managing progress reporting in LSP servers.",
      "description_length": 447,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WindowClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines and manipulates client capability structures for window-related features in a language server protocol implementation. It includes operations to construct capabilities with optional fields for document display, message handling, and progress reporting, and provides serialization to and from JSON. It is used to configure and communicate client-side window behavior during LSP handshake and operation.",
      "description_length": 421,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ResourceOperation",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing resource operations with optional annotations and a specific kind. It provides functions to construct instances, and serialize or deserialize them using Yojson. It is used to model and persist operations in a JSON format for systems managing annotated resource changes.",
      "description_length": 319,
      "index": 51,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Linol_lwt.CompletionList",
      "library": "linol-lwt",
      "description": "This module constructs and serializes completion lists for code editors, handling item defaults, edit ranges, and text insertion formats. It works with LSP completion items, ranges, and JSON data structures to define how suggestions are displayed and applied. Concrete use cases include building auto-completion responses in language servers with customizable insertion behavior and metadata.",
      "description_length": 392,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentFormattingParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for document formatting parameters, including formatting options, a text document identifier, and an optional work done token. It provides functions to construct instances, convert to and from JSON using Yojson. Used to pass formatting configurations in LSP-related operations, such as triggering document formatting in an editor.",
      "description_length": 367,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensDeltaParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling semantic token delta parameters in a language server protocol. It includes fields for partial and previous result identifiers, a text document identifier, and an optional work done token, supporting precise state tracking during incremental updates. The module provides functions to construct instances, and serialize or deserialize them using Yojson for efficient data exchange.",
      "description_length": 429,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.HoverClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines hover capability settings for a language server client, specifically supporting configuration of content formatting and dynamic registration. It works with optional lists of markup kinds and boolean flags. It is used to serialize and deserialize hover capability data to and from JSON, typically for communication in the Language Server Protocol.",
      "description_length": 366,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentFilter",
      "library": "linol-lwt",
      "description": "This module defines a filter for text documents based on language, URI scheme, and file pattern. It includes a function to create filters with optional criteria such as language identifier, URI scheme, or glob pattern. It is used to selectively match text documents for operations like language server protocol handling or document-specific processing.",
      "description_length": 352,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentHighlightClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to document highlighting in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is configuring and exchanging document highlight settings between a language server and its client during initialization.",
      "description_length": 417,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeActionRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering code actions in a language server, supporting filtering by document type and enabling resolution or progress reporting. It works with LSP code action kinds, document filters, and notebook cell filters to specify precise conditions under which code actions are available. Concrete use cases include setting up code refactoring options that apply only to specific file types or enabling additional metadata resolution for code actions in IDEs.",
      "description_length": 499,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CancelParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for cancellation parameters used in JSON-RPC requests, specifically containing a request identifier. It provides functions to create instances, convert to and from JSON format using Yojson, and is used to handle cancellation of ongoing operations in a server-client communication context. A concrete use case includes managing cancellation of long-running JSON-RPC calls by associating them with a unique identifier.",
      "description_length": 453,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionItemLabelDetails",
      "library": "linol-lwt",
      "description": "This module defines a data structure for holding optional description and detail strings associated with a completion item label. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to enrich code completion suggestions in language server implementations with additional contextual information.",
      "description_length": 338,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for inline completion features, specifically supporting the `workDoneProgress` setting to enable progress reporting. It works with boolean values wrapped in OCaml options and serializes to and from JSON using Yojson. It is used to configure inline completion behavior in language server protocols where progress tracking is required.",
      "description_length": 375,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ConfigurationParams",
      "library": "linol-lwt",
      "description": "This module handles the parsing and creation of configuration parameters for LSP (Language Server Protocol) requests, specifically working with lists of `ConfigurationItem` values. It provides functions to construct a configuration parameter object and to serialize or deserialize it using Yojson. A typical use case involves preparing configuration data to send to an LSP client or server, such as loading editor-specific settings during initialization.",
      "description_length": 454,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceEditClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines capabilities for workspace edit operations in a language server, supporting features like change annotations, document changes, failure handling, and resource operations. It works with boolean flags, optional structures, and lists of resource operation kinds. Concrete use cases include configuring how a language server handles batch edits, file operations, and error recovery during workspace modifications.",
      "description_length": 429,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentLinkRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering document link providers in a language server. It includes settings to specify which documents to handle using filters, whether to resolve links dynamically, and whether to track progress. These options are used to configure behavior when processing document links in text or notebook cell documents.",
      "description_length": 357,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CreateFileOptions",
      "library": "linol-lwt",
      "description": "This module defines options for file creation operations, specifically handling flags like `ignoreIfExists` and `overwrite`. It provides functions to construct these options, convert them to and from JSON format using Yojson. Concrete use cases include configuring file creation behavior in Lwt-based I/O operations and serializing/deserializing configuration settings for remote or persistent storage.",
      "description_length": 402,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkspaceSymbolClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines and constructs workspace symbol client capabilities for use in language server protocol implementations. It handles data types like `tagSupport`, `symbolKind`, and `resolveSupport` to specify supported features such as symbol tags, symbol kinds, and resolution properties. Concrete use cases include configuring client capabilities for symbol handling in LSP-based editors and serializing/deserializing these configurations using JSON.",
      "description_length": 455,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.LinkedEditingRanges",
      "library": "linol-lwt",
      "description": "This module defines a data structure for managing linked editing ranges, including an optional word pattern. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Concrete use cases include synchronizing edits across multiple locations in a text editor, such as renaming variables or updating matching identifiers.",
      "description_length": 349,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ParameterInformation",
      "library": "linol-lwt",
      "description": "This module represents parameter information with a label and optional documentation, supporting both plain string and markup content formats. It provides functions to construct instances, convert to and from JSON using Yojson, and works with LSP-compatible data structures. Concrete use cases include handling parameter metadata in language server protocol implementations, such as documenting function parameters in code editors.",
      "description_length": 431,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlayHintWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing workspace client capabilities related to inlay hints, specifically supporting an optional boolean flag for refresh functionality. It provides functions to construct instances, serialize to JSON, and deserialize from JSON using Yojson. This structure is used to communicate client capabilities in a language server protocol implementation.",
      "description_length": 388,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for semantic token registration in a language server, supporting full or delta updates, document filtering, and progress reporting. It works with structured types like `TextDocumentFilter`, `SemanticTokensLegend`, and optional boolean or nested configuration fields. Concrete use cases include setting up semantic highlighting in an LSP server with specific document scopes and progress tracking.",
      "description_length": 438,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WillSaveTextDocumentParams",
      "library": "linol-lwt",
      "description": "This module handles parameters for a text document save event, capturing the save reason and document identifier. It provides functions to construct these parameters and convert them to and from JSON format. Concrete use cases include managing pre-save operations in a language server, such as triggering formatting or validation based on the save reason and document context.",
      "description_length": 376,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentHighlightKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing kinds of document highlights, with variants for text, read, and write operations. It includes functions to convert values of type `t` to and from Yojson.Safe.t for serialization and deserialization. This module is used to encode highlight semantics in document processing workflows.",
      "description_length": 326,
      "index": 72,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CompletionParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for holding parameters used in a completion request, including position, text document identifier, and optional context and tokens. It provides functions to construct instances, convert to and from JSON format. It is used to handle auto-completion requests in a language server protocol implementation.",
      "description_length": 339,
      "index": 73,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlineValueWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing client capabilities related to inline value workspace features, specifically supporting an optional refresh mechanism. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. A concrete use case is enabling language servers to communicate inline value refresh support to clients during protocol negotiation.",
      "description_length": 393,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentSyncOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for text document synchronization in an LSP server. It includes fields to specify sync kind, save behavior, and events like open, close, and will-save. These options are used to configure how document changes and lifecycle events are handled during editing sessions.",
      "description_length": 308,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeDefinitionClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to type definition features in a language server. It includes functions to construct the structure with optional fields for dynamic registration and link support, and to serialize or deserialize it using Yojson. Concrete use cases include configuring language server clients and exchanging capability information over JSON-based protocols.",
      "description_length": 421,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyOutgoingCallsParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in LSP call hierarchy outgoing calls requests. It includes fields for a call hierarchy item, partial result token, and work done token, supporting JSON serialization and deserialization. It is used to pass parameters between client and server when retrieving outgoing call information in a language server implementation.",
      "description_length": 378,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeLensRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for code lens registration, including document selectors, resolve provider enablement, and work progress tracking. It works with LSP text document filters and notebook cell filters to specify where code lenses apply. Use this to configure code lens behavior in language server extensions for editors like VS Code.",
      "description_length": 355,
      "index": 78,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkspaceSymbol",
      "library": "linol-lwt",
      "description": "This module defines a workspace symbol type with fields for name, kind, location, container name, data, and tags, and provides functions to construct and serialize these symbols. It works with LSP-compatible data structures, including JSON and location types from the Linol_lsp module. It is used to represent and manipulate symbols in a workspace, such as for code navigation and search features in an editor or IDE.",
      "description_length": 417,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentFormattingRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering document formatting capabilities, including an optional document selector for text or notebook cell documents and a flag for work done progress. It provides functions to create these options and serialize or deserialize them using Yojson. Concrete use cases include configuring formatting support in an LSP server for specific document types or notebooks.",
      "description_length": 399,
      "index": 80,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.LogTraceParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for log trace parameters, including a required message and an optional verbose string. It provides functions to construct instances, convert to and from JSON format using Yojson. Useful for logging systems that require structured data with optional detailed output.",
      "description_length": 302,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for signature help features in an LSP (Language Server Protocol) implementation. It includes fields to specify characters that trigger or retrigger signature help, and whether work done progress is supported. The module provides functions to create and serialize these options using Yojson for use in LSP communication.",
      "description_length": 361,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentRangeFormattingClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for client capabilities related to document range formatting in a language server protocol. It includes functions to create and serialize the structure, supporting dynamic registration and range formatting features. Use this module to configure and exchange formatting capabilities between a language server and its client.",
      "description_length": 360,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CallHierarchyIncomingCall",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing incoming calls in a call hierarchy, containing a source function reference and a list of ranges. It provides functions to construct instances, convert to and from JSON using Yojson. Used to serialize and deserialize call hierarchy data for inter-process communication or storage.",
      "description_length": 323,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inline completion client capabilities, specifically supporting dynamic registration. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Use this module to configure and exchange inline completion capabilities in language server protocol implementations.",
      "description_length": 332,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CreateFilesParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing parameters used to create multiple files, along with functions to construct and serialize the structure. It works with a list of `FileCreate.t` values to group file creation requests. Concrete use cases include preparing batch file creation commands for transmission over a protocol that requires JSON serialization.",
      "description_length": 370,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.RenameFile",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file rename operations, including old and new URIs, optional annotations, and rename options. It provides functions to construct instances, and to serialize and deserialize them using Yojson. It is used to manage file renaming in LSP (Language Server Protocol) operations, particularly handling the data needed to track and execute renames across files.",
      "description_length": 407,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentSymbol",
      "library": "linol-lwt",
      "description": "This module defines a structured representation of document symbols, including hierarchical relationships and metadata like deprecation status, detail, and tags. It provides functions to construct symbols and serialize them to and from JSON. It is used to model symbols in a document for features like code navigation and outline views.",
      "description_length": 336,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentRangeFormattingParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in document range formatting operations, including formatting options, a text range, and a document identifier. It provides functions to construct instances and convert to and from JSON format. Concrete use cases include handling formatting requests in a language server where specific document regions need reformatting with given settings.",
      "description_length": 398,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ReferenceContext",
      "library": "linol-lwt",
      "description": "This module defines a context type for handling reference declarations with a boolean flag. It provides functions to create the context, and to serialize and deserialize it using Yojson. It is used to configure whether include declarations are processed in a specific context, such as during code analysis or configuration setup.",
      "description_length": 329,
      "index": 90,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ShowDocumentClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a capability indicating whether showing a document is supported. It provides functions to create a capability record, and to serialize and deserialize it using Yojson. It is used to communicate document display support in a language server protocol context.",
      "description_length": 277,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeHierarchyRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering type hierarchy handlers in a language server. It supports creating and serializing records that specify document filters, an optional identifier, and whether work progress reporting is enabled. It is used to configure how type hierarchy requests are processed for specific document types in a language server implementation.",
      "description_length": 382,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentRangeFormattingOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for document range formatting, supporting fields like `rangesSupport` and `workDoneProgress`. It works with boolean values wrapped in `option` types to represent optional settings. Concrete use cases include parsing and serializing formatting options to and from JSON, particularly for integration with language server protocols.",
      "description_length": 371,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentChangeRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering text document change notifications, including a document selector and synchronization kind. It supports creating, serializing, and deserializing registration options for use in language server protocol implementations. The module works with text document filters, notebook cell filters, and synchronization kinds to configure document change tracking in an LSP server.",
      "description_length": 412,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ProgressParams",
      "library": "linol-lwt",
      "description": "This module handles the creation and JSON serialization of progress parameters, primarily used for tracking and reporting progress in asynchronous operations. It works with tokens that can be integers or strings, along with arbitrary data values wrapped in a progress type. Concrete use cases include sending progress updates over a network or persisting progress state in a structured format like JSON.",
      "description_length": 403,
      "index": 95,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ImplementationParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in implementing LSP (Language Server Protocol) requests, specifically handling optional tokens for partial results and work done progress. It includes functions to construct the parameters with positional and document information, and to serialize/deserialize the structure to and from JSON. It is used to pass contextual data such as the text document identifier and cursor position during LSP implementation tasks.",
      "description_length": 473,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticServerCancellationData",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling cancellation requests in a diagnostic server context. It includes functions to create and serialize a cancellation record with a `retriggerRequest` boolean field. The module is used to manage JSON-based communication for cancellation events, specifically supporting retrigger logic in diagnostic workflows.",
      "description_length": 356,
      "index": 97,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ImplementationClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for specifying client capabilities related to dynamic registration and link support. It provides functions to create instances, convert to and from JSON format using Yojson. Useful for configuring client behavior in language server protocol implementations where these capabilities need to be explicitly set or serialized.",
      "description_length": 359,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceFoldersChangeEvent",
      "library": "linol-lwt",
      "description": "This module represents changes to workspace folders by tracking lists of added and removed folders. It provides functions to construct these change events and serialize them to and from JSON format. It is used to handle dynamic updates to workspace folder configurations in language server protocol implementations.",
      "description_length": 315,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MonikerKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with three variants: `Import`, `Export`, and `Local`, representing different kinds of monikers. It provides functions to convert values of this type to and from Yojson format. This module is used to serialize and deserialize moniker kinds when working with JSON-based data exchange, such as in language server protocol implementations or configuration handling.",
      "description_length": 392,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeclarationClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to declaration features in a language server protocol. It includes functions to construct the structure with optional fields for dynamic registration and link support, and to serialize or deserialize it using Yojson. Concrete use cases include configuring and exchanging client capability information during language server initialization.",
      "description_length": 421,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering call hierarchy providers in a language server. It supports specifying document selectors, an identifier, and whether work done progress is enabled. The module includes functions to create these options and serialize/deserialize them using Yojson.",
      "description_length": 304,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentChangeEvent",
      "library": "linol-lwt",
      "description": "This module handles changes to notebook documents by structuring updates into text content modifications, cell structure adjustments, and metadata changes. It supports operations for creating and organizing notebook cell arrays, text document changes, and versioned identifiers. It is used to process and represent incremental updates to notebook documents in an LSP-compliant editor backend.",
      "description_length": 392,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileOperationClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to file operations, including support for dynamic registration and notifications about file creation, deletion, and renaming. It provides functions to construct instances with optional boolean flags and to serialize/deserialize them using Yojson. It is used to configure and communicate file operation capabilities in a language server protocol implementation.",
      "description_length": 442,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentHighlightParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in document highlight operations, including position, text document identifier, and optional tokens. It provides functions to construct instances, convert to and from JSON format. It is used to handle requests for highlighting specific elements within a text document, such as when implementing IDE features like symbol highlighting.",
      "description_length": 390,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ApplyWorkspaceEditResult",
      "library": "linol-lwt",
      "description": "This module defines a result type for workspace edit operations, capturing whether the edit was applied, the index of a failed change if any, and an optional failure reason. It provides functions to construct the result, convert it to and from JSON. It is used to handle and communicate the outcome of applying batched workspace edits in a language server.",
      "description_length": 356,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing client capabilities in an LSP (Language Server Protocol) implementation, with optional fields for different capability categories like text documents, notebooks, and workspace features. It provides functions to construct instances with optional parameters and to serialize/deserialize to and from JSON using Yojson. It is used to configure and communicate client-side feature support during LSP initialization.",
      "description_length": 460,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookCellArrayChange",
      "library": "linol-lwt",
      "description": "Represents changes to a notebook cell array with optional cell updates, deletion count, and start index. It supports creating instances with specified parameters and converting to and from JSON using Yojson. Used for synchronizing notebook state in editors with LSP integration.",
      "description_length": 278,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeleteFilesParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling file deletion requests, specifically a list of file delete operations. It provides functions to create instances of this structure and to serialize or deserialize them using Yojson. A concrete use case is processing batch file deletion commands in a language server protocol implementation.",
      "description_length": 340,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.VersionedTextDocumentIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a versioned text document identified by a URI and an integer version. It provides functions to construct instances, and to convert values to and from JSON using the Yojson library. It is used to track specific versions of text documents in the context of language server protocol interactions.",
      "description_length": 337,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeNotebookDocumentParams",
      "library": "linol-lwt",
      "description": "This module represents parameters for a notebook document change event, containing a change description and a versioned notebook document identifier. It provides functions to construct instances, convert to and from JSON using Yojson. Used to handle updates to notebook documents in a language server protocol context, specifically tracking changes and document versions.",
      "description_length": 371,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyPrepareParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in preparing call hierarchy requests, including position, text document identifier, and an optional work done token. It provides functions to construct instances, and to convert to and from JSON format using Yojson. It is used to handle and serialize request data for call hierarchy operations in an LSP server implementation.",
      "description_length": 383,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module defines a variant type for representing workspace document diagnostic reports, supporting both full and unchanged diagnostic report kinds. It provides serialization and deserialization functions to and from Yojson for these report types. Concrete use cases include handling diagnostic data responses in an LSP server implementation, specifically for workspace documents.",
      "description_length": 382,
      "index": 113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.HoverOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for hover options in a language server protocol implementation. It includes a field to indicate whether work done progress is supported, with functions to create instances and serialize to or from JSON. It is used to configure hover behavior in LSP clients and servers.",
      "description_length": 306,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionOptions",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for configuring code completion features in an editor or IDE. It includes types for completion item options and global completion settings, supporting fields like trigger characters, commit characters, and progress indicators. The module is used to serialize and deserialize these configuration options to and from JSON, enabling storage or transmission of editor preferences.",
      "description_length": 426,
      "index": 115,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.LogMessageParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for log messages with a message string and a message type from the `MessageType` module. It includes functions to construct instances, convert to and from JSON using Yojson, and ensures proper serialization and deserialization. It is used to handle structured logging in LSP communication, specifically for sending log messages with associated severity levels.",
      "description_length": 397,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used to request signature help in a text document. It includes the cursor position, document identifier, optional context, and an optional work done token. The module supports creating parameter instances, and serializing or deserializing them using Yojson for use in LSP (Language Server Protocol) communication.",
      "description_length": 365,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRangeParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in folding range operations, including optional tokens for partial results and work tracking, along with a text document identifier. It provides functions to create instances and convert to and from JSON format. This module is used to pass parameters when requesting folding ranges in a text document, particularly during language server protocol interactions.",
      "description_length": 417,
      "index": 118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ReferenceParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for holding parameters used in a reference resolution operation, including contextual information, document position, and optional tokens for partial results and work tracking. It provides functions to construct instances of this structure and to serialize/deserialize them using Yojson. Concrete use cases include handling reference requests in a language server, where precise location and context are required to retrieve or process symbol references.",
      "description_length": 491,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionList",
      "library": "linol-lwt",
      "description": "This module defines a structure for managing a list of inline completion items, primarily used in language server protocol implementations. It provides functions to construct the structure, convert it to and from JSON format using Yojson. Concrete use cases include handling code completion suggestions in an editor backend.",
      "description_length": 324,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileOperationPatternKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` representing file or folder operation patterns. It includes functions to convert values between this type and Yojson.Safe.t for JSON serialization and deserialization. It is used to distinguish between file and folder targets in operations that require different handling for each.",
      "description_length": 324,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RenameOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring rename operations with optional settings. It provides functions to create instances and serialize/deserialize them using Yojson. Concrete use cases include handling configuration data for language server rename features, where `prepareProvider` and `workDoneProgress` control specific behavioral aspects during renaming.",
      "description_length": 373,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentLinkOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for document link resolution, including whether to enable a resolve provider and work done progress tracking. It supports serialization and deserialization to and from JSON using Yojson. Concrete use cases include setting up document link behavior in language server implementations and managing client-side feature flags.",
      "description_length": 364,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.PublishDiagnosticsParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for publishing diagnostic information associated with a specific document URI and version. It includes functions to construct the structure, convert it to and from JSON format using Yojson. The structure is used to report errors, warnings, or other analysis results for a file in an editor or IDE integration.",
      "description_length": 346,
      "index": 124,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.OptionalVersionedTextDocumentIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a text document identifier with an optional version number. It provides functions to create such identifiers, convert them to and from JSON format using Yojson. It is used to uniquely reference text documents in a version-aware context, such as tracking changes in a text editor or language server.",
      "description_length": 342,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeWatchedFilesClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for client capabilities related to file watching, specifically supporting dynamic registration and relative pattern matching. It provides functions to create instances and serialize/deserialize them using Yojson. This is used to configure how a language server monitors file changes in a workspace.",
      "description_length": 335,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentHighlight",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing document highlights in a text editor, including a range and an optional highlight kind. It provides functions to construct highlights, convert them to and from JSON format using Yojson. It is used to serialize and deserialize highlight information for features like syntax highlighting or search result visualization in an LSP-based editor.",
      "description_length": 394,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentOnTypeFormattingClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for client capabilities related to document on-type formatting in a language server. It includes functions to create instances, serialize to JSON, and deserialize from JSON. It is used to configure formatting behavior based on client support, such as enabling or disabling dynamic registration of formatting handlers.",
      "description_length": 354,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.UnregistrationParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling a list of unregistration requests in the context of the LSP (Language Server Protocol). It provides functions to create instances, convert to and from JSON format using Yojson, and manage unregistration data efficiently. Concrete use cases include processing client unregistration events and serializing unregistration data for transport or storage.",
      "description_length": 399,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHintParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inlay hint parameters, including range, text document identifier, and an optional work done token. It provides functions to construct instances, convert to and from JSON format. It is used to pass contextual information when requesting inlay hints in a language server protocol implementation.",
      "description_length": 334,
      "index": 130,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DeleteFile",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file deletion operations, including an optional annotation ID, deletion options, and a URI. It provides functions to construct instances, convert to and from JSON format. It is used to serialize and deserialize file deletion requests in a language server protocol implementation.",
      "description_length": 333,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.AnnotatedTextEdit",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing text edits with associated annotations, including the new text and its target range. It provides functions to construct these edits, convert them to and from JSON format using Yojson. Concrete use cases include managing document modifications in an editor that supports annotation-based tracking of changes.",
      "description_length": 361,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueContext",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing the context of inline values during debugging, specifically capturing the frame ID and the range of the stopped location. It provides functions to construct instances, convert to and from JSON format using Yojson. This is used to communicate inline value information in a language server protocol implementation, enabling IDEs to display variable values at specific code locations.",
      "description_length": 431,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookCellKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` representing the kind of a notebook cell, with variants `Markup` and `Code`. It provides functions to convert between this type and Yojson representations, enabling serialization and deserialization. These conversions are useful when loading or saving notebook data from files or transmitting over a network.",
      "description_length": 351,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InitializedParams_",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for handling initialization parameters in an LSP (Language Server Protocol) server. It includes types for client information and initialization parameters, along with functions to construct and serialize these types. It is used to capture client metadata, capabilities, and configuration options during the LSP initialization handshake.",
      "description_length": 386,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeLensClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to code lens features in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these capabilities using Yojson. A typical use case involves configuring a language server client to enable or disable code lens functionality based on user settings or protocol requirements.",
      "description_length": 434,
      "index": 136,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlineValueOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for inline value options with a single optional boolean field indicating work progress handling. It provides functions to create instances, convert to and from JSON using Yojson. This is used to configure server behavior in language tooling scenarios where inline value display depends on progress reporting.",
      "description_length": 349,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionItem",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inline completion items in a language server protocol implementation. It includes fields for optional commands, filter text, insert text (as a string or structured value), and an optional range. The module supports creating, serializing, and deserializing these items, specifically for use in code completion features within an editor or IDE.",
      "description_length": 383,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for tracking work progress, with a single boolean field indicating whether progress tracking is enabled. It provides functions to create instances, serialize to JSON, and deserialize from JSON. This is used to configure progress reporting in LSP (Language Server Protocol) implementations where work progress needs to be communicated over JSON-based RPC.",
      "description_length": 395,
      "index": 139,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FileOperationPatternOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for file operation patterns, specifically supporting case-insensitive matching through the `ignoreCase` field. It provides functions to create and serialize these options, enabling consistent handling of file pattern operations. Use cases include configuring file search or filtering logic where case sensitivity is optional.",
      "description_length": 367,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentFormattingOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for document formatting options, specifically supporting a `workDoneProgress` flag. It provides functions to create instances, convert to and from JSON using Yojson, and manage optional fields. Use this module when handling configuration data for document formatting tasks that require progress tracking.",
      "description_length": 341,
      "index": 141,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DefinitionClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines client capabilities related to dynamic registration and link support. It provides functions to create capability records, along with serialization and deserialization to and from JSON using Yojson. These capabilities are typically used to configure language server behavior during protocol negotiation.",
      "description_length": 322,
      "index": 142,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeActionResult",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a list of either LSP commands or code actions, wrapped in an option. It includes functions to convert values between this type and JSON using Yojson. It is used to serialize and deserialize code action results for communication in LSP-based tools.",
      "description_length": 291,
      "index": 143,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeActionContext",
      "library": "linol-lwt",
      "description": "This module defines a data structure for code action contexts, including diagnostics, optional action kinds, and trigger information. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to pass contextual information for code actions in an LSP server, such as determining which fixes or refactorings are applicable based on current diagnostics and user intent.",
      "description_length": 410,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionTriggerKind",
      "library": "linol-lwt",
      "description": "This module defines a variant type representing different kinds of triggers for completion events, such as user invocation, trigger characters, or incomplete completions. It includes functions to convert between the variant type and Yojson.Safe.t for serialization and deserialization. This is useful when handling language server protocol events where completion triggers need to be exchanged in JSON format.",
      "description_length": 409,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeWatchedFilesParams",
      "library": "linol-lwt",
      "description": "This module handles parameters for file change events in a language server protocol implementation. It provides functions to construct and serialize/deserialize a list of file events, specifically used when watched files are modified. The module works directly with `Linol_lsp__Types.FileEvent.t` lists and integrates with JSON serialization via `Yojson.Safe.t`.",
      "description_length": 362,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Locations",
      "library": "linol-lwt",
      "description": "This module handles serialization and deserialization of location data structures used in language server protocol responses. It supports two primary data forms: a list of standard locations or a list of location links, both derived from LSP types. The module converts these structures to and from Yojson representations for use in JSON-based communication.",
      "description_length": 357,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FormattingOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for formatting options used in text editing operations, such as file formatting or code beautification. It includes boolean and integer fields to control spacing, newline insertion, and trimming behavior. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for configuration or storage purposes.",
      "description_length": 385,
      "index": 148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlayHintOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for inlay hint providers, specifically controlling whether hints can be resolved lazily and whether work progress should be tracked. It works with boolean flags and integrates with JSON serialization through Yojson. Concrete use cases include setting up language server protocol (LSP) features for editor integrations that require inlay hints with optional resolution and progress reporting.",
      "description_length": 433,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SelectionRangeRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering selection range capabilities in a language server. It includes fields for specifying document selectors, an optional registration ID, and whether work done progress is supported. The module provides functions to construct these options and serialize or deserialize them using Yojson.",
      "description_length": 341,
      "index": 150,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentOnTypeFormattingOptions",
      "library": "linol-lwt",
      "description": "This module defines document formatting options triggered by specific characters, such as newline or semicolon, to initiate auto-formatting. It supports parsing and serializing these options to and from JSON, enabling configuration through external files or APIs. Use this module to specify and manage formatting triggers in a text editor or IDE integration.",
      "description_length": 358,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensRangeParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in semantic token range requests, including optional tokens for partial results and work progress tracking. It provides functions to construct instances, and to convert to and from JSON format using Yojson. Concrete use cases include handling semantic token queries in a language server, where precise text document ranges and cancellation tokens are required.",
      "description_length": 417,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeWorkspaceFoldersParams",
      "library": "linol-lwt",
      "description": "This module handles workspace folder change events in an LSP server. It provides functions to construct and serialize these events using the `WorkspaceFoldersChangeEvent` type. Use this module when implementing dynamic workspace folder updates in an editor or IDE integration.",
      "description_length": 276,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.PrepareSupportDefaultBehavior",
      "library": "linol-lwt",
      "description": "This module defines a single variant type `t` representing an identifier and provides functions to convert values of this type to and from Yojson format. It supports serialization and deserialization for data that needs to be stored or transmitted as JSON. A concrete use case is handling configuration or state data that requires persistent storage or network transmission.",
      "description_length": 374,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensDeltaPartialResult",
      "library": "linol-lwt",
      "description": "This module represents partial results for semantic token deltas, specifically tracking a list of semantic token edits. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for handling incremental updates to semantic tokens in an LSP server implementation.",
      "description_length": 296,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.UniquenessLevel",
      "library": "linol-lwt",
      "description": "This module defines a set of levels representing different scopes of uniqueness, including document, project, group, scheme, and global. It provides functions to convert these levels to and from JSON format using the Yojson library. These conversions are useful when serializing or deserializing configuration or state data that must preserve the scope of unique identifiers or constraints.",
      "description_length": 390,
      "index": 156,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Linol_lwt.ShowDocumentParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used to show a document in an editor, including options like focus behavior, selection range, and external display. It provides functions to construct instances, and serialize/deserialize them using Yojson. Concrete use cases include handling document display requests in language server protocol implementations.",
      "description_length": 365,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpTriggerKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing the possible trigger kinds for signature help in an editor context, including invocation, trigger characters, and content changes. It provides functions to convert between JSON values and the `t` type. These conversions are useful when handling language server protocol requests that require serializing or deserializing trigger events.",
      "description_length": 380,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceFolder",
      "library": "linol-lwt",
      "description": "This module defines a workspace folder structure with a name and URI, providing functions to create instances and serialize or deserialize them using Yojson. It works with string names and `Linol_lsp.Uri0.t` URIs. It is used to manage and persist workspace folder data in LSP-related applications.",
      "description_length": 297,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InitializeError",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling initialization errors with a boolean flag indicating whether to retry. It provides functions to create instances, convert to and from JSON using Yojson. Concrete use cases include managing error states in asynchronous initialization processes where retry logic is required.",
      "description_length": 323,
      "index": 160,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeActionKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` representing specific categories of code actions, such as `QuickFix`, `Refactor`, and `SourceOrganizeImports`, including support for custom string-based variants. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. Typical use cases include handling code action requests in LSP (Language Server Protocol) implementations and managing structured code transformation intents.",
      "description_length": 486,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileOperationRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for file operation registrations, primarily used to specify filters that determine which file operations are processed. It works with lists of `FileOperationFilter.t` values, which are used to restrict file events based on patterns or schemes. A typical use case involves setting up file watchers or handlers that only respond to specific file types or locations, such as monitoring `.ml` files in a project directory.",
      "description_length": 460,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ImplementationOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuration options related to progress reporting in LSP (Language Server Protocol) implementations. It includes a boolean field `workDoneProgress` that indicates whether work progress notifications should be used. The module provides functions to create instances, and to convert to and from JSON format using Yojson.",
      "description_length": 361,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ExecuteCommandRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for specifying options related to command execution registration, including a list of commands and an optional work done progress flag. It provides functions to create instances, convert to and from JSON format using Yojson. It is used to configure command registration behavior in LSP (Language Server Protocol) implementations.",
      "description_length": 366,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.PartialResultParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling optional partial result tokens, supporting creation with integer or string identifiers and serialization to and from JSON. It works with a single custom type `t` that encapsulates an optional polymorphic token. Concrete use cases include managing intermediate results in asynchronous computations and persisting partial state across sessions using JSON serialization.",
      "description_length": 417,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentSymbolOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring document symbol requests, including an optional label and a flag for work done progress. It provides functions to create instances, convert to and from JSON format using Yojson. This is used to specify parameters when requesting document symbols in a language server protocol implementation.",
      "description_length": 344,
      "index": 166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentClientCapabilities",
      "library": "linol-lwt",
      "description": "This module handles the serialization and deserialization of notebook document client capabilities, specifically managing synchronization settings. It works with the `t` record type, which contains a synchronization field of type `Linol_lsp__Types.NotebookDocumentSyncClientCapabilities.t`. It is used to convert between JSON representations and internal data structures when configuring notebook document support in an LSP client.",
      "description_length": 431,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpContext",
      "library": "linol-lwt",
      "description": "This module defines a context for managing signature help in a language server, specifically handling retriggering and trigger sources. It works with optional `SignatureHelp` data and trigger metadata like character or kind. Use it to construct and serialize/deserialize context data for signature help requests in LSP implementations.",
      "description_length": 335,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RenameFilesParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing parameters used in file renaming operations, specifically a list of file rename actions. It provides functions to construct instances of this structure, convert it to and from JSON format using Yojson. It is used to handle batch file renaming requests in LSP (Language Server Protocol) implementations, where each rename operation includes source and target file paths.",
      "description_length": 423,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRange",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing a folding range in a text document, with fields for start and end positions, optional collapsed text, and a kind. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for implementing code folding features in editors by mapping regions of source code to foldable blocks.",
      "description_length": 359,
      "index": 170,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.PrepareRenameParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in preparing a rename operation, including position, text document identifier, and an optional work done token. It provides functions to construct instances, and serialize/deserialize to and from JSON. It is used to handle rename requests in a language server, specifically for tracking where and in which document a rename should occur.",
      "description_length": 394,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SelectionRange",
      "library": "linol-lwt",
      "description": "This module represents hierarchical selection ranges with optional parent-child relationships. It provides functions to create ranges with an optional parent reference, and to serialize and deserialize them using Yojson. Concrete use cases include managing nested or structured text selections in an editor where ranges can be grouped or organized hierarchically.",
      "description_length": 363,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileOperationPattern",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file operation patterns with glob matching, optional match kinds, and pattern options. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. It is used to specify file monitoring or processing rules in language server protocols.",
      "description_length": 320,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.HoverParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling hover request parameters in a language server protocol implementation. It includes fields for the cursor position, text document identifier, and an optional work done token, with support for JSON serialization and deserialization. The module is used to pass contextual information when requesting hover content, such as displaying type information or documentation at a specific location in a text editor.",
      "description_length": 455,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RenameParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for holding parameters related to renaming operations in a text document. It includes functions to construct the structure, convert it to and from JSON format. It is used to handle rename requests in language server protocol interactions, specifically providing the new name, position, document identifier, and optional work token.",
      "description_length": 368,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ResourceOperationKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic variant type `t` representing resource operation kinds such as creation, renaming, and deletion. It includes functions to convert values of type `t` to and from Yojson representations, enabling JSON serialization and deserialization. These functions are used to encode or decode operation types when transmitting or storing structured data involving resource actions.",
      "description_length": 401,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceSymbolOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for workspace symbol handling, specifically supporting JSON serialization and deserialization. It works with boolean flags to indicate whether a resolve provider and work done progress are enabled. Concrete use cases include configuring symbol resolution behavior in language server protocol implementations and serializing these settings to and from JSON for communication with clients.",
      "description_length": 429,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeWatchedFilesRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for specifying file system watchers in the context of a language server protocol implementation. It includes functions to create an instance with a list of watchers and to serialize or deserialize instances using Yojson. A concrete use case is registering interest in file changes for specific files or directories within an LSP-based editor integration.",
      "description_length": 391,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeDefinitionOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for type definition options with a single field indicating whether work done progress is enabled. It provides functions to create instances, serialize to and from JSON using Yojson. This structure is used to configure behavior for type definition operations in LSP-related workflows.",
      "description_length": 320,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ExecuteCommandClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to executing commands, specifically supporting optional dynamic registration. It provides functions to create instances, serialize to JSON, and deserialize from JSON. This is used to configure and communicate command execution capabilities in a language server protocol implementation.",
      "description_length": 367,
      "index": 180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRangeOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for handling folding range operations, specifically supporting optional work done progress tracking. It provides functions to create and serialize these configuration values, using `Yojson.Safe.t` for JSON encoding and decoding. This is used to manage server-side processing feedback during code folding operations in a language server context.",
      "description_length": 385,
      "index": 181,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SelectionRangeClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to selection range features in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is configuring and exchanging capability metadata between a language server and client during initialization.",
      "description_length": 408,
      "index": 182,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.NotebookCell",
      "library": "linol-lwt",
      "description": "This module defines a notebook cell structure with fields for document URI, execution summary, cell kind, and metadata. It provides functions to create a cell with optional parameters and serialize/deserialize cells using Yojson. Concrete use cases include managing individual notebook cells in a language server environment, tracking execution state, and persisting cell data in JSON format.",
      "description_length": 392,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MessageActionItem",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing message action items with a title. It provides functions to create instances, serialize to and from JSON using Yojson. It is used to manage actionable items in messages, such as interactive elements in a messaging or notification system.",
      "description_length": 291,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeLensWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing workspace client capabilities related to code lens refresh support. It includes functions to create instances with optional refresh support, and to serialize and deserialize these instances using Yojson. It is used to configure and communicate code lens capabilities in a language server protocol implementation.",
      "description_length": 366,
      "index": 185,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlineCompletionParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in inline completion requests, including context, position, text document identifier, and an optional work done token. It provides functions to construct instances, convert to and from JSON format. It is used to handle inline code completion in text editors supporting the LSP protocol.",
      "description_length": 343,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceFullDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module defines a data structure for reporting diagnostics associated with a specific document version in a workspace. It includes functions to construct reports with diagnostic items, an optional result ID, document URI, and version number, as well as serialization and deserialization to and from JSON. It is used to communicate full document diagnostic results in a language server protocol context.",
      "description_length": 406,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a record type representing client capabilities for text document features in a language server protocol. It includes fields for enabling or configuring specific features like code actions, completion, hover, and document synchronization. The module provides functions to construct instances, convert to and from JSON, and supports fine-grained control over language server features in an LSP client implementation.",
      "description_length": 434,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentSelector",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a list of document selectors, which can match either text documents or notebook cell text documents based on their properties. It provides functions to convert values of type `t` to and from Yojson for serialization and deserialization. This module is used to handle document selection criteria in the context of language server protocol requests, such as those involving configuration or capability registration.",
      "description_length": 457,
      "index": 189,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressCreateParams",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing parameters for creating a work done progress token, which can be either an integer or a string. It provides functions to construct a `t` value, and to convert between `t` and Yojson.Safe.t for serialization and deserialization. This module is used to handle progress reporting in LSP (Language Server Protocol) interactions, specifically for initializing progress tracking with a unique token.",
      "description_length": 437,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeclarationRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering document declarations, supporting filters for text documents or notebook cells, an optional identifier, and progress tracking. It provides functions to construct these options, convert them to and from JSON format. It is used to specify parameters when registering features like code declarations in an LSP server.",
      "description_length": 372,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RelatedUnchangedDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module handles diagnostic reports for unchanged documents in a language server protocol context. It provides functions to create and serialize diagnostic report structures that include optional related documents mapped to URIs, along with a result ID. It is used to represent and exchange diagnostic data in LSP communication, particularly for scenarios where document diagnostics remain unchanged.",
      "description_length": 403,
      "index": 192,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ProgressToken",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic type `t` that represents progress tokens as either integers or strings. It includes functions to convert values between this type and Yojson.Safe.t for serialization and deserialization. This is useful when handling JSON-based progress tracking in LSP (Language Server Protocol) implementations.",
      "description_length": 329,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentColorParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in document color-related operations, including identifiers for partial results, work done tokens, and text document references. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This structure is used to manage state and metadata when handling document color requests in a language server protocol context.",
      "description_length": 413,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelp",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing signature help information in a language server protocol implementation. It includes functions to construct the structure with optional active parameter and signature indices, along with serialization and deserialization to and from JSON. It is used to provide contextual function signature guidance during code editing in an IDE or editor.",
      "description_length": 394,
      "index": 195,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.TypeHierarchySubtypesParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in type hierarchy subtypes requests, including a type hierarchy item and optional tokens for partial results and work done. It provides functions to create instances, convert to and from JSON format. This structure is used to manage request metadata when handling type hierarchy queries in a language server protocol implementation.",
      "description_length": 389,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHintRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering inlay hint providers in a language server. It supports specifying document selectors, unique identifiers, resolution capabilities, and progress reporting. These configurations are used to tailor how inlay hints are provided for text documents or notebook cells in an LSP-compliant editor integration.",
      "description_length": 358,
      "index": 197,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DiagnosticOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring diagnostic behavior in a language server, with fields to control identifiers, inter-file dependencies, progress reporting, and workspace-wide diagnostics. It provides functions to construct instances with optional parameters and to serialize/deserialize them using Yojson. Concrete use cases include setting up diagnostic options for LSP (Language Server Protocol) communication and managing configuration across different client sessions.",
      "description_length": 492,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InsertTextMode",
      "library": "linol-lwt",
      "description": "This module defines two insertion modes for handling text in an editor: `AsIs`, which inserts text without modification, and `AdjustIndentation`, which automatically adjusts indentation based on context. It includes functions to serialize and deserialize these modes using Yojson for persistent storage or configuration purposes. Concrete use cases include managing user preferences for text insertion behavior in an editor or IDE.",
      "description_length": 431,
      "index": 199,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ChangeAnnotationIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type `t` as a string alias for identifiers used in change annotations. It includes functions to convert values of type `t` to and from Yojson representations, enabling JSON serialization and deserialization. These operations support persisting or transmitting change annotation identifiers in JSON format.",
      "description_length": 327,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidCloseNotebookDocumentParams",
      "library": "linol-lwt",
      "description": "This module handles parameters for a notebook document close event, capturing the notebook identifier and associated cell text documents. It provides functions to construct the parameter type, along with JSON serialization and deserialization. Useful when implementing language server protocol handlers for notebook lifecycle events.",
      "description_length": 333,
      "index": 201,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlineValueVariableLookup",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing inline value variable lookups, including whether the lookup is case-sensitive, the associated range, and an optional variable name. It provides functions to construct instances, and to serialize and deserialize them using Yojson. This structure is used to convey contextual information about variable values directly within source code editors, particularly during debugging sessions.",
      "description_length": 438,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressParams",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing parameters for work-done progress in LSP (Language Server Protocol) interactions, specifically containing an optional `workDoneToken` used to track progress. It provides functions to create instances, and to convert to and from Yojson for serialization. This module is used when sending progress updates or handling cancellation requests in LSP servers.",
      "description_length": 397,
      "index": 203,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.TextDocumentSaveReason",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic variant type representing the reasons a text document might be saved, such as manual user action, automatic saving after a delay, or when losing focus. It includes functions to convert between this type and Yojson representations for serialization and deserialization. These functions are useful when handling save events in an editor or IDE integration that requires persisting document state with context.",
      "description_length": 441,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileChangeType",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing file system events: `Created`, `Changed`, or `Deleted`. It includes functions to convert values of type `t` to and from Yojson format. These conversions are useful for serializing and deserializing file change events, for example when sending or storing event data in JSON format.",
      "description_length": 324,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHint",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing inlay hints in a text editor, including fields like label, position, kind, and optional text edits or tooltips. It provides functions to construct these hints with customizable properties and convert them to and from JSON format. Concrete use cases include displaying inline type annotations, parameter hints, or code actions directly within an editor's UI.",
      "description_length": 411,
      "index": 206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines client capabilities for signature help in a language server, including support for parameter labels, documentation formats, and active parameter tracking. It works with nested records and optional boolean flags, along with markup kinds for documentation. Concrete use cases include configuring signature help behavior in an LSP client and serializing capabilities to or from JSON.",
      "description_length": 400,
      "index": 207,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressCancelParams",
      "library": "linol-lwt",
      "description": "This module handles cancellation parameters for work progress tracking, specifically supporting cancellation requests with either an integer or string token. It provides functions to create a token value, convert to and from JSON using Yojson, and defines the structure for passing cancellation tokens in LSP-related workflows. Concrete use cases include managing cancellation signals in language server protocol implementations where progress tracking is required.",
      "description_length": 465,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MonikerParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in moniker-related operations within a language server protocol implementation. It includes fields for position, text document identifier, and optional tokens for partial results and work done tracking. The module provides functions to construct instances, and serialize/deserialize them to and from JSON.",
      "description_length": 362,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MonikerClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing client capabilities related to moniker functionality, specifically supporting dynamic registration. It provides functions to construct values of type `t`, and to convert to and from JSON using the Yojson library. This module is used to configure client-side moniker handling in language server protocol implementations.",
      "description_length": 363,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.StringValue",
      "library": "linol-lwt",
      "description": "This module defines a concrete type `t` that wraps a string value, providing functions to create instances, convert to and from JSON using Yojson. It is used to handle string-based data with explicit structure, particularly in contexts requiring JSON serialization and deserialization. A typical use case is parsing and generating JSON payloads where string values are encapsulated for type safety and clarity.",
      "description_length": 410,
      "index": 211,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DeclarationLink",
      "library": "linol-lwt",
      "description": "This module defines a type `t` for representing declaration links in a structured format. It provides functions to convert values of type `t` to and from Yojson representations, enabling serialization and deserialization. These operations are used when persisting or transmitting declaration link data in JSON format.",
      "description_length": 317,
      "index": 212,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DefinitionOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for handling work progress options, specifically supporting optional boolean flags. It provides functions to create instances, convert to and from JSON format using Yojson. This is used to manage serialization and deserialization of work progress settings in LSP (Language Server Protocol) related operations.",
      "description_length": 350,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ConfigurationItem",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing configuration items with optional scope URIs and sections. It provides functions to create instances and serialize or deserialize them using Yojson. Concrete use cases include managing editor configuration settings tied to specific files or sections in an LSP-based application.",
      "description_length": 328,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueText",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing inline text values with associated ranges. It provides functions to construct these values, convert them to and from JSON format. It is used to encode textual annotations positioned within a document, such as variable values displayed during debugging.",
      "description_length": 302,
      "index": 215,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DidCloseTextDocumentParams",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing parameters for a text document close event, containing a `textDocument` field of type `TextDocumentIdentifier.t`. It provides functions to construct instances, and serialize/deserialize them using Yojson. This is used to handle notifications when a text document is closed in an LSP server.",
      "description_length": 334,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentColorRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering document color providers in a language server. It includes fields for specifying document selectors, an optional registration ID, and whether to enable progress reporting. The module supports serialization to and from JSON for use in LSP communication.",
      "description_length": 310,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceUnchangedDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module defines a diagnostic report structure for tracking unchanged documents in a workspace. It includes operations to create reports with a result ID, URI, and optional version, and supports JSON serialization and deserialization. It is used to maintain diagnostic state across editing sessions without re-analyzing unchanged files.",
      "description_length": 339,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Unregistration",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing unregistration events, with fields for an identifier and a method. It includes functions to create instances and to convert between JSON and the structure. It is used to handle unregistration data in JSON format, particularly for parsing and serializing event information.",
      "description_length": 326,
      "index": 219,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DidSaveTextDocumentParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling text document save events, including the saved text and document identifier. It provides functions to construct instances, and serialize or deserialize them using JSON. It is used to communicate document content updates in a language server protocol context.",
      "description_length": 308,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeActionParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in code action requests, including context, range, text document identifier, and optional tokens for partial results and work done tracking. It provides functions to construct instances of this structure and to serialize/deserialize them using Yojson. Concrete use cases include handling code action requests in an LSP server, such as generating quick fixes or refactorings based on the provided context and document range.",
      "description_length": 480,
      "index": 221,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FileOperationFilter",
      "library": "linol-lwt",
      "description": "This module defines a filter for file operations based on a pattern and an optional URI scheme. It provides functions to create a filter, and to serialize and deserialize filters using Yojson. It is used to specify which file operations should be monitored or processed, typically in the context of language server protocol implementations.",
      "description_length": 340,
      "index": 222,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ReferenceOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for managing reference-related options, specifically tracking whether work progress is enabled. It provides functions to create instances, convert to and from JSON format, and handles optional boolean values. Use this when configuring reference processing behavior in JSON-based communication, such as in language server protocols.",
      "description_length": 368,
      "index": 223,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentSyncClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for notebook document synchronization capabilities, including dynamic registration and execution summary support. It provides functions to create instances and serialize/deserialize them using Yojson. This is used to configure client capabilities for notebook synchronization in a language server.",
      "description_length": 334,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensEdit",
      "library": "linol-lwt",
      "description": "This module defines a record type for representing semantic token edits, with fields for token data, deletion count, and start position. It includes functions to create instances and convert to and from JSON using Yojson. It is used to encode incremental changes to semantic token sequences in a text document.",
      "description_length": 310,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureHelpRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for signature help features in a language server, supporting document selectors, trigger characters, and progress reporting. It works with LSP text document filters, string lists, and boolean flags. Concrete use cases include setting up signature help registration with specific document scopes and defining characters that trigger or retrigger the feature.",
      "description_length": 399,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for inline value parameters used in a language server protocol implementation. It includes functions to construct the structure, serialize it to JSON, and deserialize it from JSON. The module is used to pass contextual information about inline values during code analysis or debugging sessions.",
      "description_length": 331,
      "index": 227,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentLink",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing document links in a text editor, including their range, target URI, optional tooltip, and additional metadata. It provides functions to construct these link objects and serialize or deserialize them using JSON. Concrete use cases include handling clickable links in code editors, such as navigating to definitions or displaying contextual information.",
      "description_length": 405,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module constructs and serializes diagnostic reports containing full or unchanged document diagnostics. It handles lists of workspace diagnostic variants, enabling conversion between JSON and the `t` type. Use it to process diagnostic data from language servers, distinguishing between updated and unchanged documents.",
      "description_length": 322,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Color",
      "library": "linol-lwt",
      "description": "This module defines a color representation with red, green, blue, and alpha components, each as integers. It provides functions to construct colors, and to convert colors to and from Yojson format for serialization and deserialization. It is used for handling color data in applications that require JSON encoding, such as web services or configuration files.",
      "description_length": 359,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileEvent",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing file change events, including the type of change and the associated URI. It provides functions to construct these events and serialize or deserialize them using Yojson. Concrete use cases include tracking file modifications in a language server or handling file system events in a JSON-based communication protocol.",
      "description_length": 365,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.LinkedEditingRangeParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in linked editing range operations, including position, text document identifier, and an optional work done token. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to support features like synchronized editing in IDEs, where changes to one part of a document affect related sections.",
      "description_length": 393,
      "index": 232,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.Moniker",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing a moniker with fields for identifier, kind, scheme, and uniqueness level. It provides functions to construct monikers, and to serialize and deserialize them using Yojson. It is used to uniquely identify symbols across different documents in a language server context.",
      "description_length": 317,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeConfigurationParams",
      "library": "linol-lwt",
      "description": "This module handles the deserialization and reconfiguration of JSON-based settings updates. It provides a structured way to represent and manipulate configuration changes using the `t` record, which wraps JSON values. Typical use cases include processing dynamic configuration updates in a server or service that reacts to external setting changes.",
      "description_length": 348,
      "index": 234,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CallHierarchyOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring call hierarchy operations, specifically supporting optional work done progress tracking. It provides functions to create instances and serialize or deserialize them using Yojson. This is used to manage client capabilities during language server protocol interactions involving call hierarchy requests.",
      "description_length": 354,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidOpenNotebookDocumentParams",
      "library": "linol-lwt",
      "description": "This module handles parameters for a notebook document open event, containing the notebook document and its associated cell text documents. It provides functions to construct the parameter type, along with JSON serialization and deserialization. Useful for processing notebook-related events in a language server handling notebook formats, such as Jupyter notebooks.",
      "description_length": 366,
      "index": 236,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressReport",
      "library": "linol-lwt",
      "description": "This module defines a data structure for reporting progress in long-running operations, including optional fields for cancellation status, status messages, and completion percentage. It provides functions to construct progress reports, and to serialize and deserialize them using Yojson. Concrete use cases include tracking the progress of background tasks in a client-server application or monitoring the execution of asynchronous computations.",
      "description_length": 445,
      "index": 237,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.HoverRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for hover registration in a language server, supporting document selectors and work done progress tracking. It works with text document filters and notebook cell text document filters to specify which documents trigger hover functionality. Concrete use cases include setting up hover behavior for specific file types or notebook cells in an editor integration.",
      "description_length": 402,
      "index": 238,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InitializeResult",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for handling initialization results in a language server protocol implementation. It includes types for server information and capabilities, along with functions to construct these types and serialize them to and from JSON using Yojson. The module is used to format and parse the response sent by a language server during the initialization handshake.",
      "description_length": 401,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeActionOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for code actions, including supported kinds, resolution capability, and progress reporting. It provides functions to create and serialize these options using LSP-compatible data structures. Use this to customize code action behavior in language server implementations.",
      "description_length": 310,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyItem",
      "library": "linol-lwt",
      "description": "This module defines a structured representation of call hierarchy items, including fields like name, kind, range, and associated URI. It provides functions to construct these items and serialize or deserialize them using JSON. This module is used to model hierarchical relationships between symbols in a codebase, such as tracking function calls across different files and locations.",
      "description_length": 383,
      "index": 241,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeActionClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines data structures and serialization functions for representing client capabilities related to code actions in a language server protocol. It includes types for resolve support, code action kinds, and literal support, along with optional capabilities like dynamic registration and data support. The module is used to configure and communicate code action features between a language client and server, such as supporting specific action kinds or resolving additional action details during editing.",
      "description_length": 514,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentSymbolRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering document symbol providers, supporting filtering by text document or notebook cell document types. It includes fields for specifying a label and enabling work done progress tracking. The module provides functions to construct these options and serialize/deserialize them to and from JSON.",
      "description_length": 345,
      "index": 243,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.MonikerOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for handling work progress options, specifically supporting optional boolean flags. It provides functions to create instances, convert to and from JSON using Yojson. This module is useful when parsing or generating JSON configurations that include an optional `workDoneProgress` field, such as in LSP (Language Server Protocol) implementations.",
      "description_length": 385,
      "index": 244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeHierarchyClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to type hierarchy in a JSON-compatible format. It includes functions to construct the structure with an optional dynamic registration flag, and to serialize and deserialize it using Yojson. Concrete use cases include configuring and exchanging client capabilities in language server protocol implementations.",
      "description_length": 390,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SetTraceParams",
      "library": "linol-lwt",
      "description": "This module defines a record type `t` with a single field `value` of type `TraceValues.t` and provides functions to create instances of this type and convert them to and from JSON using Yojson. It supports parsing and serializing trace parameters in JSON format, specifically for use in LSP (Language Server Protocol) communication. The module is used to handle trace configuration data sent between a language server and client during initialization or reconfiguration.",
      "description_length": 470,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DiagnosticRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering diagnostic capabilities in a language server, supporting document-specific filters, dependency tracking, and workspace-level diagnostics. It works with lists of text document filters, string identifiers, and boolean flags to control diagnostic behavior. Concrete use cases include setting up per-document or workspace-wide diagnostic reporting with optional progress tracking and inter-file dependency analysis.",
      "description_length": 469,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentContentChangeEvent",
      "library": "linol-lwt",
      "description": "This module represents text document content change events with optional range and range length fields, along with the new text. It provides functions to create these events, and to convert them to and from Yojson format for serialization. It is used to model incremental text changes in a document, such as those sent by a language server during editing.",
      "description_length": 355,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensLegend",
      "library": "linol-lwt",
      "description": "This module defines a structure for representing semantic token legends, specifically handling lists of token modifiers and types. It provides functions to create instances and convert between JSON and the internal type representation. A typical use case involves parsing and serializing token legend data for use in language server protocols or syntax highlighting systems.",
      "description_length": 374,
      "index": 249,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FoldingRangeKind",
      "library": "linol-lwt",
      "description": "This module defines a variant type for categorizing different kinds of folding ranges in source code, such as comments, imports, regions, and custom categories. It includes functions to convert between the variant type and Yojson representations. It is used to serialize and deserialize folding range kind data when interfacing with tools like language servers.",
      "description_length": 361,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Hover",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing hover information in a language server protocol implementation. It includes functions to construct hover objects with optional range information and supports serialization to and from JSON. The module is used to provide contextual documentation or type information during code editing interactions.",
      "description_length": 352,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.VersionedNotebookDocumentIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a versioned notebook document identifier, consisting of a URI and an integer version. It provides functions to construct such identifiers, and to convert them to and from JSON format using Yojson. This module is used to uniquely identify specific versions of notebook documents in a format compatible with LSP (Language Server Protocol) communication.",
      "description_length": 395,
      "index": 252,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CompletionItemTag",
      "library": "linol-lwt",
      "description": "This module defines a single enumerated type `t` with a `Deprecated` variant, representing tags for completion items in a language server context. It provides functions to convert values of this type to and from Yojson for serialization and deserialization. This is used to communicate metadata about code completions, such as deprecation status, in LSP (Language Server Protocol) implementations.",
      "description_length": 397,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidSaveNotebookDocumentParams",
      "library": "linol-lwt",
      "description": "This module handles parameters for a notebook document save event, specifically wrapping a notebook document identifier. It provides functions to construct the parameter type, along with serialization and deserialization to and from JSON using Yojson. A concrete use case is transmitting save notifications in a language server protocol implementation.",
      "description_length": 352,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentHighlightOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for document highlighting features, specifically supporting the `workDoneProgress` flag to indicate whether progress reporting is enabled. It provides functions to create and serialize these options using `Yojson.Safe.t` for JSON encoding and decoding. Use this module to configure and exchange document highlight settings in LSP (Language Server Protocol) implementations.",
      "description_length": 415,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentFilter",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing document filters for text documents and notebook cell text documents. It provides functions to convert values of type `t` to and from Yojson for serialization and deserialization. It is used to handle document filtering logic in the context of language server protocol implementations.",
      "description_length": 329,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Diagnostic",
      "library": "linol-lwt",
      "description": "This module defines a diagnostic data structure for representing code analysis results, including severity, message, range, and optional metadata like code descriptions or related information. It provides functions to construct diagnostics and serialize them to and from JSON. Concrete use cases include reporting syntax errors, type mismatches, or linting issues in a language server.",
      "description_length": 385,
      "index": 257,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.SemanticTokensOptions",
      "library": "linol-lwt",
      "description": "This module defines and constructs configuration options for semantic token handling, including full token computation modes, token legends, and optional range and progress tracking. It works with records containing boolean flags, semantic token legends, and optional delta encoding settings. It is used to configure language server responses for semantic token requests in LSP (Language Server Protocol) implementations.",
      "description_length": 421,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHintLabelPart",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing parts of an inlay hint label, including optional command, location, tooltip, and value fields. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to generate richly annotated labels in code editors supporting inlay hints with actionable elements and tooltips.",
      "description_length": 358,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceFoldersServerCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing server capabilities related to workspace folder management in a language server protocol implementation. It includes fields for indicating whether workspace folder changes are supported and how change notifications are delivered, either as a boolean flag or a custom string identifier. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for use in LSP communication.",
      "description_length": 474,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceEdit",
      "library": "linol-lwt",
      "description": "This module constructs and serializes workspace edit operations for LSP (Language Server Protocol) interactions. It handles text document modifications, file creations, renames, and deletions through structured types like `TextEdit`, `CreateFile`, and related LSP types. Use it to build or parse JSON representations of batched editing commands sent to or received from an LSP server.",
      "description_length": 384,
      "index": 261,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.RenameClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to rename operations in a language server protocol. It includes fields to indicate support for dynamic registration, change annotations, and preparation steps, along with a default behavior setting for preparation. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 403,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ApplyWorkspaceEditParams",
      "library": "linol-lwt",
      "description": "This module constructs and serializes parameters for applying workspace edits in an LSP server. It handles a workspace edit and an optional label, enabling structured data exchange with JSON representations. Use it to prepare and transmit batched document changes with descriptive labels in LSP-compatible tools.",
      "description_length": 312,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentOnTypeFormattingParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling document formatting parameters triggered by a specific character input. It includes fields for the character input, formatting options, cursor position, and text document identifier, along with functions to construct and serialize the structure. It is used to implement on-type formatting features in an LSP server, where formatting is applied as the user types a specific character.",
      "description_length": 433,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentFilter",
      "library": "linol-lwt",
      "description": "This module defines a notebook document filter with JSON serialization and deserialization capabilities. It operates on a unit type, representing a filter configuration for notebook documents. Concrete use cases include parsing and generating filter settings in JSON format for notebook document processing systems.",
      "description_length": 315,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Command",
      "library": "linol-lwt",
      "description": "This module defines a command structure with a title, command identifier, and optional JSON-encoded arguments. It provides functions to construct commands, and to serialize and deserialize them using Yojson. Useful for implementing LSP (Language Server Protocol) commands that require structured data exchange in JSON format.",
      "description_length": 325,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeConfigurationClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing client capabilities related to dynamic registration for configuration changes. It includes functions to construct instances, convert to and from JSON format using Yojson. Used to handle dynamic registration flags in language server protocol configurations.",
      "description_length": 306,
      "index": 267,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentColorOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for document color options, specifically tracking whether work done progress is enabled. It provides functions to create instances, convert to and from JSON format using Yojson, and is used to configure color-related features in document processing workflows. The module directly supports scenarios where color settings need to be serialized or deserialized for transmission or storage.",
      "description_length": 427,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SignatureInformation",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing signature information in a language server protocol context. It includes fields for the label, active parameter index, documentation, and parameters, supporting optional and polymorphic data through sum types and lists. The module provides functions to construct instances, and serialize or deserialize them using Yojson for integration with JSON-based communication.",
      "description_length": 421,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Registration",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing registration entries with fields like `id`, `method_`, and optional `registerOptions`. It includes functions to construct these structures, convert them to and from JSON using Yojson. It is used to manage registration data in a format compatible with LSP (Language Server Protocol) extensions.",
      "description_length": 347,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RenameRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for renaming operations in a text editor, supporting document filtering, preparation, and progress tracking. It works with document selectors, boolean flags, and JSON serialization. Used to configure rename behavior in LSP-based editors, enabling precise document filtering and progress handling.",
      "description_length": 338,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ReferenceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to dynamic registration. It includes functions to create instances, serialize to and from JSON format using Yojson. This is useful when configuring or exchanging client settings in a networked application.",
      "description_length": 287,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineCompletionRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for inline completion registration, including document selectors, an optional identifier, and progress tracking. It supports creating and serializing these configurations with functions like `create`, `t_of_yojson`, and `yojson_of_t`. It is used to set up inline completion capabilities in a language server, specifying where and how completions should be provided.",
      "description_length": 407,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentRangeFormattingRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering document range formatting capabilities in a language server. It includes fields for specifying document filters, range support, and progress reporting. The module provides functions to create and serialize these options, primarily used during server initialization to configure formatting features for text documents or notebook cells.",
      "description_length": 379,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionContext",
      "library": "linol-lwt",
      "description": "This module represents the context in which a completion request is triggered, capturing the triggering character and kind. It provides functions to construct, serialize, and deserialize this context using Yojson. Useful for handling language server protocol completion events where trigger information must be parsed or generated.",
      "description_length": 331,
      "index": 275,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CallHierarchyIncomingCallsParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in a call hierarchy incoming calls request. It includes fields for a call hierarchy item, a partial result token, and a work done token, supporting asynchronous processing and result streaming. The module provides functions to construct instances, and to convert to and from JSON representations, enabling integration with LSP (Language Server Protocol) communication.",
      "description_length": 425,
      "index": 276,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.Location",
      "library": "linol-lwt",
      "description": "This module represents a location in a text document, defined by a range and a URI. It provides functions to construct locations, convert them to and from JSON format. Used to track positions in source files when implementing language server protocol features like go-to-definition or find-references.",
      "description_length": 301,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeHierarchyItem",
      "library": "linol-lwt",
      "description": "This module defines a record type for representing items in a type hierarchy, with fields for metadata like name, kind, ranges, and associated data. It provides functions to construct these records and serialize them to and from JSON using Yojson. Concrete use cases include processing and transmitting type hierarchy information in language server protocol implementations.",
      "description_length": 374,
      "index": 278,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_lwt.DiagnosticClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to diagnostics in a language server protocol implementation. It includes functions to construct the structure with optional fields and to serialize and deserialize it using Yojson. Concrete use cases include configuring diagnostic features supported by a client, such as dynamic registration or markup message support, during LSP handshake.",
      "description_length": 422,
      "index": 279,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CreateFile",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file creation requests with optional annotations and settings. It provides functions to construct these requests, convert them to and from JSON format. It is used to handle file creation events in a language server protocol implementation, where precise control over file options and identifiers is required.",
      "description_length": 362,
      "index": 280,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeLens",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing code lenses in a text editor, including associated commands, metadata, and source ranges. It provides functions to construct code lens instances and to serialize/deserialize them using Yojson. Concrete use cases include implementing inline code navigation and refactoring actions in an LSP-based editor plugin.",
      "description_length": 364,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ShowMessageParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing message parameters in a messaging system, specifically handling message content and type. It provides functions to construct instances, convert to and from JSON format using Yojson, and ensures type safety with a defined message type enumeration. Concrete use cases include serializing and deserializing messages for transmission or storage, and managing message metadata in a structured way.",
      "description_length": 446,
      "index": 282,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.MarkupContent",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing markup content with a specific kind and string value. It provides functions to create instances, convert to and from JSON using Yojson. It is used to handle formatted text data in contexts like language server protocol responses.",
      "description_length": 283,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.LocationLink",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing a link between two locations in a document, typically used for features like \"Go to Definition\" or \"Find References\" in language servers. It includes functions to construct the link with optional origin and target ranges, and to serialize or deserialize the structure using Yojson. The module works with URIs and range types to precisely identify positions within source files.",
      "description_length": 427,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextEdit",
      "library": "linol-lwt",
      "description": "This module represents text edits with a new string and a specific range in a document. It provides functions to create these edits and convert them to and from JSON format. Concrete use cases include applying changes to source code during language server operations like formatting or refactoring.",
      "description_length": 298,
      "index": 285,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentDiagnosticParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in document diagnostic requests, including optional fields for identifiers, result tokens, and a required text document reference. It provides functions to construct instances, convert to and from JSON format. It is used to manage diagnostic data in text document processing workflows.",
      "description_length": 342,
      "index": 286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.TextDocumentPositionParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for holding parameters related to a text document and a specific position within it, typically used in language server protocol interactions. It includes functions to construct instances and convert to and from JSON format using Yojson. Concrete use cases include handling requests like hover or goto definition in an LSP server implementation.",
      "description_length": 381,
      "index": 287,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DeclarationParams",
      "library": "linol-lwt",
      "description": "This module defines a record type for parameters used in a declaration request, including optional tokens and references to a text document and position. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to handle parameter data during language server protocol operations like document navigation or symbol resolution.",
      "description_length": 364,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ExecuteCommandParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for command execution parameters, including command name, optional arguments, and an optional work done token. It provides functions to construct instances, and to serialize and deserialize them using Yojson. It is used to pass commands with structured arguments and progress tracking tokens between components.",
      "description_length": 348,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileDelete",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing file deletion operations by URI. It includes functions to create instances, serialize to and from JSON, and is used to handle file deletion requests in a web service context. The module works directly with URIs as strings and integrates with JSON serialization libraries for API communication.",
      "description_length": 347,
      "index": 290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.UnchangedDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a diagnostic report for an unchanged document, containing a `resultId` string. It provides functions to create instances, convert to and from JSON using Yojson. This is used to handle diagnostic results in a document processing context where no changes were made.",
      "description_length": 307,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileRename",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing a file rename operation, with fields for the old and new file paths. It provides functions to construct instances of this structure and to serialize and deserialize them using Yojson. This structure is used to track file renaming events in a JSON-compatible format, suitable for logging or transmission over a network.",
      "description_length": 368,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeclarationOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring declaration-related options, specifically supporting a boolean flag for work done progress. It provides functions to create instances, convert to and from JSON format using Yojson. Useful for serializing and deserializing configuration settings when integrating with systems that require JSON-based communication.",
      "description_length": 366,
      "index": 293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.StaticRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for static registration options with an optional string identifier. It provides functions to create instances, serialize to and from JSON using Yojson. Useful for managing configuration data that requires optional identifiers, such as in registration or setup processes.",
      "description_length": 307,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokenTypes",
      "library": "linol-lwt",
      "description": "This module defines a variant type representing semantic token categories for code analysis, such as `Function`, `Variable`, and `Comment`. It includes functions to convert these tokens to and from Yojson representations, enabling serialization and deserialization. It is used to label and process syntactic elements in source code for tools like linters or language servers.",
      "description_length": 375,
      "index": 295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentDiagnosticReportKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with two variants, `Full` and `Unchanged`, representing the kind of diagnostic report for a document. It provides functions to convert values of this type to and from Yojson representations. This is used to serialize and deserialize diagnostic report kinds when communicating with tools or storing diagnostic data in JSON format.",
      "description_length": 360,
      "index": 296,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Linol_lwt.LinkedEditingRangeClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to linked editing ranges in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is enabling a language server to communicate its ability to handle linked editing features, such as synchronized renaming of identifiers, with a compatible client.",
      "description_length": 459,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeDefinitionRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering type definition handlers in a language server. It includes fields to specify which documents to target, an optional identifier, and whether to support progress reporting. The module provides functions to construct these options and serialize or deserialize them using Yojson.",
      "description_length": 333,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceSymbolRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for workspace symbol registration, including whether to enable a resolve provider and work done progress tracking. It provides functions to create these options and convert them to and from JSON format. It is used to configure symbol resolution behavior in language server implementations.",
      "description_length": 331,
      "index": 299,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module defines a variant type for representing different kinds of document diagnostic reports, specifically full and unchanged document diagnostics. It includes functions for converting these report types to and from Yojson representations. It is used to serialize and deserialize diagnostic data for transmission in LSP (Language Server Protocol) communications.",
      "description_length": 368,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RelatedFullDocumentDiagnosticReport",
      "library": "linol-lwt",
      "description": "This module constructs and serializes diagnostic reports containing a list of diagnostics and optional related document entries. It handles full or unchanged document diagnostic reports mapped to URIs, with optional result identifiers. Use this to generate structured diagnostic responses for language server protocol interactions.",
      "description_length": 331,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ShowDocumentResult",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing the result of a document display operation, with a boolean indicating success or failure. It includes functions to serialize and deserialize the structure to and from JSON, using the Yojson library. The module is used to communicate the outcome of document rendering in a web-based code editor frontend.",
      "description_length": 357,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RegistrationParams",
      "library": "linol-lwt",
      "description": "Handles the creation and JSON serialization of registration parameters for language server capabilities. Works with lists of registration objects conforming to LSP specification. Used to prepare and transmit dynamic registration requests during LSP client-server negotiation.",
      "description_length": 275,
      "index": 303,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentColorClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to document color features in a language server protocol. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these capabilities using Yojson. A concrete use case is configuring and exchanging color-related client capabilities during language server initialization.",
      "description_length": 412,
      "index": 304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TokenFormat",
      "library": "linol-lwt",
      "description": "This module defines a single data type `t` representing token formatting options, specifically the `Relative` variant. It includes functions to convert values of type `t` to and from Yojson representations, enabling JSON serialization and deserialization. This module is useful when working with token-based formatting configurations that need to be persisted or transmitted as JSON.",
      "description_length": 383,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensParams",
      "library": "linol-lwt",
      "description": "This module defines parameters for requesting semantic token information, including optional partial result and work done tokens, along with a required text document identifier. It provides functions to create parameter instances and serialize/deserialize them using Yojson. This module is used to structure data when handling semantic token requests in a language server.",
      "description_length": 372,
      "index": 306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MarkupKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic variant type with two constructors, `PlainText` and `Markdown`, representing different text formatting options. It includes functions to convert values of this type to and from Yojson representation, enabling JSON serialization and deserialization. This is useful when handling configuration or data inputs that specify text rendering formats, such as API responses or user preferences.",
      "description_length": 420,
      "index": 307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SymbolKind",
      "library": "linol-lwt",
      "description": "This module defines a variant type representing different kinds of symbols in a programming context, such as `Class`, `Function`, `Variable`, and `Enum`. It includes functions to convert values between the symbol kind type and Yojson representation, enabling JSON serialization and deserialization. This is useful when working with language server protocol messages or configuration files that require symbol metadata in JSON format.",
      "description_length": 433,
      "index": 308,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.TraceValues",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic variant type `t` representing different levels of trace verbosity, including `Compact`, `Off`, `Messages`, and `Verbose`. It provides direct serialization and deserialization functions to and from Yojson for these trace level values. This module is useful for configuring and persisting logging or tracing settings in applications that use the Linol_lwt library.",
      "description_length": 396,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.PositionEncodingKind",
      "library": "linol-lwt",
      "description": "This module defines an enumerated type representing different character encoding schemes such as UTF8, UTF16, and UTF32, along with a variant for custom encodings. It includes functions to convert values of this type to and from JSON using the Yojson library. This is useful when handling text position data in applications that need to interoperate with JSON-based APIs or configurations, such as language servers or text editors.",
      "description_length": 431,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceDiagnosticReportPartialResult",
      "library": "linol-lwt",
      "description": "This module defines a type `t` that represents a partial result of a workspace diagnostic report, containing a list of either full or unchanged document diagnostic reports. It provides functions to create instances of this type, and to serialize and deserialize them using Yojson. This is used to handle incremental diagnostic updates in a language server protocol implementation.",
      "description_length": 380,
      "index": 311,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ShowMessageRequestParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters of a show message request, including a message string, message type, and optional list of message action items. It provides functions to create instances, and serialize/deserialize to and from JSON. It is used to construct and process messages with actionable items in the context of a language server protocol implementation.",
      "description_length": 378,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering text document handlers, supporting filters for both standard text documents and notebook cell documents. It provides functions to create registration options and serialize/deserialize them using Yojson. Concrete use cases include configuring language server features that apply to specific document types, such as syntax highlighting or code completion for different file formats.",
      "description_length": 424,
      "index": 313,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.InlineCompletionTriggerKind",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with two variants, `Invoked` and `Automatic`, representing the possible trigger kinds for inline completion events. It provides functions `t_of_yojson` and `yojson_of_t` for converting between the type `t` and Yojson.Safe.t values. This module is used to serialize and deserialize inline completion trigger kind data when interfacing with JSON-based systems, such as language server protocol implementations.",
      "description_length": 439,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SymbolTag",
      "library": "linol-lwt",
      "description": "This module defines a single variant type `t` representing symbol tags, currently only `Deprecated`. It provides functions to convert values of this type to and from JSON using Yojson. This is useful for serializing and deserializing symbol metadata in JSON-based APIs or configuration files.",
      "description_length": 292,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MessageType",
      "library": "linol-lwt",
      "description": "This module defines a variant type for representing message severity levels such as error, warning, info, log, and debug. It includes functions to convert these message types to and from Yojson representations. This enables structured logging and serialization of diagnostic messages to JSON formats.",
      "description_length": 300,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing workspace client capabilities related to semantic tokens in a language server. It includes functions to create the structure, serialize it to JSON, and deserialize it from JSON. A concrete use case is configuring a language server's support for refreshing semantic token data during development.",
      "description_length": 349,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokens",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing semantic token data as an integer array with an optional result identifier. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to serialize and deserialize semantic token information for transmission or storage.",
      "description_length": 317,
      "index": 318,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.LinkedEditingRangeRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for registering linked editing range providers in a language server. It includes fields to specify document selectors, an optional registration ID, and whether to enable progress reporting. The structure supports JSON serialization and deserialization for use in LSP communication.",
      "description_length": 323,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WatchKind",
      "library": "linol-lwt",
      "description": "This module defines a variant type representing file system watch events: creation, modification, deletion, and other events with a custom string identifier. It includes functions to convert these event types to and from Yojson representations. This module is used to serialize and deserialize file system event data for communication or logging purposes.",
      "description_length": 355,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CompletionItem",
      "library": "linol-lwt",
      "description": "This module defines a completion item data structure with optional fields for text edits, commands, documentation, and metadata. It provides functions to construct completion items and serialize them to and from JSON. It is used to represent code completion suggestions in an LSP server, including how they should be displayed and inserted into the editor.",
      "description_length": 356,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ReferenceRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering reference providers in a language server, supporting configuration through document selectors and work done progress flags. It handles serialization and deserialization of these options using Yojson. Use this module to configure and exchange reference registration settings between LSP clients and servers.",
      "description_length": 350,
      "index": 322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkspaceSymbolParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling workspace symbol parameters in a JSON-RPC compliant editor extension. It includes fields for query strings, partial result tokens, and work done tokens, supporting efficient symbol search and progress tracking. The module provides functions to construct instances, and serialize or deserialize them using Yojson for communication over LSP (Language Server Protocol).",
      "description_length": 416,
      "index": 323,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DiagnosticWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing workspace client capabilities related to diagnostic refresh support. It includes functions to create an instance with optional refresh support, and to serialize and deserialize the structure using Yojson. A concrete use case is configuring language server clients to handle diagnostic updates efficiently during development.",
      "description_length": 378,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlayHintClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for working with inlay hint client capabilities in the context of language server protocol implementations. It includes types for resolution support and top-level capabilities, along with functions to construct and serialize these types. The module is used to configure and communicate client-side inlay hint features, such as dynamic registration and property resolution, during language server negotiation.",
      "description_length": 458,
      "index": 325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SelectedCompletionInfo",
      "library": "linol-lwt",
      "description": "This module defines a data structure representing selected completion information with a text range and associated content. It provides functions to construct instances, convert to and from JSON format. Used to serialize and deserialize completion data for transmission in language server protocol interactions.",
      "description_length": 311,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ChangeAnnotation",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing change annotations with optional descriptions and confirmation flags. It provides functions to create annotations, convert them to and from JSON format using Yojson. Useful for logging or tracking changes in a system where user confirmation may be required.",
      "description_length": 311,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentSymbolClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines and constructs data structures for specifying client capabilities related to document symbols in a language server protocol. It supports operations to create and manage configurations like symbol kind sets, tag support lists, and boolean flags for features such as hierarchical symbol support or label support. These capabilities are used to negotiate and tailor symbol-related behavior between a language client and server during LSP initialization.",
      "description_length": 470,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentOnTypeFormattingRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering document-on-type formatting handlers in an LSP server. It includes a document selector to specify which documents to apply formatting to, along with trigger characters that initiate formatting. The module supports conversion to and from JSON for serialization and configuration purposes.",
      "description_length": 331,
      "index": 329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeDescription",
      "library": "linol-lwt",
      "description": "This module defines a data structure with a single field representing a URI reference. It provides functions to create instances of this structure, convert to and from JSON format using Yojson. It is used to serialize and deserialize URI-based references in JSON-based communication, such as in language server protocol extensions.",
      "description_length": 331,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRangeClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for configuring folding range capabilities in a language server. It includes types for specifying supported folding range kinds, collapsed text behavior, and server-side limitations. These configurations are used to customize code folding features in text editors based on the Language Server Protocol.",
      "description_length": 352,
      "index": 331,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentSyncRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module handles serialization and deserialization of notebook document synchronization registration options using Yojson. It defines a type `t` as a unit and provides functions to convert between `t` and `Yojson.Safe.t`. This is specifically used for interfacing with LSP (Language Server Protocol) clients that require structured data exchange in JSON format.",
      "description_length": 364,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.GlobPattern",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing glob patterns, which can be either absolute or relative. It provides functions to convert between this type and JSON using the Yojson library. It is used to handle pattern matching for file paths in a structured and type-safe way.",
      "description_length": 274,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentHighlightRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for document highlight registration, including a list of document filters and an optional work done progress flag. It provides functions to create these options and convert them to and from JSON format. It is used to specify which documents should trigger highlight operations and track progress in an LSP server.",
      "description_length": 355,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DidChangeConfigurationRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines a type `t` for representing configuration change registration options, specifically handling optional configuration sections as either a single string or a list of strings. It provides functions to create instances of this type, convert from and to JSON using Yojson. This is useful for managing dynamic configuration updates in a language server, where the relevant configuration section needs to be specified during registration.",
      "description_length": 451,
      "index": 335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkspaceFoldersInitializeParams",
      "library": "linol-lwt",
      "description": "This module handles initialization parameters for workspace folders in a language server protocol implementation. It provides functions to create, serialize, and deserialize a structure that optionally contains a list of workspace folders. Use this module when setting up or configuring workspace-specific settings in an LSP-based editor integration.",
      "description_length": 350,
      "index": 336,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ShowMessageRequestClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines data structures and serialization functions for handling client capabilities related to showing message requests. It includes types for `messageActionItem` with optional support flags and a top-level type `t` that wraps these capabilities. The module is used to encode and decode capability data in JSON format, specifically for integrating with language server protocol clients.",
      "description_length": 399,
      "index": 337,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_lwt.Range",
      "library": "linol-lwt",
      "description": "This module represents a range defined by start and end positions, typically used to describe regions within a text document. It provides functions to construct ranges and convert them to and from JSON format. Concrete use cases include tracking text selections or edits in an editor implementing the Language Server Protocol.",
      "description_length": 326,
      "index": 338,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.ExecutionSummary",
      "library": "linol-lwt",
      "description": "This module defines a data structure to represent the outcome and sequence of an execution step. It includes functions to construct summaries with explicit ordering and optional success status, and to serialize or deserialize them using Yojson. It is used to track and persist step execution metadata in workflows.",
      "description_length": 314,
      "index": 339,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.RegularExpressionsClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing regular expression client capabilities, including the engine name and optional version. It provides functions to construct instances, convert to and from JSON format using Yojson, and specify the engine and version. Concrete use cases include serializing and deserializing client capability information for communication in a language server protocol context.",
      "description_length": 413,
      "index": 340,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SelectionRangeParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for handling parameters related to text selection ranges in a document. It includes fields for positions, document identifiers, and optional tokens, supporting JSON serialization and deserialization. It is used to manage and transmit selection range data in editor integrations or language server protocol implementations.",
      "description_length": 359,
      "index": 341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.IO_lwt",
      "library": "linol-lwt",
      "description": "This module implements asynchronous input/output operations using Lwt, providing functions for reading from and writing to channels, handling exceptions with backtraces, and composing asynchronous computations. It works with Lwt input and output channels, bytes, and strings, supporting concrete tasks like reading lines from stdin or writing strings to stdout. Key operations include `let*` and `and+` for chaining and combining Lwt-based IO actions.",
      "description_length": 451,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SemanticTokensDelta",
      "library": "linol-lwt",
      "description": "This module represents semantic token updates using a list of edit operations and an optional result identifier. It provides functions to construct these update objects, convert them to and from JSON format using Yojson. It is used to efficiently transmit incremental changes to semantic token data in language server protocol implementations.",
      "description_length": 343,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentIdentifier",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a text document identifier with a URI. It provides functions to create an identifier, serialize it to JSON, and deserialize it from JSON. It is used to uniquely reference text documents in the context of language server protocol interactions.",
      "description_length": 286,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentSyncClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for specifying client capabilities related to text document synchronization, including options like `didSave`, `dynamicRegistration`, `willSave`, and `willSaveWaitUntil`. It provides functions to construct instances, and to convert to and from JSON format using Yojson. It is used to configure how a language client handles document events during editing sessions.",
      "description_length": 401,
      "index": 345,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_lwt.NotebookDocument",
      "library": "linol-lwt",
      "description": "This module defines a notebook document structure with fields for cells, metadata, type, URI, and version. It provides functions to construct notebook documents, and to serialize and deserialize them using Yojson. It is used to represent and manipulate notebook content in a format compatible with JSON-based protocols.",
      "description_length": 319,
      "index": 346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeHierarchyPrepareParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for preparing type hierarchy parameters, including position, text document identifier, and an optional work done token. It provides functions to create instances, and serialize/deserialize to and from JSON. It is used to pass parameters for type hierarchy operations in a language server protocol implementation.",
      "description_length": 349,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.MarkdownClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for specifying Markdown client capabilities, including allowed HTML tags, the parser name, and an optional version. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to configure Markdown rendering behavior in a client, such as specifying which tags are permitted and which parser to use.",
      "description_length": 377,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FoldingRangeWorkspaceClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing workspace client capabilities related to folding range operations, specifically supporting an optional refresh flag. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This structure is used to configure and communicate client capabilities in a language server protocol context.",
      "description_length": 380,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ColorPresentationParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in color presentation requests, including color, document identifier, range, and optional tokens. It provides functions to construct instances, and serialize/deserialize to and from JSON. This is used to handle color formatting and rendering in a language server protocol context.",
      "description_length": 337,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CodeLensParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for parameters used in code lens operations, including optional tokens for partial results and work progress tracking. It provides functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include handling code lens requests in an LSP server, where document identifiers and progress tokens are required for asynchronous processing.",
      "description_length": 409,
      "index": 351,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CompletionItemKind",
      "library": "linol-lwt",
      "description": "This module defines a variant type representing different kinds of completion items in a code editor or language server context. It includes functions to convert between the type and Yojson representations for serialization and deserialization. It is used to specify the kind of each completion item returned by language tools, such as whether it is a function, variable, or keyword.",
      "description_length": 383,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ExecuteCommandOptions",
      "library": "linol-lwt",
      "description": "This module defines a data structure for configuring command execution options, including a list of commands and an optional work-done progress flag. It provides functions to construct instances, convert to and from JSON format. It is used to serialize and deserialize command configurations for execution in a JSON-based communication context.",
      "description_length": 344,
      "index": 353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentItem",
      "library": "linol-lwt",
      "description": "This module defines a record type for text document metadata, including language ID, content, URI, and version. It provides functions to construct instances, and to convert to and from JSON using Yojson. It is used to represent and serialize text document state in a language server protocol implementation.",
      "description_length": 307,
      "index": 354,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.NotebookCellTextDocumentFilter",
      "library": "linol-lwt",
      "description": "This module defines a type `t` that represents a filter for notebook cell text documents, optionally specifying a language and a notebook identifier either as a string or a document filter. It includes functions to create instances of this type, and to convert to and from JSON using the Yojson library. This is useful for configuring language-specific notebook filters in JSON-based protocols like LSP (Language Server Protocol).",
      "description_length": 430,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DocumentRangesFormattingParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for formatting parameters that includes formatting options, a list of ranges, a text document identifier, and an optional work done token. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to pass parameters for formatting specific ranges in a text document via the LSP protocol.",
      "description_length": 362,
      "index": 356,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.MarkedString",
      "library": "linol-lwt",
      "description": "This module represents strings with an optional associated language tag, using a record type that includes a `value` and `language`. It provides serialization and deserialization functions to and from Yojson for data interchange, typically used when handling structured text data with metadata such as language hints. Common use cases include processing multilingual content or preparing string data for JSON-based APIs.",
      "description_length": 420,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.PublishDiagnosticsClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines client capabilities for publishing diagnostics in a language server protocol implementation. It includes functions to create and manipulate capability structures with optional boolean flags and nested tag support, using lists of diagnostic tags. The module supports serialization and deserialization to and from JSON using the Yojson library.",
      "description_length": 362,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueEvaluatableExpression",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing inline value evaluatable expressions, including their source code range. It provides functions to create instances, serialize to, and deserialize from JSON. Used to pass expression values and positions between LSP components during debugging or inline evaluation.",
      "description_length": 317,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ColorInformation",
      "library": "linol-lwt",
      "description": "This module represents color information with associated ranges, providing functions to create instances and convert to and from JSON. It works with color and range data types defined in the Linol_lsp__Types module. Concrete use cases include handling color annotations in text editors, such as highlighting specific regions with given colors.",
      "description_length": 343,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InsertTextFormat",
      "library": "linol-lwt",
      "description": "This module defines a type `t` with two variants, `PlainText` and `Snippet`, representing different text insertion formats. It provides functions to convert values of type `t` to and from Yojson.Safe.t for serialization and deserialization. This module is useful when handling text input formats that need to be persisted or transmitted as JSON, such as in configuration files or API responses.",
      "description_length": 394,
      "index": 361,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CodeLensOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for code lens features, specifically controlling whether a resolve provider is enabled and whether work done progress is reported. It works with boolean values wrapped in options to represent optional settings. These settings are used to configure code lens behavior in language server protocols, typically for managing feature flags during development.",
      "description_length": 395,
      "index": 362,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FileSystemWatcher",
      "library": "linol-lwt",
      "description": "This module represents file system watchers configured with glob or relative patterns and optional watch kinds. It provides functions to create watcher instances and serialize/deserialize them using Yojson. Concrete use cases include defining file monitoring rules for LSP servers and persisting/reloading those rules from JSON configurations.",
      "description_length": 343,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.DeleteFileOptions",
      "library": "linol-lwt",
      "description": "This module defines a record type for delete file options with optional `ignoreIfNotExists` and `recursive` flags. It provides functions to create instances of this type and to serialize/deserialize them using Yojson. It is used to configure file deletion behavior in Lwt-based file system operations.",
      "description_length": 301,
      "index": 364,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.DocumentFormattingClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to document formatting in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these capabilities using Yojson. A concrete use case is configuring and exchanging formatting options between a language server and its client during initialization.",
      "description_length": 409,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TypeHierarchyOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for handling type hierarchy operations, specifically including an optional `workDoneProgress` flag. It provides functions to create instances, convert to and from JSON format using Yojson. This module is used to configure type hierarchy requests in LSP (Language Server Protocol) implementations, where the `workDoneProgress` field indicates whether progress notifications should be sent during the operation.",
      "description_length": 450,
      "index": 366,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.RenameFileOptions",
      "library": "linol-lwt",
      "description": "This module defines options for file renaming operations, specifically handling behaviors for `ignoreIfExists` and `overwrite`. It provides functions to create option values and convert to and from JSON using Yojson. Useful for configuring file move operations in Lwt-based systems where JSON serialization is needed.",
      "description_length": 317,
      "index": 367,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.CompletionClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines data structures and creation functions for specifying client capabilities related to code completion in a language server protocol. It handles types like `completionItem`, `completionItemKind`, and `completionList`, each capturing specific feature support such as snippet insertion, documentation formatting, and item tagging. These structures are used to configure and negotiate completion features between a language client and server during protocol initialization.",
      "description_length": 488,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.CallHierarchyClientCapabilities",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing client capabilities related to call hierarchy in a language server. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is configuring and exchanging call hierarchy capabilities between a language server and client during initialization.",
      "description_length": 406,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InitializeParams",
      "library": "linol-lwt",
      "description": "This module defines data structures and functions for handling initialization parameters in a language server protocol implementation. It includes types for client information and initialization parameters, along with constructors and JSON serialization functions. It is used to configure the initial handshake between a language client and server, capturing details like client capabilities, root URI, and workspace folders.",
      "description_length": 425,
      "index": 370,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FileCreate",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing a file creation request with a URI. It provides functions to construct a value of this type, and to serialize and deserialize it using Yojson. It is used to handle file creation operations in a JSON-based API or configuration system.",
      "description_length": 277,
      "index": 371,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.LinkedEditingRangeOptions",
      "library": "linol-lwt",
      "description": "This module defines options for linked editing range functionality, specifically supporting a `workDoneProgress` boolean flag. It provides functions to create instances and convert to and from JSON format using Yojson. It is used to configure progress reporting behavior during linked editing operations in language server protocols.",
      "description_length": 333,
      "index": 372,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.WorkspaceDiagnosticParams",
      "library": "linol-lwt",
      "description": "This module defines a data structure for workspace diagnostic parameters used in the LSP protocol. It includes fields for tracking result identifiers, partial result tokens, and work done tokens, supporting efficient diagnostic reporting. The module provides functions to construct instances, and serialize/deserialize them to and from JSON.",
      "description_length": 341,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.ColorPresentation",
      "library": "linol-lwt",
      "description": "This module defines a data structure for representing color presentation information in a text editor, including optional text edits and labels. It provides functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include handling color formatting and applying text edits in an LSP-based editor integration.",
      "description_length": 349,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.SaveOptions",
      "library": "linol-lwt",
      "description": "This module defines a configuration type for save operations with an optional `includeText` flag. It provides functions to create instances, convert to and from JSON using Yojson. It is used to specify whether text content should be included when serializing or persisting data structures.",
      "description_length": 289,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.InlineValueRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines configuration options for inline value registration, including document filters, an optional identifier, and progress tracking. It supports creating and serializing these configurations with optional fields. Use it to specify how inline values should be registered and filtered in text documents or notebook cells.",
      "description_length": 334,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.TextDocumentSaveRegistrationOptions",
      "library": "linol-lwt",
      "description": "This module defines options for registering text document save events, supporting filters for document selection and an `includeText` flag to control whether document content is included in save notifications. It works with LSP text document filters and notebook cell filters, enabling precise control over which documents trigger save events. Use cases include configuring language server extensions to handle file saves selectively based on document type or content.",
      "description_length": 468,
      "index": 377,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lwt.FailureHandlingKind",
      "library": "linol-lwt",
      "description": "This module defines a polymorphic variant type for handling failures in asynchronous operations, including cases like aborting, transactional rollback, text-only transactional handling, and undo mechanisms. It provides direct serialization and deserialization to and from Yojson representations. This type is used to configure failure handling behavior in systems requiring precise control over error recovery, such as text editors or transactional databases.",
      "description_length": 459,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.WorkDoneProgressEnd",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing the end of a work done progress notification, containing an optional message. It provides functions to create a value of this type, and to convert it to and from JSON using the Yojson library. This is useful for signaling the completion of a task in a JSON-based communication protocol, such as a language server.",
      "description_length": 357,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.Declaration",
      "library": "linol-lwt",
      "description": "This module defines a type `t` representing either a single location or a list of locations, using the `Location.t` type from the `Linol_lsp__Types` module. It provides serialization and deserialization functions to and from Yojson for this type. It is used to handle location data in JSON format, particularly for communication in language server protocol implementations.",
      "description_length": 373,
      "index": 380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.FileOperationOptions",
      "library": "linol-lwt",
      "description": "This module defines a record type for configuring file operation notifications with options for handling file creation, deletion, and renaming events. It provides functions to construct instances with optional fields and to serialize or deserialize them using Yojson. Concrete use cases include setting up event handlers for file system changes in an LSP server.",
      "description_length": 362,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt.NotebookDocumentSyncOptions",
      "library": "linol-lwt",
      "description": "This module defines empty notebook document synchronization options with JSON serialization and deserialization functions. It works with the `Yojson.Safe.t` type for JSON handling and the unit type representing no configuration. A concrete use case is enabling LSP notebook synchronization without specific document options.",
      "description_length": 324,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lwt",
      "library": "linol-lwt",
      "description": "This module provides asynchronous Language Server Protocol (LSP) operations for real-time document synchronization, code analysis, and editor integration using Lwt for concurrency. It handles structured data types such as document URIs, semantic tokens, workspace edits, and capability negotiation parameters to support diagnostics, code navigation, formatting, and notebook document management. Key operations include constructing and serializing code actions, hover information, document edits, and server capabilities, enabling implementation of language servers with rich editing features and extensible client-server communication. Child modules provide concrete data types and serialization for LSP entities. For example, text edits are modeled with `insert`, `newText`, and `replace` fields, while code actions include commands, diagnostics, and workspace edits. Diagnostics are reported via full document reports, and semantic token modifiers classify code elements. URI handling ensures cross-platform consistency, and progress notifications support structured updates. Server capabilities are configured with support for document formatting, hover, and workspace management. Notebook document identifiers and change events enable handling of interactive documents. Diagnostic severity and tag types allow structured error reporting, and workspace folder events track dynamic project changes. Use cases include building LSP-compliant language servers that support real-time collaboration, incremental document updates, and rich IDE integrations. Specific examples include sending diagnostics with precise locations, applying code fixes via workspace edits, formatting documents on save, and managing notebook state across client and server. The module enables streaming semantic token updates, handling call hierarchies, and configuring client capabilities for features like inline completion, inlay hints, and document symbols. All data structures support JSON serialization via Yojson for compatibility with LSP and JSON-RPC communication.",
      "description_length": 2050,
      "index": 383,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 387,
    "meaningful_modules": 384,
    "filtered_empty_modules": 3,
    "retention_rate": 0.9922480620155039
  },
  "statistics": {
    "max_description_length": 2050,
    "min_description_length": 274,
    "avg_description_length": 379.2473958333333,
    "embedding_file_size_mb": 1.3951215744018555
  }
}