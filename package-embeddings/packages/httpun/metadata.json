{
  "package": "httpun",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 17,
  "creation_timestamp": "2025-08-14T23:25:35.240019",
  "modules": [
    {
      "module_path": "Httpun.Response.Body_length",
      "library": "httpun",
      "description": "This module defines the possible ways to determine the length of an HTTP response body, including fixed size, chunked encoding, close-delimited, and error conditions. It provides a polymorphic variant type to represent these body length semantics and a pretty-printing function for debugging or logging purposes. Concrete use cases include determining how to read or generate the body of an HTTP response based on the specified length method.",
      "description_length": 442,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun.Request.Body_length",
      "library": "httpun",
      "description": "This module defines the length semantics for HTTP request bodies, supporting fixed-length and chunked encoding. It provides a type to represent body length constraints and pretty-printing for diagnostics. Used internally to enforce HTTP/1.1 message framing during request parsing and transmission.",
      "description_length": 297,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun.Body.Reader",
      "library": "httpun",
      "description": "This module manages the consumption of HTTP message bodies by scheduling read operations and handling end-of-file conditions. It works with `Bigstringaf.t` buffers to efficiently process raw byte chunks as they become available. Concrete use cases include streaming large HTTP payloads without loading the entire body into memory and processing pipelined HTTP requests incrementally.",
      "description_length": 383,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun.Body.Writer",
      "library": "httpun",
      "description": "This module writes HTTP message bodies to an output channel using buffered and scheduled writes. It supports writing characters, strings, and bigstrings, with operations that allow for efficient data transmission. Concrete use cases include streaming large payloads, sending responses with dynamic content, and managing efficient buffer usage during HTTP pipelining.",
      "description_length": 366,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun.Client_connection",
      "library": "httpun",
      "description": "This module manages client-side HTTP/1.x connections, handling request/response cycles, pipelining, and I/O operations. It works with HTTP requests and responses, streaming request bodies and parsing response bodies. Concrete use cases include sending HTTP requests over a network socket, processing server responses incrementally, and managing connection state for keep-alive or pipelined requests.",
      "description_length": 399,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun.Headers",
      "library": "httpun",
      "description": "This module provides operations to manipulate and transform HTTP header collections, supporting creation, modification, and querying of case-insensitive field names while preserving their original order. It works with `Httpun.Headers.t` values, which model HTTP headers as ordered key-value pairs where values can be single or comma-separated lists, adhering to RFC7230 compliance for handling duplicates and semantic equivalence. Typical use cases include parsing and serializing headers for HTTP messages, merging multi-value fields during proxying, and generating human-readable or wire-ready header representations for logging or transmission.",
      "description_length": 647,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun.Config",
      "library": "httpun",
      "description": "This module defines configuration options for buffer sizes used in HTTP connection handling. It provides a record type `t` with fields to set the size of buffers for reading, request bodies, responses, and response bodies, along with a `default` value that initializes these sizes to standard defaults. It is used to tune performance and memory usage for different HTTP workloads.",
      "description_length": 380,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun.Response",
      "library": "httpun",
      "description": "This module constructs and analyzes HTTP responses, handling status codes, headers, and message body semantics. It defines operations to determine body length and connection persistence, based on request method and proxy context. Concrete use cases include generating correct HTTP 1.1 response metadata and managing connection behavior for servers or proxies.",
      "description_length": 359,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun.Body",
      "library": "httpun",
      "description": "This module represents and manipulates HTTP message payloads, providing functions to create, access, and transform both request and response bodies. It works with `Bigstringaf.t` buffers and `string` values to efficiently handle large data streams, supporting operations such as reading from and writing to network channels. Concrete use cases include buffering incoming request bodies for processing, streaming file uploads, and generating dynamic response content in HTTP servers and clients.",
      "description_length": 494,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun.Server_connection",
      "library": "httpun",
      "description": "This module manages HTTP/1.x server connections by processing incoming requests and generating responses. It provides functions to read request data, write response data, handle errors, and manage connection state through explicit read/write operations and callbacks. It works directly with HTTP requests and responses, using types like `Bigstringaf.t` for efficient data handling, and is used in implementing HTTP servers that support pipelining and keep-alive connections.",
      "description_length": 474,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun.Reqd",
      "library": "httpun",
      "description": "This module manages HTTP request-response interactions, providing functions to access incoming requests, send responses, and handle errors. It supports streaming responses, string and bigstring payloads, and HTTP upgrades, working with types like `Httpun.Request.t`, `Httpun.Response.t`, and `Httpun.Body.Reader.t`. Concrete use cases include handling pipelined HTTP requests, streaming large responses efficiently, and upgrading connections to protocols like WebSockets.",
      "description_length": 471,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun.Request",
      "library": "httpun",
      "description": "This module represents client-initiated HTTP messages, providing operations to construct and inspect requests with support for methods, targets, versions, and headers. It works with string targets, HTTP methods, versions, and header collections, enforcing HTTP/1.1 framing rules through body length semantics. Concrete use cases include building HTTP requests for transmission over network connections and inspecting incoming requests for routing or processing.",
      "description_length": 461,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun.Method",
      "library": "httpun",
      "description": "This module defines HTTP request methods and their properties, including standard methods like `GET`, `POST`, and `PUT`, as well as custom methods. It provides functions to check method characteristics such as safety, cacheability, and idempotence, and supports conversion between method values and strings. Use cases include validating incoming HTTP requests, determining how to handle specific methods in a server, and generating appropriate HTTP responses based on method semantics.",
      "description_length": 485,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun.IOVec",
      "library": "httpun",
      "description": "This module implements efficient manipulation of vectorized I/O buffers, specifically handling `IOVec.t` and lists of `IOVec.t`. It provides operations to measure buffer lengths, shift offsets within buffers, and pretty-print buffer contents. Concrete use cases include managing fragmented HTTP message bodies during parsing and serialization, and handling pipelined requests/responses without unnecessary memory copies.",
      "description_length": 420,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun.Version",
      "library": "httpun",
      "description": "This module represents and manipulates HTTP protocol versions using a structured type with major and minor fields. It provides constants for HTTP/1.0 and HTTP/1.1, functions for parsing and formatting versions, and comparison operations. Use this module to validate, convert, or compare HTTP version strings during request or response handling.",
      "description_length": 344,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun.Status",
      "library": "httpun",
      "description": "This module defines types and functions for working with HTTP status codes, including standard classifications like informational, successful, redirection, client error, and server error. It provides operations to convert status codes to and from integers, strings, and formatted output, along with predicates to check the class of a status code. Concrete use cases include validating HTTP response status codes, generating appropriate reason phrases, and classifying responses for handling in HTTP servers and clients.",
      "description_length": 519,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun",
      "library": "httpun",
      "description": "This module implements HTTP/1.x parsing, serialization, and pipelining with support for vectorized I/O buffers, protocol versions, request methods, status codes, and headers. It handles message bodies using `Bigstringaf.t` buffers for efficient data streaming, and provides structures for constructing and inspecting HTTP requests and responses. Concrete use cases include building high-performance HTTP servers and clients that manage pipelined requests, stream large payloads, and handle connection upgrades.",
      "description_length": 510,
      "index": 16,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 17,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 647,
    "min_description_length": 297,
    "avg_description_length": 438.29411764705884,
    "embedding_file_size_mb": 0.24678421020507812
  }
}