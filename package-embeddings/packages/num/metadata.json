{
  "package": "num",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:58:39.934420",
  "modules": [
    {
      "module_path": "Arith_status",
      "library": "nums",
      "description": "This module manages runtime flags that control the behavior of rational number operations, such as whether to raise an error on null denominators, whether to normalize ratios automatically, and how to format output. It works directly with boolean and integer values to configure these behaviors, affecting how rational numbers are created, manipulated, and displayed. Concrete use cases include enabling strict denominator checks during input parsing and switching between exact fractional and approximate decimal output formats.",
      "description_length": 529,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ratio",
      "library": "nums",
      "description": "This module implements arithmetic operations on rational numbers, such as addition, multiplication, and comparison. It works directly with the abstract `ratio` type representing fractions in reduced form. Concrete use cases include supporting exact arithmetic in symbolic computations and providing the foundation for arbitrary-precision numeric operations.",
      "description_length": 357,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Num",
      "library": "nums",
      "description": "This module enables precise numerical computations with arbitrary-precision rational numbers, supporting arithmetic operations like division with remainder, exponentiation, and Euclidean division, alongside unary transformations such as negation and absolute value adjustments. It handles special values like infinity and undefined, offering rounding, sign detection, and comparison utilities with customizable precision for tasks like financial calculations or symbolic mathematics. Conversions between rationals, integers, floating-point numbers, and string representations with decimal/scientific formatting facilitate data interchange and user-facing numerical input/output workflows.",
      "description_length": 688,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Big_int",
      "library": "nums",
      "description": "This module provides arithmetic operations (addition, multiplication, exponentiation, GCD), comparisons, conversions to strings and fixed-size integers, and bitwise manipulations (AND, OR, shifts) for arbitrary-precision integers (`big_int`). It supports applications requiring exact arithmetic beyond standard integer limits, such as cryptographic algorithms, financial systems handling large values, and low-level protocols needing bit-level precision. Functions also accommodate mixed-type operations with small integers and include safety checks for invalid operations like division by zero.",
      "description_length": 595,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 4,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 688,
    "min_description_length": 357,
    "avg_description_length": 542.25,
    "embedding_file_size_mb": 0.05843353271484375
  }
}