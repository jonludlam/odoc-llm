{
  "package": "records",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:04:25.330208",
  "modules": [
    {
      "module_path": "Record.Field",
      "library": "records",
      "description": "This module represents individual fields of dynamic records, providing access to their names and types. It works with polymorphic record field values and their associated type representations. Use it to inspect or manipulate record fields dynamically, such as retrieving a field's name or type during runtime.",
      "description_length": 309,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Record.Safe",
      "library": "records",
      "description": "This module creates and manages dynamic record layouts with type-safe field declarations. It provides `declare` to generate a named layout with an implicit layout argument, ensuring type correctness. Use it to define structured data formats where fields and their types are determined at runtime but enforced statically.",
      "description_length": 320,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Record.Util",
      "library": "records",
      "description": "This module provides functions to declare record layouts with 0 to 4 typed fields, returning the layout and associated field accessors. It works with `Record.layout` and `Record.Field.t` types, enabling structured record creation and field manipulation. Use cases include defining fixed-schema records dynamically, such as modeling database rows or configuration data with named, typed fields.",
      "description_length": 393,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Record.Polid",
      "library": "records",
      "description": "This module generates and manages unique identifiers for dynamic records. It supports creating fresh identifiers, checking equality between identifiers, and converting identifiers to unique integers. Use it when implementing record systems that require runtime-generated, type-safe identifiers with stable integer representations.",
      "description_length": 330,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Record.Unsafe",
      "library": "records",
      "description": "This module creates and manipulates dynamic record layouts with runtime-defined fields. It allows declaring layouts, adding typed fields, sealing layouts, and constructing records. Use cases include building extensible data structures with schema-like definitions and handling records whose fields are determined at runtime.",
      "description_length": 324,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Record.Type",
      "library": "records",
      "description": "This module defines and manipulates type representations for dynamic records, enabling serialization and deserialization to and from JSON and string formats. It supports atomic types like integers, strings, and exceptions, as well as structured types like results and transformed views of existing types. Concrete use cases include defining custom data types with JSON encodings, converting between compatible types with validation, and representing structured error values.",
      "description_length": 474,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Record",
      "library": "records",
      "description": "This module implements dynamic records with support for defining, inspecting, and manipulating structured data at runtime. It provides operations to get and set individual fields, convert records to and from JSON, and compare layouts for equality. Concrete use cases include modeling database rows with dynamic schemas, implementing configuration systems with typed, named fields, and building extensible data structures that require runtime field manipulation and type-safe access.",
      "description_length": 482,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 482,
    "min_description_length": 309,
    "avg_description_length": 376.0,
    "embedding_file_size_mb": 0.10184764862060547
  }
}