{
  "package": "xcursor",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:07:01.402091",
  "modules": [
    {
      "module_path": "Xcursor.Cursor.Header.Index.Type",
      "library": "xcursor",
      "description": "Handles parsing of cursor file index entries, specifically distinguishing between image and comment types. Works with the `t` type, which includes `Comment` of various subtypes and `Image` with an integer identifier. Directly used to parse cursor index data from binary formats using Angstrom parsers.",
      "description_length": 301,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xcursor.Cursor.Image.Header",
      "library": "xcursor",
      "description": "Handles parsing of cursor image headers from binary data. Works with the `Xcursor.Cursor.Image.header` type to extract structured metadata. Used to read fixed-length image headers from cursor files.",
      "description_length": 198,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xcursor.Cursor.Header.Index",
      "library": "xcursor",
      "description": "This module manages the parsing and representation of cursor index entries in cursor files, combining direct operations on index data with support for specialized entry types through its submodules. It centers around the `t` type, which represents index entries as either `Comment` or `Image`, each carrying associated data like subtypes or integer identifiers. The module provides functions to read and interpret these entries from binary formats, using Angstrom-based parsers to map cursor names to their file positions. With this structure, users can extract and process cursor metadata, distinguish between image and comment entries, and navigate cursor file layouts programmatically.",
      "description_length": 688,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xcursor.Cursor.Card32.Parser",
      "library": "xcursor",
      "description": "Reads 32-bit unsigned integers from binary cursor files in both big-endian and fixed-endian formats. Uses Angstrom parsers to handle low-level binary decoding of cursor metadata and image data. Useful for extracting cursor dimensions, delays, and pixel data from Xcursor files.",
      "description_length": 277,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xcursor.Cursor.Header",
      "library": "xcursor",
      "description": "This module handles the parsing and structure of Xcursor header data, including version and table-of-contents entries, working directly with binary cursor file headers using Angstrom. It defines core types like `header` and `entry`, enabling operations such as reading and validating cursor metadata, distinguishing between image and comment entries, and mapping cursor names to file positions. The Index submodule provides specialized parsing for index entries, representing them as `Comment` or `Image` with associated data such as identifiers and subtypes. Together, these components allow users to programmatically navigate cursor file layouts, extract metadata, and prepare cursor data for display systems.",
      "description_length": 711,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xcursor.Cursor.Image",
      "library": "xcursor",
      "description": "This module manages low-level cursor image data, including parsing, manipulation, and serialization of binary cursor files. It defines core types like `header` for structured metadata and provides operations to load, decode, and write cursor images in formats such as Xcursor. The header submodule specializes in extracting metadata from binary headers, enabling precise interpretation of image dimensions, delays, and pixel formats. Together, they allow tasks like modifying cursor frames, inspecting image properties, or converting between cursor formats.",
      "description_length": 557,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xcursor.Cursor.Card32",
      "library": "xcursor",
      "description": "This module handles 32-bit unsigned integer values in cursor file data structures, providing functions for reading, writing, and manipulating card32 values during parsing and serialization. It supports binary cursor formats requiring precise 32-bit field handling, including operations for both big-endian and fixed-endian decoding via integrated Angstrom parsers. The parsers extract values like cursor dimensions, delays, and pixel data from formats such as Xcursor. Direct API functions allow manual manipulation of card32 values, while submodules automate decoding of structured binary content.",
      "description_length": 598,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xcursor.Cursor",
      "library": "xcursor",
      "description": "This module parses and manages X cursor files, providing structured access to their headers, image data, and metadata through lazy sequences and direct binary manipulation. It works with `Bigstringaf.t` and Unix file descriptors to load and decode cursor contents, exposing types like `header`, `entry`, and 32-bit unsigned integers for precise format handling. Users can inspect `.cursor` files, extract specific images or comments, and prepare cursor data for rendering or modification. Submodules handle binary header parsing, image data manipulation, and card32 value decoding, supporting tasks like navigating cursor layouts, modifying frames, or converting formats.",
      "description_length": 671,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xcursor",
      "library": "xcursor",
      "description": "This module configures cursor themes by determining search paths and selecting appropriate cursor sizes, using file system paths and integer values to locate and load themed cursors. It parses and manages X cursor files through structured access to headers, image data, and metadata, leveraging lazy sequences and binary manipulation with types like `header`, `entry`, and 32-bit unsigned integers. Users can extract specific cursor images or comments from `.cursor` files, inspect layouts, and prepare data for rendering or transformation. Submodules handle low-level operations such as binary header decoding, image frame manipulation, and card32 value parsing, enabling precise control over cursor format and layout.",
      "description_length": 719,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 719,
    "min_description_length": 198,
    "avg_description_length": 524.4444444444445,
    "embedding_file_size_mb": 0.03314971923828125
  }
}