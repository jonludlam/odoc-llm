{
  "package": "cstruct",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:47.632996",
  "modules": [
    {
      "module_path": "Cstruct.LE",
      "library": "cstruct",
      "description": "This module provides functions to read and write little-endian unsigned integers of 16, 32, and 64 bits from and to a `Cstruct.t` buffer at a specified offset. It operates directly on memory buffers representing structured binary data. These functions are used when parsing or constructing binary protocols that require little-endian encoding, such as network packet formats or disk file layouts.",
      "description_length": 396,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cstruct.HE",
      "library": "cstruct",
      "description": "This module provides direct access to reading and writing 16, 32, and 64-bit unsigned integers in a cstruct buffer at a given offset, using host-endian byte order. It operates on Cstruct.t values, which represent external memory buffers, and allows precise manipulation of binary data structures. These functions are used when parsing or constructing binary protocols or file formats that require specific integer layouts in memory.",
      "description_length": 432,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cstruct.BE",
      "library": "cstruct",
      "description": "This module provides functions to read and write big-endian unsigned integers of 16, 32, and 64 bits from and to a Cstruct buffer at a specified offset. It operates directly on `Cstruct.t` values, which represent external memory buffers. These functions are used when handling binary data formats that require big-endian encoding, such as network protocols or file formats.",
      "description_length": 373,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cstruct_cap.LE",
      "library": "cstruct",
      "description": "This module provides direct access to 16, 32, and 64-bit unsigned integer values stored in a capability-secured memory buffer, using little-endian byte ordering. It supports reading and writing these values at specified offsets with functions like `get_uint32` and `set_uint64`, ensuring correct byte reordering when necessary. These operations are used when working with binary data formats such as network protocols or file structures that require precise control over memory layout.",
      "description_length": 485,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cstruct_cap.BE",
      "library": "cstruct",
      "description": "This module provides big-endian serialization and deserialization of unsigned 16, 32, and 64-bit integers to and from capability-secured memory buffers. It operates on `Cstruct_cap.t` values with read or write capabilities, ensuring safe access to raw memory. These functions are used when handling network protocols or binary file formats that require big-endian encoding.",
      "description_length": 373,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cstruct_cap",
      "library": "cstruct",
      "description": "This module enables capability-controlled access to raw memory buffers, combining zero-copy operations with compile-time enforcement of read and write permissions via phantom types. It supports endianness-aware integer manipulation through submodules that handle both little-endian and big-endian 16, 32, and 64-bit unsigned integers, using functions like `get_uint32` and `set_uint64` at specified offsets. Main data types include `'a t` for buffers parameterized by capabilities and `Bigarray.t` for the underlying storage, with operations for slicing, reading, and mutating memory while preserving safety. Examples include parsing network packets, modifying binary file headers, and converting between byte representations in system-level data processing.",
      "description_length": 758,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cstruct",
      "library": "cstruct",
      "description": "This module enables efficient manipulation of structured binary data in memory buffers, allowing direct access to fields like integers, MAC addresses, and byte sequences with bounds checking. It centers around the `Cstruct.t` type, which wraps `Bigarray` for low-level memory operations, and supports slicing, byte manipulation, and string conversion for tasks like network packet parsing (e.g., Ethernet headers) and binary file processing. Child modules provide integer access in various byte orders\u2014little-endian, host-endian, and big-endian\u2014enabling precise handling of binary protocols and file formats that require specific memory layouts. These operations are used together to construct, inspect, and transform memory-backed data structures with C-like precision.",
      "description_length": 770,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 770,
    "min_description_length": 373,
    "avg_description_length": 512.4285714285714,
    "embedding_file_size_mb": 0.02587127685546875
  }
}