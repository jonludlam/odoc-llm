{
  "package": "cstruct",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:01:44.682279",
  "modules": [
    {
      "module_path": "Cstruct.BE",
      "library": "cstruct",
      "description": "This module provides functions to read and write big-endian unsigned integers of 16, 32, and 64 bits from and to C-like memory buffers. It operates directly on `Cstruct.t` values, using byte offsets to access data in external memory. These functions are useful for parsing and constructing binary protocols or file formats that require big-endian encoding, such as network packet headers or disk image formats.",
      "description_length": 410,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cstruct_cap.BE",
      "library": "cstruct",
      "description": "This module provides big-endian serialization and deserialization of 16, 32, and 64-bit unsigned integers to and from capability-secured memory buffers. It operates directly on `Cstruct_cap.t` values with enforced read or write access controls, ensuring safe memory manipulation. Concrete use cases include constructing or parsing network packets where strict byte layout and endianness are required, such as in low-level networking or binary file format handling.",
      "description_length": 464,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cstruct_cap.LE",
      "library": "cstruct",
      "description": "This module provides direct access to 16, 32, and 64-bit unsigned integer values stored in a capability-secured memory buffer, using little-endian byte ordering. It supports reading and writing these values at specific offsets within the buffer, ensuring memory safety through capability-based access control. These operations are used when working with binary data formats, network protocols, or hardware interfaces that expect little-endian encoded integers.",
      "description_length": 460,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cstruct.HE",
      "library": "cstruct",
      "description": "This module provides functions to read and write 16, 32, and 64-bit unsigned integers in host-endian format at specific offsets within a `Cstruct.t` buffer. It operates directly on memory buffers structured as `Cstruct.t`, allowing precise manipulation of binary data. These functions are useful for low-level data parsing and serialization, such as interpreting network packets or binary file formats.",
      "description_length": 402,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cstruct.LE",
      "library": "cstruct",
      "description": "This module provides functions to read and write little-endian unsigned integers of 16, 32, and 64 bits from and to a `Cstruct.t` buffer at a specified offset. It operates directly on memory buffers structured as `Cstruct.t`, allowing precise manipulation of binary data. These functions are useful for parsing and constructing binary protocols or file formats that require little-endian encoding, such as network packet headers or disk image formats.",
      "description_length": 451,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cstruct",
      "library": "cstruct",
      "description": "This module enables low-level manipulation of binary data through structured memory buffers, offering field-specific accessors, slicing operations, and endian-aware integer handling. It operates on `Cstruct.t` values representing views into `Bigarray` buffers, with applications in network packet parsing (e.g., pcap, Ethernet), binary format conversion, and zero-copy buffer transformations. Endianness modules (`BE`, `LE`) and utilities for splitting, scanning, and converting buffers support precise memory management and data processing tasks, such as protocol implementation or binary file parsing.",
      "description_length": 603,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cstruct_cap",
      "library": "cstruct",
      "description": "This module provides capability-secured memory buffer manipulation with strong read/write access control, operating on Bigarrays through a proxy type that tracks capabilities using phantom types. It supports byte-level accessors, endian-aware integer operations via dedicated modules, and zero-copy string processing functions that enforce memory safety through static capability typing. Use cases include safe byte-level data processing, network packet parsing, and binary data serialization with guaranteed access constraints.",
      "description_length": 528,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 603,
    "min_description_length": 402,
    "avg_description_length": 474.0,
    "embedding_file_size_mb": 0.101837158203125
  }
}