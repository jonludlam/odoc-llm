{
  "package": "cstruct",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:30:57.973598",
  "modules": [
    {
      "module_path": "Cstruct.BE",
      "description": "Extracts and inserts 16-, 32-, and 64-bit big-endian unsigned integers from or into a cstruct at a specified offset. Operates on raw byte buffers represented by the t type, allowing direct manipulation of binary data. Used for parsing or constructing network protocols and file formats that require precise byte ordering.",
      "description_length": 321,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cstruct.LE",
      "description": "Extracts and inserts 16-, 32-, and 64-bit little-endian unsigned integers from or into a cstruct at a specified offset. Operates on raw byte buffers and integer types of varying widths. Used for parsing or generating binary data formats that require precise byte ordering, such as network protocols or file headers.",
      "description_length": 315,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cstruct.HE",
      "description": "Extracts and inserts host-endian 16-, 32-, and 64-bit unsigned integers from/to a cstruct at a specified offset. Operates on raw byte buffers represented by the t type. Used to parse and construct network protocol headers that require native byte order.",
      "description_length": 253,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cstruct_cap.BE",
      "description": "Reads and writes 16-bit, 32-bit, and 64-bit unsigned integers from and to a byte buffer, handling byte order conversion between big-endian and machine-native formats. Operates on read-write capable buffers, ensuring correct interpretation of data regardless of the underlying system's endianness. Used for parsing and constructing network protocol headers or raw data structures where byte order must match network standards.",
      "description_length": 425,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cstruct_cap.LE",
      "description": "Reads and writes 16-, 32-, and 64-bit unsigned integers from and to a byte buffer, handling byte order conversion for little-endian formats. Operates on read-write capable buffers, ensuring values are correctly interpreted or stored according to the target architecture. Used for parsing network packets or binary file formats where precise byte representation is critical.",
      "description_length": 373,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "cstruct",
      "description": "Provides functions for reading from and writing to C-like structures using Bigarray, enabling direct memory manipulation. Works with byte sequences and structured data layouts similar to C's struct type. Used for low-level data parsing and serialization in network protocols and binary file formats.",
      "description_length": 299,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cstruct",
      "description": "Provides functions to read and write fixed-size integers in big-endian, little-endian, and host-endian formats from or into raw byte buffers. Main data types include `t` for byte buffers and generated types for structured data like `pcap_header` and `ipv4`. Operations include extracting and inserting values at specific offsets, copying fields, and converting between integer and string representations. Examples include parsing packet timestamps, extracting Ethernet addresses, and validating protocol headers.",
      "description_length": 512,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cstruct_cap",
      "description": "provides low-level access to raw memory buffers with capability-based read/write restrictions, enabling safe and efficient manipulation of binary data. it supports operations on fixed-size integers (16, 32, 64 bits) with endianness conversion for both big-endian and little-endian formats, using phantom types to enforce capability constraints. functions like get_uint16_be and set_uint32_le allow precise control over data serialization and deserialization, making it suitable for network protocol parsing and binary file handling. buffers can be created with full read/write access or restricted to read-only or write-only modes.",
      "description_length": 631,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 631,
    "min_description_length": 253,
    "avg_description_length": 391.125,
    "embedding_file_size_mb": 0.02945995330810547
  }
}