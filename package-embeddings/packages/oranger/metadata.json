{
  "package": "oranger",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:24.366685",
  "modules": [
    {
      "module_path": "Oranger.RF",
      "description": "Provides functions to train and predict using Random Forests models. Accepts CSV files with headers, where training data includes a target column and test data excludes it. Trains models with specified tree counts and feature subsets, and generates predictions with optional standard deviation estimates.",
      "description_length": 304,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oranger.Utls",
      "description": "is a collection of utility functions and data structures designed for common programming tasks. It includes types such as lists, options, and results, along with operations like mapping, filtering, and folding. Users can perform pattern matching, error handling, and data transformation efficiently. Examples include processing input streams, validating data, and simplifying conditional logic.",
      "description_length": 394,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "oranger",
      "description": "Provides functions to generate, train, and predict using random forest models by interfacing with the ranger C++ library through text file I/O. Works with tabular data represented as CSV files and outputs model predictions in text format. Used to integrate high-performance random forest training into OCaml workflows without direct C++ dependencies.",
      "description_length": 350,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oranger",
      "description": "Combines machine learning capabilities with general-purpose utilities, enabling data preprocessing, model training, and prediction alongside common programming operations. It handles structured data through CSV parsing, supports Random Forests with customizable parameters, and offers list, option, and result manipulations for robust data processing. Users can train models on labeled datasets, generate predictions, and manage errors through pattern matching and transformation functions. Tasks like validating input formats, aggregating results, and handling missing values are streamlined with built-in operations.",
      "description_length": 618,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 4,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 618,
    "min_description_length": 304,
    "avg_description_length": 416.5,
    "embedding_file_size_mb": 0.014947891235351562
  }
}