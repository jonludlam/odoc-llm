{
  "package": "decoders-sexplib",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:29:22.831073",
  "modules": [
    {
      "module_path": "Decoders_sexplib.Decode.Infix",
      "description": "Performs monadic sequencing and transformation on parsers that process input and produce output. Operates on decoder types that track input state and success/failure, enabling composition of complex parsing logic. Supports chaining of parsing steps, combining results, and applying functions to parsed values within a parsing context.",
      "description_length": 334,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_sexplib.Decode.Pipeline",
      "description": "Provides functions to construct and compose decoders for parsing structured data, supporting required and optional fields with path resolution. Works with decoder types that transform values through chained operations. Used to validate and extract specific fields from JSON or similar nested data formats with explicit error handling.",
      "description_length": 334,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_sexplib.Decode",
      "description": "Encapsulates parsing logic for structured data by combining monadic operations and field-specific decoding. Handles input state tracking, error propagation, and value transformation through decoder types that support chaining and composition. Enables extraction of nested fields, validation of required and optional data, and transformation of parsed values. Can parse JSON-like structures, extract specific keys, and apply custom functions to decoded results within a robust error-handling framework.",
      "description_length": 501,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "decoders-sexplib",
      "description": "Parses JSON-like strings into custom OCaml types using a set of combinators that define how to extract and transform values. It supports records, variants, lists, and optional fields through specific decoding functions. Used to convert raw JSON input from APIs or configuration files into strongly typed OCaml values for safe processing.",
      "description_length": 337,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_sexplib",
      "description": "Encapsulates parsing logic for structured data using monadic operations, enabling extraction of nested fields, validation of required and optional data, and transformation of parsed values. Supports chaining and composition of decoder types to handle input state tracking, error propagation, and value conversion. Can parse JSON-like structures, extract specific keys, and apply custom functions to decoded results. Examples include decoding nested objects, validating presence of critical fields, and converting parsed strings to typed values.",
      "description_length": 544,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 544,
    "min_description_length": 334,
    "avg_description_length": 410.0,
    "embedding_file_size_mb": 0.018617630004882812
  }
}