{
  "package": "decoders-sexplib",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:39.755921",
  "modules": [
    {
      "module_path": "Decoders_sexplib.Decode.Infix",
      "library": "decoders-sexplib",
      "description": "This module provides infix operators for composing decoders that transform S-expressions into OCaml values. It supports operations like chaining decoders with `>>=`, mapping results with `>|=`, and combining multiple decoders with applicative style using `<*>`. These functions are used to decode structured S-expressions, such as nested lists and key-value objects, into typed OCaml data structures like records and tuples.",
      "description_length": 424,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_sexplib.Decode.Pipeline",
      "library": "decoders-sexplib",
      "description": "This module provides combinators for building decoders that process S-expressions into OCaml values, focusing on extracting and transforming values from structured, object-like lists. It supports operations like `required`, `optional`, and `custom` to access and map fields by key, with variants like `required_at` and `optional_at` for nested paths. These decoders are useful for parsing configuration formats or data files where fields may have complex or optional structures.",
      "description_length": 478,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_sexplib.Decode",
      "library": "decoders-sexplib",
      "description": "This module decodes S-expressions into OCaml values using field-based parsing and monadic combinators, handling both flat and nested structures. It supports key-value objects with flexible field access, allowing required, optional, and transformed fields through combinators like `field`, `field_opt`, and `map`. Infix operators enable chaining and combining decoders to build complex parsers for structured data, such as configuration files or nested records. Specific examples include decoding a list of key-value pairs into a typed record or transforming a nested S-expression into a validated data structure with default values and error handling.",
      "description_length": 651,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_sexplib",
      "library": "decoders-sexplib",
      "description": "This module decodes S-expressions into OCaml values using field-based parsing and monadic combinators, supporting structured data with required, optional, and transformed fields. Key operations include `field`, `field_opt`, and `map`, combined via infix operators to build complex parsers for nested records or configuration data. It handles default values, validation, and error handling during decoding. Examples include parsing a list of key-value pairs into a typed record or converting a nested S-expression into a validated data structure.",
      "description_length": 545,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 651,
    "min_description_length": 424,
    "avg_description_length": 524.5,
    "embedding_file_size_mb": 0.014919281005859375
  }
}