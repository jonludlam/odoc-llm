{
  "package": "decoders-sexplib",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:50:25.078060",
  "modules": [
    {
      "module_path": "Decoders_sexplib.Decode.Infix",
      "library": "decoders-sexplib",
      "description": "This module provides infix operators for composing decoders that convert S-expressions into OCaml values, handling both standard and dune-style object representations. It supports operations like chaining decoders sequentially (`>>=`), mapping results (`>|=`), and combining multiple decoders in parallel (`<*>`, `and+`). These functions are used to decode structured data from formats like configuration files or serialized data streams.",
      "description_length": 438,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_sexplib.Decode.Pipeline",
      "library": "decoders-sexplib",
      "description": "This module provides combinators for building decoders that process S-expressions into OCaml values, focusing on field-based extraction from structured data. It supports decoding required and optional fields, nested paths, and custom transformations, primarily operating on S-expressions representing objects. Concrete use cases include parsing configuration files or data formats like YAML or JSON into typed OCaml structures.",
      "description_length": 427,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_sexplib.Decode",
      "library": "decoders-sexplib",
      "description": "This module enables decoding S-expressions into OCaml values, supporting primitive types (e.g., integers, booleans) and structured data like lists, arrays, and objects encoded as key-value pair lists. It includes combinators for extracting required or optional fields, traversing nested structures, and handling dune-style or YAML-like object syntaxes where fields may have complex values. Typical use cases include parsing configuration files, deserializing structured data, and building decoders for recursive or heterogeneous data schemas.",
      "description_length": 542,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Decoders_sexplib",
      "library": "decoders-sexplib",
      "description": "This module provides functions to decode S-expressions into OCaml values, handling both primitive types and structured data such as lists, arrays, and key-value pair lists. It offers combinators to extract and transform fields, support nested decoding, and manage object-like structures with complex field values. It is commonly used for parsing configuration files, deserializing structured data, and implementing decoders for recursive or mixed-type schemas.",
      "description_length": 460,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 542,
    "min_description_length": 427,
    "avg_description_length": 466.75,
    "embedding_file_size_mb": 0.058349609375
  }
}