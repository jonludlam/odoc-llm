{
  "package": "vdom",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 51,
  "creation_timestamp": "2025-07-15T23:14:43.406869",
  "modules": [
    {
      "module_path": "Vdom.Cmd",
      "library": "vdom.base",
      "description": "This module defines custom command types for handling asynchronous actions and message transformations in a virtual DOM context. It supports operations like echoing messages, batching multiple commands, and mapping or binding functions over command results. Concrete use cases include managing side effects from user interactions, composing complex UI behaviors, and transforming command outputs before dispatch.",
      "description_length": 412,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Vdom.Decoder",
      "library": "vdom.base",
      "description": "This module enables composing decoders to transform JavaScript objects and arrays into OCaml structures through monadic sequencing (`let*`) and applicative parallelism (`and+`). It operates on `Vdom.js_object` and structured data like lists and tuples, providing operations to access fields, invoke methods, handle optional values, and convert primitive types. It is particularly useful for parsing JSON, validating dynamic JavaScript inputs, or mapping complex JS data structures to OCaml records or variants.",
      "description_length": 510,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Vdom.Custom",
      "library": "vdom.base",
      "description": "This module defines core types for representing virtual DOM elements (`t`) and event handlers (`event`). It provides operations for creating and manipulating DOM nodes, handling user events like clicks and input changes, and efficiently updating the DOM in response to application state changes. Concrete use cases include building interactive UI components such as forms, buttons, and dynamic lists.",
      "description_length": 400,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Vdom",
      "library": "vdom.base",
      "description": "This module enables declarative UI construction through type-safe virtual DOM manipulation, event handling, and state management. It provides core types for virtual DOM elements and event handlers, supporting HTML/SVG rendering, user interaction handling, and efficient updates via memoization or command-driven effects. Submodules extend its capabilities with custom command types for managing asynchronous actions and side effects, and decoders for transforming JavaScript data into OCaml structures. You can build interactive components like forms and buttons, handle dynamic content with stateful logic, and decode complex JS inputs into typed OCaml values.",
      "description_length": 661,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Navigator.Credential",
      "library": "vdom",
      "description": "This module enables creation and retrieval of WebAuthn public key credentials through browser APIs, supporting operations like registration and authentication challenges. It handles complex configurations via option builders for parameters such as relying party identifiers, user details, key algorithms, and authenticator constraints, while managing JavaScript interoperation via `Ojs.t` types and array buffers. Typical use cases include implementing passwordless authentication flows, multi-factor authentication, and secure credential management in web applications leveraging WebAuthn standards.",
      "description_length": 600,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Navigator.PublicKeyCredential",
      "library": "vdom",
      "description": "This module provides operations to access properties of a Web Authentication API credential object, including its type, identifier, raw binary ID, and response data. It works with JavaScript interop types like `Ojs.t` and `ArrayBuffer.t` to facilitate interaction with browser APIs. Concrete use cases include handling user authentication via biometrics or security keys in a web application.",
      "description_length": 392,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Canvas.TextMetrics",
      "library": "vdom",
      "description": "This module provides functions to convert between JavaScript and OCaml representations of text metrics and to retrieve the width of text. It works with the `t` type, which encapsulates text measurement data from a canvas context. Concrete use cases include measuring text dimensions for layout calculations in canvas-based user interfaces.",
      "description_length": 339,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_browser.Svg.AnimatedLength",
      "library": "vdom",
      "description": "This module provides functions to convert between JavaScript and OCaml representations of animated length values, and to access the animated and base values of those lengths. It works with `t` type values representing animated lengths and converts them to and from JavaScript objects. It is used to manipulate SVG animated length properties in a type-safe way when interacting with the DOM.",
      "description_length": 390,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Navigator.AuthenticatorAssertionResponse",
      "library": "vdom",
      "description": "This module provides operations to access properties of an authenticator assertion response in a web authentication context. It works with JavaScript objects representing authentication responses and converts them to and from OCaml types. Concrete functions extract raw data buffers for client data, authenticator data, signatures, and user handles for further cryptographic processing.",
      "description_length": 386,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_browser.Navigator.AuthenticatorAttestationResponse",
      "library": "vdom",
      "description": "This module provides functions to access the client data and attestation object from an authenticator attestation response. It works with JavaScript objects representing cryptographic attestation responses and converts them to and from OCaml types. Concrete use cases include extracting attestation details during WebAuthn registration flows.",
      "description_length": 342,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.WebSocket.CloseEvent",
      "library": "vdom",
      "description": "This module represents events fired when a WebSocket connection is closed. It provides access to the numeric status code indicating the reason for closure. Use it to handle or inspect termination conditions in WebSocket communication, such as server-initiated disconnects or protocol errors.",
      "description_length": 291,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_browser.Svg.Length",
      "library": "vdom",
      "description": "This module provides functions to convert and manipulate SVG length values between OCaml and JavaScript representations. It supports extracting numeric values, units, and string representations from SVG length objects. Useful for working with SVG attributes that require precise length measurements in web applications.",
      "description_length": 319,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Console",
      "library": "vdom",
      "description": "This module provides functions for logging values and measuring execution time in the browser console. It works with JavaScript values represented as `Ojs.t` and string identifiers for timing operations. Concrete use cases include debugging by logging variables and profiling code performance by timing specific blocks.",
      "description_length": 319,
      "index": 12,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Vdom_blit.Cmd",
      "library": "vdom",
      "description": "This module provides functions to interact with the context of a virtual DOM command, allowing access to the container element, sending messages, and executing callbacks after redraws. It works with context types parameterized by message types and includes a handler type for processing commands. Concrete use cases include managing side effects, dispatching actions, and interacting with the DOM outside of the virtual DOM's control flow.",
      "description_length": 439,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_browser.Blob",
      "library": "vdom",
      "description": "This module handles binary data through a `Blob` type, supporting operations like creating blobs from JavaScript objects, retrieving their size and MIME type, and reading their contents as text. It works with JavaScript interop types like `Ojs.t` and `Promise`, enabling direct interaction with browser APIs. Concrete use cases include handling file uploads, processing binary data from fetch requests, and constructing payloads for network transmission.",
      "description_length": 454,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_browser.Svg",
      "library": "vdom",
      "description": "This module handles SVG length values by converting and manipulating them between OCaml and JavaScript representations. It supports operations to extract numeric values, units, and strings from SVG length objects, enabling precise control over SVG attributes. Animated length values can be accessed and modified while preserving their base and animated states. For example, you can retrieve the numeric value of an SVG length in pixels or update an animated length attribute directly in the DOM.",
      "description_length": 495,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.ArrayBuffer",
      "library": "vdom",
      "description": "This module provides operations to create and convert raw binary buffers. It supports creating buffers of a specified size and converting between JavaScript and OCaml representations using Ojs.t values. Concrete use cases include handling binary data for network protocols or file formats directly in OCaml.",
      "description_length": 307,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_browser.Promise",
      "library": "vdom",
      "description": "Handles asynchronous operations by attaching callback functions to execute when a promise resolves or rejects. Works with JavaScript promise objects to manage side effects and error handling in event-driven contexts. Useful for implementing non-blocking I/O operations like fetching data from an API or handling user input events.",
      "description_length": 330,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Rect",
      "library": "vdom",
      "description": "This module provides functions to convert between JavaScript and OCaml representations of a rectangle object, and to access its geometric properties. It works with a concrete `t` type that represents a rectangle with `float` fields for height, width, and positional coordinates. Use this module to extract and manipulate layout metrics of DOM elements, such as their size and position on the screen.",
      "description_length": 399,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Performance",
      "library": "vdom",
      "description": "This module provides a function `now` that returns the current time in milliseconds as a float. It works with floating-point numbers to represent timestamps. Use it to measure execution time of code segments or track time intervals in web applications.",
      "description_length": 252,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.WebSocket",
      "library": "vdom",
      "description": "This module enables client-side WebSocket communication, allowing creation of connections, sending and receiving string-based messages, and tracking connection state through a ready-state enumeration. It supports real-time interactions like chat messaging and live data updates, while its child module provides detailed information about connection closures, including numeric status codes for diagnosing termination reasons such as server disconnects or protocol issues. Key operations include opening connections, transmitting messages, and handling close events with precise status inspection. Together, they offer a complete interface for managing WebSocket lifecycle and communication integrity.",
      "description_length": 700,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Canvas",
      "library": "vdom",
      "description": "This module enables 2D graphics rendering through path manipulation, style configuration, and shape/text drawing, working with canvas contexts, gradients, and text metrics. It supports affine transformations, pixel compositing, and precise text layout, allowing dynamic data visualizations, game graphics, or interactive design tools. The child module adds text measurement capabilities, converting between JavaScript and OCaml representations of text metrics and providing the width of rendered text. Together, they enable complex visual output with accurate layout control, such as rendering scalable UI elements or data-driven graphics with properly sized annotations.",
      "description_length": 671,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.SVGRect",
      "library": "vdom",
      "description": "This module provides functions to convert between JavaScript and OCaml representations of SVG rectangle objects and access their geometric properties. It works with the `t` type representing SVGRect objects, allowing retrieval of `x`, `y`, `width`, and `height` values. Use this module when interacting with SVG elements in the browser, such as measuring or positioning shapes dynamically.",
      "description_length": 389,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_browser.FetchResponse",
      "library": "vdom",
      "description": "This module handles HTTP responses from browser fetch operations. It provides functions to convert between JavaScript objects and OCaml types, and to extract response data as a blob. Use it to process file downloads or binary data from web APIs.",
      "description_length": 245,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.File",
      "library": "vdom",
      "description": "This module provides operations to create and manipulate file objects, including setting metadata like name and content type. It works with binary data through `Blob.t` arrays and handles file-specific properties such as name and last modified timestamp. Concrete use cases include constructing files from raw data for upload or processing, and extracting file names for display or logging.",
      "description_length": 390,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.XHR",
      "library": "vdom",
      "description": "This module enables creating and managing asynchronous HTTP requests through operations like initializing requests, configuring headers, sending data, and handling responses with support for custom MIME types, credentials, and response formats. It works with XMLHttpRequest objects to track progress via state change callbacks and manage request lifecycles. Use cases include fetching remote data, uploading files with progress indicators, and interacting with APIs requiring authenticated or typed responses.",
      "description_length": 509,
      "index": 25,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Js_browser.JsString",
      "library": "vdom",
      "description": "This module provides operations for working with JavaScript strings, including conversion to and from OCaml strings, string manipulation, and pattern matching. It supports common tasks like case conversion, concatenation, substring search, and trimming. Concrete use cases include handling string input from web APIs, validating user input in web applications, and preparing text for display in browser interfaces.",
      "description_length": 414,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Style",
      "library": "vdom",
      "description": "This module provides direct manipulation of CSS style properties on DOM elements through a type-safe interface. It supports setting and getting individual style attributes like color, border, dimensions, and positioning, as well as removing specific styles. Typical use cases include dynamically updating element appearance in response to user interactions or animations, and applying inline styles programmatically without relying on external CSS.",
      "description_length": 448,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Storage",
      "library": "vdom",
      "description": "This module provides direct access to browser storage mechanisms, allowing retrieval, insertion, and removal of key-value pairs using string keys. It supports operations like checking the number of stored items, fetching a key by index, getting or setting values, and clearing all entries. Concrete use cases include persisting user preferences, caching data across sessions, or managing authentication tokens in client-side web applications.",
      "description_length": 442,
      "index": 28,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Js_browser.Document",
      "library": "vdom",
      "description": "This module enables manipulation of HTML documents through operations such as creating elements and events, querying the DOM with CSS selectors, managing document properties like title and cookie, and controlling output streams. It works directly with the Document object and DOM elements to facilitate dynamic content generation, user interaction handling, and text selection adjustments. Use cases include building interactive web interfaces, real-time document updates, and client-side state management via cookies or dynamic rendering.",
      "description_length": 539,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Location",
      "library": "vdom",
      "description": "This module enables accessing and modifying URL components like `pathname`, `hash`, and `search`, using a `Location.t` type that abstracts the browser's `Location` object and facilitates conversions between OCaml and JavaScript representations. It supports navigation through URL assignment, history replacement, and cache-aware reloads, catering to use cases such as client-side routing, dynamic URL updates, and browser history management in single-page applications.",
      "description_length": 469,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.ObjectURL",
      "library": "vdom",
      "description": "Creates object URLs from blobs or files for direct browser access, returning string URLs that can be used in HTML attributes or API calls. It operates on `Blob.t` and `File.t` types, producing strings that represent temporary URLs. Revoke releases the memory associated with a previously created URL, ensuring efficient resource management.",
      "description_length": 340,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_browser.RegExp",
      "library": "vdom",
      "description": "This module provides operations for creating and manipulating JavaScript regular expressions. It works with the `t` type, which wraps JavaScript objects (`Ojs.t`), and supports constructing patterns with optional flags. Concrete use cases include validating input formats, extracting data from strings, and performing search-and-replace operations in web applications.",
      "description_length": 368,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_browser.Base64",
      "library": "vdom",
      "description": "Encodes and decodes Base64 data using JavaScript string operations. Works with `Js_browser.JsString.t` for encoded output and `string` for raw binary input. Useful for handling binary data in web applications, such as image processing or cryptographic operations in the browser.",
      "description_length": 278,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Date",
      "library": "vdom",
      "description": "This module enables precise handling of JavaScript Date objects through operations that create, modify, and extract date components (year, month, day, time) in both local and UTC contexts. It supports conversion to standardized string formats like ISO and locale-specific representations, facilitating tasks such as internationalized date display, timezone-aware calculations, and parsing dates from strings. The `t` type encapsulates JavaScript's date logic, providing direct access to fields like milliseconds, timezone offsets, and structured time parts.",
      "description_length": 557,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Element",
      "library": "vdom",
      "description": "This module enables direct manipulation of DOM nodes through operations like property modification, event handling, and child node management, working with typed representations of elements and their attributes. It supports structural interactions such as querying with CSS selectors, class list management, and shadow DOM integration, alongside geometry-based utilities for layout measurement and scroll control. Use cases include dynamic content rendering, form element interaction, user event binding, and responsive UI adjustments through style and dimension APIs.",
      "description_length": 568,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.DataTransfer",
      "library": "vdom",
      "description": "This module handles data transfer operations during drag-and-drop or clipboard events. It provides access to transferred files and string-based data payloads. Use it to retrieve files or extract text data of a specific type from a data transfer object.",
      "description_length": 252,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.ClassList",
      "library": "vdom",
      "description": "This module provides direct manipulation of DOM element class lists through operations like adding, removing, checking, replacing, and toggling CSS classes. It works with a wrapped JavaScript class list object, enabling interaction via string-based class names. Concrete use cases include dynamically updating element styles in a web interface, such as applying active states or theme variations based on user interaction.",
      "description_length": 422,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.JSON",
      "library": "vdom",
      "description": "Parses JSON strings into JavaScript objects and converts JavaScript objects back into JSON strings. Works directly with string and Ojs.t types. Useful for handling HTTP responses and API data in web applications.",
      "description_length": 212,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.FileReader",
      "library": "vdom",
      "description": "This module provides functions to read the contents of files asynchronously using a file reader API. It supports reading files as binary strings, text, or data URLs, and allows setting a callback to handle the result once loading is complete. The module works directly with file objects to enable client-side file processing in web applications.",
      "description_length": 345,
      "index": 39,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Js_browser.TextDecoder",
      "library": "vdom",
      "description": "This module provides operations to decode binary data into text using a `TextDecoder` interface. It works with `ArrayBuffer` for input data and produces strings as output. Concrete use cases include converting UTF-8 encoded binary data received from network streams or file reads into readable text.",
      "description_length": 299,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Vdom_blit.Encoder",
      "library": "vdom",
      "description": "This module defines a set of types and functions for encoding OCaml values into JavaScript objects. It supports basic types like strings, integers, floats, and booleans, as well as structured data such as lists, objects, and functions that accept arguments of mixed types. It is used to build complex JavaScript-compatible data structures directly from OCaml, particularly when interacting with JavaScript APIs through `Ojs.t`.",
      "description_length": 427,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_browser.Navigator",
      "library": "vdom",
      "description": "This module provides a comprehensive interface for working with WebAuthn credentials and authentication responses in web applications. It supports creating and managing public key credentials through browser APIs, handling complex configurations for registration and authentication challenges, and extracting detailed properties from cryptographic responses. Key data types include credential identifiers, authenticator responses, client data buffers, and attestation objects, with operations to convert between JavaScript and OCaml representations. You can use it to implement passwordless login, multi-factor authentication, and secure credential management using biometrics or hardware keys.",
      "description_length": 694,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Vdom_blit.BDecoder",
      "library": "vdom",
      "description": "Decodes JavaScript objects into OCaml values using a provided decoder, with optional additional fields injected into the root of the object. Works with `Ojs.t` values and decoders from `Vdom.Decoder`. Useful for safely parsing and converting JS data structures into typed OCaml representations during runtime.",
      "description_length": 309,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Vdom_blit.Custom",
      "library": "vdom",
      "description": "This module defines custom DOM event handling logic and element controllers for interactive web UIs. It supports creating and managing custom events like blur, input, and change, and associates them with DOM elements using handlers that can update state or trigger redraws. Controllers are used to wrap DOM elements with custom behavior, enabling use cases like form inputs, checkboxes, or dynamic UI components that respond to user actions.",
      "description_length": 441,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.IFrame",
      "library": "vdom",
      "description": "Accesses the window and document objects of an HTML iframe element. It provides direct interaction with embedded content, enabling programmatic control and inspection of iframes. Useful for cross-document communication and dynamic content loading within web applications.",
      "description_length": 271,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.History",
      "library": "vdom",
      "description": "This module provides direct access to the browser's navigation history through operations like `back`, `forward`, and `go`, allowing movement between visited pages. It supports managing history entries with `push_state` and `replace_state`, enabling dynamic URL updates without full page reloads. The module works with the `t` type, which represents a history object, and is used for implementing client-side routing and navigation in web applications.",
      "description_length": 452,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Uint8Array",
      "library": "vdom",
      "description": "This module provides operations to create, manipulate, and convert byte arrays backed by JavaScript's `Uint8Array`. It supports direct memory access through functions like `get`, `set`, and `to_array`, and integrates with JavaScript values via `t_of_js` and `t_to_js`. Concrete use cases include handling binary data for network protocols, file I/O, and cryptographic operations.",
      "description_length": 379,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser.Event",
      "library": "vdom",
      "description": "This module enables handling and manipulating browser DOM events through type conversion, property extraction, and flow control mechanisms like preventing default actions or stopping propagation. It operates on event objects representing JavaScript DOM events, alongside a sum type categorizing event kinds for precise dispatching. Typical applications include processing keyboard and mouse input, managing clipboard operations, and implementing drag-and-drop interactions by accessing event-specific data such as key codes, coordinates, or transferred content.",
      "description_length": 561,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Vdom_blit",
      "library": "vdom",
      "description": "This module renders declarative UI components into the browser's DOM, enabling dynamic message injection, model access, and resource management. It supports custom extension handlers for commands and elements, allowing precise control over side effects, DOM interactions, and lifecycle events. Key data types include VDOM applications, DOM elements, and context handlers parameterized by message types, with operations for embedding, updating, and interacting with UI components. Submodules enable encoding and decoding OCaml values to JavaScript, managing custom DOM events and controllers, and handling command contexts for side-effectful operations like form inputs or redraw triggers.",
      "description_length": 688,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Js_browser",
      "library": "vdom",
      "description": "This module provides direct access to browser APIs for logging, timing, and debugging JavaScript values, while handling binary data through `Blob`, `ArrayBuffer`, and `Uint8Array` types for efficient manipulation and network transmission. It supports asynchronous operations via promises and file readers, enabling non-blocking I/O for tasks like HTTP requests, file uploads, and WebSocket communication with detailed error and state tracking. You can measure and profile code execution, process binary responses from APIs, and manage real-time data streams with precise control over connection states and message handling. Additional capabilities include DOM manipulation, style and class list management, SVG and canvas rendering, date formatting, and client-side storage for building dynamic, interactive web applications with type-safe access to browser features.",
      "description_length": 867,
      "index": 50,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 52,
    "meaningful_modules": 51,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9807692307692307
  },
  "statistics": {
    "max_description_length": 867,
    "min_description_length": 212,
    "avg_description_length": 431.03921568627453,
    "embedding_file_size_mb": 0.18572235107421875
  }
}