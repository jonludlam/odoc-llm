{
  "package": "activitypub_client",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 18,
  "creation_timestamp": "2025-08-15T12:30:54.010479",
  "modules": [
    {
      "module_path": "Activitypub_client.Actor.Make.Acti.O.H",
      "library": "activitypub_client",
      "description": "This module offers HTTP client operations for managing ActivityPub actors and Linked Data Platform resources, supporting standard methods like GET, POST, PUT, PATCH, and DELETE to handle both RDF and non-RDF data. It operates on IRIs and RDF graphs, enabling container manipulation (e.g., creating, updating, or patching resources with SPARQL or graph diffs) and traversal workflows that follow linked resources up to a specified depth. Specific use cases include fetching remote actor metadata, synchronizing distributed RDF datasets, and processing paginated or linked resource collections with error-resilient folding operations.",
      "description_length": 632,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.Make.O.H",
      "library": "activitypub_client",
      "description": "This module enables HTTP-based interactions with ActivityPub actors and Linked Data Platform (LDP) resources, supporting operations like creating, updating, and deleting RDF/non-RDF content via POST, PUT, PATCH, and DELETE requests. It handles IRIs, RDF graphs, LDP containers, and membership relations, with built-in content negotiation, error-monadic results, and iterative data aggregation across distributed endpoints. Use cases include managing linked data in semantic web services, building decentralized social network clients, and integrating federated content from LDP-compliant storage systems.",
      "description_length": 604,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.Make.Acti.O",
      "library": "activitypub_client",
      "description": "This module implements concrete operations for constructing, posting, and resolving ActivityPub objects using HTTP requests. It provides functions to convert JSON-LD strings to RDF graphs and vice versa, dereference remote objects, and manage collection traversal with streaming. Specific use cases include publishing new activities to a server, synchronizing local RDF data with remote resources, and processing paginated collections of linked data items.",
      "description_length": 456,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti.Make.O.H",
      "library": "activitypub_client",
      "description": "This module implements HTTP client operations for interacting with ActivityPub and LDP resources, supporting CRUD operations on RDF/non-RDF data via IRIs. It provides asynchronous IO primitives for posting activities, managing containers, and folding over GET requests to accumulate results into RDF graphs or custom data structures. Key use cases include federated social network interactions, linked data management, and asynchronous resource aggregation with error-resilient HTTP communication.",
      "description_length": 497,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Object.Make.H",
      "library": "activitypub_client",
      "description": "This module provides HTTP client operations for retrieving, sending, and managing ActivityPub and LDP resources through methods like `GET`, `POST`, `HEAD`, and container-specific variants. It operates on IRIs, RDF graphs, strings, and HTTP headers, enabling tasks such as content negotiation, redirection handling, authentication, and asynchronous traversal of linked data. Specific use cases include constructing/parsing RDF graphs, managing container membership, and error-resilient exchange of remote data with support for metadata and content-type handling.",
      "description_length": 561,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.Make.O",
      "library": "activitypub_client",
      "description": "This module implements actor operations for interacting with ActivityPub and LDP resources over HTTP, providing methods to create, update, and delete RDF graphs and non-RDF content using standard HTTP verbs. It supports content negotiation, JSON-LD serialization, and dereferencing of remote objects, working with data types such as IRIs, RDF graphs, and LDP containers. Concrete use cases include publishing and modifying linked data in decentralized social networks, querying and updating remote LDP resources, and handling paginated collections of federated content.",
      "description_length": 569,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti.Make.O",
      "library": "activitypub_client",
      "description": "This module implements HTTP client operations for interacting with ActivityPub and LDP resources, supporting CRUD operations on RDF/non-RDF data via IRIs. It provides asynchronous IO primitives for posting activities, managing containers, and folding over GET requests to accumulate results into RDF graphs or custom data structures. Key use cases include federated social network interactions, linked data management, and asynchronous resource aggregation with error-resilient HTTP communication.",
      "description_length": 497,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.Make.Acti",
      "library": "activitypub_client",
      "description": "This module provides functions for creating, modifying, and interacting with ActivityPub activities such as posting, liking, following, and deleting objects. It operates on ActivityPub-compatible data structures, including JSON-LD representations of actors and activities. Concrete use cases include publishing a new note, liking a remote post, or unfollowing a user by sending the appropriate ActivityPub messages over HTTP.",
      "description_length": 425,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti.Make",
      "library": "activitypub_client",
      "description": "This module implements concrete ActivityPub client operations for social interaction primitives such as following, liking, announcing, and content lifecycle management via create/update/delete. It works with ActivityPub activities and associated IRIs, using the underlying HTTP client module to perform authenticated, asynchronous requests. Specific use cases include sending a \"Like\" activity to a remote server, federating a post via \"Announce\", or retracting a previous action with \"Undo\".",
      "description_length": 492,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.Make",
      "library": "activitypub_client",
      "description": "This module implements actor operations for interacting with ActivityPub and LDP resources over HTTP, providing methods to create, update, and delete RDF graphs and non-RDF content using standard HTTP verbs. It supports content negotiation, JSON-LD serialization, and dereferencing of remote objects, working with data types such as IRIs, RDF graphs, and LDP containers. Concrete use cases include publishing and modifying linked data in decentralized social networks, querying and updating remote LDP resources, and handling paginated collections of federated content.",
      "description_length": 569,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Object.Make",
      "library": "activitypub_client",
      "description": "This module implements operations for fetching, parsing, and posting ActivityPub objects using HTTP, converting between JSON-LD strings and RDF graphs, and traversing paginated collections. It works with IRIs, RDF graphs, ActivityPub objects, and collections, supporting content negotiation and metadata handling. Concrete use cases include retrieving remote objects by IRI, posting new content to a server with proper content type handling, and streaming items from a paginated collection.",
      "description_length": 490,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Conf",
      "library": "activitypub_client",
      "description": "This module defines configuration structures for managing actors and global settings in an ActivityPub client. It provides functions to wrap and default configurations for actors, including cache settings, authentication tokens, and media posting IRIs. Use cases include initializing client configurations, handling per-actor caching strategies, and setting up JSON-LD context directories.",
      "description_length": 389,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor",
      "library": "activitypub_client",
      "description": "This module implements actor operations for interacting with ActivityPub and LDP resources over HTTP, providing methods to create, update, and delete RDF graphs and non-RDF content using standard HTTP verbs. It works with data types such as IRIs, RDF graphs, and LDP containers, supporting content negotiation, JSON-LD serialization, and dereferencing of remote objects. Concrete use cases include publishing and modifying linked data in decentralized social networks, querying and updating remote LDP resources, and handling paginated collections of federated content.",
      "description_length": 569,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Object",
      "library": "activitypub_client",
      "description": "This module implements operations for creating and manipulating ActivityPub objects such as notes, links, and documents, with support for attachments and multilingual content. It works with RDF graphs, IRIs, and ActivityPub object types, enabling concrete tasks like constructing a note with localized content, embedding attachments, or generating link metadata. Specific use cases include building a new ActivityPub note from a string, attaching media to an object, or creating a document object from a URL with custom metadata.",
      "description_length": 529,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Main",
      "library": "activitypub_client",
      "description": "This module provides the `run` function to create and configure command-line clients for handling multiple ActivityPub actors. It parses command-line arguments, manages configuration files, and initializes logging via a `Logs.reporter`. Concrete use cases include building federated social network clients that interact with multiple remote actors using IRI-based identifiers.",
      "description_length": 376,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti",
      "library": "activitypub_client",
      "description": "This module implements concrete ActivityPub client operations for social interaction primitives such as following, liking, announcing, and content lifecycle management via create/update/delete. It works with ActivityPub activities and associated IRIs, using the underlying HTTP client module to perform authenticated, asynchronous requests. Specific use cases include sending a \"Like\" activity to a remote server, federating a post via \"Announce\", or retracting a previous action with \"Undo\".",
      "description_length": 492,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Http",
      "library": "activitypub_client",
      "description": "Performs HTTP requests authenticated as a specific ActivityPub actor, using the actor's IRI and configuration. It works with IRI identifiers and actor configurations to set up a context for making signed HTTP calls. This module is used to interact with ActivityPub servers, sending requests on behalf of a local actor.",
      "description_length": 318,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client",
      "library": "activitypub_client",
      "description": "This module implements client-side ActivityPub operations for social interactions, content management, and actor identity handling. It provides functions for sending activities like Like, Announce, and Undo, managing RDF-based objects and LDP resources, and performing authenticated HTTP requests. Concrete use cases include federating posts across social platforms, publishing and modifying linked data, and managing decentralized user identities with configurable client settings.",
      "description_length": 482,
      "index": 17,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 18,
    "filtered_empty_modules": 5,
    "retention_rate": 0.782608695652174
  },
  "statistics": {
    "max_description_length": 632,
    "min_description_length": 318,
    "avg_description_length": 497.05555555555554,
    "embedding_file_size_mb": 0.2612190246582031
  }
}