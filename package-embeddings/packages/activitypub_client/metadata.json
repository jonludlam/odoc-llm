{
  "package": "activitypub_client",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 30,
  "creation_timestamp": "2025-07-15T23:13:27.313689",
  "modules": [
    {
      "module_path": "Activitypub_client.Actor.Make.Acti.O.H",
      "library": "activitypub_client",
      "description": "This module offers HTTP client operations for interacting with ActivityPub and LDP resources, supporting standard methods like GET, POST, PUT, PATCH, and DELETE to manage RDF and non-RDF data. It operates on IRIs with configurations and headers, manipulating RDF graphs, handling content negotiation, and enabling SPARQL-based patches or graph diffs for resource updates. Specific use cases include asynchronous traversal of linked resources with depth-limited folding, direct/indirect container operations in LDP, and error-resilient data synchronization via result- or exception-based error handling.",
      "description_length": 602,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Actor.Make.Acti.O",
      "library": "activitypub_client",
      "description": "This module provides core operations for working with ActivityPub objects, enabling dereferencing, serialization, and deserialization of JSON-LD data into RDF graphs and IRIs. It supports constructing, fetching, and posting activity data to remote endpoints, with direct handling of JSON-LD strings and RDF graph conversions. The integrated HTTP client submodule extends these capabilities by offering asynchronous GET, POST, PUT, PATCH, and DELETE operations on IRIs, supporting content negotiation, SPARQL patches, and error-resilient synchronization. Together, they enable workflows like retrieving a remote object by IRI, transforming it into an RDF graph, and posting a derived activity to another endpoint.",
      "description_length": 712,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.Make.O.H",
      "library": "activitypub_client",
      "description": "This module offers HTTP and LDP client operations for interacting with ActivityPub actors, enabling creation, modification, and deletion of RDF and non-RDF resources, container membership management, and authentication workflows. It operates on IRIs, RDF graphs, and configuration-driven contexts, supporting content negotiation, redirect handling, and iterative data retrieval. Use cases include federated social networking interactions, linked data resource synchronization, and processing sequences of distributed resources into structured accumulators or semantic graphs.",
      "description_length": 575,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Object.Make.H",
      "library": "activitypub_client",
      "description": "This module offers HTTP client operations for managing RDF and non-RDF resources via IRI-based interactions, supporting standard methods like GET, POST, PUT, PATCH, and DELETE. It works with IRIs, RDF graphs, and resource metadata, enabling tasks like content negotiation, graph parsing, and container operations for Linked Data Platform (LDP) resources. Specific use cases include fetching and aggregating remote resources into local graphs, performing atomic updates with SPARQL patches, and handling error-prone HTTP exchanges through configurable exception-raising variants.",
      "description_length": 578,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti.Make.O",
      "library": "activitypub_client",
      "description": "This module handles client-side ActivityPub operations, enabling creation, posting, and dereferencing of activities using RDF graphs, IRIs, and JSON-LD. It supports sending activities to remote inboxes, converting JSON-LD to RDF, and retrieving activity data from IRIs. Key data types include activity objects, IRIs, and RDF graphs, with operations for serialization, parsing, and HTTP-based delivery. Submodules extend functionality for specific tasks such as activity construction, inbox management, and data transformation.",
      "description_length": 526,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Actor.Make.Acti",
      "library": "activitypub_client",
      "description": "This module implements core actor operations for interacting with ActivityPub activities, including creating, updating, and deleting content, as well as social actions like following, liking, and announcing. It provides data types for ActivityPub actors and activity objects, with operations to construct, sign, and send activities over HTTP, enabling workflows like posting a note, liking a post, or following a remote user. The integrated object module handles dereferencing, serialization, and deserialization of JSON-LD data into RDF graphs and IRIs, supporting transformations and remote interactions. Together with the HTTP client submodule, it enables asynchronous communication with remote endpoints using signed requests, content negotiation, and SPARQL patches for decentralized social networking.",
      "description_length": 807,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.Make.O",
      "library": "activitypub_client",
      "description": "This module enables client-side actor operations for ActivityPub, handling dereferencing, posting, and collection pagination with RDF graphs, JSON-LD, and IRIs. It supports HTTP and LDP client interactions for creating, modifying, and deleting resources, managing container membership, and handling authentication. You can fetch and parse remote actor data, post new content to servers, or synchronize linked data across federated services. Submodules extend this functionality with advanced client operations for distributed resource processing and semantic graph construction.",
      "description_length": 578,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Actor.T-Acti-O",
      "library": "activitypub_client",
      "description": "This module implements operations for handling ActivityPub actors, including dereferencing IRIs, converting between JSON-LD strings and RDF graphs, and posting data to remote endpoints. It works with RDF graphs, JSON-LD, ActivityPub objects, and collections, supporting pagination through collection traversal. Concrete use cases include fetching and processing remote actor data, serializing and sending ActivityPub messages, and navigating paginated collections of objects or links.",
      "description_length": 484,
      "index": 7,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Activitypub_client.Actor.T",
      "library": "activitypub_client",
      "description": "This module provides functions to retrieve remote objects and the authenticated actor in an ActivityPub context. It works with IRI identifiers and dereferenced actor data, using RDF graphs for object resolution. Concrete use cases include fetching ActivityPub entities and managing the current actor's identity.",
      "description_length": 311,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Object.T-H",
      "library": "activitypub_client",
      "description": "This module provides HTTP client operations for interacting with ActivityPub and LDP resources, including CRUD functionality for RDF and non-RDF data, content negotiation, and SPARQL-based patching. It operates on IRIs, RDF graphs, and raw payloads, with asynchronous traversal capabilities via `fold_get` and `fold_get_graph` for distributed resource aggregation. These tools are suited for federated social networking, linked data platforms, and applications requiring concurrent handling of distributed RDF datasets.",
      "description_length": 519,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.T-O",
      "library": "activitypub_client",
      "description": "This module implements operations for interacting with ActivityPub actors, including dereferencing objects, posting data, and retrieving and converting actor representations from IRIs or JSON-LD. It works with RDF graphs, IRIs, and ActivityPub objects to handle low-level communication such as HTTP POST requests and JSON-LD parsing. Concrete use cases include fetching remote actor data, sending activities to inboxes, and traversing paginated collections of linked items.",
      "description_length": 473,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Http.T",
      "library": "activitypub_client",
      "description": "This module supports HTTP interactions with ActivityPub/LDP servers, enabling resource management via GET, POST, PUT, PATCH, DELETE, and HEAD requests on IRI-identified resources. It handles RDF graphs, content types (Ldp.Ct), and Cohttp headers, with features for container operations, content negotiation, and authentication, making it suitable for clients in federated social networks or linked data applications requiring asynchronous, error-resilient access to LDP-compliant services.",
      "description_length": 489,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti.T-O",
      "library": "activitypub_client",
      "description": "This module implements client-side operations for handling ActivityPub objects and activities, including dereferencing, serializing, and posting data to remote servers. It works with RDF graphs, JSON-LD strings, and ActivityPub objects such as collections and links. Concrete use cases include fetching and converting remote activities into local objects, posting new activities to inboxes, and paginating through collection items.",
      "description_length": 431,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Object.Make",
      "library": "activitypub_client",
      "description": "This module orchestrates ActivityPub object handling by transforming JSON-LD to RDF, dereferencing remote objects, and building local representations from IRIs or raw data. It integrates HTTP client operations for IRI-based resource management, supporting GET, POST, PUT, PATCH, and DELETE methods with content negotiation, SPARQL patch updates, and LDP container interactions. Key data types include RDF graphs, ActivityPub objects, and paginated collections, with operations for posting to endpoints, resolving collection items incrementally, and parsing graph data from remote sources. Examples include fetching and processing remote social posts, managing object identities across distributed systems, and aggregating or updating RDF resources through robust HTTP exchanges.",
      "description_length": 778,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.T-Acti-O-H",
      "library": "activitypub_client",
      "description": "The module offers HTTP client operations for ActivityPub actors, enabling resource fetching, metadata queries, and container management via IRIs and RDF graphs. It supports Linked Data Platform interactions for resource manipulation using HTTP methods, returning asynchronous futures with error handling. These capabilities facilitate use cases like federated social networking, Linked Data management, and traversing paginated ActivityPub collections through header-driven requests and graph accumulation.",
      "description_length": 506,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Object.Http_t",
      "library": "activitypub_client",
      "description": "The module provides HTTP client operations for retrieving, creating, updating, and deleting ActivityPub and LDP resources using IRIs, supporting both RDF and non-RDF data formats. It handles common operations like GET, POST, PUT, PATCH, and DELETE with customizable headers, content types, and authentication, while offering specialized functions to process linked resources and aggregate results into RDF graphs or custom structures. These capabilities enable interaction with distributed social networks and linked data platforms requiring precise control over HTTP transactions and data serialization.",
      "description_length": 604,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.T-O-H",
      "library": "activitypub_client",
      "description": "This module enables HTTP-based interactions with ActivityPub and LDP servers, focusing on resource management through CRUD operations, container handling, and iterative data retrieval. It operates on IRIs, RDF graphs, and content types like JSON or plain text, supporting authentication, membership updates, and content negotiation. Use cases include fetching and aggregating linked data, managing actor relationships (e.g., follows or shares), and synchronizing remote collections with local state.",
      "description_length": 499,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti.T-O-H",
      "library": "activitypub_client",
      "description": "This module offers HTTP client operations for ActivityPub resources, supporting `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` methods to interact with IRIs, RDF graphs, and non-RDF content, including container management and SPARQL-based patches. It facilitates working with LDP servers through authenticated resource creation, content negotiation, and redirect handling, while providing folding utilities to aggregate paginated results or merge fetched data into RDF graphs. Use cases include managing distributed social content, synchronizing RDF datasets, and implementing ActivityPub-compatible clients with customizable error handling and async workflows.",
      "description_length": 658,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.Make",
      "library": "activitypub_client",
      "description": "This module provides core operations for retrieving and authenticating actors in a decentralized social networking context, using RDF graphs and IRI identifiers to manage remote actor dereferencing and authentication. It enables workflows such as fetching a remote actor by IRI, constructing and signing ActivityPub activities, and posting or modifying content across federated services using HTTP and JSON-LD. The integrated submodules extend these capabilities with advanced client interactions, collection pagination, and semantic graph processing, supporting actions like following a remote user, posting a note, or applying SPARQL patches for synchronized updates. Together, the module and its children form a cohesive system for building, sending, and processing decentralized social data with full support for remote dereferencing, content negotiation, and linked data management.",
      "description_length": 887,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Acti.T",
      "library": "activitypub_client",
      "description": "This module provides functions to construct and send ActivityPub activities such as creating, updating, deleting, and interacting with objects (e.g., like, follow, undo). It operates on ActivityPub objects conforming to the Object.T interface, enabling actors to perform social actions within a federated network. Concrete use cases include posting a new note, liking a post, or unfollowing a user by generating and sending the appropriate ActivityPub activity.",
      "description_length": 461,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti.Make",
      "library": "activitypub_client",
      "description": "This module generates and handles ActivityPub activities like posting, liking, and following, working directly with activity objects and actor references. It supports operations for creating, updating, and sending activities to remote servers, such as sending a \"Like\" or announcing a follow request. The child module focuses on client-side operations, using RDF graphs and JSON-LD to construct, serialize, and deliver activities over HTTP. Together, they enable concrete actions like creating a note, dereferencing an IRI, or managing inbox deliveries using typed representations of activities and actors.",
      "description_length": 606,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Object.T",
      "library": "activitypub_client",
      "description": "This module handles the creation, dereferencing, and querying of ActivityPub objects on behalf of a specific actor. It operates on RDF graphs and JSON-LD strings, converting between them and providing methods to retrieve, construct, and post objects using IRIs. Concrete use cases include fetching remote objects, publishing new content, and traversing paginated collections with streaming support.",
      "description_length": 398,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Actor.T-Acti",
      "library": "activitypub_client",
      "description": "This module implements core actor operations for interacting with ActivityPub entities, including creating, updating, and deleting content, as well as social actions like following, liking, and announcing. It works with ActivityPub object types such as actors, notes, and activities, handling serialization and signing of requests. Concrete use cases include posting a new note, updating a user profile, following another actor, or announcing a post to followers.",
      "description_length": 463,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti",
      "library": "activitypub_client",
      "description": "This module orchestrates the creation, manipulation, and transmission of ActivityPub activities\u2014such as Create, Like, and Follow\u2014by integrating RDF graphs, IRIs, and typed ActivityPub objects into valid JSON-LD payloads. It enables actors to perform social actions across federated servers, such as posting notes, liking remote content, or announcing follows, while supporting dereferencing, serialization, and inbox delivery via its client-side submodule. The HTTP submodule handles authenticated requests, content negotiation, and SPARQL-based patches, facilitating interactions with LDP servers and aggregation of paginated results. Together, these components allow workflows like creating and broadcasting a note, fetching remote activities, or synchronizing distributed RDF datasets with async error handling.",
      "description_length": 814,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Conf",
      "library": "activitypub_client",
      "description": "This module defines configuration structures for managing actors and global settings in an ActivityPub client. It provides functions to wrap and manipulate configurations, including actor-specific parameters like authentication tokens, caching directories, and media posting IRIs. Use cases include setting up client identities with cached resources, managing authentication state, and configuring IRI mappings for distributed activity handling.",
      "description_length": 445,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Http",
      "library": "activitypub_client",
      "description": "This module configures an HTTP client for making authenticated requests as a specific ActivityPub actor, using its IRI and configuration to enable operations like posting activities or retrieving remote resources. It supports standard HTTP methods (GET, POST, PUT, PATCH, DELETE, HEAD) on IRI-identified resources, with built-in handling for RDF graphs, content types, and Cohttp headers. Submodules extend this functionality with advanced features for container operations, content negotiation, and error-resilient communication with LDP-compliant servers. Examples include creating and updating resources, querying linked data, and managing collections in federated social network clients.",
      "description_length": 691,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Actor",
      "library": "activitypub_client",
      "description": "This module orchestrates actor interactions in a decentralized social networking context, combining core operations with submodules that handle ActivityPub and LDP protocols. It manages actor creation, updates, and social actions like follows and likes, while submodules support dereferencing IRIs, converting JSON-LD to RDF, posting activities, and traversing paginated collections. Key data types include IRIs, RDF graphs, and ActivityPub objects, with operations for signing requests, resolving remote actors, and handling HTTP-based CRUD. Examples include posting a signed note activity, fetching a remote actor's profile, or navigating a paginated followers list via link headers.",
      "description_length": 685,
      "index": 26,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Activitypub_client.Object",
      "library": "activitypub_client",
      "description": "This module enables the creation and manipulation of ActivityPub objects like notes, documents, and links, integrating attachments and multilingual content through RDF graphs, IRIs, and cryptographic keys. It supports operations to build, sign, and dereference objects, with concrete examples including generating a multilingual note or attaching IRIs to graph nodes for distributed exchange. The child modules extend this functionality with HTTP client tools for CRUD operations on RDF and non-RDF data, content negotiation, and SPARQL patching, enabling federated social networking and linked data applications. Additional submodules handle JSON-LD to RDF conversion, remote object resolution, and actor-based object publishing, supporting streaming traversal of paginated collections and signed document references across distributed systems.",
      "description_length": 845,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Main",
      "library": "activitypub_client",
      "description": "This module provides the `run` function to bootstrap client applications that interact with multiple ActivityPub actors. It parses command line arguments, handles configuration file setup, and initializes logging via a `Logs.reporter`. It works with `Activitypub_client.Conf.t` for configuration and maps of actors via `Iri.Map`. A concrete use case is launching a command-line tool that manages multiple ActivityPub identities with custom CLI options and configuration.",
      "description_length": 470,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client",
      "library": "activitypub_client",
      "description": "This module enables federated social networking by orchestrating ActivityPub activities, actor interactions, and HTTP communication with LDP servers. It centers on IRIs, RDF graphs, and typed ActivityPub objects, supporting operations like creating and signing notes, following remote actors, and dereferencing distributed content. The HTTP client handles authenticated requests, content negotiation, and SPARQL patches, while configuration modules manage actors, authentication, and CLI-driven workflows. Examples include posting a multilingual note to a remote inbox, fetching and signing a follow request, or paginating through a remote actor's activity stream.",
      "description_length": 664,
      "index": 29,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 40,
    "meaningful_modules": 30,
    "filtered_empty_modules": 10,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 887,
    "min_description_length": 311,
    "avg_description_length": 585.3,
    "embedding_file_size_mb": 0.10945701599121094
  }
}