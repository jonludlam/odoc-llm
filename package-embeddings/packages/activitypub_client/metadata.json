{
  "package": "activitypub_client",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-06-18T16:37:10.406747",
  "modules": [
    {
      "module_path": "Activitypub_client.Actor.Make.Acti.O.H",
      "description": "This module facilitates HTTP operations like GET, POST, PUT, and DELETE for interacting with resources identified by IRIs, focusing on RDF graphs, non-RDF data, and LDP container management. It handles IRIs, HTTP headers, and structured data parsing, with features like redirect following, content-type specification, and error handling for queries. Use cases include retrieving and aggregating RDF resources, updating linked data platforms, and managing authenticated resource interactions.",
      "description_length": 491,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti.Make.O.H",
      "description": "This module provides HTTP operations (GET, POST, PUT, DELETE, etc.) for interacting with resources identified by IRIs, focusing on RDF data management and LDP container handling, with support for content-type negotiation, redirect following, and error recovery. It works with IRIs, RDF graphs, HTTP headers, and string data, enabling tasks like aggregating RDF resources via `fold_get`, merging graphs with `fold_get_graph`, and managing SPARQL patches or non-RDF sources. Specific use cases include querying linked data platforms, processing structured responses, and automating data retrieval with customizable request parameters.",
      "description_length": 632,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.Make.O.H",
      "description": "The module provides HTTP operations (HEAD, GET, POST, PUT, PATCH, DELETE) for interacting with resources identified by IRIs, handling RDF and non-RDF content, and managing LDP containers. It works with IRIs, RDF graphs, HTTP headers, and string data, offering features like redirect handling, content-type specification, and response parsing. Specific use cases include retrieving and merging RDF resources, updating containers, and applying SPARQL patches through targeted functions.",
      "description_length": 484,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Actor.Acti.O.H",
      "description": "This module offers HTTP methods (GET, POST, PUT, PATCH, DELETE) for interacting with LDP resources, focusing on RDF data management, container operations, and SPARQL patches, while supporting both direct and indirect containers. It works with IRIs, RDF graphs, HTTP headers, and string data, enabling structured response parsing and customizable request behaviors like redirect handling and content-type specification. Specific use cases include retrieving and merging RDF resources from multiple IRIs, managing non-RDF sources, and processing hierarchical LDP containers with error-resistant workflows.",
      "description_length": 603,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti.Make.H",
      "description": "This module provides HTTP operations (GET, POST, PUT, PATCH, DELETE) for interacting with LDP resources and IRIs, handling RDF graphs, string data, and headers while supporting content-type specifications and redirect management. It includes specialized functions for RDF container manipulation, SPARQL patches, and batch processing of multiple IRIs to accumulate or merge graph data. Use cases include managing linked data platforms, parsing structured responses, and efficiently retrieving distributed RDF resources with error control.",
      "description_length": 537,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti.O.H",
      "description": "This module provides HTTP operations (HEAD, GET, POST, PUT, PATCH, DELETE) for interacting with resources and LDP containers, handling RDF graphs, IRIs, and string data while supporting content-type specifications, redirect following, and error management. It enables tasks like retrieving and merging RDF datasets, managing container resources, and applying SPARQL patches, with specialized functions for direct/indirect containers and structured response parsing. Key use cases include federated data retrieval, RDF store updates, and compliant LDP resource manipulation.",
      "description_length": 573,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.Make.Acti",
      "description": "provides a foundational structure for managing state transitions, with support for defining and manipulating event-driven workflows. it includes type definitions for states, events, and transition rules, along with operations to apply events and track state changes. examples include initializing a workflow, applying a sequence of events to evolve the state, and querying the current state after a transition. no functional operations are available due to the absence of implemented logic.",
      "description_length": 490,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Actor.O.H",
      "description": "The module provides HTTP operations (GET, POST, PUT, DELETE) for managing LDP resources, handling RDF and non-RDF content, with support for redirections, headers, and content type specifications. It works with IRIs, RDF graphs, and string data, enabling tasks like resource retrieval, container management, and aggregating RDF data from multiple endpoints. Specific use cases include processing SPARQL patches, managing direct/indirect containers, and merging graphs from multiple IRIs through functions like `fold_get_graph`.",
      "description_length": 526,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Activitypub_client.Object.Make.H",
      "description": "This module supports HTTP methods like HEAD, GET, POST, PUT, PATCH, and DELETE for interacting with LDP resources, specializing in RDF data management and container operations. It works with IRIs, HTTP headers, RDF graphs, and error types, enabling tasks such as retrieving and merging RDF resources, handling redirects, and specifying content formats. Specific functions like `fold_get` and `fold_get_graph` facilitate batch processing of IRIs and aggregating RDF data while managing errors and request behavior.",
      "description_length": 513,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Object.H",
      "description": "The module provides HTTP methods (HEAD, GET, POST, PUT, PATCH, DELETE) for interacting with resources identified by IRIs, focusing on RDF and non-RDF content, as well as LDP container management. It operates on IRIs, HTTP headers, and RDF graphs, with features like redirect handling, content-type negotiation, and error-controlled batch processing of multiple resources. Use cases include querying linked data endpoints, updating structured data in containers, and aggregating RDF graphs from distributed sources.",
      "description_length": 514,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Acti",
      "description": "Provides a mechanism for generating and managing activity records through a configured actor. Includes a single type for activity data and operations to construct and submit these records. Example uses include logging user actions or system events with structured metadata. No additional functionality is available beyond basic activity creation.",
      "description_length": 346,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Http",
      "description": "The module provides HTTP operations such as GET, POST, and DELETE, along with specialized handling for RDF graphs, IRIs, and HTTP headers, supporting content-type negotiation, redirection control, and format-specific parsing. It enables use cases like interacting with Linked Data Platform resources, executing SPARQL queries, and managing errors through explicit exception types and result encapsulation.",
      "description_length": 405,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client.Main",
      "description": "provides a framework for constructing client implementations through composed functionality includes types for client configuration and operations for initializing and managing client instances allows for customizing client behavior through layered configuration updates supports creating specialized clients by combining predefined setup routines and parameter adjustments",
      "description_length": 373,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "activitypub_client",
      "description": "Handles HTTP requests and responses for Activitypub protocol interactions, including fetching and posting activity streams. Operates on JSON data structures derived from the ActivityStreams vocabulary. Used to interact with remote social media servers for content retrieval and user activity publishing.",
      "description_length": 303,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Activitypub_client",
      "description": "combines activity generation, HTTP interaction, and client configuration into a unified system for building and managing ActivityPub clients. it includes types for activity data, client configurations, and HTTP operations with support for RDF, IRIs, and content negotiation. users can create and submit structured activities, perform HTTP requests, and customize client behavior through layered configurations. examples include logging user actions, querying SPARQL endpoints, and managing linked data resources.",
      "description_length": 512,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 34,
    "meaningful_modules": 15,
    "filtered_empty_modules": 19,
    "retention_rate": 0.4411764705882353
  },
  "statistics": {
    "max_description_length": 632,
    "min_description_length": 303,
    "avg_description_length": 486.8,
    "embedding_file_size_mb": 0.054993629455566406
  }
}