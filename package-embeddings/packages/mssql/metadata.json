{
  "package": "mssql",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:52:31.897234",
  "modules": [
    {
      "module_path": "Mssql.Error",
      "library": "mssql",
      "description": "This module defines an exception type that captures detailed error information including source position, query context, parameters, and results. It provides functions to raise formatted exceptions and wrap existing exceptions with additional context. Use this module to handle and propagate rich error diagnostics in database operations.",
      "description_length": 338,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mssql.Param",
      "library": "mssql",
      "description": "This module defines a polymorphic type `t` for representing SQL parameters, including atomic values like integers, floats, strings, and dates, as well as arrays of parameters. It provides functions to convert between these typed values and their string or escaped string representations for safe SQL query construction. Use this module to safely pass typed values into SQL queries without string concatenation, preventing SQL injection.",
      "description_length": 436,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mssql.Row",
      "library": "mssql",
      "description": "This module enables type-safe extraction and conversion of values from database rows by column name, supporting standard types like integers, floats, strings, and dates, with explicit handling of SQL NULLs through optional returns or exceptions. It operates on row structures populated from SQL queries, ensuring robust access to heterogeneous data while distinguishing between missing columns and invalid type conversions. Common use cases include processing query results with mixed schemas, safely mapping temporal fields, and converting nullable database values into idiomatic OCaml types.",
      "description_length": 593,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mssql",
      "library": "mssql",
      "description": "This module implements asynchronous database operations for interacting with Microsoft SQL Server, supporting type-safe query execution, parameter binding, and transaction control. It works with structured query results as lists, pipes, or aggregated values, and integrates typed SQL parameters and error handling for robust database interactions. Concrete use cases include executing parameterized queries to prevent SQL injection, processing multi-result sets from stored procedures, and managing transactional updates with atomic commit or rollback semantics.",
      "description_length": 562,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 593,
    "min_description_length": 338,
    "avg_description_length": 482.25,
    "embedding_file_size_mb": 0.058363914489746094
  }
}