{
  "package": "posix-socket-unix",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:09:10.639488",
  "modules": [
    {
      "module_path": "Posix_socket_unix_constants.Def",
      "library": "posix-socket-unix.constants",
      "description": "This module defines constants related to Unix domain sockets, specifically the address family `AF_UNIX` and the maximum length of the socket path `SUN_PATH_LEN`. It works with integer constants through the `S.const` type. These values are used when creating and binding Unix domain sockets to configure communication endpoints in inter-process communication scenarios.",
      "description_length": 368,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Posix_socket_unix_constants",
      "library": "posix-socket-unix.constants",
      "description": "This module defines integer constants for Unix domain socket configurations, including the address family `AF_UNIX` and the maximum socket path length `SUN_PATH_LEN`. It provides direct access to platform-specific values used in socket creation and binding operations. These constants are essential for setting up inter-process communication endpoints using Unix domain sockets.",
      "description_length": 378,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Posix_socket_unix_types.Def.SockaddrUnix",
      "library": "posix-socket-unix.types",
      "description": "This module defines the structure and accessors for Unix domain socket addresses. It provides direct manipulation of `sockaddr_un` fields, including the address family and the path to the socket file. Useful for low-level socket programming where precise control over Unix domain sockets is required.",
      "description_length": 300,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Posix_socket_unix_types.Def",
      "library": "posix-socket-unix.types",
      "description": "This module defines the `sockaddr_un` structure and its associated type for working with Unix domain socket addresses. It provides direct access to fields such as the address family and the socket path, enabling precise control in low-level socket operations. It is used when binding, connecting, or manipulating Unix domain sockets at the system interface level.",
      "description_length": 363,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Posix_socket_unix_types",
      "library": "posix-socket-unix.types",
      "description": "This module defines constants and structures for working with Unix domain sockets, including the address family `af_unix` and the maximum length of the socket path `sun_path_len`. It provides the `Def` submodule, which exposes the `sockaddr_un` structure for representing Unix domain socket addresses. This module is used to configure and manage low-level socket operations such as binding, connecting, and listening on Unix domain sockets.",
      "description_length": 440,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Posix_socket_unix.SockaddrUnix",
      "library": "posix-socket-unix",
      "description": "This module provides operations to construct and manipulate Unix domain socket addresses. It defines a structure type `t` with fields for the address family and the socket path, along with a constant for the maximum path length. Direct use cases include setting up or interpreting addresses for Unix domain sockets, such as binding or connecting to a named socket in the file system.",
      "description_length": 383,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Posix_socket_unix",
      "library": "posix-socket-unix",
      "description": "This module provides functions to convert between Unix domain socket addresses and their C-compatible representations, enabling direct interaction with system socket APIs. It works with `Unix.sockaddr` and Ctypes-based `sockaddr_un` structures, facilitating operations like binding or connecting to Unix domain sockets using file system paths. Concrete use cases include setting up Unix domain sockets for inter-process communication (IPC) and translating addresses between OCaml and C representations for low-level networking operations.",
      "description_length": 538,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 538,
    "min_description_length": 300,
    "avg_description_length": 395.7142857142857,
    "embedding_file_size_mb": 0.10182857513427734
  }
}