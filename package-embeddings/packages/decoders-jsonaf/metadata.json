{
  "package": "decoders-jsonaf",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:50:26.313514",
  "modules": [
    {
      "module_path": "Decoders_jsonaf.Decode.Pipeline",
      "library": "decoders-jsonaf",
      "description": "This module provides combinators for building JSON decoders that extract and transform values from JSON objects. It supports operations to decode required and optional fields, either at the top level or nested paths, and chain transformations using custom decoding logic. Typical use cases include parsing JSON responses from APIs into structured OCaml types, handling nested JSON objects, and converting JSON values into domain-specific types with validation.",
      "description_length": 460,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_jsonaf.Decode.Infix",
      "library": "decoders-jsonaf",
      "description": "This module provides infix operators for composing and chaining JSON decoding operations, enabling concise and readable parsing logic. It works with decoders that process input streams and produce structured data or errors, supporting both sequential and parallel composition of decoding steps. Concrete use cases include parsing nested JSON fields, validating and transforming decoded values, and combining multiple decoders for complex data structures.",
      "description_length": 454,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_jsonaf.Encode",
      "library": "decoders-jsonaf",
      "description": "This module provides functions to encode OCaml values into JSON using the Jsonaf format. It supports encoding primitive types like strings, integers, floats, and booleans, as well as structured data such as lists, arrays, and key-value objects. Use cases include converting domain models to JSON for API responses or serializing configuration data to disk.",
      "description_length": 356,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_jsonaf",
      "library": "decoders-jsonaf",
      "description": "This module provides functions to decode JSON values into OCaml types and encode OCaml values into JSON. It handles primitive types like strings, integers, and floats, along with structured types such as lists, arrays, and key-value maps. Use it to parse JSON API requests into typed data structures or serialize application state to JSON for storage or transmission.",
      "description_length": 367,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 4,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 460,
    "min_description_length": 356,
    "avg_description_length": 409.25,
    "embedding_file_size_mb": 0.05835437774658203
  }
}