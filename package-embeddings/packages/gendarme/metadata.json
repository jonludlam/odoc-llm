{
  "package": "gendarme",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 3,
  "creation_timestamp": "2025-08-14T22:56:57.303903",
  "modules": [
    {
      "module_path": "Gendarme.Hashtbl",
      "library": "gendarme",
      "description": "This module provides a function to create a type witness for standard OCaml hash tables. It works with key-value pairs where both key and value types are described using the library's type descriptors. A concrete use case is enabling type-safe marshalling and unmarshalling of hash table data structures in serialization workflows.",
      "description_length": 331,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gendarme.Seq",
      "library": "gendarme",
      "description": "This module provides a function to construct a `Gendarme` type witness for `Seq.t` values, enabling the library to handle sequences during unmarshalling and type conversion. It works with the `Stdlib.Seq.t` type and is used when dealing with Gendarme's type extension system for sequences, such as during deserialization or default value generation. A concrete use case is defining how sequences of custom types are unmarshalled when they appear in record fields or variant payloads.",
      "description_length": 483,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gendarme",
      "library": "gendarme",
      "description": "This library provides type-safe marshalling and unmarshalling operations for extensible data structures, including built-in primitives (int, string, option), composite types (records, variants, tuples), and standard containers (sequences, hash tables). It enforces strict type conversion rules, handles missing default values for variants in records, and detects invalid unmarshalling attempts through dedicated exceptions. Key use cases include robust serialization of heterogeneous data, error-resilient deserialization of evolving type definitions, and safe conversion between standard OCaml collections and type-aware descriptors.",
      "description_length": 634,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 634,
    "min_description_length": 331,
    "avg_description_length": 482.6666666666667,
    "embedding_file_size_mb": 0.0438995361328125
  }
}