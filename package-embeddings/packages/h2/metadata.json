{
  "package": "h2",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-07-15T23:08:34.961806",
  "modules": [
    {
      "module_path": "H2.Body.Reader",
      "library": "h2",
      "description": "This module manages the reading of HTTP/2 message bodies by providing callbacks for consuming incoming data chunks and handling end-of-stream conditions. It works with `Bigstringaf.t` buffers to efficiently process byte streams without unnecessary copying. Concrete use cases include streaming large request or response bodies, handling chunked transfers, and integrating with async IO systems for backpressure control.",
      "description_length": 419,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2.Body.Writer",
      "library": "h2",
      "description": "This module handles efficient data transmission for HTTP/2 connections by providing functions to buffer and schedule byte-level writes. It works directly with character, string, and bigstring data types, optimizing output through internal buffering and zero-copy scheduling. Concrete use cases include streaming response bodies, sending large payloads without unnecessary memory copies, and managing asynchronous flush operations in network servers.",
      "description_length": 449,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2.Response",
      "library": "h2",
      "description": "This module defines the structure and operations for handling HTTP/2 server responses. It provides functions to create responses with status and headers, determine the body length based on the request method, and pretty-print response data. It works with HTTP/2 headers and status codes, specifically handling responses to common methods like GET and POST.",
      "description_length": 356,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "H2.Request",
      "library": "h2",
      "description": "This module defines the structure and operations for constructing and inspecting HTTP/2 client requests. It provides functions to create requests with required components such as method, target URI, and scheme, and includes support for pseudo-headers like `:authority` and `:scheme`. Use this module when initiating HTTP/2 requests, particularly to ensure compliance with HTTP/2 pseudo-header requirements and to manage request metadata efficiently.",
      "description_length": 449,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2.Body",
      "library": "h2",
      "description": "This module manages both incoming and outgoing HTTP/2 message bodies, enabling efficient streaming and buffering of byte-level data. It supports reading via callbacks over `Bigstringaf.t` buffers and writing via zero-copy scheduling of character, string, and bigstring data. Use cases include handling large request/response bodies with backpressure, streaming data without memory duplication, and managing asynchronous IO in network servers.",
      "description_length": 442,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2.Server_connection",
      "library": "h2",
      "description": "This module handles the lifecycle of an HTTP/2 server connection, including request processing, input/output management, and error handling. It works with HTTP/2 frames, request handlers, and low-level byte buffers using `Bigstringaf` and `IOVec`. Concrete use cases include accepting HTTP/2 requests from an upgraded HTTP/1.1 connection, reading incoming data, writing responses, and managing backpressure during transmission.",
      "description_length": 427,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2.Status",
      "library": "h2",
      "description": "This module defines HTTP/2 response status codes as polymorphic variants and provides functions to convert between their integer representations and string reason phrases. It includes predicates to classify status codes into informational, successful, redirection, client error, and server error categories. Concrete use cases include validating HTTP/2 response statuses, generating appropriate reason phrases for responses, and handling status-based logic in HTTP/2 servers and clients.",
      "description_length": 487,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "H2.Method",
      "library": "h2",
      "description": "This module defines types and operations for working with HTTP request methods, including standard methods like `GET`, `POST`, and `PUT`, as well as custom methods. It provides predicates to check method properties such as safety, cacheability, and idempotence, and includes functions for converting methods to and from strings. It is used to determine request semantics and guide server behavior in handling HTTP/2 requests according to RFC7231.",
      "description_length": 446,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "H2.IOVec",
      "library": "h2",
      "description": "This module provides operations for manipulating vectorized IO buffers, including measuring their length, shifting offsets, and pretty-printing contents. It works directly with lists of `IOVec` structures that represent memory-efficient buffers for HTTP/2 data transmission. Concrete use cases include managing payload fragments during stream processing and adjusting buffer positions when reading or writing framed HTTP/2 messages.",
      "description_length": 432,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2.Headers",
      "library": "h2",
      "description": "This module manages HTTP/2 header collections as ordered sequences of lowercase name-value pairs, enabling precise control over header transmission order, HPACK compression context, and case-insensitive lookups while preserving field multiplicity. It supports operations to add, remove, replace, and coalesce headers\u2014appending duplicate values with commas\u2014and provides string serialization for debugging and protocol transmission. Designed for tasks like message construction, proxying with header normalization, and ensuring pseudo-headers appear before regular fields in compliance with HTTP/2 standards.",
      "description_length": 606,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2.Client_connection",
      "library": "h2",
      "description": "This module manages HTTP/2 client connections, enabling request submission, response handling, and connection lifecycle control. It works with HTTP/2 streams, using types like `Request.t`, `Response.t`, and `Body.Reader.t` for message exchange, and `Bigstringaf.t` for efficient buffer handling. Concrete use cases include sending HTTP/2 requests with optional trailers, handling asynchronous responses, and managing connection-level events like pings and graceful shutdowns.",
      "description_length": 475,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2.Config",
      "library": "h2",
      "description": "This module defines configuration parameters for tuning HTTP/2 connection behavior, including buffer sizes, flow control window, and concurrency limits. It works with the `H2.Settings` type to translate configuration values into HTTP/2 SETTINGS frames. Concrete use cases include adjusting `read_buffer_size` to handle large frame payloads or limiting `max_concurrent_streams` to control resource usage in server environments.",
      "description_length": 426,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2.Reqd",
      "library": "h2",
      "description": "This module handles individual HTTP/2 request/response pairs, providing operations to inspect incoming requests, send responses, and manage server push. It works with `H2.Request.t`, `H2.Response.t`, and `H2.Body.Reader.t`/`H2.Body.Writer.t` for streaming data. Concrete use cases include responding to a client with a static string, streaming a large response body, sending trailers after streaming, and initiating server push for related resources before the main response is completed.",
      "description_length": 488,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2.Settings",
      "library": "h2",
      "description": "This module defines settings parameters for HTTP/2 connections, including values for header table size, stream concurrency, window size, and frame limits. It provides functions to serialize and deserialize these settings to and from base64 encoding as specified in RFC7540, enabling transmission during connection setup. Use this module to configure and exchange HTTP/2 protocol settings between endpoints.",
      "description_length": 406,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "H2.Error_code",
      "library": "h2",
      "description": "This module defines error codes used in HTTP/2 communication, including standard errors like protocol violations, flow control issues, and stream management problems. It provides conversions to human-readable strings and formatting functions for debugging or logging. These error codes are used to signal and handle failures during HTTP/2 connection and stream operations.",
      "description_length": 372,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "H2",
      "library": "h2",
      "description": "This module implements a complete HTTP/2 stack with support for both client and server operations, structured around streams, messages, and low-level frame handling. It provides core data types for requests, responses, headers, and bodies, along with utilities for managing vectorized IO, HPACK compression, and connection settings. Users can construct and process HTTP/2 messages with precise control over headers, manage streaming bodies with backpressure, configure connection parameters like flow control and concurrency, and handle errors and lifecycle events in both client and server contexts. Example workflows include serving large files via streaming responses, initiating client requests with custom headers and trailers, and tuning performance settings for high-throughput environments.",
      "description_length": 798,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 798,
    "min_description_length": 356,
    "avg_description_length": 467.375,
    "embedding_file_size_mb": 0.05852508544921875
  }
}