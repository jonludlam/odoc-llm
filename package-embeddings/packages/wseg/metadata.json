{
  "package": "wseg",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:30:44.455565",
  "modules": [
    {
      "module_path": "Wseg.Dict.Tree",
      "description": "Provides functions to construct, traverse, and transform labeled trees using the 'a node type, which represents nodes with a value and a list of children. Includes operations for depth-first search, node insertion, and subtree extraction. Used to model hierarchical data such as file systems, XML structures, and organizational charts.",
      "description_length": 335,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wseg.Dict",
      "description": "Constructs and manipulates labeled trees using a node type that holds a value and child list, supporting depth-first traversal, node insertion, and subtree extraction. Operations enable hierarchical data modeling, such as navigating file systems or parsing XML. Users can build complex tree structures, modify them dynamically, and extract specific branches for processing. Examples include generating organizational charts or transforming nested data formats.",
      "description_length": 460,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wseg.MMSEG",
      "description": "Processes a list of dictionary chunks using four distinct word segmentation rules to determine the optimal split. Applies rule1 for maximum matching, rule2 for longest average word length, rule3 for consistent word lengths, and rule4 for probabilistic chain scoring. Returns the best segmented chunk based on these criteria.",
      "description_length": 324,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "wseg",
      "description": "Provides functions to load character and word dictionaries, build indexes, and apply segmentation rules to identify words in a sentence. Operates on plain text files containing Chinese characters and words, and processes input strings to perform word segmentation. Used to demonstrate dictionary-based segmentation and rule application in natural language processing tasks.",
      "description_length": 373,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wseg",
      "description": "Combines tree-based hierarchical modeling with word segmentation logic, enabling structured data manipulation and text analysis. It supports tree operations like insertion, traversal, and extraction, as well as four distinct segmentation strategies for splitting text into words. Users can construct and navigate complex tree structures or apply rule-based segmentation to optimize word splits. Examples include building file system representations or refining natural language processing pipelines with tailored segmentation approaches.",
      "description_length": 537,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 537,
    "min_description_length": 324,
    "avg_description_length": 405.8,
    "embedding_file_size_mb": 0.018617630004882812
  }
}