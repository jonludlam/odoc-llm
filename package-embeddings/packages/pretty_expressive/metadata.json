{
  "package": "pretty_expressive",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T23:13:14.415192",
  "modules": [
    {
      "module_path": "Pretty_expressive.Printer.MakeCompat",
      "library": "pretty_expressive",
      "description": "This module provides functions and combinators for constructing and formatting structured documents (`doc`) with precise control over layout, alignment, and cost tracking. It supports operations like text insertion, line breaks, grouping, and horizontal/vertical concatenation, working with document types that represent formatted output as composable, manipulatable values. Its design emphasizes use cases requiring rigorous adherence to academic paper specifications, such as implementing custom pretty-printers for programming languages or formal notation systems where predictable layout behavior and debugging visibility are critical.",
      "description_length": 639,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pretty_expressive.Printer.Make",
      "library": "pretty_expressive",
      "description": "This module implements document combinators for constructing structured text layouts with operations like concatenation (`^^`), alignment (`align`), indentation control (`nest`, `reset`), newline handling (`break`, `hard_nl`), and cost-driven layout choices (`<|>`, `cost`). It works with a `doc` type representing formatting documents, parameterized by a cost module `C`, and supports rendering to strings or via customizable renderer functions with optional debugging. This enables use cases such as code formatting, pretty-printing nested data structures, and generating human-readable textual output that adapts layout based on contextual constraints.",
      "description_length": 655,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pretty_expressive.Printer",
      "library": "pretty_expressive",
      "description": "This module implements document combinators for building and rendering structured text layouts with precise control over formatting, including concatenation, alignment, indentation, and line breaks. It works with a `doc` type that represents formatted documents, parameterized by a cost model, and supports rendering to strings or custom output formats. It is used for tasks like code formatters, pretty-printers for nested data, and generating readable textual output that adapts to layout constraints.",
      "description_length": 503,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pretty_expressive.Signature",
      "library": "pretty_expressive",
      "description": "This module defines core types for building and composing pretty printers, including a `renderer` type for output functions and abstract interfaces for cost-aware and compatible printer implementations. It works with string-based rendering and higher-order printer combinators. Concrete use cases include defining custom pretty-printing layouts with precise formatting control and cost-based optimizations.",
      "description_length": 406,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pretty_expressive.Util",
      "library": "pretty_expressive",
      "description": "This module includes functions for string manipulation, such as trimming whitespace and joining lists of strings with delimiters. It also provides helpers for handling optional values, like converting `None` to a default string. These tools are useful when formatting output or preparing data for display in logs or user interfaces.",
      "description_length": 332,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pretty_expressive",
      "library": "pretty_expressive",
      "description": "This module provides document combinators for constructing and rendering structured text layouts with fine-grained formatting control, such as indentation, alignment, and line breaks. It centers around the `doc` type, which models formatted documents with cost-based layout decisions, and supports rendering to strings or custom output formats. It is used for implementing code formatters, pretty-printers for complex data structures, and generating human-readable output that adapts to space constraints.",
      "description_length": 505,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 655,
    "min_description_length": 332,
    "avg_description_length": 506.6666666666667,
    "embedding_file_size_mb": 0.08731269836425781
  }
}