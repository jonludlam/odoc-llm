{
  "package": "nbd",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 27,
  "creation_timestamp": "2025-08-15T12:21:04.661350",
  "modules": [
    {
      "module_path": "Nbd.Protocol.ExportName",
      "library": "nbd",
      "description": "Represents an export name in the NBD protocol, providing serialization and size calculation operations. Works with string values and Cstruct buffers for network transmission. Used to encode and decode export names during protocol handshake and communication.",
      "description_length": 258,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.Command",
      "library": "nbd",
      "description": "This module defines the set of commands used to interact with an NBD server after a connection is established. It includes operations for reading, writing, flushing, trimming, and disconnecting, along with serialization and deserialization functions for command exchange. Use cases include handling client requests, managing data transfer, and ensuring connection termination or cleanup.",
      "description_length": 387,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.Error",
      "library": "nbd",
      "description": "This module defines error codes used in NBD protocol responses, including standard errors like permission denial, I/O failure, and out-of-memory conditions. It provides functions to convert error values to and from S-expressions and to string representations. These operations support serialization, debugging, and error reporting in NBD client and server implementations.",
      "description_length": 372,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nbd.Protocol.DiskInfo",
      "library": "nbd",
      "description": "This module handles disk metadata in the NBD protocol, specifically parsing and serializing disk size and export flags. It works with `Cstruct.t` buffers for binary (un)marshaling and `Sexplib0.Sexp.t` for s-expression (de)serialization. Use it to convert between wire format and OCaml values when negotiating exports, such as during response construction or client-side parsing.",
      "description_length": 379,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.Request",
      "library": "nbd",
      "description": "This module defines the structure and serialization of I/O requests sent from a client to a server after the negotiation phase. It includes functions to convert between the request type and S-expressions, to serialize and deserialize requests to and from binary buffers, and to convert requests to string representations. The module works with the `t` record type, which includes command type, handle, offset, and length fields, and is used for handling NBD protocol I/O operations.",
      "description_length": 482,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.Announcement",
      "library": "nbd",
      "description": "This module defines the version types for the NBD protocol handshake, supporting `V1` and `V2` announcements. It provides serialization and deserialization functions for converting between these types and wire format or S-expressions. Use this module when handling initial server greetings during NBD connection setup.",
      "description_length": 318,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.PerExportFlag",
      "library": "nbd",
      "description": "This module defines a set of flags associated with a disk export in the NBD protocol, indicating capabilities such as read-only access, flush support, and I/O scheduling hints. It provides functions to convert these flags to and from S-expressions and to obtain string representations. These flags are used to communicate server capabilities to the client during protocol negotiation.",
      "description_length": 384,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nbd.Protocol.OptionResponseHeader",
      "library": "nbd",
      "description": "This module defines the header structure for option responses in the NBD protocol, including the request type, response code, and payload length. It provides functions to serialize and deserialize the header to and from Cstruct buffers, enabling efficient parsing and transmission over the wire. Use cases include handling negotiation steps during NBD client-server communication, such as responding to option requests with structured metadata.",
      "description_length": 444,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.Negotiate",
      "library": "nbd",
      "description": "This module handles the initial negotiation phase of the NBD protocol, specifically parsing and serializing the server's greeting message. It defines types for version 1 and version 2 of the negotiation response, including disk size, flags, and global flags, and provides functions to convert these types to and from S-expressions. The module also includes functions to serialize the negotiation data to a string or buffer, determine its size, and unmarshal it from a buffer given an announcement.",
      "description_length": 497,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.Reply",
      "library": "nbd",
      "description": "This module defines the structure of a server reply in the NBD protocol, including success/failure status and the associated request handle. It provides functions to serialize and deserialize replies to and from Cstruct buffers, as well as converting to strings and S-expressions. It is used to process out-of-order responses from NBD servers, handling both successful and error conditions.",
      "description_length": 390,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.ClientFlag",
      "library": "nbd",
      "description": "This module defines flags used during NBD protocol negotiation to indicate client capabilities, specifically supporting the fixed newstyle protocol and omission of zero-padding. It provides serialization to and from S-expressions and conversion to string representations. These flags are used to configure protocol behavior during client-server handshake.",
      "description_length": 355,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.GlobalFlag",
      "library": "nbd",
      "description": "This module defines flags used during NBD protocol negotiation to indicate server capabilities and communication preferences. It includes operations to convert flag values to and from S-expressions and to string representations. Concrete use cases include encoding and decoding protocol handshake messages with flags like `Fixed_newstyle` and `No_zeroes`.",
      "description_length": 355,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.Option",
      "library": "nbd",
      "description": "This module defines the set of options used during NBD protocol negotiation, including actions like selecting an export, aborting the connection, listing available exports, and initiating TLS. It provides functions to convert option values to and from S-expressions and to string representations. These options are used directly during the client-server handshake to specify client intentions and negotiate session parameters.",
      "description_length": 426,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Mirror.Make",
      "library": "nbd",
      "description": "This module implements block device mirroring by synchronizing reads and writes between two underlying block devices. It provides operations to connect and disconnect devices, read and write data with sector-aligned buffers, and retrieve device metadata, while ensuring mirrored writes to both primary and secondary storage. It handles errors specific to block device I/O and includes utilities for error reporting and progress tracking during mirroring setup.",
      "description_length": 460,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nbd.Protocol.NegotiateResponse",
      "library": "nbd",
      "description": "This module represents the client's initial response to the server's greeting in the NBD protocol handshake. It defines a type `t` as a list of client flags and includes functions for serializing and deserializing this response to and from Cstruct buffers. It is used to encode and decode the client's supported features during the protocol negotiation phase.",
      "description_length": 359,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.OptionResponse",
      "library": "nbd",
      "description": "This module defines the possible responses a server can send to a client's option request, including acknowledgment, rejection, and various error conditions. It works with the `t` variant type to represent distinct response codes and an `Unknown` case for unrecognized values. Concrete use cases include handling client requests during NBD protocol negotiation, such as rejecting unsupported options or acknowledging valid ones.",
      "description_length": 428,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.OptionRequestHeader",
      "library": "nbd",
      "description": "This module defines the header structure for client option requests in the NBD protocol. It includes operations to serialize and deserialize the header to and from Cstruct buffers, as well as S-expression conversions. The module is used to process and construct option request headers during NBD client-server communication.",
      "description_length": 324,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol.Server",
      "library": "nbd",
      "description": "This module defines the structure and operations for handling server responses during the NBD protocol's `List` option exchange. It includes serialization, deserialization, and size calculation for the `t` type, which represents an available disk name. It is used to process and transmit disk availability information from the server to the client.",
      "description_length": 348,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Mux.Make",
      "library": "nbd",
      "description": "Implements a client for multiplexing parallel requests over a single transport channel, pairing responses with pending requests by identifier. Works with request and response headers and bodies defined by the parameter module `R`, which includes transport logic. Useful for handling concurrent network requests to a server that processes and replies out-of-order, ensuring each response reaches the correct caller.",
      "description_length": 414,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.S",
      "library": "nbd",
      "description": "This module defines core abstractions for implementing network block device protocols, focusing on client-server interactions. It specifies interfaces for handling disk image transfers and remote storage access over a network. Concrete use cases include building virtualization tools that require emulating block devices or managing disk images remotely.",
      "description_length": 354,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nbd.Mux",
      "library": "nbd",
      "description": "Handles concurrent client requests over a single transport channel, pairing asynchronous responses with pending requests using unique identifiers. Works with request and response types defined by a parameter module, including header and body transport logic. Ideal for network protocols where a server processes requests out of order and replies must be routed back to the original caller.",
      "description_length": 389,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Protocol",
      "library": "nbd",
      "description": "This module implements the NBD protocol message formats and serialization logic for client-server communication. It handles protocol negotiation, command exchange, and error reporting with strict binary format conversions using Cstruct buffers and S-expressions. Concrete use cases include parsing server greetings, encoding client flags, transmitting I/O requests with offsets and handles, and handling structured option responses during connection setup.",
      "description_length": 456,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Client",
      "library": "nbd",
      "description": "This module implements client-side network block device (NBD) operations, enabling connections to remote disk exports, reading and writing data at specific sectors, and querying device metadata. It works with block device handles (`t`), sector addresses (`int64`), and memory buffers (`Cstruct.t list`), and includes functions for listing available exports and negotiating connections. Concrete use cases include virtual machine disk access over a network, remote disk imaging, and distributed storage systems where precise block-level access is required.",
      "description_length": 555,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Mirror",
      "library": "nbd",
      "description": "Handles bidirectional mirroring of network block devices, providing functions to synchronize and replicate disk state between a source and target device. Works with block device handles and network connections to stream updates in real time. Used for live migration and high-availability setups where disk state must be kept consistent across multiple nodes.",
      "description_length": 358,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Channel",
      "library": "nbd",
      "description": "This module manages network communication channels for NBD (Network Block Device) clients and servers, supporting both TLS-encrypted and cleartext connections. It provides functions to create, convert, and operate on generic channels that unify read, write, and close operations across transport types. Concrete use cases include establishing secure connections via TLS, handling raw data transfers, and abstracting communication for NBD server-client interactions.",
      "description_length": 465,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd.Server",
      "library": "nbd",
      "description": "This module implements an NBD (Network Block Device) server that allows remote clients to access a MirageOS block device over the network. It handles the NBD protocol handshake, TLS negotiation, and request processing for a provided block device implementation. The server can expose multiple named block devices, enforce read-only access, and ensures proper resource cleanup after client sessions end.",
      "description_length": 402,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nbd",
      "library": "nbd",
      "description": "This module implements the Network Block Device (NBD) protocol for remote disk access, providing client and server components to read, write, and manage block devices over a network. It supports TLS encryption, protocol negotiation, and multiplexing of concurrent requests, enabling secure and efficient remote storage operations. Concrete use cases include virtual machine disk streaming, remote disk imaging, and distributed storage systems requiring precise block-level access.",
      "description_length": 480,
      "index": 26,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 27,
    "meaningful_modules": 27,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 555,
    "min_description_length": 258,
    "avg_description_length": 401.44444444444446,
    "embedding_file_size_mb": 0.39159393310546875
  }
}