{
  "package": "goblint-cil",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 53,
  "creation_timestamp": "2025-08-15T15:16:25.538616",
  "modules": [
    {
      "module_path": "Dataslicing",
      "library": "goblint-cil.dataslicing",
      "description": "This module implements precise data slicing for CIL-based program representations, focusing on extracting relevant data flow subsets. It operates on CIL expressions, statements, and control flow graphs to identify dependencies and propagate values through program paths. Concrete use cases include optimizing static analysis precision by reducing irrelevant code paths and enabling targeted analysis of specific variables or expressions.",
      "description_length": 437,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Makecfg.MakeCFG",
      "library": "goblint-cil.makecfg",
      "description": "Performs control flow graph (CFG) transformations and analyses on CIL-processed code. It identifies instructions containing function calls, modifies basic blocks to end at calls, ensures global uniqueness of variable IDs, and provides a CIL feature for integrating CFG construction into analysis pipelines. Works directly with CIL instructions, files, and basic blocks to support static analysis tasks like call graph construction or interprocedural analysis.",
      "description_length": 459,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Makecfg",
      "library": "goblint-cil.makecfg",
      "description": "Performs control flow graph transformations on CIL code, splitting basic blocks at function calls and ensuring unique variable IDs. Works with CIL instructions, files, and basic blocks to support static analysis tasks such as call graph construction. Provides a CIL feature for integrating CFG construction into analysis pipelines.",
      "description_length": 331,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liveness.Usedef.VS",
      "library": "goblint-cil.liveness",
      "description": "This module implements a set structure for managing collections of CIL variable information, supporting operations like union, intersection, element queries, and subset comparisons. It provides functional traversal, transformation, and sequence conversion utilities (e.g., `map`, `filter`, `to_seq`) to enable efficient analysis of variable liveness in compiler optimizations such as dead code elimination and register allocation.",
      "description_length": 430,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liveness.LiveFlow",
      "library": "goblint-cil.liveness",
      "description": "This module tracks variable liveness across control flow in a program. It uses a set-based representation (`VS.t`) to model live variables at each statement and function exit, and provides operations to combine and propagate liveness information through statements and instructions. Key use cases include computing live variables at specific program points and merging liveness data from multiple control flow paths.",
      "description_length": 416,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liveness.Usedef",
      "library": "goblint-cil.liveness",
      "description": "This module tracks variable usage and definitions in CIL expressions and statements using a custom set structure. It provides functions to compute liveness information for expressions, instructions, and statement kinds, supporting compiler analyses like dead code elimination and register allocation. Key operations include `computeUseExp`, `computeUseDefInstr`, and `computeUseDefStmtKind`, which return variable sets indicating uses and definitions based on configurable policies such as `considerVariableUse` and `considerVariableDef`.",
      "description_length": 538,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liveness.L",
      "library": "goblint-cil.liveness",
      "description": "Performs liveness analysis on a list of CIL statements, determining which variables are live at each point in the code. Works directly with CIL statements and their associated control flow structures. Useful for optimizing dead code removal and improving static analysis precision in the Goblint framework.",
      "description_length": 306,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liveness",
      "library": "goblint-cil.liveness",
      "description": "This module performs liveness analysis by tracking variable definitions and uses, computing live variables at program points, and propagating liveness information through control flow graphs. It operates on CIL statements and instructions, enabling optimizations such as dead code elimination and register allocation while allowing selective exclusion of instructions or calls. Additional utilities analyze and print liveness data for CIL files, supporting debugging and verification of label-level liveness properties.",
      "description_length": 519,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ptranal",
      "library": "goblint-cil.pta",
      "description": "This module enables static analysis of pointers and types through operations that resolve expressions to definitions, map lvalues to abstract locations, and determine aliasing relationships via points-to sets. It works with CIL AST components such as variables, expressions, and function declarations, alongside abstract representations of memory locations. Its functionality supports tasks like alias analysis, points-to computation, and debugging of static analysis results in low-level code.",
      "description_length": 494,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zrapp",
      "library": "goblint-cil.zrapp",
      "description": "This module configures analysis behavior through mutable flags like `debug` and `deputyAttrs`, which control logging and attribute handling. It provides a CIL printer for formatting expressions and a `pp_exp` function for pretty-printing expressions within a function context. It is used to customize output and analysis phases during CIL processing, such as enabling temporary elimination or debugging information.",
      "description_length": 415,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syntacticsearch.QueryMapping",
      "library": "goblint-cil.syntacticsearch",
      "description": "This module processes syntactic queries on CIL-derived abstract syntax trees to resolve variable and function-related code patterns. It operates on CIL files and structured result lists containing identifiers, locations, and metadata, offering operations to filter, combine, and deduplicate matches based on syntactic context\u2014such as conditional function uses or variable declarations. Typical applications include analyzing C codebases for definition sites, usage occurrences, and function return points.",
      "description_length": 505,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syntacticsearch.ResultPrinter",
      "library": "goblint-cil.syntacticsearch",
      "description": "This module provides functions to process and display results from syntactic queries. It handles lists of result entries containing file names, locations, code snippets, and line numbers, with operations to determine column widths for formatting and to generate output strings. It is used to print structured query results in a readable text format, such as when displaying matches from a code search.",
      "description_length": 401,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syntacticsearch.FuncDatatype",
      "library": "goblint-cil.syntacticsearch",
      "description": "This module provides functions for searching and locating definitions and uses of variables, types, and functions within CIL-processed C code. It operates on CIL data structures such as `file`, `global`, `varinfo`, and `fundec`, and returns detailed location information including file names, line numbers, and context. Specific use cases include identifying where a function is defined, finding all uses of a variable in conditional or non-conditional contexts, and locating type variable occurrences across translation units.",
      "description_length": 527,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syntacticsearch.FuncFunction",
      "library": "goblint-cil.syntacticsearch",
      "description": "This module provides operations for analyzing and transforming C code structures through AST traversal, focusing on function definitions, variable usage tracking, and control-flow analysis. It works with CIL/GoblintCil AST elements like `fundec`, `varinfo`, and `global`, alongside string and location data, to enable tasks such as identifying function call sites, extracting variable dependencies in conditional contexts, and generating metadata for static analysis. Specific capabilities include list deduplication, return statement detection, and mapping functions over global declarations to support code transformation workflows.",
      "description_length": 634,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syntacticsearch.FuncVar",
      "library": "goblint-cil.syntacticsearch",
      "description": "This module enables syntactic analysis of C code by searching for variable and function declarations, definitions, and usages within a GoblintCil AST. It processes CIL files to extract detailed metadata about variable occurrences in expressions, conditionals, and function scopes, supporting tasks like static analysis, code navigation, and transformation through scoped searches and precise location tracking. Operations include identifying variable uses, locating global or intra-function definitions, and filtering matches by name, line, or context to return structured results with associated code positions and scopes.",
      "description_length": 623,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Syntacticsearch",
      "library": "goblint-cil.syntacticsearch",
      "description": "This module performs syntactic analysis and querying of C code using the GoblintCil AST, enabling precise searches for variables, functions, and types across files and scopes. It provides targeted operations for locating definitions, uses, and declarations with contextual filtering, returning structured results that include file names, line numbers, and code snippets. Concrete use cases include identifying where a specific function is defined, finding all conditional uses of a variable, and extracting variable dependencies within a function body.",
      "description_length": 552,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Dataflow.BackwardsDataFlow",
      "library": "goblint-cil",
      "description": "Implements backward data flow analysis over CIL control-flow graphs by propagating state from sink statements to predecessors. It operates on CIL statements and uses a user-defined module `T` to represent and merge data flow facts. This module is used to compute reaching definitions, liveness, or other reverse-direction analyses directly on CIL code after CFG construction.",
      "description_length": 375,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Pretty.MakeMapPrinter",
      "library": "goblint-cil",
      "description": "This module formats maps using customizable pretty-printing functions. It provides `docMap` for converting map entries into formatted documents with a specified separator and `d_map` for defining custom formatting of key-value pairs, including delimiters and layout. It works with any map type adhering to the `Map` module signature, allowing structured and readable output of key-value data structures.",
      "description_length": 403,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GoblintCil.Dataflow.ForwardsDataFlow",
      "library": "goblint-cil",
      "description": "Implements forward data flow analysis over CIL control-flow graphs by propagating abstract values through statements. It computes data flow information starting from initial statements, updating `T.stmtStartData` with the results. This module is used to analyze properties like variable liveness, constant propagation, or interval analysis in C programs.",
      "description_length": 354,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Pretty.MakeSetPrinter",
      "library": "goblint-cil",
      "description": "This module formats sets using customizable element printers. It provides `docSet` and `d_set` to convert sets into pretty-printed documents with specified separators and element formatting. Use it to display sets of CIL types like variables, types, or expressions in a readable layout.",
      "description_length": 286,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Errormsg",
      "library": "goblint-cil",
      "description": "This module offers utilities for diagnostic reporting, context-aware logging, and location tracking during parsing, with operations to control output behavior (e.g., verbosity, color) and halt execution on critical errors. It works with format strings for message construction, lexing buffers and source locations for parsing-related diagnostics, and maintains global state to track error counts and warning flags. These tools are particularly useful in static analysis or compiler development for managing error contexts, correlating diagnostics with source code positions, and handling input parsing with precise error attribution.",
      "description_length": 633,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Cabshelper",
      "library": "goblint-cil",
      "description": "Handles Cabs location tracking and manipulation, including location creation, joining, and string conversion. Provides utilities for inspecting Cabs declarations and statements, such as checking static, extern, inline, and typedef specifiers, and retrieving definition and statement locations. Supports processing string literals and digits for analysis purposes.",
      "description_length": 363,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Cil",
      "library": "goblint-cil",
      "description": "This module provides comprehensive utilities for manipulating C Intermediate Language (CIL) abstract syntax trees (ASTs), including operations for type inspection and construction, control flow graph (CFG) generation, serialization of CIL files, and transformation of code structures like functions, variables, and expressions. It operates on core CIL data structures such as `file`, `fundec`, `typ`, `stmt`, `exp`, and `lval`, enabling tasks like type unrolling, attribute management, constant folding, and safe lvalue manipulation. Specific use cases include static analysis tooling, compiler optimizations, code generation, and debugging workflows that require precise AST traversal, modification, or pretty-printing with architecture-dependent type handling.",
      "description_length": 762,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Machdepenv",
      "library": "goblint-cil",
      "description": "This module processes and interprets command-line arguments and configuration settings during CIL preprocessing. It provides functions to extract specific values\u2014strings, integers, booleans\u2014from a hash table based on keys and positional indices, with support for error handling and string normalization. Typical use cases include parsing model files, retrieving architecture-dependent parameters like `sizeof` or `alignof`, and handling command-line flags with typed values.",
      "description_length": 474,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Pretty",
      "library": "goblint-cil",
      "description": "This module enables the construction and manipulation of structured documents using layout primitives like indentation and line breaks, along with combinators for composing complex formats. It supports pretty-printing for lists, arrays, maps, sets, and numeric types, with customizable separators and output targets such as strings or channels. Typical use cases include generating human-readable representations of CIL data structures for debugging, documentation, or analysis, while configuration flags allow tuning performance and formatting behavior like automatic indentation or line counting.",
      "description_length": 598,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Cabs",
      "library": "goblint-cil",
      "description": "This module defines core data types and structures for representing C abstract syntax trees, including location information (`cabsloc`) and type specifiers (`typeSpecifier`) with detailed variants for primitive types, structs, unions, enums, and type queries. It supports parsing and manipulation of C code by providing precise type and expression representations. Concrete use cases include building and analyzing C AST nodes for static analysis tools or compilers.",
      "description_length": 466,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Cabsvisit",
      "library": "goblint-cil",
      "description": "This module enables traversal and transformation of CABS (C Abstract Syntax) structures by defining visitor functions for key elements like types, declarations, statements, and expressions. It operates on CIL's intermediate representation of C code, supporting precise modifications during analysis or transformation passes. Concrete use cases include rewriting specific expressions, collecting or altering variable references, and adjusting type specifiers during semantic analysis.",
      "description_length": 483,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Alpha",
      "library": "goblint-cil",
      "description": "This module manages name alpha conversion during CIL processing, primarily handling fresh name generation and registration to avoid collisions. It operates on hashtables mapping name prefixes to alpha table data, and uses undo lists to track and revert changes. Functions like `newAlphaName` generate unique names with numeric suffixes, while `registerAlphaName` ensures existing names are reserved, and `undoAlphaChanges` rolls back prior modifications.",
      "description_length": 454,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Dataflow",
      "library": "goblint-cil",
      "description": "Implements forward and backward data flow analysis over CIL control-flow graphs by propagating abstract values through statements. It works with CIL statements and user-defined data structures to track properties like variable liveness, constant propagation, and reaching definitions. Use to compute analysis results starting from initial or sink statements, leveraging the control-flow graph built via `Cfg.computeFileCFG`.",
      "description_length": 424,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Stats",
      "library": "goblint-cil",
      "description": "Tracks timing statistics for function executions using hierarchical timers. It provides functions to measure and accumulate execution times for labeled tasks, with support for repeated runs to average timing results. Useful for profiling performance-critical sections of code during analysis or compilation passes.",
      "description_length": 314,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GoblintCil.RmUnused",
      "library": "goblint-cil",
      "description": "Removes unused CIL globals from a file based on configurable root filters. It operates directly on CIL files and uses rootsFilter functions to determine which globals to retain. This module is used during analysis to eliminate dead code while preserving specified root symbols.",
      "description_length": 277,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Feature",
      "library": "goblint-cil",
      "description": "This module manages extensible features that can be registered, enabled, and executed on CIL files. It provides operations to define custom transformations with command-line options, track their state, and apply them to CIL file structures. Concrete use cases include adding analysis passes or code modifications triggered via command-line flags during CIL processing.",
      "description_length": 368,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Cillower",
      "library": "goblint-cil",
      "description": "Performs CIL lowering passes, including replacing enumeration constants with integer constants using the `lowerEnumVisitor` function. Operates directly on CIL abstract syntax trees. Useful for transforming high-level C constructs into lower-level representations suitable for analysis or compilation.",
      "description_length": 300,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Cilint",
      "library": "goblint-cil",
      "description": "This module provides arbitrary-precision integer values (`cilint`) with arithmetic, bitwise, and shift operations, including explicit truncation functions for signed and unsigned n-bit integers. It supports conversions between `cilint` and native types like `int`, `int64`, `big_int`, and strings, with defined overflow handling and truncation behaviors. These capabilities are critical for static analysis and compiler development, where precise modeling of integer semantics and overflow conditions is required.",
      "description_length": 513,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Formatcil",
      "library": "goblint-cil",
      "description": "Constructs and deconstructs CIL expressions, lvalues, types, instructions, and statements using format strings and argument substitutions. Works with CIL AST nodes like `exp`, `lval`, `typ`, `instr`, and `stmt`, allowing pattern-based creation and analysis of code fragments. Used to generate or parse CIL constructs from string templates with named placeholders, such as building expressions like `%e:x + %e:y` or analyzing existing nodes into their components.",
      "description_length": 462,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GoblintCil.Cprint",
      "library": "goblint-cil",
      "description": "This component offers utilities for precise textual formatting of C-based abstract syntax trees, managing indentation levels, line breaks, and buffer states during code generation. It operates on CIL intermediate representations, handling declarations, type definitions, structured data (structs/enums), and expression trees while supporting customizable output width and tabulation settings. Its functionality is particularly useful for compiler backends or analysis tools requiring readable C code emission, such as Goblint's internal representation dumps or debugging visualizations.",
      "description_length": 586,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Dominators",
      "library": "goblint-cil",
      "description": "This module computes dominator relationships and structures in control flow graphs. It provides functions to calculate immediate dominators, build dominator trees, check domination between statements, and identify natural loops. The primary data types are control flow statements and trees representing dominator hierarchies, used for analysis and traversal in compiler optimizations.",
      "description_length": 384,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Cfg",
      "library": "goblint-cil",
      "description": "Computes and manipulates control-flow graphs (CFGs) for C functions and files. It fills in predecessor and successor statement lists for each node in the CFG, assigns unique statement IDs, and provides functions to print CFGs in DOT format. Works directly with CIL-processed functions (`fundec`) and files (`file`), enabling analysis tasks like dataflow that depend on CFG structure.",
      "description_length": 383,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Frontc",
      "library": "goblint-cil",
      "description": "This module parses C source files into CIL or Cabs representations, handling preprocessing and error resets. It supports parsing entire files or standalone expressions, returning structured ASTs. Use it to analyze or transform C code programmatically, such as in static analysis tools or compiler extensions.",
      "description_length": 308,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Mergecil",
      "library": "goblint-cil",
      "description": "Merges multiple CIL files into a single file, resolving conflicts according to global flags. It operates on CIL file structures, handling inline function definitions and conflict resolution during the merge process. Useful for combining analysis results from separate translation units into a unified representation.",
      "description_length": 316,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Util",
      "library": "goblint-cil",
      "description": "This module includes optimized list operations like tail-recursive append and efficient mapping, functions for working with options such as extracting values or mapping over optional lists, and utilities for memoization and structural equality checks. It operates on standard data types including lists, options, and hash tables. Concrete use cases include transforming and filtering lists with custom logic, safely unwrapping options, caching function results, and comparing complex or cyclic structures for equality.",
      "description_length": 518,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GoblintCil.Inthash",
      "library": "goblint-cil",
      "description": "This module implements a hash table that maps integers to arbitrary values, supporting efficient insertion, lookup, and removal operations. It provides standard imperative hash table functions such as `add`, `find`, `remove`, and `mem`, along with higher-order functions like `iter` and `fold` for traversing key-value pairs. Concrete use cases include tracking integer-indexed data during CIL analysis, such as variable identifiers or statement labels, with support for memoization via the `memoize` function.",
      "description_length": 510,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Ciltools",
      "library": "goblint-cil",
      "description": "This module includes functions for analyzing and manipulating CIL expressions and types, such as checking if an expression is the integer one, determining volatility of types or variables, and converting between OCaml and CIL integer representations. It handles CIL expressions, types, and variable information, with utilities for type inspection, integer unboxing, and attribute checking across composite types. Concrete use cases include normalizing CIL code by ensuring unique variable and struct IDs, comparing expressions safely, and transforming integer literals during static analysis.",
      "description_length": 592,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Escape",
      "library": "goblint-cil",
      "description": "This module provides functions to escape characters and strings according to C lexical rules, specifically handling both standard and wide character types. It operates on `char`, `string`, `wchar`, and `wstring` data types, transforming them into their escaped string representations. Concrete use cases include generating valid C string literals from arbitrary input and correctly formatting wide characters and strings for C code generation or analysis.",
      "description_length": 455,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Whitetrack",
      "library": "goblint-cil",
      "description": "This module tracks and outputs whitespace during parsing, handling `cabsloc` location data to maintain proper formatting. It wraps lexers to capture whitespace, sets final whitespace, and prints strings or lists of strings to an output channel. Concrete use cases include preserving whitespace in C AST transformations and pretty-printing parsed code.",
      "description_length": 351,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Expcompare",
      "library": "goblint-cil",
      "description": "This module provides functions for comparing and normalizing CIL expressions, lvalues, and types, particularly for handling casts and type qualifiers during pointer arithmetic. It supports operations like stripping casts from expressions and offsets, comparing expressions and types with customizable attribute handling, and checking type volatility. Concrete use cases include canonicalizing expressions for equivalence checks, normalizing types during analysis, and simplifying expressions for constraint solving.",
      "description_length": 515,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Check",
      "library": "goblint-cil",
      "description": "This module performs semantic checks on CIL files and expressions to validate correctness. It works with CIL files, expressions, and variables, ensuring structural and contextual integrity. Use cases include verifying that a transformed CIL file adheres to expected semantics or validating standalone expressions in analysis passes.",
      "description_length": 332,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.GrowArray",
      "library": "goblint-cil",
      "description": "This module implements a dynamic array structure that supports indexed access, in-place modification, and iteration over elements. It handles arrays with potentially sparse initialization, tracking both allocated size and the highest initialized index, and allows for controlled growth and resetting. Use cases include managing variable-length collections of CIL constructs like expressions or statements, where elements are frequently added, updated, or traversed in order.",
      "description_length": 474,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Machdep",
      "library": "goblint-cil",
      "description": "This module defines a `mach` record type that specifies machine-dependent properties such as type sizes, alignment requirements, and platform-specific behaviors. It includes predefined configurations like `gcc`, `gcc32`, and `gcc64` for common compiler targets, and a mutable reference `theMachine` to select the active configuration. It is used to configure CIL's behavior for different architectures and compilers during analysis or transformation of C code.",
      "description_length": 460,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Trace",
      "library": "goblint-cil",
      "description": "This module provides functions for managing and outputting structured trace messages with subsystem filtering, indentation, and pretty-printing. It works with strings for subsystem identifiers and messages, and `Pretty.doc` for formatted output. Concrete use cases include debugging specific parts of CIL analysis by enabling traces for subsystems like \"analysis\" or \"simplify\", and visualizing nested operations through indented output.",
      "description_length": 437,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Cilutil",
      "library": "goblint-cil",
      "description": "This module provides functions for analyzing and transforming CIL (C Intermediate Language) code during static analysis. It includes operations for processing global variables, checking code properties, and managing analysis stages. Concrete use cases include slicing global variables for optimization, validating code correctness during transformations, and tracking analysis statistics.",
      "description_length": 388,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil.Patch",
      "library": "goblint-cil",
      "description": "Performs structural comparison between two Cabs ASTs, identifying and merging differences from the second file into the first. Works with Cabs AST structures to align and combine code elements like functions, declarations, and statements. Useful for integrating modified C source files while preserving existing analysis context.",
      "description_length": 329,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GoblintCil",
      "library": "goblint-cil",
      "description": "This module provides utilities for manipulating CIL abstract syntax trees, control flow graphs, and type systems, with operations for binary serialization, type introspection, constant folding, and code generation. It works with CIL data structures like `file`, `fundec`, `typ`, `exp`, and `stmt`, enabling tasks such as static analysis, compiler optimizations, and semantic transformations. Specific use cases include analyzing C codebases, building analysis tools, optimizing intermediate representations, and handling architecture-dependent type semantics for precise program modeling.",
      "description_length": 588,
      "index": 52,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 93,
    "meaningful_modules": 53,
    "filtered_empty_modules": 40,
    "retention_rate": 0.5698924731182796
  },
  "statistics": {
    "max_description_length": 762,
    "min_description_length": 277,
    "avg_description_length": 449.47169811320754,
    "embedding_file_size_mb": 0.7684011459350586
  }
}