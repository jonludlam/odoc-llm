{
  "package": "melange-json-native",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:29:51.972693",
  "modules": [
    {
      "module_path": "Melange_json.Of_json",
      "description": "Converts JSON values to specific OCaml types such as strings, booleans, integers, and lists, handling optional and nested structures. Operates on Yojson.Basic.t values, extracting and validating data with type-specific parsing functions. Used to parse JSON responses from APIs into structured OCaml data for further processing.",
      "description_length": 327,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Melange_json.To_json",
      "description": "Converts values to JSON-like variants with explicit types, including strings, booleans, integers, floats, units, lists, arrays, options, and results. Handles conversion of custom types through provided mapping functions. Used to serialize structured data into a format compatible with JSON serialization libraries.",
      "description_length": 314,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Melange_json.Primitives",
      "description": "Converts JSON values to and from primitive types such as strings, booleans, floats, integers, and options, supporting lists, arrays, and results. Processes JSON structures using type-specific parsing and serialization functions, including handling of null values and nested data. Used to transform JSON data from external sources into OCaml values and vice versa for API interactions or configuration parsing.",
      "description_length": 409,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "melange-json-native",
      "description": "Provides decoder functions that transform JSON values into specific types, including array, dict, and nested structures. Works with Js.Json.t and generates type-safe values from JSON input. Decodes complex structures like int arrays, nested arrays, and dictionaries of arrays by composing basic decoders.",
      "description_length": 304,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Melange_json",
      "description": "Converts JSON data to and from OCaml types, supporting primitives, lists, options, and nested structures. Handles both parsing and serialization with type-safe operations on Yojson.Basic.t values and custom type mappings. Enables structured data transformation for API interactions, configuration files, and data exchange. Examples include extracting a boolean from a JSON object or serializing a list of results into a JSON array.",
      "description_length": 431,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 5,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8333333333333334
  },
  "statistics": {
    "max_description_length": 431,
    "min_description_length": 304,
    "avg_description_length": 357.0,
    "embedding_file_size_mb": 0.018602371215820312
  }
}