{
  "package": "unix-time",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:30:39.269342",
  "modules": [
    {
      "module_path": "Time.Timespec",
      "description": "type t = { sec : int; nsec : int } Provides operations to create, compare, and manipulate time values represented as seconds and nanoseconds. Works with the t type to perform arithmetic and conversions between time intervals. Used to track durations in high-resolution timing and synchronize events with precise delays.",
      "description_length": 319,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Time_unix.Timespec",
      "description": "Provides functions to work with time specifications, including conversion and manipulation of time values represented as a pair of seconds and nanoseconds. Operates on data types such as `Time.Timespec.t` and C-compatible type representations. Used to handle precise time measurements in system-level programming and time-based computations.",
      "description_length": 341,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "unix-time",
      "description": "Converts between OCaml's date and time types and Unix timestamps, supports timezone-aware time calculations, and provides precise time interval arithmetic. Works with Core's Time.t and Duration.t, as well as native OCaml Date and Time modules. Enables accurate logging of events with timezone-specific timestamps and calculation of elapsed times in distributed systems.",
      "description_length": 369,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Time",
      "description": "Encapsulates time as a structured type with seconds and nanoseconds, enabling precise duration calculations and comparisons. Supports arithmetic operations, conversions, and synchronization tasks. Users can add or subtract intervals, check equality, and manage timing with high accuracy. Examples include measuring elapsed time, scheduling events, and handling timestamp differences.",
      "description_length": 383,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Time_unix",
      "description": "Converts and manipulates time values as seconds and nanoseconds pairs using types like `Time.Timespec.t`, enabling precise control over system-level time operations. Supports arithmetic, comparison, and conversion between time representations for tasks like timestamp tracking and interval calculations. Examples include adding durations to timestamps or converting between different time formats. Provides low-level access to time data suitable for high-precision scheduling and logging.",
      "description_length": 488,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 488,
    "min_description_length": 319,
    "avg_description_length": 380.0,
    "embedding_file_size_mb": 0.0186004638671875
  }
}