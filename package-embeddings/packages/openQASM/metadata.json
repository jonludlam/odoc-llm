{
  "package": "openQASM",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:04:07.175015",
  "modules": [
    {
      "module_path": "OpenQASM.AST",
      "library": "openQASM",
      "description": "This module defines the abstract syntax tree for a quantum assembly language, including identifiers, expressions with binary and unary operations, quantum and classical register declarations, and operations like gates, measurements, and barriers. It supports concrete use cases such as parsing quantum circuits, representing quantum instructions for execution, and generating code for quantum processors. The structure facilitates building and manipulating quantum programs with precise syntactic elements.",
      "description_length": 506,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OpenQASM",
      "library": "openQASM",
      "description": "This module parses quantum assembly language source code into a structured abstract syntax tree and handles error reporting during parsing. It processes input from lex buffers or strings to produce program representations used in quantum circuit compilers and hardware execution analysis. The AST module defines core data types like identifiers, expressions, registers, and quantum operations, enabling precise manipulation of quantum programs. Examples include parsing gate sequences, analyzing measurement operations, and generating executable code for quantum processors.",
      "description_length": 574,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 574,
    "min_description_length": 506,
    "avg_description_length": 540.0,
    "embedding_file_size_mb": 0.007685661315917969
  }
}