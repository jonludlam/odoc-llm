{
  "package": "swhid_core",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:09:41.289794",
  "modules": [
    {
      "module_path": "Swhid_core.Object.Scheme_version",
      "library": "swhid_core",
      "description": "This module defines operations to create, convert, and display scheme versions used in Software Heritage identifiers. It supports parsing scheme versions from strings or integers, converting them to integers, and formatting them for output. A default scheme version is provided for use in identifier construction when no explicit version is specified.",
      "description_length": 351,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Object.Hash",
      "library": "swhid_core",
      "description": "This module defines a type `t` for representing cryptographic hashes in a swhid, specifically as 40-character hexadecimal strings. It provides functions to parse, compare, and convert these hashes, ensuring validity according to the swhid specification. Use cases include validating and formatting hash components when constructing or processing swhids.",
      "description_length": 353,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Compute.Make",
      "library": "swhid_core",
      "description": "This module computes swhids for content, directories, releases, revisions, and snapshots using SHA1 hashing and OS-level file operations. It processes directory entries, version control metadata, and time-stamped events to generate identifiers for software heritage objects. Concrete use cases include calculating identifiers for version-controlled files, directory trees, Git commits, and repository snapshots.",
      "description_length": 411,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Object.Kind",
      "library": "swhid_core",
      "description": "This module defines and manipulates the specific kinds of software artifacts that a swhid can reference, such as content, directories, revisions, releases, and snapshots. It provides operations to convert between string representations and typed values, compare kinds, and print or serialize them. Concrete use cases include parsing swhid kind strings from input, validating artifact types, and determining equality or ordering of swhid components during identifier construction or comparison.",
      "description_length": 493,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Object.Qualifier",
      "library": "swhid_core",
      "description": "This module defines and manipulates qualifier values that extend a core software heritage identifier with additional context such as anchors, origins, paths, visits, and fragments. It provides parsing from strings, pretty-printing, and string conversion operations for these qualifiers. Concrete use cases include constructing and validating extended SWHIDs that reference specific versions, locations, or segments within software artifacts.",
      "description_length": 441,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Swhid_core.Object.Core_identifier",
      "library": "swhid_core",
      "description": "This module defines a type `t` representing the core component of a Software Heritage identifier, composed of a scheme version, kind, and hash. It provides functions to construct, parse, compare, and convert core identifiers, along with accessors to retrieve their components. Use cases include validating and manipulating swhids when interacting with Software Heritage's archive or API.",
      "description_length": 387,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Compute",
      "library": "swhid_core",
      "description": "This module computes SWHIDs for software artifacts, handling directories and files. It defines operations to generate identifiers based on object type, using `File` and `Dir` to distinguish between entries. Concrete use cases include generating persistent identifiers for version-controlled files and directories in software repositories.",
      "description_length": 338,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Object",
      "library": "swhid_core",
      "description": "This module provides functions to construct, parse, and manipulate Software Heritage persistent identifiers (SWHIDs), including operations to create identifiers from components, validate their structure, and extract core and qualifier parts. It works with structured types for scheme versions, artifact kinds, cryptographic hashes, core identifiers, and qualifier extensions, all representing parts of a SWHID. Concrete use cases include validating SWHID strings from user input, building identifiers for content or revisions in the archive, and extracting hash or qualifier data when interacting with Software Heritage's API.",
      "description_length": 626,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core",
      "library": "swhid_core",
      "description": "This module computes SWHIDs for software artifacts and provides operations to construct, parse, and manipulate them. It works with structured types representing scheme versions, artifact kinds, cryptographic hashes, and qualifiers, supporting concrete use cases such as generating persistent identifiers for files and directories in version-controlled repositories and validating or extracting SWHID components when interacting with the Software Heritage archive.",
      "description_length": 463,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 626,
    "min_description_length": 338,
    "avg_description_length": 429.22222222222223,
    "embedding_file_size_mb": 0.1307373046875
  }
}