{
  "package": "swhid_core",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:06:56.326110",
  "modules": [
    {
      "module_path": "Swhid_core.Object.Scheme_version",
      "library": "swhid_core",
      "description": "This module defines and manipulates scheme versions used in Software Heritage identifiers. It provides functions to convert between string and integer representations, validate versions, and format them for output. Use cases include parsing version strings from swhids and ensuring correct version encoding in identifier construction.",
      "description_length": 334,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Compute.Make",
      "library": "swhid_core",
      "description": "This module computes swhids for content, directories, releases, revisions, and snapshots using a SHA1 module and OS module. It supports operations like hashing raw content, building identifiers from directory entries, and constructing release or revision identifiers with metadata. Concrete use cases include generating swhids for version-controlled files, directories with entries, and version control system snapshots.",
      "description_length": 420,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Object.Hash",
      "library": "swhid_core",
      "description": "This module defines a type `t` representing a hash in a Software Heritage identifier and provides operations to compare, check equality, convert to and from strings, and format hashes. It works with hexadecimal strings of exactly 40 characters, ensuring validity according to the swhid specification. Use cases include parsing and validating swhid hash components, comparing hashes for ordering, and serializing hashes for storage or display.",
      "description_length": 442,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Swhid_core.Object.Core_identifier",
      "library": "swhid_core",
      "description": "This module defines a type `t` representing the core component of a Software Heritage identifier, composed of a scheme version, kind, and hash. It provides functions to construct, parse, compare, and convert core identifiers, along with accessors to retrieve their components. Use cases include validating swhid core strings, building identifiers programmatically, and extracting scheme, kind, or hash values for further processing.",
      "description_length": 432,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Object.Kind",
      "library": "swhid_core",
      "description": "This module defines and manipulates the different kinds of software artifacts that a swhid can reference, such as content, directories, revisions, releases, and snapshots. It provides operations for converting between string representations and the corresponding type variants, comparing and checking equality between artifact kinds. Concrete use cases include parsing artifact types from strings, serializing them to strings, and printing them for debugging or logging.",
      "description_length": 470,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Swhid_core.Object.Qualifier",
      "library": "swhid_core",
      "description": "This module defines and manipulates qualifier types that extend a core software heritage identifier with additional context such as origin, path, or fragment details. It provides functions to parse qualifiers from strings, convert them to strings, and format them for output. Concrete use cases include constructing and validating extended identifiers for software artifacts with specific locations or versions.",
      "description_length": 411,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Swhid_core.Object",
      "library": "swhid_core",
      "description": "This module structures and manipulates Software Heritage persistent identifiers (SWHIDs), combining core identifiers with optional qualifiers to form complete swhids. It supports creating, parsing, and accessing components such as scheme version, artifact kind, hash, and qualifiers, with operations for validation, conversion, and comparison. For example, it can construct a swhid from a version, kind, hash, and origin qualifier, or parse and validate a full swhid string into its components. Submodules handle specific aspects like hash validation, core identifier construction, and qualifier manipulation, enabling precise control over identifier composition and interpretation.",
      "description_length": 682,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Compute",
      "library": "swhid_core",
      "description": "This module computes SWHIDs for software artifacts, handling directories and files by generating identifiers based on object type. It includes submodules that extend this functionality to content, releases, revisions, and snapshots, using SHA1 and OS modules for hashing and directory traversal. Main data types include `File` and `Dir` for distinguishing object kinds, with operations to hash raw content, build directory-based identifiers, and construct version control identifiers with metadata. Examples include generating persistent identifiers for files in a repository or building snapshot SWHIDs from directory entries.",
      "description_length": 627,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core",
      "library": "swhid_core",
      "description": "This module handles the creation, parsing, and computation of Software Heritage persistent identifiers (SWHIDs) for various software artifacts. It defines core data types like SWHID components (version, kind, hash, qualifiers) and artifact types such as `File` and `Dir`, supporting operations including validation, conversion, directory traversal, and SHA1-based hashing. Users can construct identifiers for files, directories, releases, and snapshots, or parse and manipulate existing SWHIDs. Example uses include generating a SWHID for a source file based on its content hash or building a snapshot identifier from a directory structure.",
      "description_length": 640,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 682,
    "min_description_length": 334,
    "avg_description_length": 495.3333333333333,
    "embedding_file_size_mb": 0.033141136169433594
  }
}