{
  "package": "swhid_core",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-06-18T16:32:03.051202",
  "modules": [
    {
      "module_path": "Swhid_core.Object.Scheme_version",
      "description": "Converts between string and integer representations of scheme versions, validating inputs and returning errors on failure. Works with an abstract type `t` that encapsulates scheme version data. Provides a pretty-printer for output and a default value for initialization.",
      "description_length": 270,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Object.Kind",
      "description": "Provides comparison and equality checks for software artifact kinds, conversion from and to strings, and pretty-printing. Works with a type representing specific artifact categories like \"cnt\", \"dir\", \"rel\", \"rev\", and \"snp\". Used to validate and serialize artifact types in a software heritage system.",
      "description_length": 302,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Object.Hash",
      "description": "Provides functions to compare, check equality, and convert between hash values and their string representations. Works with the `t` type, which represents a 40-character hexadecimal hash. Used to validate and format hash strings for use in software heritage identifiers.",
      "description_length": 270,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Object.Core_identifier",
      "description": "Provides functions to create, compare, and inspect core identifiers composed of a scheme version, kind, and hash. Works with types Scheme_version.t, Kind.t, and Hash.t to construct and validate identifiers from strings. Used to parse and manipulate SWHID core components in versioned content tracking systems.",
      "description_length": 309,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Object.Qualifier",
      "description": "Converts strings to validated qualifier values, with error handling, and provides string serialization and pretty printing. Works with an opaque type representing qualifiers. Used to parse and display qualifier values in structured data processing.",
      "description_length": 248,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Compute.Make",
      "description": "Computes SHA1 hashes of strings and returns the results as hexadecimal strings. Operates on raw string inputs and produces fixed-length hexadecimal outputs. Used for generating unique identifiers or checksums for text data.",
      "description_length": 223,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swhid_core.Compute",
      "description": "Generates unique identifiers and checksums by computing SHA1 hashes from string inputs, producing fixed-length hexadecimal outputs. Supports operations on raw text to create compact, deterministic representations. Can be used to validate data integrity or generate stable identifiers for textual content. Processes inputs directly without additional abstractions, focusing on hash generation and conversion.",
      "description_length": 407,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Swhid_core.Object",
      "description": "Encapsulates the structure of Software Heritage persistent identifiers by combining scheme versions, artifact kinds, hashes, and qualifiers into core identifiers. It supports parsing, validation, and conversion between string and typed representations for each component, enabling precise manipulation of SWHID elements. Operations include comparing identifiers, serializing components, and handling errors during input validation. Examples include constructing a core identifier from a string, converting a hash to its hexadecimal form, and validating a qualifier's format.",
      "description_length": 574,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "swhid_core",
      "description": "Handles parsing, serialization, and validation of Software Heritage identifiers, supporting operations like version extraction and namespace resolution. Works with custom data types representing swhid components, including revision, directory, and content identifiers. Used to process and verify swhids in archival workflows and data integrity checks.",
      "description_length": 351,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Swhid_core",
      "description": "Computes SHA1 hashes from strings to generate compact, deterministic identifiers and validates structured Software Heritage identifiers by combining scheme versions, artifact kinds, hashes, and qualifiers. Provides direct hash generation, conversion between string and typed representations, and error handling during parsing. Supports tasks like constructing identifiers from raw inputs, converting hash values to hexadecimal, and verifying qualifier formats. Enables data integrity checks and precise manipulation of SWHID components.",
      "description_length": 536,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 574,
    "min_description_length": 223,
    "avg_description_length": 349.0,
    "embedding_file_size_mb": 0.0367431640625
  }
}