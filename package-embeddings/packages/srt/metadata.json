{
  "package": "srt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 18,
  "creation_timestamp": "2025-08-15T12:13:47.139180",
  "modules": [
    {
      "module_path": "Srt_constants.Def",
      "library": "srt.constants",
      "description": "This module defines constants and types for socket status tracking, transport configuration, and event flag mapping, including socket statuses, transport modes, poll flags (`srt_epoll_out`, `srt_epoll_err`), and error codes. It provides functions to convert polymorphic event flags (e.g., `Read`, `Write`) into system-specific `int64` constants, enabling precise monitoring of network communication events like output readiness and error conditions. These constructs are critical for configuring socket operations, handling asynchronous I/O, and implementing reliable transport protocols.",
      "description_length": 588,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_constants",
      "library": "srt.constants",
      "description": "This module defines constants and types for socket status tracking, transport configuration, and event flag mapping. It includes socket statuses, transport modes, poll flags like `srt_epoll_out` and `srt_epoll_err`, and error codes, along with functions to convert polymorphic event flags (e.g., `Read`, `Write`) into system-specific `int64` values. These are used to configure socket operations, monitor network events, and handle asynchronous I/O in reliable transport protocols.",
      "description_length": 481,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_types.Def.PollEvent",
      "library": "srt.types",
      "description": "This module defines a C-compatible structure for representing poll events, primarily used in systems programming for monitoring file descriptors. It includes fields for the file descriptor (`fd`) and the associated events (`events`), both stored as integers. This structure is useful when interfacing with low-level event loops or system calls that require tracking I/O events on file descriptors.",
      "description_length": 397,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_types.Def.CBytePerfMon",
      "library": "srt.types",
      "description": "This module provides field accessors for a Ctypes structure that tracks network protocol performance metrics, including packet and byte counts (sent, received, retransmitted, dropped, undecryptable), loss statistics, ACK/NAK rates, and timing measurements (durations, timestamps). The structure also includes configuration parameters like buffer sizes, bandwidth, latency, and congestion control values, all represented as numeric fields (integers, floats). It is designed for low-level monitoring and optimization of network transport protocols, enabling precise measurement of transmission reliability, throughput, and delay for systems like SRT.",
      "description_length": 648,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_types.Def",
      "library": "srt.types",
      "description": "This module defines core data types and structures for systems programming, including a `socket` type representing file descriptors and C-compatible structures for event polling and network performance monitoring. It provides direct mappings to low-level system interfaces through `PollEvent` for tracking I/O events on file descriptors and `CBytePerfMon` for accessing detailed network transmission metrics. Use cases include implementing custom network protocols, optimizing transport reliability, and integrating with system-level event loops for real-time I/O monitoring.",
      "description_length": 575,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_types.Constants",
      "library": "srt.types",
      "description": "This module encapsulates low-level definitions for SRT socket lifecycle management, including state tracking, transmission modes, and error categorization. It operates on enumerated types mapped to C constants, with specialized support for bitmask operations on polling flags (read, write, error) via integer conversions and C-compatible type representations. These constructs enable precise control over socket status monitoring, asynchronous event handling, and error propagation in high-performance network communication scenarios.",
      "description_length": 534,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_types",
      "library": "srt.types",
      "description": "This module provides low-level type definitions and constants for managing socket states, transmission parameters, and error handling in high-performance network communication. It works with C-compatible enumerated types, integers, and bitmask operations to track socket options, polling flags, and system-level I/O events like `srt_epoll_out`. These facilities are used to implement custom network protocols, integrate with event loops, and monitor performance metrics through file descriptor-based polling mechanisms.",
      "description_length": 519,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Srt_stubs_locked.Def",
      "library": "srt_stubs_locked",
      "description": "Implements low-level memory copy operations between bytes, strings, and C pointers. Provides `memcpy` for copying bytes to a C pointer and `memcpy_str` for copying a string to a C pointer, both with a specified length. Useful for interfacing with C libraries that require direct memory manipulation.",
      "description_length": 299,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Srt_stubs_locked",
      "library": "srt_stubs_locked",
      "description": "Implements low-level memory copy operations between bytes, strings, and C pointers. Provides `memcpy` to copy bytes to a C pointer and `memcpy_str` to copy a string to a C pointer, both requiring a specified length. Designed for direct memory manipulation when interfacing with C libraries that expect raw pointer access.",
      "description_length": 321,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_stubs.Def.CBytePerfMon",
      "library": "srt.stubs",
      "description": "This module provides operations to track and analyze network transmission metrics such as packet and byte counts, loss rates, retransmissions, and throughput. It works with a Ctypes-mapped structure containing integer and floating-point fields (uint64, int64, float) to represent counters, sizes, timing data, and bandwidth measurements. These bindings enable low-level monitoring of SRT protocol performance for applications requiring real-time network diagnostics, congestion control, or quality-of-service analysis.",
      "description_length": 518,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_stubs.Def.PollEvent",
      "library": "srt.stubs",
      "description": "This module defines a C-compatible structure for representing poll events, primarily used in conjunction with system-level event handling APIs like `poll`. It includes fields for a file descriptor (`fd`) and the associated events (`events`), both stored as integers. Concrete use cases include integrating with C libraries that require `poll` event structures, such as network servers monitoring multiple sockets.",
      "description_length": 413,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_stubs.ListenCallback",
      "library": "srt.stubs",
      "description": "This module defines a callback interface for handling incoming connection events on a socket listener. It provides functions to wrap and invoke a callback function that processes connection attempts, including retrieving the socket address and data from the connecting client. Concrete use cases include implementing custom connection acceptance logic in network servers using SRT sockets.",
      "description_length": 389,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_stubs.Def",
      "library": "srt.stubs",
      "description": "This module provides low-level operations for SRT socket management, including connection setup, data transmission, and configuration, alongside epoll-based event handling for efficient I/O. It operates on C-compatible structures like file descriptors, socket addresses, and performance counters, enabling secure network communication, real-time monitoring, and resource management in distributed systems.",
      "description_length": 405,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_stubs",
      "library": "srt.stubs",
      "description": "This module implements low-level SRT socket operations and event handling, working directly with C-compatible types such as file descriptors, socket addresses, and performance counters. It includes functions for connection setup, data transmission, socket configuration, and epoll-based I/O monitoring, along with a callback system for handling incoming connections. Use cases include building high-performance network servers that require fine-grained control over SRT socket behavior and real-time event processing.",
      "description_length": 517,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt.Log",
      "library": "srt",
      "description": "Handles logging within the SRT library, providing functions to set log levels and register custom log handlers. It works with structured log messages containing severity levels, source locations, and descriptive text. Used to filter and process diagnostic output from SRT operations, such as connection status or internal errors.",
      "description_length": 329,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt.Stats",
      "library": "srt",
      "description": "This module provides functions to retrieve detailed transmission statistics for an SRT socket, including packet counts, bandwidth usage, latency, and buffer states. It works directly with the `Srt.socket` type and returns structured data containing metrics like sent and received bytes, packet loss, retransmissions, and congestion window sizes. Concrete use cases include monitoring real-time streaming performance, diagnosing network issues, and optimizing bandwidth utilization in live video transmission scenarios.",
      "description_length": 518,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Srt.Poll",
      "library": "srt",
      "description": "This module manages polling of SRT sockets for read, write, or error events using a polling set. It allows adding, removing, and updating sockets in the poll set with specified event flags, and waits for events to occur with a configurable timeout. Concrete use cases include monitoring multiple SRT sockets for readiness to send or receive data, and handling asynchronous network I/O in event-driven applications.",
      "description_length": 414,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Srt",
      "library": "srt",
      "description": "This module configures and manages UDP-based streaming sockets with support for encryption, congestion control, and low-latency transport. It provides primitives for socket lifecycle management (binding, connecting, accepting), data transmission (blocking/non-blocking I/O), and runtime tuning of parameters like buffer sizes or QoS policies, working with socket state enums, transport configuration records, and error codes. Designed for real-time media streaming and distributed systems requiring reliable datagram delivery with adaptive network conditions handling.",
      "description_length": 568,
      "index": 17,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 18,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 648,
    "min_description_length": 299,
    "avg_description_length": 468.5,
    "embedding_file_size_mb": 0.2612028121948242
  }
}