{
  "package": "srt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 17,
  "creation_timestamp": "2025-07-15T23:11:20.762823",
  "modules": [
    {
      "module_path": "Srt_stubs_locked.Def",
      "library": "srt_stubs_locked",
      "description": "Implements low-level memory copy operations between bytes, strings, and C pointers. Provides `memcpy` for copying from bytes to a C pointer and `memcpy_str` for copying from a C pointer to a string. Useful in scenarios requiring direct memory manipulation, such as interfacing with C libraries or handling binary data buffers.",
      "description_length": 326,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_stubs_locked",
      "library": "srt_stubs_locked",
      "description": "This module enables direct memory manipulation by providing low-level copy operations between bytes, strings, and C pointers. It includes `memcpy` for copying data from bytes to a C pointer and `memcpy_str` for copying data from a C pointer to a string. These operations are essential for interfacing with C libraries and handling binary data buffers. For example, `memcpy` can be used to send data to a C function expecting a raw pointer, while `memcpy_str` can extract string data from a C buffer into OCaml.",
      "description_length": 510,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Srt_constants.Def",
      "library": "srt.constants",
      "description": "This module provides constants and types for managing SRT socket states, configurations, and low-level event handling, including socket statuses, transport modes, error codes, and polling flags. It supports operations like interpreting connection states, configuring socket options, and translating event flags between OCaml and C-compatible representations. These definitions are essential for monitoring SRT connections, handling asynchronous I/O events, and integrating with C-based networking libraries that rely on bitmask flags for socket polling.",
      "description_length": 553,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_constants",
      "library": "srt.constants",
      "description": "This module defines core constants and types for working with SRT sockets, including connection states, transport modes, error codes, and polling flags. It enables interpreting socket status, configuring transport behavior, and translating event flags between OCaml and C representations. These definitions support monitoring SRT connections, handling asynchronous I/O events, and integrating with low-level networking libraries. For example, you can check if a socket is connected, set polling flags for read readiness, or map SRT error codes to descriptive messages.",
      "description_length": 568,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_stubs.Def.PollEvent",
      "library": "srt.stubs",
      "description": "This module defines a C-compatible structure for representing poll events, primarily used in system-level programming for monitoring file descriptors. It includes fields for the file descriptor (`fd`) and the associated events (`events`), both stored as integers. This structure is useful when integrating with C libraries that require event polling, such as network servers handling multiple connections.",
      "description_length": 405,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_stubs.Def.CBytePerfMon",
      "library": "srt.stubs",
      "description": "This module provides a Ctypes-based structure for capturing low-level network performance metrics, including packet and byte counts (sent, received, retransmitted, dropped), bandwidth utilization, latency (RTT), buffer sizes, and congestion control parameters. It works with precise integer and floating-point types (`uint64`, `int64`, `float`) mapped to C-compatible memory layouts, enabling direct interoperation with system-level networking APIs. The structure is designed for monitoring real-time communication protocols, analyzing transmission efficiency, and measuring network behavior under varying conditions like packet loss or congestion.",
      "description_length": 648,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_stubs.Def",
      "library": "srt.stubs",
      "description": "This module manages low-level networking operations for SRT sockets, handling connection setup, data transfer, socket state tracking, and performance monitoring. It works directly with file descriptors, socket addresses, memory buffers, and epoll instances, enabling precise control over transport-layer behavior and integration with native libraries via FFI. The module includes a structure for tracking poll events on file descriptors, essential for managing multiple network connections, and a metrics structure that captures detailed transmission statistics such as packet counts, bandwidth, latency, and buffer usage. These features support building high-performance, real-time network applications with cross-language interoperability and fine-grained visibility into communication efficiency and system-level behavior.",
      "description_length": 825,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Srt_stubs.ListenCallback",
      "library": "srt.stubs",
      "description": "This module defines a callback interface for handling incoming connection attempts on a listening socket. It provides functions to wrap and manage C-compatible callback handlers that process connection events with parameters like file descriptors, socket addresses, and user data. Use this module to implement custom connection acceptance logic in SRT networking applications, such as filtering or redirecting incoming connections based on address or socket information.",
      "description_length": 470,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_stubs",
      "library": "srt.stubs",
      "description": "This module provides low-level networking primitives for SRT socket programming, combining direct access to sockets, memory buffers, and file descriptors with structured handling of connection events and performance metrics. It includes a poll event tracker for managing multiple connections and a metrics structure for monitoring transmission details like bandwidth and latency, while the callback submodule enables custom handling of incoming connections with C-compatible interfaces. Use it to build high-performance network servers that require fine-grained control over transport-layer behavior, such as implementing custom protocols or real-time data transfer pipelines. Direct operations include socket setup, data transmission, and event polling, all designed for integration with native libraries via FFI.",
      "description_length": 814,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt.Stats",
      "library": "srt",
      "description": "This module provides functions to retrieve detailed transmission statistics for an SRT socket, including packet counts, bandwidth usage, latency, and buffer states. It works with the `Srt.socket` type and returns statistics in a structured record containing both cumulative and instantaneous metrics. Concrete use cases include monitoring real-time streaming performance, diagnosing network issues, and optimizing data transmission rates.",
      "description_length": 438,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt.Log",
      "library": "srt",
      "description": "Handles logging within the SRT library, providing functions to set log levels and register custom log handlers. It works with structured log messages containing severity levels, source locations, and descriptive text. Used to filter and process diagnostic output from SRT operations, such as connection status or internal errors.",
      "description_length": 329,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt.Poll",
      "library": "srt",
      "description": "This module manages polling of SRT sockets for read, write, or error events. It provides operations to add, remove, and update sockets in a poll set, and to wait for events with a specified timeout. Use it to efficiently monitor multiple SRT sockets for I/O readiness in network applications.",
      "description_length": 292,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Srt",
      "library": "srt",
      "description": "This module integrates socket configuration, communication, and lifecycle management with submodules for statistics, logging, and polling. It supports encryption setup, low-latency streaming, and peer-to-peer connections using `Srt.socket`, `Unix.sockaddr`, and byte buffers, while providing structured transmission metrics, customizable log handling, and I/O event polling. You can monitor streaming performance with detailed packet and bandwidth stats, filter diagnostic logs by severity, and manage multiple sockets waiting for I/O readiness with timeouts. Direct API operations include socket creation and configuration, while submodules enable runtime monitoring, logging control, and event-driven networking.",
      "description_length": 714,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Srt_types.Def.PollEvent",
      "library": "srt.types",
      "description": "This module defines a C-compatible structure for representing poll events, including fields for a file descriptor and event flags. It provides access to the structure's fields with functions to get and set the file descriptor and events. This is useful for integrating with system-level event loops like `poll` in Unix environments.",
      "description_length": 332,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Srt_types.Def.CBytePerfMon",
      "library": "srt.types",
      "description": "This module provides operations to track and monitor network performance metrics, focusing on byte- and packet-level telemetry such as transmission rates, retransmission counts, latency, and buffer utilization. It works with a Ctypes structure containing 32- and 64-bit integer fields to store counters for sent/received/dropped data, timing measurements (RTT, send period), and protocol-specific statistics like ACK/NAK rates. These capabilities are used in SRT (Secure Reliable Transport) to analyze transmission efficiency, detect network congestion, and measure reliability in real-time communication scenarios.",
      "description_length": 615,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Srt_types.Def",
      "library": "srt.types",
      "description": "This module defines core data structures for socket handling and system resource monitoring, including type aliases for sockets and performance metrics. It provides direct access to byte counting and I/O event polling through integrated submodules, enabling efficient tracking of network throughput and socket activity. The polling submodule exposes a C-compatible structure for managing file descriptors and event flags, while the performance submodule captures detailed telemetry like transmission rates, latency, and protocol-specific statistics. These tools support real-time network analysis, congestion detection, and optimization of reliable transport protocols like SRT.",
      "description_length": 678,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Srt_types",
      "library": "srt.types",
      "description": "This module organizes core types and constants for managing SRT socket states, transport modes, and error handling, while integrating submodules that extend functionality for performance monitoring and I/O event polling. It defines key data structures such as socket statuses, transport modes, socket options, and error codes, alongside type aliases for sockets and performance metrics. The polling submodule enables efficient tracking of file descriptors and event flags, supporting real-time I/O multiplexing, while the performance submodule captures transmission rates, latency, and protocol statistics for congestion detection and transport optimization. Examples include configuring buffer sizes and timeouts, monitoring live streaming or file transfer sessions, and analyzing network telemetry for performance tuning.",
      "description_length": 823,
      "index": 16,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 17,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9444444444444444
  },
  "statistics": {
    "max_description_length": 825,
    "min_description_length": 292,
    "avg_description_length": 549.4117647058823,
    "embedding_file_size_mb": 0.06224250793457031
  }
}