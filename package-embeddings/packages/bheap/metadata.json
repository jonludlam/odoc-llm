{
  "package": "bheap",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:34.624250",
  "modules": [
    {
      "module_path": "Binary_heap.Make",
      "library": "bheap",
      "description": "Implements a mutable priority queue using a binary heap structure backed by a dynamic array. It supports efficient insertion, extraction, and removal of minimum elements, with $O(\\log n)$ complexity for add, remove, and pop operations, and $O(1)$ for minimum access. This structure is ideal for applications like scheduling tasks by priority or managing event queues in simulations.",
      "description_length": 382,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binary_heap.Ordered",
      "library": "bheap",
      "description": "Implements a total ordering relation for elements stored in a binary heap. Provides a `compare` function that defines a strict weak ordering between elements, ensuring heap properties are maintained during insertion and extraction. This interface is essential for maintaining the priority queue behavior where elements are processed based on their associated priority values.",
      "description_length": 375,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Binary_heap",
      "library": "bheap",
      "description": "This module implements a priority queue using a binary heap stored in a dynamic array, enabling efficient insertion, removal, and access to the minimum (or maximum) element with $O(\\log n)$ and $O(1)$ time complexity respectively. It includes a submodule that defines the heap's ordering via a `compare` function, ensuring correct heap invariant maintenance, while the main module provides operations like `add`, `pop`, and `remove_min`. You can use it to schedule tasks by priority, manage event queues in simulations, or efficiently merge sorted streams. The combination of mutable storage and customizable ordering makes it suitable for dynamic priority-based processing in performance-sensitive contexts.",
      "description_length": 708,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 708,
    "min_description_length": 375,
    "avg_description_length": 488.3333333333333,
    "embedding_file_size_mb": 0.011301994323730469
  }
}