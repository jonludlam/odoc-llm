{
  "package": "doc-ock-xml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:25.269330",
  "modules": [
    {
      "module_path": "DocOckXmlParser.Make",
      "description": "Provides functions to construct and manipulate build configurations, including parsing input specifications, generating dependency graphs, and executing build steps. Operates on the `t` type, which represents a structured build plan. Used to automate software compilation workflows and manage task execution order.",
      "description_length": 314,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "doc-ock-xml",
      "description": "Parses and generates XML representations of documentation structures, converting between in-memory data and XML format. It handles custom types such as documentation blocks, annotations, and metadata elements. Used to serialize documentation for output in XML-based formats or to read and process external XML documentation files.",
      "description_length": 330,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "DocOckXmlFold",
      "description": "Provides functions to extract specific elements from parsed documentation structures, including text content, unit definitions, and page structures. Operates on types such as documentation text, units, and pages from the DocOck library. Used to traverse and transform XML-based documentation data during processing or conversion tasks.",
      "description_length": 335,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "DocOckXml",
      "description": "Provides functions to handle XML namespaces, including extracting and manipulating namespace prefixes. Works with strings representing XML elements and attributes. Used to standardize namespace handling in XML parsing and generation workflows.",
      "description_length": 243,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "DocOckXmlParse",
      "description": "Parses XML input into structured documentation elements using a custom parser combinator framework. Processes text, unit definitions, and page content, returning typed results for each. Designed for extracting and transforming XML-based documentation formats into internal representations.",
      "description_length": 289,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "DocOckXmlParser",
      "description": "Constructs and manages build workflows by parsing specifications, generating dependency graphs, and executing tasks through the `t` type, which encapsulates a structured build plan. It supports operations like configuration validation, task scheduling, and step execution. Users can automate complex compilation processes and ensure correct execution order. For example, it can parse a project's build file, resolve dependencies, and run build steps in the proper sequence.",
      "description_length": 473,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 473,
    "min_description_length": 243,
    "avg_description_length": 330.6666666666667,
    "embedding_file_size_mb": 0.022200584411621094
  }
}