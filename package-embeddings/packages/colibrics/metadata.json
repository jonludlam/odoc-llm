{
  "package": "colibrics",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:17.910835",
  "modules": [
    {
      "module_path": "Colibrics.Var.B",
      "library": "colibrics",
      "description": "This module implements boolean variables within a modeling context, providing operations to create, retrieve, and reference boolean values. It works with boolean type values tied to a specific model instance. Concrete use cases include representing and querying boolean state variables in formal models.",
      "description_length": 303,
      "index": 0,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Colibrics.Var.I",
      "library": "colibrics",
      "description": "This module represents integer variables constrained within a specified range. It supports creating variables with minimum and maximum bounds, retrieving their values from a model, and referencing a zero value. It is used to define and manipulate bounded integer variables in constraint models.",
      "description_length": 294,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrics.Var",
      "library": "colibrics",
      "description": "This module provides typed variables for modeling contexts, supporting boolean and bounded integer values. It includes operations to create variables, retrieve their values from a model, and reference specific constants like zero. You can represent boolean state variables, define integer variables with range constraints, and query variable values during model evaluation.",
      "description_length": 373,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Colibrics.Model",
      "library": "colibrics",
      "description": "This module defines a core data type `t` representing structured data models, along with operations to construct, query, and manipulate instances of this type. It supports use cases such as modeling domain entities, validating data structures, and mapping between different representations of data. Functions include field access, transformation, and serialization to and from common formats like JSON.",
      "description_length": 402,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrics.Context",
      "library": "colibrics",
      "description": "Manages contextual state for constraint solving, providing functions to initialize a fresh context and execute a solver to produce a model. It operates on internal state tracked within the `t` type, which holds solver-specific data. This module is used to set up and run constraint resolution processes, typically in scenarios like type inference or logical deduction systems.",
      "description_length": 376,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrics.Constraint",
      "library": "colibrics",
      "description": "This module implements constraint propagation for integer and boolean variables within a solver context. It supports operations like equality, inequality, addition, logical negation, disjunction, and bi-implication, with variants that either enforce constraints directly or reify them into boolean variables. Typical use cases include modeling combinatorial problems such as scheduling, resource allocation, and logic puzzles where relations between variables must be explicitly defined and propagated.",
      "description_length": 502,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrics",
      "library": "colibrics",
      "description": "This module suite models structured data and constraint systems using typed variables and solver contexts. It supports boolean and bounded integer variables with operations for constraint propagation, including equality, inequality, and logical operations. The core data type `t` represents models and supports construction, transformation, and serialization, while the constraint system enables solving complex combinatorial problems like scheduling and logical deduction. Examples include defining integer variables with range limits, setting up constraints between variables, running a solver to find valid models, and serializing results to JSON.",
      "description_length": 650,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 650,
    "min_description_length": 294,
    "avg_description_length": 414.2857142857143,
    "embedding_file_size_mb": 0.025864601135253906
  }
}