{
  "package": "colibrics",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T22:56:26.141008",
  "modules": [
    {
      "module_path": "Colibrics.Var.I",
      "library": "colibrics",
      "description": "This module represents integer variables constrained within a specified range. It supports creating variables with minimum and maximum bounds, retrieving their values from a model, and referencing a zero value. It is used to define and manipulate bounded integer variables in constraint models.",
      "description_length": 294,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrics.Var.B",
      "library": "colibrics",
      "description": "This module implements boolean variables within a modeling context, providing operations to create, retrieve, and reference boolean values. It works with boolean variables tied to a specific model instance, enabling direct manipulation of binary states. Concrete use cases include representing on/off flags, constraint satisfaction states, or binary decision variables in a solver or configuration system.",
      "description_length": 405,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrics.Var",
      "library": "colibrics",
      "description": "This module provides operations for creating and manipulating bounded integer and boolean variables within a constraint modeling context. It works with integer variables constrained to specific ranges and boolean variables representing binary states. Concrete use cases include defining decision variables for solvers, managing configuration flags, and modeling constraint satisfaction problems where variables are tied to a specific model instance.",
      "description_length": 449,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrics.Context",
      "library": "colibrics",
      "description": "Manages a context for solving constraint satisfaction problems by maintaining state and solver configurations. It initializes an empty context and applies constraints to derive solutions. Used to define and resolve dependencies between variables in logic puzzles or configuration systems.",
      "description_length": 288,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrics.Constraint",
      "library": "colibrics",
      "description": "This module implements constraint propagation and logical operations for integer and boolean variables within a constraint satisfaction context. It supports arithmetic constraints like equality, addition, and inequalities, along with boolean operations such as conjunction, disjunction, and negation. Typical use cases include modeling combinatorial problems with reified constraints and enforcing logical relationships between variables in a solver.",
      "description_length": 450,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Colibrics.Model",
      "library": "colibrics",
      "description": "This module defines a core data type `t` representing structured data models, along with operations to construct, query, and manipulate instances of this type. It includes functions for field access, validation, and transformation tailored to model-specific logic. Concrete use cases include representing database records, configuration data, and application state in a type-safe manner.",
      "description_length": 387,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrics",
      "library": "colibrics",
      "description": "This module provides data structures and operations for modeling constraint satisfaction problems with typed variables and logical constraints. It supports constructing and manipulating structured data models, bounded integer and boolean variables, and logical constraints over those variables. Use cases include solving logic puzzles, validating configuration data, and managing application state with type-safe records and solver-driven constraints.",
      "description_length": 451,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 451,
    "min_description_length": 288,
    "avg_description_length": 389.14285714285717,
    "embedding_file_size_mb": 0.10190296173095703
  }
}