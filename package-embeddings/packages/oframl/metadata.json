{
  "package": "oframl",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:31.620446",
  "modules": [
    {
      "module_path": "Oframl.Button",
      "library": "oframl",
      "description": "This module defines a button with a string content field and a render function that takes a button and an integer to produce a formatted string. It works with a custom record type representing buttons. A concrete use case is generating UI elements with dynamic labels and sizes, such as rendering buttons in a terminal-based interface.",
      "description_length": 335,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oframl.Frame",
      "library": "oframl",
      "description": "This module defines a data structure for representing UI frames with a title, image and post extra data fields, a list of buttons, and an optional input field. It provides a `render` function that generates a string representation of a frame combined with additional content. Useful for building text-based UI components where structured frames are rendered into displayable strings.",
      "description_length": 383,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oframl.Utils",
      "library": "oframl",
      "description": "Replaces special characters in strings with their escaped equivalents, ensuring safe output for structured formats. Works with string inputs containing untrusted or malformed content. Useful for sanitizing user input before serialization or display.",
      "description_length": 249,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oframl.Action",
      "library": "oframl",
      "description": "This module defines a record type representing user interface actions with fields for button index, input text, and form identifier. It provides functions to convert these records to and from JSON format using Yojson. Concrete use cases include serializing and deserializing user interactions for transmission or storage in a web application.",
      "description_length": 342,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oframl.Server",
      "library": "oframl",
      "description": "Starts a server that listens on a specified host and port, handling WebSocket connections with functions to initialize frames, process actions, and serialize responses. It works with strings, integers, and custom types like `Oframl.frame` and `Oframl.action`. This module is used to build interactive web applications where clients send actions and receive updated UI frames in response.",
      "description_length": 387,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oframl",
      "library": "oframl",
      "description": "This module provides a framework for building and managing interactive user interfaces with components like buttons, frames, and actions, supporting dynamic behavior and structured layouts. It includes utilities for rendering UI elements, sanitizing strings, serializing data to JSON, and handling user interactions through actions that capture button selections and input text. The framework enables communication between client and server via a WebSocket interface that processes actions and updates UI frames in real time. Example uses include rendering terminal-based UIs with dynamic buttons, building structured web forms with safe input handling, and managing stateful interactions in a client-server application.",
      "description_length": 720,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 720,
    "min_description_length": 249,
    "avg_description_length": 402.6666666666667,
    "embedding_file_size_mb": 0.022212982177734375
  }
}