{
  "package": "shuttle_http",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 52,
  "creation_timestamp": "2025-07-15T23:15:14.345083",
  "modules": [
    {
      "module_path": "Shuttle_http.Client.Address.Table.Provide_bin_io",
      "library": "shuttle_http",
      "description": "This module implements binary serialization and deserialization for a table structure mapping keys to client addresses. It supports operations to measure, read, and write the table using Bin_prot, enabling efficient data encoding and decoding. Concrete use cases include persisting client address tables to disk or transmitting them over a network.",
      "description_length": 348,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Hash_set.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "Converts S-expressions into hash sets of addresses using a provided module for address parsing. Works with `Sexplib0.Sexp.t` input and produces `Shuttle_http.Client.Address.Hash_set.t` values. Useful for deserializing address lists from configuration files or network protocols.",
      "description_length": 278,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Table.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "This module provides a function `t_of_sexp` that constructs a table from S-expression data, specifically mapping keys to values using the `Key` module's S-expression parser. It operates on S-expressions and produces a table structure specialized for client address management. A concrete use case is parsing configuration files that define client address mappings in S-expression format.",
      "description_length": 387,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set.Elt",
      "library": "shuttle_http",
      "description": "This module defines operations for working with individual client addresses in a set structure, specifically handling serialization to and from S-expressions. It provides a comparator for address values, enabling ordered set operations. Concrete use cases include managing unique client addresses in a networked application, such as tracking connected clients or routing destinations.",
      "description_length": 384,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map.Key",
      "library": "shuttle_http",
      "description": "This module defines a key type for use in maps keyed by HTTP client addresses. It includes serialization functions to and from S-expressions and provides a comparator for ordering keys. It is used to manage and compare client addresses in map-like data structures.",
      "description_length": 264,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map.Provide_hash",
      "library": "shuttle_http",
      "description": "Implements hash folding for address maps, allowing efficient computation of hash values over map contents. Works directly with `Shuttle_http.Client.Address.Map.t` structures, using a provided key hashing function. Useful for scenarios like caching or equality checks where structural hashing of address maps is required.",
      "description_length": 320,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set.Provide_bin_io",
      "library": "shuttle_http",
      "description": "This module implements binary serialization and deserialization for a set of client addresses. It provides functions to compute size, write, and read sets in binary format, using the `Bin_prot` library. Concrete use cases include persisting or transmitting sets of HTTP client addresses efficiently over a network or to disk.",
      "description_length": 325,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "This module provides a function `t_of_sexp` that constructs a map from S-expression input, using a provided function to parse values. It works with S-expressions and maps where keys are defined by the `Key` module and values are of a generic type. A concrete use case is parsing configuration or data files into structured map values during application initialization.",
      "description_length": 368,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map.Provide_bin_io",
      "library": "shuttle_http",
      "description": "This module implements binary serialization and deserialization for map structures keyed by a provided `Key` type, specifically handling values of type `'a Shuttle_http.Client.Address.Map.t`. It provides functions to compute binary size, read and write binary data, and define bin_io type representations for efficient data encoding. Concrete use cases include persisting or transmitting map data over networks in binary format, particularly for applications requiring efficient serialization like RPC systems or storage engines.",
      "description_length": 529,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set.Diff",
      "library": "shuttle_http",
      "description": "This module computes and applies differences between sets of HTTP client addresses. It supports operations to derive changes (`get`), apply diffs (`apply_exn`), and serialize/deserialize diffs using S-expressions. A concrete use case is synchronizing address sets between distributed nodes by calculating and transmitting only the differences.",
      "description_length": 343,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set.Provide_hash",
      "library": "shuttle_http",
      "description": "This module implements hash functions for sets of client addresses. It provides `hash_fold_t` and `hash` operations to compute hash values for `Shuttle_http.Client.Address.Set.t` structures. Useful when using client address sets as keys in hash tables or for efficient equality checks.",
      "description_length": 285,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Hash_set.Provide_bin_io",
      "library": "shuttle_http",
      "description": "Implements binary serialization and deserialization for hash sets of client addresses. Provides functions to compute binary size, read and write hash set values, and handle variant tags during decoding. Useful for persisting or transmitting collections of network endpoints in a binary format.",
      "description_length": 293,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map.Diff",
      "library": "shuttle_http",
      "description": "This module implements functions to serialize and deserialize map diff values using S-expressions, retrieve differences between mapped addresses, apply diffs to values, and construct diffs from lists. It operates on types `'a` and `'b` in combination with `Shuttle_http.Client.Address.Map.Diff.t` and `derived_on` structures. Concrete use cases include synchronizing HTTP client address mappings across different states and persisting or transmitting map differences in a structured format.",
      "description_length": 490,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "Converts S-expressions into sets of client addresses, specifically working with `Shuttle_http.Client.Address.Set.t` values. It parses S-expression input to construct sets where each element is of the type `Elt`, which represents individual client addresses. This is useful when loading address sets from configuration files or serialized data.",
      "description_length": 343,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Replace_polymorphic_compare",
      "library": "shuttle_http",
      "description": "This module overrides standard comparison operators and provides comparison functions for `Shuttle_http.Client.Address.t` values. It supports equality checks, ordering comparisons, and utilities like `min` and `max` to compare two addresses. Concrete use cases include sorting lists of addresses or checking address equality in routing logic.",
      "description_length": 342,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Hash_set",
      "library": "shuttle_http",
      "description": "This module provides a hash set implementation optimized for storing and manipulating collections of network addresses. It supports creating sets from lists, testing membership, comparing sets, and converting to and from S-expressions for serialization. The accompanying submodule handles deserialization of S-expressions into address sets using a specified parser, enabling easy loading from configuration or network data. Another submodule adds binary serialization capabilities, allowing efficient storage or transmission of address sets with functions for size calculation, reading, and writing binary representations.",
      "description_length": 622,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Set.Diff",
      "library": "shuttle_http",
      "description": "This module computes and applies differences between sets of HTTP methods, enabling efficient updates and comparisons. It works with sets of `Shuttle_http.Meth.Set.Elt.t` values, using `Set.t` structures for derivation. Use it to track and apply incremental changes to allowed HTTP methods in routing or API configurations.",
      "description_length": 323,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Set.Provide_hash",
      "library": "shuttle_http",
      "description": "This module implements hash functions for sets of HTTP methods. It provides `hash_fold_t` to fold a hash state over a set and `hash` to compute a hash value directly from a set. These operations are useful when sets of HTTP methods need to be used as keys in hash tables or for efficient equality checks.",
      "description_length": 304,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Map.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "This module provides a function `t_of_sexp` that constructs a map from S-expression input, using a provided function to parse values. It works with S-expressions and maps keyed by the `Key` module's type. A concrete use case is deserializing HTTP method-specific configurations from S-expressions into a structured map.",
      "description_length": 319,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Set.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "Converts S-expressions into sets of HTTP methods. Works with `Sexplib0.Sexp.t` input to produce `Shuttle_http.Meth.Set.t` values. Useful for parsing HTTP method restrictions from configuration files or serialized data.",
      "description_length": 218,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Set.Elt",
      "library": "shuttle_http",
      "description": "This module represents individual HTTP methods as elements within a set structure. It provides serialization and deserialization to and from S-expressions, along with a comparator for ordering. It is used to handle and compare specific HTTP method values like GET, POST, etc., in a type-safe manner.",
      "description_length": 299,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Map.Provide_bin_io",
      "library": "shuttle_http",
      "description": "This module implements binary serialization and deserialization for maps where keys are of type `Key.t` and values are associated with `Shuttle_http.Meth.Map.t`. It provides functions to compute binary size, read and write values in binary format, and defines the necessary type class instances for use with Bin_prot. Concrete use cases include persisting or transmitting HTTP method maps efficiently in binary form.",
      "description_length": 416,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Hash_queue",
      "library": "shuttle_http",
      "description": "This module provides ordered hash-indexed queue operations for managing key-value pairs with efficient lookups and positional modifications. It works with hybrid data structures combining hash tables and queues, specifically parameterized over `Shuttle_http.Client.Address.t` keys, supporting safe and unsafe variants for enqueueing, dequeuing, reordering, and aggregating elements. Use cases include maintaining ordered collections with keyed access where operations like priority-based insertion, sequential traversal, or serialization to structured formats are required.",
      "description_length": 573,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map",
      "library": "shuttle_http",
      "description": "This module organizes operations around maps keyed by HTTP client addresses, integrating key comparison, serialization, and diffing functionality. It provides core types like `t` for maps, `Key` for address-based keys, and `Diff` for tracking changes, with operations including map construction from S-expressions, binary encoding, and hash computation. You can parse address maps from configuration files, compute structural hashes for caching, and serialize diffs to synchronize map states across systems. Submodules handle specific tasks like S-expression parsing, binary IO, and diff application, enabling efficient data exchange and state management.",
      "description_length": 655,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Map.Diff",
      "library": "shuttle_http",
      "description": "This module represents and manipulates differences between HTTP method maps, specifically tracking changes to values associated with each HTTP method. It supports operations to serialize and deserialize these diffs, extract specific method changes, apply diffs to base values, and combine multiple diffs into a single change. Concrete use cases include synchronizing HTTP route configurations and computing incremental updates between API versions.",
      "description_length": 448,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Meth.Map.Key",
      "library": "shuttle_http",
      "description": "This module provides functions for converting HTTP method types to and from S-expressions and defines a comparator for use in map keys. It operates on the `Shuttle_http.Meth.t` type, enabling serialization and comparison operations. Concrete use cases include persisting HTTP method values in configuration files and efficiently indexing HTTP methods within map data structures.",
      "description_length": 378,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Meth.Map.Provide_hash",
      "library": "shuttle_http",
      "description": "This module provides a function `hash_fold_t` that computes a hash for a map structure by folding over its elements. It works with maps (`Shuttle_http.Meth.Map.t`) where keys are from the `Key` module and values can be of any type. A concrete use case is generating consistent hash values for maps used in caching or equality comparisons.",
      "description_length": 338,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set",
      "library": "shuttle_http",
      "description": "This module manages sets of client addresses with operations for union, subset checks, and transformations, while supporting conversion from lists, arrays, sequences, and map keys. It integrates serialization (Sexp, Bin_io), hashing, and Quickcheck testing, working with `Shuttle_http.Client.Address.Set.t` sets and their elements. Submodules handle binary serialization, set differencing, S-expression parsing, and hashing, enabling use cases like synchronizing distributed address sets, persisting sets to disk, and validating set invariants. Specific operations include computing set differences with `diff`, serializing sets in binary, and constructing sets from S-expressions for configuration or network transmission.",
      "description_length": 723,
      "index": 27,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Shuttle_http.Client.Address.Table",
      "library": "shuttle_http",
      "description": "This module manages hash tables keyed by network addresses, offering operations to create, map, group, and compare tables with arbitrary value types. It supports handling duplicates during construction and enables equality checks and serialization. The binary serialization submodule measures and converts tables to and from Bin_prot format for storage or transmission, while the S-expression submodule parses tables from S-expressions, useful for loading client address mappings from configuration files. Example uses include tracking connected clients, aggregating network state, and configuring address-based routing.",
      "description_length": 620,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Set.Provide_bin_io",
      "library": "shuttle_http",
      "description": "This module implements binary serialization and deserialization for a set of HTTP methods. It provides functions to compute size, write, and read sets in binary format, along with necessary type class instances. It is used when transmitting or persisting sets of HTTP methods in a compact, efficient format.",
      "description_length": 307,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Parser.Private",
      "library": "shuttle_http",
      "description": "Parses an HTTP request method from a bigstring buffer, returning the method type and the number of bytes consumed. Works directly with `Bigstring.t` and `Shuttle_http.Meth.t` for efficient low-level parsing. Useful for implementing custom HTTP servers or network tools that need to process raw request data.",
      "description_length": 307,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Replace_polymorphic_compare",
      "library": "shuttle_http",
      "description": "This module overrides standard comparison operators and provides comparison functions for `Shuttle_http.Meth.t` values, ensuring correct ordering and equality checks. It supports operations like `min`, `max`, and `compare`, which are useful for sorting or selecting between HTTP method values. Concrete use cases include comparing HTTP methods to determine request precedence or canonicalizing method order in routing logic.",
      "description_length": 424,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Persistent",
      "library": "shuttle_http",
      "description": "This module implements durable HTTP clients that automatically reconnect to a service when the underlying socket connection is lost. It works with HTTP requests and responses, using a user-defined callback to resolve the target address on each connection attempt. Concrete use cases include maintaining reliable communication with services that may experience transient network failures or require dynamic address resolution.",
      "description_length": 425,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Client.Ssl",
      "library": "shuttle_http",
      "description": "This module creates and configures SSL contexts for secure HTTP clients, supporting options like protocol versions, cipher suites, certificate verification, and custom CA trust stores. It works with SSL connections using types like `Async_ssl.Version.t`, `Async_ssl.Opt.t`, and `Async_ssl.Verify_mode.t`, along with file paths for certificates and keys. It is used to establish secure HTTPS connections with proper certificate validation, particularly when making authenticated or private API requests.",
      "description_length": 502,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address",
      "library": "shuttle_http",
      "description": "This module represents and manipulates HTTP client addresses with precise bounds checking, structured creation from host/port pairs or Unix domain sockets, and integration with ordered collections for routing, access control, and connection tracking. It supports key operations like validation, comparison, and serialization, with concrete data types such as structured addresses, sets, maps, and hash tables. Child modules enhance functionality with ordered queues, hash-indexed collections, and set operations that include union, diff, and serialization to S-expressions or binary formats. Examples include enforcing rate limits using address sets, synchronizing distributed address maps via diffs, and managing client state with hash tables that support keyed lookups and aggregation.",
      "description_length": 787,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Set",
      "library": "shuttle_http",
      "description": "This module manages sets of HTTP methods with a comparator-based set type, supporting construction from lists, sequences, arrays, and hash-based structures. It enables transformations through mapping, filtering, and combining sets, while integrating S-expressions, binary serialization, and hashing. You can compute set differences for incremental updates, hash sets for equality checks or hash table keys, convert S-expressions into sets, and serialize sets to binary for efficient transmission or storage. It supports type-safe handling of individual HTTP methods with ordering, making it suitable for routing, permissions, and test generation with randomized sets.",
      "description_length": 667,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Server.Ssl",
      "library": "shuttle_http",
      "description": "This module provides functions to configure and create SSL contexts for HTTPS servers, including certificate and key file setup, cipher configuration, and SSL version and option settings. It works with SSL context data types and handles secure communication parameters like CA trust stores and verification modes. Concrete use cases include setting up mutual TLS authentication, restricting allowed ciphers, and configuring SSL contexts for secure web services.",
      "description_length": 461,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Body.Stream",
      "library": "shuttle_http",
      "description": "This module handles streaming HTTP bodies by providing functions to create, consume, and manage byte streams with strict single-consumption semantics. It works with string-based chunks using Async pipes and supports operations like iteration, folding, and draining, along with metadata queries such as encoding type and read status. Concrete use cases include efficiently processing large HTTP payloads without loading the entire body into memory, ensuring proper resource cleanup, and integrating with HTTP servers that require precise stream handling.",
      "description_length": 553,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Meth.Map",
      "library": "shuttle_http",
      "description": "This module organizes key-value mappings around a specific key type, enabling transformations, error-resilient construction from S-expressions and other sources, and structural analysis through folding and comparison. It supports serialization to and from both S-expressions and binary formats, with dedicated submodules handling HTTP method maps, their differences, and associated key serialization, hashing, and comparison. You can parse HTTP method-specific configurations from S-expressions, compute and apply diffs between method maps, or hash and compare maps for consistency checks. Specific workflows include deserializing and validating config files, synchronizing API route changes, and persisting or transmitting method-based mappings efficiently.",
      "description_length": 758,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Oneshot",
      "library": "shuttle_http",
      "description": "This module performs a single HTTP client request to a specified address, supporting optional SSL configuration for secure connections. It handles connection timeouts and SSL certificate verification, allowing custom validation through SSL options. Use it to send ad-hoc HTTP requests with precise control over transport settings, such as making secure API calls to a known endpoint with hostname verification.",
      "description_length": 410,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Server.Config",
      "library": "shuttle_http",
      "description": "This module defines configuration parameters for an HTTP server, including buffer sizes, connection limits, timeouts, and SSL settings. It provides a `create` function to construct configurations with optional fields and a `default` value for standard setups. Use this module to customize server behavior for performance tuning, security settings, or error handling in HTTP services.",
      "description_length": 383,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Headers",
      "library": "shuttle_http",
      "description": "This module manages HTTP headers represented as lists of key-value pairs. It supports operations like adding, removing, and querying headers, with case-sensitive key matching, and provides serialization to and from S-expressions. Use it to construct and manipulate HTTP headers in client or server applications, such as setting content types, authentication tokens, or custom headers for requests and responses.",
      "description_length": 411,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Status",
      "library": "shuttle_http",
      "description": "This module provides type-safe handling of HTTP status codes through polymorphic variant types categorized into informational, success, redirection, client_error, and server_error. It supports operations like serialization to S-expressions, integer/string conversion, hashing, comparison, and generation of test data via QuickCheck, along with exhaustive lists of standard status codes. These features enable robust testing, HTTP response construction, and consistent type-driven validation in web applications.",
      "description_length": 511,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Body",
      "library": "shuttle_http",
      "description": "This module represents HTTP message bodies with three variants\u2014empty, fixed-length strings, and asynchronous streams\u2014enabling efficient handling of both in-memory and streaming payloads. It provides direct operations to create, convert, and serialize bodies, while its child module extends functionality with strict single-use streams, supporting iteration, folding, and metadata queries over async pipes. Use cases include processing large HTTP payloads without full in-memory loading, draining streams to files or network sockets, and inspecting body content during debugging or request/response handling.",
      "description_length": 607,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Response",
      "library": "shuttle_http",
      "description": "This module constructs and manipulates HTTP responses, providing functions to set and retrieve response metadata such as version, status, and headers, as well as the response body. It supports operations like adding, removing, and modifying headers, checking header presence, and determining transfer encoding and keep-alive behavior. Concrete use cases include building custom HTTP responses for a server, modifying response headers before sending, and inspecting response properties during processing.",
      "description_length": 503,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Version",
      "library": "shuttle_http",
      "description": "Represents HTTP protocol versions, currently supporting HTTP/1.1. Provides functions to convert values to and from S-expressions and to convert them to string representations. Useful for serializing and deserializing HTTP version information in network communication contexts.",
      "description_length": 276,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Server",
      "library": "shuttle_http",
      "description": "This module implements an HTTP server that routes incoming requests to user-defined services, supporting SSL/TLS configurations, connection metadata access, and custom error handling. It provides core data types for requests, responses, and services, along with operations to bind handlers, manage connections, and configure security settings. The SSL submodule enables secure communication through context creation with certificates, cipher suites, and verification modes, while the Config submodule allows tuning buffer sizes, timeouts, and connection limits for customized server behavior. Example uses include building REST APIs with mutual TLS, serving static files over HTTPS, and logging request metadata via custom handlers.",
      "description_length": 732,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Parser",
      "library": "shuttle_http",
      "description": "This module parses HTTP requests, responses, and chunked data from buffers, handling low-level tasks like header extraction, chunk length detection, and incremental content processing. It directly supports parsing methods, headers, and message bodies from `Bigstring.t` buffers, returning structured data such as `Shuttle_http.Meth.t` and HTTP headers. Submodules enable fine-grained parsing of specific components, such as extracting an HTTP method and consumed byte count from raw buffer data. Use it to build efficient HTTP servers or clients that process streaming network data without intermediate copies.",
      "description_length": 610,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client",
      "library": "shuttle_http",
      "description": "This module provides an asynchronous HTTP client for initiating TCP and SSL connections, sending structured requests, and handling responses with automatic header management, SNI, and hostname validation. It supports durable connections through reconnection logic, secure communication via SSL context configuration, and precise address handling with structured types and collection operations. You can use it to make ad-hoc or long-lived HTTP requests, enforce rate limits with address sets, and maintain reliable client state with hash tables and ordered collections. Specific examples include securely calling authenticated APIs, synchronizing distributed address maps, and managing keep-alive connections with automatic retry on transient failures.",
      "description_length": 752,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Request",
      "library": "shuttle_http",
      "description": "This module constructs and manipulates HTTP request objects, providing direct access to their method, path, version, headers, and body. It supports operations to inspect, add, remove, and modify headers selectively, determine transfer encoding, and update the request body. Concrete use cases include building custom HTTP requests for client APIs, modifying incoming requests in a web server, or inspecting headers for routing and authentication decisions.",
      "description_length": 456,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth",
      "library": "shuttle_http",
      "description": "This module defines an enumerated type for HTTP methods with conversions to strings and S-expressions, along with hashing, comparison, and introspection functions to check properties like safety and idempotence. Its core utilities enable method validation, request routing, and access control policies, while the comparison module ensures correct ordering and selection between methods using `compare`, `min`, and `max`. The set module supports type-safe construction, transformation, and serialization of HTTP method sets, allowing operations like set difference, hashing, and S-expression conversion for use in routing and permissions. The map module organizes method-based key-value data with support for parsing, diffing, and serializing configurations, enabling workflows like API route synchronization and config validation.",
      "description_length": 830,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http",
      "library": "shuttle_http",
      "description": "This module provides a comprehensive toolkit for building and processing HTTP messages, servers, and clients with precise control over headers, methods, status codes, and message bodies. It supports type-safe manipulation of HTTP methods, status codes, and versions, along with structured handling of headers, request/response objects, and streaming message bodies. You can build custom HTTP servers with SSL support and request routers, send secure HTTP requests with automatic connection management, or parse and serialize HTTP messages directly from network buffers. Specific tasks include setting authentication headers, handling large streaming payloads, validating client requests, and routing based on HTTP method sets or status classifications.",
      "description_length": 752,
      "index": 51,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 52,
    "meaningful_modules": 52,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 830,
    "min_description_length": 218,
    "avg_description_length": 460.75,
    "embedding_file_size_mb": 0.18926525115966797
  }
}