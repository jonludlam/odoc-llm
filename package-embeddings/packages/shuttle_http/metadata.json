{
  "package": "shuttle_http",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 52,
  "creation_timestamp": "2025-08-15T14:27:53.664044",
  "modules": [
    {
      "module_path": "Shuttle_http.Client.Address.Hash_set.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "Converts S-expressions into hash sets of addresses using the provided module X for address parsing. Works with `Shuttle_http.Client.Address.Hash_set.t` and `Sexplib0.Sexp.t` types. Useful for deserializing address sets from S-expression representations in configuration files or network protocols.",
      "description_length": 297,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "This module provides a function `t_of_sexp` that constructs a map from S-expression input, using a provided function to parse values. It works with S-expressions and maps where keys are defined by the `Key` module and values are of a generic type. A concrete use case is parsing configuration data from S-expressions into structured map values.",
      "description_length": 344,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map.Provide_hash",
      "library": "shuttle_http",
      "description": "Implements hash folding for address maps, enabling efficient hashing of map contents. Works with `Shuttle_http.Client.Address.Map.t`, a map structure keyed by client addresses. Useful for generating consistent hash values for network address mappings in distributed systems or caching layers.",
      "description_length": 292,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set.Provide_bin_io",
      "library": "shuttle_http",
      "description": "This module implements binary serialization and deserialization for a set of client addresses. It provides functions to compute size, write, and read sets in binary format, using the `Bin_prot` library. Concrete use cases include persisting or transmitting sets of HTTP client addresses efficiently in a binary format.",
      "description_length": 318,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Table.Provide_bin_io",
      "library": "shuttle_http",
      "description": "This module implements binary serialization and deserialization for a table structure mapping keys to client addresses. It provides functions to compute binary size, read and write table values in binary format, and defines the necessary bin-prot type class instances. It is used to efficiently persist or transmit client address tables over networks or storage systems.",
      "description_length": 370,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Hash_set.Provide_bin_io",
      "library": "shuttle_http",
      "description": "This module implements binary serialization and deserialization for hash sets of client addresses in the Shuttle HTTP system. It provides functions to compute binary size, read and write hash set values, and expose bin-io type classes for use in network communication or persistent storage. The operations directly support efficient encoding and decoding of address sets during RPC calls or session state transfers.",
      "description_length": 415,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Table.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "This module provides a function `t_of_sexp` that constructs a table from S-expression data, using a provided function to parse values. It works with S-expressions and a table structure mapping keys to values. A concrete use case is deserializing network address configurations from S-expression representations into a typed table for runtime use.",
      "description_length": 346,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set.Provide_hash",
      "library": "shuttle_http",
      "description": "This module provides hash folding and hashing operations for sets of client addresses. It works with `Shuttle_http.Client.Address.Set.t`, a set structure where elements are of type `Shuttle_http.Client.Address.t`. Concrete use cases include enabling efficient hashing of address sets for caching or equality checks in network routing contexts.",
      "description_length": 343,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set.Elt",
      "library": "shuttle_http",
      "description": "This module defines the element type and comparison logic for a set of HTTP client addresses. It includes serialization functions to and from S-expressions and provides a comparator for ordering elements. It is used to manage collections of network addresses in a structured and efficient way.",
      "description_length": 293,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "Converts S-expressions into sets of client addresses, specifically working with `Shuttle_http.Client.Address.Set.t` and its element type `Elt`. Parses structured network address data from S-expression format for use in HTTP client routing and connection management. Useful when loading address configurations from files or external sources during service initialization.",
      "description_length": 370,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map.Key",
      "library": "shuttle_http",
      "description": "This module defines a key type for use in maps keyed by `Shuttle_http.Client.Address.t` values. It provides serialization functions to and from S-expressions and a comparator for ordering keys. It is used to enable map-based lookups and comparisons of client addresses in a type-safe manner.",
      "description_length": 291,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map.Diff",
      "library": "shuttle_http",
      "description": "This module implements differential operations for versioned address maps, supporting serialization and deserialization via S-expressions. It provides functions to compute, apply, and combine differences between address map states, using customizable merge strategies. Concrete use cases include synchronizing client-side address state with a remote server and managing incremental updates to routing tables.",
      "description_length": 408,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map.Provide_bin_io",
      "library": "shuttle_http",
      "description": "This module implements binary serialization and deserialization for a map where keys are of type `Key.t` and values are of type `Shuttle_http.Client.Address.t`. It provides functions to compute the binary shape, size, and perform reading and writing operations for this map structure. This is useful when persisting or transmitting HTTP client address mappings in a binary format, such as for caching or inter-process communication.",
      "description_length": 432,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set.Diff",
      "library": "shuttle_http",
      "description": "This module computes and applies differences between sets of client addresses, using a derived set type that supports comparison. It provides functions to calculate the difference between two sets, apply a difference to a set, and construct differences from lists. Concrete use cases include synchronizing address collections across distributed nodes and efficiently propagating membership changes.",
      "description_length": 398,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Set.Provide_bin_io",
      "library": "shuttle_http",
      "description": "This module implements binary serialization and deserialization for a set of HTTP methods. It provides functions to compute size, write, and read sets in binary format, along with shape and type class values for integration with binary protocol tools. Concrete use cases include persisting or transmitting sets of HTTP methods efficiently in a binary format.",
      "description_length": 358,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Table",
      "library": "shuttle_http",
      "description": "This module implements a hash table for mapping client address keys to arbitrary values, supporting operations like creation from association lists, grouping with custom key and data extractors, and duplicate key handling. It provides functionality for equality checks, invariant enforcement, and serialization via S-expressions and binary IO. Concrete use cases include managing client address configurations, routing tables, and network service mappings with strict key uniqueness and efficient lookup.",
      "description_length": 504,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Set.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "Converts S-expressions into sets of HTTP methods. Works with `Sexplib0.Sexp.t` and produces values of type `Shuttle_http.Meth.Set.t`. Useful for parsing HTTP method sets from configuration files or serialized data.",
      "description_length": 214,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Map.Diff",
      "library": "shuttle_http",
      "description": "This module handles differential updates for HTTP method maps, providing functions to serialize and deserialize diffs, extract differences between map states, apply diffs to base maps, and construct diffs from lists of changes. It works with `Meth.Map` structures and their associated diff types, enabling precise manipulation of HTTP method-based routing data. Concrete use cases include synchronizing routing tables between services or versioning API endpoint configurations.",
      "description_length": 477,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Meth.Set.Elt",
      "library": "shuttle_http",
      "description": "This module represents individual HTTP methods as elements within a set structure. It provides serialization and deserialization to and from S-expressions, along with a comparator for ordering. It is used to handle and compare specific HTTP method values like GET, POST, etc., in a structured and efficient way.",
      "description_length": 311,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Meth.Set.Provide_hash",
      "library": "shuttle_http",
      "description": "This module provides hash folding and hashing functions for sets of HTTP methods. It works with `Shuttle_http.Meth.Set.t`, a set type representing HTTP methods. Concrete use cases include efficiently computing hash values for sets of HTTP methods, such as when using those sets as keys in a hash table or for caching purposes.",
      "description_length": 326,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Map.Key",
      "library": "shuttle_http",
      "description": "This module provides functions to convert HTTP method types to and from S-expressions and defines a comparator for use in map keys. It works with the `Shuttle_http.Meth.t` type, representing HTTP methods like GET or POST. Concrete use cases include serializing HTTP methods for configuration files and using them as keys in maps.",
      "description_length": 329,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Meth.Set.Diff",
      "library": "shuttle_http",
      "description": "This module represents differences between sets of HTTP methods, supporting operations to compute, apply, and serialize these differences. It works with sets of `Shuttle_http.Meth.Set.Elt.t` values, enabling precise tracking of additions and removals. Concrete use cases include synchronizing HTTP method configurations across services and generating patches for API route updates.",
      "description_length": 381,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Client.Address.Hash_set",
      "library": "shuttle_http",
      "description": "This module implements hash sets of HTTP client addresses with operations for creation, equality checking, S-expression conversion, and binary serialization. It directly supports efficient set operations, configuration parsing, and network transmission of client address collections. Concrete use cases include tracking connected clients, filtering requests, and synchronizing address data across distributed nodes.",
      "description_length": 415,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Client.Address.Map",
      "library": "shuttle_http",
      "description": "This module facilitates the creation, transformation, and comparison of maps using client addresses as keys, supporting conversions from lists, arrays, and hashtables while ensuring type-safe handling of duplicate keys and structured data. It includes serialization via S-expressions and binary I/O, hashing, and testing utilities, targeting applications in routing configuration, versioned data management, and HTTP client address mapping.",
      "description_length": 440,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Meth.Map.Provide_of_sexp",
      "library": "shuttle_http",
      "description": "This module provides a function `t_of_sexp` that constructs a map from S-expressions, using a provided function to convert the values. It works with S-expressions and maps where keys are determined by the `Key` module and values are of a generic type. A concrete use case is parsing configuration data serialized in S-expression format into a structured map for further processing.",
      "description_length": 381,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Hash_queue",
      "library": "shuttle_http",
      "description": "This module offers functions to manipulate a hybrid hash table and queue structure, supporting ordered insertion/removal at both ends, key-based lookups, and transformations like folding or mapping over elements. It operates on hash queues mapping `Shuttle_http.Client.Address.t` keys to arbitrary data, enabling efficient reordering, aggregation, and serialization workflows. Typical use cases include managing ordered collections with frequent structural updates, such as prioritizing network requests or buffering data streams with keyed metadata.",
      "description_length": 550,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Set",
      "library": "shuttle_http",
      "description": "This module provides set-theoretic operations like union, difference, and mapping over HTTP client addresses, combined with data conversion tools for S-expressions, binary formats, and hashable representations. It works with sets of structured network addresses (`Elt.t`) and supports use cases such as configuration synchronization, test data generation with Quickcheck, and persistent storage of routing tables. Serialization capabilities and efficient set comparisons make it suitable for managing dynamic address collections in distributed HTTP client systems.",
      "description_length": 564,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address.Replace_polymorphic_compare",
      "library": "shuttle_http",
      "description": "This module defines comparison operations for `Shuttle_http.Client.Address.t` values, including standard operators like `<`, `>`, `=`, and functions like `compare`, `equal`, `min`, and `max`. It enables ordering and equality checks on client address instances. Concrete use cases include sorting lists of addresses, enforcing ordering constraints, and comparing endpoints for routing or logging purposes.",
      "description_length": 404,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Map.Provide_bin_io",
      "library": "shuttle_http",
      "description": "This module implements binary serialization and deserialization for maps where keys are of type `Key.t` and values are associated with `Shuttle_http.Meth.Map.t`. It provides functions to compute binary size, read and write values in binary format, and defines the necessary type class instances for use with Bin_prot. Concrete use cases include persisting or transmitting HTTP method mappings in a binary format, such as saving to disk or sending over a network.",
      "description_length": 462,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Map.Provide_hash",
      "library": "shuttle_http",
      "description": "Implements hash folding for HTTP method maps, allowing efficient computation of hash values over map contents. Works with `Shuttle_http.Meth.Map.t` structures, which associate HTTP methods to values. Enables use cases like caching or equality checks based on method-specific data.",
      "description_length": 280,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Client.Oneshot",
      "library": "shuttle_http",
      "description": "This module executes a single HTTP client request to a specified address, supporting optional SSL configuration for secure connections. It handles SSL certificate verification based on provided hostname or custom validation logic. Use it to make ad-hoc HTTP calls with fine-grained control over connection parameters like timeouts and SSL settings.",
      "description_length": 348,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Persistent",
      "library": "shuttle_http",
      "description": "This module implements durable HTTP clients that automatically reconnect to a service when the connection is lost, using a user-defined address resolution callback. It works with HTTP requests and responses, managing persistent connections across network interruptions. Use this when building resilient clients for services that may become temporarily unreachable, ensuring requests can be retried once connectivity is restored.",
      "description_length": 428,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Ssl",
      "library": "shuttle_http",
      "description": "This module manages SSL/TLS configuration for HTTPS clients, providing a `create` function to construct SSL contexts with options like protocol version, certificate validation, cipher suites, and client certificates. It works with SSL connections using types like `t`, `Async_ssl.Version.t`, and `Async_ssl.Verify_mode.t`, supporting use cases such as mutual TLS authentication and custom certificate verification. It is used to securely configure HTTP clients for encrypted communication with server endpoints.",
      "description_length": 511,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Parser.Private",
      "library": "shuttle_http",
      "description": "Parses an HTTP request method from a bigstring buffer, returning the method and the number of bytes consumed. Works directly with raw byte strings and position/length parameters to enable efficient, low-level parsing. Useful for implementing custom HTTP servers or network tools that need to process request headers directly.",
      "description_length": 325,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Replace_polymorphic_compare",
      "library": "shuttle_http",
      "description": "This module overrides polymorphic comparison operators to provide direct comparisons between HTTP method values, ensuring correct ordering and equality checks. It defines standard comparison functions like `compare`, `equal`, and operators such as `<`, `>`, `<=`, `>=`, and `<>` specifically for `Shuttle_http.Meth.t` values. These operations are useful when sorting or comparing HTTP methods directly, such as in routing logic or method filtering.",
      "description_length": 448,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Server.Ssl",
      "library": "shuttle_http",
      "description": "This module defines and constructs SSL configuration options for HTTPS servers, including certificate and key file paths, allowed ciphers, and SSL versions. It works with string paths, cipher lists, and SSL version and option types from Async_ssl. Use this module to set up secure HTTPS servers with custom SSL contexts, such as requiring client certificate verification or specifying trusted CAs.",
      "description_length": 397,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client.Address",
      "library": "shuttle_http",
      "description": "This module defines a type for HTTP client addresses with operations for comparison, validation, and serialization, including bounds checking and sorting utilities. It provides specialized data structures like maps, sets, hash tables, and queues keyed by addresses to enable efficient lookups and structured manipulation of network address data. These capabilities are used in routing logic, configuration management, and client connection tracking systems.",
      "description_length": 457,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Server.Config",
      "library": "shuttle_http",
      "description": "This module defines configuration parameters for an HTTP server, including buffer sizes, connection limits, timeouts, and SSL settings. It provides a `create` function to construct configurations with optional fields and a `default` configuration for convenience. The `sexp_of_t` function serializes configurations for debugging or logging.",
      "description_length": 340,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth.Set",
      "library": "shuttle_http",
      "description": "This module offers set operations for HTTP methods, including creation from lists or arrays, transformations through mapping and filtering, and set difference computations. It manipulates sets of HTTP methods while supporting conversions to maps, S-expressions, and binary representations, along with hashing and property-based testing utilities. It is useful for implementing API routing logic, serializing method sets for storage or transmission, and validating behavior in test scenarios.",
      "description_length": 491,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Meth.Map",
      "library": "shuttle_http",
      "description": "This module provides operations for creating and manipulating maps where keys are HTTP methods, supporting transformations, comparisons, and aggregation through folding and reduction. It includes utilities for serializing these maps using S-expressions and binary formats, along with tools for property-based testing and hash generation, primarily used for managing routing tables and synchronizing method-based data structures in HTTP applications.",
      "description_length": 449,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Body.Stream",
      "library": "shuttle_http",
      "description": "This module handles streaming HTTP bodies by providing functions to create, consume, and manage byte streams as they are transmitted over HTTP. It works with `t` values representing stream instances, which are backed by `Async.Pipe.Reader.t` pipes and support operations like iteration, folding, and draining. Concrete use cases include sending large file uploads or real-time data in HTTP responses without loading the entire body into memory, and ensuring proper cleanup when connections are closed or streams are drained.",
      "description_length": 524,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Parser",
      "library": "shuttle_http",
      "description": "Parses HTTP requests, responses, and chunked data from bigstring buffers, returning structured values and byte offsets. Handles partial and complete parsing states, supporting incremental processing of network streams. Useful for implementing HTTP servers or clients that require direct control over buffer management and parsing steps.",
      "description_length": 336,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Status",
      "library": "shuttle_http",
      "description": "This module provides utilities for working with HTTP status code classifications, including serialization to S-expressions, bidirectional conversion with integers and strings, and comprehensive support for property-based testing (generation, observation, shrinking). It operates on polymorphic variant types representing distinct HTTP status categories (informational, success, redirection, client/server errors) and a unified type encompassing all status codes. Specific use cases include validating status code conversions, exhaustively enumerating possible values for testing, and deriving type-class-like functionality for comparison, hashing, and error handling.",
      "description_length": 667,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Headers",
      "library": "shuttle_http",
      "description": "This module manages HTTP headers represented as lists of key-value pairs. It supports operations like adding, removing, and querying headers, with case-sensitive key matching, and provides serialization to and from S-expressions. Use cases include constructing and manipulating HTTP request/response headers, such as setting content types, parsing cookies, or handling authentication tokens.",
      "description_length": 391,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Response",
      "library": "shuttle_http",
      "description": "This module constructs and manipulates HTTP responses, supporting operations to create responses with custom status, headers, body, and version. It provides accessors to retrieve response metadata such as status code, headers, and transfer encoding, and utilities to modify headers by adding, removing, or replacing them. Concrete use cases include building custom HTTP responses for a server, handling header logic during response generation, and managing connection persistence or chunked encoding in HTTP communication.",
      "description_length": 522,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Version",
      "library": "shuttle_http",
      "description": "Represents HTTP protocol versions as a single enumerated type, currently supporting `Http_1_1`. Provides functions to convert values to and from S-expressions and to obtain string representations. Useful for serializing and deserializing HTTP version information in network communication contexts.",
      "description_length": 297,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Meth",
      "library": "shuttle_http",
      "description": "This module provides operations for handling HTTP methods through an enumerated type `t`, supporting serialization, comparison, hashing, and semantic classification (e.g., safety, idempotency, cacheability). It includes utilities for string conversion, property-based testing, and efficient method set/map manipulations, primarily used in routing logic and request filtering where method-specific behaviors or constraints must be enforced.",
      "description_length": 439,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Server",
      "library": "shuttle_http",
      "description": "This module implements HTTP server functionality with support for handling requests and responses over TCP, including SSL/TLS encryption. It provides functions to start servers on specific addresses, access connection metadata like peer addresses and SSL certificates, and configure server behavior through structured options. Concrete use cases include building REST APIs, serving static files, and handling secure connections with client certificate verification.",
      "description_length": 465,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Shuttle_http.Request",
      "library": "shuttle_http",
      "description": "This module constructs and manipulates HTTP request objects, providing direct access to their method, path, version, headers, and body. It supports modifying requests by adding, replacing, or removing headers, handling transfer encoding, and inspecting header values. Concrete use cases include building custom HTTP requests for clients, validating incoming request headers, and adjusting request payloads in middleware.",
      "description_length": 420,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Body",
      "library": "shuttle_http",
      "description": "This module represents HTTP message bodies with support for empty, fixed-length string, and streaming content. It provides functions to construct and convert between these representations, including streaming integration with Async pipes for efficient handling of large data. Use cases include sending large file uploads or real-time data in HTTP responses without loading the entire body into memory.",
      "description_length": 401,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http.Client",
      "library": "shuttle_http",
      "description": "This module implements HTTP client functionality for initiating secure and non-secure connections, sending requests, and handling responses over TCP. It works with structured types like `Address.t` for endpoints, `Ssl.t` for secure communication, and `Request.t`/`Response.t` for message payloads, supporting concrete operations such as connection setup, SSL handshake, request dispatch, and client lifecycle management. It is used to build robust HTTP clients with support for persistent connections, one-time requests, and secure communication via TLS.",
      "description_length": 554,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Shuttle_http",
      "library": "shuttle_http",
      "description": "This module implements HTTP clients and servers with support for secure communication, request/response handling, and low-level parsing. It works with structured types like requests, responses, headers, and bodies, enabling concrete operations such as routing, middleware processing, and streaming data transfer. Use cases include building REST APIs, handling large file uploads, and implementing custom HTTP clients with TLS support.",
      "description_length": 434,
      "index": 51,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 52,
    "meaningful_modules": 52,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 667,
    "min_description_length": 214,
    "avg_description_length": 403.0192307692308,
    "embedding_file_size_mb": 0.7537860870361328
  }
}