{
  "package": "qbf",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:04:19.086353",
  "modules": [
    {
      "module_path": "Qbf.QFormula",
      "library": "qbf",
      "description": "This module represents quantified Boolean formulas with explicit quantifiers and propositional subformulas. It supports constructing formulas using universal and existential quantifiers, simplifying formulas, converting to conjunctive normal form (CNF) with scoped symbol generation, and comparing or printing formulas. Concrete use cases include formal verification tasks, logic synthesis, and solving quantified satisfiability problems.",
      "description_length": 438,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qbf.Lit",
      "library": "qbf",
      "description": "This module represents quantified Boolean formula literals as integers, providing operations to create, negate, and manipulate literals with sign and absolute value functions. It supports comparisons, hashing, and printing, along with generating fresh unique literals. Concrete use cases include building and transforming QBF expressions, tracking variable signs, and managing literal identities in solvers or proof systems.",
      "description_length": 424,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qbf.QCNF",
      "library": "qbf",
      "description": "Represents quantified Boolean formulas in conjunctive normal form with universal and existential quantifiers over propositional variables. Supports construction via quantification and proposition injection, structural comparison, hashing, and customizable printing. Used for formal verification tasks requiring precise manipulation of quantified logical expressions.",
      "description_length": 366,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Qbf.Formula",
      "library": "qbf",
      "description": "This module provides operations for constructing, simplifying, and analyzing propositional logic expressions, including logical connectives, literals, and constants, along with utilities for comparison, hashing, and structured output. It supports transformations like converting formulas into",
      "description_length": 292,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qbf.CNF",
      "library": "qbf",
      "description": "This module represents Boolean formulas in conjunctive normal form (CNF) using clauses composed of literals. It provides operations for equality checking, comparison, hashing, and customizable printing of CNF formulas. Use this module when manipulating or analyzing logical formulas in CNF, such as in SAT solving or logic synthesis tasks.",
      "description_length": 339,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qbf",
      "library": "qbf",
      "description": "This module implements quantified Boolean formula (QBF) processing with explicit support for universal and existential quantifiers over propositional variables. It provides data structures for literals, formulas, and CNF representations, along with solver integration for determining satisfiability. Concrete use cases include formal verification, logic synthesis, and solving quantified satisfiability problems using custom solvers.",
      "description_length": 433,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Quantor.Raw",
      "library": "qbf.quantor",
      "description": "This module provides low-level operations for interacting with a QBF solver, including creating a solver instance, adding literals to clauses, opening quantifier scopes, and querying the solver's current status or variable assignments. It works directly with QBF formulas through literals and quantifier scopes, enabling precise control over formula construction and solving. Concrete use cases include building and solving quantified Boolean formulas incrementally, and extracting model assignments for specific literals.",
      "description_length": 522,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Quantor",
      "library": "qbf.quantor",
      "description": "This module provides direct access to a QBF solver's low-level operations, allowing creation of solver instances, addition of literals to clauses, and manipulation of quantifier scopes. It works with QBF formulas represented via literals and quantifier blocks, supporting incremental formula construction and solving. Concrete use cases include implementing custom QBF solving strategies and extracting variable assignments from solved formulas.",
      "description_length": 445,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 522,
    "min_description_length": 292,
    "avg_description_length": 407.375,
    "embedding_file_size_mb": 0.11637115478515625
  }
}