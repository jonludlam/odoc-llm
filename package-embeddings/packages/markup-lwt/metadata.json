{
  "package": "markup-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:50.643177",
  "modules": [
    {
      "module_path": "Markup_lwt.Encoding",
      "library": "markup-lwt",
      "description": "This module provides an asynchronous `decode` function that processes character streams into integer streams using a specified encoding. It works with `Markup.Encoding.t` encodings, character streams, and location-based error reporting via Lwt promises. Use it to decode input streams in web or I/O applications where asynchronous processing is required.",
      "description_length": 354,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Markup_lwt",
      "library": "markup-lwt",
      "description": "This module enables asynchronous parsing and generation of XML and HTML using stream-based processing, bridging Markup.ml's streaming model with Lwt's concurrency. It supports transformations between character streams, Markup signals, and XML trees, with core operations like decoding, encoding, and signal processing available through Lwt-aware functions. Submodules extend functionality with specific utilities such as asynchronous character stream decoding using `Markup.Encoding.t`, enabling efficient handling of large documents and real-time stream filtering across Unix and JavaScript platforms. Example uses include concurrent XML tree construction from encoded inputs and non-blocking I/O-driven markup transformations.",
      "description_length": 728,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Markup_lwt_unix",
      "library": "markup-lwt.unix",
      "description": "This module provides functions to convert between Lwt_io channels and byte streams, enabling asynchronous reading from and writing to files and input/output channels. It supports operations like creating a stream from a file or channel, and writing stream contents to a channel or file. Concrete use cases include processing large files asynchronously, streaming network data, and handling input/output in event-driven applications.",
      "description_length": 432,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 728,
    "min_description_length": 354,
    "avg_description_length": 504.6666666666667,
    "embedding_file_size_mb": 0.011309623718261719
  }
}