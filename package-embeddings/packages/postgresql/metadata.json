{
  "package": "postgresql",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:34.506005",
  "modules": [
    {
      "module_path": "Postgresql.Notification",
      "library": "postgresql",
      "description": "Handles asynchronous notifications from PostgreSQL, providing access to the relation name, backend process ID, and optional payload data. Works with database event triggers that send notifications via `NOTIFY`. Use to react to database events such as updates or state changes in real time.",
      "description_length": 289,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Postgresql.Error_field",
      "library": "postgresql",
      "description": "This module defines a polymorphic variant type representing specific error fields returned by PostgreSQL, such as severity, SQL state, message details, and source location. It includes a function to convert these error fields to their corresponding string representations. Use this module when handling or inspecting detailed error information from PostgreSQL database operations.",
      "description_length": 380,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Postgresql.Error_code",
      "library": "postgresql",
      "description": "This module defines a comprehensive set of error codes corresponding to PostgreSQL SQLSTATE codes and provides conversions between these codes and their string representations. It works with the enumerated type `t` representing PostgreSQL error conditions and strings for external interaction. Use this module to interpret or handle PostgreSQL error codes programmatically, such as mapping database errors to specific application logic responses or logging detailed error information.",
      "description_length": 484,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Postgresql.FFormat",
      "library": "postgresql",
      "description": "This module defines the field format types used when interacting with PostgreSQL database queries, specifically supporting `TEXT` and `BINARY` formats. It allows specifying how data should be encoded or decoded during data transfer between the application and the database. For example, it can determine whether binary data like UUIDs or JSON should be handled in text or native binary form during query execution or result parsing.",
      "description_length": 432,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Postgresql",
      "library": "postgresql",
      "description": "This module provides a low-level interface for interacting with PostgreSQL databases, handling type conversions, error reporting, and data transfer control. It supports operations like mapping OCaml types to database formats, interpreting error statuses, and managing COPY operations with configurable text or binary encoding. You can build type-safe query layers, handle notifications asynchronously, and manage connections with fine-grained control over data representation. Submodules enhance this functionality with specific tools for error field inspection, SQLSTATE code handling, format selection, and real-time notification processing.",
      "description_length": 643,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 5,
    "filtered_empty_modules": 2,
    "retention_rate": 0.7142857142857143
  },
  "statistics": {
    "max_description_length": 643,
    "min_description_length": 289,
    "avg_description_length": 445.6,
    "embedding_file_size_mb": 0.0186004638671875
  }
}