{
  "package": "postgresql",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:59:28.688476",
  "modules": [
    {
      "module_path": "Postgresql.Error_field",
      "library": "postgresql",
      "description": "This module defines a polymorphic variant type representing specific error fields returned by PostgreSQL, such as severity, message, and position details. It includes a function to convert these error fields into their corresponding string representations. Use this module when handling or inspecting detailed error information from PostgreSQL database operations.",
      "description_length": 364,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Postgresql.FFormat",
      "library": "postgresql",
      "description": "This module defines the format types used for data transmission between the client and PostgreSQL database. It supports two specific formats: `TEXT` for string-based data representation and `BINARY` for raw byte-oriented data. These formats are used to specify how query results or input parameters should be encoded or decoded during database interactions.",
      "description_length": 357,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Postgresql.Notification",
      "library": "postgresql",
      "description": "Handles asynchronous notifications from a PostgreSQL database. It defines a type `t` with fields for the relation name, backend process ID, and optional payload data. This module is used to receive and process real-time notification events sent by the database, such as those triggered by `NOTIFY` commands.",
      "description_length": 307,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Postgresql.Error_code",
      "library": "postgresql",
      "description": "This module defines a comprehensive set of error codes corresponding to PostgreSQL server errors, represented as a variant type `t`. It includes functions to convert error codes to human-readable strings (`to_string`) and to map SQLSTATE strings to their corresponding error code (`of_sqlstate`). These operations are used to interpret and handle database error responses directly in OCaml code, such as in error handling logic after database queries or during connection management.",
      "description_length": 483,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Postgresql",
      "library": "postgresql",
      "description": "This module supports encoding and decoding data formats, error diagnostics, and connection state management for PostgreSQL interactions. It operates on SQL type representations like `ftype` and `oid`, handles error codes and fields, and manages connection parameters and asynchronous notifications. Use cases include building custom ORMs, processing binary data streams, and implementing real-time database event listeners.",
      "description_length": 423,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 5,
    "filtered_empty_modules": 2,
    "retention_rate": 0.7142857142857143
  },
  "statistics": {
    "max_description_length": 483,
    "min_description_length": 307,
    "avg_description_length": 386.8,
    "embedding_file_size_mb": 0.07284832000732422
  }
}