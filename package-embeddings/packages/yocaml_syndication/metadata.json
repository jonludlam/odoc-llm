{
  "package": "yocaml_syndication",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-07-15T23:08:53.541760",
  "modules": [
    {
      "module_path": "Yocaml_syndication.Xml.Attr",
      "library": "yocaml_syndication",
      "description": "This module represents XML attributes with support for namespaces, allowing construction of attributes from various primitive types like strings, integers, and booleans. It provides functions to create attributes with optional namespace qualification and handles value escaping for special characters. Concrete use cases include building RSS or Atom feed elements where attributes such as `href`, `type`, or `length` must be correctly formatted within XML nodes.",
      "description_length": 462,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_syndication.Media_type",
      "library": "yocaml_syndication",
      "description": "This module defines a comprehensive set of media type constants conforming to common MIME types, primarily used to represent enclosures in syndication feeds. It includes specific types for audio, video, images, documents, archives, and structured data formats like JSON and XML. The `to_string` function converts these types into their standard string representations, enabling correct serialization in feed outputs.",
      "description_length": 416,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_syndication.Lang",
      "library": "yocaml_syndication",
      "description": "This module defines a type-safe representation of languages following the ISO-639-2 standard, including common regional variants and an escape hatch for custom languages. It provides direct conversions to and from string representations. Useful for generating correctly formatted language tags in RSS or Atom feeds based on standardized codes.",
      "description_length": 343,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Datetime",
      "library": "yocaml_syndication",
      "description": "This module extends datetime handling with timezone support, specifically for generating RSS and Atom syndication feeds. It provides functions to construct, compare, and format datetime values, including RFC 3339 serialization required by Atom feeds. Concrete use cases include associating publication dates with blog posts and ensuring correct timezone-aware string formatting for feed consumers.",
      "description_length": 397,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_syndication.Xml",
      "library": "yocaml_syndication",
      "description": "This module structures and prints XML documents for syndication feeds using simple node and attribute combinators. It supports constructing elements like nodes, leaves, and CDATA sections, with handling for optional content and proper escaping, while the attributes submodule manages namespace-aware attributes from primitives like strings and integers. Together, they enable building RSS or Atom feeds with correctly formatted elements and attributes such as `href` or `length`, allowing nested structures and optional fields. Specific examples include generating valid XML trees with escaped text and namespace-qualified attributes for feed metadata.",
      "description_length": 652,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_syndication.Person",
      "library": "yocaml_syndication",
      "description": "This module represents entities such as people or organizations in syndication feeds. It provides functions to construct a person with optional URI and email, and to convert the person into various XML node formats required by Atom, RSS2, and OPML standards. It directly supports generating owner name, email, and ID nodes for OPML, a person node for Atom feeds, and a string representation for RSS2.",
      "description_length": 400,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Rss1",
      "library": "yocaml_syndication",
      "description": "This module implements the RSS1 specification for generating syndication feeds, focusing on historical compatibility. It provides functions to construct RSS1 elements like `image` and `item`, and supports building complete feeds from custom data or article collections. Concrete use cases include generating RDF-based feeds for legacy systems or maintaining backward compatibility with existing RSS1 consumers.",
      "description_length": 410,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Text_input",
      "library": "yocaml_syndication",
      "description": "This module defines a single data type `t` representing a text input element in RSS feeds. It provides functions to construct a text input with title, description, name, and link fields, and to convert it to various RSS XML node formats. It is used to generate `<textInput>` elements in RSS 1.0 and 2.0 feeds, typically for embedding search or feedback forms in aggregators that support it.",
      "description_length": 390,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Category",
      "library": "yocaml_syndication",
      "description": "This module represents categories in syndication feeds, providing functions to construct category elements with optional scheme and label metadata. It supports converting categories to Atom and RSS2 XML nodes for inclusion in feed documents. Use this module to define and serialize category information for blog posts or feeds in Atom or RSS2 formats.",
      "description_length": 351,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Tz",
      "library": "yocaml_syndication",
      "description": "This module defines a set of timezone values and conversion functions for representing time offsets in syndication feeds. It supports operations to construct custom timezones using fixed offsets and to convert timezone values into string formats required by RFC822 and RFC3339. It is used to generate correct timezone-aware timestamps in RSS and Atom feed entries.",
      "description_length": 364,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Rss2",
      "library": "yocaml_syndication",
      "description": "This module implements the RSS 2 specification for generating syndication feeds. It provides functions to construct feed elements such as items, enclosures, GUIDs, images, and cloud notifications, working with data types like days, cloud protocols, and feed metadata. Concrete use cases include building RSS feeds from article lists, generating item GUIDs from titles or links, and embedding media enclosures with specific MIME types and lengths.",
      "description_length": 446,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Generator",
      "library": "yocaml_syndication",
      "description": "This module constructs and serializes feed generator metadata for syndication formats like Atom and RSS. It works with a record type containing a name, optional URI, and optional version, and provides functions to convert this data into corresponding XML nodes for Atom or RSS2 feeds. Use it to embed generator information in feeds, such as identifying the toolchain or version used to produce a static site.",
      "description_length": 408,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Atom",
      "library": "yocaml_syndication",
      "description": "This module enables the creation and serialization of ATOM syndication feeds through rich data modeling of entries, feeds, and content with support for text constructs (plain, HTML, XHTML), relation-typed links (Alternate, Self, Enclosure), and MIME-typed content. It provides utilities to map metadata like authors, timestamps, and update strategies while integrating with task-based workflows to generate feeds from heterogeneous data sources such as blog articles or custom domain models. Key use cases include building static site feeds with mixed content types, embedding enclosures, and maintaining valid ATOM structures with flexible linking semantics.",
      "description_length": 659,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Opml",
      "library": "yocaml_syndication",
      "description": "This module implements the OPML 1 and 2 specifications, focusing on constructing and serializing hierarchical outline documents. It provides functions to build `outline` elements with attributes like `text`, `xml_url`, and `title`, and to create specialized outlines for subscriptions or inclusions. Use cases include generating structured OPML feeds from custom data models and exporting hierarchical content such as blogroll lists or podcast subscriptions.",
      "description_length": 458,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication",
      "library": "yocaml_syndication",
      "description": "This module provides a comprehensive toolkit for generating syndication feeds in RSS, Atom, and OPML formats, with support for structured data, media enclosures, and timezone-aware timestamps. Key data types include representations for feeds, entries, categories, authors, and metadata constructs like generator and text input, all backed by operations for XML serialization and format-specific constraints. You can build fully-formed RSS2 or Atom feeds with custom content models, embed enclosures using MIME types, generate correctly formatted language and datetime fields, or produce OPML outlines for subscription lists and hierarchical data. The module enables both manual feed construction and integration with existing data pipelines, ensuring compatibility with standard syndication consumers.",
      "description_length": 801,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 801,
    "min_description_length": 343,
    "avg_description_length": 463.8,
    "embedding_file_size_mb": 0.05495738983154297
  }
}