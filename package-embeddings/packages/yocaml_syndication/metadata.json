{
  "package": "yocaml_syndication",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-06-18T16:34:49.103638",
  "modules": [
    {
      "module_path": "Yocaml_syndication.Xml.Attr",
      "description": "Provides functions to construct attributes with specific types such as string, integer, float, boolean, and character, along with an escaped string variant. Works with key-value pairs where values are wrapped in a type-safe structure. Used to create structured metadata for XML or similar formats requiring named attributes with typed values.",
      "description_length": 342,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_syndication.Rss1",
      "description": "Constructs RSS1 feed elements including images and items with specified titles, links, and descriptions. Operates on custom `image` and `item` types, and generates XML output for feeds. Builds feeds from arbitrary lists or article collections, using provided URLs and metadata.",
      "description_length": 277,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_syndication.Rss2",
      "description": "Provides functions to construct elements of an RSS2 feed, including cloud configurations, enclosures, GUID strategies, sources, images, and items. Works with types such as `cloud`, `enclosure`, `guid_strategy`, `source`, `image`, and `item` to represent specific RSS2 components. Used to generate structured RSS feeds from articles or arbitrary data, with support for customizing item links and GUID inference methods.",
      "description_length": 418,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_syndication.Atom",
      "description": "This module enables the construction of Atom feed components by assembling structured data such as articles, links, authors, and metadata using types like `text_construct`, `link`, `entry`, and `updated_strategy`. It handles content formats including text, HTML, and MIME, dynamically generating feed elements and links based on provided paths or metadata. Use cases include creating feeds compatible with Yocaml's archetype system and generating standardized XML-based content for syndication.",
      "description_length": 494,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Opml",
      "description": "Provides functions to construct and parse OPML documents, including outlines, subscriptions, and feeds, with support for both OPML 1.0 and 2.0 specifications. Works with data types such as `outline`, `t`, `Datetime.t`, and `Person.t` to represent hierarchical content and metadata. Enables creation of feed structures and conversion between in-memory representations and XML streams for use in podcasting or content aggregation tools.",
      "description_length": 434,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Lang",
      "description": "Provides functions to create and manipulate language representations, including lifting external language strings into a language type and converting language values to their string equivalents. Works with a custom type `t` that encapsulates language identifiers according to the ISO-639-2 standard, with support for manual additions. Used to handle language codes in applications requiring precise language identification and conversion, such as multilingual content management systems.",
      "description_length": 487,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Tz",
      "description": "Provides functions to create timezone offsets from integers, convert them to string representations in RFC822 and RFC3339 formats. Works with a custom type representing timezone offsets. Used to generate standardized timezone strings for date formatting and network protocols.",
      "description_length": 276,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Datetime",
      "description": "Provides functions to create and format datetime values with timezone awareness, including a comparison that ignores timezones. Operates on a custom datetime type extended with timezone information. Used to generate RFC 3339 formatted strings for date values in feeds.",
      "description_length": 268,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Text_input",
      "description": "Provides functions to construct and serialize text input elements for RSS feeds. Works with a structured type representing text input data, including title, description, name, and link. Used to generate RSS 1.0 and 1.0 channel XML nodes for search boxes or feedback forms.",
      "description_length": 272,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_syndication.Media_type",
      "description": "Encodes and decodes media-type information using a custom type, with a function to convert instances to their string representation. Works with a sealed type representing structured media type data. Used to serialize and compare media types in contexts like RSS feed parsing or content negotiation.",
      "description_length": 298,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Person",
      "description": "Provides functions to create and convert person data into OPML and Atom formats. Works with strings, XML nodes, and a custom type representing a person. Generates owner name, email, and ID nodes for OPML, and an Atom node with optional attributes.",
      "description_length": 247,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_syndication.Category",
      "description": "Constructs and converts category elements between Atom and RSS2 formats using a string term, optional scheme, and label. Works with the `t` type representing category data. Generates XML nodes suitable for embedding in Atom or RSS2 feeds.",
      "description_length": 238,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_syndication.Generator",
      "description": "Constructs and serializes feed generators with optional URI and version, supporting Atom and RSS2 formats. Works with string names, optional URI strings, and version strings to create generator structures. Used to embed specific feed source information in XML output for syndication feeds.",
      "description_length": 289,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_syndication.Xml",
      "description": "Encapsulates XML node construction and manipulation with typed attributes and values. Supports string, integer, float, boolean, character, and escaped string types, enabling precise metadata definition. Allows building and inspecting XML elements with structured, type-checked properties. Examples include creating a node with a boolean attribute or extracting a float value from an element's metadata.",
      "description_length": 402,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "yocaml_syndication",
      "description": "Provides functions to manage and execute build processes, including initializing a development environment and triggering compilation. Operates with system paths, configuration settings, and build artifacts. Used to set up isolated project environments and automate the build workflow.",
      "description_length": 285,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_syndication",
      "description": "Constructs and serializes syndication feeds in RSS and Atom formats, along with supporting structures like images, items, categories, and datetime values. Provides custom types for elements such as `image`, `item`, `entry`, `datetime`, and `category`, with functions to generate XML output, handle language and timezone data, and manage feed metadata. Enables creation of feeds from arbitrary data sources, including generating OPML outlines, RSS input elements, and Atom entries with structured metadata. Examples include building an RSS2 feed with custom GUID strategies, generating Atom entries with updated timestamps, and serializing media types for content negotiation.",
      "description_length": 675,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 16,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9411764705882353
  },
  "statistics": {
    "max_description_length": 675,
    "min_description_length": 238,
    "avg_description_length": 356.375,
    "embedding_file_size_mb": 0.05857086181640625
  }
}