{
  "package": "textutils_kernel",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:07:37.074917",
  "modules": [
    {
      "module_path": "Text_graph",
      "library": "textutils_kernel.text_graph",
      "description": "This module generates text-based bar graphs for visualizing numerical data directly in the terminal. It takes a list of labeled data points with string labels and float values, rendering them as a bar graph. The `render` function supports an optional `narrow` flag to adjust the graph's width for compact display.",
      "description_length": 313,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Utf8_text.Stable.V1",
      "library": "textutils_kernel.utf8_text",
      "description": "This module directly represents UTF-8 encoded text values with concrete operations for serialization and comparison. It supports conversion to and from standard OCaml strings and provides bin_prot and Sexp serialization functions. Use this module when handling UTF-8 text in contexts requiring binary encoding, such as network transmission or persistent storage.",
      "description_length": 362,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Utf8_text.Stable",
      "library": "textutils_kernel.utf8_text",
      "description": "This module handles UTF-8 text with precise serialization and comparison operations, ensuring correct binary encoding for transmission or storage. It provides a concrete data type for text values, supporting conversion to and from OCaml strings, along with bin_prot and Sexp serialization. You can use it to safely encode text for network protocols, file formats, or any system requiring strict UTF-8 handling. For example, it enables converting a string to a serialized binary format, comparing text values directly, or deserializing data from a stored or transmitted representation.",
      "description_length": 584,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Utf8_text",
      "library": "textutils_kernel.utf8_text",
      "description": "This library enforces valid UTF-8 text handling through structured traversal and transformation of Unicode characters, offering type-safe operations like comparison, folding, and membership checks. It includes a concrete text type that supports conversion to and from OCaml strings, along with serialization via bin_prot and Sexp for reliable storage or transmission. You can use it to encode text for network protocols, perform precise comparisons, or safely convert between string encodings. Submodules enhance this core functionality with additional utilities for parsing, manipulation, and structured data handling.",
      "description_length": 619,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Text_block.Up_or_down",
      "library": "textutils_kernel.text_block",
      "description": "Represents directional movement with values `Up` and `Down`. Serializes direction values to S-expressions via `sexp_of_t`. Useful for logging or transmitting directional state in parsing or traversal operations.",
      "description_length": 211,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Text_block.Boxed",
      "library": "textutils_kernel.text_block",
      "description": "This module provides combinators for constructing and combining boxed text blocks with padding, vertical and horizontal separators, and alignment controls. It operates on the `t` type, representing structured text cells with borders, and supports operations like `cell` for creating padded cells, `vcat` for vertically stacking blocks with horizontal dividers, and `hcat` for horizontally joining blocks with vertical dividers. It is useful for generating formatted text tables or UI-like layouts in terminal environments.",
      "description_length": 522,
      "index": 5,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Text_block.With_static_lengths",
      "library": "textutils_kernel.text_block",
      "description": "This module enforces type-safe alignment operations on lists of text blocks with statically known lengths, ensuring that transformations like `halign` and `valign preserve the number of elements. It operates on length-indexed lists, guaranteeing at the type level that aligned structures maintain their original size. For example, aligning a pair of text blocks horizontally results in a new pair, with alignment applied individually to each row. This enables precise formatting of fixed-size text grids where each row or column must maintain a consistent element count after transformation.",
      "description_length": 591,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Text_block",
      "library": "textutils_kernel.text_block",
      "description": "This module enables precise composition of terminal-friendly text layouts through alignment, concatenation, and structured formatting of 2D text blocks. It supports grid-aligned content with mixed-width characters, ANSI-styled segments, and nested structures like tables or S-expressions, while offering utilities for visual hierarchy (banners, indentation) and boundary framing (boxed rendering). The directional module handles movement state with `Up` and `Down` values, serializing to S-expressions for logging or traversal. The boxed module builds structured text cells with borders, padding, and combinators like `vcat` and `hcat` for assembling tables and UI-like layouts. The alignment module ensures type-safe alignment of fixed-size text grids, preserving element counts through transformations like `halign` and `valign`, enabling reliable formatting of row and column structures.",
      "description_length": 890,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 8,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8888888888888888
  },
  "statistics": {
    "max_description_length": 890,
    "min_description_length": 211,
    "avg_description_length": 511.5,
    "embedding_file_size_mb": 0.02948474884033203
  }
}