{
  "package": "textutils_kernel",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-06-18T16:33:05.930707",
  "modules": [
    {
      "module_path": "Text_block.With_static_lengths.List",
      "description": "Provides operations for building, traversing, and transforming lists, including functions like map, filter, and fold. Works with the polymorphic list type, supporting heterogeneous elements through the 'a and 'shape parameters. Used for processing sequences of data in pattern matching, aggregating results, and generating new lists from existing ones.",
      "description_length": 352,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Utf8_text.Stable.V1",
      "description": "Provides serialization and deserialization functions for a type using Bin_prot, including size calculation, writing, reading, and shape definition. Supports conversion to and from S-expressions and string representations. Designed for efficient binary encoding and decoding of structured data.",
      "description_length": 293,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Text_block.Boxed",
      "description": "Constructs and combines table-like structures using vertical and horizontal concatenation, inserting box separators. Operates on `t` type, which represents boxed cells or layouts, and `outer_t` as an alias for `t`. Builds complex layouts such as nested tables with customizable padding and alignment.",
      "description_length": 300,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Text_block.Up_or_down",
      "description": "Provides operations to represent and serialize a state that can be either \"up\" or \"down\" as a sexp format. Works with a polymorphic variant type that encodes two distinct states. Used to encode system status in a structured, human-readable format for logging or configuration.",
      "description_length": 276,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Text_block.With_static_lengths",
      "description": "Offers type-safe operations for aligning lists with fixed lengths, ensuring length invariants are enforced at compile time. Supports polymorphic lists with flexible element types, enabling transformations like mapping, filtering, and folding. Allows pattern matching on aligned lists, such as extracting elements from a list of known size. For example, safely deconstructing a two-element list after vertical alignment.",
      "description_length": 419,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Utf8_text.Stable",
      "description": "Encodes and decodes structured data using binary, S-expressions, and strings, with support for size estimation and format definition. Key types include the data structure being serialized and associated metadata. Operations allow converting values to binary streams, reconstructing them, and inspecting their shape, enabling efficient data persistence and communication. For example, a record type can be written to a file and later read back, or converted to a human-readable S-expression for debugging.",
      "description_length": 504,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "textutils_kernel",
      "description": "Provides string manipulation functions such as splitting on delimiters, trimming whitespace, and case conversion. Operates on OCaml's string and list types, with support for regular expressions. Used to process log lines, parse configuration files, and normalize user input.",
      "description_length": 274,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Text_block",
      "description": "Encapsulates text layout and alignment operations, supporting vertical and horizontal padding and alignment of lists and boxed structures. Manages state transitions between \"up\" and \"down\" using a sexp-serializable polymorphic variant, and enables type-safe manipulation of fixed-length lists with pattern matching and transformations. Combines table-like elements with customizable spacing and separators, allowing nested layouts and precise control over dimensions. Examples include aligning a list of two elements for safe deconstruction or serializing system status for logging.",
      "description_length": 582,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Text_graph",
      "description": "Generates terminal-based text graphs from labeled numerical data, using a list of string-value pairs. It constructs horizontal bars where each character represents a proportional unit of the value. Used to visually compare numeric values in log files or performance metrics directly in the console.",
      "description_length": 298,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Utf8_text",
      "description": "Provides serialization and deserialization capabilities for structured data using binary, S-expressions, and string formats, along with size estimation and format definition. Key types include the data structure being serialized and metadata, while operations include converting values to binary streams, reconstructing them, and inspecting their shape. A record can be written to a file and later reconstructed, or transformed into an S-expression for debugging. Supports efficient data persistence and inter-process communication.",
      "description_length": 532,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 582,
    "min_description_length": 274,
    "avg_description_length": 383.0,
    "embedding_file_size_mb": 0.03677177429199219
  }
}