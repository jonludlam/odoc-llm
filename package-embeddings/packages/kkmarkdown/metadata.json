{
  "package": "kkmarkdown",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 47,
  "creation_timestamp": "2025-08-15T12:36:06.734113",
  "modules": [
    {
      "module_path": "Lib.BlockRuleHeader.H1",
      "library": "kkmarkdown.lib",
      "description": "Implements parsing logic for H1 headers using an underline delimiter. Works with string input lines and maintains parsing state transitions for multi-line blocks. Used to identify and construct H1 headers in markdown documents by checking the first line and validating the underline pattern in subsequent lines.",
      "description_length": 311,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleCode.UnsafeBackquote",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of code blocks enclosed in backquotes, including unsafe variants. It tracks parsing state across lines and constructs block elements once closed. Useful for rendering Markdown-like code blocks with support for incomplete or unclosed blocks when forced.",
      "description_length": 285,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleStack.Strong",
      "library": "kkmarkdown.lib",
      "description": "This module implements span-rule parsing for strong emphasis formatting using delimiters like `**` or `__`. It works with strings and span lists, applying rules to transform text into formatted spans. A concrete use case is parsing Markdown-like syntax where double asterisks or underscores wrap text to indicate bold formatting.",
      "description_length": 329,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleA.Automatic",
      "library": "kkmarkdown.lib",
      "description": "Works with span rules and parsing states to automatically apply transformation logic. Provides `is_safe` for safety checks, `first_char` for character classification, and `construct` for rule-based span list generation. Used to parse and transform string input into structured span representations following specific grammatical rules.",
      "description_length": 335,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.SpanRuleStack.EmStrong",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of combined emphasis and strong formatting in markdown-like syntax, specifically for patterns like `***abc***` or `___abc___`. Works with string inputs and produces structured span lists representing nested formatting. Designed for use in parsers that need to recognize multi-character delimiters for text styling.",
      "description_length": 330,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleCode.Indent",
      "library": "kkmarkdown.lib",
      "description": "Handles indentation-based code blocks using spaces or tabs, validating and processing indented lines. It tracks parsing state across lines and constructs code blocks when indentation is consistent. Useful for parsing Markdown or similar formats where code blocks are defined by line indentation.",
      "description_length": 295,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleHeader.Sharp",
      "library": "kkmarkdown.lib",
      "description": "Implements parsing logic for Markdown-style header blocks using sharp symbols (e.g., `#`, `##`). Works with string inputs and maintains state to accumulate lines until a header block is complete. Used to construct HTML header elements (`<h1>` to `<h6>`) from lines starting with one to six sharps followed by optional trailing sharps and text.",
      "description_length": 343,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.FirstChar.Map",
      "library": "kkmarkdown.lib",
      "description": "Maps characters to lists of rules, enabling efficient lookups based on the first character of rule patterns. Uses a concrete type `t` to represent the mapping and supports membership checks and rule retrieval. Useful in parsing scenarios where rule application depends on the initial character of input tokens.",
      "description_length": 310,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleCode.UnsafeTilde",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of code blocks with tilde delimiters, including unsafe variants. Works with `state` to track parsing progress and `string` input lines. Used to start, continue, and finalize code block construction, determining safety and structure for blocks enclosed by tilde characters.",
      "description_length": 288,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleUnicode.Dec",
      "library": "kkmarkdown.lib",
      "description": "Handles decimal Unicode entity parsing, specifically for `&#nnnnnn;` syntax. Works with strings and span structures to construct parsed output. Used to convert numeric HTML entities into their corresponding Unicode characters within text processing pipelines.",
      "description_length": 259,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleCode.Tilde",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of code blocks enclosed with tildes in markup processing. It tracks parsing state across lines, validates opening and continuation lines, and builds block structures from collected lines. Used specifically for fenced code blocks in markdown-like syntax.",
      "description_length": 286,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleUnicode.Hex",
      "library": "kkmarkdown.lib",
      "description": "Implements parsing and validation for hexadecimal Unicode entities like `&#xhhhhh;`. Works with strings and span structures to identify valid hex sequences within Unicode text. Useful for processing HTML or XML content where hex-encoded characters appear in attributes or text nodes.",
      "description_length": 283,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.SpanRuleStack.Strike",
      "library": "kkmarkdown.lib",
      "description": "This module implements strike-through span rules using a stack-based approach, providing `is_safe`, `first_char`, and `construct` to handle parsing and application of strike-through formatting (e.g., `~~abc~~`). It works with strings and span lists, specifically targeting strike-through syntax in markup processing. A concrete use case is parsing Markdown-like strike-through annotations into structured span data during document rendering.",
      "description_length": 441,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleList.UlStar",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of unordered list blocks in a markdown-like syntax, specifically supporting lists with block-level elements when separated by blank lines. Works with string inputs and state tracking for incremental parsing, producing block structures via `construct`. Useful for rendering nested content like paragraphs or code blocks within list items when proper spacing is applied.",
      "description_length": 384,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleStack.Code",
      "library": "kkmarkdown.lib",
      "description": "This module handles span-based parsing rules for string literals, providing `is_safe` to check safety, `first_char` to retrieve the initial character, and `construct` to apply parsing rules recursively. It operates on strings and span lists, using a recursive parsing function and a state to generate optional spans. Concrete use cases include parsing quoted strings or code snippets with structured spans.",
      "description_length": 406,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.SpanRuleStack.Em",
      "library": "kkmarkdown.lib",
      "description": "This module implements span-rules for parsing emphasized text, such as `*abc*` or `_abc_`. It provides `is_safe`, `first_char`, and `construct` to handle matching and constructing spans for emphasis. Use it when parsing inline formatting in markup or document formats like Markdown.",
      "description_length": 282,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleList.UlMinus",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of unordered list blocks starting with a hyphen (`-`) in a markup language. It provides functions to initialize parsing state, process lines incrementally, and construct list blocks from accumulated lines. Useful when rendering markdown-like lists where hyphens denote list items.",
      "description_length": 296,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleCode.Backquote",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of code blocks enclosed in backquotes. It provides functions to start, continue, and finalize a code block, tracking parsing state and collecting lines. Useful for processing Markdown-like code blocks with backquote delimiters, determining block structure, and extracting content.",
      "description_length": 313,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleHeader.H2",
      "library": "kkmarkdown.lib",
      "description": "Implements header parsing for `<h2>` elements using an underline pattern. It tracks parsing state across lines, validating and accumulating content until the header rule is satisfied. Useful for parsing Markdown-style level-2 headers in a block-based parser.",
      "description_length": 258,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleInlineHTML.Div",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of unsafe inline HTML `div` blocks in a markdown-like parser. It provides functions to initialize, continue, and finalize a `div` block state, working with strings and state tracking to build block structures. Designed for use in unsafe mode where self-contained `div` tags are treated as standalone blocks.",
      "description_length": 340,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleList.Ol",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of ordered list blocks in a markdown-like parser. It tracks list state across lines, validates list item prefixes, and builds block structures from accumulated lines. Useful for rendering ordered lists with consistent numbering and indentation.",
      "description_length": 277,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleInlineHTML.Script",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of inline HTML script blocks in an unsafe mode. It processes lines of input to build script blocks, tracking state through `start` and `continue`, and constructs final block elements with `construct`. Useful when rendering raw HTML in contexts like markdown processing where inline script execution is explicitly allowed.",
      "description_length": 354,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleList.UlPlus",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of block-level markdown lists starting with '`+`' markers. It processes lines to build unordered list blocks, tracking parsing state across lines. Useful for converting markdown documents with nested `+`-prefixed lists into structured block elements.",
      "description_length": 266,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleA.UnsafeNormal",
      "library": "kkmarkdown.lib",
      "description": "This module defines a rule for parsing spans where the first character determines applicability. It provides `is_safe` to check safety, `first_char` to identify the trigger character, and `construct` to build spans using a recursive parser function. It is used to handle cases like parsing inline elements in markup languages where a specific starting character signals a span type.",
      "description_length": 382,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleList",
      "library": "kkmarkdown.lib",
      "description": "This module implements parsers for unordered and ordered list blocks in a markdown-like syntax, supporting various markers such as asterisks, plus signs, and hyphens for unordered lists, and numeric prefixes for ordered lists. It processes string inputs incrementally using state tracking to build structured block elements, handling nested content like paragraphs or code blocks within list items when separated by blank lines. Concrete use cases include parsing markdown documents into structured list blocks for rendering in a document processor or static site generator.",
      "description_length": 574,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleHr",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing horizontal rule blocks in markup, recognizing lines like `***` or `---` with varying spacing. Works with strings and a state type to track rule parsing progress. Used to detect and construct horizontal rule elements in a document parser.",
      "description_length": 253,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleEscape",
      "library": "kkmarkdown.lib",
      "description": "This module handles the escaping of special characters in HTML and markdown contexts. It provides a function to escape characters like `&`, `<`, and others into their corresponding HTML entities, and supports rules for escaping characters with backslashes in markdown. The module works with strings and span structures, specifically integrating with parsing functions that generate span lists. It is used when converting raw text into properly escaped HTML or markdown output, ensuring correct rendering and syntax preservation.",
      "description_length": 528,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleCode",
      "library": "kkmarkdown.lib",
      "description": "This module processes code blocks in markup formats using various delimiters and indentation. It provides functions to parse and construct code blocks enclosed in backquotes, tildes, or defined by indentation, tracking state and collecting lines. Use cases include parsing fenced and indented code blocks in Markdown, handling both safe and unsafe block variants, and extracting structured content from formatted text.",
      "description_length": 418,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.AllBlockRules",
      "library": "kkmarkdown.lib",
      "description": "Implements queries to retrieve block rules based on the first character of input. Works with character values and lists of first-class modules implementing the `Lib.BlockRule.S` signature. Used to efficiently select applicable block formatting rules in a parser or pretty-printer.",
      "description_length": 280,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.FirstChar",
      "library": "kkmarkdown.lib",
      "description": "Handles character-based rule categorization with three distinct pattern types: any character, a single character, or a list of characters. Provides efficient membership checks and rule retrieval through a specialized map structure. Designed for parsing applications where input token prefixes determine applicable rules.",
      "description_length": 320,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRule",
      "library": "kkmarkdown.lib",
      "description": "This module defines transformations for parsing block-level structures in a document, converting strings or lists of strings into spans or blocks. It includes functions for translating inline elements and grouping lines into structured blocks. Concrete use cases include processing markdown-like syntax into typed representations for rendering or analysis.",
      "description_length": 356,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleP",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of block-level markup rules in a document, focusing on identifying safe blocks and managing state transitions during input processing. Operates on strings and state structures to determine block boundaries and formatting. Used to parse blocks like code fences or quotes where line-by-line analysis and state tracking are required.",
      "description_length": 346,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.AllSpanRules",
      "library": "kkmarkdown.lib",
      "description": "This module provides a function `find` that retrieves span rules associated with a given starting character and exposes a list `any` of span rules that apply universally. It works with character values and lists of span rule modules. Use this module to efficiently query span formatting rules for text processing based on initial characters.",
      "description_length": 341,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleInlineHTML",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of inline HTML blocks for `div` and `script` tags in unsafe mode. Uses stateful operations to initialize, continue, and finalize block structures from raw input lines. Designed for markdown-like parsers needing to embed raw HTML blocks as standalone elements.",
      "description_length": 292,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.Utils",
      "library": "kkmarkdown.lib",
      "description": "This module handles string manipulation and parsing tasks such as checking for empty lines, trimming trailing characters, and extracting class names from annotations. It provides utilities for processing strings with specific formatting rules, including regular expressions for space handling and class name extraction. Use cases include cleaning up user input, parsing CSS-like class lists, and preparing strings for further processing.",
      "description_length": 437,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.RuleBr",
      "library": "kkmarkdown.lib",
      "description": "This module processes markdown lines containing `<br>` syntax by removing the line breaks and translating the remaining content into spans. It works with lists of strings representing markdown lines and produces lists of spans using a provided translation function. It is used specifically to handle line breaks during markdown-to-span conversion.",
      "description_length": 347,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.Kkmarkdown",
      "library": "kkmarkdown.lib",
      "description": "This module translates Markdown content into a structured format using the `Lib.Typ.t` type, supporting input from strings, files, or standard input. It includes a function to render translated content as a string, with optional RSS compatibility. Use cases include converting Markdown documents to HTML or other formats while controlling unsafe parsing rules and output suitability for RSS feeds.",
      "description_length": 397,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleQuote",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of quoted blocks in a markdown-like syntax. It tracks parsing state across lines, identifying when a block starts, continues, or should be forcibly constructed. Works with string inputs and state type to build structured block elements.",
      "description_length": 269,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleStack",
      "library": "kkmarkdown.lib",
      "description": "This module implements stack-based span-rule parsing for various text formatting styles, including emphasis, strong emphasis, combined emphasis-strong formatting, strike-through, and code spans. It provides functions like `is_safe`, `first_char`, and `construct` to process string inputs and generate structured span lists that represent formatted text. It is used for parsing inline markup in document formats like Markdown, handling delimiter matching and nesting through a stack-based strategy.",
      "description_length": 497,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleHeader",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of Markdown header blocks using both prefix (`#`) and underline styles. Processes string lines to detect and accumulate header content based on specific delimiter patterns. Used to construct HTML header elements (`<h1>` to `<h6>`) by validating and extracting header levels and text from markdown input.",
      "description_length": 319,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleUnicode",
      "library": "kkmarkdown.lib",
      "description": "Implements parsing and validation for hexadecimal and decimal Unicode entities in string and span structures. Processes HTML or XML content by converting hex (`&#xhhhhh;`) and decimal (`&#nnnnnn;`) encoded entities into Unicode characters. Used in text processing pipelines to decode numeric character references in attributes or text nodes.",
      "description_length": 341,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.Trans",
      "library": "kkmarkdown.lib",
      "description": "Translates lines of strings into a structured type, providing a `run` function that processes a list of strings and returns a value of type `Lib.Typ.t`. It operates on basic string lists and converts them into a typed representation defined by `Lib.Typ.t`. Useful for parsing and transforming raw string inputs into a domain-specific structure.",
      "description_length": 344,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleA",
      "library": "kkmarkdown.lib",
      "description": "Works with span rules and parsing states to automatically apply transformation logic. Provides `is_safe` for safety checks, `first_char` for character classification, and `construct` for rule-based span list generation. Used to parse and transform string input into structured span representations following specific grammatical rules.",
      "description_length": 335,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleImg",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and constructing image blocks from strings, using a stateful approach. It works with strings and a custom `state` type to track parsing progress, producing `block` values through `construct`. Useful for converting markdown-like image syntax into structured block elements during document processing.",
      "description_length": 315,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.SpanRule",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of inline elements in a string, maintaining state with a cursor position and a stack of parsed elements. It operates on a string input and tracks progress through a mutable cursor index and a stack structure representing nested inline syntax. This module is used to parse markdown-like inline formatting such as emphasis, links, or inline code.",
      "description_length": 360,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.Typ",
      "library": "kkmarkdown.lib",
      "description": "This module defines the abstract syntax tree for representing parsed Markdown documents, including elements like text formatting, links, lists, and code blocks. It provides a type hierarchy for blocks and inline spans, supporting structured manipulation of Markdown content. Concrete use cases include rendering Markdown to HTML, analyzing document structure, or transforming content programmatically.",
      "description_length": 401,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib",
      "library": "kkmarkdown.lib",
      "description": "This module provides rule-based parsing and transformation of markdown-like syntax into structured document elements, using block and span rules that operate on strings and state-tracking structures. It defines an abstract syntax tree (AST) for representing Markdown blocks and inline elements, enabling tasks like rendering to HTML, static analysis, or format conversion. Key operations include stack-driven inline formatting, delimiter-sensitive parsing, and extraction of semantic components (headers, code blocks, images) via specialized rule modules.",
      "description_length": 555,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 47,
    "meaningful_modules": 47,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 574,
    "min_description_length": 253,
    "avg_description_length": 346.3404255319149,
    "embedding_file_size_mb": 0.6815023422241211
  }
}