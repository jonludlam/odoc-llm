{
  "package": "kkmarkdown",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 49,
  "creation_timestamp": "2025-07-15T23:13:51.149981",
  "modules": [
    {
      "module_path": "Lib.SpanRuleA.Automatic",
      "library": "kkmarkdown.lib",
      "description": "Handles automatic rule application for span parsing, providing `construct` to apply a recursive parsing function and state to generate optional spans. Works with strings, span lists, and parsing states. Used to implement context-sensitive span transformations during text processing.",
      "description_length": 283,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleHeader.Sharp",
      "library": "kkmarkdown.lib",
      "description": "Implements parsing logic for Markdown-style header blocks using sharp symbols (`#`). It processes lines starting with one to six sharps followed by text, optionally ending with additional sharps, and tracks parsing state across lines. Useful for converting lines like `# Title` or `### Subtitle ###` into structured header blocks in a document parser.",
      "description_length": 351,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.SpanRule.S",
      "library": "kkmarkdown.lib",
      "description": "This module defines operations for applying span-level rules during parsing, specifically determining whether a rule is safe to apply, checking the first character of the span, and attempting to construct a span from a string using a recursive parsing function. It works with strings and span lists, using a stateful context to guide rule application. Concrete use cases include parsing inline elements like emphasis, links, or code spans in a markdown-like document structure.",
      "description_length": 477,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.SpanRuleStack.Strong",
      "library": "kkmarkdown.lib",
      "description": "This module implements span-based parsing rules for strong emphasis formatting, such as bold or underline, using a stack-based approach. It defines a rule that attempts to match and construct spans for strong emphasis, relying on a recursive parsing function and maintaining state during the parsing process. It works with strings and span lists, specifically handling cases where strong emphasis is applied to enclosed content.",
      "description_length": 428,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.FirstChar.Map",
      "library": "kkmarkdown.lib",
      "description": "Maps characters to lists of rules, enabling efficient lookups based on the first character of rule patterns. It supports membership checks, rule retrieval, and initialization from a list of rules. This module is used to accelerate parsing or pattern matching tasks where rule selection depends on initial character analysis.",
      "description_length": 324,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleUnicode.Hex",
      "library": "kkmarkdown.lib",
      "description": "This module handles hexadecimal Unicode character references in the form `&#xhhhhh;`. It provides validation via `is_safe`, character recognition with `first_char`, and rule-based parsing through `construct`, which integrates with span list generation. It operates on strings and span structures to support HTML-like entity decoding in document processing workflows.",
      "description_length": 366,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleList.UlMinus",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of unordered list blocks in markdown with a dash (`-`) prefix. It provides functions to initialize parsing state, process lines incrementally, and construct block elements once parsing is complete. This module is used specifically for rendering markdown lists where each list item starts with a hyphen.",
      "description_length": 318,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleUnicode.Dec",
      "library": "kkmarkdown.lib",
      "description": "Handles decimal Unicode entity parsing, specifically for numeric character references like `&#nnnnnn;`. Works with strings and span structures to identify and process encoded characters. Useful for decoding HTML or XML entities in text processing applications.",
      "description_length": 260,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRule.S",
      "library": "kkmarkdown.lib",
      "description": "This module defines operations for parsing and constructing block-level elements in a structured document. It includes functions to initialize parsing state, process subsequent lines, and build final block structures from collected lines. The module works with string inputs and stateful transitions, targeting use cases like parsing markdown blocks or similar hierarchical text formats.",
      "description_length": 387,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleStack.Strike",
      "library": "kkmarkdown.lib",
      "description": "This module implements strike-through span rules using a stack-based approach, specifically handling the parsing and application of `~~` delimiters. It provides `construct` to apply strike-through rules recursively, `is_safe` to check safety conditions, and `first_char` to identify the starting character of the rule. A concrete use case is parsing Markdown-like strike-through syntax into structured span elements during document processing.",
      "description_length": 443,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleStack.EmStrong",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of combined emphasis and strong formatting in markdown spans, specifically for triple-asterisk or triple-underscore syntax. Works with string inputs and produces lists of span elements, tracking parsing state. Used to convert raw text like `***abc***` into structured span representations without supporting nested formats.",
      "description_length": 339,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleList.Ol",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of ordered list blocks in a markdown-like parser. It tracks the state of list item parsing, validates line safety, and constructs list blocks using provided transformation functions. Useful for converting indented list items into structured document blocks.",
      "description_length": 290,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleCode.UnsafeBackquote",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of code blocks enclosed in triple backquotes, including unsafe variants. It tracks parsing state across lines, identifies the opening and closing delimiters, and constructs block elements from collected lines. Useful for rendering code blocks in markup languages like Markdown where backquote-based fencing is common.",
      "description_length": 333,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleHeader.H2",
      "library": "kkmarkdown.lib",
      "description": "Implements header parsing for level-2 headers using an underline pattern. It processes lines by checking the underline format and tracking parsing state, constructing a block when the header is fully defined. Works with string inputs and maintains state to handle multi-line parsing, suitable for parsing Markdown-like headers in document processors.",
      "description_length": 350,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleCode.UnsafeTilde",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of unsafe code blocks marked with tilde in markdown, managing state transitions for block start, continuation, and finalization. Operates on string input lines and maintains a state to accumulate content until the block closes. Used to construct raw code blocks that bypass normal sanitization, typically for embedding untrusted or specially formatted code content.",
      "description_length": 381,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleList.UlPlus",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of block-level Markdown lists starting with a `+` character. It provides functions to initialize parsing, process subsequent lines, and construct the final block structure, specifically for unordered lists with `+` markers. The module works with list items that may contain nested content, tracking parsing state and handling indentation and continuation logic.",
      "description_length": 377,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleStack.Code",
      "library": "kkmarkdown.lib",
      "description": "This module defines operations for processing span-based rules using a stack-oriented approach. It includes functions to check safety, retrieve the first character of a span, and construct spans by applying a parsing rule. It works with strings and span lists, primarily handling structured text like \"abc\" where spans represent nested or sequential elements. Use cases include parsing nested syntax structures where stack-based rule application ensures correct nesting or closure of spans.",
      "description_length": 490,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleInlineHTML.Div",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of inline HTML `div` elements in block-level markdown processing. It provides functions to initialize parsing state, continue processing lines, and construct final block elements, working with string inputs and state tracking. Useful for rendering raw HTML `div` blocks when unsafe mode is enabled.",
      "description_length": 331,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleStack.Em",
      "library": "kkmarkdown.lib",
      "description": "This module implements span-based rule processing for emphasis formatting, such as parsing *abc* or _abc_. It provides `is_safe`, `first_char`, and `construct` to validate, identify, and apply emphasis rules during span list construction. It works with strings and span structures, specifically handling cases where emphasis spans are nested or interleaved.",
      "description_length": 357,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleInlineHTML.Script",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of inline HTML script blocks in an unsafe mode. It provides functions to initialize, continue, and finalize script block processing, working with block rule states and string inputs. Useful for rendering raw HTML script tags directly within markdown content when safety is not a concern.",
      "description_length": 320,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleCode.Indent",
      "library": "kkmarkdown.lib",
      "description": "Handles indentation-based code block parsing with state transitions. It tracks indentation levels and line validity, using `state` to manage ongoing blocks. Useful for parsing multi-line code blocks where each line must maintain consistent indentation.",
      "description_length": 252,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleCode.Tilde",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of code blocks enclosed with tildes in markup processing. It tracks parsing state across lines, validates opening and continuation lines, and builds block structures from collected lines. Used specifically for fenced code blocks in markdown-like input where tilde characters delimit the block.",
      "description_length": 326,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleHeader.H1",
      "library": "kkmarkdown.lib",
      "description": "Implements parsing for level-1 headers using an underline pattern. It processes lines with a leading character tracked by `Lib.FirstChar.t` and accumulates lines until the underline is encountered. The module constructs a block once the header underline is found or when `force_construct` is enabled.",
      "description_length": 300,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleA.UnsafeNormal",
      "library": "kkmarkdown.lib",
      "description": "This module defines a rule for parsing spans in an unsafe manner, primarily used when handling malformed or untrusted input where strict validation is bypassed. It provides `is_safe` to indicate the rule's safety status, `first_char` to specify valid starting characters, and `construct` to apply the rule using a recursive parsing function. A typical use case involves parsing legacy or error-tolerant document formats where certain span structures must be interpreted leniently.",
      "description_length": 480,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleList.UlStar",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of unordered list blocks in a markdown-like parser. It tracks parsing state while processing lines, validating list item prefixes, and assembling content into a structured block. Uses a state type to manage incremental input and produces a block when the list structure is complete or forced.",
      "description_length": 325,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleCode.Backquote",
      "library": "kkmarkdown.lib",
      "description": "This module processes code blocks enclosed in backquotes, handling their parsing and construction. It tracks parsing state across lines, validating and accumulating content until a closing backquote is found or input ends. Use it to parse multi-line code blocks in markdown-like syntax, ensuring proper delimiters and content handling.",
      "description_length": 335,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleHeader",
      "library": "kkmarkdown.lib",
      "description": "This module parses Markdown-style headers using both prefix and underline syntaxes. It supports two main data types: lines of text and parsing state, with operations to process lines, detect header levels by sharp symbols or underline patterns, and construct header blocks. You can use it to parse lines like `# Title`, `### Subtitle ###`, or underlined headers such as `Title\\n=====`. The module tracks state across lines to correctly identify and build structured header blocks during document parsing.",
      "description_length": 504,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRule",
      "library": "kkmarkdown.lib",
      "description": "This module processes block-level elements in structured text, transforming strings or lists into blocks or spans. It manages parsing state transitions and builds hierarchical structures like paragraphs, lists, or headings, particularly for markdown-like syntax. Child modules handle line-by-line parsing, state initialization, and block construction. For example, it can parse a multi-line string into a list block or convert indented text into a code block.",
      "description_length": 459,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleImg",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and constructing image blocks in a markup language. It validates safety, processes lines to build image blocks incrementally, and supports forced construction when input ends. Works with strings, state, and block types, specifically for image-related syntax. Useful for rendering image blocks from structured input lines following a specific syntax rule.",
      "description_length": 370,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.RuleBr",
      "library": "kkmarkdown.lib",
      "description": "This module processes lines containing `<br>` tags by removing the markdown syntax and converting them into spans. It uses a provided function to translate lines without `<br>` and handles lists of strings representing markdown lines. A concrete use case is transforming markdown paragraphs with line breaks into HTML `<br>` elements during a larger document conversion process.",
      "description_length": 378,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleHr",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing of horizontal rule blocks in markdown-like input, recognizing lines with repeated characters such as `***`, `---`, or `* * *`. Works with string input and maintains parsing state to accumulate lines until a complete rule is formed. Used to identify and construct horizontal rule elements during document parsing.",
      "description_length": 328,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleCode",
      "library": "kkmarkdown.lib",
      "description": "This module processes various types of code blocks in markup-like syntax, supporting both delimiter-based and indentation-based parsing. It tracks parsing state across lines to identify block boundaries, accumulate content, and construct block elements for rendering or further processing. Key data types include parsing states and block structures, with operations for detecting opening and closing delimiters, handling line continuation, and validating indentation levels. Examples include parsing fenced code blocks with backquotes or tildes, handling unsafe raw content, and managing multi-line blocks requiring consistent indentation.",
      "description_length": 639,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.AllBlockRules",
      "library": "kkmarkdown.lib",
      "description": "Implements queries to retrieve block rules based on the first character of input. Works with character values and lists of block rule modules. Used to determine applicable block formatting rules in parsers that handle structured text.",
      "description_length": 234,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.Kkmarkdown",
      "library": "kkmarkdown.lib",
      "description": "This module translates Markdown content into a structured format using the `Lib.Typ.t` type, supporting input from strings, files, or standard input. It includes a function to render translated content back into a string, with optional RSS compatibility. Use cases include parsing Markdown documentation, converting user input to structured data, and generating sanitized output for feeds or displays.",
      "description_length": 401,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleA",
      "library": "kkmarkdown.lib",
      "description": "This module implements span parsing rules with support for both safe and unsafe transformations, enabling context-sensitive processing of text structures. It provides key operations like `construct` to apply recursive parsing functions, `is_safe` to check rule safety, and `first_char` to define valid starting points for span recognition. Data types include strings, span lists, and parsing states, which are used together to generate optional spans or handle malformed input. Example uses include lenient parsing of legacy documents and enforcing strict span transformations in structured text processing.",
      "description_length": 607,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRule",
      "library": "kkmarkdown.lib",
      "description": "This module processes span-level markup in strings, managing cursor position and a stack of parsing elements to handle nested inline formatting during markdown parsing. It supports operations like checking if a rule can be applied, parsing spans recursively, and validating the initial character of a span, working with strings and span lists in a stateful context. Concrete uses include parsing emphasis, links, and code spans, with submodules enabling rule application logic and span construction strategies. The module combines direct parsing functionality with rule evaluation and context management to support structured inline element recognition.",
      "description_length": 653,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleUnicode",
      "library": "kkmarkdown.lib",
      "description": "This module processes numeric Unicode character references in both hexadecimal and decimal formats, commonly found in HTML or XML entities. It provides validation, character recognition, and rule-based parsing operations that integrate with span list generation for structured document processing. Key functions include `is_safe` for safety checks, `first_char` for character identification, and `construct` for parsing encoded sequences from strings. For example, it can decode `&#x1F600;` or `&#128512;` into their corresponding Unicode characters within a span-aware document pipeline.",
      "description_length": 588,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleInlineHTML",
      "library": "kkmarkdown.lib",
      "description": "This module processes block-level inline HTML elements during markdown parsing, specifically supporting `div` and `script` tags in unsafe mode. It tracks parsing state across lines, allowing for multi-line block construction, and provides functions to initialize, continue, and finalize block processing based on tag type. The core operations accept string inputs and state trackers to build raw HTML blocks into the final document structure. For example, it enables embedding full `div` containers or JavaScript code blocks directly within markdown when explicitly allowed.",
      "description_length": 574,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.AllSpanRules",
      "library": "kkmarkdown.lib",
      "description": "This module provides a function `find` that retrieves a list of span rule modules based on a given initial character. It works with character values and lists of modules implementing `Lib.SpanRule.S`. A concrete use case is dynamically selecting parsing rules for a document based on the starting character of a span.",
      "description_length": 317,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.Utils",
      "library": "kkmarkdown.lib",
      "description": "This module provides functions for string manipulation and parsing, including checking for empty lines, trimming trailing spaces or sharp characters, and extracting class annotations from strings. It works primarily with strings and lists of strings, using regular expressions for pattern matching. Concrete use cases include preprocessing lines of code or markup, sanitizing input, and parsing class attributes from HTML-like syntax.",
      "description_length": 434,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.Trans",
      "library": "kkmarkdown.lib",
      "description": "Translates lines of input strings into a structured type, performing transformations based on the `unsafe` flag. It operates on lists of strings and converts them into values of type `Lib.Typ.t`. Useful for parsing and sanitizing input data during configuration or file processing tasks.",
      "description_length": 287,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.FirstChar",
      "library": "kkmarkdown.lib",
      "description": "This module manages the first character of rule patterns using three representations: `Any`, `One of char`, and `OneOf of char list`, enabling efficient matching and lookup. It includes a child module that maps characters to rule lists for fast retrieval based on initial character analysis. Operations include membership checks, rule initialization, and pattern-based selection. For example, it can quickly determine which rules match the start of an input string or check if a character belongs to a set of valid starting characters.",
      "description_length": 535,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.Typ",
      "library": "kkmarkdown.lib",
      "description": "This module defines the abstract syntax tree for representing parsed Markdown documents, including inline and block-level elements. It supports operations for constructing and manipulating structured document nodes such as headers, lists, emphasis, links, and code blocks. Concrete use cases include rendering Markdown to HTML, analyzing document structure, and transforming content during static site generation or documentation processing.",
      "description_length": 441,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.BlockRuleQuote",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of quoted blocks in a markup language. It tracks parsing state, identifies lines that start or continue a quote block, and constructs finalized block elements from collected lines. Useful for implementing blockquote syntax in a parser, where lines are processed sequentially to build nested or indented quote structures.",
      "description_length": 353,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib.SpanRuleEscape",
      "library": "kkmarkdown.lib",
      "description": "This module handles character escaping for HTML special characters and markdown backslash escapes during span parsing. It defines a parser rule that translates characters like `&` and `<` into their corresponding HTML entities and processes backslash-escaped characters in markdown. The module works with span lists and span parsing state, integrating directly into span rule processing pipelines.",
      "description_length": 397,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleP",
      "library": "kkmarkdown.lib",
      "description": "Handles parsing and construction of blocks in a structured text format. It tracks parsing state and provides functions to start, continue, and finalize blocks based on input lines. Useful for implementing block-level syntax rules in a markdown-like parser.",
      "description_length": 256,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.BlockRuleList",
      "library": "kkmarkdown.lib",
      "description": "This module processes unordered and ordered list blocks in markdown, supporting list items prefixed with `-`, `+`, or numeric markers. It provides data types to track parsing state incrementally and operations to initialize, update, and finalize list blocks based on line input. Functions allow constructing structured document elements from parsed lists, handling indentation, nesting, and continuation logic. For example, it can convert a series of lines starting with `-` into a structured unordered list block with nested content.",
      "description_length": 534,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lib.SpanRuleStack",
      "library": "kkmarkdown.lib",
      "description": "This module processes span-based formatting rules using a stack-oriented approach, enabling the parsing and construction of structured span elements from text with emphasis, strong emphasis, and strike-through syntax. It supports key operations like `construct` for applying rules recursively, `is_safe` for validating span boundaries, and `first_char` for identifying delimiter characters, working primarily with strings and span lists. Examples include converting `*abc*`, `**def**`, `~~ghi~~`, or `***jkl***` into nested or sequential span elements that represent formatted text structures.",
      "description_length": 593,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lib",
      "library": "kkmarkdown.lib",
      "description": "This module processes structured text input to parse and construct both block and inline elements, transforming Markdown-like syntax into a structured format. It supports key data types including lines of text, parsing states, and block or span structures, with operations to detect headers, lists, code blocks, images, horizontal rules, and inline formatting such as emphasis or links. You can use it to convert Markdown documents into typed representations, sanitize input, or render content to HTML, handling features like nested lists, fenced code blocks, span-level escapes, and Unicode character references. Specific examples include parsing `# Title` into a header block, converting `*emphasis*` into a span, or building a structured list from indented `-` prefixed lines.",
      "description_length": 779,
      "index": 48,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 49,
    "meaningful_modules": 49,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 779,
    "min_description_length": 234,
    "avg_description_length": 405.7959183673469,
    "embedding_file_size_mb": 0.17833328247070312
  }
}