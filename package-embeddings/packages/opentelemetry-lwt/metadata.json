{
  "package": "opentelemetry-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:57.760363",
  "modules": [
    {
      "module_path": "Opentelemetry_lwt.Logs",
      "library": "opentelemetry-lwt",
      "description": "This module enables structured logging and telemetry data handling through operations that create, serialize, and emit log records with contextual metadata. It works with log data structures like `log_record`, `scope_logs`, and `resource_logs`, which encapsulate timestamps, severity levels, trace context, and key-value attributes. Use cases include instrumenting applications for observability, converting logs to Protocol Buffers for transmission, and enriching log entries with dynamic values or service metadata.",
      "description_length": 517,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_lwt.Metrics",
      "library": "opentelemetry-lwt",
      "description": "This module creates and emits OpenTelemetry metrics, including gauges, sums, and histograms, with support for timestamps, attributes, and exemplars. It handles scalar and distribution-based measurements, allowing precise tracking of values like request latencies or error counts. Functions like `gauge`, `sum`, and `histogram` aggregate data points into metric types suitable for monitoring systems, while `emit` sends them to a collector.",
      "description_length": 439,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_lwt.Trace",
      "library": "opentelemetry-lwt",
      "description": "This module provides functions to create and emit OpenTelemetry spans with Lwt for asynchronous tracing. It handles span generation with attributes, events, and contextual linking, producing resource spans for OpenTelemetry protocol export. Concrete use cases include instrumenting Lwt-based services to collect distributed traces with custom attributes and events tied to specific operations.",
      "description_length": 393,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opentelemetry_lwt",
      "library": "opentelemetry-lwt",
      "description": "This module integrates OpenTelemetry with Lwt to enable distributed tracing, metrics collection, and structured logging in asynchronous OCaml applications. It provides core operations for creating spans, recording metrics like counters and histograms, and emitting structured logs enriched with trace context and attributes. The logging submodule handles log records with dynamic metadata, the metrics submodule supports precise tracking of scalar and distribution-based measurements, and the tracing submodule enables creation of spans linked to asynchronous operations. Examples include instrumenting HTTP servers with request tracing, capturing latency metrics in background jobs, and exporting structured logs with service metadata.",
      "description_length": 736,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 736,
    "min_description_length": 393,
    "avg_description_length": 521.25,
    "embedding_file_size_mb": 0.014947891235351562
  }
}