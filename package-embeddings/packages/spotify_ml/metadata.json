{
  "package": "spotify_ml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:06.854330",
  "modules": [
    {
      "module_path": "Spotify_ml.Client.User",
      "library": "spotify_ml",
      "description": "Handles user authentication and token validation for accessing Spotify user data. It provides functions to serialize and deserialize user data, along with checking token expiration. Useful for maintaining valid user sessions and securely accessing user-specific resources like playlists or listening history.",
      "description_length": 308,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spotify_ml.Api",
      "library": "spotify_ml",
      "description": "This module implements direct bindings to Spotify Web API endpoints, handling authentication flow and request signing. It operates on data structures like `track`, `artist`, `album`, and `userTopTracksResponse` to represent Spotify entities and API responses. Concrete functions include `user_top_tracks` for fetching a user's top tracks with pagination, returning deserialized results or typed errors for failed requests.",
      "description_length": 422,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spotify_ml.Client",
      "library": "spotify_ml",
      "description": "This module provides the core functionality for interacting with the Spotify Web API, including authentication, API request handling, and error management. It supports creating and managing API clients, generating authorization URIs, and handling OAuth flows, with custom types for HTTP and request errors. The child module extends this by managing user authentication and token validation, enabling secure access to user-specific resources like playlists and listening history. Together, they allow developers to log in users via Spotify, make authorized API requests, handle token expiration, and manage rate-limited responses effectively.",
      "description_length": 641,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Spotify_ml",
      "library": "spotify_ml",
      "description": "This module integrates Spotify Web API bindings with core interaction logic, enabling authentication, API request handling, and error management. It defines key data types such as `track`, `artist`, `album`, and `userTopTracksResponse`, and provides operations like `user_top_tracks` for retrieving user-specific data with pagination. Developers can authenticate users via OAuth, manage API clients, and handle rate-limited or failed requests using typed error responses. Example usage includes fetching a user's top tracks, accessing playlists, and securely managing token-based sessions.",
      "description_length": 589,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 641,
    "min_description_length": 308,
    "avg_description_length": 490.0,
    "embedding_file_size_mb": 0.014926910400390625
  }
}