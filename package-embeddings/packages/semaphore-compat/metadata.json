{
  "package": "semaphore-compat",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:04.859247",
  "modules": [
    {
      "module_path": "Semaphore_compat.Semaphore.Counting",
      "library": "semaphore-compat",
      "description": "This module implements counting semaphores with operations to create, acquire, release, and query them. It works with the abstract type `t` representing a semaphore instance. Concrete use cases include controlling access to a limited number of resources in concurrent programs, such as limiting the number of threads accessing a shared resource simultaneously.",
      "description_length": 360,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Semaphore_compat.Semaphore.Binary",
      "library": "semaphore-compat",
      "description": "This module implements a binary semaphore, a synchronization primitive that allows threads to wait for a signal from another thread. It supports creating a semaphore in either a signaled or non-signaled state, acquiring and releasing the semaphore, and attempting to acquire it non-blockingly. Use cases include coordinating thread execution, protecting access to a single shared resource, or signaling completion of an asynchronous task.",
      "description_length": 438,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Semaphore_compat.Semaphore",
      "library": "semaphore-compat",
      "description": "This module provides synchronization primitives for managing concurrent access to limited resources. It supports counting semaphores for controlling access to multiple resource instances and binary semaphores for mutual exclusion or thread coordination. Key operations include creating, acquiring, releasing, and querying semaphore states. For example, a counting semaphore can limit concurrent thread access to a shared pool, while a binary semaphore can signal task completion or protect a single resource.",
      "description_length": 508,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Semaphore_compat",
      "library": "semaphore-compat",
      "description": "This module implements synchronization primitives for managing concurrent access to limited resources. It supports counting semaphores to control access to multiple resource instances and binary semaphores for mutual exclusion or thread coordination. Key operations include creating, acquiring, releasing, and querying semaphore states. For example, a counting semaphore can limit how many threads access a shared pool simultaneously, while a binary semaphore can protect a single resource or signal task completion between threads.",
      "description_length": 532,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 532,
    "min_description_length": 360,
    "avg_description_length": 459.5,
    "embedding_file_size_mb": 0.014925003051757812
  }
}