{
  "package": "semaphore-compat",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:54:37.306258",
  "modules": [
    {
      "module_path": "Semaphore_compat.Semaphore.Counting",
      "library": "semaphore-compat",
      "description": "This module implements counting semaphores with operations to create, acquire, release, and query the semaphore state. It works with the abstract type `t` representing a counting semaphore, initialized with a given integer value. Concrete use cases include controlling access to a limited number of resources in concurrent programs, such as limiting the number of simultaneous threads accessing a shared resource.",
      "description_length": 413,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Semaphore_compat.Semaphore.Binary",
      "library": "semaphore-compat",
      "description": "This module implements a binary semaphore, a synchronization primitive that allows threads to wait for a signal from another thread. It supports creating a semaphore in either a signaled or non-signaled state, acquiring and releasing the semaphore, and attempting to acquire it without blocking. Use cases include coordinating access to a shared resource between threads or signaling completion of an asynchronous operation.",
      "description_length": 424,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Semaphore_compat.Semaphore",
      "library": "semaphore-compat",
      "description": "This module provides counting and binary semaphores for managing concurrency. It supports operations to create, acquire, release, and query semaphore states, working with abstract types representing both counting and binary semaphore instances. Use cases include limiting concurrent access to shared resources and coordinating thread signaling in multi-threaded applications.",
      "description_length": 375,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Semaphore_compat",
      "library": "semaphore-compat",
      "description": "This module implements counting and binary semaphores for concurrency control. It offers functions to create, acquire, release, and check semaphore states, operating on abstract types for both semaphore kinds. It is used to restrict access to shared resources and synchronize threads in concurrent programs.",
      "description_length": 307,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 424,
    "min_description_length": 307,
    "avg_description_length": 379.75,
    "embedding_file_size_mb": 0.05840873718261719
  }
}