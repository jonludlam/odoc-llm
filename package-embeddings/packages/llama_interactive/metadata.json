{
  "package": "llama_interactive",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:04:49.486076",
  "modules": [
    {
      "module_path": "Llama_interactive.Input.Mouse_pos",
      "library": "llama_interactive",
      "description": "Tracks mouse position state with initialization and transformation functions. Works with a generic state type wrapped in a mouse position tracker. Use to create and update mouse position values in interactive applications.",
      "description_length": 222,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_interactive.Input.All_keyboard",
      "library": "llama_interactive",
      "description": "Handles keyboard input events with initialization and transformation capabilities. Works with a generic type `'a t` representing input state, initialized via a function producing values of type `'a`. Useful for building interactive applications where keyboard inputs need to be captured and processed, such as command-line interfaces or real-time input handlers.",
      "description_length": 362,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_interactive.Input",
      "library": "llama_interactive",
      "description": "This module manages input state for interactive applications by combining mouse position tracking and keyboard event handling. It provides data types to represent generic input states, with operations to initialize and transform these states based on user input. Mouse tracking supports creating and updating position values, while keyboard handling captures and processes key events. For example, it can track cursor movement in a graphical interface or handle real-time key presses in a terminal application.",
      "description_length": 510,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_interactive.Window",
      "library": "llama_interactive",
      "description": "This module creates and manages an interactive visualization window for signal processing tasks. It provides functions to render 2D signals with customizable display parameters and sample-to-color conversion, and to handle input signals for dynamic interaction. Use it to build real-time audio or sensor data visualizations with Lwt-based concurrency.",
      "description_length": 351,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_interactive",
      "library": "llama_interactive",
      "description": "This module enables real-time audio-visual interaction by combining signal processing with dynamic rendering and input handling. It supports core operations like downsampling, volume scaling, and signal-to-color mapping, while integrating input state management for mouse and keyboard interactions. The visualization window renders 2D signals with customizable display settings and responds to live input for interactive adjustments. Example use cases include building responsive audio visualizers or interactive sensor data displays with real-time user control.",
      "description_length": 562,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 562,
    "min_description_length": 222,
    "avg_description_length": 401.4,
    "embedding_file_size_mb": 0.018610000610351562
  }
}