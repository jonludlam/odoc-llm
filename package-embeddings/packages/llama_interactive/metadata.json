{
  "package": "llama_interactive",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:51:46.953288",
  "modules": [
    {
      "module_path": "Llama_interactive.Input.Mouse_pos",
      "library": "llama_interactive",
      "description": "Tracks mouse position state with initialization and transformation functions. Works with a generic state type wrapped in a mouse position tracker. Use to create and update mouse position values in interactive applications.",
      "description_length": 222,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_interactive.Input.All_keyboard",
      "library": "llama_interactive",
      "description": "Handles keyboard input events with initialization and transformation capabilities. Works with a generic type `'a t` representing keyboard input states. Useful for creating and modifying keyboard event streams in interactive applications, such as game controls or real-time text input handling.",
      "description_length": 293,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_interactive.Input",
      "library": "llama_interactive",
      "description": "Handles keyboard and mouse input events with state initialization and transformation capabilities. Works with generic state types `'a t` for keyboard input streams and mouse position tracking. Useful for implementing game controls, real-time text input, and interactive UI elements that respond to user input.",
      "description_length": 309,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_interactive.Window",
      "library": "llama_interactive",
      "description": "This module creates and manages an interactive visualization window for signal processing applications. It provides functions to run computations within a windowed context, visualize audio or numerical signals with customizable rendering parameters, and capture input signals from user interactions. The module works directly with window configurations, Lwt asynchronous tasks, and signal processing structures like `float Llama.Signal.t`.",
      "description_length": 439,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_interactive",
      "library": "llama_interactive",
      "description": "This module provides functions to play and visualize audio signals in real time, with configurable rendering parameters and interactive input handling. It supports operations like downsampling, volume scaling, and pixel-based signal visualization, working with signal types and window configurations. Concrete use cases include building interactive audio applications, real-time signal visualization tools, and graphical interfaces for sound synthesis.",
      "description_length": 452,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 452,
    "min_description_length": 222,
    "avg_description_length": 343.0,
    "embedding_file_size_mb": 0.07285499572753906
  }
}