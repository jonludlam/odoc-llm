{
  "package": "aws-rds",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 676,
  "creation_timestamp": "2025-07-16T00:33:50.799270",
  "modules": [
    {
      "module_path": "Aws_rds.Types.ValidStorageOptionsList",
      "library": "aws-rds",
      "description": "This module handles lists of valid storage options for RDS instances, providing functions to parse XML input, convert to query parameters, and serialize to and from JSON. It works with lists of `ValidStorageOptions.t` records, which describe allowed storage configurations. Use this module when processing RDS API responses or preparing storage configuration requests.",
      "description_length": 368,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBProxyTarget",
      "library": "aws-rds",
      "description": "This module defines a record type representing a database proxy target with optional fields for ARN, endpoint, cluster ID, resource ID, port, target type, and health status. It provides functions to construct, parse, and convert instances to and from JSON and query formats. It is used to manage and configure RDS proxy targets in AWS deployments, particularly when handling target group configurations and health monitoring.",
      "description_length": 425,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyGlobalClusterResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of modifying a global RDS cluster, containing an optional global cluster object. It provides functions to construct, parse, and serialize this result in various formats including JSON, query parameters, and XML. It is used to handle responses from AWS RDS API calls that modify global cluster configurations.",
      "description_length": 369,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring new database instances in AWS RDS, including parameters for storage, networking, security, and backups. It provides functions to construct, serialize, and parse these configurations, supporting operations like converting to HTTP queries or JSON format for API requests. Concrete use cases include setting up encrypted databases with specific engine versions, configuring automated backups, and defining network access through VPC security groups.",
      "description_length": 499,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterFromS3Message",
      "library": "aws-rds",
      "description": "This module defines a data structure for restoring an RDS database cluster from an S3 source, including configuration parameters like engine version, backup settings, network security, and S3 ingestion details. It provides functions to construct, parse, and serialize the structure for use in API requests, specifically handling input and output in JSON, query string, and XML formats. Concrete use cases include initiating an RDS cluster restore operation from S3 data and configuring encryption, logging, and domain settings during restoration.",
      "description_length": 546,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBSnapshotsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database snapshots with optional filters and pagination. It supports creating, parsing, and serializing snapshot query messages to JSON, XML, or AWS query format. Use this module to construct and process requests for listing RDS snapshots filtered by instance, type, or visibility.",
      "description_length": 335,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateDBParameterGroupResult",
      "library": "aws-rds",
      "description": "This module defines a result type for creating a DB parameter group, containing an optional `DBParameterGroup` record. It provides functions to construct, parse, and serialize the result to query parameters or JSON format. A concrete use case includes handling responses from AWS RDS API calls that return newly created parameter group details.",
      "description_length": 344,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBInstanceResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of a DB instance deletion operation, containing an optional DB instance record. It provides functions to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. It is used to handle responses from RDS instance deletion requests, allowing inspection of the deleted instance's details if available.",
      "description_length": 406,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StartActivityStreamResponse",
      "library": "aws-rds",
      "description": "This module defines a response type for starting an activity stream, including fields like KMS key ID, Kinesis stream name, status, mode, and apply flag. It provides constructors, JSON and XML parsers, and query conversion functions to handle AWS RDS activity stream responses. Use this module to interpret and construct activity stream start responses in AWS RDS operations.",
      "description_length": 375,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteGlobalClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying an RDS global cluster deletion request, containing a single required field for the global cluster identifier. It provides functions to construct the deletion message, convert it to query parameters or JSON format, and parse it from XML or JSON input. This module is used when interacting with AWS RDS APIs to delete a global database cluster by its identifier.",
      "description_length": 412,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PendingMaintenanceActionDetails",
      "library": "aws-rds",
      "description": "This module handles lists of pending maintenance actions, providing functions to parse, convert to query format, serialize to JSON, and deserialize from JSON. It works with XML nodes, JSON values, and AWS query parameters to facilitate interaction with RDS service APIs. Use this module when retrieving or processing maintenance actions pending for RDS instances or resources.",
      "description_length": 376,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpointList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DBClusterEndpoint values, providing direct conversions to and from XML, JSON, and query formats. It supports parsing endpoint lists from XML nodes and constructing JSON or query representations of endpoint lists. Use this when working with AWS RDS API responses that include multiple DBClusterEndpoint entries, particularly for operations like describing or modifying cluster endpoints.",
      "description_length": 419,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StopDBClusterResult",
      "library": "aws-rds",
      "description": "This module defines a result type for stopping a database cluster, containing an optional DBCluster value. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used specifically in handling responses from RDS stop cluster operations.",
      "description_length": 294,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZoneAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the \"CustomAvailabilityZoneAlreadyExists\" error in AWS RDS operations. It works with unit type values to represent the presence of this specific error condition. Use this module when interacting with AWS RDS APIs to detect or construct this error in responses or requests.",
      "description_length": 337,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventSubscriptionQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the case where the quota for event subscriptions has been exceeded. It provides operations to construct, parse, and convert the unit type to query parameters, JSON, and back, specifically for error handling in event subscription management. It is used when interacting with AWS RDS APIs to detect and respond to quota limits on event notifications.",
      "description_length": 413,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PromoteReadReplicaResult",
      "library": "aws-rds",
      "description": "This module handles the result of promoting a read replica in an RDS operation. It provides functions to create, parse, and serialize a result containing an optional DB instance. Use this module when processing responses from promoting a read replica, particularly for interacting with AWS RDS APIs or handling XML/JSON response formats.",
      "description_length": 337,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition when a database parameter group quota is exceeded. It provides operations to construct, parse, and serialize this error state into query parameters, JSON, and back. Use this module to manage and respond to quota exceeded errors in RDS parameter group operations.",
      "description_length": 347,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBProxyTargetGroupResponse",
      "library": "aws-rds",
      "description": "This module handles responses from modifying a DB proxy target group in AWS RDS. It provides functions to construct, parse, and serialize response data, working primarily with the `DBProxyTargetGroup` type. Use this module when managing proxy target groups in RDS, such as updating their configuration or retrieving updated state after an API call.",
      "description_length": 348,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyDBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for copying a database snapshot in Amazon RDS, including source and target identifiers, optional encryption key, tags, and configuration settings. It provides functions to construct, serialize, and parse this structure for use in API requests. Use cases include initiating cross-region snapshot replication and applying new encryption settings during snapshot copy operations.",
      "description_length": 413,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.TargetHealthReason",
      "library": "aws-rds",
      "description": "This module defines a polymorphic variant type representing reasons for target health status in RDS, including failure modes like unreachable targets or authentication errors. It provides bidirectional conversions between string representations and the enumerated type, along with serialization to and from JSON, query parameters, and XML. Use this module when handling RDS target health diagnostics, particularly for interpreting or constructing health reason values in API interactions.",
      "description_length": 488,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an RDS database instance configuration, including fields like storage, instance class, security groups, and backup settings. It provides functions to construct, parse, and serialize these configurations for use in API requests. Concrete use cases include updating database parameters, changing network settings, or adjusting performance options in Amazon RDS.",
      "description_length": 410,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOptionSetting",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an option setting within an RDS option group, including properties like setting name, description, default value, allowed values, and engine version constraints. It provides functions to construct, parse, and serialize these settings to and from JSON, query parameters, and XML. Concrete use cases include configuring RDS database options such as backup settings, logging, or monitoring features with specific constraints and defaults.",
      "description_length": 485,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeAccountAttributesMessage",
      "library": "aws-rds",
      "description": "This module handles the serialization and deserialization of RDS account attribute descriptions. It works with unit type values and converts them to and from JSON and AWS Query format. It is used to process requests for retrieving account-specific RDS attributes in AWS SDK workflows.",
      "description_length": 284,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition for exceeding a DB subnet group quota in RDS operations. It includes functions to construct, parse, and convert the error to query or JSON formats, ensuring compatibility with AWS API communication. It is used specifically for handling and transmitting quota exceeded fault signals in RDS service interactions.",
      "description_length": 383,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.IPRange",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing IP range information, including status and CIDR IP fields. It provides functions to construct, parse, and convert IP range data to and from XML, JSON, and query formats. Use this module when managing RDS security group rules that require IP address range specifications.",
      "description_length": 324,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBProxyNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `DBProxyNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query or JSON formats, typically used when interacting with AWS APIs or processing API responses. The unit type indicates the presence of a specific error condition without carrying additional data.",
      "description_length": 392,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CancelExportTaskMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type representing a message to cancel an export task, containing an export task identifier. It provides functions to construct the message, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used to handle cancellation requests for database export tasks in RDS by formatting and parsing the necessary input and output data.",
      "description_length": 411,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceRoleAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where a DB instance role already exists. It provides operations to create, parse, and convert the error to query parameters or JSON format. The module is used when managing RDS instance roles to detect and handle duplicate role assignments.",
      "description_length": 320,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.LogTypeList",
      "library": "aws-rds",
      "description": "This module handles lists of log types in AWS RDS operations. It provides functions to convert log type lists to and from JSON and query formats, along with parsing from XML nodes. Use this module when working with RDS log data in different serialization formats, such as when retrieving or configuring log exports.",
      "description_length": 315,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AddRoleToDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for adding an IAM role to an RDS DB cluster, including the cluster identifier, role ARN, and an optional feature name. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when configuring IAM integration with RDS clusters, such as enabling specific features like RDS Data API.",
      "description_length": 383,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBEngineVersionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database engine versions with optional filters, pagination, and feature flags. It supports operations to construct, serialize, and parse messages used in RDS API requests. Use this module when configuring RDS engine version queries with custom filters, pagination, or feature-specific options like timezone or charset listings.",
      "description_length": 381,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotAttributesResult",
      "library": "aws-rds",
      "description": "This module handles RDS snapshot attribute results, providing constructors, JSON and XML parsing, and query conversion. It works with RDS snapshot identifiers and attribute lists. Used to retrieve and manipulate snapshot metadata in AWS RDS operations.",
      "description_length": 252,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterOptionGroupStatus",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the status of an RDS DB cluster option group, with optional fields for the option group name and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling RDS API responses that describe the configuration and state of database cluster option groups.",
      "description_length": 396,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SourceIdsList",
      "library": "aws-rds",
      "description": "This module handles lists of string identifiers for AWS RDS sources. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML nodes. It is used when managing event subscriptions or tracking multiple RDS resources by their IDs.",
      "description_length": 277,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOptionsMessage",
      "library": "aws-rds",
      "description": "This module handles structured data for RDS option group configurations, including pagination via an optional marker. It provides operations to construct, serialize, and deserialize messages containing lists of option group options. Use this when managing responses from AWS RDS API calls that list available option group settings.",
      "description_length": 331,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ValidDBInstanceModificationsMessage",
      "library": "aws-rds",
      "description": "This module handles validation responses for RDS instance modifications by providing constructors, parsers, and serializers for valid storage options and processor features. It works with XML, JSON, and AWS query formats to facilitate response handling and request construction during database instance updates. Concrete use cases include parsing RDS API responses to validate storage resizing options and supported CPU features before applying instance changes.",
      "description_length": 462,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OptionsConflictsWith",
      "library": "aws-rds",
      "description": "Handles string list values for RDS option conflicts in AWS API requests. Converts between XML, JSON, and query string formats for transmitting option conflict data. Used when configuring RDS options that exclude other options.",
      "description_length": 226,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for constructing, serializing, and parsing messages used to modify an RDS database cluster configuration. It supports fields such as cluster identifiers, backup settings, security groups, and authentication options, all used when issuing a modify cluster request to AWS RDS. The module includes functions to convert the message to query parameters, JSON, and to construct the type from JSON or XML input.",
      "description_length": 453,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS database clusters, providing operations to convert, parse, and serialize cluster data. It works with XML, JSON, and query parameter formats for use in API requests and responses. Key functions include parsing XML nodes into cluster lists, converting cluster lists to JSON or query strings, and extracting cluster lists from JSON input.",
      "description_length": 368,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.FailoverDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a type and conversion functions for initiating a failover operation on a database cluster. It handles structured data with a cluster identifier and an optional target instance identifier, enabling precise control over failover scenarios. It is used to prepare and interpret API requests for triggering failovers in database management workflows.",
      "description_length": 365,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventCategoriesList",
      "library": "aws-rds",
      "description": "Handles parsing, serialization, and conversion of RDS event category lists. Works with string lists and XML/JSON representations. Used to process event categories in RDS event subscriptions and filter configurations.",
      "description_length": 216,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS option group, with fields for configuration such as engine name, version, options list, and VPC membership permissions. It provides functions to construct, serialize, and parse option group data for use in API requests and responses. Concrete use cases include creating and managing RDS instance option groups with specific database engine features and network configurations.",
      "description_length": 433,
      "index": 41,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_rds.Types.DescribeOptionGroupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring and sending requests to describe RDS option groups. It supports operations to construct, parse, and serialize request parameters including filters, pagination, and engine-specific criteria. Use this module when querying AWS RDS to list option groups based on engine name, version, or custom filters.",
      "description_length": 352,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeEventCategoriesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying parameters to retrieve event categories from RDS, including an optional source type and a list of filters. It provides functions to construct, serialize, and parse these parameters in various formats such as JSON and query strings. It is used when making API requests to describe RDS event categories with specific filtering criteria.",
      "description_length": 386,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBInstancesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database instances with optional filters, pagination, and instance identifiers. It supports constructing, parsing, and serializing query parameters to interact with AWS RDS APIs, specifically for listing or filtering DB instances. Use cases include retrieving specific RDS instances by ID, applying custom filters, and handling paginated results.",
      "description_length": 400,
      "index": 44,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_rds.Types.CreateGlobalClusterResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of creating a global database cluster in Amazon RDS. It includes functions to construct, serialize, and parse the result, primarily working with XML and JSON formats for integration with AWS APIs. It is used to handle responses when managing cross-region RDS global clusters programmatically.",
      "description_length": 353,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DownloadDBLogFilePortionDetails",
      "library": "aws-rds",
      "description": "This module defines a data structure with optional fields for handling responses from downloading RDS log file portions, including log data, a marker for pagination, and a flag indicating if more data is available. It provides functions to construct, parse, and serialize the structure to and from JSON, query parameters, and XML. It is used specifically for processing partial log file data from Amazon RDS instances, supporting paginated retrieval of large log files.",
      "description_length": 469,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotAttribute",
      "library": "aws-rds",
      "description": "This module defines a DB snapshot attribute with optional name and list of values. It provides functions to construct, parse, and convert the attribute to query parameters, JSON, or XML. Use this to manage metadata like permissions or tags associated with RDS snapshots.",
      "description_length": 270,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ApplyPendingMaintenanceActionResult",
      "library": "aws-rds",
      "description": "This module handles the result of applying pending maintenance actions in RDS. It includes operations for creating, parsing, and serializing a result structure that may contain resource-level pending maintenance actions. It is used when processing responses from RDS API calls that apply maintenance updates to database instances.",
      "description_length": 330,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ResetDBClusterParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for resetting database cluster parameter groups in AWS RDS, including fields for the parameter group name, a flag to reset all parameters, and a list of specific parameters to reset. It provides functions to construct, parse, and serialize this structure to support API interactions. Use cases include configuring and managing RDS cluster parameter groups during database setup or maintenance.",
      "description_length": 430,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterFromS3Result",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a database cluster from an S3 source in AWS RDS. It provides operations to construct, parse, and serialize a result containing an optional database cluster. Use this when processing responses from RDS after initiating a restore operation from S3 data.",
      "description_length": 295,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeEngineDefaultParametersResult",
      "library": "aws-rds",
      "description": "This module handles the result of describing engine default parameters for an RDS instance. It provides functions to construct, parse, and serialize the result, which includes engine defaults data. Use this module when retrieving and processing default parameter values for RDS database engines.",
      "description_length": 295,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RemoveFromGlobalClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for removing a DB cluster from a global cluster, with optional fields for identifiers. It provides functions to construct, parse, and serialize the structure to query parameters or JSON. Use this when interacting with AWS RDS global cluster management APIs to send removal requests.",
      "description_length": 319,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.FilterValueList",
      "library": "aws-rds",
      "description": "This module handles lists of string values used for filtering in RDS operations. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with RDS API calls that require multiple string filters, such as describing DB instances or snapshots.",
      "description_length": 326,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InstallationMediaAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `InstallationMediaAlreadyExistsFault` error in AWS RDS operations. It provides functions to create, parse, and convert the error type to query parameters, JSON, and back from JSON. It is used specifically to represent and manage this fault when attempting to create duplicate installation media entries in AWS RDS.",
      "description_length": 383,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS database instances, providing direct conversions to and from XML, JSON, and query formats. It includes parsing from XML nodes into a list of DBInstance values and serialization for queries and JSON output. Use this module when retrieving or processing multiple RDS instances from AWS API responses.",
      "description_length": 331,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when a database security group is not found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, and back from JSON. Use this module to represent and serialize the absence of a security group in API requests and responses.",
      "description_length": 344,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling cases where a database snapshot is not found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, and back from JSON. Use this module when managing RDS snapshot errors in API requests and responses.",
      "description_length": 311,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InsufficientStorageClusterCapacityFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where storage cluster capacity is insufficient. It provides functions to construct, parse, and serialize this error to query parameters or JSON, primarily used when handling RDS service errors related to storage limits. The module is typically used in error response handling when interacting with AWS RDS APIs.",
      "description_length": 384,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBProxyResponse",
      "library": "aws-rds",
      "description": "This module defines a response type for deleting a database proxy, containing an optional DBProxy record. It includes functions to construct, parse, and convert the response to query or JSON formats, specifically handling AWS RDS proxy deletion results. Use this module when managing RDS database proxy deletion workflows that require structured responses for confirmation or further processing.",
      "description_length": 395,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceRoleNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `DBInstanceRoleNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query or JSON formats, typically used when a specified IAM role is not found during database instance operations. The module works exclusively with the unit type, representing the absence of associated data in error responses.",
      "description_length": 427,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBLogFileNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `DBLogFileNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query or JSON formats, typically used when interacting with AWS APIs or processing API responses. The module works exclusively with the unit type, representing the absence of a log file in error scenarios.",
      "description_length": 401,
      "index": 61,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SnapshotQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where a snapshot quota has been exceeded. It provides functions to construct, parse, and convert the error to query parameters or JSON format. This is used specifically for handling quota exceeded errors in RDS snapshot operations, such as when attempting to create a new snapshot beyond allowed limits.",
      "description_length": 376,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBInstanceResult",
      "library": "aws-rds",
      "description": "This module defines a single data type `t` that represents the result of creating a database instance, containing an optional `DBInstance` record. It provides functions to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. It is used specifically to handle responses from RDS API calls that create database instances.",
      "description_length": 371,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionConfigurationList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option configurations, providing direct conversions to and from XML, JSON, and query formats. It supports parsing option configuration lists from XML nodes, serializing them into AWS query parameters or JSON arrays, and constructing empty lists. It is used when managing RDS instance options, such as specifying database engine features or logging configurations.",
      "description_length": 396,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotAttribute",
      "library": "aws-rds",
      "description": "This module defines a type for representing RDS cluster snapshot attributes, including an optional attribute name and a list of attribute values. It provides functions to construct, parse, and convert these attributes to and from query parameters and JSON. It is used when managing RDS cluster snapshots, particularly when specifying or retrieving metadata such as authorized accounts or encryption settings.",
      "description_length": 408,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpointAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition where a DB cluster endpoint already exists. It works with unit type values to represent the presence or absence of this specific error. It is used when interacting with RDS operations to detect and respond to attempts to create duplicate DB cluster endpoints.",
      "description_length": 344,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBClusterCapacityFault",
      "library": "aws-rds",
      "description": "This module defines a specific error type for handling invalid database cluster capacity faults in RDS operations. It provides functions to create, parse, and serialize the error for use in API requests and responses. The module works with unit type values and integrates with AWS query and JSON formats for error reporting.",
      "description_length": 324,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstancesOfferingList",
      "library": "aws-rds",
      "description": "This module handles parsing, querying, and serializing lists of RDS reserved database instance offerings. It provides operations to convert between XML, JSON, and internal data representations, specifically working with lists of `ReservedDBInstancesOffering.t` values. It is used when retrieving or processing available RDS reserved instance offerings from AWS API responses.",
      "description_length": 375,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PromoteReadReplicaDBClusterResult",
      "library": "aws-rds",
      "description": "This module handles the result of promoting a read replica DB cluster in AWS RDS. It includes operations to create, parse, and convert the result to and from XML, JSON, and query formats. It works with the `DBCluster` type to represent the promoted cluster data.",
      "description_length": 262,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DomainMembershipList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS domain membership records. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when managing domain memberships for RDS instances, particularly when integrating with AWS APIs that require or return domain membership information in different serialization formats.",
      "description_length": 378,
      "index": 70,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateEventSubscriptionResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of creating an event subscription in AWS RDS. It includes functions to construct, parse, and serialize the result, specifically handling optional event subscription data. It is used when managing event notifications for database instances or clusters via the AWS RDS API.",
      "description_length": 332,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceToPointInTimeResult",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a DB instance to a specific point in time. It provides constructors, JSON serialization/deserialization, and query conversion for a structure containing an optional DB instance. It is used to process and manipulate the output from RDS point-in-time restore operations.",
      "description_length": 312,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AuthorizationAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the \"AuthorizationAlreadyExistsFault\" error in AWS RDS operations. It provides functions to construct, parse, and convert the error type to query parameters, JSON, and back, specifically for signaling that an authorization rule already exists. The module works with the unit type, representing the presence of this specific error condition.",
      "description_length": 405,
      "index": 73,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PointInTimeRestoreNotEnabledFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `PointInTimeRestoreNotEnabledFault` error in AWS RDS. It includes operations for creating, parsing, and converting the error to query or JSON formats. The module works with unit type values, representing the presence of a specific error condition.",
      "description_length": 316,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstanceList",
      "library": "aws-rds",
      "description": "This module handles lists of reserved DB instances in AWS RDS, providing operations to convert between XML, JSON, and query formats. It supports parsing XML nodes into a list of reserved DB instance records and serializing them to query parameters or JSON. Use this module when working with AWS RDS API responses that include multiple reserved DB instances, particularly for operations like listing or describing reservations.",
      "description_length": 426,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterSnapshotAttributesMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type representing a message for describing RDS cluster snapshot attributes. It includes functions to construct the type, parse it from XML, convert it to a query format, and serialize to and from JSON. It is used specifically for interacting with RDS cluster snapshot attribute data in AWS API requests and responses.",
      "description_length": 351,
      "index": 76,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBClusterSnapshotStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid database cluster snapshot state errors. It provides operations for creating, parsing, and converting the unit value to query parameters, JSON, and back from JSON. This is used specifically to manage error states related to RDS cluster snapshots in AWS API interactions.",
      "description_length": 347,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling RDS cluster snapshot messages, including optional pagination markers and a list of cluster snapshots. It provides functions to construct, parse, and serialize these messages to and from XML, JSON, and query parameters. Use this module when retrieving or processing RDS cluster snapshot responses that include pagination.",
      "description_length": 370,
      "index": 78,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterEndpointsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS cluster endpoints with optional filters, identifiers, and pagination. It supports operations to construct, parse, and serialize endpoint query messages in various formats, including JSON and AWS query format. Concrete use cases include building and processing API requests to describe RDS cluster endpoints in AWS.",
      "description_length": 368,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StopDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for stopping an RDS database instance, including the instance identifier and an optional snapshot identifier. It provides functions to construct, parse, and convert the structure to and from JSON and query formats. Concrete use cases include sending stop requests to AWS RDS with optional snapshot creation.",
      "description_length": 344,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.MinimumEngineVersionPerAllowedValue",
      "library": "aws-rds",
      "description": "This module defines a data structure with two optional string fields, representing an allowed value and its corresponding minimum engine version. It provides functions to create, parse, and convert the structure to query parameters, JSON, and back from JSON. It is used to specify version constraints when configuring database engine settings in RDS.",
      "description_length": 350,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InsufficientDBInstanceCapacityFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where a DB instance lacks capacity. It includes functions to construct, parse, and convert the error to query parameters or JSON format. Use this module when handling or reporting insufficient capacity errors in DB instance operations.",
      "description_length": 308,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterEndpointMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for configuring a new RDS database cluster endpoint, including required identifiers, endpoint type, optional static and excluded members, and associated tags. It provides functions to construct, serialize, and parse these configurations, specifically for interacting with AWS RDS services. Use cases include creating custom endpoints for Aurora clusters with specific routing or access control settings.",
      "description_length": 437,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EC2SecurityGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an EC2 security group with optional fields for status, name, ID, and owner ID. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and back from JSON. It is used to manage EC2 security group associations within RDS operations, such as modifying or describing DB instances.",
      "description_length": 366,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventSubscription",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS event subscription, including fields for customer identifiers, SNS topic ARNs, event sources, and subscription status. It provides operations to construct, parse, and serialize event subscriptions to JSON, query parameters, or XML. Use this module when managing RDS event notifications, such as creating or inspecting subscriptions to database events.",
      "description_length": 408,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.IamRoleMissingPermissionsFault",
      "library": "aws-rds",
      "description": "This module defines a minimal type and associated functions for handling IAM role permission faults in AWS RDS operations. It provides functions to construct, parse, and convert the fault type to query parameters, JSON, and back from JSON. It is used specifically to represent and manage missing IAM role permissions in RDS service interactions.",
      "description_length": 345,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterCapacityInfo",
      "library": "aws-rds",
      "description": "This module defines a data structure representing capacity information for a database cluster, including current and pending capacity, timeout settings, and cluster identifier. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include retrieving and configuring auto-scaling properties for RDS clusters via AWS API calls.",
      "description_length": 401,
      "index": 87,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.MinimumEngineVersionPerAllowedValueList",
      "library": "aws-rds",
      "description": "This module handles parsing, formatting, and conversion operations for a list of minimum engine version constraints tied to allowed values. It works with XML nodes, JSON values, and query parameters, transforming them into and from a list of `MinimumEngineVersionPerAllowedValue.t` records. It is used when processing RDS configuration data from AWS APIs, particularly for parameter constraints tied to database engine versions.",
      "description_length": 428,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PromoteReadReplicaDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type representing a message to promote a read replica DB cluster, containing only the identifier of the cluster. It provides functions to construct the message, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This is used specifically when issuing a promotion command to AWS RDS for a read replica cluster.",
      "description_length": 382,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SubnetAlreadyInUse",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error case where a subnet is already in use. It provides functions to construct, parse, and convert the error to query parameters, JSON, and back from JSON. It is used when handling API responses that indicate subnet conflicts in RDS operations.",
      "description_length": 302,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBUpgradeDependencyFailureFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling a specific RDS upgrade dependency failure fault. It provides operations for constructing, parsing, and serializing the fault into query and JSON formats. It is used when managing RDS database instance upgrades that fail due to unmet dependencies.",
      "description_length": 316,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DownloadDBLogFilePortionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying parameters to download a portion of a database log file from AWS RDS. It includes functions to construct, parse, and serialize the structure in JSON, query string, and XML formats. It is used when retrieving log data incrementally by specifying a marker and number of lines.",
      "description_length": 326,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SupportedTimezonesList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS-supported timezones. It provides parsing from XML nodes, conversion to query parameters and JSON format, and extraction from JSON values. Use it when managing RDS instance timezone configurations or processing API responses containing timezone lists.",
      "description_length": 283,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when a database instance is not found. It provides operations to construct, parse, and convert the unit value to query parameters, JSON, or back from JSON. Use this module to represent and manage the absence of a database instance in API responses or error handling scenarios.",
      "description_length": 355,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SubscriptionCategoryNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling subscription category not found errors in RDS event subscriptions. It provides operations to create, parse, and convert the unit value to query parameters, JSON, and back from JSON. Concrete use cases include error handling and serialization in RDS API clients when managing event subscriptions.",
      "description_length": 365,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ScalingConfiguration",
      "library": "aws-rds",
      "description": "This module defines a record type for configuring auto-scaling parameters, including min and max capacity, auto-pause behavior, pause delay, and timeout actions. It provides functions to construct, parse, and serialize these configurations to and from JSON, query strings, and XML. It is used when setting up or modifying RDS cluster scaling behavior through AWS API calls.",
      "description_length": 373,
      "index": 96,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.EventCategoriesMessage",
      "library": "aws-rds",
      "description": "This module handles RDS event categories data by providing functions to construct, parse, and serialize event category messages. It works with XML, JSON, and query parameter formats, enabling interaction with AWS RDS APIs for retrieving event category mappings. Concrete use cases include processing responses from `DescribeEventCategories` and preparing event category data for API requests.",
      "description_length": 392,
      "index": 97,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of deleting a database cluster snapshot in AWS RDS. It provides constructors, parsing, and serialization functions for a type that optionally contains a `DBClusterSnapshot`. It is used to process and return responses after a snapshot deletion operation, converting between XML, JSON, and query formats.",
      "description_length": 333,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionSettingConfigurationList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option settings, providing functions to convert them to and from JSON, query parameters, and XML. It works with lists of `OptionSetting.t` values, representing database option configurations. Use this module when managing RDS instance options, such as configuring backup settings or logging options during instance creation or modification.",
      "description_length": 373,
      "index": 99,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupStatusList",
      "library": "aws-rds",
      "description": "This module handles lists of DB parameter group statuses, providing functions to parse, convert to query format, and serialize to and from JSON. It works with XML nodes and JSON values to facilitate AWS RDS API interactions. Use this module when managing database parameter group status responses in API requests or event processing.",
      "description_length": 333,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the \"GlobalClusterAlreadyExistsFault\" error in AWS RDS operations. It provides functions to construct, parse, and convert the error type to JSON or query string formats. It is used when interacting with AWS RDS APIs to manage global clusters, specifically to signal that a global cluster with the same identifier already exists.",
      "description_length": 393,
      "index": 101,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOption",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS option group option, including properties like name, engine compatibility, port settings, dependencies, and conflicts. It provides functions to construct, parse, and serialize these options for use in API requests or configuration management. Use cases include defining database engine-specific features and managing RDS instance configuration options.",
      "description_length": 409,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StartDBClusterResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of starting a database cluster, containing an optional DBCluster value. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to handle the response data when initiating a database cluster start operation in an AWS RDS context.",
      "description_length": 356,
      "index": 103,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupNameMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling database parameter group names in AWS RDS operations. It includes functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when managing RDS database instances that require referencing or modifying associated parameter groups.",
      "description_length": 329,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the absence of a DB subnet group in RDS operations. It provides functions to construct, parse, and serialize the unit value to query parameters or JSON, and to deserialize from JSON. It is used specifically to represent and handle the `DBSubnetGroupNotFoundFault` error condition in AWS RDS interactions.",
      "description_length": 374,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidRestoreFault",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing an invalid restore fault in RDS operations, with unit value indicating the presence of the fault. It provides functions to construct, parse, and convert the fault to query parameters, JSON, and back from JSON. Useful for handling and propagating restore-related error states in RDS service interactions.",
      "description_length": 347,
      "index": 106,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.KMSKeyNotAccessibleFault",
      "library": "aws-rds",
      "description": "This module defines a minimal type and associated functions for handling the `KMSKeyNotAccessibleFault` error in AWS RDS operations. It provides functions to construct, parse, and serialize the error type to query parameters or JSON format. It is used specifically to represent and handle cases where an RDS operation fails due to inaccessible KMS key encryption settings.",
      "description_length": 372,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EngineFamily",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing database engine families supported by RDS, specifically `MYSQL` and `POSTGRESQL`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON, query parameters, and XML. These operations are used when interacting with AWS RDS APIs to specify or interpret database engine types in configurations and responses.",
      "description_length": 414,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterToPointInTimeResult",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a database cluster to a specific point in time. It includes a single optional DBCluster value representing the restored cluster. Use this module when processing responses from RDS point-in-time recovery operations to extract, serialize, or manipulate the resulting cluster data.",
      "description_length": 322,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StopDBInstanceResult",
      "library": "aws-rds",
      "description": "This module defines a single type `t` that represents the result of stopping a database instance, containing an optional `DBInstance` record. It provides functions to construct, parse, and convert the result to various formats like JSON and query parameters. It is used specifically to handle responses from stopping an RDS instance in AWS, where the result may include the updated instance state.",
      "description_length": 397,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AccountQuotaList",
      "library": "aws-rds",
      "description": "This module handles lists of account quotas for AWS RDS, providing operations to convert, parse, and serialize quota data. It works with XML nodes, JSON values, and AWS query parameters, supporting data interchange between AWS services and OCaml applications. Use cases include processing RDS account quota responses from AWS APIs and constructing requests with quota constraints.",
      "description_length": 380,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventCategoriesMap",
      "library": "aws-rds",
      "description": "Maps event categories to RDS sources by type. It handles XML parsing, JSON serialization, and query parameter conversion for RDS event category configurations. Used when managing RDS event subscriptions and filtering events by category.",
      "description_length": 236,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for creating a new RDS DB parameter group, including required fields like name, family, and description, along with optional tags. It provides functions to construct, parse, and serialize the record to various formats such as JSON and query parameters. It is used when configuring and provisioning custom parameter groups for Amazon RDS database instances.",
      "description_length": 390,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidOptionGroupStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid option group state errors in RDS operations. It provides functions to convert values to query parameters, JSON, and back, specifically for error reporting and handling. Use this when interacting with RDS APIs that require strict error format conversions.",
      "description_length": 332,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a message to delete a database parameter group in AWS RDS. It includes operations to construct, parse, and serialize the message to query parameters or JSON format. It works directly with string values for parameter group names, and integrates with AWS query and JSON handling libraries for API communication.",
      "description_length": 359,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AvailabilityZones",
      "library": "aws-rds",
      "description": "This module handles list operations for availability zones in AWS RDS, providing functions to parse, convert, and serialize string lists. It works directly with `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t` for data interchange. Use this module when managing availability zone configurations during RDS instance setup or when processing AWS API responses.",
      "description_length": 357,
      "index": 116,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupMembership",
      "library": "aws-rds",
      "description": "This module handles the representation and conversion of RDS option group membership data. It provides constructors, JSON and XML parsers, and query parameter serialization for working with option group names and their associated statuses. Useful for managing database option groups in AWS RDS workflows, such as when creating or modifying DB instances with specific option group configurations.",
      "description_length": 395,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ExportTasksMessage",
      "library": "aws-rds",
      "description": "This module handles RDS export task responses, providing functions to construct, parse, and serialize messages containing a list of export tasks and an optional pagination marker. It works with XML, JSON, and AWS query formats for use in API interactions. Concrete use cases include processing RDS export task listings from AWS API calls and converting them for further processing or display.",
      "description_length": 392,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeValidDBInstanceModificationsResult",
      "library": "aws-rds",
      "description": "This module handles the result of describing valid DB instance modifications by providing a structured type to hold an optional valid DB instance modifications message. It includes functions to construct, parse, and convert the result to and from query parameters, JSON, and XML. Use this module when retrieving and processing modification options for RDS instances in AWS, particularly for validating or applying configuration changes.",
      "description_length": 436,
      "index": 119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DB parameter group records. It provides parsing from XML nodes, conversion to query format, and JSON serialization and deserialization. It is used when managing RDS parameter group responses or requests in AWS SDK workflows.",
      "description_length": 257,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Parameter",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing RDS parameter configurations, including fields like parameter name, value, description, and modifiability. It provides functions to construct, serialize, and parse these parameter records, primarily working with string and boolean types alongside RDS-specific enums. It is used to manage database instance configuration parameters when interacting with the AWS RDS service, such as during parameter group creation or modification.",
      "description_length": 484,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StartDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type `t` representing a message to start a DB instance, containing a `d_b_instance_identifier` field. It provides functions to construct, parse, and serialize the message to query parameters or JSON, as well as parsing from JSON. It is used when initiating database instances via RDS APIs, where the identifier specifies which instance to start.",
      "description_length": 379,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBSnapshotAttributesResult",
      "library": "aws-rds",
      "description": "This module handles the result of describing RDS database snapshot attributes. It provides operations to create, parse, and serialize the result, which includes optional snapshot attribute data. Use it when retrieving or modifying access permissions for RDS snapshots using AWS API calls.",
      "description_length": 288,
      "index": 123,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpointQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition for exceeding a quota on database cluster endpoints. It provides operations to construct, parse, and convert the error to query parameters or JSON format. It is used specifically for handling and serializing quota exceeded faults in RDS database cluster endpoint management.",
      "description_length": 347,
      "index": 124,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PendingMaintenanceActions",
      "library": "aws-rds",
      "description": "This module handles parsing, serialization, and manipulation of lists of resource pending maintenance actions in AWS RDS. It provides functions to convert between XML, JSON, and query string representations of these lists, specifically working with `ResourcePendingMaintenanceActions.t` records. It is used when retrieving or submitting batches of pending maintenance actions for RDS resources via API calls.",
      "description_length": 408,
      "index": 125,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CopyDBClusterParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for configuring RDS database cluster parameter group copies, including source and target identifiers, a description, and optional tags. It provides functions to construct, serialize, and parse these configuration records, specifically for interacting with the RDS service. Use cases include creating copies of parameter groups during database cluster setup or management workflows.",
      "description_length": 415,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBParameterGroupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database parameter groups with optional filters, record limits, and pagination. It supports operations to construct, parse, and serialize the structure to JSON, query parameters, or XML. Use this module when retrieving RDS parameter group information with specific filtering and pagination requirements.",
      "description_length": 357,
      "index": 127,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterBacktrackList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS cluster backtrack records, providing functions to convert them to and from JSON, query parameters, and XML. It supports parsing from XML nodes and constructing from JSON values. Use this module when managing RDS cluster backtracking data in AWS API requests or responses.",
      "description_length": 304,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DoubleRangeList",
      "library": "aws-rds",
      "description": "This module handles lists of double ranges, providing functions to convert them to and from JSON, query parameters, and XML. It supports parsing from XML nodes and constructing from JSON values. Use this module when working with AWS RDS configurations that involve numeric range data, such as defining valid value ranges for database parameters.",
      "description_length": 345,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBSubnetGroupStateFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the invalid DB subnet group state fault in AWS RDS operations. It works with the unit type to represent an error condition, providing functions for parsing, converting to query format, and serializing to and from JSON. Concrete use cases include error handling and response processing in RDS API interactions.",
      "description_length": 374,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DoubleRange",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing a range of double-precision floating-point values, with optional lower and upper bounds. It provides functions to construct, parse, and convert the range to and from JSON, query parameters, and XML. Use this module when handling numeric range filters in AWS RDS API requests or responses, such as specifying acceptable values for database parameters.",
      "description_length": 404,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBSecurityGroupStateFault",
      "library": "aws-rds",
      "description": "This module defines a specific error type for handling invalid database security group states in AWS RDS operations. It includes functions to create, parse, and convert the error to common formats like JSON and query parameters. It is used when interacting with AWS RDS APIs to manage or inspect database security groups.",
      "description_length": 321,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CertificateNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing an RDS certificate not found error, with operations to create, parse, and convert the error to query parameters, JSON, or from JSON. It works with unit values and standard AWS query and JSON structures. Concrete use cases include handling and serializing certificate-related errors in RDS API interactions.",
      "description_length": 350,
      "index": 133,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSnapshotAttributeResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying DB snapshot attributes in AWS RDS. It provides operations to create, parse, and convert the result to and from JSON and query formats. It works with the `DBSnapshotAttributesResult` type to represent the updated attributes of a DB snapshot.",
      "description_length": 284,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeEngineDefaultClusterParametersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS engine default cluster parameters, including fields for parameter group family, filters, pagination, and markers. It provides functions to construct, parse, and serialize these queries to JSON or query strings. It is used when retrieving default parameter settings for RDS clusters, supporting filtered and paginated results.",
      "description_length": 379,
      "index": 135,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ProcessorFeatureList",
      "library": "aws-rds",
      "description": "This module handles lists of processor features for RDS instances, providing functions to convert, parse, and serialize them to and from JSON, query parameters, and XML. It works with lists of `ProcessorFeature.t` records, each representing a feature like core count or threads per core. Use this module when configuring or retrieving RDS instance processor settings via the AWS API.",
      "description_length": 383,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxyTargetGroupsRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for querying RDS DB proxy target groups, including fields like proxy name, optional target group name, filters, pagination marker, and max records. It provides functions to construct, parse, and serialize these requests to JSON or query parameters. Concrete use cases include retrieving specific target group details or listing multiple target groups with filtering and pagination.",
      "description_length": 421,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AddSourceIdentifierToSubscriptionResult",
      "library": "aws-rds",
      "description": "This module handles the result of adding a source identifier to an RDS event subscription. It provides operations to create, parse, and serialize the result, which includes an optional event subscription. It is used when managing RDS event notifications by associating sources with subscriptions.",
      "description_length": 296,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the case when an option group quota is exceeded in RDS operations. It works with unit type values and provides functions to construct, parse, and convert the error to query parameters, JSON, or from JSON. It is used specifically to represent and manage quota exceeded faults in RDS option groups.",
      "description_length": 361,
      "index": 139,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBSubnetGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a single type `t` representing a message to delete a DB subnet group, containing the subnet group name. It provides functions to construct, parse, and serialize the message to query parameters or JSON, and includes a parser from XML nodes. Concrete use cases include sending deletion requests to AWS RDS and handling the corresponding API interactions.",
      "description_length": 372,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition when the DB security group quota is exceeded. It works with unit type values to represent the presence of this specific error, and provides functions to convert error data to query parameters, JSON, and back. Use this module to detect and respond to quota limits when managing RDS security groups via API calls.",
      "description_length": 396,
      "index": 141,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_rds.Types.SourceType",
      "library": "aws-rds",
      "description": "This module defines a polymorphic variant type `t` representing various AWS RDS source types such as database instances, parameter groups, and snapshots. It provides bidirectional conversions between strings and the variant type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use this module when handling RDS event subscriptions or logging that require specific source type identifiers.",
      "description_length": 433,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBLogFilesDetails",
      "library": "aws-rds",
      "description": "This module defines a data structure for holding details about database log files, including optional fields for the log file name, last written timestamp, and size. It provides functions to construct instances, parse XML input, convert to query format, and serialize to and from JSON. It is used when retrieving metadata about RDS database log files through the AWS API.",
      "description_length": 371,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterMemberList",
      "library": "aws-rds",
      "description": "This module handles lists of global cluster members in AWS RDS, providing operations to convert the list to and from JSON and query formats, and to parse XML input into a list of global cluster members. It works with the `GlobalClusterMember.t` type, representing each member in a global cluster. Use this module when managing cross-region RDS clusters, particularly when handling member configuration or status across regions.",
      "description_length": 427,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RegisterDBProxyTargetsRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for registering DB proxy targets, including fields for the proxy name, target group name, and lists of DB instance and cluster identifiers. It provides functions to construct, parse, and serialize the request for use with AWS RDS operations. Concrete use cases include configuring proxy routing by associating specific database instances or clusters with a proxy target group.",
      "description_length": 416,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidS3BucketFault",
      "library": "aws-rds",
      "description": "This module defines a unit type representing an invalid S3 bucket fault in RDS operations. It provides functions to construct, parse, and convert the fault to query parameters or JSON format. Use this module when handling RDS errors related to S3 bucket validation failures.",
      "description_length": 274,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterBacktrackNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `DBClusterBacktrackNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query parameters, JSON, and back from JSON. Use this module when interacting with RDS APIs that require error signaling for missing DBCluster backtracks.",
      "description_length": 358,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an RDS DB cluster parameter group, including the parameter group name and a list of parameters. It provides functions to construct, parse, and serialize the structure to query or JSON formats, and to create an instance from JSON input. It is used when updating parameter settings for an Amazon RDS cluster.",
      "description_length": 357,
      "index": 148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ScalingConfigurationInfo",
      "library": "aws-rds",
      "description": "This module defines a record type for managing RDS cluster scaling configurations, with optional fields for capacity limits, auto-pause behavior, and timeout actions. It provides functions to construct, parse, and convert these configurations to and from JSON and query formats. It is used when configuring or retrieving settings for Aurora Serverless clusters, particularly in scenarios involving scaling policies and resource management.",
      "description_length": 439,
      "index": 149,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyGlobalClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an Amazon RDS global cluster, including optional fields for the cluster identifier, new identifier, and deletion protection. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, enabling updates to global cluster configurations. Use this module when issuing modification requests to RDS global clusters via the AWS SDK.",
      "description_length": 417,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyTargetAlreadyRegisteredFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where a DB proxy target is already registered. It works with unit type values and provides operations for parsing, converting to query format, and serializing to and from JSON. It is used specifically in error handling scenarios when managing RDS proxy targets.",
      "description_length": 341,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SNSInvalidTopicFault",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing an invalid SNS topic error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query or JSON formats. It is used when handling API responses that indicate an invalid SNS topic configuration.",
      "description_length": 273,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZoneMessage",
      "library": "aws-rds",
      "description": "This module handles RDS custom availability zone messages, providing functions to construct, parse, and serialize them. It works with XML nodes, JSON values, and AWS query parameters. Use it to process responses from RDS API calls related to custom availability zones.",
      "description_length": 268,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Timezone",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing timezone information with an optional name field. It provides functions to construct, serialize, and convert timezone values to and from JSON, query parameters, and XML. Use this module when handling timezone configurations in RDS database instances, particularly when interacting with AWS APIs that require timezone metadata.",
      "description_length": 380,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Subnet",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a subnet with optional fields for identifier, availability zone, outpost, and status. It provides functions to construct, parse, and convert subnets to and from XML, JSON, and query formats. Concrete use cases include handling subnet information when interacting with RDS API operations like describing or modifying database instances.",
      "description_length": 385,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AuthorizationNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling authorization not found errors in AWS RDS operations. It provides functions to convert the unit value to query parameters, JSON, and to parse from JSON or other input, always resulting in a unit value. This is used when an API call encounters a missing authorization, requiring no additional data beyond the presence of the error itself.",
      "description_length": 407,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the absence of a database parameter group in RDS operations. It includes functions for creating an empty value, parsing optional values, and converting values to query parameters or JSON format. It is used specifically to represent and serialize the condition where a database parameter group is not found during AWS RDS API interactions.",
      "description_length": 408,
      "index": 157,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PromoteReadReplicaMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for promoting a read replica in Amazon RDS, including the instance identifier, backup retention period, and preferred backup window. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query parameters. Concrete use cases include configuring and submitting RDS instance promotion requests through AWS API integrations.",
      "description_length": 401,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateEventSubscriptionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring RDS event subscriptions, including fields like subscription name, SNS topic ARN, event categories, and source IDs. It provides operations to construct, serialize, and parse subscription configurations, supporting both JSON and XML formats. Concrete use cases include setting up notifications for specific RDS events and managing subscription settings in AWS infrastructure code.",
      "description_length": 431,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshot",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS cluster snapshot, with fields for metadata like identifiers, timestamps, storage, and encryption. It provides operations to construct, parse, and serialize cluster snapshots to and from XML, JSON, and query formats. Concrete use cases include managing backup snapshots of RDS clusters, retrieving snapshot properties, and integrating with AWS RDS APIs for database restoration or analysis.",
      "description_length": 446,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAutomatedBackup",
      "library": "aws-rds",
      "description": "This module defines a data structure representing automated backups of a database instance, including metadata like storage allocation, encryption status, and backup windows. It provides functions to construct, serialize, and deserialize these backup records for use in querying or configuring AWS RDS services. Concrete use cases include retrieving backup details for disaster recovery planning and automating backup validation workflows.",
      "description_length": 439,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for parameters used to delete a DB cluster, including the cluster identifier, optional flags for snapshot behavior, and an optional final snapshot identifier. It provides functions to construct, parse, and serialize these parameters to JSON, query strings, or XML. Concrete use cases include configuring and sending RDS cluster deletion requests with precise snapshot handling options.",
      "description_length": 419,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.TargetList",
      "library": "aws-rds",
      "description": "This module handles the serialization and deserialization of a list of DB proxy targets. It provides functions to convert between XML, JSON, and query string representations and the corresponding OCaml type. It is used when managing RDS proxy target groups, particularly for operations involving adding, retrieving, or modifying targets in a proxy.",
      "description_length": 348,
      "index": 163,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterEndpointMessage",
      "library": "aws-rds",
      "description": "This module defines a single type `t` representing a message to delete a DB cluster endpoint, containing the endpoint identifier. It provides functions to construct, parse, and serialize the message to query parameters or JSON, ensuring compatibility with AWS RDS APIs. Use this module when interacting with RDS cluster endpoints, particularly for deletion operations requiring structured message formatting.",
      "description_length": 408,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterSnapshotAttributeResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying attributes for an RDS DB cluster snapshot. It provides operations to create, parse, and serialize a response containing optional DB cluster snapshot attributes. Use this when processing API responses after updating snapshot attributes in Amazon RDS.",
      "description_length": 293,
      "index": 165,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RevokeDBSecurityGroupIngressMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for revoking ingress rules from an RDS database security group, supporting operations to create, parse, and serialize the structure to query or JSON formats. It works with string values representing security group names, CIDR IPs, EC2 security group identifiers, and owner IDs. Concrete use cases include constructing API requests to remove access rules from RDS security groups using either CIDR ranges or EC2 security group references.",
      "description_length": 474,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EngineDefaults",
      "library": "aws-rds",
      "description": "This module defines a data structure for holding engine defaults in an RDS configuration, including the parameter group family, a pagination marker, and a list of parameters. It provides functions to construct, serialize, and deserialize this structure for use in API requests and responses. Concrete use cases include retrieving and processing default parameter values for RDS database engines.",
      "description_length": 395,
      "index": 167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.BackupPolicyNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling backup policy not found errors in RDS operations. It provides functions to convert error data to query format, JSON, and back, ensuring compatibility with AWS API interactions. Use this module when managing RDS instance backup policies and handling related API error responses.",
      "description_length": 347,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeEngineDefaultClusterParametersResult",
      "library": "aws-rds",
      "description": "This module handles the result of describing default engine parameters for an RDS cluster. It provides functions to construct, parse, and serialize the result, which includes optional engine defaults data. It is used when retrieving and processing default parameter settings for RDS database clusters from AWS.",
      "description_length": 310,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PendingMaintenanceActionsMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing pending maintenance actions for AWS RDS resources. It provides operations to construct, parse, and serialize messages containing a list of pending actions and an optional pagination marker. Use this module when retrieving or processing RDS maintenance events from AWS API responses in formats like XML, JSON, or query strings.",
      "description_length": 375,
      "index": 170,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxiesRequest",
      "library": "aws-rds",
      "description": "This module defines the request structure for querying DB proxy information, supporting operations to filter, paginate, and configure result limits. It works with string and integer types, along with filter lists, to construct and deconstruct API requests. Concrete use cases include retrieving specific DB proxies by name, applying custom filters, and handling paginated responses with markers and max record limits.",
      "description_length": 417,
      "index": 171,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterResult",
      "library": "aws-rds",
      "description": "This module defines a single type `t` that represents the result of a DBCluster creation operation, containing an optional DBCluster record. It provides functions to construct, parse, and serialize this result to and from XML, JSON, and query formats. It is used when handling responses from RDS cluster creation requests, allowing structured access to the created cluster data.",
      "description_length": 378,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceFromDBSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a database instance from a snapshot in AWS RDS. It provides functions to create, parse, and convert the result structure to and from XML, JSON, and query formats. It works with the `DBInstance.t` type, representing the restored database instance data.",
      "description_length": 295,
      "index": 173,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceFromS3Message",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for configuring an RDS instance restoration from an S3 source. It includes functions to construct, parse, and serialize the configuration, supporting data types like strings, integers, booleans, and lists of security groups, tags, and log types. It is used to specify parameters such as source engine details, S3 bucket location, encryption settings, and performance options when restoring a database instance.",
      "description_length": 459,
      "index": 174,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBClusterEndpointStateFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `InvalidDBClusterEndpointStateFault` error in AWS RDS operations. It provides functions to create, parse, and convert the error type to JSON or query string formats. It is used when interacting with RDS cluster endpoints to represent invalid state conditions in API requests or responses.",
      "description_length": 357,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RemoveSourceIdentifierFromSubscriptionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for removing a source identifier from an RDS event subscription. It includes functions to construct, parse, and serialize the structure to query parameters or JSON, using string-typed subscription names and source identifiers. Concrete use cases include managing event notifications in AWS RDS by updating subscription configurations.",
      "description_length": 371,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBParametersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database parameter groups, including fields like parameter group name, source, filters, and pagination controls. It provides functions to construct, parse, and serialize these queries in formats like JSON and AWS Query. Use this module when retrieving or filtering RDS parameter settings for database configuration or auditing.",
      "description_length": 381,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ExportTaskNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the absence of an export task in RDS operations. It includes functions for creating, parsing, and converting the unit value to query parameters, JSON, and back from JSON. It is used specifically to represent and serialize the `ExportTaskNotFoundFault` error condition in AWS RDS APIs.",
      "description_length": 354,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type representing a message to delete a DB cluster snapshot, containing the snapshot identifier. It provides functions to construct the message, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used when interacting with AWS RDS APIs to delete cluster snapshots by identifier.",
      "description_length": 366,
      "index": 179,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InstallationMediaNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `InstallationMediaNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to various formats such as JSON and query parameters. It is used specifically to represent and manage the absence of installation media in RDS-related API calls.",
      "description_length": 362,
      "index": 180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyList",
      "library": "aws-rds",
      "description": "This module handles lists of DBProxy values, providing direct conversions to and from JSON, query parameters, and XML. It includes parsing from XML nodes and constructing from a generic value. Use this module when working with AWS RDS DBProxy list responses, particularly for API interactions or configuration management.",
      "description_length": 321,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ExportTasksList",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of RDS export task lists. It provides functions to convert between XML, JSON, and query formats and a list-based structure of export tasks. Use this module when interacting with AWS RDS APIs to manage export tasks, particularly for exporting snapshots to Amazon S3.",
      "description_length": 338,
      "index": 182,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ConnectionPoolConfigurationInfo",
      "library": "aws-rds",
      "description": "This module defines a record type for connection pool configuration settings, including optional fields for connection limits, idle percentages, borrow timeouts, session pinning filters, and initialization queries. It provides functions to construct, parse, and convert these configurations to and from JSON and query formats. It is used to manage database connection pool behavior in AWS RDS Proxy settings.",
      "description_length": 408,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StartDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for initiating an RDS database cluster start operation, containing a single required field: the cluster identifier. It provides functions to construct the structure, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used specifically to prepare and serialize requests to start an Amazon RDS database cluster via the AWS API.",
      "description_length": 416,
      "index": 184,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstancesOfferingNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling cases where a reserved DB instance offering is not found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, and back from JSON. Use this when interacting with AWS RDS APIs to manage reserved instance offerings and handle missing offerings in requests.",
      "description_length": 366,
      "index": 185,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InsufficientAvailableIPsInSubnetFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition when there are not enough available IP addresses in a subnet. It provides operations to create, parse, and serialize this error state into query parameters or JSON format. Use this module when interacting with AWS RDS operations to detect and respond to subnet IP exhaustion scenarios.",
      "description_length": 370,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyTargetGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a DB proxy target group with fields for metadata like name, ARN, status, and connection pool configuration. It provides functions to construct, parse, and serialize instances for use in API interactions, such as sending requests or processing responses. Concrete use cases include managing RDS proxy target groups in AWS deployments, retrieving their configuration details, and handling their state across operations.",
      "description_length": 467,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.BacktrackDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for configuring RDS cluster backtracking, including the cluster identifier, target time, and optional flags for behavior control. It provides functions to construct, parse, and serialize these configurations for use with RDS API operations. The module is used to issue precise backtrack commands to an RDS cluster using AWS SDK tooling.",
      "description_length": 370,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionsList",
      "library": "aws-rds",
      "description": "This module handles lists of database option configurations in AWS RDS operations. It provides functions to parse, convert to query format, and serialize to and from JSON for use in API requests and responses. It works directly with XML nodes, JSON values, and AWS query parameters to manage option list data during instance configuration or modification.",
      "description_length": 355,
      "index": 189,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBParameterGroupStateFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling invalid database parameter group state errors in AWS RDS operations. It provides functions to construct, parse, and convert error data to query parameters or JSON format. It is used when interacting with AWS RDS APIs to manage and validate database parameter groups.",
      "description_length": 331,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AuthorizeDBSecurityGroupIngressMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for authorizing ingress to a DB security group, including fields for the security group name, CIDR IP, and EC2 security group details. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML formats. Concrete use cases include configuring database security group access rules when interacting with AWS RDS APIs.",
      "description_length": 405,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeEventSubscriptionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring RDS event subscription queries, including optional filters, pagination, and subscription identifiers. It provides functions to construct, serialize, and convert the structure to and from JSON and XML formats. Concrete use cases include querying AWS RDS for event subscription details with custom filtering and pagination parameters.",
      "description_length": 385,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupMembership",
      "library": "aws-rds",
      "description": "This module defines a type representing the membership of a database in a security group, with optional fields for the security group name and membership status. It provides functions to construct, parse, and convert the type to and from XML, JSON, and query formats. This is used when managing RDS instance security group associations in AWS API requests and responses.",
      "description_length": 370,
      "index": 193,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceFromS3Result",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a DB instance from an S3 backup in AWS RDS. It provides functions to create, parse, and convert result data to and from JSON and query formats. It works with XML nodes and AWS-specific JSON and query structures to facilitate API interactions.",
      "description_length": 286,
      "index": 194,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotAttributeList",
      "library": "aws-rds",
      "description": "This module handles lists of DB snapshot attributes, providing conversions to and from XML, JSON, and query formats. It supports operations for parsing attribute lists from AWS XML responses and serializing them for API requests. Concrete use cases include managing RDS snapshot permissions and metadata during backup or restore operations.",
      "description_length": 340,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Range",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing numeric ranges with optional start, end, and step values. It provides functions to construct ranges, parse them from XML, convert to query parameters, and serialize to and from JSON. It is used when working with AWS RDS APIs that require or return range-based data, such as time or numeric intervals.",
      "description_length": 354,
      "index": 196,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SourceRegionMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a message containing a list of source regions, typically used in AWS RDS API responses. It provides operations to construct, parse, and serialize the message to formats like JSON and AWS Query. Concrete use cases include processing and transmitting region information in RDS replication or cross-region operations.",
      "description_length": 363,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionSettingsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option settings, providing conversions to and from JSON, query parameters, and XML. It supports operations for parsing and serializing option settings used in RDS configuration, such as when modifying or creating database instances with custom options. Use this module when working with RDS API operations that require specifying option configurations in different formats.",
      "description_length": 406,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AuthorizationQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `AuthorizationQuotaExceededFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error type to query parameters, JSON, and back from JSON. Use this module when interacting with AWS RDS APIs to manage and respond to authorization quota exceeded error conditions programmatically.",
      "description_length": 388,
      "index": 199,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidEventSubscriptionStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid event subscription state errors. It provides operations to convert values to query parameters, JSON, and back, ensuring proper serialization and deserialization. It is used when managing event subscription states that are in an invalid configuration.",
      "description_length": 328,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOptionsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option group options, providing functions to convert, parse, and serialize them for queries and JSON. It works with XML nodes, JSON values, and AWS query parameters to facilitate interactions with AWS RDS APIs. Use this module when managing option group configurations, such as during creation, updates, or retrieval of RDS database instances.",
      "description_length": 376,
      "index": 201,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBLogFilesList",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and transformation of RDS database log file lists. It provides functions to convert between XML, JSON, and internal data representations, specifically working with lists of `DescribeDBLogFilesDetails.t`. It is used when retrieving and processing log file metadata from RDS instances, enabling further analysis or display.",
      "description_length": 377,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBEngineVersion",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a database engine version with detailed metadata, including engine name, version, supported features, character sets, and logging capabilities. It provides functions to construct, parse, and serialize instances for use in querying and interacting with RDS services. Concrete use cases include retrieving engine version details from AWS, configuring database instances, and validating upgrade paths.",
      "description_length": 448,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSnapshotResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of a DB snapshot creation, containing an optional DBSnapshot record. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and XML formats. It is used to handle responses from RDS snapshot creation operations, enabling integration with AWS API requests and responses.",
      "description_length": 370,
      "index": 204,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeOptionGroupOptionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS option group options, including fields like engine name, version, filters, and pagination controls. It provides functions to construct, parse, and serialize these queries to JSON or AWS Query format. Use this when configuring or retrieving RDS option groups based on specific engine and version criteria.",
      "description_length": 358,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.TargetState",
      "library": "aws-rds",
      "description": "This module defines an enumeration type `t` representing the possible states of a target in a database cluster, including `REGISTERING`, `AVAILABLE`, and `UNAVAILABLE`. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization to JSON, query parameters, and XML. These operations support handling target state data in API requests and responses when interacting with AWS RDS services.",
      "description_length": 462,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.GlobalClustersMessage",
      "library": "aws-rds",
      "description": "This module handles the serialization and deserialization of RDS Global Clusters messages. It works with XML, JSON, and query string formats, providing functions to convert between these representations and the internal `t` type which includes an optional marker and a list of global clusters. It is used when interacting with AWS RDS APIs to list or retrieve global cluster information.",
      "description_length": 387,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case when a database instance already exists. It provides operations to create, parse, and convert the error to query or JSON formats. Use this module when managing RDS instance creation workflows to detect and handle duplicate instance errors.",
      "description_length": 319,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupMessage",
      "library": "aws-rds",
      "description": "Handles the structure and conversion of RDS security group messages, including marker-based pagination. Works with XML, JSON, and query string formats for API interactions. Used to serialize and deserialize security group data for AWS RDS operations.",
      "description_length": 250,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyDBClusterParameterGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of copying a database cluster parameter group. It provides functions to create, parse, and serialize the result, which includes an optional database cluster parameter group. It is used when managing RDS cluster parameter group copies via AWS API calls.",
      "description_length": 283,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstance",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS database instance with detailed configuration and status fields, such as instance class, engine version, network settings, and backup policies. It includes functions to construct, parse, and convert instances to and from JSON and query formats. Concrete use cases include managing instance lifecycle operations, retrieving instance metadata, and configuring replication and monitoring settings.",
      "description_length": 451,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeReservedDBInstancesOfferingsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying AWS RDS reserved DB instance offerings with optional filters, pagination, and configuration parameters. It supports operations to construct, parse, and serialize the query data for use in API requests. Concrete use cases include listing available reserved instance offerings, filtering by attributes like DB class or duration, and paginating through large result sets.",
      "description_length": 418,
      "index": 212,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyCurrentDBClusterCapacityMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying the capacity of a DB cluster, including fields for the cluster identifier, desired capacity, timeout duration, and timeout action. It provides functions to construct, parse, and serialize the structure to query parameters or JSON format. It is used to configure and send requests to adjust the capacity of an RDS DB cluster programmatically.",
      "description_length": 392,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.FailoverDBClusterResult",
      "library": "aws-rds",
      "description": "This module handles the result of a failover operation for an RDS database cluster. It provides functions to construct, parse, and serialize a result containing an optional DBCluster record. Use this module when managing RDS cluster failovers and processing their responses in JSON, XML, or query formats.",
      "description_length": 305,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SourceRegionList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS source region configurations. It provides parsing from XML nodes, conversion to query parameters and JSON, and construction of empty lists. It is used when managing cross-region RDS snapshots and replication configurations that require listing source regions.",
      "description_length": 292,
      "index": 215,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterEndpointMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an RDS DB cluster endpoint, including fields for the endpoint identifier, type, static members, and excluded members. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, enabling updates to cluster endpoints in AWS RDS. Use this module when adjusting which instances are included in a custom endpoint or changing the endpoint's type.",
      "description_length": 432,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a database cluster message in AWS RDS, including optional pagination markers and a list of database clusters. It provides functions to construct, parse, and serialize the data structure to and from XML, JSON, and query formats. Concrete use cases include processing RDS API responses for listing database clusters and handling paginated results.",
      "description_length": 394,
      "index": 217,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SourceRegion",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a source region in RDS, with optional fields for region name, endpoint, and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing cross-region RDS operations, such as setting up replication sources or querying region-specific metadata.",
      "description_length": 380,
      "index": 218,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotAttributesResult",
      "library": "aws-rds",
      "description": "This module handles RDS cluster snapshot attributes, including identifiers and attribute lists. It provides functions to create, parse, and convert snapshot attribute data to and from XML, JSON, and query formats. Use it when managing RDS cluster snapshots, particularly for operations involving access control or metadata retrieval.",
      "description_length": 333,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBClusterStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `InvalidDBClusterStateFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query parameters or JSON format. Use this module when interacting with AWS RDS APIs to manage or respond to invalid database cluster state errors programmatically.",
      "description_length": 363,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventSubscriptionsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS event subscription data. It provides functions to convert, parse, and serialize event subscription lists to and from XML, JSON, and query formats. Use this module when managing RDS event subscriptions, such as when listing or configuring notifications for database events.",
      "description_length": 305,
      "index": 221,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterSnapshotAttributeMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying attributes of a DB cluster snapshot in Amazon RDS. It supports operations to add or remove specific attribute values, working with string identifiers and lists of attribute values. It is used to construct, parse, and serialize requests for updating snapshot permissions or metadata attributes.",
      "description_length": 344,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CharacterSet",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling character set information, including name and description fields. It provides functions to construct, parse, and convert character set data to and from XML, JSON, and query formats. Use this module when managing database character sets in RDS configurations, particularly for operations involving metadata retrieval or API communication.",
      "description_length": 387,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterParametersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS cluster parameter groups, including fields like parameter group name, source, filters, and pagination controls. It provides functions to construct, parse, and serialize these queries in formats like JSON and URL-encoded query strings. It is used when retrieving and filtering parameter settings for Amazon RDS clusters.",
      "description_length": 373,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterMember",
      "library": "aws-rds",
      "description": "This module defines a record type representing a member of a DB cluster, with optional fields for instance identifier, writer status, parameter group status, and promotion tier. It provides functions to construct, parse, and serialize cluster member data to query parameters, JSON, and from XML nodes. It is used to manage and exchange metadata about individual DB instances within an RDS cluster during API interactions.",
      "description_length": 421,
      "index": 225,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SubscriptionAlreadyExistFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where an RDS event subscription already exists. It provides operations to construct, parse, and serialize this error state into query parameters or JSON format. Use this when managing RDS event subscriptions to detect and handle duplicate subscription attempts.",
      "description_length": 341,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBSecurityGroupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database security groups with optional filters, record limits, and pagination. It supports operations to construct, serialize, and parse messages used in RDS API requests. Concrete use cases include listing security groups matching specific criteria, paginating through large result sets, and integrating with AWS SDK request handling.",
      "description_length": 389,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ResetDBParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for resetting database parameter groups in AWS RDS. It includes operations to create, parse, and serialize messages containing the parameter group name, a flag to reset all parameters, and a list of specific parameters to reset. It is used when issuing API commands to reset parameters in an RDS database instance.",
      "description_length": 351,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AddRoleToDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a message to associate an IAM role with an RDS DB instance, including fields for the DB instance identifier, role ARN, and feature name. It provides functions to construct the message, parse it from XML, convert it to a query format, and serialize it to and from JSON. It is used when configuring enhanced monitoring or other RDS features that require role-based permissions.",
      "description_length": 425,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.KeyList",
      "library": "aws-rds",
      "description": "This module handles lists of string-based encryption keys in AWS RDS operations. It provides functions to convert key lists to and from JSON and query formats, and to parse them from XML responses. Use this module when managing key data in RDS API calls like snapshot encryption or key rotation.",
      "description_length": 295,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.VpcSecurityGroupIdList",
      "library": "aws-rds",
      "description": "This module handles lists of VPC security group IDs for AWS RDS operations. It provides functions to convert, parse, and serialize these lists to and from JSON, query parameters, and XML. Use this module when working with RDS API requests that require multiple VPC security group IDs as input.",
      "description_length": 293,
      "index": 231,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateCustomAvailabilityZoneMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for creating a custom availability zone with optional VPN configuration parameters. It includes functions to construct, parse, and serialize the structure to query or JSON formats. Use this when configuring RDS custom availability zones with specific network settings.",
      "description_length": 305,
      "index": 232,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupNotSupportedFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling cases where a DB security group is not supported. It includes operations for creating, parsing, and converting the unit value to query parameters, JSON, or back from JSON. This is used specifically in error handling scenarios when interacting with RDS services that do not support DB security groups in certain contexts.",
      "description_length": 390,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ApplyMethod",
      "library": "aws-rds",
      "description": "This module defines a polymorphic variant type `t` with two constructors, `Immediate` and `Pending_reboot`, representing apply methods for RDS configuration changes. It includes functions to convert between strings and the `t` type, as well as serialization and deserialization routines for JSON, XML, and query parameters. This module is used to handle apply method values when interacting with AWS RDS APIs, such as modifying database instances or parameter groups.",
      "description_length": 467,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.TargetHealth",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing the health status of a database instance, including its state, reason for the state, and a descriptive message. It provides functions to construct, serialize, and deserialize this structure using JSON, query parameters, and XML. Concrete use cases include monitoring database instance health in AWS RDS and handling health check responses in API integrations.",
      "description_length": 413,
      "index": 235,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.EngineModeList",
      "library": "aws-rds",
      "description": "Handles lists of database engine modes for Amazon RDS operations. Provides functions to convert engine mode lists to and from JSON and query parameters, and to parse them from XML responses. Used when configuring or retrieving RDS instance engine modes like \"provisioned\" or \"serverless\".",
      "description_length": 288,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CertificateMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a certificate message in the context of AWS RDS operations. It provides functions to construct, parse, and convert certificate messages to and from XML, JSON, and query formats. It works with certificate lists and optional string markers, primarily for handling paginated responses from RDS API calls.",
      "description_length": 350,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SourceNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling cases where a source cannot be found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, or back from JSON. It is used in error handling scenarios where the absence of a source needs to be represented uniformly across different data formats.",
      "description_length": 355,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition when a database proxy already exists. It works with unit type values and provides operations to construct, parse, and convert the error to query parameters or JSON format. Concrete use cases include error handling during RDS proxy creation operations.",
      "description_length": 336,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSnapshotAttributeMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying attributes of a DB snapshot in Amazon RDS. It supports operations to add or remove specific attribute values, working with string identifiers and lists of attribute values. It is used to construct and manipulate API requests for updating snapshot permissions or metadata.",
      "description_length": 322,
      "index": 240,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyEventSubscriptionResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying an RDS event subscription. It provides functions to create, parse, and convert the result to and from JSON and query formats. The primary data structure is an optional `EventSubscription` record, used when updating event notification settings for RDS instances.",
      "description_length": 305,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SubnetIdentifierList",
      "library": "aws-rds",
      "description": "This module handles lists of subnet identifiers for AWS RDS operations. It provides functions to convert subnet lists to and from JSON and query formats, and to parse them from XML. It works directly with lists of base string types, supporting configuration and serialization tasks specific to RDS networking.",
      "description_length": 309,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.IPRangeList",
      "library": "aws-rds",
      "description": "This module handles lists of IP ranges for RDS operations, providing functions to convert, parse, and serialize them to and from XML, JSON, and query formats. It works with lists of `IPRange.t` structures, which represent individual IP range entries. Use this module when configuring or retrieving RDS instance access rules that require IP-based restrictions.",
      "description_length": 359,
      "index": 243,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBProxyStatus",
      "library": "aws-rds",
      "description": "This module defines an enumerated type representing the possible status states of a database proxy, such as `Available`, `Creating`, and `Deleting`. It includes functions to convert between string representations and the enumerated values, as well as serialization and deserialization routines for JSON, XML, and query parameters. These capabilities are used when interacting with AWS RDS API operations that manage or report the state of database proxies.",
      "description_length": 456,
      "index": 244,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroupDetails",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS cluster parameter group details, including parameter lists and optional markers. It provides functions to construct, parse, and convert these details to and from XML, JSON, and query formats. Use this module when retrieving or configuring parameter groups for RDS clusters via the AWS API.",
      "description_length": 342,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionConfiguration",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring database options in AWS RDS, including fields like option name, port, version, and security group memberships. It provides functions to construct, parse, and serialize these configurations for use in API requests. Concrete use cases include setting up Oracle Enterprise Manager or SQL Server features in RDS instances.",
      "description_length": 371,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the absence of a global cluster in RDS operations. It includes functions to construct, parse, and convert the unit value to query parameters, JSON, and back from JSON. It is used specifically to represent and manage error conditions where a global cluster is not found during AWS RDS API interactions.",
      "description_length": 371,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionNamesList",
      "library": "aws-rds",
      "description": "Handles lists of string option names for RDS operations. Provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. Used when managing RDS database instance options, such as specifying engine-specific configuration parameters during instance creation or modification.",
      "description_length": 315,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ActivityStreamMode",
      "library": "aws-rds",
      "description": "This module defines an enumeration with two values, `Sync` and `Async`, representing activity stream modes in a system. It provides bidirectional conversion between these values and strings, along with serialization to and from JSON and query formats. It is used to configure or interpret activity stream settings in RDS service interactions.",
      "description_length": 342,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeregisterDBProxyTargetsResponse",
      "library": "aws-rds",
      "description": "This module handles the response for deregistering DB proxy targets in AWS RDS. It defines a unit type and operations to construct, parse, and serialize the response for use in queries and JSON formats. It is used when managing database proxy target groups, specifically for removing targets from a proxy.",
      "description_length": 305,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSecurityGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for creating a database security group in AWS RDS, including required fields like name and description, and optional tags. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when configuring new RDS security groups with specific metadata and tagging requirements.",
      "description_length": 378,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of modifying a database cluster, containing an optional updated DBCluster object. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used to handle responses from RDS API calls that modify database clusters, allowing inspection or further processing of the updated cluster configuration.",
      "description_length": 411,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeExportTasksMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS export tasks with optional filters, pagination, and identifiers. It supports constructing, parsing, and serializing export task requests in JSON and query string formats. Concrete use cases include retrieving specific export tasks by ARN, filtering results, and handling paginated responses from the RDS service.",
      "description_length": 366,
      "index": 253,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstanceQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where the quota for reserved database instances has been exceeded. It provides functions to construct, parse, and convert the error to query parameters or JSON format. This is used specifically in handling AWS RDS API responses that indicate quota limits have been reached.",
      "description_length": 346,
      "index": 254,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterResult",
      "library": "aws-rds",
      "description": "This module defines a result structure for a deleted database cluster, containing an optional DBCluster record. It provides functions to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. It is used to handle the output of a database cluster deletion operation in an AWS RDS context.",
      "description_length": 337,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionVersion",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an option version with optional version string and boolean flag for default status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling RDS option version data in API requests or responses, particularly for managing database engine versions and their properties.",
      "description_length": 401,
      "index": 256,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.StopActivityStreamRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for stopping an RDS activity stream, including the resource ARN and an optional flag to apply the change immediately. It provides functions to construct, parse, and serialize the request for use with AWS RDS APIs. Use this module when interacting with RDS activity streams, particularly when stopping them via the AWS SDK.",
      "description_length": 362,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition when a database cluster snapshot already exists. It provides operations to create, parse, and convert the error to query or JSON formats, typically used in API interactions to manage RDS snapshots. The unit type signifies that no additional data is associated with this error beyond its presence.",
      "description_length": 381,
      "index": 258,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBProxyRequest",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for configuring changes to a database proxy. It includes fields for updating proxy settings such as name, authentication, TLS requirements, timeouts, logging, and network security groups. The module supports serialization to and from JSON and query formats, and is used when modifying RDS database proxy configurations through the AWS API.",
      "description_length": 388,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBEngineVersionList",
      "library": "aws-rds",
      "description": "This module handles lists of DB engine versions, providing functions to parse, convert to query format, serialize to JSON, and deserialize from JSON. It works with XML nodes, JSON values, and AWS query parameters. Use this module when interacting with RDS API operations that require listing or processing multiple database engine versions.",
      "description_length": 340,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AddSourceIdentifierToSubscriptionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for associating a source identifier with an RDS event subscription. It includes functions to construct the structure, convert it to query parameters or JSON, and parse it from XML or JSON input. It is used when managing event notifications in Amazon RDS by linking database sources to existing subscriptions.",
      "description_length": 345,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBEngineVersionMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a database engine version response, including optional pagination markers and lists of engine versions. It provides functions to construct, parse, and serialize the data structure to and from XML, JSON, and query parameters. Concrete use cases include processing AWS RDS API responses for listing database engine versions and handling paginated results.",
      "description_length": 402,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxyTargetsResponse",
      "library": "aws-rds",
      "description": "This module handles responses from describing DB proxy targets in AWS RDS. It includes operations to construct, parse, and serialize response data containing a list of targets and an optional pagination marker. It works directly with XML, JSON, and AWS query formats for integration with AWS SDK tooling.",
      "description_length": 304,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `DBClusterQuotaExceededFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query parameters, JSON, and back from JSON. It is used specifically for signaling that a database cluster quota has been exceeded, with no associated data beyond the presence of the error itself.",
      "description_length": 396,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeValidDBInstanceModificationsMessage",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling messages that describe valid modifications for a DB instance. It includes operations to construct, parse, and serialize the message to query parameters or JSON, based on the provided DB instance identifier. It is used when interacting with AWS RDS to retrieve modification options for an existing database instance.",
      "description_length": 380,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterRole",
      "library": "aws-rds",
      "description": "This module defines a record type with optional fields for ARN, status, and feature name, representing an RDS cluster role. It provides functions to construct, parse, and convert the type to query parameters, JSON, and XML. It is used to manage IAM roles associated with RDS clusters, particularly for operations involving Aurora.",
      "description_length": 330,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBInstanceAutomatedBackupResult",
      "library": "aws-rds",
      "description": "This module handles the result of deleting an automated database instance backup in AWS RDS. It provides functions to construct, parse, and serialize the result, which includes an optional `DBInstanceAutomatedBackup` record. Use this module when processing responses from RDS backup deletion operations, particularly for interacting with backup metadata in XML, query, or JSON formats.",
      "description_length": 385,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotAttributeList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DBClusterSnapshotAttribute values. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing RDS cluster snapshot attributes, such as when retrieving or modifying access permissions for shared snapshots.",
      "description_length": 319,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterBacktrackMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS cluster backtrack responses, including optional pagination markers and lists of backtrack records. It provides operations to construct, serialize, and convert backtrack messages to and from JSON, query parameters, and XML. Use this module when processing RDS API responses to list cluster backtracks, particularly for paginated results and data transformation tasks.",
      "description_length": 419,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceStatusInfoList",
      "library": "aws-rds",
      "description": "This module handles lists of DB instance status information, providing functions to parse, convert to query format, and serialize to and from JSON. It works with XML nodes, JSON values, and AWS query parameters to facilitate interaction with RDS status data. Use this module when retrieving or processing the status of RDS database instances from AWS API responses.",
      "description_length": 365,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteOptionGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying an RDS option group deletion request. It includes operations to create, parse, and serialize the structure to query parameters or JSON, primarily working with string-typed option group names. It is used when issuing deletion commands to AWS RDS for managing database option groups.",
      "description_length": 333,
      "index": 271,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_rds.Types.ResourceNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling resource not found errors in AWS RDS operations. It provides functions to create, parse, and convert the unit value to query parameters, JSON, and back from JSON. It is used to represent the absence of a resource in error responses, enabling consistent error handling and serialization in RDS API interactions.",
      "description_length": 380,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RevokeDBSecurityGroupIngressResult",
      "library": "aws-rds",
      "description": "This module handles the result of revoking ingress rules from a DB security group in AWS RDS. It provides functions to construct, parse, and serialize the result, which includes an optional DBSecurityGroup object. Use this module when processing responses from RDS API calls that revoke access rules on database security groups.",
      "description_length": 328,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DomainNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type representing an error condition when a domain is not found. It provides functions to construct, parse, and convert the error to query parameters, JSON, and back from JSON. It is used to handle domain-related error responses in API interactions.",
      "description_length": 276,
      "index": 274,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxyTargetsRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for querying RDS database proxy targets, including fields for the proxy name, optional target group name, filters, pagination marker, and max record limit. It provides functions to construct, parse, and serialize the request for use with AWS RDS API operations. Concrete use cases include retrieving information about specific targets associated with a database proxy, filtering results, and handling paginated responses.",
      "description_length": 461,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterParameterGroupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS cluster parameter groups, including optional filters, record limits, and pagination markers. It provides functions to construct, parse, and serialize these queries in JSON, XML, and AWS Query formats. It is used to interact with AWS RDS APIs for managing and retrieving cluster-level parameter group configurations.",
      "description_length": 369,
      "index": 276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InstanceQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where the instance quota has been exceeded. It provides functions to construct, parse, and convert the error to query parameters or JSON format. This is used specifically for handling and propagating instance quota exceeded errors in AWS RDS service interactions.",
      "description_length": 336,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteGlobalClusterResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of deleting a global RDS cluster, containing an optional global cluster object. It provides functions to construct, parse, and serialize this result to and from XML, JSON, and query formats. Use this module when handling responses from RDS global cluster deletion operations, particularly to extract and process the returned global cluster information.",
      "description_length": 413,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateCustomAvailabilityZoneResult",
      "library": "aws-rds",
      "description": "This module defines a result structure for creating a custom availability zone, containing an optional `CustomAvailabilityZone` record. It includes functions to construct, parse, and serialize the result to query parameters or JSON, and to create a result from JSON input. It is used to handle responses from AWS RDS API calls that create custom availability zones, allowing integration with XML and JSON AWS protocols.",
      "description_length": 419,
      "index": 279,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CopyDBClusterSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of copying a DB cluster snapshot in AWS RDS. It provides functions to create, parse, and serialize the result, which includes an optional DBClusterSnapshot. It is used when managing database backups and restoring cluster snapshots in AWS RDS workflows.",
      "description_length": 283,
      "index": 280,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.TargetType",
      "library": "aws-rds",
      "description": "This module defines a polymorphic variant type `t` representing different target types for RDS resources, including RDS instances, serverless endpoints, and tracked clusters. It provides bidirectional conversions between strings and the `t` type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use this module when handling RDS target type values in API requests, responses, or configuration data.",
      "description_length": 442,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AddTagsToResourceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for adding tags to an RDS resource, consisting of a resource name and a list of tags. It provides functions to construct the structure, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. Use this module when managing metadata for RDS instances or snapshots via API operations.",
      "description_length": 352,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ValidUpgradeTargetList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS upgrade targets, providing functions to parse, convert to query format, serialize to JSON, and deserialize from JSON. It works with `UpgradeTarget.t` lists and supports AWS API interactions for database version upgrades. Use this module when managing RDS engine version migration paths in AWS deployments.",
      "description_length": 338,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition when a database subnet quota is exceeded. It provides functions to construct, parse, and convert the error to query or JSON formats. It is used to handle API responses indicating subnet limit violations in database service operations.",
      "description_length": 307,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InsufficientDBClusterCapacityFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `InsufficientDBClusterCapacityFault` error in AWS RDS operations. It includes functions to construct, parse, and convert the error to query or JSON formats, primarily working with unit type and standard AWS SDK data structures. It is used when interacting with AWS RDS APIs to manage and respond to cluster capacity-related errors programmatically.",
      "description_length": 417,
      "index": 285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition when a database parameter group already exists. It works with unit type values and provides operations to create, parse, and convert the error to query or JSON formats. It is used in error handling workflows when attempting to create duplicate parameter groups in RDS services.",
      "description_length": 362,
      "index": 286,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.VpcSecurityGroupMembership",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the membership of a VPC security group, with optional fields for the security group ID and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing RDS instance security group associations in AWS API requests and responses.",
      "description_length": 371,
      "index": 287,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterParameterGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of creating a DB cluster parameter group in AWS RDS. It includes operations to construct, serialize, and parse the result, which contains an optional DB cluster parameter group. Use this module when managing RDS cluster configurations, particularly for capturing and transmitting parameter group responses in API calls.",
      "description_length": 350,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidExportOnlyFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid export-only faults in RDS operations. It includes functions for creating, parsing, and converting the unit value to query parameters or JSON format, primarily used for error handling in RDS export operations. Concrete use cases include signaling and processing errors related to unsupported export actions in RDS backups or snapshots.",
      "description_length": 412,
      "index": 289,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceRoles",
      "library": "aws-rds",
      "description": "Handles conversion and manipulation of DB instance role lists for Amazon RDS operations. Works with XML, JSON, and query parameter formats to support API request and response processing. Used when managing IAM roles associated with RDS instances via AWS SDK calls.",
      "description_length": 264,
      "index": 290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyOptionGroupResult",
      "library": "aws-rds",
      "description": "This module defines a result structure for copying an option group, containing an optional `OptionGroup.t` value. It provides functions to construct, parse, and serialize the result to query parameters or JSON format. A typical use case involves handling the output of an RDS option group copy operation, where the resulting group may or may not be present.",
      "description_length": 357,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterFromSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for configuring an RDS database cluster restore from a snapshot. It includes fields for specifying cluster properties like identifiers, engine settings, network configuration, and optional features such as encryption and logging. The module provides functions to construct, serialize, and parse these configurations, primarily used when initiating a restore operation via the AWS RDS API.",
      "description_length": 437,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBInstanceAutomatedBackupStateFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type representing an invalid state for a database instance automated backup in AWS RDS. It includes operations to construct, parse, and convert the state to query or JSON formats, primarily used for error handling and request validation. The module works with unit values and integrates with AWS query and JSON serialization for API interactions.",
      "description_length": 378,
      "index": 293,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterToPointInTimeMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for configuring an RDS cluster restore operation to a specific point in time. It includes fields for specifying source and target cluster identifiers, restore timing, network configuration, encryption, and logging options. The module provides functions to construct, serialize, and parse these configurations, primarily used when initiating a point-in-time recovery for an Amazon RDS cluster.",
      "description_length": 441,
      "index": 294,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RecurringCharge",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing recurring charges, including amount and frequency. It provides functions to create, parse, and serialize charge data to and from JSON and query formats. It is used to handle billing information for AWS RDS resources, such as reserved instances.",
      "description_length": 298,
      "index": 295,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.Option",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS option with optional fields like name, description, persistence flags, port, version, and associated security groups. It provides functions to construct, parse, and serialize these options to and from XML, JSON, and AWS query formats. It is used when managing RDS database options, such as configuring Oracle Enterprise Edition features or custom security group settings.",
      "description_length": 428,
      "index": 296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RebootDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for initiating a database instance reboot in AWS RDS, containing the instance identifier and an optional force failover flag. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when issuing reboot commands to RDS instances, particularly in scenarios requiring controlled failover during maintenance or recovery.",
      "description_length": 419,
      "index": 297,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidGlobalClusterStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type representing an invalid global cluster state error in RDS operations. It includes functions to construct, parse, and convert the error to query or JSON formats. It is used when handling API responses that indicate an RDS global cluster is in an unexpected or invalid state.",
      "description_length": 305,
      "index": 298,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAutomatedBackupQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition when the automated backup quota is exceeded for a database instance. It includes operations to create, parse, and convert the error to query or JSON formats. Use this module to manage and respond to backup quota limits in RDS instance configurations.",
      "description_length": 335,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterSnapshotsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS cluster snapshots with optional filters, pagination, and visibility flags. It supports operations to construct, serialize, and parse snapshot query messages for API requests. Concrete use cases include retrieving specific snapshots by identifier, filtering by type or status, and paginating through large result sets.",
      "description_length": 371,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the case when a database snapshot already exists. It provides operations to create, parse, and convert the unit type to query parameters, JSON, and back from JSON. It is used specifically to signal and manage duplicate snapshot errors in database operations.",
      "description_length": 323,
      "index": 301,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.VpnDetails",
      "library": "aws-rds",
      "description": "This module defines a data structure for holding details about a virtual private network (VPN) associated with an RDS instance. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and AWS query formats. Concrete use cases include retrieving and configuring VPN information when managing RDS instances with AWS.",
      "description_length": 352,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterMember",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a member of an AWS RDS global cluster, including its ARN, reader ARNs, writer status, and write forwarding status. It provides functions to construct, parse, and serialize this structure for use in API requests and responses. The module is used when managing cross-region RDS cluster configurations and replication settings.",
      "description_length": 374,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSecurityGroupResult",
      "library": "aws-rds",
      "description": "This module defines a result structure for RDS security group creation, containing an optional DBSecurityGroup record. It provides constructors, JSON and XML parsers, and query builders to handle AWS RDS API responses. It is used to interpret and construct service response data when managing database security groups in AWS RDS workflows.",
      "description_length": 339,
      "index": 304,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBLogFilesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database log files, including filters, file name patterns, size, and timestamp constraints. It provides functions to construct, parse, and serialize log file query messages for interacting with AWS RDS APIs. Use this module when retrieving specific log files from an RDS instance based on name, size, or last written time.",
      "description_length": 376,
      "index": 305,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.AccountAttributesMessage",
      "library": "aws-rds",
      "description": "This module handles the structure and serialization of RDS account attributes messages. It provides operations to create, parse, and convert account attribute data to and from XML, JSON, and query formats. Specifically, it works with account quotas, enabling interaction with AWS RDS account limits in API requests and responses.",
      "description_length": 329,
      "index": 306,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing RDS DB parameter groups, with optional fields for the parameter group name, family, description, and ARN. It provides functions to construct instances, parse XML input, convert to query parameters, and serialize to and from JSON. Concrete use cases include managing RDS instance configurations and interacting with AWS RDS APIs that require parameter group details.",
      "description_length": 419,
      "index": 307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StringList",
      "library": "aws-rds",
      "description": "This module handles lists of string values with functions to parse, serialize, and convert string lists to query parameters or JSON format. It works with `Ezxmlm.nodes` for parsing XML input and `Aws.Json.t` for JSON serialization and deserialization. Use this module when interacting with AWS RDS APIs that require or return lists of strings, such as parameter groups or security group names.",
      "description_length": 393,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where a DB security group already exists. It provides operations to construct, parse, and serialize this error state into query parameters or JSON format. The module is used when managing RDS security groups to detect and respond to duplicate creation attempts.",
      "description_length": 341,
      "index": 309,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReadReplicaIdentifierList",
      "library": "aws-rds",
      "description": "This module handles lists of string identifiers for read replicas in AWS RDS operations. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML nodes. Use this module when managing read replica configurations that require serialization or API request formatting.",
      "description_length": 315,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceToPointInTimeMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for configuring RDS database instance restoration to a specific point in time. It supports optional configuration parameters such as source and target instance identifiers, restore time, instance class, network settings, and advanced options like encryption, domain integration, and log exports. The module provides functions to construct, serialize, and parse these configurations for use in API requests to AWS RDS.",
      "description_length": 466,
      "index": 311,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CopyDBParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for copying an RDS DB parameter group, including source and target identifiers, a description, and optional tags. It provides functions to construct, serialize, and deserialize this structure for use in API requests. Concrete use cases include configuring parameter group copies in AWS RDS management workflows.",
      "description_length": 348,
      "index": 312,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DBSnapshot values. It provides parsing from XML nodes, conversion to query parameters and JSON, and construction from JSON. It is used when managing RDS snapshot collections in API requests and responses.",
      "description_length": 237,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing a message to modify an RDS DB parameter group, containing the parameter group name and a list of parameters. It provides functions to construct, parse, and serialize the message in various formats including JSON and query strings. It is used when updating parameter settings in an Amazon RDS database instance.",
      "description_length": 354,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupStatus",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the status of a database parameter group, with fields for the parameter group name and apply status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to manage and track the configuration state of RDS parameter groups during instance operations.",
      "description_length": 368,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteEventSubscriptionResult",
      "library": "aws-rds",
      "description": "This module defines a result structure for deleting an RDS event subscription, containing an optional `EventSubscription` record. It provides functions to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. It is used to handle responses from the RDS API when managing event notifications.",
      "description_length": 342,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyDBSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of copying a DB snapshot in AWS RDS, primarily providing a data structure to capture the resulting DB snapshot. It supports operations for constructing, parsing, and converting the result to and from XML, JSON, and query formats. It is used when processing responses from the RDS API after initiating a DB snapshot copy operation.",
      "description_length": 361,
      "index": 317,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyOptionGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying RDS option groups, including fields to specify the target group, options to add or remove, and whether changes should take effect immediately. It provides functions to construct, serialize, and parse modification requests in various formats such as JSON and XML. It is used when updating database engine features or configurations in Amazon RDS.",
      "description_length": 396,
      "index": 318,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.TargetGroupList",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of DB proxy target group records. It provides functions to convert between XML, JSON, and internal data representations, and works with lists of `DBProxyTargetGroup.t` structures. It is used when managing RDS proxy target groups, particularly for interacting with AWS RDS Proxy APIs that expect or return lists of target groups in various formats.",
      "description_length": 430,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a single type `t` representing a message to delete a DB cluster parameter group, with a required field for the parameter group name. It includes functions to construct the message, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used specifically when interacting with AWS RDS APIs to delete custom parameter groups for database clusters.",
      "description_length": 415,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AvailabilityZoneList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS availability zones, providing operations to convert, parse, and serialize them to and from XML, JSON, and query formats. It works with lists of `AvailabilityZone.t` records, which represent metadata about specific availability zones. Concrete use cases include processing AWS RDS API responses containing availability zone data and constructing requests that require lists of availability zones.",
      "description_length": 428,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PurchaseReservedDBInstancesOfferingResult",
      "library": "aws-rds",
      "description": "This module handles the result of purchasing a reserved DB instance offering, primarily by encapsulating an optional `ReservedDBInstance` value. It provides functions to construct, parse, and convert the result to various formats such as JSON and query parameters. Use this module when processing responses from AWS RDS after purchasing a reserved instance, especially for extracting and working with the returned reservation details.",
      "description_length": 434,
      "index": 322,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS database security group, including its associated EC2 security groups, IP ranges, and metadata like name and description. It provides functions to construct, parse, and serialize security group data for use in AWS RDS API requests and responses. Use cases include configuring network access to RDS instances by managing allowed EC2 groups and IP ranges.",
      "description_length": 410,
      "index": 323,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteInstallationMediaMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying RDS installation media to delete by its ID. It includes operations to create, parse, and serialize the structure to query parameters or JSON for API requests. It is used when deleting custom Oracle installation media from AWS RDS.",
      "description_length": 282,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupDetails",
      "library": "aws-rds",
      "description": "This module handles the structure and conversion of DB parameter group details, including parameters and an optional marker for pagination. It provides operations to create, parse, and serialize these details to and from JSON, query strings, and XML. Use this module when retrieving or managing RDS parameter groups, especially when handling paginated responses or API requests.",
      "description_length": 378,
      "index": 325,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS reserved database instance messages. It provides operations for creating, parsing, and converting the message type to and from XML, JSON, and query formats. It is used when managing responses and requests for RDS reserved instance listings, particularly in paginated results.",
      "description_length": 328,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling RDS DB parameter group messages, including optional pagination markers. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when retrieving or processing lists of DB parameter groups from AWS RDS, especially when handling paginated responses.",
      "description_length": 369,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyTargetNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `DBProxyTargetNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query or JSON formats, primarily used for serializing and deserializing error responses. The module is used when interacting with AWS RDS APIs that need to signal or process this specific error condition.",
      "description_length": 404,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InstallationMediaList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS installation media entries, providing direct conversions to and from XML, JSON, and query formats. It supports parsing installation media data from AWS responses and constructing valid requests with media lists. Use this when managing custom database engine versions in RDS, particularly during installation media registration or retrieval operations.",
      "description_length": 384,
      "index": 329,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBProxyResponse",
      "library": "aws-rds",
      "description": "This module defines a single data type `t` that represents the response from modifying a database proxy, containing an optional `DBProxy` record. It provides functions to construct, parse, and convert the response to and from XML, JSON, and query formats. This module is used to handle the structured output of RDS database proxy modification operations.",
      "description_length": 354,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAutomatedBackupMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing automated backups of database instances in AWS RDS. It provides operations to construct, parse, and serialize backup messages to and from XML, JSON, and query formats. Concrete use cases include processing backup responses from AWS API calls and building requests for backup retrieval or deletion.",
      "description_length": 346,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SNSNoAuthorizationFault",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing an empty value used to indicate a lack of authorization in SNS operations. It includes functions to construct, parse, and convert the value to common formats like JSON and AWS query parameters. It is used specifically to handle error cases where SNS authorization is missing in API responses.",
      "description_length": 336,
      "index": 332,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupNotAllowedFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling DB subnet group not allowed errors in RDS operations. It provides functions to construct, parse, and serialize error data to query or JSON formats. Use this module when interacting with RDS APIs that require error handling related to invalid DB subnet group configurations.",
      "description_length": 343,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZoneList",
      "library": "aws-rds",
      "description": "This module handles lists of custom availability zones in AWS RDS. It provides functions to convert, parse, and serialize these lists to and from XML, JSON, and query formats. Use this module when managing custom availability zone configurations in RDS operations like replication or instance deployment.",
      "description_length": 304,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeGlobalClustersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring requests to describe global clusters in AWS RDS, including optional fields for filtering, pagination, and cluster identification. It provides functions to construct, serialize, and parse these request messages in various formats such as JSON and query parameters. Use this module when making API calls to list or filter global clusters with support for pagination and custom filtering criteria.",
      "description_length": 447,
      "index": 335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DB cluster snapshots, providing functions to convert them to and from XML, JSON, and query parameters. It includes parsing from XML nodes and JSON values, as well as serialization to JSON and AWS query format. Use this module when working with AWS RDS API operations that require or return collections of DB cluster snapshots, such as describing or tagging multiple snapshots.",
      "description_length": 409,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBInstanceReadReplicaMessage",
      "library": "aws-rds",
      "description": "This module defines a type and operations for configuring a new RDS read replica instance. It includes functions to construct, parse, and serialize the configuration, supporting fields like instance identifiers, network settings, storage options, and monitoring. It is used to prepare and submit RDS read replica creation requests in AWS.",
      "description_length": 338,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventList",
      "library": "aws-rds",
      "description": "This module defines a list of RDS event records and provides direct conversions between XML, JSON, and query formats for handling event data. It includes parsing from XML nodes and JSON values, as well as serialization to JSON and AWS query parameters. Concrete use cases include processing RDS event responses from AWS API calls and constructing event-based filters for querying RDS resources.",
      "description_length": 394,
      "index": 338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSnapshotResult",
      "library": "aws-rds",
      "description": "This module defines a data structure to represent the result of modifying a database snapshot, containing an optional updated snapshot. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle responses from RDS snapshot modification operations, enabling integration with AWS APIs and internal processing of snapshot updates.",
      "description_length": 419,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterOptionGroupMemberships",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of RDS DBClusterOptionGroupMembership lists. It provides functions to convert between XML, JSON, and internal data representations, specifically working with lists of DBClusterOptionGroupStatus values. It is used when managing RDS cluster option group associations through AWS API requests and responses.",
      "description_length": 377,
      "index": 340,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpointNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when a database cluster endpoint is not found. It provides operations to construct, parse, and convert the unit value to query parameters, JSON, or back from JSON. Use this module to represent and serialize the absence of a database cluster endpoint in API responses or error handling scenarios.",
      "description_length": 374,
      "index": 341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StorageTypeNotSupportedFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `StorageTypeNotSupportedFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query parameters, JSON, and back from JSON. It is used specifically for signaling that a requested storage type is not supported in RDS API responses.",
      "description_length": 352,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StopDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a message structure for stopping a database cluster, containing a single required field: the cluster identifier. It provides functions to construct, parse, and serialize the message in various formats including JSON, query parameters, and XML. This module is used when issuing a stop command to an RDS cluster through the AWS API, ensuring the correct payload format is sent.",
      "description_length": 395,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeCertificatesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS certificates with optional filters, pagination, and identifier-based selection. It supports operations to construct, serialize, and parse certificate query messages in JSON, XML, and AWS query formats. Concrete use cases include listing RDS certificates by applying tag-based filters or retrieving a specific certificate by identifier with custom pagination limits.",
      "description_length": 419,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterBacktrack",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a database cluster backtrack with optional fields for identifiers, timestamps, and status. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML. Concrete use cases include managing RDS cluster backtracking operations, such as recording backtrack events or querying their status in API responses.",
      "description_length": 405,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyOptionGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying an RDS option group, primarily providing a data structure to capture the updated option group information. It works with XML, JSON, and query parameter representations, enabling conversion between these formats and the internal OCaml type. Concrete use cases include processing responses from the RDS API after an option group modification and constructing appropriate input for subsequent API requests.",
      "description_length": 447,
      "index": 346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ExportTaskAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `ExportTaskAlreadyExistsFault` error in AWS RDS operations. It provides functions to create, parse, and convert the error type to JSON or query string formats. It is used when an attempt is made to create a duplicate export task, allowing the error to be serialized and processed in API responses.",
      "description_length": 366,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxyTargetGroupsResponse",
      "library": "aws-rds",
      "description": "This module handles responses from describing RDS database proxy target groups by parsing and serializing target group data and pagination markers. It works with XML, JSON, and query parameter formats to support API interactions. Concrete use cases include processing AWS RDS proxy target group lists and handling paginated results during API requests.",
      "description_length": 352,
      "index": 348,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceStatusInfo",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing the status information of a database instance, including fields like status type, normalcy flag, status message, and additional details. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling RDS instance status responses from AWS API calls and serializing them for logging or further processing.",
      "description_length": 442,
      "index": 349,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CloudwatchLogsExportConfiguration",
      "library": "aws-rds",
      "description": "This module defines a configuration structure for enabling and disabling log types in CloudWatch Logs. It works with log type lists to specify which logs to export from an RDS instance. Use this module when configuring or modifying RDS database instances to control log export behavior for monitoring and auditing.",
      "description_length": 314,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Event",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing RDS event data, including fields like source identifier, event categories, and timestamp. It provides functions to construct, parse, and serialize event data for use in API requests and responses. Concrete use cases include processing RDS event notifications and formatting them for storage or further processing.",
      "description_length": 367,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ParametersList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS parameters, providing operations to convert between XML, JSON, and query formats. It works with lists of `Parameter.t` values, supporting serialization and deserialization for use in API requests and responses. Concrete use cases include processing RDS parameter group configurations from AWS API calls and building parameter lists for modifying database instances.",
      "description_length": 398,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RegisterDBProxyTargetsResponse",
      "library": "aws-rds",
      "description": "This module handles responses from registering DB proxy targets in AWS RDS. It provides functions to construct, parse, and serialize target lists, specifically working with `TargetList.t` data structures. Use this module when managing database proxy endpoint configurations and target group associations in RDS.",
      "description_length": 311,
      "index": 353,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZoneQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the \"CustomAvailabilityZoneQuotaExceededFault\" error in AWS RDS. It includes operations for constructing, parsing, and converting the error to query or JSON formats. It is used when handling API responses that indicate a quota exceeded condition for custom availability zones.",
      "description_length": 341,
      "index": 354,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateOptionGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for creating an RDS option group, including fields like name, engine, version, description, and tags. It provides functions to construct, parse, and serialize the structure to JSON or query parameters. It is used when configuring database option groups in AWS RDS, supporting operations like API request creation and response parsing.",
      "description_length": 371,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteCustomAvailabilityZoneMessage",
      "library": "aws-rds",
      "description": "This module defines a single type `t` representing a message to delete a custom availability zone, containing an `custom_availability_zone_id`. It provides functions to construct, parse, and serialize the message in various formats including JSON, query parameters, and XML. Use this when interacting with AWS RDS APIs to delete custom availability zones by identifier.",
      "description_length": 369,
      "index": 356,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeCustomAvailabilityZonesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS custom availability zones, including optional filters, record limits, and pagination markers. It provides functions to construct, serialize, and parse these queries in JSON, query string, and XML formats. Use this module when interacting with AWS RDS APIs to list or filter custom availability zones with specific criteria.",
      "description_length": 377,
      "index": 357,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.TagList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS tags, providing operations to convert between XML, JSON, and query formats. It works with lists of `Tag.t` values, supporting serialization and deserialization for use in API requests and responses. Concrete use cases include preparing tag data for AWS RDS operations and parsing tag results from AWS responses.",
      "description_length": 344,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PendingCloudwatchLogsExports",
      "library": "aws-rds",
      "description": "This module defines a data structure for managing CloudWatch Logs exports that are pending configuration changes. It includes fields for specifying which log types to enable or disable, along with functions to construct, parse, and serialize the structure to and from XML, JSON, and AWS query formats. It is used when updating RDS instance log exports that require asynchronous processing.",
      "description_length": 389,
      "index": 359,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RangeList",
      "library": "aws-rds",
      "description": "This module handles lists of range values in the context of AWS RDS operations. It provides functions to convert range lists to and from XML, JSON, and query parameters, supporting configuration and retrieval of range-based data such as port ranges or numeric intervals. Use this module when interacting with RDS APIs that require or return range information in these formats.",
      "description_length": 376,
      "index": 360,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RebootDBInstanceResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of rebooting a database instance, containing an optional `DBInstance` record. It provides functions to construct, parse, and convert the result to various formats including JSON, query parameters, and XML. It is used to handle the response from an RDS instance reboot operation, allowing integration with AWS API requests and responses.",
      "description_length": 397,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidExportTaskStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid export task state errors in RDS operations. It provides functions to construct, parse, and serialize the error type to query parameters or JSON format. Use this module when managing RDS export task state validation failures that require explicit error signaling.",
      "description_length": 340,
      "index": 362,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstance",
      "library": "aws-rds",
      "description": "This module defines a record type representing a reserved RDS instance, with fields for metadata like instance class, duration, pricing, and state. It provides functions to construct instances, parse XML data into records, and convert records to query parameters, JSON, or back from JSON. It is used to manage reserved instance configurations in AWS RDS, including billing details and instance offerings.",
      "description_length": 404,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.UserAuthConfigInfo",
      "library": "aws-rds",
      "description": "This module defines a data structure for RDS user authentication configuration, including fields like description, username, authentication scheme, secret ARN, and IAM authentication mode. It provides functions to construct, parse, and serialize these configurations to and from JSON and query parameters. It is used to manage authentication settings for database users in AWS RDS operations.",
      "description_length": 392,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.TagListMessage",
      "library": "aws-rds",
      "description": "This module handles the serialization and deserialization of RDS tag list messages. It works with XML, JSON, and query parameter formats to convert between structured data and AWS API representations. Use it when interacting with RDS tagging operations to process responses or build requests.",
      "description_length": 292,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBInstanceAutomatedBackupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying automated database backups in AWS RDS. It includes fields to filter results by database resource ID, instance identifier, custom filters, and pagination controls. The structure supports conversion to query parameters, JSON serialization, and parsing from XML responses, enabling direct interaction with AWS RDS API endpoints for backup management.",
      "description_length": 397,
      "index": 366,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying a DB snapshot to delete by its identifier. It includes functions to create, parse, and convert the structure to and from JSON and query formats. It is used when invoking the RDS API to delete a specific database snapshot.",
      "description_length": 273,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.IamRoleNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling IAM role not found errors in AWS RDS operations. It provides functions to construct, parse, and convert error data to query parameters or JSON format. Use cases include error handling and response serialization in RDS API clients.",
      "description_length": 300,
      "index": 368,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PendingMaintenanceAction",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a pending maintenance action with optional fields for action name, dates, status, and description. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to manage and serialize RDS maintenance actions retrieved from or sent to an AWS API.",
      "description_length": 356,
      "index": 369,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.Endpoint",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing an RDS endpoint with optional address, port, and hosted zone ID fields. It provides functions to construct, parse, and convert endpoint data to and from XML, JSON, and query formats. It is used when managing RDS instance endpoints, particularly for retrieving and configuring connection details in AWS RDS operations.",
      "description_length": 371,
      "index": 370,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteEventSubscriptionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying an RDS event subscription to delete, containing a single required field: the subscription name. It provides functions to construct the structure, parse it from XML, convert it to a query format, and serialize it to and from JSON. This module is used when managing RDS event notifications, specifically to remove existing subscriptions by their name.",
      "description_length": 401,
      "index": 371,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroupNameMessage",
      "library": "aws-rds",
      "description": "This module handles the serialization and deserialization of a database cluster parameter group name message in AWS RDS operations. It works with XML, JSON, and query string formats to extract or construct a message containing an optional parameter group name. Concrete use cases include processing responses from RDS API calls that return parameter group names, such as modifying or describing cluster parameter groups.",
      "description_length": 420,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAutomatedBackupList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS database instance automated backups, providing operations to convert, parse, and serialize backup data. It works with XML nodes, JSON values, and query parameters, enabling interaction with AWS RDS APIs for backup management. Use this module to process automated backup responses from AWS, construct API requests, or convert backup data between formats.",
      "description_length": 386,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ConnectionPoolConfiguration",
      "library": "aws-rds",
      "description": "This module defines a configuration structure for managing database connection pools, including parameters like maximum connection percentages, borrow timeouts, session pinning filters, and initialization queries. It provides constructors, JSON and XML parsers, and query conversion utilities. Concrete use cases include configuring RDS proxy connection behavior and serializing settings for API requests.",
      "description_length": 405,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OrderableDBInstanceOptionsMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing orderable database instance options, including parsing from XML and JSON serialization. It works with lists of orderable DB instance options and optional string markers for pagination. Concrete use cases include processing AWS RDS API responses for available DB instance configurations and serializing them for further API requests or storage.",
      "description_length": 392,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroups",
      "library": "aws-rds",
      "description": "This module handles the structure and serialization of RDS option groups responses, including parsing from XML, conversion to query format, and JSON serialization. It works with option groups lists and optional markers for pagination. Used when retrieving or managing RDS option group configurations from AWS.",
      "description_length": 309,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RecurringChargeList",
      "library": "aws-rds",
      "description": "This module handles lists of recurring charge data structures, providing direct conversions to and from XML, JSON, and query formats. It supports parsing AWS RDS recurring charge lists from XML nodes and serializing them for API requests or JSON storage. Use this module when processing RDS billing information or integrating with AWS RDS APIs that return recurring charges.",
      "description_length": 374,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpoint",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS DB cluster endpoint, with fields for identifiers, status, endpoint configuration, and member lists. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing custom endpoint configurations for RDS clusters and synchronizing endpoint state with AWS services.",
      "description_length": 405,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InstallationMediaFailureCause",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling failure causes related to RDS installation media, primarily used when managing database engine versions. It includes operations for creating, parsing, and serializing failure cause data, which contains an optional message string. Use this module to capture and communicate errors during RDS installation media setup or registration workflows.",
      "description_length": 392,
      "index": 379,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.AvailableProcessorFeature",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing processor features available in a database instance, including their name, default value, and allowed values. It provides functions to construct, parse, and serialize these features to and from XML, JSON, and query formats. Use this module when configuring or retrieving processor settings for RDS instances, particularly when interacting with the AWS API directly.",
      "description_length": 419,
      "index": 380,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.EC2SecurityGroupList",
      "library": "aws-rds",
      "description": "This module handles lists of EC2 security groups, providing operations to convert, parse, and serialize them for use with AWS RDS. It supports data transformations to and from XML, JSON, and query formats, enabling integration with AWS APIs and internal configuration systems. Use cases include managing database instance security group associations and processing RDS API responses.",
      "description_length": 383,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterBacktracksMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS cluster backtracks, including fields for cluster identifier, optional backtrack ID, filters, record limits, and pagination markers. It provides functions to construct, parse, and serialize these queries in JSON, XML, and AWS query formats. It is used to retrieve information about RDS cluster backtracking operations, such as filtering by timestamp or status.",
      "description_length": 413,
      "index": 382,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CertificateList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS certificate data by providing parsing, serialization, and conversion operations. It works with XML nodes, JSON values, and query parameters to facilitate interactions with AWS RDS certificate data. Concrete use cases include extracting certificate lists from API responses, converting them to JSON for logging, and preparing them for query-based API requests.",
      "description_length": 392,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for constructing, serializing, and parsing messages used to create a DB cluster parameter group in Amazon RDS. It works with string and tag list types to capture the parameter group name, family, description, and optional tags. It is used when configuring database clusters that require custom parameter settings, such as setting up replication or tuning database engine behavior.",
      "description_length": 429,
      "index": 384,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterRoles",
      "library": "aws-rds",
      "description": "This module handles a list of DBClusterRole values, providing direct conversions to and from XML, JSON, and query parameters. It includes parsing from XML nodes and constructing from JSON input. Use this module when managing IAM roles associated with an RDS cluster, particularly during configuration or retrieval operations.",
      "description_length": 325,
      "index": 385,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.UserAuthConfigInfoList",
      "library": "aws-rds",
      "description": "This module handles lists of user authentication configuration info records for RDS. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Use this module when managing RDS instance authentication settings via the AWS API.",
      "description_length": 277,
      "index": 386,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ProcessorFeature",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying processor features with optional name and value fields, using string-based representations. It includes functions to create, serialize to JSON or query parameters, and parse from XML or JSON formats. This module is used to configure processor settings for RDS instances, such as specifying features like \"coreCount\" or \"threadsPerCore\" when modifying or creating DB instances.",
      "description_length": 428,
      "index": 387,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AvailabilityZone",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing an AWS RDS availability zone, with optional name field. It provides functions to construct, parse, and convert availability zone data to and from XML, JSON, and query formats. Use this module when managing RDS instance placement across availability zones, such as during instance creation or zone listing operations.",
      "description_length": 370,
      "index": 388,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.IAMAuthMode",
      "library": "aws-rds",
      "description": "This module defines an enumeration with two values, `DISABLED` and `REQUIRED`, representing IAM authentication modes for RDS. It provides functions to convert between string representations and the enumerated type, along with serialization and deserialization functions for JSON and XML. These operations are used when configuring or interpreting RDS instance authentication settings in AWS API interactions.",
      "description_length": 408,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RemoveSourceIdentifierFromSubscriptionResult",
      "library": "aws-rds",
      "description": "This module handles the result of removing a source identifier from an RDS event subscription. It provides functions to construct, parse, and serialize the result, which includes an optional `EventSubscription` object. Use this module when managing RDS event subscriptions to track the updated subscription state after a source identifier is removed.",
      "description_length": 350,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AccountQuota",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing AWS RDS account quotas, including the quota name, current usage, and maximum allowed value. It provides functions to construct, parse, and convert quota data to and from XML, JSON, and query formats. It is used when retrieving or managing RDS account limits and usage statistics via the AWS API.",
      "description_length": 349,
      "index": 391,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBLogFilesResponse",
      "library": "aws-rds",
      "description": "This module handles responses from RDS database log file descriptions, providing structured access to log file lists and pagination markers. It includes functions to construct, parse, and serialize responses in query, JSON, and XML formats. Concrete use cases include processing AWS RDS API responses to retrieve and paginate through database log files.",
      "description_length": 353,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterList",
      "library": "aws-rds",
      "description": "This module handles lists of GlobalCluster values, providing direct conversions to and from XML, JSON, and query formats. It supports parsing AWS XML responses into typed GlobalCluster records and serializing them for API requests. Use this when working with AWS RDS global cluster APIs to manage cross-region cluster configurations.",
      "description_length": 333,
      "index": 393,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSubnetGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying a DB subnet group in AWS RDS. It provides functions to create, parse, and serialize the result, which includes an optional DB subnet group. Use this module when processing responses from RDS API calls that modify subnet groups, such as updating associated subnets or VPC configuration.",
      "description_length": 329,
      "index": 394,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SubscriptionNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling subscription not found errors in RDS operations. It provides functions to create, parse, and convert error data to query parameters, JSON, and back from JSON. It is used when managing event subscriptions in Amazon RDS to signal when a requested subscription does not exist.",
      "description_length": 338,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReadReplicaDBClusterIdentifierList",
      "library": "aws-rds",
      "description": "This module handles lists of string identifiers for read replica database clusters. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML nodes. Use this when managing replication configurations in AWS RDS services.",
      "description_length": 269,
      "index": 396,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RestoreWindow",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a restore window with optional start and end times. It provides functions to create, parse, and convert the structure to and from XML, JSON, and query formats. It is used to specify time ranges for database restore operations in RDS.",
      "description_length": 283,
      "index": 397,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for modifying a DB snapshot, including fields for the snapshot identifier, engine version, and option group name. It provides functions to construct, parse, and serialize the record to query parameters or JSON, supporting updates to RDS snapshots with optional configuration changes. Use cases include modifying an existing RDS snapshot's engine version or option group during database maintenance or upgrades.",
      "description_length": 444,
      "index": 398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventCategoriesMapList",
      "library": "aws-rds",
      "description": "This module handles lists of event category mappings for AWS RDS events. It provides functions to parse XML input into event category map lists, convert them to query parameters or JSON format, and construct them from JSON data. It is used when managing RDS event subscriptions and notifications.",
      "description_length": 296,
      "index": 399,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBCluster",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS database cluster with fields for configuration and operational metadata like storage, availability zones, backup settings, and network configuration. It provides functions to construct, parse, and serialize cluster data for use in API requests and responses. Concrete use cases include creating cluster configurations, parsing AWS API responses, and converting cluster data to JSON or query parameters for further processing.",
      "description_length": 482,
      "index": 400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SubnetList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS subnet objects, providing direct conversions to and from XML, JSON, and query formats. It supports parsing subnet lists from XML nodes and constructing JSON representations suitable for API requests. Concrete use cases include processing RDS subnet group responses and preparing subnet data for AWS API calls.",
      "description_length": 342,
      "index": 401,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterMemberList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DB cluster members, providing functions to convert, parse, and serialize them for use in API requests and responses. It works with XML, JSON, and query string formats, enabling interaction with AWS RDS services. Use cases include managing cluster member data when creating, updating, or querying RDS clusters via the AWS SDK.",
      "description_length": 358,
      "index": 402,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshot",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS database snapshot with detailed metadata such as identifiers, timestamps, storage configuration, and encryption settings. It includes functions to construct, parse, and convert snapshot data to and from JSON and query formats. Concrete use cases include managing snapshot backups, restoring databases, and querying snapshot properties for monitoring or automation tasks.",
      "description_length": 427,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceRoleQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition for exceeding RDS instance role quotas. It includes operations to construct, parse, and convert the error to query parameters or JSON format. It is used specifically for handling and transmitting quota exceeded faults in RDS instance role management workflows.",
      "description_length": 333,
      "index": 404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ImportInstallationMediaMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for importing installation media into a custom availability zone, with fields specifying engine details and file paths. It provides functions to construct, parse, and convert the structure to query parameters or JSON format. It is used when registering on-premises database installation media with AWS RDS.",
      "description_length": 343,
      "index": 405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventSubscriptionsMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS event subscription responses. It provides operations to construct, parse, and serialize event subscription messages, including optional pagination markers and lists of event subscriptions. It is used to process and transmit event subscription data in RDS API interactions.",
      "description_length": 325,
      "index": 406,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeregisterDBProxyTargetsRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for deregistering DB proxy targets, including fields for the proxy name, target group name, and lists of DB instance and cluster identifiers. It provides functions to construct, parse, and serialize the request for use with AWS RDS API operations. Concrete use cases include managing database proxy configurations by removing specific targets from a proxy or target group.",
      "description_length": 412,
      "index": 407,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribePendingMaintenanceActionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying pending maintenance actions in Amazon RDS, including optional filters, resource identifiers, pagination markers, and record limits. It provides functions to construct, parse, and serialize the query in various formats such as JSON and AWS Query. Use this module when retrieving and managing pending maintenance actions for RDS instances with specific filtering and pagination requirements.",
      "description_length": 439,
      "index": 408,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterRoleNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case where a DBCluster role is not found. It provides operations to construct, parse, and convert the unit value to query parameters, JSON, and back from JSON. Use this when interacting with AWS RDS APIs to manage or respond to missing DBCluster role scenarios.",
      "description_length": 335,
      "index": 409,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBInstanceResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying a database instance in AWS RDS. It provides functions to create, parse, and convert the result to and from XML, JSON, and query formats. It works with the `DBInstance.t` type, representing the modified database instance data.",
      "description_length": 269,
      "index": 410,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.AuthScheme",
      "library": "aws-rds",
      "description": "This module defines a single enumerated type `t` with one value `SECRETS`, representing authentication schemes for RDS operations. It includes functions to convert between strings and the enumerated type, serialize to query parameters or JSON, and parse from XML or JSON. Concrete use cases include handling authentication method configuration in RDS API requests and responses.",
      "description_length": 378,
      "index": 411,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StopActivityStreamResponse",
      "library": "aws-rds",
      "description": "This module defines a response type for stopping an RDS activity stream, including optional fields for KMS key ID, Kinesis stream name, and activity stream status. It provides functions to construct, parse, and serialize the response in various formats such as JSON and query parameters. Concrete use cases include handling and transmitting the result of stopping an activity stream operation in an AWS RDS environment.",
      "description_length": 419,
      "index": 412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling RDS database snapshot messages, including optional pagination markers and lists of snapshots. It provides functions to construct, parse, and serialize these messages to and from XML, JSON, and query formats. Concrete use cases include processing responses from AWS RDS snapshot listing operations and building paginated requests.",
      "description_length": 379,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StartDBInstanceResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of starting a database instance, containing an optional `DBInstance` record. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used specifically to handle responses from RDS start instance operations, allowing inspection or serialization of the resulting database instance state.",
      "description_length": 407,
      "index": 414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing the configuration parameters for creating a database cluster in AWS RDS, including fields like identifiers, security settings, backup policies, and engine options. It provides operations to construct, parse, and serialize these configurations to and from JSON, query strings, and XML. Use this module when setting up new RDS clusters with custom settings for deployment, backups, and access control.",
      "description_length": 443,
      "index": 415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ActivityStreamStatus",
      "library": "aws-rds",
      "description": "This module defines an enumeration type `t` representing the status of an RDS activity stream, with values like `Started` and `Stopping`. It provides bidirectional conversions between strings and the enumerated type, along with serialization to and from JSON and query formats. It is used to interpret and transmit activity stream status values when interacting with AWS RDS APIs.",
      "description_length": 380,
      "index": 416,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InstallationMedia",
      "library": "aws-rds",
      "description": "This module defines a data structure representing installation media metadata for database engines, including identifiers, paths, and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling custom engine installation media in RDS operations and managing media state during deployment workflows.",
      "description_length": 393,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstancesOffering",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a reserved DB instance offering in AWS RDS, including attributes like instance class, duration, pricing, and recurring charges. It provides functions to construct, parse, and serialize these offerings for use in querying or processing RDS reservations. Concrete use cases include retrieving available reserved instance options and preparing reservation purchases with specific configurations.",
      "description_length": 442,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition when a DB subnet group already exists. It works with the `unit` type and provides operations to construct, parse, and convert the error to query or JSON formats. Concrete use cases include error handling during RDS subnet group creation attempts and integration with AWS API request processing.",
      "description_length": 379,
      "index": 419,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateDBInstanceReadReplicaResult",
      "library": "aws-rds",
      "description": "This module handles the result of creating a DB instance read replica in AWS RDS. It provides functions to construct, parse, and serialize the result, which includes an optional DB instance. Use this module when managing read replicas in AWS RDS to interpret responses from the service.",
      "description_length": 286,
      "index": 420,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for creating RDS cluster snapshots, including required identifiers and optional tags. It provides functions to construct, serialize, and parse the structure in various formats such as JSON and query parameters. Concrete use cases include initiating a snapshot of an RDS cluster for backup or replication purposes.",
      "description_length": 350,
      "index": 421,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ProvisionedIopsNotAvailableInAZFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where provisioned IOPS is not available in a specific availability zone. It works with unit type values and provides operations for parsing, converting to query format, and serializing to and from JSON. Concrete use cases include error handling and API response processing in RDS operations related to storage configuration.",
      "description_length": 404,
      "index": 422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBSnapshotStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid database snapshot state errors in AWS RDS operations. It provides operations for constructing, parsing, and serializing the error type to query parameters or JSON. Use this module when interacting with RDS snapshot APIs to manage and respond to invalid state error conditions.",
      "description_length": 354,
      "index": 423,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyCertificatesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying certificate settings in RDS operations, supporting optional fields for certificate identifier and customer override removal. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, specifically for interacting with AWS RDS APIs. Use this module when updating certificate configurations for RDS instances programmatically.",
      "description_length": 416,
      "index": 424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupMembershipList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option group membership records. It provides parsing from XML nodes, conversion to query parameters, and JSON serialization and deserialization. Use this module when managing RDS instance option group associations in API requests or responses.",
      "description_length": 276,
      "index": 425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBInstanceStateFault",
      "library": "aws-rds",
      "description": "This module defines a singleton error type representing an invalid database instance state in RDS operations. It includes functions to construct, parse, and serialize the error for use in API requests and responses. It is used when handling RDS service errors related to database instance lifecycle states.",
      "description_length": 306,
      "index": 426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZone",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a custom availability zone with optional fields for ID, name, status, and associated VPN details. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML data. Concrete use cases include managing custom availability zone configurations in AWS RDS and handling communication with AWS APIs using standardized data formats.",
      "description_length": 423,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReplicaMode",
      "library": "aws-rds",
      "description": "This module defines a type `t` with two variants, `Open_read_only` and `Mounted`, representing replica modes for RDS instances. It provides functions to convert between strings and the `t` type, along with serialization to and from JSON and query formats. It is used to specify and manipulate replica mode settings when interacting with AWS RDS APIs.",
      "description_length": 350,
      "index": 428,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReadersArnList",
      "library": "aws-rds",
      "description": "Handles parsing and serialization of lists of string-based ARNs in AWS RDS operations. Works with XML, JSON, and query string formats, converting between them and a list of base string types. Used when processing RDS API responses containing ARN lists, or when constructing requests that require ARN list inputs.",
      "description_length": 312,
      "index": 429,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOptionVersionsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option versions, providing functions to convert them to and from JSON and query formats, and to parse them from XML. It works with lists of `OptionVersion.t` values, representing versions of database options in AWS RDS. Use this module when managing RDS option groups and needing to serialize or deserialize version information during API interactions.",
      "description_length": 385,
      "index": 430,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CopyDBClusterSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for copying an RDS DB cluster snapshot, including source and target identifiers, optional KMS key ID, pre-signed URL, tag copying flag, and a list of tags. It provides functions to construct, parse, and serialize the structure to query parameters or JSON for use in API requests. Concrete use cases include initiating cross-region snapshot replication and applying encryption during snapshot copying.",
      "description_length": 437,
      "index": 431,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBProxyStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `InvalidDBProxyStateFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query parameters, JSON, and back from JSON. Concrete use cases include error handling when interacting with DB proxies that are in an invalid state.",
      "description_length": 346,
      "index": 432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterSnapshotAttributesResult",
      "library": "aws-rds",
      "description": "This module handles the result of describing RDS cluster snapshot attributes. It provides operations to create, parse, and serialize the result, which includes optional cluster snapshot attribute data. It is used when managing RDS cluster snapshots, particularly for retrieving and modifying their access permissions.",
      "description_length": 317,
      "index": 433,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where an RDS option group already exists. It provides operations to construct, parse, and serialize this error state into query parameters or JSON format. The module is used when managing RDS option groups to detect and respond to duplicate creation attempts.",
      "description_length": 339,
      "index": 434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PendingModifiedValues",
      "library": "aws-rds",
      "description": "This module defines a record type representing pending modifications to an RDS instance, with optional fields for configuration changes like instance class, storage, password, port, and more. It includes functions to construct, parse, and convert these values to and from JSON and query formats. It is used to handle pending RDS instance updates in AWS API interactions.",
      "description_length": 370,
      "index": 435,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceRole",
      "library": "aws-rds",
      "description": "This module defines a data structure for associating an IAM role with an RDS DB instance, including the role ARN, feature name, and status. It provides functions to construct, serialize, and deserialize this structure for use in API requests and responses. Concrete use cases include managing integration between RDS instances and AWS services like S3 or Neptune by attaching and detaching IAM roles.",
      "description_length": 400,
      "index": 436,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error state where a database cluster already exists. It includes functions to construct, parse, and convert the error to query parameters or JSON format. Use this module to handle duplicate database cluster creation errors in AWS RDS operations.",
      "description_length": 302,
      "index": 437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeEngineDefaultParametersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying engine default parameters in Amazon RDS, including fields for parameter group family, filters, pagination, and markers. It provides functions to construct, serialize, and parse these queries in JSON, query string, and XML formats. It is used when retrieving default parameter settings for RDS database engines.",
      "description_length": 360,
      "index": 438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AvailableProcessorFeatureList",
      "library": "aws-rds",
      "description": "This module handles a list of available processor features for RDS instances. It provides functions to parse XML input into a list of processor features, convert the list to query parameters or JSON format, and construct the list from JSON data. Use this module when configuring or retrieving processor feature settings for RDS resources.",
      "description_length": 338,
      "index": 439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyDBParameterGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of copying a DB parameter group in AWS RDS. It provides constructors, parsing, and serialization functions for a type that contains an optional DB parameter group. Use this module when working with RDS parameter group operations, particularly when copying configurations between parameter groups.",
      "description_length": 327,
      "index": 440,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterRoleQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the DBClusterRoleQuotaExceededFault error in AWS RDS operations. It includes functions to construct, parse, and convert the error to common formats like JSON and query parameters. It is used specifically to represent and manage quota exceeded faults related to DB cluster roles in AWS RDS.",
      "description_length": 354,
      "index": 441,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ExportTask",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS export task with fields for task metadata, progress, and configuration. It provides functions to construct, parse, and convert export task data to and from JSON, query parameters, and XML. Use this module when managing RDS snapshot exports to S3, tracking export progress, or handling export task responses from AWS APIs.",
      "description_length": 378,
      "index": 442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Certificate",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing SSL/TLS certificates used with AWS RDS, including fields like certificate identifier, type, thumbprint, validity periods, and ARN. It provides functions to construct, parse, and convert certificate data to and from XML, JSON, and query formats. Concrete use cases include managing certificate information when interacting with RDS API operations like describing or modifying database instances.",
      "description_length": 448,
      "index": 443,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidExportSourceStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid export source state errors in RDS operations. It includes functions to construct, parse, and convert the error type to JSON or query formats. It is used specifically for signaling and processing invalid export source state faults in AWS RDS service interactions.",
      "description_length": 340,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.UpgradeTarget",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS upgrade target with optional fields for engine, version, description, auto-upgrade flag, and major version indicator. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and from JSON. It is used to specify target configurations when managing database instance upgrades in AWS RDS.",
      "description_length": 382,
      "index": 445,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstanceNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when a reserved DB instance is not found. It provides operations to construct, parse, and convert the unit value to query parameters, JSON, or back from JSON. Useful for error handling in RDS service interactions where reserved instance lookups fail.",
      "description_length": 329,
      "index": 446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DomainMembership",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing domain membership information, including fields like domain name, status, FQDN, and IAM role. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. This is used when managing RDS instances that are part of a directory domain, enabling integration with AWS Directory Service.",
      "description_length": 385,
      "index": 447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS DB subnet group responses. It provides operations to create, parse, and serialize DBSubnetGroupMessage records, which include an optional marker for pagination and a collection of DB subnet groups. Use this module when interacting with AWS RDS APIs to manage subnet groups, particularly for operations that return paginated results.",
      "description_length": 385,
      "index": 448,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstanceAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where a reserved database instance already exists. It provides operations to create, parse, and convert the error to query or JSON formats, specifically for interacting with AWS RDS APIs. Use this module when managing RDS reservations to detect and handle duplicate creation attempts.",
      "description_length": 364,
      "index": 449,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StartExportTaskMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for initiating an RDS export task to S3. It includes fields for specifying the export identifier, source ARN, S3 bucket, IAM role, KMS key, optional S3 prefix, and a list of database objects to export. The module provides functions to construct, parse, and serialize this structure for use with AWS RDS APIs.",
      "description_length": 345,
      "index": 450,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionsDependedOn",
      "library": "aws-rds",
      "description": "This module handles lists of string values, specifically for representing dependencies in RDS options. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with RDS option configurations that require specifying dependent options.",
      "description_length": 319,
      "index": 451,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBSubnetGroupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS DB subnet groups, supporting operations to create, parse, and serialize requests with optional filtering, pagination, and naming. It works with XML, JSON, and query string formats for integration with AWS APIs. Concrete use cases include retrieving specific subnet group configurations, applying filters to narrow results, and handling paginated responses from RDS.",
      "description_length": 419,
      "index": 452,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupNameList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS security group names as string values. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this module when working with RDS security group name collections in API requests or responses.",
      "description_length": 289,
      "index": 453,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyOptionGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for copying an RDS option group, including source and target identifiers, a description, and optional tags. It provides functions to construct, parse, and serialize the structure in various formats like JSON and query parameters. Use this module when configuring or duplicating database option groups in AWS RDS workflows.",
      "description_length": 359,
      "index": 454,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSubnetGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of creating a DB subnet group in AWS RDS, primarily providing construction, parsing, and serialization operations. It works with the `t` record type containing an optional `DBSubnetGroup.t`. Use this module to process and manipulate RDS subnet group creation responses in XML, JSON, or query formats.",
      "description_length": 331,
      "index": 455,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.UserAuthConfigList",
      "library": "aws-rds",
      "description": "This module handles lists of user authentication configurations for RDS instances. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Use this module when managing RDS user authentication settings via AWS API calls.",
      "description_length": 273,
      "index": 456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSubnetGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for creating a database subnet group, including required fields like subnet group name, description, and subnet IDs, along with optional tags. It provides functions to construct, parse, and serialize the record to and from XML, JSON, and query formats. Use this when configuring RDS database subnet groups with specific networking and tagging requirements.",
      "description_length": 390,
      "index": 457,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBProxyQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where a database proxy quota has been exceeded. It includes functions to construct, parse, and convert the error to query or JSON formats. It is used specifically for handling and serializing quota exceeded faults in RDS proxy operations.",
      "description_length": 311,
      "index": 458,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.StartActivityStreamRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for starting an activity stream on an RDS resource. It includes fields for the resource ARN, activity stream mode, KMS key ID, and an optional apply-immediately flag. Operations allow creating, parsing, and converting the request to query or JSON formats for API interactions.",
      "description_length": 316,
      "index": 459,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeOrderableDBInstanceOptionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS orderable DB instance options, including fields like engine, version, class, and filters. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or XML. Use this module when configuring or retrieving available DB instance options in AWS RDS, particularly for filtering by attributes like engine version or availability zone.",
      "description_length": 421,
      "index": 460,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBSecurityGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying an RDS DB security group to delete by name. It includes functions to construct the structure, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. Use this when interacting with AWS RDS APIs to delete a specific DB security group.",
      "description_length": 319,
      "index": 461,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.UserAuthConfig",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring user authentication settings in database service operations. It includes fields for authentication scheme, user name, secret ARN, IAM authentication mode, and an optional description. The module provides functions to construct, serialize, and parse these configurations to and from JSON, query parameters, and XML, enabling integration with AWS RDS API operations for managing database instances with specific authentication methods.",
      "description_length": 486,
      "index": 462,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBProxyRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for deleting a database proxy, containing a single field for the proxy name. It provides functions to construct the request, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used when issuing a delete operation for an RDS database proxy, ensuring correct serialization and deserialization of the request data.",
      "description_length": 405,
      "index": 463,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBProxyResponse",
      "library": "aws-rds",
      "description": "This module defines a response structure for creating a database proxy, containing an optional DBProxy record. It includes functions to construct, parse, and convert the response to query parameters, JSON, or XML formats. It is used to handle the output of RDS database proxy creation operations in AWS.",
      "description_length": 303,
      "index": 464,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeReservedDBInstancesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying AWS RDS reserved database instances, supporting operations to construct, parse, and serialize the query parameters. It works with optional string, integer, and boolean types, along with filter lists, to represent query fields like instance class, duration, and offering type. It is used to describe reserved DB instances with customizable filters and pagination controls for AWS RDS management tasks.",
      "description_length": 450,
      "index": 465,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReadReplicaDBInstanceIdentifierList",
      "library": "aws-rds",
      "description": "Handles lists of read replica database instance identifiers for AWS RDS operations. Provides functions to convert, parse, and serialize string lists to and from JSON, XML, and query formats. Used when managing replication configurations or querying replica status in RDS deployments.",
      "description_length": 283,
      "index": 466,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteCustomAvailabilityZoneResult",
      "library": "aws-rds",
      "description": "This module handles the result of deleting a custom availability zone in AWS RDS. It includes operations to construct, parse, and serialize the result, which contains an optional custom availability zone object. Use this module when managing custom availability zones in RDS to process deletion responses in XML, JSON, or query formats.",
      "description_length": 336,
      "index": 467,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalCluster",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an AWS RDS Global Cluster, including fields such as identifier, ARN, engine version, and encryption status. It provides functions to construct, parse, and serialize cluster data for use in API requests and responses. The module is used to manage multi-region RDS clusters, enabling operations like replication configuration and cluster status inspection.",
      "description_length": 404,
      "index": 468,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxiesResponse",
      "library": "aws-rds",
      "description": "Handles responses from RDS DB proxy description requests. It includes operations to create, parse, and serialize DB proxy data along with an optional marker for pagination. Works with DBProxyList and string marker values. Used to retrieve and process lists of RDS proxies and handle paginated results from the AWS API.",
      "description_length": 318,
      "index": 469,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOptionSettingsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option group option settings, providing direct parsing from XML nodes, conversion to AWS query format, and serialization to and from JSON. It works specifically with lists of `OptionGroupOptionSetting.t` values. Use this module when managing RDS option group configurations, particularly when interacting with AWS APIs that require structured option settings.",
      "description_length": 392,
      "index": 470,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidVPCNetworkStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `InvalidVPCNetworkStateFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query parameters, JSON, and back from JSON. Use this module when interacting with AWS RDS APIs that need to signal or handle this specific error condition.",
      "description_length": 356,
      "index": 471,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyEventSubscriptionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an RDS event subscription, including fields like subscription name, SNS topic ARN, source type, event categories, and enabled status. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or XML. Concrete use cases include updating event notifications for RDS instances by specifying which events to monitor and where to send the notifications.",
      "description_length": 439,
      "index": 472,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZoneNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the absence of a custom availability zone in RDS operations. It includes functions for creating, parsing, and serializing the unit value to query parameters or JSON, primarily used in error handling scenarios. Concrete use cases include signaling failure conditions in RDS API calls when a requested custom availability zone does not exist.",
      "description_length": 410,
      "index": 473,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a database instance message, including optional pagination markers and lists of database instances. It provides operations for constructing, serializing, and deserializing these messages to and from XML, JSON, and query formats. Use this module when processing responses or building requests involving collections of RDS database instances.",
      "description_length": 389,
      "index": 474,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBSubnetGroupFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid database subnet group faults. It provides operations for creating, parsing, and converting the unit value to query parameters, JSON, and back from JSON. This is used specifically to manage error responses related to invalid DB subnet group configurations in AWS RDS operations.",
      "description_length": 355,
      "index": 475,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeEventsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring RDS event descriptions with optional time ranges, source filters, and pagination. It supports creating, parsing, and serializing event queries to interact with AWS RDS APIs for retrieving specific database events. Use this module to construct and manage event filtering criteria when querying RDS event logs.",
      "description_length": 361,
      "index": 476,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StorageQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `StorageQuotaExceededFault` error in AWS RDS operations. It includes functions to construct, parse, and convert the error to query or JSON formats, primarily working with unit type to represent the absence of payload data. It is used when interacting with AWS RDS APIs to manage and respond to storage quota exceeded error conditions programmatically.",
      "description_length": 420,
      "index": 477,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpointMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a database cluster endpoint message, including optional pagination markers and lists of cluster endpoints. It provides operations for constructing, serializing, and deserializing these messages to and from XML, JSON, and query formats. Use this module when working with AWS RDS API responses that involve cluster endpoint data, such as listing or retrieving endpoint details with pagination support.",
      "description_length": 448,
      "index": 478,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateGlobalClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for configuring new global database clusters in AWS RDS, with optional fields like identifier, engine, version, and encryption settings. It provides functions to construct, parse, and serialize cluster configurations for API requests. Use this module when setting up cross-region RDS global clusters with specific database properties and failover protections.",
      "description_length": 393,
      "index": 479,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RemoveFromGlobalClusterResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of removing a cluster from a global RDS cluster. It includes functions to construct, parse, and serialize the result, primarily working with XML, JSON, and query parameter formats. It is used to handle responses from AWS RDS operations that modify global cluster membership.",
      "description_length": 335,
      "index": 480,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.WriteForwardingStatus",
      "library": "aws-rds",
      "description": "This module defines an enumeration type `t` representing the possible states of write forwarding in a database service, including `Enabled`, `Disabled`, and transitional states. It provides bidirectional conversion between string representations and the enumerated values, along with serialization to and from JSON and query formats. The module is used to handle state transitions and status reporting in database replication configurations.",
      "description_length": 441,
      "index": 481,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying parameters to delete an RDS database instance, including the instance identifier, snapshot options, and automated backup handling. It provides functions to construct, parse, and serialize these parameters for use in API requests. Concrete use cases include initiating the deletion of a database instance with or without a final snapshot and managing backup retention during deletion.",
      "description_length": 435,
      "index": 482,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.FilterList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS filters, providing operations to convert between XML, JSON, and query representations. It works with lists of `Filter.t` values, supporting serialization and deserialization for use in API requests and responses. Concrete use cases include processing filter parameters for RDS instance queries and formatting filter results from JSON or XML responses.",
      "description_length": 384,
      "index": 483,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstancesOfferingMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS reserved database instance offerings, including optional pagination markers. It provides operations to construct, parse, and serialize the data to query parameters, JSON, or XML. Concrete use cases include processing responses from AWS RDS API calls to list reserved instance offerings and handling paginated results.",
      "description_length": 370,
      "index": 484,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RemoveRoleFromDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for removing an IAM role from an RDS DB cluster, including the cluster identifier, role ARN, and an optional feature name. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing RDS cluster permissions by associating or disassociating IAM roles for specific features like S3 integration or directory services.",
      "description_length": 432,
      "index": 485,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling cases where an RDS option group is not found. It provides operations to construct, parse, and convert the unit value to query parameters, JSON, or back from JSON. Useful for error handling in RDS API operations when a requested option group does not exist.",
      "description_length": 326,
      "index": 486,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ValidStorageOptions",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying valid storage configurations, including storage type, size ranges, IOPS settings, and autoscaling support. It provides functions to construct, parse, and serialize these configurations for use in API requests or JSON-based data exchange. Concrete use cases include validating storage options when provisioning or modifying database instances in cloud environments.",
      "description_length": 416,
      "index": 487,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxy",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS DB proxy, including fields for configuration and metadata such as name, ARN, status, VPC settings, authentication, and logging. It provides functions to construct, parse, and serialize DB proxy instances for use with AWS RDS operations. Concrete use cases include managing DB proxy configurations, serializing them for API requests, and parsing responses from AWS RDS.",
      "description_length": 425,
      "index": 488,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupMembershipList",
      "library": "aws-rds",
      "description": "This module handles lists of DB security group membership records, providing functions to convert, parse, and serialize them for use in AWS RDS API requests and responses. It works with XML, JSON, and query parameter formats to facilitate interaction with RDS services. Use cases include processing security group membership data when managing RDS instances or modifying database security configurations.",
      "description_length": 404,
      "index": 489,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroups",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of DB security group data as a list. It provides functions to convert between XML, JSON, and query formats, specifically for working with AWS RDS security group responses. Use this module when processing API responses or constructing requests involving multiple DB security groups.",
      "description_length": 354,
      "index": 490,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PurchaseReservedDBInstancesOfferingMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for purchasing a reserved DB instance offering, including required and optional fields like offering ID, instance ID, instance count, and tags. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or XML. Concrete use cases include interacting with AWS RDS APIs to reserve database instances and manage associated metadata.",
      "description_length": 405,
      "index": 491,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroups",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of DB subnet group data as a list. It provides functions to convert between XML, JSON, and query formats, specifically for working with AWS RDS subnet group configurations. Use this module when retrieving, creating, or modifying RDS subnet groups through AWS API interactions.",
      "description_length": 349,
      "index": 492,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSubnetGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for modifying an RDS DB subnet group. It includes functions to construct, parse, and serialize the message containing the subnet group name, optional description, and list of subnet IDs. It is used to update subnet group configurations in AWS RDS by providing the required subnet identifiers and metadata.",
      "description_length": 354,
      "index": 493,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SNSTopicArnNotFoundFault",
      "library": "aws-rds",
      "description": "This module handles the SNSTopicArnNotFoundFault error type, providing operations to create, parse, and serialize the error. It works with unit type values and includes functions to convert to AWS query format, JSON, and back from JSON. Use this module when interacting with RDS operations that may fail due to missing SNS topic ARNs, allowing proper error handling and serialization.",
      "description_length": 384,
      "index": 494,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ApplyPendingMaintenanceActionMessage",
      "library": "aws-rds",
      "description": "This module defines a record type with fields for resource identifier, apply action, and opt-in type, along with functions to construct, parse, and convert the record to query parameters, JSON, or from JSON. It works directly with string values wrapped in AWS base types and is used to represent and manipulate pending maintenance actions in RDS. Concrete use cases include preparing and handling maintenance action requests to AWS RDS services.",
      "description_length": 445,
      "index": 495,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.VpcSecurityGroupMembershipList",
      "library": "aws-rds",
      "description": "This module handles parsing, converting, and serializing lists of VPC security group membership data. It provides operations to convert such lists to AWS query format, JSON, and back, as well as parsing from XML nodes. It is used when managing RDS instance security group associations in AWS API interactions.",
      "description_length": 309,
      "index": 496,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InstallationMediaMessage",
      "library": "aws-rds",
      "description": "Handles structured data for RDS installation media responses, including pagination markers. Works with XML, JSON, and query parameter formats for AWS RDS API interactions. Used to process and serialize installation media lists returned from AWS RDS operations.",
      "description_length": 260,
      "index": 497,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyTargetGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the DBProxyTargetGroupNotFound fault in AWS RDS operations. It provides functions to construct, parse, and convert the fault to query parameters or JSON format. Use this module when interacting with AWS RDS APIs that require handling of missing DB proxy target group errors.",
      "description_length": 344,
      "index": 498,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidSubnet",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing an invalid subnet in RDS operations, with operations to construct, parse, and serialize the type. It includes functions to convert values to AWS query format and JSON, as well as parsing from JSON. It is used when handling subnet validation errors in RDS instance configuration or subnet group management.",
      "description_length": 349,
      "index": 499,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupDoesNotCoverEnoughAZs",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the case where a DB subnet group does not cover enough availability zones. It includes operations for creating, parsing, and converting the type to query parameters or JSON format. The module is used when validating subnet configurations for database instances that require coverage across multiple AZs.",
      "description_length": 368,
      "index": 500,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.EventsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling RDS event messages, including optional pagination markers. It provides functions to construct, parse, and serialize event messages to and from XML, JSON, and query formats. Use this module when retrieving or processing lists of RDS events, especially in paginated responses.",
      "description_length": 324,
      "index": 501,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBProxyTargetGroupRequest",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an RDS DB proxy target group, including fields for the target group name, DB proxy name, optional connection pool configuration, and optional new name. It provides functions to construct, parse, and serialize the structure to query or JSON formats, and to deserialize from JSON. Concrete use cases include configuring connection pooling parameters or renaming a target group when managing RDS proxy resources via the AWS API.",
      "description_length": 476,
      "index": 502,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.Tag",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling tags in AWS RDS operations, consisting of optional key-value pairs. It provides functions to construct, serialize, and convert tags to and from XML, JSON, and query formats. Use this module when managing metadata for RDS resources like databases or snapshots through tagging APIs.",
      "description_length": 330,
      "index": 503,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option groups, providing direct parsing from XML nodes, conversion to query parameters, and JSON serialization/deserialization. It works specifically with lists of `OptionGroup.t` structures, enabling interaction with AWS RDS APIs that require or return collections of option groups. Use this module when retrieving or processing multiple option groups from AWS RDS responses in XML or JSON format.",
      "description_length": 431,
      "index": 504,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.AttributeValueList",
      "library": "aws-rds",
      "description": "This module handles lists of string-based attribute values for RDS operations. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. It is used when working with RDS API responses that return string lists, such as describing DB instance attributes.",
      "description_length": 312,
      "index": 505,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClustersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database clusters with optional filters, pagination, and sharing status. It supports operations to construct, parse, and serialize cluster query messages in JSON, XML, and AWS query formats. Concrete use cases include retrieving cluster information with custom filters, paginating through large result sets, and integrating with AWS SDKs for cluster management.",
      "description_length": 415,
      "index": 506,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure for managing RDS cluster parameter group configurations, including fields like name, family, description, and ARN. It provides functions to construct, serialize, and parse these structures to and from XML, JSON, and query formats. Concrete use cases include configuring and retrieving parameter group settings when interacting with AWS RDS APIs.",
      "description_length": 382,
      "index": 507,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ListTagsForResourceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying parameters to list tags on an RDS resource, including the resource name and optional filters. It provides functions to construct, parse, and serialize the structure to different formats like JSON and query strings. It is used when interacting with AWS RDS APIs to retrieve tags associated with specific resources.",
      "description_length": 365,
      "index": 508,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling cases where a database cluster is not found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, or back from JSON. Use this module when managing error responses in RDS operations that involve missing database clusters.",
      "description_length": 332,
      "index": 509,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBProxyRequest",
      "library": "aws-rds",
      "description": "This module defines the configuration for creating a database proxy, including required parameters like proxy name, engine family, authentication, and networking. It supports operations to construct, serialize, and parse proxy creation requests in JSON, query string, and XML formats. Concrete use cases include setting up a new RDS proxy with specific VPC subnets, IAM roles, and client timeout settings.",
      "description_length": 405,
      "index": 510,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAutomatedBackupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a singleton error type representing the absence of an automated database instance backup. It provides operations to construct, parse, and serialize the error state, primarily used in handling missing backup scenarios in database management workflows. The type works with standard AWS query and JSON formats for error reporting and API interactions.",
      "description_length": 368,
      "index": 511,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RemoveTagsFromResourceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for removing tags from an RDS resource, consisting of the resource name and a list of tag keys. It provides functions to construct, parse, and convert the structure to query parameters or JSON format. Use this when interacting with AWS RDS APIs to manage resource tags programmatically.",
      "description_length": 323,
      "index": 512,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SharedSnapshotQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module handles the `SharedSnapshotQuotaExceededFault` error type, providing functions to construct, parse, and serialize the error. It works with unit type values and is used to represent and manipulate shared snapshot quota exceeded fault information in AWS RDS operations. Concrete use cases include error handling when creating or managing shared database snapshots that exceed account quotas.",
      "description_length": 401,
      "index": 513,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyCertificatesResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying certificates in an RDS service. It provides functions to create, parse, and convert certificate modification results to query parameters or JSON format. It works with XML input for parsing and outputs structured data for further processing in API interactions.",
      "description_length": 304,
      "index": 514,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBInstanceAutomatedBackupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying an automated database instance backup to delete by its resource ID. It includes functions to create, parse, and serialize the structure in various formats such as JSON and query parameters. It is used when issuing a request to delete a specific automated backup in Amazon RDS.",
      "description_length": 328,
      "index": 515,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OrderableDBInstanceOption",
      "library": "aws-rds",
      "description": "This module defines a data structure representing orderable database instance options, capturing attributes like engine, version, instance class, storage capabilities, and feature support. It provides functions to construct, parse, and serialize these options for use in querying or configuring RDS instances. Concrete use cases include retrieving available instance configurations from AWS RDS and filtering them based on specific requirements like storage encryption or multi-AZ support.",
      "description_length": 489,
      "index": 516,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceFromDBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for constructing, serializing, and parsing messages used to restore a DB instance from a DB snapshot in AWS RDS. It includes fields for configuration options such as instance identifier, snapshot identifier, network settings, and optional parameters like tags, storage type, and security group IDs. The module supports converting values to and from JSON and query formats, enabling integration with AWS SDKs and API requests.",
      "description_length": 474,
      "index": 517,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeInstallationMediaMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS installation media, supporting operations to create, parse, and serialize requests. It works with string and integer types, along with filter lists, to construct and process API messages. Concrete use cases include building and handling requests to describe RDS installation media with optional filters, pagination, and identifiers.",
      "description_length": 386,
      "index": 518,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OrderableDBInstanceOptionsList",
      "library": "aws-rds",
      "description": "This module handles parsing, querying, and serializing lists of orderable database instance options. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `OrderableDBInstanceOption.t` values. It is used when retrieving or processing available DB instance configurations from AWS RDS, particularly for operations like listing supported instance types and their properties.",
      "description_length": 416,
      "index": 519,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterRoleAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where an IAM role is already associated with a DB cluster. It provides operations to create, parse, and convert the error structure to query parameters, JSON, or from JSON. The module works with unit values and is used when managing DB cluster role associations in AWS RDS operations.",
      "description_length": 364,
      "index": 520,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ResourcePendingMaintenanceActions",
      "library": "aws-rds",
      "description": "This module defines a data structure representing pending maintenance actions for an AWS RDS resource, including an optional resource identifier and a list of maintenance action details. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used when retrieving or modifying maintenance actions associated with RDS instances via the AWS API.",
      "description_length": 406,
      "index": 521,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `GlobalClusterQuotaExceededFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query or JSON formats, typically used when serializing or deserializing API responses. The module works exclusively with the unit type, representing a specific error condition with no additional data.",
      "description_length": 405,
      "index": 522,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AuthorizeDBSecurityGroupIngressResult",
      "library": "aws-rds",
      "description": "This module handles the result of authorizing ingress to a DB security group, primarily by encapsulating an optional DBSecurityGroup value. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when processing responses from RDS API calls that modify security group ingress rules.",
      "description_length": 372,
      "index": 523,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateOptionGroupResult",
      "library": "aws-rds",
      "description": "This module defines a result type for creating an option group in AWS RDS, containing an optional `OptionGroup.t` value. It provides functions to construct, parse, and serialize the result to and from XML, JSON, and query formats. This module is used to handle the response data when creating a new option group in an RDS database.",
      "description_length": 331,
      "index": 524,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBSubnetStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid database subnet state errors in RDS operations. It provides functions to convert values to query parameters and JSON, and to parse values from JSON or other input. It is used specifically for signaling and handling invalid subnet state faults in RDS service interactions.",
      "description_length": 349,
      "index": 525,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of creating a DB cluster snapshot in AWS RDS. It provides functions to construct, parse, and serialize the result, which includes an optional DBClusterSnapshot record. Use this module when managing RDS cluster snapshots programmatically, such as in backup automation or infrastructure monitoring tools.",
      "description_length": 333,
      "index": 526,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBSnapshotResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of a DB snapshot deletion, containing an optional `DBSnapshot` record. It provides functions to construct, parse, and convert the result to various formats including JSON, query parameters, and XML. It is used to handle responses from RDS snapshot deletion operations in AWS.",
      "description_length": 336,
      "index": 527,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.Outpost",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing an AWS RDS Outpost, primarily working with string and XML data through the `t` type, which includes an optional ARN field. It provides functions to construct, parse, and serialize outpost configurations to and from XML, JSON, and AWS query formats. Use this module when managing RDS instances deployed on AWS Outposts, particularly for operations involving ARN-based identification in XML responses or API requests.",
      "description_length": 469,
      "index": 528,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroupList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DBClusterParameterGroup values, providing direct conversions to and from XML, JSON, and query formats. It includes parsing from XML nodes and JSON input, and constructs parameter group lists used in AWS RDS cluster configuration and management tasks. Common use cases involve serializing parameter group data for API requests or deserializing responses from AWS services.",
      "description_length": 404,
      "index": 529,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroupsMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS cluster parameter groups, including optional pagination markers. It provides functions to construct, parse, and serialize the data to and from XML, JSON, and query formats. Use this module when retrieving or processing lists of RDS cluster parameter groups from AWS API responses.",
      "description_length": 333,
      "index": 530,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling cases where a database cluster snapshot is not found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, and back from JSON. Use this module when managing error responses related to missing database cluster snapshots in AWS RDS operations.",
      "description_length": 353,
      "index": 531,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RemoveRoleFromDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for removing an IAM role from an RDS instance, including the instance identifier, role ARN, and feature name. It provides functions to construct, parse, and serialize the structure to query parameters or JSON format. Use this module when managing RDS instance roles in AWS API requests, particularly for operations that require detaching roles from database instances.",
      "description_length": 405,
      "index": 532,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterFromSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a database cluster from a snapshot in AWS RDS. It provides constructors, JSON serialization/deserialization, and query parameter conversion for a structure containing an optional database cluster. It is used to process and format the output of RDS cluster restoration operations in API requests and responses.",
      "description_length": 353,
      "index": 533,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.FeatureNameList",
      "library": "aws-rds",
      "description": "This module handles lists of string-based feature names, primarily for interacting with AWS RDS services. It provides operations to convert these lists to and from JSON and query formats, enabling integration with AWS APIs. Use cases include managing RDS feature configurations and parsing responses involving feature name lists.",
      "description_length": 329,
      "index": 534,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SupportedCharacterSetsList",
      "library": "aws-rds",
      "description": "This module handles lists of character sets supported by a database service. It provides parsing from XML nodes, conversion to query parameters, JSON serialization, and deserialization. It is used when managing database instance configurations that require character set information.",
      "description_length": 283,
      "index": 535,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionSetting",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS option setting with optional fields for configuration parameters. It provides functions to construct, parse, and convert option settings to and from XML, JSON, and query formats. Use this module when managing RDS database option groups, such as specifying settings for Oracle Enterprise Manager or custom configurations.",
      "description_length": 377,
      "index": 536,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Filter",
      "library": "aws-rds",
      "description": "This module defines a filter structure with a name and list of values, used to represent and manipulate query filters for RDS operations. It includes functions to construct, parse, and convert filters to and from JSON and query formats. Concrete use cases include filtering RDS instances or snapshots by attributes like database engine or availability zone during API requests.",
      "description_length": 377,
      "index": 537,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a database subnet group, including fields like name, description, VPC ID, status, subnets, and ARN. It provides operations to construct, parse, and serialize subnet groups to and from XML, JSON, and query formats. It is used when managing RDS database instances that require configuration with specific subnet groupings for network isolation and routing.",
      "description_length": 404,
      "index": 538,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeSourceRegionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring RDS source region queries, supporting optional region names, record limits, pagination markers, and filters. It includes functions to construct, parse, and serialize these configurations into query strings or JSON for API requests. Concrete use cases include filtering RDS source regions by name, limiting result sets, and handling paginated responses from AWS RDS APIs.",
      "description_length": 423,
      "index": 539,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBSnapshotAttributesMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type representing a message for describing RDS database snapshot attributes. It includes operations to construct, parse, and serialize the message to and from JSON, query parameters, and XML. The module is used specifically when managing RDS snapshot permissions or metadata through the AWS API.",
      "description_length": 329,
      "index": 540,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for creating RDS database snapshots, including fields for the snapshot identifier, instance identifier, and optional tags. It provides functions to construct, parse, and serialize snapshot creation messages in various formats, including JSON and query parameters. Concrete use cases include initiating snapshot creation requests and processing related API interactions with AWS RDS.",
      "description_length": 416,
      "index": 541,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when a database cluster parameter group is not found. It provides operations for creating, parsing, and converting the unit value to query parameters, JSON, and back from JSON. Concrete use cases include error handling and API response processing in RDS operations.",
      "description_length": 344,
      "index": 542,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBClusterSnapshot",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database cluster snapshots by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS-specific types like `CreateDBClusterSnapshotMessage` and `CreateDBClusterSnapshotResult`, and handles error decoding from AWS XML responses. It is used to initiate snapshot creation requests against an RDS cluster, returning the resulting snapshot metadata or parsing and returning specific AWS errors.",
      "description_length": 524,
      "index": 543,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.StopDBInstance",
      "library": "aws-rds",
      "description": "This module handles stopping an Amazon RDS database instance by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS-specific message and result types, as well as HTTP request/response conversions. Concrete use cases include initiating a stop operation on a DB instance and processing the resulting status or error response.",
      "description_length": 423,
      "index": 544,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.AddTagsToResource",
      "library": "aws-rds",
      "description": "This module adds metadata tags to an Amazon RDS resource by sending a signed HTTP request to the RDS service. It works with RDS resource ARNs and a list of key-value tags, encoding them into a query-formatted HTTP request. Use this module when managing resource tags for RDS instances, snapshots, or clusters directly through the AWS RDS API.",
      "description_length": 342,
      "index": 545,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CreateDBSecurityGroup",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database security groups by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS-specific types like `CreateDBSecurityGroupMessage` for request parameters and `CreateDBSecurityGroupResult` for responses, alongside standard AWS error handling structures. Concrete use cases include configuring network access rules for RDS instances by creating and applying new security group policies.",
      "description_length": 532,
      "index": 546,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RemoveRoleFromDBInstance",
      "library": "aws-rds",
      "description": "This module handles removing an IAM role from an RDS DB instance by converting input data into a properly signed HTTP request and processing the response. It works with RDS-specific input structures and error types, encoding requests into query format with the correct action and version parameters. Use this module when managing database instance permissions by detaching roles that grant access to external services like Amazon S3 or CloudWatch Logs.",
      "description_length": 452,
      "index": 547,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBClusters",
      "library": "aws-rds",
      "description": "This module handles the DescribeDBClusters API call for AWS RDS, converting input parameters into an HTTP request and parsing the response or errors from the server. It works with `DescribeDBClustersMessage.t` as input and returns either a `DBClusterMessage.t` on success or an internal RDS error on failure. Use this module to retrieve detailed information about RDS database clusters by specifying filters, pagination, and other query parameters in the input structure.",
      "description_length": 471,
      "index": 548,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module handles modifying RDS database cluster parameter groups by providing functions to construct and interpret HTTP requests and responses. It works with input types containing parameter group names and updated settings, and returns responses confirming successful modification. Concrete use cases include updating database engine configurations, adjusting cluster-wide parameters, and applying changes to RDS clusters programmatically.",
      "description_length": 443,
      "index": 549,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeReservedDBInstances",
      "library": "aws-rds",
      "description": "This module handles the AWS RDS operation to describe reserved database instances, converting input parameters into HTTP requests and parsing responses or errors from the service. It works with input and output types specific to the RDS API, including messages for describing reserved instances and error responses. Concrete use cases include querying information about RDS reservations, such as their status, duration, and associated database instances.",
      "description_length": 454,
      "index": 550,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CopyDBClusterSnapshot",
      "library": "aws-rds",
      "description": "This module handles copying an RDS database cluster snapshot to a new snapshot, working with `CopyDBClusterSnapshotMessage.t` as input and producing `CopyDBClusterSnapshotResult.t` as output. It encodes requests into HTTP format, decodes responses, and parses AWS errors specific to this operation. Use this module when automating snapshot replication or backup workflows in AWS RDS clusters.",
      "description_length": 392,
      "index": 551,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.RestoreDBInstanceToPointInTime",
      "library": "aws-rds",
      "description": "This module handles restoring an RDS database instance to a specific point in time. It works with input and output types defined in the `Aws_rds.Types` module, specifically `RestoreDBInstanceToPointInTimeMessage` and `RestoreDBInstanceToPointInTimeResult`. It is used to construct signed HTTP requests for the RDS service and parse corresponding responses or errors.",
      "description_length": 366,
      "index": 552,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DeleteEventSubscription",
      "library": "aws-rds",
      "description": "This module handles the deletion of RDS event subscriptions by converting input parameters into an HTTP request and processing the response. It works with `DeleteEventSubscriptionMessage.t` as input and returns a `DeleteEventSubscriptionResult.t` on success or an internal error type on failure. Concrete use cases include disabling event notifications for RDS instances by subscription name, and managing cleanup of event tracking configurations in automated RDS workflows.",
      "description_length": 474,
      "index": 553,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CreateDBSnapshot",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database snapshots by defining the input and output types specific to the `CreateDBSnapshot` API call. It provides functions to convert native input into an HTTP request and to parse HTTP responses into either a result or an error, ensuring correct encoding and decoding of AWS RDS-specific data. Concrete use cases include initiating a snapshot of a running RDS instance and handling the response or errors from the AWS RDS service.",
      "description_length": 473,
      "index": 554,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBProxy",
      "library": "aws-rds",
      "description": "This module implements the deletion of an RDS DB proxy by converting a deletion request into an HTTP query request, sending it to the appropriate AWS endpoint, and parsing the response or error. It works with `DeleteDBProxyRequest.t` as input and returns either a `DeleteDBProxyResponse.t` or an internal error type, handling XML error parsing based on HTTP status codes. It is used when programmatically removing an existing DB proxy in an AWS RDS environment.",
      "description_length": 461,
      "index": 555,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBProxyTargetGroups",
      "library": "aws-rds",
      "description": "This module handles the `DescribeDBProxyTargetGroups` operation for AWS RDS, converting input requests to HTTP format and parsing responses or errors from the service. It works with RDS proxy target group descriptions, specifically encoding requests and decoding responses using AWS query format and XML error parsing. Use this module to retrieve and manage target group information for RDS database proxies programmatically.",
      "description_length": 425,
      "index": 556,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ModifyDBParameterGroup",
      "library": "aws-rds",
      "description": "This module modifies an existing RDS database parameter group by applying specified parameter changes. It works with `ModifyDBParameterGroupMessage.t` as input, which includes the parameter group name and a list of parameters to update, and returns a response containing the updated parameter group name. It is used to adjust database configuration values, such as memory allocation or query timeouts, directly through the AWS RDS API.",
      "description_length": 435,
      "index": 557,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ListTagsForResource",
      "library": "aws-rds",
      "description": "This module handles listing tags for a specified RDS resource by converting input data into a properly signed HTTP request and parsing the response. It works with input and output types defined in `Aws_rds.Types`, specifically `ListTagsForResourceMessage` for requests and `TagListMessage` for responses. A concrete use case is retrieving metadata tags associated with an RDS instance to manage resource organization or billing tracking.",
      "description_length": 437,
      "index": 558,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteInstallationMedia",
      "library": "aws-rds",
      "description": "This module handles the deletion of RDS installation media by converting input parameters into an HTTP request and processing the response. It works with `DeleteInstallationMediaMessage.t` as input and returns an `InstallationMedia.t` structure or an error. Concrete use cases include removing custom database installation media from AWS RDS to manage resource cleanup or version control.",
      "description_length": 388,
      "index": 559,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.StartActivityStream",
      "library": "aws-rds",
      "description": "This module handles starting an RDS activity stream by defining input/output types and HTTP conversion functions. It works with RDS-specific request and response structures, including error handling for stream initiation. Use it to programmatically enable database activity streams for monitoring and logging purposes.",
      "description_length": 318,
      "index": 560,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.RestoreDBInstanceFromDBSnapshot",
      "library": "aws-rds",
      "description": "This module handles restoring an RDS database instance from a snapshot by defining the input and output types specific to the operation, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with RDS-specific message and result structures, enabling precise interaction with AWS RDS APIs. Use this module when programmatically initiating a database restore from an existing snapshot within an OCaml application.",
      "description_length": 462,
      "index": 561,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterSnapshots",
      "library": "aws-rds",
      "description": "This module handles the AWS RDS operation to describe database cluster snapshots, converting input parameters into signed HTTP requests and parsing responses or errors from the service. It works with structured types for input queries, output results, and error responses specific to RDS cluster snapshots. Concrete use cases include listing existing snapshots, filtering by cluster or snapshot identifier, and integrating with automation tools for backup management.",
      "description_length": 467,
      "index": 562,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyGlobalCluster",
      "library": "aws-rds",
      "description": "This module handles modifying AWS RDS global clusters by providing functions to construct HTTP requests from input parameters and parse responses or errors from AWS. It works with input and output types specific to modifying global clusters, including encoded query parameters and XML error responses. Concrete use cases include updating global cluster settings such as primary cluster selection or enabling/disabling global cluster features via direct AWS API calls.",
      "description_length": 467,
      "index": 563,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterParameters",
      "library": "aws-rds",
      "description": "This module handles the querying and parsing of RDS database cluster parameter group details. It accepts a `DescribeDBClusterParametersMessage` input, encodes it into an HTTP request, and processes the response into either a `DBClusterParameterGroupDetails` output or an appropriate error. It is used to retrieve and inspect parameter settings for an RDS cluster, such as configuration values and their statuses.",
      "description_length": 412,
      "index": 564,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterParameterGroups",
      "library": "aws-rds",
      "description": "This module handles describing RDS database cluster parameter groups by converting input requests into HTTP queries and parsing responses. It works with input and output types specific to RDS cluster parameter group descriptions, along with error types defined in the RDS API. Use this module to retrieve information about existing cluster parameter groups, including their names, descriptions, and associated tags.",
      "description_length": 415,
      "index": 565,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBSubnetGroup",
      "library": "aws-rds",
      "description": "This module handles the deletion of a DB subnet group in AWS RDS by converting input parameters into a properly signed HTTP request and processing the response. It works with the `DeleteDBSubnetGroupMessage` input type to specify the subnet group to delete and returns no output on success. Concrete use cases include removing unused or misconfigured subnet groups to manage database network configurations.",
      "description_length": 407,
      "index": 566,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBSnapshotAttribute",
      "library": "aws-rds",
      "description": "This module modifies attributes of a DB snapshot in Amazon RDS, specifically handling permissions and access control. It works with DB snapshot identifiers and attribute values, enabling operations like adding or removing account access to snapshots. Concrete use cases include restricting or granting cross-account snapshot sharing and updating snapshot visibility within an organization.",
      "description_length": 389,
      "index": 567,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterEndpoints",
      "library": "aws-rds",
      "description": "This module handles describing DB cluster endpoints in AWS RDS by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with `DescribeDBClusterEndpointsMessage` as input and `DBClusterEndpointMessage` as output, along with internal RDS error types. It is used to query endpoint details for a specific DB cluster, such as custom endpoints and their statuses, directly from RDS API responses.",
      "description_length": 449,
      "index": 568,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBClusterSnapshot",
      "library": "aws-rds",
      "description": "This module handles the deletion of RDS database cluster snapshots by defining the input and output types specific to the delete operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with RDS-specific message and result structures, including error handling tailored to snapshot deletion. Concrete use cases include initiating a snapshot deletion request, parsing the response from AWS, and handling errors returned by the RDS service during deletion.",
      "description_length": 503,
      "index": 569,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RemoveTagsFromResource",
      "library": "aws-rds",
      "description": "This module handles removing tags from an RDS resource by defining the input structure, error types, and conversion functions for HTTP requests and responses. It works directly with RDS resource ARNs and tag keys, encoding and decoding them for AWS API communication. Use this module when programmatically managing metadata tags on RDS instances, snapshots, or other RDS assets.",
      "description_length": 378,
      "index": 570,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBInstanceReadReplica",
      "library": "aws-rds",
      "description": "This module handles the creation of a DB instance read replica in AWS RDS by defining the input and output types for the operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with RDS-specific message and result structures, such as `CreateDBInstanceReadReplicaMessage` and `CreateDBInstanceReadReplicaResult`. Concrete use cases include initiating a read replica from an existing DB instance and handling the API response or errors returned by AWS.",
      "description_length": 501,
      "index": 571,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.StopActivityStream",
      "library": "aws-rds",
      "description": "This module handles stopping an RDS activity stream by defining input and output types aligned with AWS RDS APIs. It provides functions to convert native input to HTTP requests and parse HTTP responses into structured outputs or errors. Use this module to programmatically disable database activity streams in AWS RDS with precise error handling and request formatting.",
      "description_length": 369,
      "index": 572,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CopyOptionGroup",
      "library": "aws-rds",
      "description": "This module handles copying an RDS option group by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS-specific message and result types, such as `CopyOptionGroupMessage.t` and `CopyOptionGroupResult.t`. Use this module when implementing logic to duplicate an existing option group in AWS RDS, ensuring proper request formatting and response parsing.",
      "description_length": 458,
      "index": 573,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeOptionGroupOptions",
      "library": "aws-rds",
      "description": "This module handles describing available option group options for RDS by converting input parameters into HTTP requests and parsing responses into structured output or errors. It works with RDS-specific types for option group descriptions, including input messages, output responses, and error formats. It is used when querying RDS to list available options that can be included in an option group.",
      "description_length": 398,
      "index": 574,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.PurchaseReservedDBInstancesOffering",
      "library": "aws-rds",
      "description": "This module handles purchasing a Reserved DB Instance offering in AWS RDS by converting input parameters into a properly signed HTTP request and decoding the response into a structured result or error. It works directly with RDS-specific input and output types defined in `Aws_rds.Types`, along with AWS error handling structures. Concrete use cases include initiating a purchase request with specific DB instance parameters and processing the resulting API response or error.",
      "description_length": 476,
      "index": 575,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ApplyPendingMaintenanceAction",
      "library": "aws-rds",
      "description": "This module applies a pending maintenance action to an Amazon RDS resource, specifically handling the input and output types required for the operation. It works with RDS maintenance action messages and results, along with internal error types for failure handling. Use this module when you need to programmatically apply a queued maintenance update to an RDS instance or cluster.",
      "description_length": 380,
      "index": 576,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBClusterSnapshotAttribute",
      "library": "aws-rds",
      "description": "This module modifies attributes of an Amazon RDS DB cluster snapshot, such as modifying the list of AWS accounts that can access the snapshot. It works with DB cluster snapshot identifiers and attribute values, specifically handling modifications to the `restore` attribute. Concrete use cases include updating snapshot permissions to allow cross-account restores or restricting access after a security audit.",
      "description_length": 409,
      "index": 577,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ModifyCertificates",
      "library": "aws-rds",
      "description": "This module handles modifying certificate configurations for RDS instances by converting native inputs into signed HTTP requests and decoding responses. It works with RDS certificate modification messages and results, along with internal error types for failure handling. Concrete use cases include updating certificate authority settings and managing certificate rotation through AWS RDS API calls.",
      "description_length": 399,
      "index": 578,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeEventSubscriptions",
      "library": "aws-rds",
      "description": "This module handles describing RDS event subscriptions by converting input parameters into an HTTP request and parsing the resulting response or error. It works with input and output types specific to RDS event subscription descriptions, along with internal error types for handling failures. Use this module to query details about existing RDS event subscriptions, including filtering by subscription name or customer ID.",
      "description_length": 422,
      "index": 579,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.StartExportTask",
      "library": "aws-rds",
      "description": "This module handles starting an RDS export task by defining input and output types for initiating and parsing responses. It works with RDS export task messages and error types, converting them to and from HTTP requests and responses. Concrete use cases include exporting database snapshots to Amazon S3 by encoding start-export requests and decoding task status responses.",
      "description_length": 372,
      "index": 580,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.StartDBCluster",
      "library": "aws-rds",
      "description": "This module handles starting an Amazon RDS database cluster by defining the input and output types specific to the start operation, including error parsing and HTTP serialization. It works directly with RDS cluster messages and responses, translating them to and from HTTP requests for the AWS API. Concrete use cases include initiating a stopped RDS cluster and handling the resulting API response or error conditions during startup.",
      "description_length": 434,
      "index": 581,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RevokeDBSecurityGroupIngress",
      "library": "aws-rds",
      "description": "This module handles revoking ingress rules from an RDS database security group by sending a signed HTTP request to the AWS RDS service. It works with input and output types specific to the RevokeDBSecurityGroupIngress operation, including encoded query parameters and XML-parsed responses. Concrete use cases include removing IP ranges or EC2 security group permissions from a database security group's ingress rules.",
      "description_length": 417,
      "index": 582,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RestoreDBClusterFromSnapshot",
      "library": "aws-rds",
      "description": "This module handles restoring an RDS database cluster from a snapshot by defining the input and output types specific to the operation, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with RDS cluster and snapshot message structures, encoding requests into signed HTTP queries and decoding responses into result or error types. Concrete use cases include initiating a database cluster restore operation and handling the API response or error conditions specific to RDS snapshot restoration.",
      "description_length": 548,
      "index": 583,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.RestoreDBInstanceFromS3",
      "library": "aws-rds",
      "description": "This module handles restoring a DB instance from an S3 bucket by defining the input and output types specific to the operation, along with functions to convert between native OCaml types and HTTP requests/responses. It works directly with `RestoreDBInstanceFromS3Message` for input configuration and returns `RestoreDBInstanceFromS3Result` on success, while decoding and handling service-specific errors. Concrete use cases include initiating database restores from S3 backups and processing the resulting API responses or errors in OCaml applications interacting with AWS RDS.",
      "description_length": 577,
      "index": 584,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeEngineDefaultClusterParameters",
      "library": "aws-rds",
      "description": "This module handles the `DescribeEngineDefaultClusterParameters` API call for AWS RDS, retrieving the default parameter settings for a specific database engine used in Aurora clusters. It works with input and output types defined in `Aws_rds.Types`, converting between native OCaml representations and HTTP requests/responses. Concrete use cases include querying default cluster-level parameter values for engines like `aurora-postgresql` or `aurora-mysql` to configure new RDS clusters with standard settings.",
      "description_length": 510,
      "index": 585,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeAccountAttributes",
      "library": "aws-rds",
      "description": "This module implements the operations to retrieve account-specific attributes from the RDS service. It handles the conversion between native OCaml types and HTTP requests/responses, including error parsing specific to the RDS API. It is used to send a `DescribeAccountAttributes` request to AWS RDS and process the resulting XML response into typed output or error values.",
      "description_length": 372,
      "index": 586,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CopyDBSnapshot",
      "library": "aws-rds",
      "description": "This module handles copying an RDS database snapshot by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS-specific message and result types, as well as HTTP request and error response formats. Concrete use cases include initiating a snapshot copy, handling API responses, and parsing error codes specific to the RDS CopyDBSnapshot API call.",
      "description_length": 442,
      "index": 587,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBSnapshotAttributes",
      "library": "aws-rds",
      "description": "This module handles describing attributes of RDS database snapshots by converting input data into HTTP requests and parsing responses. It works with input and output types specific to RDS snapshot attribute descriptions, along with internal error types for handling failures. Use this module to retrieve and manage access control settings for RDS snapshots in AWS environments.",
      "description_length": 377,
      "index": 588,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyEventSubscription",
      "library": "aws-rds",
      "description": "This module handles modifying event subscriptions in AWS RDS by converting input data into signed HTTP requests and parsing responses into structured results or errors. It works directly with RDS event subscription messages and error types, encoding requests using query parameters and decoding XML responses. It is used to update configurations for receiving RDS event notifications via SNS topics.",
      "description_length": 399,
      "index": 589,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database cluster parameter groups by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS-specific types such as `CreateDBClusterParameterGroupMessage` for input and `CreateDBClusterParameterGroupResult` for output, alongside internal error types for handling failures. Concrete use cases include configuring parameter settings for Aurora clusters and managing database engine configurations during infrastructure provisioning.",
      "description_length": 574,
      "index": 590,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBInstanceAutomatedBackups",
      "library": "aws-rds",
      "description": "This module handles the querying and parsing of automated backup information for RDS instances. It converts input parameters into signed HTTP requests targeting the RDS service and decodes responses into structured backup data or specific error types. It is used to retrieve details about automated snapshots, including their status, retention period, and associated instance metadata.",
      "description_length": 385,
      "index": 591,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.AddRoleToDBInstance",
      "library": "aws-rds",
      "description": "This module adds an IAM role to an RDS DB instance using the AWS API. It handles the conversion of input data into an HTTP request and parsing of responses, including errors. The primary use case is granting a DB instance access to external AWS services via an IAM role.",
      "description_length": 270,
      "index": 592,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CancelExportTask",
      "library": "aws-rds",
      "description": "This module handles the cancellation of an RDS export task by providing functions to construct and process HTTP requests and responses. It works with input and output types specific to the `CancelExportTask` operation, including encoded query parameters and XML-parsed errors. Concrete use cases include initiating a cancellation request for a specific export task and decoding the resulting RDS service response or error.",
      "description_length": 422,
      "index": 593,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeExportTasks",
      "library": "aws-rds",
      "description": "This module handles describing RDS export tasks by converting input parameters into HTTP requests and parsing responses into structured data. It works with `DescribeExportTasksMessage` as input and `ExportTasksMessage` as output, along with internal error types. It is used to query AWS RDS for details about ongoing or completed export tasks, such as exporting a snapshot to Amazon S3.",
      "description_length": 386,
      "index": 594,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module deletes a DB cluster parameter group by sending a properly signed HTTP request to the RDS service. It works with `DeleteDBClusterParameterGroupMessage.t` as input and produces no output on success, handling errors via `Errors_internal.t`. Use this module to remove custom parameter groups that are no longer needed, ensuring they are not associated with any active DB clusters.",
      "description_length": 389,
      "index": 595,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBParameterGroups",
      "library": "aws-rds",
      "description": "This module handles describing DB parameter groups in AWS RDS by converting input queries into properly signed HTTP requests and parsing the responses into structured outputs or errors. It works with input messages, output responses, and error types defined in the Aws_rds.Types and Aws_rds.Errors_internal modules. It is used to retrieve information about existing DB parameter groups, such as their names, descriptions, and associated database family.",
      "description_length": 453,
      "index": 596,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBParameterGroup",
      "library": "aws-rds",
      "description": "This module deletes a DB parameter group by sending an HTTP request with the specified parameter group name. It handles the conversion of input data to an HTTP request and parses the response, returning a unit value on success or an error if the deletion fails. The module works directly with DB parameter group configurations in AWS RDS, used when managing database instance settings.",
      "description_length": 385,
      "index": 597,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.PromoteReadReplicaDBCluster",
      "library": "aws-rds",
      "description": "This module handles promoting a read replica DB cluster in AWS RDS by providing functions to construct and interpret HTTP requests and responses. It works with input and output types specific to the promotion operation, along with error handling tailored to RDS service responses. Use this module when managing RDS replication topology changes, such as promoting a replica to be a standalone DB cluster.",
      "description_length": 403,
      "index": 598,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBProxyTargetGroup",
      "library": "aws-rds",
      "description": "This module handles modifying an existing RDS DB proxy target group by defining the request structure, response decoding, and error handling specific to the `ModifyDBProxyTargetGroup` API call. It works with RDS proxy target group configurations, allowing adjustments to health check settings and target properties. Use this module to update target group parameters for database proxies in AWS RDS environments.",
      "description_length": 411,
      "index": 599,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBLogFiles",
      "library": "aws-rds",
      "description": "This module handles querying and retrieving log file metadata from an RDS instance by converting input parameters into signed HTTP requests and parsing the responses. It works with structured input and output types specific to the RDS log file description operation, along with error types defined in the RDS API. Use this module to list log files from an RDS database instance, filter them by filename prefix, and handle the resulting data or errors programmatically.",
      "description_length": 468,
      "index": 600,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DownloadDBLogFilePortion",
      "library": "aws-rds",
      "description": "This module handles downloading portions of database log files from AWS RDS by defining input and output types specific to that operation. It works with RDS log file data through structured types like `DownloadDBLogFilePortionMessage` and `DownloadDBLogFilePortionDetails`. Concrete use cases include retrieving log segments for debugging or monitoring specific database events.",
      "description_length": 378,
      "index": 601,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RemoveRoleFromDBCluster",
      "library": "aws-rds",
      "description": "This module handles removing an IAM role from an Amazon RDS DB cluster by defining the input and output types for the operation, along with functions to construct and interpret HTTP requests and responses. It works directly with RDS DB cluster identifiers and IAM role ARNs through the `RemoveRoleFromDBClusterMessage.t` input type. Use this module when managing database cluster permissions by disassociating roles that provide access to external services like S3 or CloudWatch.",
      "description_length": 479,
      "index": 602,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ResetDBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module resets the parameters of an RDS DB cluster parameter group to their default values. It accepts a parameter group name and a list of parameters to reset, returning the name of the modified group upon success. It directly handles RDS-specific input and output types for cluster parameter group operations.",
      "description_length": 315,
      "index": 603,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBInstances",
      "library": "aws-rds",
      "description": "This module handles describing DB instances in AWS RDS by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with input types like `DescribeDBInstancesMessage.t` and produces `DBInstanceMessage.t` on success or `Errors_internal.t` on failure. It is used to query metadata and status of RDS instances directly via AWS's API, such as retrieving endpoint addresses or checking instance health.",
      "description_length": 452,
      "index": 604,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBInstanceAutomatedBackup",
      "library": "aws-rds",
      "description": "This module handles the deletion of automated database instance backups in AWS RDS. It works with input and output types defined in the `Aws_rds.Types` module, specifically `DeleteDBInstanceAutomatedBackupMessage` and `DeleteDBInstanceAutomatedBackupResult`, along with internal error types for failure handling. It provides functions to construct and send HTTP requests, decode responses, and parse errors, enabling direct interaction with the AWS RDS API for backup cleanup operations.",
      "description_length": 487,
      "index": 605,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CreateCustomAvailabilityZone",
      "library": "aws-rds",
      "description": "This module handles the creation of custom Availability Zones in AWS RDS by defining the input and output types specific to the operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with `CreateCustomAvailabilityZoneMessage` for input configuration and `CreateCustomAvailabilityZoneResult` to capture the response from AWS. Concrete use cases include programmatically setting up isolated RDS infrastructure zones and handling region-specific deployment constraints.",
      "description_length": 518,
      "index": 606,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBInstance",
      "library": "aws-rds",
      "description": "This module handles the deletion of an Amazon RDS database instance by defining the input and output types for the operation, along with functions to construct and interpret HTTP requests and responses. It works directly with RDS-specific types such as `DeleteDBInstanceMessage` for request parameters and `DeleteDBInstanceResult` for successful responses, while also managing internal AWS errors. Concrete use cases include initiating the deletion of a specified DB instance, handling response parsing, and decoding error states specific to the RDS deletion API.",
      "description_length": 563,
      "index": 607,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.StartDBInstance",
      "library": "aws-rds",
      "description": "This module handles starting an Amazon RDS database instance by defining the input and output types specific to the StartDBInstance API call. It works with RDS instance identifiers and response metadata through structured types like StartDBInstanceMessage and StartDBInstanceResult. Concrete use cases include initiating a stopped RDS instance and processing the resulting status update or error conditions from the AWS API.",
      "description_length": 424,
      "index": 608,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeOptionGroups",
      "library": "aws-rds",
      "description": "This module handles describing RDS option groups by converting input parameters into HTTP requests and parsing responses into structured output or errors. It works with RDS-specific types for input and output, including option group configurations and error responses. It is used to query AWS RDS for details about configured option groups, handling request signing, encoding, and response decoding.",
      "description_length": 399,
      "index": 609,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.AddRoleToDBCluster",
      "library": "aws-rds",
      "description": "This module associates an IAM role with an Amazon RDS DB cluster, enabling the role to manage cluster operations. It works with DB cluster identifiers and IAM role ARNs, targeting scenarios like configuring automated backups or enabling enhanced monitoring. The module sends a signed HTTP request to AWS RDS service endpoints to perform the association.",
      "description_length": 353,
      "index": 610,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBSubnetGroups",
      "library": "aws-rds",
      "description": "This module handles describing DB subnet groups in AWS RDS by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with input type `DescribeDBSubnetGroupsMessage.t` and returns `DBSubnetGroupMessage.t` on success or `Errors_internal.t` on failure. Concrete use cases include querying existing DB subnet group configurations and handling API responses in RDS management workflows.",
      "description_length": 439,
      "index": 611,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RebootDBInstance",
      "library": "aws-rds",
      "description": "This module handles rebooting an RDS database instance by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS instance identifiers and HTTP request/response types for communication with the AWS API. Concrete use cases include initiating a database instance reboot and handling the resulting API response or error.",
      "description_length": 413,
      "index": 612,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBClusterEndpoint",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database cluster endpoints by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with `CreateDBClusterEndpointMessage.t` as input and `DBClusterEndpoint.t` as output, using HTTP for communication with AWS. Concrete use cases include programmatically adding custom endpoints to an existing RDS cluster for load balancing or read replica targeting.",
      "description_length": 478,
      "index": 613,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBParameterGroup",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database parameter groups by defining the input and output types specific to the operation, along with functions to serialize requests and deserialize responses. It works directly with AWS RDS parameter group configurations, translating between native OCaml types and HTTP requests/responses. Concrete use cases include sending a properly formatted RDS parameter group creation request to AWS and parsing the resulting API response or error.",
      "description_length": 481,
      "index": 614,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.FailoverDBCluster",
      "library": "aws-rds",
      "description": "This module handles initiating a failover for an Amazon RDS DB cluster. It accepts a `FailoverDBClusterMessage.t` input, sends an HTTP request to trigger the failover, and returns a `FailoverDBClusterResult.t` on success or an internal error on failure. It is used when managing high availability configurations by forcing a primary instance switch in a multi-AZ RDS cluster deployment.",
      "description_length": 386,
      "index": 615,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.RemoveSourceIdentifierFromSubscription",
      "library": "aws-rds",
      "description": "This module handles removing a source identifier from an RDS event notification subscription by providing functions to construct and interpret HTTP requests and responses. It works with RDS event subscription data types, specifically `RemoveSourceIdentifierFromSubscriptionMessage` for input and `RemoveSourceIdentifierFromSubscriptionResult` for output. Concrete use cases include managing event notifications for RDS instances by detaching specific source identifiers from existing subscriptions.",
      "description_length": 498,
      "index": 616,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteCustomAvailabilityZone",
      "library": "aws-rds",
      "description": "This module handles the deletion of custom availability zones in AWS RDS by providing functions to construct and interpret HTTP requests and responses for the `DeleteCustomAvailabilityZone` API call. It works with input and output types defined in `Aws_rds.Types`, along with internal error types for handling failures. It is used when managing RDS infrastructure to remove custom availability zones programmatically.",
      "description_length": 417,
      "index": 617,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Errors_internal",
      "library": "aws-rds",
      "description": "This module defines a comprehensive set of error types representing specific failure conditions encountered in RDS operations, such as resource not found, quota exceeded, invalid state, and authentication failures. It provides functions to convert errors to HTTP status codes, strings, and back from strings, enabling precise error handling and interoperability with HTTP interfaces. Concrete use cases include validating RDS API requests, handling failed database instance creation, managing snapshot and backup errors, and enforcing access control policies.",
      "description_length": 559,
      "index": 618,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.RestoreDBClusterFromS3",
      "library": "aws-rds",
      "description": "This module handles restoring an Amazon RDS database cluster from an S3 bucket by defining the input and output types specific to that operation. It provides functions to convert native OCaml types to HTTP requests and parse HTTP responses into operation-specific results or errors. Use this module when initiating and processing RDS cluster restoration tasks directly from S3-stored data.",
      "description_length": 389,
      "index": 619,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ImportInstallationMedia",
      "library": "aws-rds",
      "description": "This module handles the import of installation media for database engines in AWS RDS. It works with `ImportInstallationMediaMessage.t` as input and returns `InstallationMedia.t` on success, while managing errors via `Errors_internal.t`. It is used to register custom database installation media into RDS, enabling the creation of DB instances from non-default engine versions.",
      "description_length": 376,
      "index": 620,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBProxy",
      "library": "aws-rds",
      "description": "This module handles modifying an existing RDS DB proxy by transforming input requests into signed HTTP queries and parsing responses. It works with `ModifyDBProxyRequest` and `ModifyDBProxyResponse` types, encoding them to and from HTTP format using AWS query protocol. It is used to update configuration properties of a DB proxy such as authentication settings, IAM authentication, or connection pooling parameters.",
      "description_length": 416,
      "index": 621,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DeleteOptionGroup",
      "library": "aws-rds",
      "description": "This module handles the deletion of an RDS option group by converting a deletion request into an HTTP query and processing the response. It works with the `DeleteOptionGroupMessage` input type and returns no output on success, using internal RDS error types for failure cases. Concrete use cases include removing custom option groups that are no longer needed, ensuring associated configurations are cleaned up in an AWS RDS environment.",
      "description_length": 437,
      "index": 622,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBParameters",
      "library": "aws-rds",
      "description": "This module handles querying and retrieving detailed parameter information from an RDS database parameter group. It accepts a `DescribeDBParametersMessage` input, which includes parameters like the parameter group name and filters, and returns `DBParameterGroupDetails` containing metadata and values of the parameters. It is used to inspect configured database settings, such as tuning options or connection limits, directly from AWS RDS.",
      "description_length": 439,
      "index": 623,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeReservedDBInstancesOfferings",
      "library": "aws-rds",
      "description": "This module handles the conversion of RDS reserved DB instance offerings requests to HTTP and parsing of responses, working with input and output types defined in the `Aws_rds.Types` module. It supports querying available reserved DB instance offerings by encoding input data into properly formatted HTTP requests and decoding responses into structured output or error types. Specific use cases include listing available RDS reservation options and handling API responses with precise error decoding based on AWS XML error data.",
      "description_length": 528,
      "index": 624,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeOrderableDBInstanceOptions",
      "library": "aws-rds",
      "description": "This module handles describing orderable DB instance options for RDS by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with input and output types specific to RDS instance configuration, such as `DescribeOrderableDBInstanceOptionsMessage` and `OrderableDBInstanceOptionsMessage`. It is used to query available DB instance configurations, including supported engine versions, instance classes, and licensing models.",
      "description_length": 480,
      "index": 625,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeCustomAvailabilityZones",
      "library": "aws-rds",
      "description": "This module handles the conversion of input and output types for the RDS DescribeCustomAvailabilityZones API call, encoding requests into HTTP format and decoding responses. It works directly with RDS-specific types for describing custom availability zones, including input parameters, output responses, and error handling. Use this module when interacting with AWS RDS to retrieve information about custom availability zones using the specific API request structure.",
      "description_length": 467,
      "index": 626,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBSubnetGroup",
      "library": "aws-rds",
      "description": "This module handles modifying an existing RDS DB subnet group by accepting a `ModifyDBSubnetGroupMessage` input, which includes the subnet group name and new subnet IDs. It sends the request via HTTP using AWS query format and returns a `ModifyDBSubnetGroupResult` containing the updated subnet group details. It is used when updating the subnets associated with an RDS instance's network configuration.",
      "description_length": 403,
      "index": 627,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RegisterDBProxyTargets",
      "library": "aws-rds",
      "description": "This module handles registering DB proxy targets in AWS RDS by encoding input requests into properly formatted HTTP queries and decoding responses or errors from the service. It works with RDS-specific input and output types defined in `Aws_rds.Types`, along with internal error representations. Use this module when programmatically associating database instances or clusters with an existing RDS DB proxy.",
      "description_length": 407,
      "index": 628,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBCluster",
      "library": "aws-rds",
      "description": "This module handles the deletion of an Amazon RDS database cluster by defining the input and output types for the operation, along with functions to construct and interpret HTTP requests and responses. It works with RDS-specific types such as `DeleteDBClusterMessage.t` for input and `DeleteDBClusterResult.t` for output, and includes error handling tailored to RDS deletion operations. Concrete use cases include initiating a cluster deletion request, encoding it into an HTTP call, and decoding or handling the result or any returned errors.",
      "description_length": 543,
      "index": 629,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBClusterEndpoint",
      "library": "aws-rds",
      "description": "This module handles the deletion of an RDS database cluster endpoint by defining the input and output types for the operation, along with functions to construct and parse HTTP requests and responses. It works directly with RDS-specific types like `DeleteDBClusterEndpointMessage` and `DBClusterEndpoint`, and includes error handling tailored to AWS RDS deletion responses. Concrete use cases include programmatically removing custom endpoints from an RDS cluster and managing endpoint lifecycle in automated database infrastructure workflows.",
      "description_length": 542,
      "index": 630,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeInstallationMedia",
      "library": "aws-rds",
      "description": "This module handles the conversion of RDS installation media description requests to HTTP format and parses responses, working with input and output types defined in `Aws_rds.Types`. It supports querying AWS RDS for installation media metadata by encoding requests with the correct action and version parameters and decoding responses into structured data or errors. Use this module when retrieving information about database installation media stored in RDS, such as media ID, status, and related database engine details.",
      "description_length": 522,
      "index": 631,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.StopDBCluster",
      "library": "aws-rds",
      "description": "This module handles stopping an Amazon RDS database cluster by defining the input and output types specific to the stop operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with RDS cluster identifiers and interacts with the AWS RDS API to perform the stop action. Use this module when programmatically halting a database cluster, such as during maintenance or resource management workflows.",
      "description_length": 445,
      "index": 632,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ModifyDBClusterEndpoint",
      "library": "aws-rds",
      "description": "This module handles modifying an existing RDS database cluster endpoint by transforming input parameters into HTTP requests and parsing responses or errors from the AWS service. It works directly with `ModifyDBClusterEndpointMessage` as input and returns a `DBClusterEndpoint` on success, while encoding requests using query parameters and handling error responses with status code matching. Concrete use cases include updating the custom endpoint identifier or associated database nodes in an RDS cluster configuration.",
      "description_length": 520,
      "index": 633,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyOptionGroup",
      "library": "aws-rds",
      "description": "This module handles modifying RDS option groups by providing functions to construct HTTP requests and parse responses for the `ModifyOptionGroup` API call. It works with input and output types specific to modifying option group configurations, such as option settings and apply options. Concrete use cases include updating database engine options and applying those changes to running RDS instances.",
      "description_length": 399,
      "index": 634,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeEngineDefaultParameters",
      "library": "aws-rds",
      "description": "This module handles describing default parameter settings for a specified database engine in AWS RDS. It works with input and output types specific to the `DescribeEngineDefaultParameters` operation, along with internal error types. It is used to retrieve default parameter values that apply to a specific RDS engine version, such as MySQL or PostgreSQL.",
      "description_length": 354,
      "index": 635,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.RemoveFromGlobalCluster",
      "library": "aws-rds",
      "description": "This module handles removing a DB cluster from a global RDS cluster by defining the input and output types specific to that operation, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with RDS-specific data structures like `RemoveFromGlobalClusterMessage` and `RemoveFromGlobalClusterResult`. It is used when managing global database clusters, specifically to dissociate a regional DB cluster from a global cluster configuration.",
      "description_length": 486,
      "index": 636,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ModifyDBInstance",
      "library": "aws-rds",
      "description": "This module handles modifying DB instances in AWS RDS by converting input data into signed HTTP requests and parsing responses into structured results or errors. It works with input messages, output results, and error types defined in the Aws_rds.Types and Aws_rds.Errors_internal modules. Concrete use cases include updating database instance configurations such as parameter groups, storage settings, or availability zones via the AWS RDS API.",
      "description_length": 445,
      "index": 637,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterBacktracks",
      "library": "aws-rds",
      "description": "This module handles the conversion of RDS DBClusterBacktracks requests to HTTP and parsing of responses, specifically working with `DescribeDBClusterBacktracksMessage` as input and `DBClusterBacktrackMessage` as output. It defines the signing method, service endpoint, and error handling required for interacting with the RDS service. Use this module when querying AWS RDS to retrieve backtrack information for a specific database cluster.",
      "description_length": 439,
      "index": 638,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBSecurityGroups",
      "library": "aws-rds",
      "description": "This module handles describing DB security groups in AWS RDS by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with input types containing DB security group identifiers and produces outputs containing metadata and rules of matching security groups. Concrete use cases include retrieving configuration details of existing DB security groups for auditing or automation purposes.",
      "description_length": 442,
      "index": 639,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.BacktrackDBCluster",
      "library": "aws-rds",
      "description": "This module handles backtracking a DB cluster to a specific point in time by converting input messages into HTTP requests and parsing responses into cluster backtrack details or errors. It works with `BacktrackDBClusterMessage` as input and returns `DBClusterBacktrack` information, while managing AWS-specific errors and request signing. It is used to initiate and process DB cluster backtrack operations in AWS RDS.",
      "description_length": 417,
      "index": 640,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeregisterDBProxyTargets",
      "library": "aws-rds",
      "description": "This module handles deregistering DB proxy targets in AWS RDS by converting native input into signed HTTP requests and processing responses. It works with `DeregisterDBProxyTargetsRequest` input and returns no output on success, using AWS-specific error types on failure. Concrete use cases include removing specific database instances or endpoints from a DB proxy target group.",
      "description_length": 378,
      "index": 641,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeEventCategories",
      "library": "aws-rds",
      "description": "This module handles describing event categories for AWS RDS by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with input types like `DescribeEventCategoriesMessage.t` and produces `EventCategoriesMessage.t` outputs, while handling internal RDS errors. It is used to retrieve event category information for RDS resources such as database instances, clusters, and parameter groups.",
      "description_length": 445,
      "index": 642,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBSecurityGroup",
      "library": "aws-rds",
      "description": "This module implements the AWS RDS operation to delete a DB security group by converting input parameters into a properly signed HTTP request and handling the response. It works with the `DeleteDBSecurityGroupMessage` input type to specify the security group identifier and processes responses into a unit output or an error. Concrete use cases include removing outdated or unused security groups from an RDS environment to manage access control and network security.",
      "description_length": 467,
      "index": 643,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBInstance",
      "library": "aws-rds",
      "description": "This module handles the creation of a new Amazon RDS database instance by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS-specific types such as `CreateDBInstanceMessage` for request configuration and `CreateDBInstanceResult` for response data, including error handling through `Errors_internal`. Concrete use cases include initiating a DB instance launch with specified parameters and processing the resulting HTTP response or error from the AWS RDS API.",
      "description_length": 559,
      "index": 644,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBEngineVersions",
      "library": "aws-rds",
      "description": "This module handles describing available database engine versions in AWS RDS by sending and processing HTTP requests. It works with input and output types specific to the RDS service, including encoded query parameters and XML responses. It is used to retrieve version details like supported features and parameter groups for specific database engines.",
      "description_length": 352,
      "index": 645,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ResetDBParameterGroup",
      "library": "aws-rds",
      "description": "This module resets a DB parameter group to its default values by sending an HTTP request with the specified parameter group name and reset options. It operates on input type `ResetDBParameterGroupMessage.t` and returns a response containing the name of the modified parameter group or an error. Use this module to programmatically revert custom parameter changes in an RDS instance's parameter group via the AWS API.",
      "description_length": 416,
      "index": 646,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CopyDBParameterGroup",
      "library": "aws-rds",
      "description": "This module handles copying an RDS database parameter group by defining input and output types, error parsing, and HTTP serialization. It works with RDS-specific parameter group messages and responses, along with standard AWS errors. Use this module to programmatically duplicate parameter groups, for example, when setting up new database instances with similar configurations.",
      "description_length": 378,
      "index": 647,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterSnapshotAttributes",
      "library": "aws-rds",
      "description": "This module handles the specific operation of describing attributes for RDS database cluster snapshots. It works with input and output types defined in the Aws_rds.Types module, along with internal error types for handling failures. It is used when retrieving information about which AWS accounts or groups have access to a specific RDS cluster snapshot.",
      "description_length": 354,
      "index": 648,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RestoreDBClusterToPointInTime",
      "library": "aws-rds",
      "description": "This module handles restoring an RDS database cluster to a specific point in time. It accepts a `RestoreDBClusterToPointInTimeMessage` input, sends the appropriate HTTP request to the RDS service, and returns a `RestoreDBClusterToPointInTimeResult` on success or a specific RDS error on failure. Use this when recovering a database cluster after accidental data loss or corruption.",
      "description_length": 381,
      "index": 649,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeGlobalClusters",
      "library": "aws-rds",
      "description": "This module handles describing AWS RDS global clusters by converting input parameters into HTTP requests and parsing responses into structured data. It works with input type `DescribeGlobalClustersMessage.t` and output type `GlobalClustersMessage.t`, along with internal error types for handling failures. Concrete use cases include querying metadata about existing global clusters, handling pagination through request parameters, and decoding XML error responses into specific RDS error types.",
      "description_length": 494,
      "index": 650,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBSnapshot",
      "library": "aws-rds",
      "description": "This module handles modifying DB snapshots in AWS RDS by converting input data into signed HTTP requests and parsing responses into structured results or errors. It works directly with `ModifyDBSnapshotMessage` as input and `ModifyDBSnapshotResult` as output, alongside RDS-specific error types. It is used to update attributes such as retention period or snapshot identifier for a DB snapshot through AWS API calls.",
      "description_length": 416,
      "index": 651,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBCluster",
      "library": "aws-rds",
      "description": "This module handles modifying an Amazon RDS database cluster by defining the input and output types for the operation, along with functions to construct and parse HTTP requests and responses. It works directly with RDS-specific types like `ModifyDBClusterMessage` and `ModifyDBClusterResult`, and handles error decoding from AWS XML responses. It is used when updating configuration settings of an RDS cluster, such as changing the master user password or adjusting backup windows.",
      "description_length": 481,
      "index": 652,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DeleteGlobalCluster",
      "library": "aws-rds",
      "description": "This module handles the deletion of an RDS global cluster by defining the input and output types for the operation, along with functions to construct and interpret HTTP requests and responses. It works directly with RDS global cluster identifiers and AWS error responses. Concrete use cases include issuing a delete command for a global cluster and processing the result or error from the AWS API.",
      "description_length": 397,
      "index": 653,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBSnapshots",
      "library": "aws-rds",
      "description": "This module handles describing database snapshots in AWS RDS by converting input parameters into signed HTTP requests and parsing responses into structured data. It works with `DescribeDBSnapshotsMessage` as input and returns `DBSnapshotMessage` output, while handling specific RDS errors. It is used to retrieve metadata about existing database snapshots, such as their status, creation time, and associated database identifiers.",
      "description_length": 430,
      "index": 654,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CreateOptionGroup",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS option groups by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS-specific types like `CreateOptionGroupMessage` and `CreateOptionGroupResult`, and handles errors through structured parsing. Concrete use cases include configuring database options such as backups, encryption, and monitoring for RDS instances.",
      "description_length": 460,
      "index": 655,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribePendingMaintenanceActions",
      "library": "aws-rds",
      "description": "This module handles describing pending maintenance actions for AWS RDS instances by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with RDS-specific input and output types, such as `DescribePendingMaintenanceActionsMessage` and `PendingMaintenanceActionsMessage`, along with internal error types for failure handling. It is used to query RDS for upcoming maintenance events affecting specific resources like DB instances or clusters.",
      "description_length": 499,
      "index": 656,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateGlobalCluster",
      "library": "aws-rds",
      "description": "This module handles the creation of a global database cluster in AWS RDS by defining the input and output types specific to the operation, along with functions to serialize requests into HTTP format and deserialize responses. It works directly with RDS-specific types such as `CreateGlobalClusterMessage` for input configuration and `CreateGlobalClusterResult` for output data, while using internal error types to handle failure conditions. Concrete use cases include initiating a global cluster setup with specified parameters and processing the resulting API response or errors.",
      "description_length": 580,
      "index": 657,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeSourceRegions",
      "library": "aws-rds",
      "description": "This module handles the conversion of RDS source region descriptions between native OCaml types and HTTP requests/responses. It works with input types representing RDS source region messages and outputs parsed source region data or errors. Concrete use cases include sending DescribeSourceRegions API requests to AWS RDS and decoding the resulting XML responses into structured data for region information.",
      "description_length": 406,
      "index": 658,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeCertificates",
      "library": "aws-rds",
      "description": "This module handles the conversion of RDS certificate description requests to HTTP format and parses responses, working with input and output types specific to certificate queries. It encodes `DescribeCertificatesMessage.t` into signed HTTP requests and decodes responses into `CertificateMessage.t` or error types. It is used to retrieve information about SSL/TLS certificates associated with RDS instances via the AWS API.",
      "description_length": 424,
      "index": 659,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBProxies",
      "library": "aws-rds",
      "description": "This module handles the HTTP communication for querying RDS database proxy details by converting input requests to properly signed HTTP requests and parsing responses into structured outputs or errors. It works directly with `DescribeDBProxiesRequest` and `DescribeDBProxiesResponse` types, along with internal RDS error types. It is used to retrieve information about configured database proxies in AWS RDS, such as their status, endpoints, and associated IAM roles.",
      "description_length": 467,
      "index": 660,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyCurrentDBClusterCapacity",
      "library": "aws-rds",
      "description": "This module modifies the capacity of a current RDS database cluster. It accepts a `ModifyCurrentDBClusterCapacityMessage` input and returns a `DBClusterCapacityInfo` output, handling errors specific to RDS operations. It is used to adjust the compute capacity of an RDS cluster, such as scaling up or down during active usage.",
      "description_length": 326,
      "index": 661,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types",
      "library": "aws-rds",
      "description": "OCaml module Types: This module models configuration parameters, status metadata, and API interaction structures for AWS RDS resources. It operates on structured data types for RDS clusters, instances, snapshots, parameter groups, security configurations, and related entities, supporting use cases like configuration validation, lifecycle management, and error handling during operations such as backups, scaling, and resource creation or deletion. Also contains: This module handles lists of valid storage options for RDS instances, providing functions to parse XML input, convert to query parameters, and serialize to and from JSON. It works with lists of `ValidStorageOptions.t` records, which describe allowed storage configurations. Use this module when processing RDS API responses or preparing storage configuration requests.; This module defines a record type representing a database proxy target with optional fields for ARN, endpoint, cluster ID, resource ID, port, target type, and health status. It provides functions to construct, parse, and convert instances to and from JSON and query formats. It is used to manage and configure RDS proxy targets in AWS deployments, particularly when handling target group configurations and health monitoring.",
      "description_length": 1260,
      "index": 662,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.PromoteReadReplica",
      "library": "aws-rds",
      "description": "This module handles promoting a read replica to a standalone database instance in AWS RDS. It works with input and output types defined in the `Aws_rds.Types` module, specifically `PromoteReadReplicaMessage.t` and `PromoteReadReplicaResult.t`, along with internal error types for handling failures. It provides functions to construct and sign HTTP requests, convert responses, and parse errors specific to the promote read replica operation.",
      "description_length": 441,
      "index": 663,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBCluster",
      "library": "aws-rds",
      "description": "This module handles the creation of a new Amazon RDS database cluster by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS-specific types such as `CreateDBClusterMessage` for request configuration and `CreateDBClusterResult` for returned data. Concrete use cases include initiating a new multi-AZ DB cluster with specified parameters and handling the resulting API response or error conditions during cluster creation.",
      "description_length": 520,
      "index": 664,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBSubnetGroup",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS DB subnet groups by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS-specific types such as `CreateDBSubnetGroupMessage` for input and `CreateDBSubnetGroupResult` for output, alongside internal error types for handling failures. Concrete use cases include configuring subnet groups for database instances by sending properly signed HTTP requests to the RDS service endpoint.",
      "description_length": 525,
      "index": 665,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.AddSourceIdentifierToSubscription",
      "library": "aws-rds",
      "description": "This module adds a source identifier to an RDS event notification subscription by sending a signed HTTP request to the AWS RDS service. It encodes input data into a query string format and decodes the response into either a success result or an error specific to the operation. It is used when configuring event notifications for RDS instances or clusters by associating additional sources with an existing subscription.",
      "description_length": 420,
      "index": 666,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CopyDBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module handles copying an RDS DB cluster parameter group by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS-specific parameter group message and result types, as well as AWS internal error types. It is used when duplicating a parameter group to apply custom database engine settings across clusters.",
      "description_length": 416,
      "index": 667,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeValidDBInstanceModifications",
      "library": "aws-rds",
      "description": "This module handles the AWS RDS operation to retrieve valid modifications for a DB instance. It works with input and output types defined in `Aws_rds.Types`, specifically `DescribeValidDBInstanceModificationsMessage` and `DescribeValidDBInstanceModificationsResult`, along with internal error types for handling failures. It is used to determine which modifications can be applied to an existing RDS instance, such as changing instance class, storage, or engine version, without requiring a new instance to be created.",
      "description_length": 518,
      "index": 668,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.AuthorizeDBSecurityGroupIngress",
      "library": "aws-rds",
      "description": "This module handles authorizing ingress to a DB security group in AWS RDS. It works with input and output types defined in the Aws_rds.Types module, along with internal error types for handling failures. Concrete use cases include allowing network access to a database instance by updating security group rules based on IP ranges or EC2 security groups.",
      "description_length": 353,
      "index": 669,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBProxyTargets",
      "library": "aws-rds",
      "description": "This module handles describing targets associated with an RDS database proxy. It provides functions to convert input parameters into an HTTP request and parse the corresponding response or error. It works directly with `DescribeDBProxyTargetsRequest` and `DescribeDBProxyTargetsResponse` types to manage proxy target metadata, such as instance identifiers and endpoint details.",
      "description_length": 377,
      "index": 670,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeEvents",
      "library": "aws-rds",
      "description": "This module handles the conversion of RDS event descriptions between native OCaml types and HTTP requests/responses. It works with input types `DescribeEventsMessage.t`, output types `EventsMessage.t`, and errors from `Errors_internal.t`. It is used to send RDS event queries to AWS and decode the results, ensuring correct request formatting and response parsing.",
      "description_length": 364,
      "index": 671,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBSnapshot",
      "library": "aws-rds",
      "description": "This module handles the deletion of DB snapshots in AWS RDS by providing functions to construct and interpret HTTP requests and responses for the `DeleteDBSnapshot` API call. It works with input and output types specific to the RDS service, including encoded query parameters and XML-parsed results. Concrete use cases include initiating a snapshot deletion and processing the resulting status or error responses.",
      "description_length": 413,
      "index": 672,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CreateDBProxy",
      "library": "aws-rds",
      "description": "This module handles the creation of a DB proxy in AWS RDS by defining the request and response types, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works with RDS-specific types such as `CreateDBProxyRequest` and `CreateDBProxyResponse`, and handles error parsing from AWS XML responses. Concrete use cases include configuring and sending API calls to set up a new DB proxy with specified parameters, and processing the resulting service response or error conditions.",
      "description_length": 507,
      "index": 673,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CreateEventSubscription",
      "library": "aws-rds",
      "description": "This module handles creating event subscriptions in Amazon RDS by defining the input and output types specific to the operation, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with RDS event subscription messages and error responses, encoding requests into query format and decoding responses or errors from XML. Concrete use cases include setting up notifications for RDS events like database failures or backups.",
      "description_length": 473,
      "index": 674,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds",
      "library": "aws-rds",
      "description": "This module provides a comprehensive interface for managing AWS RDS resources through a wide range of operations, including creating, modifying, and deleting database instances, clusters, snapshots, security groups, parameter groups, and event subscriptions. It supports key data types such as `CreateDBInstanceMessage`, `ModifyDBClusterMessage`, `DeleteDBSnapshotMessage`, and their corresponding result types, along with structured error handling for RDS-specific failure conditions. Operations can be used to automate database lifecycle tasks like initiating backups, restoring from snapshots, configuring network access, applying parameter changes, and managing IAM role associations, all via direct interaction with the AWS RDS API.",
      "description_length": 737,
      "index": 675,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 676,
    "meaningful_modules": 676,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 1260,
    "min_description_length": 216,
    "avg_description_length": 383.5,
    "embedding_file_size_mb": 2.455810546875
  }
}