{
  "package": "aws-rds",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 676,
  "creation_timestamp": "2025-08-18T20:14:36.884907",
  "modules": [
    {
      "module_path": "Aws_rds.Types.DBClusterMemberList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DB cluster members, providing operations to convert, parse, and serialize cluster member data. It works with XML nodes, JSON values, and query parameters, enabling interaction with AWS RDS APIs for cluster management tasks. Use cases include processing API responses, building requests, and converting between data formats for cluster member information.",
      "description_length": 387,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyDBClusterParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for copying an RDS DB cluster parameter group, including source and target identifiers, a description, and optional tags. It provides functions to construct, parse, and serialize the record to query parameters or JSON. It is used when duplicating parameter group configurations across RDS clusters with specific metadata.",
      "description_length": 355,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SubnetAlreadyInUse",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `SubnetAlreadyInUse` error in RDS operations. It includes functions to construct, parse, and convert the error to common formats like JSON and query strings. It is used when managing subnet group configurations that reference subnets already associated with another subnet group.",
      "description_length": 348,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AvailabilityZoneList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS availability zones, providing operations to convert, parse, and serialize them to and from XML, JSON, and query formats. It works directly with lists of `AvailabilityZone.t` values, supporting data transformation for API interactions. Concrete use cases include preparing availability zone data for RDS instance configuration requests and parsing responses from AWS RDS API calls.",
      "description_length": 413,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterBacktrackNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `DBClusterBacktrackNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query parameters, JSON, and back, all operating on a unit value. Use this module when interacting with AWS RDS APIs to represent and handle specific error conditions related to missing database cluster backtracks.",
      "description_length": 418,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS DB parameter group, with optional fields for the group name, family, description, and ARN. It provides functions to construct, serialize, and deserialize instances using JSON and XML formats. Concrete use cases include managing RDS configuration settings and interfacing with AWS RDS APIs for database parameter group operations.",
      "description_length": 386,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SourceRegionList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS source regions, providing functions to convert them to and from JSON, query parameters, and XML. It works with lists of `SourceRegion.t` values, representing region data from AWS RDS. Use this module when managing cross-region read replicas or listing available source regions for replication.",
      "description_length": 326,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidExportSourceStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `InvalidExportSourceStateFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query parameters, JSON, and back from JSON. Use this module when interacting with RDS export operations that need to signal or handle invalid source state errors.",
      "description_length": 365,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupNameMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling database parameter group names in AWS RDS operations. It includes functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when managing RDS database instances that require referencing or modifying parameter groups.",
      "description_length": 318,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteEventSubscriptionResult",
      "library": "aws-rds",
      "description": "This module handles the result of deleting an RDS event subscription. It provides constructors, JSON and XML parsers, and query builders for a type that optionally contains an `EventSubscription.t`. It is used to process responses from AWS RDS after attempting to delete event subscriptions, allowing for structured access to the returned data.",
      "description_length": 344,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterResult",
      "library": "aws-rds",
      "description": "This module defines a result type for a deleted database cluster operation, containing an optional DBCluster record. It includes functions to construct, parse, and serialize the result to query format or JSON, and to convert from JSON. It is used to handle responses from RDS delete cluster operations, providing direct access to the deleted cluster data when available.",
      "description_length": 370,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AccountQuotaList",
      "library": "aws-rds",
      "description": "This module handles lists of account quotas for AWS RDS, providing operations to convert, parse, and serialize quota data. It works with XML nodes, JSON values, and AWS query parameters, supporting data interchange and API interactions. Use this module when retrieving or configuring RDS account limits programmatically.",
      "description_length": 320,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBSubnetStateFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `InvalidDBSubnetStateFault` error in RDS operations. It provides functions to create, parse, and serialize the error type to query parameters or JSON format. Use this module when interacting with RDS APIs that require handling of subnet state validation errors.",
      "description_length": 330,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterRoleAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition where a DBCluster role already exists. It works with unit type values and provides operations to construct, parse, and convert the error to query or JSON formats. It is used specifically in error handling scenarios when managing RDS DBCluster roles to signal duplicate role assignments.",
      "description_length": 371,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupsList",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of RDS option groups. It provides functions to convert option groups to and from XML, JSON, and query formats. It is used when managing RDS database option group configurations programmatically.",
      "description_length": 267,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.UpgradeTarget",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing RDS engine upgrade targets, including fields like engine name, version, and upgrade behavior. It provides functions to construct, parse, and convert upgrade target data to query parameters or JSON format. Use this module when configuring or retrieving RDS instance upgrade options in AWS API interactions.",
      "description_length": 359,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AddRoleToDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for adding an IAM role to an RDS DB cluster, including the cluster identifier, role ARN, and an optional feature name. It provides functions to construct, parse, and serialize the structure to query parameters or JSON format. It is used when configuring enhanced monitoring or other RDS features that require role associations.",
      "description_length": 364,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyTargetAlreadyRegisteredFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where a database proxy target is already registered. It works with unit type values and provides operations to convert to query parameters, JSON, and back, as well as parsing from various inputs. It is used specifically in error handling when managing RDS proxy targets to avoid duplicate registrations.",
      "description_length": 383,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CertificateList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS certificate data by providing functions to convert, parse, and serialize them into different formats. It works with XML nodes, JSON values, and AWS query parameters, enabling direct interaction with AWS RDS APIs. Use this module when retrieving or sending certificate information to AWS RDS, such as listing available certificates or processing API responses.",
      "description_length": 392,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DBClusterSnapshot values, providing direct conversions to and from XML, JSON, and query formats. It includes parsing from XML nodes and construction from JSON input, supporting direct integration with AWS RDS APIs. Use this module when processing responses or building requests involving multiple DBClusterSnapshot entries.",
      "description_length": 356,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionSetting",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS option setting with optional string and boolean fields. It provides functions to construct, parse, and convert option settings to and from XML, JSON, and query formats. Use this module when configuring or retrieving RDS database option groups, particularly for handling settings like timeout values, logging options, or backup configurations.",
      "description_length": 399,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOptionVersionsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option versions, providing functions to convert them to and from JSON, query parameters, and XML. It works with lists of `OptionVersion.t` values, supporting serialization and deserialization for use in API requests and responses. Concrete use cases include processing RDS option group version data when creating or modifying database instances.",
      "description_length": 378,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterOptionGroupStatus",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the status of an RDS DB cluster option group, with optional fields for the option group name and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling RDS API responses that describe the configuration and state of database cluster option groups.",
      "description_length": 396,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReadReplicaDBInstanceIdentifierList",
      "library": "aws-rds",
      "description": "This module handles lists of string identifiers for read replica database instances in AWS RDS. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this when managing replication configurations that require serializing or deserializing read replica instance identifiers.",
      "description_length": 340,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeCertificatesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS certificates with optional filters, pagination, and identifiers. It includes functions to construct, serialize, and parse certificate query messages in JSON, XML, and AWS query formats. Concrete use cases include retrieving certificate information from RDS with specific filters or pagination parameters.",
      "description_length": 358,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpointQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition when a database cluster endpoint quota is exceeded. It provides functions to construct, parse, and serialize the error to common formats like JSON and AWS Query. This type is used specifically to handle and communicate quota-related failure states in RDS database cluster endpoint management.",
      "description_length": 365,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBProxyTargetNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `DBProxyTargetNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to common formats like JSON and query strings. Use this module when interacting with AWS RDS DB proxy targets to handle cases where a target is not found.",
      "description_length": 351,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyCertificatesResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying certificate configurations in a database service. It provides constructors, JSON and XML parsers, and query builders for a structure containing an optional certificate. It is used to process responses when updating certificates for database instances or clusters.",
      "description_length": 307,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidOptionGroupStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid option group state errors in RDS operations. It provides functions to create, parse, and convert the unit value to query parameters, JSON, and back from JSON. Concrete use cases include error handling and serialization in RDS API clients.",
      "description_length": 316,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case when a database instance already exists. It provides operations to create, parse, and convert the error to query parameters or JSON format. Use this module when managing RDS instance creation workflows to detect and handle duplicate instance errors.",
      "description_length": 329,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBInstanceResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying a database instance in AWS RDS. It provides functions to create, parse, and convert the result to and from XML, JSON, and query formats. It works with the `DBInstance.t` type, representing the modified database instance data.",
      "description_length": 269,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshot",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS cluster snapshot, with fields for metadata like snapshot identifiers, creation times, engine version, storage configuration, and associated tags. It provides operations to construct, serialize, and deserialize instances for use in API interactions, such as querying or provisioning snapshots. Concrete use cases include managing backup snapshots of RDS clusters, tracking encryption settings, and retrieving metadata for automated database recovery workflows.",
      "description_length": 516,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS DB subnet group responses, including optional pagination markers. It provides operations to construct, parse, and serialize messages containing lists of DB subnet groups, primarily used when interacting with AWS RDS APIs for subnet management. Concrete use cases include retrieving and processing subnet group configurations from AWS responses in XML or JSON format.",
      "description_length": 419,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ConnectionPoolConfiguration",
      "library": "aws-rds",
      "description": "This module defines a configuration structure for managing database connection pools, including parameters like maximum connection percentages, borrow timeouts, session pinning filters, and initialization queries. It provides constructors, JSON and XML parsers, and query builders to facilitate integration with AWS RDS APIs. Use this module to configure and serialize connection pool settings for database instances.",
      "description_length": 417,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the condition where a database snapshot already exists. It provides operations to create, parse, and convert the snapshot existence condition into query parameters or JSON format. It is used when interacting with AWS RDS APIs to manage database snapshots and handle duplicate snapshot errors.",
      "description_length": 357,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBInstanceReadReplicaMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for configuring a read replica of a database instance in Amazon RDS. It includes fields for specifying replica properties such as identifier, source instance, class, availability zone, and optional settings like monitoring, encryption, and performance insights. The module supports creating, parsing, and serializing replica configurations for use with RDS API requests.",
      "description_length": 419,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying a DB snapshot in AWS RDS. It provides functions to create, parse, and convert the result to various formats like JSON and query parameters. It works with the `DBSnapshot` type, representing the modified snapshot data returned by the RDS service.",
      "description_length": 289,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotAttributesResult",
      "library": "aws-rds",
      "description": "This module handles RDS cluster snapshot attributes, providing functions to create, parse, and convert snapshot attribute data to and from XML, JSON, and query formats. It works with types representing cluster snapshot identifiers and lists of snapshot attributes. Use this module when managing access permissions or retrieving metadata about RDS cluster snapshots in AWS.",
      "description_length": 372,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of deleting a DB cluster snapshot in AWS RDS. It provides constructors, parsing, and serialization functions for working with the `DeleteDBClusterSnapshotResult` structure, which contains an optional `DBClusterSnapshot` object. Use this module when processing responses from RDS snapshot deletion operations, particularly for interacting with XML or JSON APIs.",
      "description_length": 391,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyOptionGroupResult",
      "library": "aws-rds",
      "description": "This module defines a result structure for copying an option group, containing an optional `OptionGroup` value. It provides functions to construct, parse, and serialize the result to query parameters or JSON. Use this when handling responses from copying RDS option groups, particularly to extract and manipulate the resulting option group data.",
      "description_length": 345,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBProxyRequest",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for modifying an RDS DB proxy configuration. It includes fields for proxy name, authentication, TLS settings, timeouts, logging, IAM role, and security groups. It supports parsing from XML, conversion to query parameters or JSON, and construction with optional parameters. Use this module when updating RDS proxy settings via the AWS SDK, particularly for configuring authentication methods, network security, or connection behavior.",
      "description_length": 482,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RemoveTagsFromResourceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for removing tags from an RDS resource, consisting of the resource name and a list of tag keys. It provides functions to construct, parse, and serialize this structure in various formats, including JSON and query parameters. Concrete use cases include preparing and sending tag removal requests to Amazon RDS via API.",
      "description_length": 354,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition when a database parameter group already exists. It works with unit type values to represent the presence of this specific error, and provides operations to convert error data to query parameters, JSON, and back. Use this module to detect and manage duplicate database parameter group creation attempts in RDS operations.",
      "description_length": 405,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBSubnetGroupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS DB subnet groups, supporting operations to create, serialize, and parse messages with optional filters, limits, and pagination markers. It works with string and integer types from the AWS base libraries, along with filter lists specific to RDS. It is used to request descriptions of DB subnet groups from the AWS RDS API, enabling filtering and pagination in the request.",
      "description_length": 425,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeregisterDBProxyTargetsResponse",
      "library": "aws-rds",
      "description": "This module handles the response for deregistering DB proxy targets in AWS RDS. It defines a unit type and operations to construct, parse, and serialize the response in various formats such as JSON and query strings. It is used when managing database proxy target groups, specifically for removing registered targets.",
      "description_length": 317,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeInstallationMediaMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS installation media, supporting operations to create, parse, and serialize requests. It works with string and integer types, along with filter lists, to construct and process API messages. Concrete use cases include retrieving metadata about database installation media from AWS RDS using customizable filters and pagination.",
      "description_length": 378,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterSnapshotAttributesMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type representing a message for describing attributes of a DB cluster snapshot. It includes operations to construct, parse, and serialize the message in various formats, including JSON, query parameters, and XML. It is used specifically to retrieve attribute information for a DB cluster snapshot in the RDS service.",
      "description_length": 350,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxyTargetGroupsResponse",
      "library": "aws-rds",
      "description": "This module handles responses from describing RDS database proxy target groups, containing a list of target groups and an optional pagination marker. It provides functions to construct, parse, and serialize the response in various formats including JSON and query parameters. Use this module when processing results from RDS proxy target group queries in AWS RDS management workflows.",
      "description_length": 384,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Outpost",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an AWS RDS Outpost with an optional ARN field. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when managing RDS resources deployed on AWS Outposts, particularly for serializing and deserializing outpost configurations in API requests and responses.",
      "description_length": 378,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.Certificate",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing SSL/TLS certificates used with AWS RDS. It includes functions to construct, serialize, and parse certificate data, supporting operations like converting to and from JSON, query parameters, and XML. Use cases include managing certificate information when interacting with RDS API operations such as describing or modifying certificates.",
      "description_length": 389,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Subnet",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a subnet with optional fields for identifier, availability zone, outpost, and status. It provides functions to construct, parse, and convert subnet data to and from JSON and query formats. It is used when managing RDS subnet configurations, particularly in interactions with AWS RDS APIs that require structured subnet information.",
      "description_length": 381,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CopyDBClusterParameterGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of copying an RDS DB cluster parameter group. It provides functions to create, parse, and serialize the result, which includes an optional DB cluster parameter group. Use this module when working with RDS parameter group operations, particularly for copying configurations between clusters.",
      "description_length": 321,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.VpcSecurityGroupMembership",
      "library": "aws-rds",
      "description": "This module defines a data structure representing VPC security group membership with optional fields for the security group ID and status. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and XML. Use this module when managing RDS instance security configurations, particularly for associating or inspecting VPC security groups.",
      "description_length": 375,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOptionSetting",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an option setting for an RDS option group, with fields like setting name, description, default value, and modifiability. It provides functions to construct, parse, and convert these settings to and from JSON and query formats. It is used when managing RDS database option groups, particularly when specifying configuration options tied to specific engine versions.",
      "description_length": 414,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeGlobalClustersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying AWS RDS global clusters, supporting operations to create, parse, and serialize cluster descriptions. It works with string and integer types, along with filter lists, to configure query parameters such as cluster identifiers, result limits, and pagination markers. It is used to construct and process API requests for listing global clusters in AWS RDS.",
      "description_length": 402,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotAttributeList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DB cluster snapshot attributes, providing operations to convert between XML, JSON, and query string formats. It supports parsing attribute lists from XML nodes and converting them to JSON arrays or AWS query parameters. Use this when working with RDS snapshot attribute data in different serialization formats, such as when interacting with the AWS API or processing responses.",
      "description_length": 410,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RegisterDBProxyTargetsRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for registering DB proxy targets, including fields for the proxy name, target group name, and lists of DB instance and cluster identifiers. It provides functions to construct, parse, and serialize the request for use with AWS RDS operations. The module is used when configuring DB proxies to route traffic to specific RDS instances or clusters.",
      "description_length": 384,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case where a database cluster is not found. It provides operations to construct, parse, and convert the unit value to query parameters, JSON, or back from JSON. It is used to represent and serialize the absence of a database cluster in API responses.",
      "description_length": 324,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.TargetState",
      "library": "aws-rds",
      "description": "This module defines an enumerated type representing the possible states of a target in a database cluster, including registering, available, and unavailable. It provides functions to convert between string representations and the enumerated values, along with serialization and deserialization to JSON and query formats. It is used to manage and interpret the operational status of database targets in RDS operations.",
      "description_length": 417,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventSubscriptionsMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS event subscription responses. It provides operations to construct, parse, and serialize event subscription messages, including optional pagination markers and lists of event subscriptions. It is used to process and transmit event subscription data in RDS API interactions, such as retrieving or managing event notification subscriptions.",
      "description_length": 390,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when a database parameter group is not found. It provides operations to construct, parse, and convert the unit value to query parameters, JSON, and back from JSON. Use this module to represent and serialize the absence of a database parameter group in API responses.",
      "description_length": 345,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.KMSKeyNotAccessibleFault",
      "library": "aws-rds",
      "description": "This module defines a minimal type and associated conversion functions for handling KMS key accessibility errors in AWS RDS operations. It works with unit type values and provides functions to parse, serialize to query format, and convert to and from JSON. It is used specifically for error handling and request/response processing in RDS interactions involving KMS keys.",
      "description_length": 371,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroups",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of DB security group data as lists. It provides functions to convert between XML, JSON, and query formats, specifically working with `DBSecurityGroup.t` lists. It is used when interacting with RDS APIs to manage security group configurations in AWS.",
      "description_length": 322,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionSettingsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option settings, providing direct conversions to and from JSON, query parameters, and XML. It supports operations for parsing and constructing these lists, specifically tailored for interacting with AWS RDS configuration APIs. Use this module when configuring or retrieving RDS instance options such as backup settings, logging, or monitoring features.",
      "description_length": 385,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstancesOfferingNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling cases where a reserved database instance offering is not found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, or back from JSON. Use this when interacting with AWS RDS APIs to manage reserved instance offerings and handle missing offerings gracefully.",
      "description_length": 370,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyCertificatesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying certificate settings in RDS, supporting operations to set or remove a customer-specified certificate identifier. It works with optional string and boolean types to represent configuration changes. Use this module when updating RDS certificate configurations via API calls, particularly when overriding or removing custom certificate identifiers.",
      "description_length": 396,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type `t` representing a message to delete a DB cluster parameter group, containing the parameter group name. It provides functions to construct, parse, and serialize the message in various formats including JSON, query parameters, and XML. Concrete use cases include sending deletion requests to AWS RDS and handling responses in client applications.",
      "description_length": 384,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StartDBClusterResult",
      "library": "aws-rds",
      "description": "This module defines a result structure for an RDS cluster start operation, containing an optional DBCluster record. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle responses from starting a database cluster in AWS RDS, allowing inspection or further processing of the resulting cluster state.",
      "description_length": 395,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RemoveFromGlobalClusterResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of removing a cluster from a global database cluster. It includes functions to construct, parse, and serialize the result, which contains an optional global cluster object. It is used to handle responses from AWS RDS operations that modify global cluster membership.",
      "description_length": 327,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PendingMaintenanceActions",
      "library": "aws-rds",
      "description": "This module handles parsing, serialization, and manipulation of RDS resource pending maintenance actions. It works with lists of `ResourcePendingMaintenanceActions` records, supporting conversion to and from XML, JSON, and query parameters. It is used when retrieving or modifying pending maintenance actions for RDS instances via the AWS API.",
      "description_length": 343,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing the absence of an option group in RDS operations. It includes functions to construct, parse, and convert the type to query parameters, JSON, and back from JSON. It is used specifically to handle cases where an RDS option group is expected but not found, enabling explicit error handling in API responses.",
      "description_length": 348,
      "index": 70,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PromoteReadReplicaDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type representing a message to promote a read replica DB cluster, containing the cluster identifier. It provides functions to construct the message, parse it from XML, convert it to query parameters or JSON, and create it from JSON. This module is used to handle the input message format required by the RDS service when promoting a read replica cluster.",
      "description_length": 388,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Timezone",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing timezone information with an optional name field. It provides functions to construct, serialize, and convert timezone values to and from JSON, query parameters, and XML. Use this module when handling timezone configurations in RDS operations, such as setting or retrieving database instance timezone settings.",
      "description_length": 363,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InstallationMediaMessage",
      "library": "aws-rds",
      "description": "Handles structured data for RDS installation media responses, including pagination markers. Works with XML, JSON, and query parameter formats for AWS RDS API interactions. Used to process and serialize installation media lists with optional pagination tokens.",
      "description_length": 259,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBProxyRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for deleting a database proxy, containing a single field for the proxy name. It provides functions to construct the request, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used when interacting with AWS RDS to issue a delete request for a specific database proxy by name.",
      "description_length": 369,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupNotAllowedFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling DB subnet group not allowed errors in RDS operations. It provides parsing, query conversion, and JSON serialization functions that work with the unit type. It is used specifically to represent and handle the error condition when a DB subnet group is not allowed in an API call.",
      "description_length": 347,
      "index": 75,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying RDS cluster parameter groups, containing the parameter group name and a list of parameters. It provides functions to construct, parse, and serialize the structure to query or JSON formats. It is used when updating parameter settings for an Amazon RDS cluster.",
      "description_length": 310,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.FilterList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS filters, providing operations to convert between XML, JSON, and query representations. It works with lists of `Filter.t` records, enabling structured filtering of RDS resources in API requests and responses. Concrete use cases include parsing filter lists from API XML responses, constructing filter lists for query parameters, and serializing or deserializing filter data for JSON-based interactions.",
      "description_length": 434,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBProxyResponse",
      "library": "aws-rds",
      "description": "This module defines a response type for deleting a database proxy, containing an optional `DBProxy` record. It provides functions to construct, parse, and serialize the response in various formats including JSON, query parameters, and XML. It is used to handle the output of RDS database proxy deletion operations in AWS SDK workflows.",
      "description_length": 335,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceRoles",
      "library": "aws-rds",
      "description": "This module handles the conversion and manipulation of DB instance role data for AWS RDS. It provides functions to parse XML input into a list of DB instance roles, convert role lists to query parameters or JSON format, and construct role lists from JSON input. It works directly with `DBInstanceRole.t` lists and is used when managing IAM roles associated with RDS instances via API requests.",
      "description_length": 393,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SubnetIdentifierList",
      "library": "aws-rds",
      "description": "This module handles lists of subnet identifiers for RDS operations, providing functions to convert between XML, JSON, and query string formats. It works with lists of base string types, primarily for serializing and deserializing subnet data in API requests and responses. Concrete use cases include preparing subnet lists for RDS instance creation or modification and parsing subnet information from RDS API responses.",
      "description_length": 419,
      "index": 80,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OrderableDBInstanceOption",
      "library": "aws-rds",
      "description": "This module defines a data structure representing orderable database instance options, capturing attributes like engine, version, instance class, and capabilities such as encryption or VPC support. It includes functions to construct, parse, and serialize these options for use in querying or configuring RDS instances. Concrete use cases include retrieving available instance configurations from AWS RDS and filtering them based on specific requirements like storage encryption or performance features.",
      "description_length": 502,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.TagList",
      "library": "aws-rds",
      "description": "This module handles lists of AWS RDS tags, providing operations to convert tag lists to and from XML, JSON, and query parameters. It supports parsing tag data from XML nodes and constructing JSON or query representations of tag lists. Use this module when working with RDS resource tagging operations that require serialization or deserialization of tag data.",
      "description_length": 359,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroup",
      "library": "aws-rds",
      "description": "This module defines a record type representing an RDS database security group, with fields for metadata like name, description, VPC ID, EC2 security groups, IP ranges, and ARN. It provides functions to construct, parse, and serialize security group data to and from XML, JSON, and AWS query formats. Concrete use cases include configuring network access for RDS instances using EC2 security groups and IP-based rules.",
      "description_length": 417,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ImportInstallationMediaMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for importing installation media into a custom availability zone, with fields specifying engine details and media paths. It provides functions to construct, parse, and serialize the structure to query parameters or JSON format. Use this module when configuring database engine installations in custom zones using AWS RDS APIs.",
      "description_length": 363,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalClustersMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a collection of global database clusters, including optional pagination markers. It provides operations to construct, serialize, and convert cluster data to and from JSON and XML formats. Use this module when managing responses from AWS RDS global cluster operations, particularly for paginated results.",
      "description_length": 352,
      "index": 85,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.AvailableProcessorFeatureList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS available processor features, providing functions to parse XML input into feature lists, convert them to query parameters or JSON format, and construct empty feature lists. It operates on a list of `AvailableProcessorFeature.t` records, each representing a processor feature supported by an RDS instance. Use this module when configuring or retrieving processor features for RDS instances in AWS API requests or responses.",
      "description_length": 455,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.AuthorizeDBSecurityGroupIngressResult",
      "library": "aws-rds",
      "description": "This module handles the result of authorizing ingress to a DB security group, primarily providing a data structure to represent the updated security group. It works with XML, JSON, and query parameter formats to facilitate AWS RDS API interactions. Use this module when processing responses from RDS security group authorization operations, particularly for parsing and serializing data during API client implementation.",
      "description_length": 420,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AuthorizationNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `AuthorizationNotFoundFault` error in AWS RDS operations. It includes functions to construct, parse, and convert the error type to query parameters, JSON, and back from JSON. It is used specifically to represent and manage authorization-related errors when interacting with RDS resources.",
      "description_length": 357,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBInstanceAutomatedBackupStateFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling invalid DB instance automated backup state faults. It provides operations to create, parse, and convert the fault type to query parameters, JSON, and back from JSON. It is used specifically for error handling in RDS DB instance automated backup operations.",
      "description_length": 321,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CopyDBParameterGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of copying a DB parameter group in AWS RDS. It provides constructors, parsing, and serialization functions for the result type, which contains an optional DB parameter group. Use this module when managing RDS parameter group copies via API calls, particularly for handling responses in JSON, XML, or query formats.",
      "description_length": 345,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DoubleRange",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing a range of double-precision floating-point values, with optional lower and upper bounds. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query parameters. Concrete use cases include specifying numeric filters in RDS API requests, such as filtering instances by CPU utilization or memory usage within a specific range.",
      "description_length": 419,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InstallationMediaNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the absence of installation media in RDS operations. It includes functions for creating, parsing, and converting the unit value to query or JSON formats, primarily used in error handling scenarios. Concrete use cases involve signaling and processing missing installation media errors in RDS service interactions.",
      "description_length": 382,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling paginated RDS event responses, including an optional marker for pagination and a list of events. It provides functions to construct, parse, and serialize event messages to and from XML, JSON, and query formats. Concrete use cases include retrieving and processing RDS database event logs in paginated form.",
      "description_length": 356,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InstallationMedia",
      "library": "aws-rds",
      "description": "This module defines a data structure representing installation media metadata for database engines, including identifiers, paths, status, and failure details. It provides functions to construct, parse, and serialize instances to and from XML, JSON, and query formats. Concrete use cases include handling RDS installation media responses from AWS API calls and preparing custom engine installation media requests.",
      "description_length": 412,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterMember",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a member of a DB cluster, with fields for instance identifier, cluster writer status, parameter group status, and promotion tier. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing RDS cluster member configurations and serializing them for API requests or responses.",
      "description_length": 412,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZoneList",
      "library": "aws-rds",
      "description": "This module handles lists of custom availability zones in AWS RDS. It provides operations to convert, parse, and serialize these lists to and from XML, JSON, and query formats. Use this module when managing custom availability zone configurations in RDS, such as when creating or modifying database instances across specific zones.",
      "description_length": 331,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxyTargetGroupsRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for querying RDS DB proxy target groups, including fields like proxy name, optional target group name, filters, pagination marker, and max records. It provides functions to construct, parse, and serialize these requests to JSON or query parameters. Use this module when interacting with AWS RDS APIs to retrieve information about DB proxy target groups, applying filters or pagination as needed.",
      "description_length": 435,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeEventSubscriptionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring RDS event subscription descriptions, including optional fields like subscription name, filters, record limits, and pagination markers. It provides functions to construct, serialize, and parse these configurations for use in API requests. Concrete use cases include querying RDS event subscriptions with custom filters and handling paginated results.",
      "description_length": 402,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyEventSubscriptionResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying an RDS event subscription. It provides functions to create, parse, and serialize a result containing an optional event subscription. It is used to process responses from AWS RDS when updating event notification settings, supporting XML and JSON formats for communication with the service.",
      "description_length": 332,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterFromSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a database cluster from a snapshot, primarily providing a structure to hold an optional DBCluster value. It includes functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when processing responses from RDS restore operations to extract and manipulate cluster data.",
      "description_length": 366,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS database snapshot responses. It provides functions to construct, serialize, and parse snapshot messages, including optional pagination markers and lists of snapshots. Use it when processing AWS RDS snapshot API responses or building requests involving snapshot data.",
      "description_length": 319,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroups",
      "library": "aws-rds",
      "description": "This module handles the structure and serialization of RDS option groups responses, including pagination via a marker. It works with XML, JSON, and query string formats for AWS API interactions. Use it to parse or construct RDS option groups data when managing database options or retrieving configuration lists.",
      "description_length": 312,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterParameterGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of creating a DB cluster parameter group in AWS RDS. It includes a single optional field containing the created parameter group and provides functions for constructing, parsing, and converting the result to and from JSON and query formats. It is used when interacting with RDS APIs to manage cluster-level parameter groups.",
      "description_length": 354,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeEngineDefaultClusterParametersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS engine default cluster parameters, including fields for parameter group family, filters, pagination, and markers. It provides functions to construct, parse, and serialize these queries to JSON or query strings. It is used to retrieve default parameter settings for RDS clusters from AWS.",
      "description_length": 341,
      "index": 104,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceRoleNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where a DB instance role is not found. It provides functions to construct, parse, and convert the error to query parameters, JSON, or from JSON. Use this module to handle and propagate errors related to missing DB instance roles in RDS operations.",
      "description_length": 320,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstancesOffering",
      "library": "aws-rds",
      "description": "This module defines a record type representing a reserved DB instance offering in AWS RDS, including fields such as instance class, duration, pricing, and recurring charges. It provides functions to construct, parse, and convert these records to and from JSON and query formats. It is used to manage and retrieve reserved instance offerings, enabling users to view and select available RDS reservations with specific configurations and cost details.",
      "description_length": 449,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterRoles",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of RDS DBClusterRole data structures. It provides functions to convert between XML, JSON, and query string formats, specifically for lists of DBClusterRole records. Use this module when interacting with AWS RDS APIs that require or return DBClusterRole information in different data formats.",
      "description_length": 364,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBSecurityGroupStateFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling invalid database security group state errors in AWS RDS operations. It provides functions to construct, parse, and convert error data to query parameters or JSON format. It is used when interacting with AWS RDS APIs to manage database security groups and report invalid states.",
      "description_length": 342,
      "index": 108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBLogFilesList",
      "library": "aws-rds",
      "description": "This module handles the parsing, serialization, and transformation of RDS database log file lists. It works with lists of `DescribeDBLogFilesDetails.t` records, converting them to and from XML, JSON, and query formats. It is used when retrieving and processing log file metadata from an RDS instance, such as listing available log files for download or analysis.",
      "description_length": 362,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroupDetails",
      "library": "aws-rds",
      "description": "This module handles RDS cluster parameter group details, including parameter lists and optional markers. It provides functions to construct, parse, and convert these details to and from JSON and query formats. It is used when retrieving or modifying parameter groups for RDS clusters, particularly in paginated responses.",
      "description_length": 321,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SupportedCharacterSetsList",
      "library": "aws-rds",
      "description": "This module handles lists of character sets supported by a database service. It provides operations to convert these lists to and from JSON and query formats, and to parse them from XML. Use this module when managing character set configurations in database instances or API requests.",
      "description_length": 284,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroupNameMessage",
      "library": "aws-rds",
      "description": "This module handles the serialization and deserialization of a database cluster parameter group name within AWS RDS operations. It works with XML, JSON, and query string formats to extract or construct a parameter group name message. Concrete use cases include processing responses from RDS API calls that return parameter group names, or building requests that require specifying such names.",
      "description_length": 392,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StopDBClusterResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of stopping a database cluster, containing an optional DBCluster value. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to handle responses from RDS stop cluster operations, allowing integration with AWS API calls and response processing.",
      "description_length": 373,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Tag",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling tags in AWS RDS operations, consisting of optional key-value pairs. It provides functions to construct, serialize, and convert tags to and from JSON and query formats. Use this module when managing metadata for RDS resources such as databases or snapshots via tagging APIs.",
      "description_length": 323,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZoneQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `CustomAvailabilityZoneQuotaExceededFault` error in AWS RDS operations. It includes functions to construct, parse, and convert the error to query or JSON formats, primarily working with unit type to represent the absence of detailed error data. It is used when an operation exceeds the allowed quota for custom availability zones, enabling proper error signaling and handling.",
      "description_length": 445,
      "index": 115,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ResourceNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type representing a resource not found error in RDS operations. It includes functions to construct, parse, and convert the error to query or JSON formats. Use this module when handling RDS API errors related to missing resources like databases or instances.",
      "description_length": 284,
      "index": 116,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.LogTypeList",
      "library": "aws-rds",
      "description": "Handles parsing, serialization, and query conversion for lists of log types in AWS RDS operations. Works with XML nodes, JSON values, and AWS query structures. Used to process log type responses from RDS APIs and construct requests with log type filters.",
      "description_length": 254,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceToPointInTimeResult",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a database instance to a specific point in time. It includes a single optional `DBInstance` value, representing the restored instance. Functions support creating, parsing, and converting the result to and from XML, JSON, and query formats for use in API responses and requests.",
      "description_length": 321,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition when a database cluster already exists. It provides operations to create, parse, and convert the error to query or JSON formats, working with unit type values. Concrete use cases include error handling in RDS cluster creation workflows and API response processing.",
      "description_length": 349,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AccountAttributesMessage",
      "library": "aws-rds",
      "description": "This module handles the structure and conversion of RDS account attributes messages. It provides operations to create, parse, and serialize account attribute data, specifically working with account quotas. Use this module when interacting with AWS RDS account-level quota information via API requests or JSON data.",
      "description_length": 314,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SNSInvalidTopicFault",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing an invalid SNS topic error in RDS operations. It includes functions to construct, parse, and convert the error to query or JSON formats. It is used when handling API responses that indicate an invalid SNS topic configuration.",
      "description_length": 269,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where a database security group already exists. It works with unit type values and provides operations to convert to query parameters, JSON, and back from JSON. It is used when interacting with AWS RDS APIs to manage database security groups.",
      "description_length": 322,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBSecurityGroupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database security groups with optional filters, record limits, and pagination. It supports operations to construct, parse, and serialize the query parameters to JSON, query strings, or XML. Concrete use cases include retrieving specific security group configurations, filtering by attributes like VPC ID, and paginating through large result sets.",
      "description_length": 400,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterRole",
      "library": "aws-rds",
      "description": "This module defines a record type with optional fields for ARN, status, and feature name, representing an RDS cluster role. It provides functions to construct, parse, and convert the type to query parameters, JSON, or from JSON. It is used to manage IAM roles associated with RDS clusters in AWS API requests and responses.",
      "description_length": 323,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ParametersList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS parameters, providing operations to convert between XML, JSON, and query formats. It works with lists of `Parameter.t` values, supporting serialization and deserialization for API interactions. Concrete use cases include preparing parameter lists for RDS instance configuration and parsing responses from RDS API calls.",
      "description_length": 352,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AccountQuota",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing account quotas in a database service, including the quota name, current usage, and maximum limit. It provides functions to construct, parse, and convert quota data to and from XML, JSON, and query formats. Concrete use cases include retrieving and managing account-level resource limits for database instances.",
      "description_length": 364,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EngineDefaults",
      "library": "aws-rds",
      "description": "This module defines a data structure for engine defaults in a database service, including fields for parameter group family, marker, and a list of parameters. It provides functions to construct, parse, and serialize this structure to and from XML, JSON, and query formats. Use this module when retrieving or configuring default engine settings from a database API.",
      "description_length": 364,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AddSourceIdentifierToSubscriptionResult",
      "library": "aws-rds",
      "description": "This module handles the result of adding a source identifier to an RDS event subscription. It provides operations to create, parse, and serialize the result, which includes an optional event subscription. Use this module when managing RDS event subscriptions in AWS, particularly when integrating with XML or JSON APIs.",
      "description_length": 319,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ValidStorageOptionsList",
      "library": "aws-rds",
      "description": "This module handles lists of valid storage options for RDS instances, providing operations to convert, parse, and serialize them to and from XML, JSON, and query formats. It works with lists of `ValidStorageOptions.t` records, which describe allowable storage configurations returned by AWS RDS. Concrete use cases include processing RDS describe operations, filtering storage options for provisioning, and formatting responses for API interactions.",
      "description_length": 449,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an RDS DB instance configuration, including fields like storage, instance class, security groups, and backup settings. It provides functions to construct, parse, and serialize these configurations for use in API requests. Concrete use cases include updating database parameters, changing network settings, or adjusting performance options in Amazon RDS.",
      "description_length": 404,
      "index": 130,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZone",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a custom availability zone with optional fields for ID, name, status, and associated VPN details. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML nodes. Concrete use cases include managing custom availability zone configurations in AWS RDS, particularly when integrating with VPC networks via VPN connections.",
      "description_length": 420,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Option",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS option with optional fields like name, description, persistence flags, port, version, settings, and security group memberships. It provides functions to construct, parse, and serialize these options to and from XML, JSON, and query formats. It is used when managing RDS database options, such as configuring or retrieving option groups with specific settings and security policies.",
      "description_length": 438,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PointInTimeRestoreNotEnabledFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `PointInTimeRestoreNotEnabledFault` error in AWS RDS. It includes operations for constructing, parsing, and converting the error to query or JSON formats. The module works with unit type values, representing the presence of this specific error condition.",
      "description_length": 323,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure for managing RDS cluster parameter group attributes, including name, family, description, and ARN. It provides functions to construct, serialize, and convert instances to and from JSON, query parameters, and XML. Use this module when configuring or retrieving RDS cluster parameter groups in AWS integrations.",
      "description_length": 346,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionConfigurationList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option configurations, providing direct conversions to and from XML, JSON, and query formats. It supports operations for parsing, serializing, and constructing option configuration lists used in RDS API requests. Concrete use cases include preparing option group settings for API calls and processing responses containing option configuration data.",
      "description_length": 381,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidExportOnlyFault",
      "library": "aws-rds",
      "description": "This module defines a minimal unit type and associated functions for handling invalid export-only faults in AWS RDS operations. It provides parsing, query conversion, and JSON serialization functions, all operating on the unit type. It is used to represent and process error conditions related to unsupported export operations in RDS.",
      "description_length": 334,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when a DB security group is not found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, and back from JSON. Use this module when interacting with AWS RDS APIs to represent and handle missing DB security group errors.",
      "description_length": 341,
      "index": 137,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBProxyAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where a database proxy already exists. It provides operations to create, parse, and convert the error to query or JSON formats. Use this module when managing RDS database proxy creation workflows to detect and handle duplicate proxy attempts.",
      "description_length": 322,
      "index": 138,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBEngineVersionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database engine versions with optional filters, pagination, and feature flags. It supports operations to construct, serialize, and parse messages for API requests, enabling precise control over engine version discovery. Use this module when listing RDS engine versions with specific criteria, such as filtering by engine type or retrieving supported character sets.",
      "description_length": 419,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.UserAuthConfigInfo",
      "library": "aws-rds",
      "description": "This module defines a data structure for RDS user authentication configuration, including fields like description, username, authentication scheme, secret ARN, and IAM authentication mode. It provides functions to construct, parse, and serialize these configurations to and from JSON and query parameters. It is used when managing database instance authentication settings in AWS RDS operations.",
      "description_length": 395,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.TargetHealthReason",
      "library": "aws-rds",
      "description": "This module defines a set of reason codes indicating why a target is unhealthy, such as connection failures or authentication issues. It includes functions to convert between string representations and enumerated values, along with serialization and deserialization for JSON, XML, and query parameters. It is used to interpret and communicate the health status of database targets in AWS RDS environments.",
      "description_length": 405,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.IamRoleMissingPermissionsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling IAM role permission faults in AWS RDS operations. It provides functions to construct, parse, and convert fault data to query parameters or JSON format. It is used when reporting missing IAM permissions in RDS API responses.",
      "description_length": 288,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeValidDBInstanceModificationsResult",
      "library": "aws-rds",
      "description": "This module handles the result of describing valid DB instance modifications in AWS RDS. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It works with a single data type `t` that contains an optional `ValidDBInstanceModificationsMessage`.",
      "description_length": 298,
      "index": 143,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeAccountAttributesMessage",
      "library": "aws-rds",
      "description": "This module handles the serialization and deserialization of RDS account attribute requests. It works with unit type values and converts them into query parameters or JSON structures for API requests. It is used when retrieving account-specific metadata from RDS, such as quota limits or feature availability.",
      "description_length": 309,
      "index": 144,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ProcessorFeatureList",
      "library": "aws-rds",
      "description": "This module handles lists of processor features for RDS instances, providing functions to convert them to and from JSON and query formats. It works with XML nodes, JSON values, and AWS query parameters to facilitate API interactions. Use this module when configuring or retrieving RDS instance processor settings programmatically.",
      "description_length": 330,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for creating RDS database cluster snapshots, including identifiers for the snapshot and cluster, and optional tags. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, enabling interaction with AWS RDS APIs. Use cases include initiating cluster snapshot creation requests and handling related data in API responses.",
      "description_length": 400,
      "index": 146,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the DBSubnetGroupQuotaExceededFault error in AWS RDS operations. It includes functions to construct, parse, and convert the error to query or JSON formats. It is used when a database subnet group exceeds its maximum allowed size, typically during RDS instance creation or subnet group configuration.",
      "description_length": 364,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when a database cluster parameter group is not found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, and back from JSON. Use this module when managing RDS cluster parameter groups to signal or handle missing configurations.",
      "description_length": 350,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ScalingConfiguration",
      "library": "aws-rds",
      "description": "This module defines a record type for configuring auto-scaling parameters, including min and max capacity, auto-pause behavior, pause delay, and timeout actions. It provides functions to construct, parse, and convert these configurations to and from JSON and query formats. It is used to specify scaling behavior for database instances in AWS RDS operations.",
      "description_length": 358,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstanceQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition for exceeding reserved database instance quotas. It includes operations to construct, parse, and convert the error to query or JSON formats. It is used specifically to handle quota-related errors in database instance management workflows.",
      "description_length": 311,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InstallationMediaAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `InstallationMediaAlreadyExistsFault` error in AWS RDS operations. It provides functions to create, parse, and convert the error type to query parameters, JSON, and back from JSON. It is used specifically to represent and manage the error condition when attempting to create installation media that already exists.",
      "description_length": 383,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteGlobalClusterResult",
      "library": "aws-rds",
      "description": "This module defines a result type for deleting a global database cluster in AWS RDS, containing an optional global cluster object. It provides functions to construct, parse, and serialize the result to query parameters or JSON format. Use this module when handling responses from RDS global cluster deletion operations, particularly to extract or return cluster state after deletion.",
      "description_length": 383,
      "index": 152,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterSnapshotsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS cluster snapshots with optional filters, pagination, and visibility settings. It supports operations to construct, serialize, and parse snapshot query messages for use with AWS RDS APIs. Concrete use cases include retrieving specific snapshots by identifier, filtering by type, and handling paginated results.",
      "description_length": 363,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DomainMembership",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing domain membership information, including fields like domain name, status, FQDN, and IAM role. It provides functions to construct, parse, and serialize these records to and from XML, JSON, and query formats. It is used when managing RDS instances that are part of a directory domain, enabling integration with AWS Directory Service.",
      "description_length": 385,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterMemberList",
      "library": "aws-rds",
      "description": "This module handles lists of global cluster members in AWS RDS, providing operations to convert, parse, and serialize member data. It works with XML nodes, JSON values, and query parameters, enabling interaction with AWS RDS APIs for global cluster management. Use cases include processing API responses, building requests, and converting between data formats for cluster member information.",
      "description_length": 391,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyDBParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for copying an RDS DB parameter group, including source and target identifiers, a description, and optional tags. It provides functions to construct, parse, and serialize the structure to and from JSON, query parameters, and XML. Use this module when configuring or duplicating database parameter groups in AWS RDS workflows.",
      "description_length": 362,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StopDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a message structure for stopping a database cluster, containing a single required field: the cluster identifier. It provides functions to create, parse, and serialize the message in various formats including JSON, query parameters, and XML. This module is used to construct and process API requests to stop an RDS database cluster programmatically.",
      "description_length": 368,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StopDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for stopping an RDS database instance, including the instance identifier and an optional snapshot identifier. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, ensuring proper formatting for AWS RDS API requests. Concrete use cases include preparing a stop instance request with or without a snapshot before sending it to the AWS RDS service.",
      "description_length": 429,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RecurringCharge",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing recurring charges, including amount and frequency. It provides functions to create, parse, and convert recurring charge data to and from JSON, query parameters, and XML. Use this module when handling billing information for AWS RDS resources, such as processing subscription fees or usage-based charges.",
      "description_length": 357,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DBProxy values, providing direct conversions to and from XML, JSON, and query parameters. It supports parsing DBProxy lists from XML nodes and constructing JSON or query representations of DBProxy lists. Use this module when working with AWS RDS API operations that return or require multiple DBProxy entries, such as listing or configuring database proxies.",
      "description_length": 391,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceRoleAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where a DB instance role already exists. It provides operations to create, parse, and convert the error to query parameters or JSON format. Use this when managing RDS instance roles to detect and handle duplicate role assignments.",
      "description_length": 310,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InsufficientStorageClusterCapacityFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `InsufficientStorageClusterCapacityFault` error in AWS RDS operations. It provides functions to create, parse, and convert the error type to query parameters, JSON, and back from JSON. It is used specifically to detect and handle cases where a storage cluster lacks capacity during RDS operations.",
      "description_length": 366,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBCluster",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS database cluster with fields for configuration and operational metadata like identifiers, endpoints, encryption settings, and cluster members. It provides functions to construct, parse, and serialize cluster data for use in API requests and responses. Concrete use cases include creating cluster configurations, processing AWS API XML responses, and converting cluster state to JSON for logging or further processing.",
      "description_length": 474,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS event records, providing functions to convert them to and from XML, JSON, and query formats. It works with `Event.t` lists, supporting serialization, deserialization, and request/response handling for AWS RDS event data. Use this module when processing RDS event streams from AWS API calls, such as retrieving or logging database instance events.",
      "description_length": 379,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Endpoint",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing an RDS endpoint with optional address, port, and hosted zone ID fields. It provides functions to construct, parse, and convert endpoint values to and from JSON and query formats. It is used when managing RDS instance connections, particularly for serializing and deserializing endpoint information during API interactions.",
      "description_length": 376,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SourceIdsList",
      "library": "aws-rds",
      "description": "This module handles lists of string identifiers for AWS RDS sources. It provides functions to convert these lists to and from JSON and query parameters, and to parse them from XML. Use this module when working with RDS events or subscriptions that require filtering by source IDs.",
      "description_length": 280,
      "index": 166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterMember",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a member of an AWS RDS global cluster, including its ARN, reader ARNs, writer status, and write forwarding status. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used when managing cross-region RDS cluster configurations and replication settings.",
      "description_length": 368,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DB parameter group records, providing direct conversions to and from XML, JSON, and query formats. It supports parsing DB parameter group data from AWS XML responses and serializing them for requests or storage. Use this module when managing RDS instance parameter groups via AWS API calls or configuration tools.",
      "description_length": 346,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribePendingMaintenanceActionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying pending maintenance actions in Amazon RDS, including optional filters, pagination, and resource identifiers. It provides functions to construct, serialize, and parse these queries in JSON, query string, and XML formats. Concrete use cases include retrieving pending maintenance actions for a specific RDS instance or paginating through a large list of actions.",
      "description_length": 410,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBSnapshotAttributesResult",
      "library": "aws-rds",
      "description": "This module handles the result of describing RDS database snapshot attributes. It provides operations to create, parse, and serialize the result, which includes optional snapshot attribute data. Use this module when retrieving or modifying access permissions for RDS snapshots in AWS.",
      "description_length": 284,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RegisterDBProxyTargetsResponse",
      "library": "aws-rds",
      "description": "This module handles responses from registering DB proxy targets in AWS RDS. It provides functions to construct, parse, and serialize target list data, specifically working with `TargetList.t` to manage proxy endpoints. Use this module when interacting with RDS proxy target registration workflows, such as adding or validating targets in a proxy configuration.",
      "description_length": 360,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SourceRegionMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a message containing a list of source regions, typically used in AWS RDS operations. It provides functions to construct, parse, and serialize the data structure to and from XML, JSON, and query formats. Concrete use cases include processing API responses and building requests involving replication source regions.",
      "description_length": 363,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PurchaseReservedDBInstancesOfferingMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for purchasing a reserved DB instance offering, including required and optional fields like offering ID, instance ID, instance count, and tags. It provides functions to construct, parse, and serialize the structure to JSON, query parameters, or XML. Concrete use cases include submitting purchase requests for reserved RDS instances and handling responses in AWS RDS integrations.",
      "description_length": 417,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterToPointInTimeMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and associated operations for configuring a database cluster restore operation in AWS RDS. It includes fields for specifying source and target cluster identifiers, restore time, network configuration, encryption, and logging options. The module provides functions to construct, parse, and serialize these configurations for use in API requests.",
      "description_length": 378,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterBacktrackMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS cluster backtrack responses, including optional pagination markers and lists of backtrack records. It provides operations to construct, serialize, and parse these messages to and from XML, JSON, and query formats. Concrete use cases include processing responses from RDS API calls to retrieve and manage cluster backtrack information.",
      "description_length": 387,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.VpcSecurityGroupMembershipList",
      "library": "aws-rds",
      "description": "This module handles lists of VPC security group membership records, providing functions to convert, parse, and serialize them for use in AWS RDS operations. It works with XML, JSON, and query parameter formats to support API request and response processing. Use this module when managing database instance security group associations in AWS RDS workflows.",
      "description_length": 355,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AddTagsToResourceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for associating tags with an RDS resource, consisting of a resource name and a list of tags. It provides functions to construct, parse, and serialize this structure for use in API requests, specifically for adding metadata tags to RDS instances or clusters. The module supports operations like converting the structure into a query format or JSON for HTTP interactions and parsing JSON responses into the corresponding type.",
      "description_length": 461,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyEventSubscriptionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an RDS event subscription, including fields like subscription name, SNS topic ARN, source type, event categories, and enabled status. It provides functions to construct, parse, and serialize the structure to query parameters or JSON for use with AWS RDS APIs. Concrete use cases include updating event notification settings for RDS instances or clusters via the AWS SDK.",
      "description_length": 421,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateEventSubscriptionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring event subscriptions in a database service, including fields like subscription name, SNS topic ARN, event categories, and source IDs. It provides operations to construct, parse, and serialize subscription configurations for API requests. Concrete use cases include setting up event notifications for specific database events and managing subscription settings through JSON or query string formats.",
      "description_length": 449,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeCustomAvailabilityZonesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS custom availability zones, supporting operations to create, parse, and serialize request parameters. It works with string and integer types, along with filter lists, to configure and transmit API requests. Use this module to construct and manage input for RDS custom availability zone queries, such as filtering results or paginating through large datasets.",
      "description_length": 411,
      "index": 180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBParameterGroupResult",
      "library": "aws-rds",
      "description": "This module defines a result type for creating a DB parameter group, containing an optional `DBParameterGroup` record. It provides functions to construct, parse, and serialize the result to query parameters or JSON, and to create an instance from JSON. It is used to handle the response data when creating a parameter group in RDS, enabling integration with AWS APIs and configuration management.",
      "description_length": 396,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DomainMembershipList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS domain membership records. It provides functions to convert domain membership lists to and from JSON and query formats, as well as parsing from XML nodes. Use this module when working with AWS RDS domain membership data in different serialization formats.",
      "description_length": 288,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupMembershipList",
      "library": "aws-rds",
      "description": "This module handles lists of DB security group membership records, providing functions to convert, parse, and serialize them for use in AWS RDS API requests and responses. It works with XML, JSON, and query parameter formats to facilitate communication with the RDS service. Use cases include processing security group membership data when managing database instances or configuring access controls.",
      "description_length": 399,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventCategoriesList",
      "library": "aws-rds",
      "description": "This module handles lists of event categories for Amazon RDS events. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. Use this when configuring or retrieving RDS event subscriptions that require specifying event categories.",
      "description_length": 292,
      "index": 184,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ListTagsForResourceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying parameters to list tags on an RDS resource. It includes operations to construct, parse, and serialize the structure to query or JSON formats. It works with RDS resource names and filter lists, primarily used when retrieving metadata tags for resource management or cost allocation.",
      "description_length": 333,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CertificateMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS certificate messages, including pagination markers. It provides functions to construct, serialize, and convert certificate messages to and from JSON and query formats. Use this module when managing responses from RDS certificate-related API calls, such as listing certificates with pagination.",
      "description_length": 346,
      "index": 186,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SubscriptionCategoryNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling subscription category not found errors in RDS event subscriptions. It includes operations for creating, parsing, and converting error data to query parameters or JSON format. It is used when managing RDS event subscription configurations and validating event categories.",
      "description_length": 340,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeEventsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring RDS event descriptions with optional time ranges, source filters, and pagination. It includes functions to construct, serialize, and parse event query parameters for interacting with the RDS API. Concrete use cases include retrieving database event logs within specific time windows or filtering events by category and source type.",
      "description_length": 384,
      "index": 188,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `OptionGroupQuotaExceededFault` error in AWS RDS operations. It includes functions to construct, parse, and convert the error to query or JSON formats, primarily used for error signaling and handling in RDS API interactions. The module works with the unit type, representing the presence of a specific error condition without additional data.",
      "description_length": 411,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring new database instances in Amazon RDS, including parameters like instance class, storage, network settings, and backup policies. It provides functions to construct, serialize, and parse these configurations, enabling programmatic creation of RDS instances via AWS SDK calls. Use cases include setting up isolated database environments with custom security groups, enabling encryption, or configuring automated backups and monitoring.",
      "description_length": 485,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotAttributeList",
      "library": "aws-rds",
      "description": "This module handles lists of DB snapshot attributes, providing functions to convert them to and from XML, JSON, and query formats. It works with the `DBSnapshotAttribute.t` type, representing attributes like permissions or metadata associated with RDS snapshots. Use this module when managing RDS snapshot access controls or inspecting snapshot properties in AWS.",
      "description_length": 363,
      "index": 191,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSubnetGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying a DB subnet group in AWS RDS. It provides functions to create, parse, and convert the result to and from XML, JSON, and query formats. It works with the `DBSubnetGroup` type, representing the updated subnet group configuration returned by the RDS service after a modification request.",
      "description_length": 328,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.BackupPolicyNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `BackupPolicyNotFoundFault` error in AWS RDS operations. It includes functions to construct, parse, and convert the error to query or JSON formats, primarily working with unit type and JSON-like structures. It is used when interacting with AWS RDS APIs to manage backup policies and handle related error responses.",
      "description_length": 383,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidSubnet",
      "library": "aws-rds",
      "description": "This module defines a minimal type `t` representing an invalid subnet in RDS configurations, along with operations to construct, parse, and serialize it. It includes functions to convert values to AWS query format and JSON, and to parse from JSON or other input. It is used when handling subnet group validation errors in RDS API interactions.",
      "description_length": 343,
      "index": 194,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSnapshotAttributeMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying attributes of a DB snapshot in Amazon RDS. It supports operations to add or remove specific attribute values, working with string identifiers and lists of attribute values. It is used to construct and manipulate API requests for updating snapshot permissions or metadata.",
      "description_length": 322,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceFromDBSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a DB instance from a snapshot in AWS RDS. It provides functions to create, parse, and convert the result to and from JSON and query formats. It works with XML, JSON, and AWS query data structures, specifically wrapping an optional DB instance type.",
      "description_length": 292,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotAttributesResult",
      "library": "aws-rds",
      "description": "This module handles RDS snapshot attribute results, providing constructors, JSON and XML parsing, and query conversion. It works with RDS snapshot identifiers and attribute lists. Used to retrieve and manipulate snapshot metadata, such as ownership and access permissions, from AWS RDS responses.",
      "description_length": 296,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterFromS3Message",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for configuring an RDS cluster restore from an S3 source. It includes fields for specifying database identifiers, engine settings, network configuration, backup policies, and S3 integration details like bucket name and ingestion role. The module supports serialization to and from JSON and query formats, and parsing from XML, enabling direct use in API requests to AWS RDS.",
      "description_length": 423,
      "index": 198,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBInstanceStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid database instance state errors. It provides operations to convert values to query parameters, JSON, and back, ensuring proper serialization and deserialization. It is used when interacting with AWS RDS APIs to communicate and handle specific error states related to database instance transitions.",
      "description_length": 374,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionVersion",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS option version with optional version and default status fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to manage version-specific configuration options in RDS database instances.",
      "description_length": 318,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ValidUpgradeTargetList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS upgrade targets, providing functions to convert them to and from JSON and query formats. It includes parsing from XML nodes and constructing from JSON values. Use this module when interacting with AWS RDS upgrade target data in API requests or responses.",
      "description_length": 287,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstance",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a reserved database instance with fields for configuration and billing details. It provides functions to construct, parse, and convert instances to and from XML, JSON, and query formats. Use this module when managing reserved RDS instances, particularly for interacting with AWS APIs or processing reservation data in different serialization formats.",
      "description_length": 400,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClustersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database clusters with optional filters, pagination, and sharing status. It supports operations to construct, parse, and serialize cluster query messages in various formats, including JSON and AWS query format. Concrete use cases include building and processing API requests to describe RDS clusters in AWS environments.",
      "description_length": 374,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ExportTask",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS export task with fields for task metadata, progress, and error information. It provides functions to construct, parse, and serialize export task records for interacting with AWS RDS APIs. Concrete use cases include tracking database snapshot exports to S3 and monitoring export task status and performance metrics.",
      "description_length": 371,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterEndpointMessage",
      "library": "aws-rds",
      "description": "This module defines a single type `t` representing a message to delete a DB cluster endpoint, with a required identifier field. It provides functions to construct, parse, and serialize the message to query parameters or JSON format. Use this when interacting with AWS RDS APIs to delete a specific DB cluster endpoint by its identifier.",
      "description_length": 336,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyDBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for copying a DB snapshot in Amazon RDS, including source and target identifiers, optional encryption key, tags, and configuration settings. It provides functions to construct, parse, and serialize the snapshot copy request in various formats such as JSON and query parameters. Use this module when initiating a DB snapshot copy operation with custom settings like encryption, tagging, or availability zone selection.",
      "description_length": 454,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSnapshotResult",
      "library": "aws-rds",
      "description": "This module defines a single type `t` that represents the result of creating a DB snapshot, containing an optional `DBSnapshot.t` value. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used specifically to handle the output of RDS snapshot creation operations in AWS.",
      "description_length": 355,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeSourceRegionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring RDS source region queries, including optional region name, record limit, pagination marker, and filters. It provides functions to construct, serialize, and parse these query configurations for use with AWS RDS API operations. Use this module when querying RDS source regions with custom filters or pagination.",
      "description_length": 362,
      "index": 208,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SubscriptionNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling subscription not found errors in RDS operations. It provides functions to convert the unit value to AWS query format, JSON, and back from JSON, enabling seamless integration with AWS SDK workflows. Use this module when managing RDS event subscriptions and handling error responses related to missing subscriptions.",
      "description_length": 384,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PendingModifiedValues",
      "library": "aws-rds",
      "description": "This module defines a record type representing pending modifications to an RDS instance, with optional fields for configuration changes like instance class, storage, password, port, and more. It includes functions to construct, parse, and serialize these values to and from JSON and query parameters. It is used to handle pending RDS instance updates in API requests and responses.",
      "description_length": 381,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InsufficientAvailableIPsInSubnetFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition where there are not enough available IP addresses in a subnet. It provides operations to create, parse, and serialize this error state into query parameters, JSON, or an option type, specifically for use in AWS RDS service interactions. The module works exclusively with unit type values, representing the presence or absence of this specific fault condition.",
      "description_length": 444,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ExportTaskAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `ExportTaskAlreadyExistsFault` error in RDS operations. It provides functions to create, parse, and convert the error type to query parameters, JSON, and back from JSON. It is used specifically to represent and manage the fault condition when an RDS export task already exists.",
      "description_length": 346,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ResourcePendingMaintenanceActions",
      "library": "aws-rds",
      "description": "This module handles resource pending maintenance actions by providing constructors, parsers, and serializers for the `t` type, which includes a resource identifier and a list of pending maintenance action details. It supports operations to convert instances to and from XML, JSON, and query parameters, enabling integration with AWS RDS APIs. Use this module to process and manage maintenance action data returned from RDS service calls, such as identifying resources needing updates and serializing them for further processing.",
      "description_length": 528,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterSnapshotResult",
      "library": "aws-rds",
      "description": "This module defines a single type `t` that represents the result of creating a DB cluster snapshot, containing an optional `DBClusterSnapshot.t` value. It provides functions to construct, parse, and serialize the result for use in API responses and queries. Concrete use cases include handling the output of RDS cluster snapshot creation operations and converting between XML, JSON, and query formats.",
      "description_length": 401,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StartDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a message structure for starting a database cluster, containing a single required field: the cluster identifier. It provides functions to create, parse, and serialize the message to query parameters or JSON, as well as deserializing from JSON. Use this module when interacting with AWS RDS APIs to initiate a database cluster start operation, ensuring correct formatting and parsing of request data.",
      "description_length": 419,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSecurityGroupResult",
      "library": "aws-rds",
      "description": "This module defines a result structure for creating a database security group, containing an optional `DBSecurityGroup` record. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. It is used to handle the output of RDS security group creation operations, enabling integration with AWS API requests and responses.",
      "description_length": 390,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupMembership",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an option group membership in AWS RDS, with optional fields for the option group name and status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling RDS instance responses that include option group membership details, particularly during API interactions or configuration management.",
      "description_length": 429,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AuthorizeDBSecurityGroupIngressMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for authorizing ingress to a DB security group, containing fields such as the DB security group name and optional CIDR IP or EC2 security group details. It provides operations to construct, parse, and serialize the structure to query parameters or JSON for use in API requests. Concrete use cases include configuring network access rules for RDS instances by allowing specific IP ranges or EC2 security groups.",
      "description_length": 447,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReplicaMode",
      "library": "aws-rds",
      "description": "This module defines a polymorphic variant type `t` with two constructors, `Open_read_only` and `Mounted`, representing replica modes for database instances. It includes functions to convert between strings and the `t` type, as well as serialization and deserialization functions for JSON, XML, and query parameters. This module is used to specify and handle replica mode values when interacting with AWS RDS operations such as creating or modifying database instances.",
      "description_length": 468,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupNotSupportedFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case where DB security groups are not supported. It provides operations to construct, parse, and convert the unit value to query parameters, JSON, or back from JSON. Use this when interacting with AWS RDS APIs that need to signal unsupported DB security group operations through a structured value type.",
      "description_length": 377,
      "index": 220,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.Parameter",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing RDS parameter configurations, including fields like name, value, data type, and modifiability. It provides functions to construct, parse, and convert parameter values to and from JSON and query formats. It is used to manage database parameter settings in AWS RDS operations, such as modifying or retrieving parameter groups.",
      "description_length": 378,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxiesRequest",
      "library": "aws-rds",
      "description": "This module defines the request structure for describing DB proxies in AWS RDS, including optional fields for filtering, pagination, and specifying a particular proxy. It supports operations to construct, parse, and serialize requests in various formats such as JSON and query parameters. Concrete use cases include querying a list of DB proxies with optional filters, paginating through results using a marker, and retrieving details about a specific proxy by name.",
      "description_length": 466,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBProxyStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `InvalidDBProxyStateFault` error in AWS RDS operations. It provides operations for creating, parsing, and converting the error to query parameters, JSON, and back from JSON. Use this module when interacting with AWS RDS APIs that need to signal or handle invalid DB proxy state errors.",
      "description_length": 359,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxyTargetsResponse",
      "library": "aws-rds",
      "description": "This module handles responses from describing RDS DB proxy targets, including target lists and pagination markers. It provides functions to construct, parse, and serialize these responses for use in querying and managing RDS proxy configurations. Use cases include retrieving and processing target group information for RDS database proxies.",
      "description_length": 341,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterBacktrackList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS cluster backtrack records, providing operations to convert, parse, and serialize the data. It works with XML nodes, JSON values, and query parameters, enabling interaction with AWS RDS APIs for cluster backtrack management. Use cases include retrieving and processing backtrack history for RDS clusters from AWS responses.",
      "description_length": 355,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying RDS database cluster snapshot deletion requests. It includes operations to create, serialize, and parse deletion messages using XML, JSON, and query formats. The primary use case is to construct and process API requests for deleting RDS cluster snapshots in AWS.",
      "description_length": 314,
      "index": 226,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBParametersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database parameter groups, including fields like parameter group name, source, filters, and pagination controls. It provides functions to construct, parse, and serialize these queries in formats like JSON and AWS Query. Use this module when interacting with AWS RDS to retrieve or filter parameter group settings programmatically.",
      "description_length": 384,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RemoveRoleFromDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for removing an IAM role from a DB instance, including fields for the DB instance identifier, role ARN, and feature name. It provides functions to construct, parse, and serialize the structure to query or JSON formats. It is used when managing RDS instance integrations with IAM roles, such as detaching a role used for enhanced monitoring or S3 integration.",
      "description_length": 395,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `DBProxyNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to common formats like JSON and query parameters. Use this module when interacting with AWS RDS APIs that need to signal or process missing DB proxy errors.",
      "description_length": 347,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBInstanceAutomatedBackupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying automated database instance backups in AWS RDS. It includes fields to specify a DB instance identifier, filters, pagination settings, and resource IDs, supporting precise backup retrieval. Operations include constructing the query, parsing XML responses, converting to JSON, and building AWS query parameters.",
      "description_length": 359,
      "index": 230,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.AuthorizationQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `AuthorizationQuotaExceededFault` error in AWS RDS operations. It includes functions to construct, parse, and convert the error type to query parameters or JSON format. It is used when managing RDS authorization quotas to signal when the quota has been exceeded.",
      "description_length": 331,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteEventSubscriptionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying an RDS event subscription to delete, containing a single subscription name field. It provides functions to construct the structure, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used when managing RDS event subscriptions, particularly for encoding and decoding deletion requests in API calls.",
      "description_length": 403,
      "index": 232,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS security group responses, including optional pagination markers. It provides operations to construct, serialize, and parse security group messages in XML, JSON, and query formats. Use this module when retrieving or processing lists of RDS security groups from AWS API calls.",
      "description_length": 327,
      "index": 233,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpointNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when a database cluster endpoint is not found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, and back from JSON. Use this module when interacting with AWS RDS APIs to manage and respond to missing database cluster endpoint scenarios.",
      "description_length": 361,
      "index": 234,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of deleting a database snapshot in AWS RDS. It provides constructors, parsing, and serialization functions for a type that optionally contains a `DBSnapshot` record. Use this module when processing responses from RDS snapshot deletion operations, particularly for interacting with XML or JSON APIs.",
      "description_length": 329,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterParameterGroupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS cluster parameter groups, including optional filters, record limits, and pagination markers. It provides functions to construct, serialize, and parse these queries in JSON and XML formats. It is used to interact with AWS RDS APIs for managing and retrieving cluster parameter group configurations.",
      "description_length": 351,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EC2SecurityGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an EC2 security group with optional fields for status, name, ID, and owner ID. It provides functions to construct instances, parse XML input, convert to query parameters, and serialize to and from JSON. Use this module when managing RDS database subnet group configurations that reference EC2 security groups.",
      "description_length": 359,
      "index": 237,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBProxyTargetGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `DBProxyTargetGroupNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query or JSON formats, specifically for signaling that a DB proxy target group was not found. Use this module when interacting with AWS RDS APIs to handle or propagate missing target group errors in a type-safe manner.",
      "description_length": 423,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS database clusters, providing functions to parse, convert to query format, and serialize to and from JSON. It works with XML nodes, JSON values, and AWS query parameters to facilitate interaction with AWS RDS APIs. Use this module when retrieving or processing multiple database cluster records from AWS responses.",
      "description_length": 346,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceFromS3Result",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a DB instance from an S3 source in AWS RDS. It provides constructors, parsers, and serializers for a structure containing an optional DBInstance. Use this module when managing RDS instance restoration workflows that involve S3 data sources.",
      "description_length": 284,
      "index": 240,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterSnapshotAttributeResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying attributes for an RDS DB cluster snapshot. It provides operations to create, parse, and serialize the result, which includes an optional `DBClusterSnapshotAttributesResult`. It is used when updating permissions or metadata attributes on DB cluster snapshots in AWS RDS.",
      "description_length": 313,
      "index": 241,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SubnetList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS subnet objects, providing direct conversions to and from XML, JSON, and query formats. It supports parsing subnet lists from AWS XML responses and constructing JSON representations for API requests. Concrete use cases include processing RDS subnet group responses and formatting subnets for AWS API queries.",
      "description_length": 340,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstance",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS database instance with detailed configuration and status fields, such as instance class, engine version, network settings, and backup policies. It includes functions to construct, parse, and convert instances to and from JSON and query formats. It is used to manage and interact with RDS instances programmatically, particularly in AWS integration scenarios.",
      "description_length": 415,
      "index": 243,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SNSNoAuthorizationFault",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing an empty value, along with functions to construct, parse, and convert it to and from AWS query format and JSON. It is used specifically for handling the absence of authorization data in SNS operations, where no additional information is required or transmitted. The operations support seamless integration with AWS API request and response handling.",
      "description_length": 393,
      "index": 244,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidExportTaskStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid export task state errors in RDS operations. It provides functions to construct, parse, and serialize the error type to query parameters or JSON format. It is used when managing RDS export tasks that are in an unexpected or unsupported state.",
      "description_length": 319,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBInstanceResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of a DB instance deletion operation, containing an optional DBInstance record. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to handle responses from RDS instance deletion requests, allowing inspection of the deleted instance's details if available.",
      "description_length": 386,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.IamRoleNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling IAM role not found errors in AWS RDS operations. It provides functions to construct, parse, and convert error data to query parameters or JSON format. Use this module when interacting with AWS RDS APIs to manage error responses related to missing IAM roles.",
      "description_length": 327,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupNameList",
      "library": "aws-rds",
      "description": "This module handles lists of database security group names in AWS RDS operations. It provides functions to convert, parse, and serialize these lists to and from JSON, query parameters, and XML. Use this module when working with RDS API calls that require or return collections of security group names.",
      "description_length": 301,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterSnapshotAttributeMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying attributes of a DB cluster snapshot in Amazon RDS. It supports operations to add or remove attribute values, working with string identifiers and lists of attribute values. It is used to construct, parse, and serialize API requests for modifying snapshot permissions or metadata.",
      "description_length": 329,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RebootDBInstanceResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of a DB instance reboot operation, containing an optional DBInstance record. It provides functions to construct, parse, and convert the result to various formats including JSON, query parameters, and XML. It is used to handle responses from rebooting a database instance in AWS RDS, enabling integration with API clients and response processing.",
      "description_length": 406,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DownloadDBLogFilePortionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying parameters to download a portion of a database log file from RDS, including the instance identifier, log file name, optional marker, and optional line count. It provides functions to construct, parse, and serialize these parameters into query or JSON formats. It is used when retrieving specific segments of RDS log files programmatically.",
      "description_length": 391,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionConfiguration",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring database options in AWS RDS, including fields like option name, port, version, and security group memberships. It provides functions to construct, parse, and serialize these configurations to and from XML, JSON, and AWS query formats. Concrete use cases include setting up Oracle Enterprise Manager or SQL Server features when creating or modifying RDS instances.",
      "description_length": 416,
      "index": 252,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpoint",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS DB cluster endpoint, with fields for identifiers, endpoint URLs, status, type, and member lists. It provides constructors, JSON and XML parsers, and query builders for interacting with AWS RDS APIs. Concrete use cases include managing custom endpoints, tracking endpoint membership, and retrieving endpoint metadata for database clusters.",
      "description_length": 395,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateEventSubscriptionResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of creating an event subscription in Amazon RDS. It includes functions to construct, serialize, and parse the result, primarily working with XML and JSON formats for API interactions. It is used to handle responses when managing RDS event notifications programmatically.",
      "description_length": 331,
      "index": 254,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DBSnapshot values. It provides functions to convert snapshots to and from XML, JSON, and query formats. Use it when managing RDS instance backups, particularly for serializing snapshot data for API requests or storage.",
      "description_length": 251,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeEventCategoriesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying parameters to retrieve event categories from RDS, including an optional source type and a list of filters. It provides functions to construct, serialize, and parse these parameters in various formats such as JSON and query strings. It is used when interacting with AWS RDS APIs to filter and categorize database events based on resource types and custom filter criteria.",
      "description_length": 422,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstancesOfferingList",
      "library": "aws-rds",
      "description": "This module handles parsing, querying, and JSON serialization of a list of RDS reserved instance offerings. It provides functions to convert between XML, JSON, and internal OCaml representations of these offerings. Use it when retrieving or processing available RDS reserved instance options from AWS APIs.",
      "description_length": 306,
      "index": 257,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ActivityStreamStatus",
      "library": "aws-rds",
      "description": "This module defines an enumeration type `t` representing the status of an RDS activity stream, with values like `Started` and `Stopping`. It provides conversions to and from strings, JSON, and XML, along with helper functions for query parameter serialization. It is used to manage and interpret activity stream state transitions and responses in RDS API interactions.",
      "description_length": 368,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the DB subnet quota exceeded fault in AWS RDS. It provides operations for creating, parsing, and serializing the fault, specifically used when a database subnet group exceeds the allowed number of subnets. The module works with unit values and converts them to AWS query format, JSON, or from JSON, enabling interaction with AWS RDS APIs when managing subnet groups.",
      "description_length": 436,
      "index": 259,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RemoveSourceIdentifierFromSubscriptionResult",
      "library": "aws-rds",
      "description": "This module handles the result of removing a source identifier from an RDS event subscription. It provides constructors, parsing, and serialization functions for a type that contains an optional `EventSubscription`. It is used when managing RDS event notifications, specifically when modifying event subscription sources.",
      "description_length": 321,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the GlobalClusterQuotaExceededFault error in AWS RDS operations. It includes functions to construct, parse, and convert the error type to query parameters, JSON, and back, specifically for managing global cluster quota exceeded scenarios. Use cases include error handling and response processing when interacting with AWS RDS global clusters.",
      "description_length": 407,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeOrderableDBInstanceOptionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying orderable DB instance options, including fields like engine, version, class, and filters. It provides functions to construct, parse, and serialize these queries to JSON or AWS query format. Use this module when retrieving available DB instance configurations from AWS RDS, such as listing supported instance types for a specific engine.",
      "description_length": 386,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AddSourceIdentifierToSubscriptionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for associating a source identifier with an RDS event subscription. It includes operations to construct, serialize, and deserialize the structure in various formats, such as JSON and XML. It is used when managing event notifications in Amazon RDS by linking database sources to existing subscriptions.",
      "description_length": 338,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBLogFilesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database log files, including filters, file name patterns, and size or modification time constraints. It provides functions to construct, parse, and serialize log file query messages for interacting with AWS RDS APIs. Use this module when retrieving specific log files from an RDS instance, such as filtering logs by name or date range.",
      "description_length": 390,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PurchaseReservedDBInstancesOfferingResult",
      "library": "aws-rds",
      "description": "This module handles the result of purchasing a reserved DB instance offering, primarily by encapsulating an optional `ReservedDBInstance` value. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when interacting with AWS RDS reserved instance purchases to retrieve and manipulate the resulting configuration data.",
      "description_length": 387,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxy",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS DB proxy, including fields like proxy name, ARN, status, VPC configuration, authentication settings, and metadata. It provides functions to construct, parse, and serialize DB proxy instances for interacting with AWS RDS APIs. Concrete use cases include managing DB proxy configurations, retrieving proxy details from API responses, and submitting proxy updates in JSON or query format.",
      "description_length": 442,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.PendingMaintenanceAction",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a pending maintenance action with optional fields for action details, dates, status, and descriptions. It provides functions to construct, parse, and convert the structure to and from JSON, query parameters, and XML. It is used to manage and track scheduled maintenance actions for database resources in AWS RDS.",
      "description_length": 362,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying parameters to delete an RDS database instance, including the instance identifier, options for snapshots, and automated backup deletion. It provides functions to construct, parse, and serialize the structure to different formats like JSON and query strings. It is used when issuing a delete request to AWS RDS, ensuring the correct parameters are sent for database instance termination.",
      "description_length": 437,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterEndpointMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for modifying a DB cluster endpoint in Amazon RDS, including fields for the endpoint identifier, type, static members, and excluded members. It provides functions to construct, parse, and serialize the record to query parameters or JSON, enabling configuration updates to RDS cluster endpoints. It is used when adjusting endpoint settings for Aurora clusters via the AWS SDK.",
      "description_length": 409,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterEndpointMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for configuring a new RDS database cluster endpoint, including required identifiers, endpoint type, and optional member lists and tags. It provides functions to construct, parse, and serialize endpoint configurations for use with AWS RDS operations. Use this module when creating or managing custom endpoints for RDS clusters, particularly for specifying static or excluded members and associated metadata.",
      "description_length": 440,
      "index": 270,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PendingMaintenanceActionsMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing pending maintenance actions for AWS RDS instances, including optional pagination markers. It provides functions to construct, parse, and serialize these messages to and from JSON, query parameters, and XML. Use this module when retrieving or processing lists of pending maintenance actions from RDS resources, especially when handling paginated responses.",
      "description_length": 404,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AvailabilityZones",
      "library": "aws-rds",
      "description": "This module handles list operations for availability zones in AWS RDS, providing functions to parse, convert, and serialize string lists. It works with `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t` for data interchange. Use this module when managing availability zone configurations in RDS instances, such as serializing zone lists for API requests or parsing responses.",
      "description_length": 372,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.TargetGroupList",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of DB proxy target groups. It provides functions to convert between XML, JSON, and query string representations of the list. Use this module when working with AWS RDS proxy target group lists in API requests and responses.",
      "description_length": 305,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterParametersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS cluster parameter groups, including fields like parameter group name, source, filters, and pagination controls. It provides functions to construct, parse, and serialize these queries to JSON or AWS Query format. Use this module when retrieving and filtering parameter settings for an RDS cluster from the AWS API.",
      "description_length": 367,
      "index": 274,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateDBInstanceResult",
      "library": "aws-rds",
      "description": "This module defines a single data type representing the result of creating a database instance, containing an optional DBInstance record. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. It is used specifically when handling responses from RDS API calls that create database instances.",
      "description_length": 344,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DoubleRangeList",
      "library": "aws-rds",
      "description": "This module handles lists of double ranges in the context of AWS RDS operations. It provides functions to convert these lists to and from JSON and query string formats, and to parse them from XML data. It is used when working with RDS API requests and responses that involve numeric range data, such as engine version or parameter constraints.",
      "description_length": 343,
      "index": 276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeReservedDBInstancesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying AWS RDS reserved database instances, supporting filtering and pagination. It includes functions to construct, parse, and serialize the query parameters, working with types like strings, integers, booleans, and custom filter lists. Concrete use cases include retrieving specific reserved instances based on class, duration, product description, or lease ID, and integrating with AWS SDK operations to manage database reservations.",
      "description_length": 479,
      "index": 277,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a database subnet group, including fields like name, description, VPC ID, status, subnets, and ARN. It provides operations to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Concrete use cases include managing RDS subnet configurations when creating or modifying database instances in AWS.",
      "description_length": 379,
      "index": 278,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZoneNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the \"CustomAvailabilityZoneNotFoundFault\" error in AWS RDS operations. It provides functions to create, parse, and convert the error type to JSON or query string formats. It is used when interacting with AWS RDS APIs to manage custom availability zones, specifically to handle cases where a requested custom availability zone does not exist.",
      "description_length": 406,
      "index": 279,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupDetails",
      "library": "aws-rds",
      "description": "This module handles the structure and conversion of database parameter group details, including parameters and an optional marker for pagination. It provides operations to create, parse, and serialize these details to and from JSON, query strings, and XML. Use this module when retrieving or managing RDS parameter groups, particularly for handling API responses with paginated results.",
      "description_length": 386,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSubnetGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of creating a DB subnet group in AWS RDS, primarily by encapsulating an optional `DBSubnetGroup` value. It provides functions to construct, parse, and serialize the result in various formats such as JSON, query parameters, and XML. Use this module when managing subnet group creation responses from AWS RDS, particularly for interacting with the resulting subnet group metadata.",
      "description_length": 409,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBClusterSnapshotStateFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the invalid DB cluster snapshot state fault in AWS RDS operations. It works with unit type values and provides operations for constructing, parsing, and serializing the fault to query parameters or JSON. Concrete use cases include error handling and response processing when interacting with AWS RDS APIs related to database cluster snapshots.",
      "description_length": 408,
      "index": 282,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceFromS3Message",
      "library": "aws-rds",
      "description": "This module defines a data structure for restoring a database instance from an S3 bucket, including configuration options like storage, security groups, backup settings, and engine parameters. It provides functions to construct, parse, and serialize this structure for use in API requests. Concrete use cases include initiating a database restore operation from S3 data, configuring performance insights, and setting up encrypted storage with KMS keys.",
      "description_length": 452,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBProxyResponse",
      "library": "aws-rds",
      "description": "This module defines a response structure containing an optional DBProxy object, along with functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It works directly with DBProxy data types and is used in handling responses from RDS proxy creation operations. Concrete use cases include processing AWS RDS API responses when creating or managing database proxies.",
      "description_length": 407,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBProxyTargetGroupResponse",
      "library": "aws-rds",
      "description": "This module handles responses from modifying a DB proxy target group in AWS RDS. It provides functions to construct, parse, and serialize a response containing an optional DB proxy target group. Use this module when processing the output of a target group modification operation, particularly when working with XML, JSON, or query parameter formats.",
      "description_length": 349,
      "index": 285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying parameters to delete a database cluster, including the cluster identifier, options for skipping a final snapshot, and a final snapshot identifier. It provides functions to construct, parse, and serialize the structure to query parameters or JSON format. Use this module when issuing deletion requests to AWS RDS to configure whether and how a final snapshot is handled.",
      "description_length": 421,
      "index": 286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RemoveRoleFromDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for removing an IAM role from an RDS DB cluster, including the cluster identifier, role ARN, and an optional feature name. It provides functions to construct, serialize, and parse this structure for use in API requests. Concrete use cases include managing IAM integrations with RDS clusters, such as detaching roles used for Aurora features.",
      "description_length": 378,
      "index": 287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAutomatedBackupQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition when the automated backup quota is exceeded for a database instance. It includes operations to create, parse, and convert the error to query or JSON formats. Use this module to manage and respond to backup quota limits in RDS instance management workflows.",
      "description_length": 341,
      "index": 288,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ExportTasksList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS export tasks, providing direct conversions to and from JSON and query formats. It includes parsing from XML nodes and JSON input into typed export task lists. Use this module when retrieving or processing multiple RDS export task records from AWS API responses.",
      "description_length": 294,
      "index": 289,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterSnapshotAttributesResult",
      "library": "aws-rds",
      "description": "This module handles the result of describing RDS cluster snapshot attributes. It provides operations to create, parse, and serialize the result, which includes optional cluster snapshot attribute data. It is used when managing RDS cluster snapshots, particularly for retrieving and modifying their access control attributes.",
      "description_length": 324,
      "index": 290,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.AddRoleToDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for associating an IAM role with a DB instance, including fields for the DB instance identifier, role ARN, and feature name. It provides functions to construct the structure, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used when configuring IAM role-based access for RDS features like enhanced monitoring or automated backups.",
      "description_length": 424,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceFromDBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for configuring RDS instance restoration from a snapshot. It includes functions to construct, parse, and serialize the configuration, supporting optional settings like instance class, network placement, security groups, and logging. Use this module when initiating RDS instance recovery with custom configurations from an existing snapshot.",
      "description_length": 389,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventSubscription",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing RDS event subscriptions, including fields like customer ID, SNS topic ARN, status, and associated event sources and categories. It provides operations to construct, serialize, and deserialize event subscription data for interacting with AWS RDS APIs. Use cases include managing event notifications for RDS instances and processing event subscription responses from AWS.",
      "description_length": 423,
      "index": 293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.KeyList",
      "library": "aws-rds",
      "description": "This module handles lists of string-based encryption keys in AWS RDS operations. It provides functions to convert key lists to and from JSON and query string formats, and to parse them from XML responses. It is used when managing key-based access control or encryption settings in RDS instances.",
      "description_length": 295,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the DBProxyQuotaExceededFault error in AWS RDS operations. It includes functions for creating, parsing, and converting the error type to query parameters, JSON, and back. Use this module when interacting with AWS RDS APIs to manage and respond to quota exceeded errors related to database proxies.",
      "description_length": 362,
      "index": 295,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.IPRange",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing IP range information, including status and CIDR IP fields. It provides functions to construct, parse, and convert IP range data to and from query parameters, JSON, and XML formats. Concrete use cases include managing IP whitelists for database access control and serializing IP range configurations for API requests.",
      "description_length": 370,
      "index": 296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyOptionGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for copying an RDS option group, including source and target identifiers, a description, and optional tags. It provides functions to construct, serialize, and deserialize this structure for use in API requests. Concrete use cases include replicating database option configurations across AWS regions or accounts.",
      "description_length": 349,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterOptionGroupMemberships",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and transformation of RDS DBClusterOptionGroupMembership data. It operates on lists of DBClusterOptionGroupStatus values, converting them to and from XML, JSON, and query formats. It is used when managing RDS cluster option group associations, particularly during API requests and responses involving option group membership status.",
      "description_length": 388,
      "index": 298,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZoneAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the \"CustomAvailabilityZoneAlreadyExists\" error in RDS operations. It works with unit type values and provides functions to convert error data to query parameters, JSON, and back from JSON. It is used when managing custom availability zones to detect and handle duplicate creation attempts.",
      "description_length": 355,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling cases where a database cluster snapshot is not found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, and back from JSON. Use this when managing RDS snapshot errors in API responses or client requests.",
      "description_length": 318,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateGlobalClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring a new global database cluster in AWS RDS, including optional settings like engine version, encryption, and deletion protection. It provides functions to construct, serialize, and parse cluster configuration data for use with AWS RDS API operations. Use this module when creating a global cluster by supplying source cluster details and desired configuration parameters.",
      "description_length": 422,
      "index": 301,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBLogFilesDetails",
      "library": "aws-rds",
      "description": "This module defines a data structure for holding details about database log files, including optional fields for the log file name, last written timestamp, and file size. It provides functions to construct instances, parse XML input, convert to query format, and serialize to and from JSON. It is used when retrieving metadata about RDS database log files through the AWS API.",
      "description_length": 376,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBInstancesMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS database instances with optional filters, identifiers, and pagination. It supports constructing, parsing, and converting query parameters to JSON or query string formats. Concrete use cases include retrieving specific RDS instances by ID, applying tag-based filters, and handling paginated results from the AWS RDS API.",
      "description_length": 373,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StopActivityStreamResponse",
      "library": "aws-rds",
      "description": "This module defines a response structure for stopping an activity stream, including optional fields for KMS key ID, Kinesis stream name, and activity stream status. It provides functions to construct, parse, and serialize the response in various formats such as JSON and AWS query format. It is used when handling the output of an RDS activity stream stop operation, enabling downstream processing of stream termination details.",
      "description_length": 428,
      "index": 304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterBacktrack",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a DB cluster backtrack with optional fields for identifiers, timestamps, and status. It provides functions to construct, parse, and convert the structure to and from query parameters, JSON, and XML. Concrete use cases include managing and tracking the state of RDS cluster backtracking operations in AWS.",
      "description_length": 354,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOptionsMessage",
      "library": "aws-rds",
      "description": "This module handles structured data for RDS option group configurations, including pagination via an optional marker. It provides operations to construct, serialize, and parse option group messages in both JSON and query formats. Concrete use cases include processing responses from RDS API calls that list available option group options.",
      "description_length": 338,
      "index": 306,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CancelExportTaskMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type representing a message to cancel an RDS export task, containing an export task identifier. It provides functions to construct the message, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used when interacting with AWS RDS to programmatically cancel an ongoing database export operation.",
      "description_length": 382,
      "index": 307,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition for exceeding RDS security group quotas. It provides operations to construct, parse, and serialize the error in various formats, including JSON and AWS query format. Use this module to handle quota exceeded faults in RDS security group management workflows.",
      "description_length": 330,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyTargetGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a DB proxy target group with fields for proxy name, target group name, ARN, status, connection pool configuration, and timestamps. It provides functions to construct, parse, and serialize instances for use in API requests and responses. Concrete use cases include managing RDS proxy target groups in AWS infrastructure as part of database connection handling and scaling.",
      "description_length": 421,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for configuring a new RDS database cluster. It includes fields for specifying cluster properties such as identifiers, network settings, security groups, engine configuration, backup policies, and integration options. The module supports creating, parsing, and serializing cluster configurations for use in AWS RDS API requests.",
      "description_length": 376,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DownloadDBLogFilePortionDetails",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling responses from downloading portions of a database log file in AWS RDS. It includes fields for the log data, a marker for pagination, and a flag indicating if more data is available. Operations include creating instances, parsing XML responses, converting to query parameters, and serializing to and from JSON.",
      "description_length": 359,
      "index": 311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeregisterDBProxyTargetsRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for deregistering DB proxy targets, including fields for the proxy name, target group name, and lists of DB instance and cluster identifiers. It provides functions to construct, parse, and serialize these requests in various formats, including JSON and query parameters. Concrete use cases include managing RDS proxy target groups by removing specific instances or clusters from a target group.",
      "description_length": 434,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CertificateNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling certificate not found errors. It provides operations to convert unit values to query parameters, JSON objects, and back, as well as parsing and construction functions. It is used when interacting with AWS RDS APIs to represent and process errors related to missing certificates.",
      "description_length": 348,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition for exceeding a database cluster quota. It provides functions to construct, parse, and convert the error to query parameters or JSON format. Use this module to handle quota exceeded errors in RDS cluster management operations.",
      "description_length": 299,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a message to delete a database parameter group in AWS RDS. It includes operations to construct the message, parse it from XML, convert it to query format or JSON, and reconstruct it from JSON. It is used when issuing a delete parameter group command through the AWS RDS API.",
      "description_length": 324,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionNamesList",
      "library": "aws-rds",
      "description": "This module handles lists of string-based option names, primarily for interacting with AWS RDS APIs. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. Use this module when working with RDS API operations that require specifying multiple option names, such as describing or modifying database options.",
      "description_length": 369,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpointList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DBClusterEndpoint values, providing direct conversions to and from XML, JSON, and query formats. It supports parsing endpoint lists from AWS XML responses and serializing them for requests or storage. Use this module when working with AWS RDS cluster endpoint collections in API interactions or configuration management.",
      "description_length": 353,
      "index": 317,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceStatusInfoList",
      "library": "aws-rds",
      "description": "This module handles lists of DB instance status information, providing functions to parse, convert to query format, serialize to JSON, and deserialize from JSON. It works with XML nodes, JSON values, and AWS query parameters. Use this module when interacting with AWS RDS APIs to manage database instance status details programmatically.",
      "description_length": 337,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventCategoriesMessage",
      "library": "aws-rds",
      "description": "This module handles RDS event categories data by providing constructors, parsers, and serializers. It works with XML, JSON, and query parameter formats to facilitate interaction with AWS RDS event category mappings. Concrete use cases include processing RDS event category responses from AWS API calls and constructing requests for event category configuration.",
      "description_length": 361,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBSubnetGroupStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid database subnet group state errors. It provides operations for creating, parsing, and converting the unit value to query parameters, JSON, and back from JSON. Use this module when interacting with AWS RDS APIs to manage error states related to database subnet groups.",
      "description_length": 345,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateOptionGroupResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of creating an option group in Amazon RDS, containing an optional `OptionGroup` record. It provides functions to construct, parse, and serialize this result in various formats including JSON, query parameters, and XML nodes. It is used when handling responses from RDS API calls that create option groups, allowing extraction and manipulation of the resulting option group data.",
      "description_length": 439,
      "index": 321,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.StartDBInstanceResult",
      "library": "aws-rds",
      "description": "This module handles the result of starting a DB instance in AWS RDS, primarily by encapsulating an optional `DBInstance` record. It provides functions to construct, parse, and convert the result to and from XML, JSON, and query formats. Use this module when interacting with RDS start instance API calls to manage response data.",
      "description_length": 328,
      "index": 322,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ExportTasksMessage",
      "library": "aws-rds",
      "description": "This module handles RDS export task responses, providing functions to construct, parse, and serialize messages containing a list of export tasks and an optional pagination marker. It works with XML, JSON, and AWS query formats for use in API interactions. Concrete use cases include processing RDS export task listings from AWS API calls and converting them for further processing or display.",
      "description_length": 392,
      "index": 323,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SourceRegion",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a source region in RDS, with optional fields for region name, endpoint, and status. It provides functions to construct, parse, and convert the structure to and from JSON, query parameters, and XML. It is used when managing cross-region RDS operations, such as copying snapshots or tracking source region metadata.",
      "description_length": 363,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshot",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS database snapshot with detailed metadata such as identifiers, timestamps, storage, and encryption settings. It includes functions to construct, parse, and convert snapshot data to and from JSON and query formats. Concrete use cases include managing snapshot backups, restoring databases, and querying snapshot properties for monitoring or automation tasks.",
      "description_length": 413,
      "index": 325,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PromoteReadReplicaDBClusterResult",
      "library": "aws-rds",
      "description": "This module handles the result of promoting a read replica DB cluster in AWS RDS. It provides constructors, parsing, and serialization functions for a type that optionally contains a DBCluster record. Use this module when processing responses from the RDS API after promoting a read replica cluster.",
      "description_length": 299,
      "index": 326,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterRoleNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the `DBClusterRoleNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query parameters or JSON format. Use this module when interacting with AWS RDS APIs that require error handling for missing IAM roles in database clusters.",
      "description_length": 355,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAutomatedBackupList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS database instance automated backups, providing operations to convert, parse, and serialize backup data. It works with XML nodes, JSON values, and query parameters, enabling interaction with AWS RDS APIs for backup management. Use cases include retrieving backup lists from API responses, converting them to JSON for further processing, or preparing backup data for API requests.",
      "description_length": 411,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionsConflictsWith",
      "library": "aws-rds",
      "description": "Handles parsing and serializing lists of string options for RDS operations, specifically for conflicts with database option groups. Works with XML nodes, query parameters, and JSON values. Used when managing RDS option group configurations to ensure compatibility constraints are correctly represented across different data formats.",
      "description_length": 332,
      "index": 329,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.EventSubscriptionQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the \"EventSubscriptionQuotaExceededFault\" error in AWS RDS. It includes operations for constructing, parsing, and converting the error to query or JSON formats. The module works with unit type values, representing the presence of this specific error condition.",
      "description_length": 325,
      "index": 330,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.Event",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing RDS event data, including fields like source identifier, event type, message, categories, timestamp, and ARN. It provides functions to construct, parse, and serialize event records to and from XML, JSON, and query formats. Concrete use cases include processing RDS event notifications from AWS and formatting them for logging, monitoring, or further analysis.",
      "description_length": 413,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StorageTypeNotSupportedFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error case where a specified storage type is not supported. It includes functions to construct, parse, and convert the error to query parameters or JSON format. Use this module when handling API responses that indicate unsupported storage configurations in database service operations.",
      "description_length": 342,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteCustomAvailabilityZoneMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying a custom availability zone to delete by its ID. It includes functions to create, parse, and convert the structure to and from query parameters and JSON. It is used when making API requests to remove a custom availability zone in RDS.",
      "description_length": 285,
      "index": 333,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.StartActivityStreamRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for starting an activity stream on an RDS resource. It includes fields for the resource ARN, activity stream mode, KMS key ID, and an optional flag to apply changes immediately. Operations allow creating, parsing, and converting the request to query or JSON formats for API interactions.",
      "description_length": 327,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidVPCNetworkStateFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an invalid VPC network state error in RDS operations. It provides functions to construct, parse, and serialize the error state to query parameters or JSON format. It is used specifically for handling and propagating VPC-related error conditions in RDS service interactions.",
      "description_length": 327,
      "index": 335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ApplyPendingMaintenanceActionResult",
      "library": "aws-rds",
      "description": "This module handles the result of applying pending maintenance actions on RDS resources. It includes operations to create, parse, and serialize a result that may contain information about remaining pending actions. It works directly with XML, JSON, and query string formats for integration with AWS RDS APIs.",
      "description_length": 308,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidEventSubscriptionStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid event subscription state errors. It provides operations to construct, parse, and convert values to query parameters, JSON, and back from JSON. Use this module when managing event subscription states in RDS that are in an invalid configuration.",
      "description_length": 321,
      "index": 337,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.StartDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a message to start a database instance in AWS RDS. It includes operations to construct the message, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. It works with string identifiers for database instances and is used specifically to format and handle start instance requests in AWS RDS interactions.",
      "description_length": 390,
      "index": 338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBEngineVersion",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a database engine version with detailed metadata, including engine name, version, parameter group family, character set support, logging capabilities, and feature flags. It provides functions to construct, parse, and serialize instances for use in API requests and responses, particularly when managing RDS engine versions in AWS. Concrete use cases include querying available engine versions, configuring database instances, and validating upgrade paths.",
      "description_length": 505,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InsufficientDBClusterCapacityFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where a database cluster lacks sufficient capacity. It includes operations to construct, parse, and convert the error to query or JSON formats, primarily used in handling and responding to RDS API error responses. The module is utilized when interacting with AWS RDS services to communicate capacity-related failure states in a type-safe manner.",
      "description_length": 418,
      "index": 340,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyGlobalClusterResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of modifying a global database cluster in AWS RDS. It includes functions to construct, parse, and serialize the result, which contains an optional global cluster object. It is used to handle responses from the RDS API when updating global cluster configurations, enabling further inspection or processing of the modified cluster data.",
      "description_length": 395,
      "index": 341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteOptionGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying an RDS option group deletion request. It includes operations to create, serialize, and parse the request, primarily working with string and JSON data types. It is used to construct and process API calls to delete an option group in Amazon RDS.",
      "description_length": 295,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CustomAvailabilityZoneMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a message containing custom availability zones in Amazon RDS. It provides operations to create, parse, and serialize messages with optional pagination markers and lists of custom availability zones. Use cases include processing responses from RDS API calls that list custom availability zones, supporting both XML and JSON formats.",
      "description_length": 380,
      "index": 343,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBInstanceAutomatedBackupMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type `t` containing a `dbi_resource_id` string and provides functions to construct, parse, and convert instances of this type to and from XML, JSON, and query formats. It is used specifically for handling messages related to deleting automated RDS instance backups. The module supports operations necessary for interacting with AWS RDS APIs when managing backup deletion through structured data exchange.",
      "description_length": 438,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InsufficientDBInstanceCapacityFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where a DB instance lacks sufficient capacity. It provides functions to construct, parse, and convert the error to query parameters or JSON format. Use this module when handling or propagating capacity-related errors in RDS instance operations.",
      "description_length": 317,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterBacktracksMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS cluster backtracks, including fields for cluster identifier, optional backtrack ID, filters, record limits, and pagination markers. It provides functions to construct, parse, and serialize these queries in JSON, query string, and XML formats. It is used to retrieve information about specific backtracks of an RDS cluster.",
      "description_length": 376,
      "index": 346,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceStatusInfo",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing the status information of a database instance, including fields like status type, normalcy flag, status message, and additional details. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include handling RDS instance status responses from AWS APIs and serializing them for logging or further processing.",
      "description_length": 437,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StorageQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `StorageQuotaExceededFault` error in AWS RDS operations. It includes functions for creating, parsing, and converting the error to query or JSON formats, primarily working with unit type and JSON-like structures. It is used when interacting with AWS RDS APIs to manage and respond to storage quota exceeded error conditions programmatically.",
      "description_length": 409,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.TagListMessage",
      "library": "aws-rds",
      "description": "This module handles the serialization and deserialization of RDS tag list messages. It works with XML nodes, JSON values, and AWS query parameters to convert between these formats and an internal OCaml type containing a `TagList.t`. It is used when interacting with AWS RDS APIs that require or return tag data, such as listing or applying tags to RDS instances.",
      "description_length": 362,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ResetDBParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for resetting database parameter groups in AWS RDS. It includes operations to create, parse, and serialize messages containing the parameter group name, a flag to reset all parameters, and a list of specific parameters to reset. It works directly with string, boolean, and custom parameter list types, and is used when issuing RDS API commands to reset database configurations.",
      "description_length": 414,
      "index": 350,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a message containing reserved database instances, including optional pagination markers. It provides operations for constructing, parsing, and serializing the message to and from XML, JSON, and query formats. Concrete use cases include processing responses from AWS RDS API calls that list reserved instances, particularly when handling paginated results.",
      "description_length": 404,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a message containing a list of RDS database instances, including an optional pagination marker. It provides functions to construct, parse, and serialize this data to and from XML, JSON, and AWS query formats. Use this module when processing responses from RDS API calls that return database instance lists with pagination support.",
      "description_length": 379,
      "index": 352,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstanceList",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of a list of reserved database instance records. It provides functions to convert between XML, JSON, and internal data representations, as well as constructing and normalizing these lists. It is used when interacting with AWS RDS APIs to manage or retrieve reserved instance information.",
      "description_length": 360,
      "index": 353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.FilterValueList",
      "library": "aws-rds",
      "description": "This module handles lists of string values used for filtering in RDS operations. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with RDS API calls that require multiple string filters, such as describing DB instances or snapshots.",
      "description_length": 326,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RevokeDBSecurityGroupIngressMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for revoking ingress rules from an RDS database security group. It includes functions to construct, parse, and serialize the structure to different formats like JSON and query parameters. It is used when modifying security group rules by specifying either a CIDR IP or an EC2 security group.",
      "description_length": 328,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBSnapshotsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying parameters to describe RDS database snapshots, including optional filters, identifiers, and pagination settings. It provides functions to construct, parse, and serialize these parameters for use in API requests. The module supports operations like converting to JSON or query string formats for integration with AWS SDK components.",
      "description_length": 383,
      "index": 356,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the DBSubnetGroupNotFoundFault error in AWS RDS operations. It provides functions to construct, parse, and convert the error to query parameters or JSON format. Use this module when interacting with AWS RDS APIs to handle cases where a requested DB subnet group does not exist.",
      "description_length": 347,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StopActivityStreamRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for stopping an activity stream on a database resource. It includes operations to create, parse, and serialize the request, supporting interactions with database activity monitoring configurations. The module works with XML, JSON, and query string formats for request transmission.",
      "description_length": 321,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterResult",
      "library": "aws-rds",
      "description": "This module handles the result of creating a database cluster in AWS RDS. It provides functions to construct, parse, and convert the result to and from JSON and query formats. It works with the `DBCluster` type to represent the newly created cluster data.",
      "description_length": 255,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ResetDBClusterParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for resetting database cluster parameter groups in AWS RDS, including fields for the parameter group name, a flag to reset all parameters, and a list of specific parameters to reset. It provides functions to construct, parse, and serialize this structure to support API interactions. Use cases include configuring and resetting RDS cluster parameters via AWS SDK calls.",
      "description_length": 406,
      "index": 360,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ValidStorageOptions",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying valid storage configurations, including storage type, size ranges, IOPS settings, and autoscaling support. It provides functions to construct, parse, and serialize these configurations for use in API requests or configuration validation. Use cases include defining acceptable storage parameters when provisioning or modifying database instances.",
      "description_length": 397,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an RDS database parameter group, consisting of a parameter group name and a list of parameters. It provides functions to construct, parse, and serialize the structure to query or JSON formats. It is used when updating parameter settings in an RDS instance via the AWS API.",
      "description_length": 323,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where the quota for database parameter groups has been exceeded. It provides functions to construct, parse, and convert the error to query or JSON formats, typically used in handling AWS RDS service responses. The module is used to signal and process quota limit errors during RDS configuration operations.",
      "description_length": 379,
      "index": 363,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SnapshotQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `SnapshotQuotaExceededFault` error in AWS RDS operations. It includes functions to construct, parse, and convert the error to query or JSON formats, primarily working with unit type to represent the absence of additional data. It is used when managing RDS snapshots to signal that the snapshot limit has been exceeded.",
      "description_length": 387,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBClusterEndpointsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS cluster endpoints with optional filters, identifiers, and pagination controls. It supports operations to construct, serialize, and parse endpoint query messages using JSON, XML, or AWS query format. Concrete use cases include retrieving specific RDS cluster endpoints by identifier, applying filters to narrow results, and handling paginated responses from the RDS API.",
      "description_length": 423,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBSubnetGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a single type `t` representing a message to delete a DB subnet group, containing the subnet group name. It provides functions to construct, parse, and serialize the message to query parameters or JSON, and includes a function to create an instance from JSON input. Concrete use cases include sending deletion requests to AWS RDS and handling corresponding API responses.",
      "description_length": 390,
      "index": 366,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RebootDBInstanceMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for initiating a database instance reboot in AWS RDS, containing the instance identifier and an optional force failover flag. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when preparing or handling reboot commands for RDS instances, particularly when managing failover behavior during reboots.",
      "description_length": 412,
      "index": 367,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InstanceQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an RDS instance quota exceeded error. It provides functions to construct, parse, and serialize the error in various formats, including JSON and AWS query format. Use this module to handle and propagate instance quota exceeded faults in RDS operations.",
      "description_length": 305,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterList",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of lists of global cluster data structures. It provides functions to convert between XML, JSON, and query parameter formats, specifically for working with AWS RDS global cluster lists in API requests and responses. Use this module when interacting with AWS RDS multi-region cluster management operations that require structured data exchange.",
      "description_length": 415,
      "index": 369,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyCurrentDBClusterCapacityMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying the capacity of a DB cluster, including fields for the cluster identifier, desired capacity, timeout settings, and action on timeout. It provides functions to construct, parse, and serialize this structure to support interactions with AWS RDS services. Use this module when adjusting DB cluster capacity programmatically, particularly when specifying timeout behavior and target capacity.",
      "description_length": 439,
      "index": 370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteCustomAvailabilityZoneResult",
      "library": "aws-rds",
      "description": "This module defines a result type for deleting a custom availability zone, containing an optional `CustomAvailabilityZone` value. It provides functions to construct, parse, and serialize the result in various formats including JSON, query parameters, and XML. Use this module when handling responses from RDS API calls that delete custom availability zones, to extract and manipulate the returned data.",
      "description_length": 402,
      "index": 371,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteInstallationMediaMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type representing a message to delete RDS installation media by its ID. It provides functions to construct, parse, and serialize the message in various formats including JSON, query parameters, and XML. It is used specifically for interacting with the RDS service to remove installation media resources.",
      "description_length": 337,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSubnetGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying a database subnet group in AWS RDS, including the subnet group name, an optional description, and a list of subnet IDs. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used when updating the configuration of a DB subnet group, such as changing associated subnets or its description.",
      "description_length": 404,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeOptionGroupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring and sending RDS option group description requests. It includes fields for filtering by group name, engine, version, and pagination parameters, along with functions to construct, serialize, and parse these requests in JSON, query string, and XML formats. It is used to retrieve information about RDS option groups matching specific criteria.",
      "description_length": 393,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreWindow",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a restore window with optional start and end times. It provides functions to create, parse, and convert the structure to and from XML, JSON, and query formats. It is used to specify time ranges for database restore operations in RDS.",
      "description_length": 283,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InstallationMediaList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS installation media entries, providing functions to parse XML input into typed lists, convert lists to query parameters, and serialize or deserialize lists to and from JSON. It works with `InstallationMedia.t` records, organizing them in standard OCaml lists. Concrete use cases include processing batch responses from RDS API calls that involve multiple installation media items, and constructing requests that require multiple installation media entries.",
      "description_length": 488,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CloudwatchLogsExportConfiguration",
      "library": "aws-rds",
      "description": "This module defines a configuration structure for enabling and disabling log types in a logging system. It provides functions to create, parse, and convert the configuration to various formats like JSON and query parameters. It works with log type lists to specify which logs to include or exclude in exports.",
      "description_length": 309,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the absence of a global cluster in RDS operations. It includes functions for creating a unit value, parsing optional unit values, and converting unit values to query parameters, JSON, and back from JSON. It is used specifically to represent and handle the case where a global cluster is not found during RDS API interactions.",
      "description_length": 395,
      "index": 378,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroupsMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS cluster parameter groups, including optional pagination markers. It provides operations to construct, parse, and serialize the data to query parameters or JSON, as well as parsing from XML and JSON input. Concrete use cases include processing AWS RDS API responses for cluster parameter group listings and handling paginated results.",
      "description_length": 386,
      "index": 379,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpointAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error condition where a DB cluster endpoint already exists. It provides operations to create, parse, and convert the error to query or JSON formats, specifically for use in API response handling. The module works with unit type values, representing the presence of this specific error condition.",
      "description_length": 364,
      "index": 380,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.VpcSecurityGroupIdList",
      "library": "aws-rds",
      "description": "This module handles lists of VPC security group IDs for RDS operations. It provides functions to convert, parse, and serialize these lists to and from JSON, query parameters, and XML. Use this module when working with RDS API calls that require multiple VPC security group IDs as input.",
      "description_length": 286,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.TargetList",
      "library": "aws-rds",
      "description": "This module handles lists of DB proxy targets in AWS RDS operations. It provides functions to parse, convert to query format, and serialize/deserialize to and from JSON and XML. Use this module when managing proxy target configurations or interacting with RDS proxy APIs that require target list inputs or outputs.",
      "description_length": 314,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying a DB snapshot, including fields for the snapshot identifier, engine version, and option group name. It provides functions to construct, parse, and serialize the structure to query parameters or JSON, supporting interactions with RDS services. Use cases include updating snapshot metadata and configuring database engine settings during snapshot modification.",
      "description_length": 409,
      "index": 383,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOptionsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option group options, providing functions to parse XML input into option lists, convert option lists to query parameters, and serialize or deserialize them to and from JSON. It works directly with lists of `OptionGroupOption.t` values. Use this module when managing RDS database option groups, such as when creating or modifying options for Oracle or MySQL engines.",
      "description_length": 398,
      "index": 384,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ValidDBInstanceModificationsMessage",
      "library": "aws-rds",
      "description": "This module represents the valid modifications that can be made to a DB instance, specifically storage and processor features. It provides functions to construct, parse, and serialize these modifications for use in API requests and responses. The module works directly with XML and JSON data formats to facilitate communication with AWS RDS services.",
      "description_length": 350,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateGlobalClusterResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of creating a global database cluster in Amazon RDS. It includes functions to construct, parse, and serialize the result, which contains an optional global cluster object. It is used to handle responses from RDS API calls that create global clusters, enabling integration with JSON and XML processing in AWS tooling.",
      "description_length": 377,
      "index": 386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StopDBInstanceResult",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the result of stopping a database instance, containing an optional `DBInstance` record. It provides functions to construct, parse, and convert the result to various formats including JSON, query parameters, and XML. It is used to handle responses from the RDS service when stopping a database instance, allowing easy integration with AWS API requests and responses.",
      "description_length": 415,
      "index": 387,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAutomatedBackupNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a singleton error type `t` representing the absence of an automated database instance backup. It includes operations to construct, parse, and convert the error to query parameters or JSON format. It is used when handling API responses that indicate a missing automated backup in database management workflows.",
      "description_length": 329,
      "index": 388,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBParameterGroupStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid DB parameter group state errors. It provides operations for parsing, converting to query format, and serializing to and from JSON. Use this module when interacting with AWS RDS error responses that indicate an invalid DB parameter group state.",
      "description_length": 321,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.VpnDetails",
      "library": "aws-rds",
      "description": "This module defines a data structure for capturing detailed information about a virtual private network (VPN) associated with an RDS instance. It includes fields such as the VPN ID, tunnel originator IP, gateway IP, pre-shared key, name, and state, all represented as optional strings. The module provides functions to construct, parse from XML, convert to query parameters, and serialize to and from JSON, enabling seamless integration with AWS RDS API operations.",
      "description_length": 465,
      "index": 390,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SupportedTimezonesList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS-supported timezones, providing functions to parse, convert to query format, and serialize to and from JSON. It works with lists of `Timezone.t` records, which represent individual timezone data. Use this module when interacting with RDS API operations that require listing or configuring supported timezones, such as retrieving or setting database instance timezone settings.",
      "description_length": 408,
      "index": 391,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBProxyStatus",
      "library": "aws-rds",
      "description": "This module defines an enumerated type representing the possible status states of a DB proxy, such as `Available`, `Creating`, and `Deleting`. It includes functions to convert between string representations and the enumerated values, as well as serialization and deserialization routines for JSON, XML, and query parameters. These capabilities are used when interacting with AWS RDS APIs to interpret and construct DB proxy status information in requests and responses.",
      "description_length": 469,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupStatus",
      "library": "aws-rds",
      "description": "This module defines a data structure representing the status of a database parameter group, with fields for the parameter group name and apply status. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include managing RDS instance parameter group configurations during deployment or monitoring.",
      "description_length": 374,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.WriteForwardingStatus",
      "library": "aws-rds",
      "description": "This module defines an enumerated type representing the write forwarding status of a database instance, with possible values like `Enabled`, `Disabled`, and transitional states. It provides bidirectional conversion between strings and the enumerated type, along with serialization to and from JSON and query formats. This module is used to manage and interpret write forwarding states in database configuration and API interactions.",
      "description_length": 432,
      "index": 394,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstanceNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when a reserved DB instance is not found. It provides operations for creating, parsing, and converting the unit value to query parameters, JSON, and back from JSON. This is used specifically for error handling in RDS service interactions when a requested reserved DB instance does not exist.",
      "description_length": 370,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventCategoriesMap",
      "library": "aws-rds",
      "description": "Maps event categories to RDS sources by parsing, querying, and serializing event category data. Works with XML, JSON, and query string formats for event configuration. Used to configure and retrieve event notifications for RDS instances and clusters.",
      "description_length": 250,
      "index": 396,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBEngineVersionList",
      "library": "aws-rds",
      "description": "This module handles lists of DB engine versions, providing operations to convert, parse, and serialize them to and from XML, JSON, and query formats. It works with lists of `DBEngineVersion.t` records, which represent metadata about database engine versions in AWS RDS. Concrete use cases include processing API responses containing multiple DB engine versions and preparing those lists for further consumption or request submission.",
      "description_length": 433,
      "index": 397,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Filter",
      "library": "aws-rds",
      "description": "This module defines a filter structure with a name and list of values, used to represent database instance filters in AWS RDS. It provides functions to construct, parse, and convert filters to query parameters or JSON format. Concrete use cases include filtering RDS instances by attributes like engine type or availability zone during API requests.",
      "description_length": 349,
      "index": 398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxiesResponse",
      "library": "aws-rds",
      "description": "This module handles responses from describing DB proxies in AWS RDS. It provides operations to create, parse, and serialize response data containing a list of DB proxies and an optional marker for pagination. It works directly with XML input for parsing and converts to JSON or query formats for further use in API interactions.",
      "description_length": 328,
      "index": 399,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ProcessorFeature",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying processor features with optional name and value fields, along with functions to construct, serialize, and deserialize these features. It works with XML, JSON, and AWS query formats, enabling integration with AWS RDS APIs that require processor feature configurations. Concrete use cases include setting CPU features like \"coreCount\" or \"threadsPerCore\" when configuring RDS instances.",
      "description_length": 436,
      "index": 400,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeOptionGroupOptionsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS option group options, including fields like engine name, version, filters, and pagination controls. It provides functions to construct, parse, and serialize these queries to JSON or AWS Query format. It is used when retrieving available options for configuring RDS option groups via the AWS API.",
      "description_length": 349,
      "index": 401,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where a database cluster snapshot already exists. It provides operations to construct, parse, and convert the error to query or JSON formats. Use this module when managing RDS cluster snapshots to detect and handle duplicate creation attempts.",
      "description_length": 323,
      "index": 402,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.StartExportTaskMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for initiating an RDS export task to S3, including required fields like export identifier, source ARN, S3 bucket, IAM role, and KMS key. It provides operations to construct, parse, and serialize the structure to query parameters or JSON for API requests. Use this when configuring and submitting an export task to AWS RDS, optionally specifying a prefix or a list of databases/tables to export.",
      "description_length": 431,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceRole",
      "library": "aws-rds",
      "description": "This module defines a data structure for associating an IAM role with an RDS DB instance, including the role ARN, feature name, and status. It provides functions to construct, serialize, and deserialize this structure for use in API requests and responses. Concrete use cases include managing IAM role attachments for RDS features like enhanced monitoring or automated backups.",
      "description_length": 377,
      "index": 404,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterRoleQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where the quota for DB cluster roles has been exceeded. It provides functions to construct, parse, and convert the error to query parameters or JSON format. Use this module when handling or propagating quota exceeded errors in RDS cluster role management operations.",
      "description_length": 339,
      "index": 405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBProxyTargetsRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for querying RDS database proxy targets, including fields like proxy name, target group name, filters, pagination marker, and max records. It provides functions to construct, parse, and serialize these requests to JSON, query parameters, or XML. Concrete use cases include retrieving target information for a specific RDS proxy, filtering targets by attributes, and handling paginated results in AWS RDS management tools.",
      "description_length": 461,
      "index": 406,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateCustomAvailabilityZoneMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for creating a custom availability zone with optional VPN configuration parameters. It provides functions to construct, serialize, and deserialize the structure, supporting operations to set values like custom availability zone name, existing VPN ID, new VPN tunnel name, and tunnel originator IP. Concrete use cases include configuring RDS custom availability zones with specific network settings during AWS resource provisioning.",
      "description_length": 468,
      "index": 407,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterParameterGroupList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS DBClusterParameterGroup values, providing direct conversions to and from JSON, query parameters, and XML. It supports parsing from XML nodes and constructing parameter group lists from JSON input. Use this module when managing RDS cluster parameter group configurations through AWS API interactions.",
      "description_length": 332,
      "index": 408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBClusterCapacityFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid database cluster capacity faults. It provides operations for creating, parsing, and converting the unit value to query parameters, JSON, and back from JSON. Use this when interacting with AWS RDS APIs to manage error responses related to unsupported DB cluster capacities.",
      "description_length": 350,
      "index": 409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RangeList",
      "library": "aws-rds",
      "description": "This module handles lists of range values, providing functions to convert them to and from JSON, XML, and query parameters. It works with `Range.t` elements in a list structure. Use this module when processing RDS range data in different formats, such as when interacting with AWS RDS APIs or parsing configuration files.",
      "description_length": 321,
      "index": 410,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OrderableDBInstanceOptionsList",
      "library": "aws-rds",
      "description": "This module handles parsing, querying, and serializing lists of orderable database instance options. It works with XML nodes, JSON values, and query parameters, converting them to and from a list of `OrderableDBInstanceOption.t` values. It is used to process responses and requests involving lists of supported DB instance configurations from the RDS service.",
      "description_length": 359,
      "index": 411,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ProvisionedIopsNotAvailableInAZFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where provisioned IOPS is unavailable in a specific availability zone. It works with unit type values and primarily interacts with AWS query and JSON formats. It is used when managing RDS instance provisioning to detect and handle availability zone-specific IOPS constraints.",
      "description_length": 355,
      "index": 412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyOptionGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an RDS option group, including fields to specify the option group name, options to add or remove, and whether changes should apply immediately. It provides functions to construct, serialize, and parse modification requests in various formats such as JSON and query parameters. It is used when updating database option configurations in AWS RDS management workflows.",
      "description_length": 416,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ApplyMethod",
      "library": "aws-rds",
      "description": "This module defines an enumeration with two values, `Immediate` and `Pending_reboot`, representing how configuration changes are applied in a database service. It includes functions to convert between string representations and the enumerated type, supporting serialization to and from JSON, query parameters, and XML. These operations are used when managing database instance modifications that require either immediate application or a reboot to take effect.",
      "description_length": 460,
      "index": 414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBEngineVersionMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS database engine versions, including optional pagination markers. It provides operations to construct, parse, and serialize messages containing lists of database engine versions. Use this module when retrieving or processing version information from AWS RDS, such as listing available engine versions or handling paginated responses.",
      "description_length": 385,
      "index": 415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroup",
      "library": "aws-rds",
      "description": "This module defines a data structure for managing RDS option groups, including fields like name, description, engine details, and VPC configuration. It provides functions to construct, serialize, and deserialize these structures for use in API requests and responses. Concrete use cases include creating and modifying RDS instances with specific option group settings.",
      "description_length": 368,
      "index": 416,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterResult",
      "library": "aws-rds",
      "description": "This module defines a single type `t` that represents the result of modifying a database cluster, containing an optional `DBCluster` record. It provides functions to construct, parse, and serialize this result type to and from XML, JSON, and query formats. It is used specifically when handling responses from AWS RDS API operations that modify database clusters.",
      "description_length": 363,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RecurringChargeList",
      "library": "aws-rds",
      "description": "Handles serialization and deserialization of recurring charge data in AWS RDS operations. Works with lists of recurring charge records, converting between XML, JSON, and query formats. Used when managing billing information for reserved database instances or processing cost reports from AWS.",
      "description_length": 292,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.MinimumEngineVersionPerAllowedValueList",
      "library": "aws-rds",
      "description": "This module handles a list of minimum engine version per allowed value configurations. It provides functions to parse XML input into a list of these configurations, convert them to query parameters, and serialize to and from JSON. It is used when managing RDS engine version constraints tied to specific parameter values.",
      "description_length": 321,
      "index": 419,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBInstanceReadReplicaResult",
      "library": "aws-rds",
      "description": "This module handles the result of creating a DB instance read replica in AWS RDS. It provides functions to construct, parse, and serialize the result, which includes an optional DB instance. Use this module when processing responses from RDS after initiating a read replica creation, particularly for extracting and working with the resulting DB instance data.",
      "description_length": 360,
      "index": 420,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ConnectionPoolConfigurationInfo",
      "library": "aws-rds",
      "description": "This module defines a record type for connection pool configuration settings, including optional fields for connection limits, timeout, session pinning filters, and initialization queries. It provides constructors, JSON and XML parsers, and query builders to manage and serialize these configurations. It is used to configure database connection pools in AWS RDS Proxy, enabling precise control over connection behavior and performance tuning.",
      "description_length": 443,
      "index": 421,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RemoveFromGlobalClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for removing a DB cluster from a global cluster, with optional string fields for identifiers. It provides functions to construct, parse, and serialize the structure to query or JSON formats. Use this when interacting with AWS RDS global cluster management APIs to send or process removal requests.",
      "description_length": 334,
      "index": 422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAutomatedBackup",
      "library": "aws-rds",
      "description": "This module defines a data structure representing automated backups of a database instance, with fields capturing metadata like identifiers, status, storage configuration, and timestamps. It provides functions to construct, parse, and convert backup records to and from JSON, query formats, and XML input. Use this module when managing backup information retrieval, serialization, or API interactions related to database instance backups.",
      "description_length": 438,
      "index": 423,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionSettingConfigurationList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option settings, providing direct conversions to and from JSON, query parameters, and XML. It supports parsing and constructing option setting lists used when configuring or modifying RDS instances. Common use cases include serializing option settings for API requests and deserializing responses from AWS RDS operations.",
      "description_length": 354,
      "index": 424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS options, providing functions to convert them to and from XML, JSON, and query parameters. It works with lists of `Aws_rds.Types.Option.t` values. Use it when managing RDS database options, such as during instance configuration or snapshot operations.",
      "description_length": 283,
      "index": 425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling cases where a database snapshot is not found. It provides operations to create, parse, and convert the unit value to query parameters, JSON, or back from JSON. Use this when managing RDS snapshot errors in API responses or client requests.",
      "description_length": 309,
      "index": 426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SourceNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling source not found errors in RDS operations. It includes functions to construct, parse, and convert the unit value to query parameters, JSON, or back from JSON. It is used to represent and manage error conditions where a source resource is not found in RDS service interactions.",
      "description_length": 346,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidGlobalClusterStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the invalid global cluster state fault in AWS RDS operations. It provides operations for constructing, parsing, and converting the fault to query parameters or JSON format. Use this module when managing error states related to global cluster transitions in RDS.",
      "description_length": 331,
      "index": 428,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBClusterEndpointStateFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `InvalidDBClusterEndpointStateFault` error in AWS RDS operations. It provides functions to create, parse, and convert the error type to query parameters, JSON, and back from JSON. It is used specifically to represent and manage invalid DB cluster endpoint state faults when interacting with AWS RDS services.",
      "description_length": 377,
      "index": 429,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateDBClusterParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for creating a new RDS database cluster parameter group, including required fields like name, parameter group family, and description, along with optional tags. It provides functions to construct, serialize, and parse instances of this type, specifically for interacting with AWS RDS APIs. Use cases include configuring and submitting parameter group creation requests in RDS cluster setups.",
      "description_length": 425,
      "index": 430,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidS3BucketFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling invalid S3 bucket errors in RDS operations. It provides functions to construct, parse, and serialize error data to query parameters or JSON, primarily working with unit type values. It is used when interacting with RDS APIs that require validation and error reporting related to S3 bucket configurations.",
      "description_length": 369,
      "index": 431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBSecurityGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying an RDS DB security group to delete by name. It includes functions to construct the structure, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. Use this when interacting with AWS RDS APIs to delete a specific DB security group.",
      "description_length": 319,
      "index": 432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.UserAuthConfigList",
      "library": "aws-rds",
      "description": "This module handles lists of user authentication configurations for RDS instances. It provides operations to convert these lists to and from JSON and query formats, and to parse them from XML. Use this module when managing RDS user authentication settings via API calls or configuration files.",
      "description_length": 293,
      "index": 433,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.GlobalCluster",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an AWS RDS Global Cluster, including its identifier, ARN, status, engine details, and associated members. It provides functions to construct, parse, and serialize cluster data for use in API requests and responses. Specific operations include converting cluster information to JSON or query parameters and parsing XML responses into cluster records.",
      "description_length": 399,
      "index": 434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a database cluster message, including optional pagination markers and a list of database clusters. It provides functions to construct, parse, and serialize the data to query parameters or JSON, as well as parsing from XML nodes. Concrete use cases include processing responses from AWS RDS API calls that list database clusters with pagination support.",
      "description_length": 401,
      "index": 435,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBSnapshotAttributesMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type `t` containing a DB snapshot identifier and provides functions to construct, parse, and serialize the structure. It works with XML nodes, JSON values, and AWS query parameters to facilitate API interactions. Concrete use cases include preparing and interpreting RDS snapshot attribute requests in AWS SDK workflows.",
      "description_length": 354,
      "index": 436,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOptionSettingsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option group settings, providing direct conversions to and from JSON, query parameters, and XML. It operates on a list of `OptionGroupOptionSetting.t` records, which represent individual configuration options for RDS instance features. Use this module when managing RDS option groups via API calls, especially when configuring or retrieving database engine-specific options.",
      "description_length": 407,
      "index": 437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AttributeValueList",
      "library": "aws-rds",
      "description": "This module handles lists of string-based attribute values, primarily for interacting with AWS RDS services. It provides operations to convert between XML, JSON, and query string representations of these lists. Use this module when processing RDS API responses or constructing requests that require lists of string attributes.",
      "description_length": 326,
      "index": 438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyDBSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of copying a DB snapshot in AWS RDS, primarily providing a data structure to capture the resulting snapshot. It works with XML, JSON, and query data formats for input and output operations. It is used when processing responses from the RDS API after initiating a DB snapshot copy operation.",
      "description_length": 321,
      "index": 439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.GlobalClusterAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the \"GlobalClusterAlreadyExistsFault\" error in AWS RDS operations. It provides functions to construct, parse, and convert the error type to query parameters, JSON, and back, specifically for signaling that a global cluster with the same identifier already exists. The module works exclusively with the unit type, representing the presence or absence of this specific error condition.",
      "description_length": 448,
      "index": 440,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeEngineDefaultParametersResult",
      "library": "aws-rds",
      "description": "This module handles the result of describing engine default parameters for an RDS instance. It provides functions to construct, parse, and serialize the result, which includes engine default settings. Use this module when retrieving and processing default parameter values for RDS database engines.",
      "description_length": 298,
      "index": 441,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ExportTaskNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when an RDS export task is not found. It provides operations to construct, parse, and serialize the unit value to query parameters or JSON, and to deserialize from JSON. It is used in error handling scenarios where a specific export task does not exist.",
      "description_length": 332,
      "index": 442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBProxyRequest",
      "library": "aws-rds",
      "description": "This module defines the configuration for creating a database proxy, including required parameters like proxy name, engine family, authentication, and network settings. It supports operations to construct, serialize, and parse proxy configurations, primarily working with structured types like strings, lists, and optional boolean or integer fields. It is used to prepare and manage RDS proxy creation requests in AWS deployments.",
      "description_length": 430,
      "index": 443,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterCapacityInfo",
      "library": "aws-rds",
      "description": "This module defines a data structure representing capacity information for a database cluster, including current and pending capacity, timeout settings, and cluster identifier. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Concrete use cases include retrieving and configuring cluster capacity details from AWS RDS API responses and requests.",
      "description_length": 407,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AuthorizationAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `AuthorizationAlreadyExistsFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error type to query parameters, JSON, and back, specifically for use when an authorization rule duplication is detected. The module works exclusively with the `unit` type, representing the absence of data in this error context.",
      "description_length": 418,
      "index": 445,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.InvalidRestoreFault",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing an invalid restore fault in RDS operations, with unit value indicating the presence of the error. It provides functions to construct, parse, and serialize the error to query parameters or JSON, primarily used for handling API responses indicating failed restore actions. Concrete use cases include error checking in RDS instance restoration workflows and integrating with AWS API error handling.",
      "description_length": 439,
      "index": 446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReadReplicaIdentifierList",
      "library": "aws-rds",
      "description": "This module handles lists of string identifiers for read replicas in AWS RDS operations. It provides functions to convert these lists to and from JSON and query formats, and includes parsing from XML nodes. It is used when managing replication configurations that require multiple read replica identifiers.",
      "description_length": 306,
      "index": 447,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBProxyTargetGroupRequest",
      "library": "aws-rds",
      "description": "This module defines a request structure for modifying an RDS DB proxy target group, including fields like target group name, DB proxy name, connection pool configuration, and optional new name. It provides functions to construct, parse, and serialize the request for use with AWS RDS operations. Concrete use cases include updating target group settings and reconfiguring connection pooling for a DB proxy.",
      "description_length": 406,
      "index": 448,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PromoteReadReplicaMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for promoting a read replica in Amazon RDS, including the instance identifier, optional backup retention period, and optional preferred backup window. It provides functions to construct, parse, and serialize the structure to query parameters or JSON for API requests. Use this module when configuring or modifying RDS read replicas with specific backup settings.",
      "description_length": 399,
      "index": 449,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupOption",
      "library": "aws-rds",
      "description": "This module defines a data structure representing an RDS option group option, including metadata like name, description, engine compatibility, port requirements, dependencies, and conflicts. It provides functions to construct, parse, and serialize instances for use in API requests and responses. Concrete use cases include configuring database options, managing version dependencies, and defining network requirements for RDS instances.",
      "description_length": 437,
      "index": 450,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.EC2SecurityGroupList",
      "library": "aws-rds",
      "description": "This module handles lists of EC2 security group data structures, providing operations to convert, parse, and serialize them for use in AWS RDS service interactions. It supports transformations to and from XML, JSON, and query formats, enabling integration with AWS API requests and responses. Specific use cases include processing security group information when managing RDS instances or modifying database security settings.",
      "description_length": 426,
      "index": 451,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling RDS cluster snapshot messages, including optional pagination markers and lists of cluster snapshots. It provides functions to construct, parse, and serialize these messages to and from XML, JSON, and query parameters. Concrete use cases include processing responses from AWS RDS API calls that list cluster snapshots, particularly when handling paginated results.",
      "description_length": 413,
      "index": 452,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReadReplicaDBClusterIdentifierList",
      "library": "aws-rds",
      "description": "This module handles lists of string identifiers for read replica database clusters. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when managing replication configurations in database services that require multiple read replica identifiers.",
      "description_length": 320,
      "index": 453,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBSnapshotStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid database snapshot state errors in AWS RDS operations. It provides functions to construct, parse, and convert the error type to query parameters, JSON, and back from JSON. Use this module when interacting with RDS snapshot APIs to manage and respond to invalid state error conditions programmatically.",
      "description_length": 378,
      "index": 454,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeValidDBInstanceModificationsMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type representing a message to describe valid modifications for a DB instance. It includes functions to construct the message, parse it from XML, convert it to query parameters or JSON, and create it from JSON. It is used specifically to request information about permissible configuration changes for an Amazon RDS DB instance.",
      "description_length": 362,
      "index": 455,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceAutomatedBackupMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing automated backups of database instances, including parsing from XML and JSON serialization. It works with a custom type containing an optional marker string and a list of database instance automated backups. Concrete use cases include processing backup responses from AWS RDS APIs and preparing backup data for transmission or storage.",
      "description_length": 384,
      "index": 456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EngineFamily",
      "library": "aws-rds",
      "description": "This module defines a sum type with two variants, `MYSQL` and `POSTGRESQL`, representing database engine families. It provides bidirectional conversions between strings and the type, including functions to convert to and from JSON and XML, as well as query parameters. It is used to specify and parse engine families in RDS API requests and responses, ensuring correct serialization and deserialization in AWS interactions.",
      "description_length": 423,
      "index": 457,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CopyDBClusterSnapshotResult",
      "library": "aws-rds",
      "description": "This module handles the result of copying a DB cluster snapshot in AWS RDS. It provides functions to create, parse, and serialize a result containing an optional DBClusterSnapshot. Use this module when managing snapshot copy operations, particularly for interacting with RDS APIs that return snapshot copy results in XML or JSON format.",
      "description_length": 336,
      "index": 458,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.IAMAuthMode",
      "library": "aws-rds",
      "description": "This module defines a polymorphic variant type with two constructors, `DISABLED` and `REQUIRED`, representing IAM authentication modes. It provides functions to convert between strings and the type, including bidirectional mappings, JSON and query parameter serialization, and XML parsing. Use this module when configuring or interpreting IAM authentication settings for RDS instances, particularly when interfacing with AWS APIs or processing configuration data.",
      "description_length": 463,
      "index": 459,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBSubnetGroupFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling invalid database subnet group faults. It provides operations for creating, parsing, and converting the unit value to query parameters, JSON, and back from JSON. It is used to represent and manage errors related to invalid DB subnet groups in API interactions.",
      "description_length": 329,
      "index": 460,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.Range",
      "library": "aws-rds",
      "description": "This module defines a `Range` type with optional `from`, `to_`, and `step` fields, all based on integer values. It provides functions to construct, parse, and convert range values to and from query parameters, JSON, and XML. Use this module when handling numeric range inputs or outputs in AWS RDS API requests and responses, such as for specifying backup windows or maintenance periods.",
      "description_length": 387,
      "index": 461,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSnapshotAttribute",
      "library": "aws-rds",
      "description": "This module defines a DB snapshot attribute with optional name and list of attribute values. It provides operations to construct, parse, and convert attributes to query parameters or JSON format. It is used to manage metadata associated with RDS DB snapshots, such as authorization details for shared snapshots.",
      "description_length": 311,
      "index": 462,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PendingMaintenanceActionDetails",
      "library": "aws-rds",
      "description": "This module handles lists of pending maintenance actions, providing functions to parse XML input into action lists, convert action lists to query parameters or JSON format, and construct empty action lists. It works with custom RDS maintenance action types and standard AWS query and JSON formats. Use this module when managing RDS instance maintenance actions through AWS API integrations.",
      "description_length": 390,
      "index": 463,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyGlobalClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an AWS RDS global cluster, including optional fields for the cluster identifier, new identifier, and deletion protection. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when configuring updates to a global database cluster in AWS RDS, such as renaming the cluster or changing deletion settings.",
      "description_length": 425,
      "index": 464,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBInstanceAutomatedBackupResult",
      "library": "aws-rds",
      "description": "This module handles the result of deleting an automated database instance backup in AWS RDS. It includes operations to create, parse, and convert the result to and from JSON and query formats. It works with the `DBInstanceAutomatedBackup` type, representing the deleted backup data in optional form for handling success or absence of the backup.",
      "description_length": 345,
      "index": 465,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupMembershipList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS option group membership records. It provides parsing from XML nodes, conversion to query parameters, and serialization to and from JSON. It is used when managing RDS instance option group associations, particularly during instance configuration or membership status checks.",
      "description_length": 306,
      "index": 466,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.FeatureNameList",
      "library": "aws-rds",
      "description": "This module handles lists of string-based feature names for AWS RDS operations. It provides functions to convert these lists to and from JSON and query string formats, and to parse them from XML nodes. Use this module when working with RDS feature metadata in different serialization formats.",
      "description_length": 292,
      "index": 467,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeExportTasksMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying AWS RDS export tasks with optional filters, pagination, and identifiers. It supports constructing, parsing, and serializing export task requests to JSON, XML, or AWS Query format. Concrete use cases include retrieving specific export tasks by ARN, filtering results, and handling paginated responses from the RDS service.",
      "description_length": 371,
      "index": 468,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteGlobalClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying a global cluster deletion request, containing a single field for the global cluster identifier. It provides functions to construct the request, parse it from XML, convert it to query parameters or JSON, and create it from JSON input. This module is used when issuing a command to delete an AWS RDS global cluster by its identifier.",
      "description_length": 383,
      "index": 469,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventSubscriptionsList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS event subscription data by providing direct conversions to and from JSON and query formats, along with XML parsing. It works specifically with lists of `EventSubscription.t` structures. Use this module when managing RDS event subscriptions, such as retrieving or modifying subscription lists through AWS API interactions.",
      "description_length": 354,
      "index": 470,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBSnapshotAttributeResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying DB snapshot attributes in AWS RDS. It provides operations to create, parse, and serialize a result that may contain updated snapshot attribute information. Use this module when adjusting access permissions or metadata on RDS database snapshots via the AWS API.",
      "description_length": 304,
      "index": 471,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for creating a database snapshot, including the snapshot identifier, instance identifier, and optional tags. It provides functions to construct, parse, and serialize the record to query parameters or JSON format. Use this module when initiating a new DB snapshot with specific identifiers and metadata in AWS RDS operations.",
      "description_length": 358,
      "index": 472,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CopyDBClusterSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for copying an RDS DB cluster snapshot, including source and target identifiers, optional KMS key ID, pre-signed URL, tag copying flag, and a list of tags. It provides functions to construct, parse, and serialize the structure to query parameters or JSON for use in API requests. Concrete use cases include initiating cross-region snapshot replication and applying encryption to copied snapshots using a specified KMS key.",
      "description_length": 459,
      "index": 473,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.FailoverDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a type representing a failover request for a database cluster, including the cluster identifier and an optional target instance identifier. It provides functions to construct, parse, and convert the type to and from XML, JSON, and query formats. It is used to initiate a failover operation in a database cluster by specifying the target instance for failover.",
      "description_length": 379,
      "index": 474,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBLogFilesResponse",
      "library": "aws-rds",
      "description": "This module handles responses from RDS log file descriptions, providing structured access to log file lists and pagination markers. It includes functions to construct, parse, and serialize responses in various formats like JSON and query parameters. It is used when retrieving and processing database log metadata from AWS RDS instances.",
      "description_length": 337,
      "index": 475,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RemoveSourceIdentifierFromSubscriptionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for removing a source identifier from an RDS event subscription. It includes functions to construct, parse, and serialize the structure to query parameters or JSON, primarily working with string-typed fields. It is used when managing RDS event notifications by disassociating a specific source from a subscription.",
      "description_length": 351,
      "index": 476,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DomainNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling domain not found errors in RDS operations. It provides functions to convert unit values to AWS query format, JSON, and back from JSON, enabling consistent error serialization and deserialization. Use this module when interacting with RDS APIs that require domain-related error handling.",
      "description_length": 356,
      "index": 477,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBSecurityGroupMembership",
      "library": "aws-rds",
      "description": "This module defines a type `t` representing membership of a DB instance in a security group, with optional fields for the security group name and membership status. It provides functions to construct, parse, and convert the type to and from XML, JSON, and query formats. This is used when managing RDS instance security group associations in AWS API requests and responses.",
      "description_length": 373,
      "index": 478,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OrderableDBInstanceOptionsMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing orderable DB instance options in AWS RDS, including optional pagination markers. It provides operations to construct, parse, and convert the data to and from XML, JSON, and query parameters. Use this module when retrieving or processing available DB instance configurations from AWS RDS APIs.",
      "description_length": 341,
      "index": 479,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateCustomAvailabilityZoneResult",
      "library": "aws-rds",
      "description": "This module defines a result structure for creating a custom availability zone, containing an optional `CustomAvailabilityZone` record. It provides functions to construct, parse, and serialize the result in various formats including JSON, XML, and query parameters. It is used to handle responses from RDS API calls that create custom availability zones, allowing retrieval and manipulation of the resulting zone data.",
      "description_length": 418,
      "index": 480,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReadersArnList",
      "library": "aws-rds",
      "description": "This module handles lists of string ARNs in AWS RDS operations. It provides parsing from XML nodes, conversion to query parameters and JSON, and extraction from JSON values. Use it when working with RDS API requests and responses that involve multiple ARNs.",
      "description_length": 257,
      "index": 481,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SNSTopicArnNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the case when an SNS topic ARN is not found. It provides operations to create, parse, and convert the unit type to query parameters, JSON, and back from JSON. Use this module when working with AWS RDS operations that require handling missing SNS topic ARNs in responses or API calls.",
      "description_length": 348,
      "index": 482,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DescribeEngineDefaultParametersMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying engine default parameters in Amazon RDS, including fields for parameter group family, filters, pagination, and markers. It provides functions to construct, parse, and serialize these queries in various formats such as JSON and query strings. It is used when retrieving default parameter settings for RDS database engines, supporting operations like filtering results and paginating through large datasets.",
      "description_length": 455,
      "index": 483,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SubscriptionAlreadyExistFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where an RDS event subscription already exists. It provides operations to construct, parse, and serialize this error state into query parameters or JSON format. Use this when managing RDS event subscriptions to detect and handle duplicate subscription attempts.",
      "description_length": 341,
      "index": 484,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterFromSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and associated operations for configuring and restoring an RDS database cluster from a snapshot. It includes fields for specifying cluster properties such as identifiers, engine settings, network configuration, security, and backup options. Use this module when initiating an RDS cluster restore operation with custom configuration parameters.",
      "description_length": 377,
      "index": 485,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupStatusList",
      "library": "aws-rds",
      "description": "This module handles lists of DB parameter group statuses, providing conversions to and from JSON, query parameters, and XML. It works with lists of `DBParameterGroupStatus.t` records, enabling serialization and deserialization for API interactions. Use this module when processing RDS API responses or constructing requests involving parameter group status lists.",
      "description_length": 363,
      "index": 486,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RevokeDBSecurityGroupIngressResult",
      "library": "aws-rds",
      "description": "This module handles the result of revoking ingress rules from a DB security group in AWS RDS. It provides functions to construct, parse, and serialize the result, which includes an optional DB security group object. Use this module when processing responses from RDS API calls that modify security group ingress rules, such as after calling `RevokeDBSecurityGroupIngress`.",
      "description_length": 372,
      "index": 487,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InstallationMediaFailureCause",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling failure causes related to RDS installation media operations, specifically capturing an optional error message. It provides functions to construct, parse, and serialize the structure to common formats like JSON and query strings. Use this module when handling errors from RDS installation media setup or configuration tasks, such as tracking why a media installation failed.",
      "description_length": 423,
      "index": 488,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.UserAuthConfig",
      "library": "aws-rds",
      "description": "This module defines a data structure for configuring user authentication in a database service, supporting fields like description, username, authentication scheme, secret ARN, and IAM authentication mode. It provides functions to construct, serialize, and deserialize authentication configurations, enabling integration with AWS RDS operations. Use this module when setting up or modifying database instance authentication parameters using either IAM-based or password-based methods.",
      "description_length": 484,
      "index": 489,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionsDependedOn",
      "library": "aws-rds",
      "description": "This module handles lists of string values, specifically for representing dependencies in RDS options. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when working with RDS option configurations that require specifying dependent resources.",
      "description_length": 321,
      "index": 490,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PromoteReadReplicaResult",
      "library": "aws-rds",
      "description": "This module handles the result of promoting a read replica in an RDS operation. It provides functions to create, parse, and convert the result to and from JSON and query formats. The primary data type is a record containing an optional DBInstance, representing the promoted database instance.",
      "description_length": 292,
      "index": 491,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBUpgradeDependencyFailureFault",
      "library": "aws-rds",
      "description": "This module defines a minimal unit type and associated conversions for handling RDS database upgrade dependency failures. It provides operations to construct, parse, and serialize the unit value to query parameters or JSON, primarily used in error handling during RDS version upgrades. The module is typically used to represent a specific error condition in API responses without carrying additional data.",
      "description_length": 405,
      "index": 492,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceList",
      "library": "aws-rds",
      "description": "This module handles lists of RDS database instances, providing direct conversions to and from XML, JSON, and query formats. It includes parsing from XML nodes into instance lists and transforming instance lists into structured JSON or query parameters. Use this module when retrieving or serializing multiple RDS instances, such as in API responses or batch operations.",
      "description_length": 369,
      "index": 493,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBProxyResponse",
      "library": "aws-rds",
      "description": "This module handles responses from modifying a database proxy in AWS RDS. It includes a single optional field for the updated proxy data and provides functions to construct, parse, and convert the response to and from XML, JSON, and query formats. It is used when processing the result of a DB proxy modification operation in AWS RDS.",
      "description_length": 334,
      "index": 494,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterToPointInTimeResult",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a database cluster to a specific point in time. It includes a single optional DBCluster value representing the restored cluster. Use this module when processing responses from RDS point-in-time recovery operations to extract or serialize the resulting cluster data.",
      "description_length": 309,
      "index": 495,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ApplyPendingMaintenanceActionMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for specifying pending maintenance actions in RDS, including the resource identifier, action to apply, and opt-in type. It provides functions to construct, parse, and serialize the structure to query parameters or JSON for API interactions. Use this module when managing RDS instance maintenance actions programmatically.",
      "description_length": 358,
      "index": 496,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.IPRangeList",
      "library": "aws-rds",
      "description": "This module handles lists of IP ranges for AWS RDS operations. It provides functions to convert IP range lists to and from XML, JSON, and query parameters, enabling seamless integration with AWS RDS APIs. It is used when configuring or retrieving RDS instance security settings involving IP-based access control.",
      "description_length": 312,
      "index": 497,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.UserAuthConfigInfoList",
      "library": "aws-rds",
      "description": "This module handles lists of user authentication configuration info records for RDS. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Use this module when managing RDS instance authentication settings via the AWS API.",
      "description_length": 277,
      "index": 498,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.PendingCloudwatchLogsExports",
      "library": "aws-rds",
      "description": "This module defines a data structure for managing CloudWatch Logs exports that are pending on an RDS instance. It includes operations to construct, parse, and serialize the state of log types to enable or disable, specifically working with lists of log types. It is used when configuring or retrieving logging settings for RDS instances via the AWS API.",
      "description_length": 353,
      "index": 499,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.AuthScheme",
      "library": "aws-rds",
      "description": "This module defines a single enumerated type representing authentication schemes, specifically `SECRETS`, along with functions to convert between string representations and the enumerated values. It includes serialization and deserialization functions for JSON, XML, and query parameters, enabling use in API requests and responses. Concrete use cases include specifying authentication methods when configuring or interacting with RDS resources via AWS SDK.",
      "description_length": 457,
      "index": 500,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.SharedSnapshotQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module handles the `SharedSnapshotQuotaExceededFault` error type, providing functions to construct, parse, and serialize the error. It works with unit type values and is used to represent and manipulate shared snapshot quota exceeded faults in API responses. Concrete use cases include error handling when managing RDS snapshots and interacting with AWS RDS services.",
      "description_length": 372,
      "index": 501,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupDoesNotCoverEnoughAZs",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the case where a DB subnet group does not cover enough availability zones in AWS RDS operations. It works with unit type values and provides conversions to and from JSON and query formats. It is used when managing subnet group configurations that fail to meet availability zone requirements during RDS instance setup or modification.",
      "description_length": 398,
      "index": 502,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBClusterEndpointMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing a database cluster endpoint message, including optional pagination markers and lists of cluster endpoints. It provides operations for constructing, serializing, and deserializing these messages to and from XML, JSON, and query parameters. Use this module when interacting with AWS RDS API responses that involve retrieving or managing database cluster endpoints.",
      "description_length": 411,
      "index": 503,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ScalingConfigurationInfo",
      "library": "aws-rds",
      "description": "This module defines a data structure for managing RDS cluster scaling configurations, with optional fields for capacity limits, auto-pause behavior, and timeout actions. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when configuring or retrieving settings for RDS clusters that support serverless scaling.",
      "description_length": 381,
      "index": 504,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBInstanceToPointInTimeMessage",
      "library": "aws-rds",
      "description": "This module defines a record type and operations for configuring an RDS database instance restore to a specific point in time. It includes fields for specifying source and target instance identifiers, restore time, instance configuration, network settings, and additional options like tags, security groups, and logging. The module provides functions to construct, parse, and serialize these configurations to support API interactions for database recovery scenarios.",
      "description_length": 467,
      "index": 505,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.OptionGroupAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where an RDS option group already exists. It provides operations to construct, parse, and serialize this error state into query parameters or JSON format. Use this module when managing RDS option groups to detect and handle duplicate creation attempts.",
      "description_length": 332,
      "index": 506,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.TargetType",
      "library": "aws-rds",
      "description": "This module defines a polymorphic variant type `t` representing different target types for database resources, including RDS instances, serverless endpoints, and tracked clusters. It provides bidirectional conversions between strings and the variant type, along with serialization to and from JSON, query parameters, and XML. These operations support handling target type values when interacting with AWS RDS APIs, such as in request parsing, response generation, and resource identification.",
      "description_length": 492,
      "index": 507,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.FailoverDBClusterResult",
      "library": "aws-rds",
      "description": "This module handles the result of a failover operation for an RDS database cluster. It provides functions to create, parse, and serialize a result that may contain an updated database cluster configuration. Use this module when implementing or interacting with RDS cluster failover logic, particularly for processing API responses or constructing test scenarios.",
      "description_length": 362,
      "index": 508,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the case when a database instance is not found. It provides operations to construct, parse, and convert the unit value to query parameters, JSON, or back from JSON. Use this to represent and manage the absence of a database instance in API responses or error handling scenarios.",
      "description_length": 348,
      "index": 509,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBProxyTarget",
      "library": "aws-rds",
      "description": "This module defines a data structure representing a database proxy target with optional fields for ARN, endpoint, cluster ID, resource ID, port, target type, and health status. It provides functions to construct instances, convert to and from JSON and query formats, and parse from XML nodes. It is used to manage and serialize proxy target configurations in AWS RDS.",
      "description_length": 367,
      "index": 510,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.TargetHealth",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing the health status of a target in a database cluster, including its state, reason for the state, and a descriptive message. It provides functions to construct, serialize, and convert instances to and from XML, JSON, and query formats. Concrete use cases include monitoring the health of RDS targets and integrating with AWS APIs that require structured health information.",
      "description_length": 425,
      "index": 511,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DeleteDBSnapshotMessage",
      "library": "aws-rds",
      "description": "This module defines a single data type representing a message to delete a database snapshot, containing the snapshot identifier. It provides functions to construct the message, parse it from XML, convert it to query parameters or JSON, and create it from JSON. This module is used to format and handle deletion requests for RDS database snapshots when interacting with the AWS API.",
      "description_length": 381,
      "index": 512,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ActivityStreamMode",
      "library": "aws-rds",
      "description": "This module defines an enumeration with two values, `Sync` and `Async`, representing activity stream modes in RDS. It provides bidirectional conversion between these values and strings, along with serialization to and from JSON, query parameters, and XML. These operations support configuration and interpretation of RDS activity streams in different data formats.",
      "description_length": 364,
      "index": 513,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeDBParameterGroupsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying RDS parameter groups with optional filters, record limits, and pagination. It supports operations to construct, serialize, and parse messages for AWS RDS API requests. Use this module when retrieving information about database parameter groups using the AWS SDK for OCaml.",
      "description_length": 322,
      "index": 514,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateOptionGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for creating an RDS option group, including fields like name, engine, version, description, and tags. It provides functions to construct, serialize, and parse this structure to and from JSON, query parameters, and XML. Concrete use cases include configuring and provisioning RDS database option groups with specific settings and metadata.",
      "description_length": 375,
      "index": 515,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBInstanceRoleQuotaExceededFault",
      "library": "aws-rds",
      "description": "This module defines a singleton type `t` representing an error condition where the quota for DB instance roles has been exceeded. It provides functions to construct, parse, and convert the error to query parameters or JSON format. Use this module when handling or propagating quota-exceeded errors related to RDS instance roles in AWS API interactions.",
      "description_length": 352,
      "index": 516,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeReservedDBInstancesOfferingsMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for querying AWS RDS reserved database instance offerings, including fields like instance class, duration, product description, and filters. It provides functions to construct, parse, and serialize these query messages to interact with the RDS API. Use cases include retrieving available reserved instance offerings with custom filters, pagination, and response handling in RDS management workflows.",
      "description_length": 436,
      "index": 517,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.BacktrackDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for initiating a DB cluster backtrack operation, including the cluster identifier, target time, and optional flags. It provides functions to create, parse, and serialize the structure to query parameters or JSON for API requests. Use this module when configuring RDS cluster backtracking via AWS SDK operations.",
      "description_length": 348,
      "index": 518,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DescribeEngineDefaultClusterParametersResult",
      "library": "aws-rds",
      "description": "This module handles the result of describing default engine parameters for an RDS cluster. It provides functions to construct, parse, and serialize the result, which includes optional engine default parameters. It is used when retrieving and processing default configuration values for RDS database clusters from AWS.",
      "description_length": 317,
      "index": 519,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.EngineModeList",
      "library": "aws-rds",
      "description": "This module handles lists of string values representing engine modes in RDS configurations. It provides functions to convert these lists to and from JSON and query string formats, and includes parsing from XML nodes. Use this module when working with RDS engine mode data in API requests and responses.",
      "description_length": 302,
      "index": 520,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CharacterSet",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing character sets in RDS, with optional name and description fields. It provides functions to construct, parse, and convert character set data to and from XML, JSON, and query formats. Use this module when managing RDS database character sets, such as when configuring or retrieving database instance settings.",
      "description_length": 361,
      "index": 521,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.SourceType",
      "library": "aws-rds",
      "description": "This module defines a sum type representing various source types for AWS RDS events, such as database instances, parameter groups, and snapshots. It provides bidirectional conversion functions between the type and strings, JSON, and query parameters, enabling seamless integration with AWS APIs. Use this module when handling RDS event subscriptions that require specifying or parsing source types in different formats.",
      "description_length": 419,
      "index": 522,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstanceAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the error case when a reserved DB instance already exists. It provides operations for creating, parsing, and converting the unit value to query parameters, JSON, and back from JSON. This is used specifically for error handling in RDS service interactions when duplicate reserved instances are encountered.",
      "description_length": 375,
      "index": 523,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBParameterGroupsMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS DB parameter groups with optional pagination markers. It provides operations to construct, parse, and serialize messages containing lists of DB parameter groups, supporting both XML and JSON formats. Use this module when retrieving or processing DB parameter group information from AWS RDS API responses.",
      "description_length": 357,
      "index": 524,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroupAlreadyExistsFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the error case where a DB subnet group already exists. It works with unit type values and provides operations to create, parse, and convert the error to query or JSON formats. It is used when interacting with AWS RDS APIs to manage database subnet groups.",
      "description_length": 320,
      "index": 525,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.EventCategoriesMapList",
      "library": "aws-rds",
      "description": "This module handles lists of event categories mappings for AWS RDS events. It provides functions to parse XML input into event category maps, convert them to query parameters, and serialize to and from JSON. It is used when managing event subscriptions and notifications in RDS, such as filtering events by category and source type.",
      "description_length": 332,
      "index": 526,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.MinimumEngineVersionPerAllowedValue",
      "library": "aws-rds",
      "description": "This module defines a data structure with two optional string fields: `allowed_value` and `minimum_engine_version`. It provides functions to construct, parse, and serialize this structure to and from XML, JSON, and query parameters. It is used to represent version constraints for RDS engine configurations when interacting with AWS RDS APIs.",
      "description_length": 342,
      "index": 527,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StartActivityStreamResponse",
      "library": "aws-rds",
      "description": "This module defines a record type for handling responses from starting an activity stream in RDS, including fields like KMS key ID, Kinesis stream name, status, mode, and apply immediately flag. It provides functions to construct, parse, and convert the record to and from XML, JSON, and query formats. Use this module when managing RDS activity streams, particularly for processing API responses and serializing data for downstream processing or logging.",
      "description_length": 455,
      "index": 528,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.RestoreDBClusterFromS3Result",
      "library": "aws-rds",
      "description": "This module handles the result of restoring a database cluster from an S3 source in AWS RDS. It provides constructors, parsing, and serialization functions for working with the `t` type, which contains an optional `DBCluster` record. Use this module when managing RDS cluster restoration workflows that involve S3 data sources, particularly for creating, interpreting, or transmitting the output of such operations.",
      "description_length": 415,
      "index": 529,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ReservedDBInstancesOfferingMessage",
      "library": "aws-rds",
      "description": "This module handles structured data representing RDS reserved instance offerings, including pagination through an optional marker. It provides operations to construct, serialize, and parse messages containing lists of reserved DB instance offerings. Use this module when retrieving or processing available RDS reserved instance plans from AWS API responses.",
      "description_length": 357,
      "index": 530,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.AvailabilityZone",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing AWS RDS availability zones, primarily working with string-based names. It provides functions to construct, parse, and convert availability zone data to and from XML, JSON, and query formats. Use this module when handling RDS instance placement or region-related metadata in AWS integrations.",
      "description_length": 345,
      "index": 531,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBClusterSnapshotAttribute",
      "library": "aws-rds",
      "description": "This module defines a data structure for handling RDS cluster snapshot attributes, including their names and associated values. It provides functions to construct, serialize, and convert these attributes to and from JSON and query formats. It is used when managing or retrieving metadata about RDS cluster snapshots, such as sharing or access control information.",
      "description_length": 363,
      "index": 532,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyDBClusterMessage",
      "library": "aws-rds",
      "description": "This module defines a data structure for modifying an RDS database cluster configuration, including fields like cluster identifier, backup settings, security groups, and authentication options. It provides functions to construct, parse, and serialize these configurations for use in API requests. Concrete use cases include updating cluster parameters, adjusting backup windows, and enabling IAM authentication or HTTP endpoints for database access.",
      "description_length": 449,
      "index": 533,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.CreateDBParameterGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for creating a DB parameter group with fields for the group name, family, description, and optional tags. It provides functions to construct, parse, and serialize the record to query parameters or JSON, specifically for interacting with the RDS service. It is used when setting up or modifying database parameter configurations in AWS RDS.",
      "description_length": 373,
      "index": 534,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSubnetGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for creating a DB subnet group, including required fields like subnet group name, description, and subnet IDs, along with optional tags. It provides functions to construct, parse, and serialize the record to various formats such as JSON and query parameters. It is used when configuring database subnet groups in AWS RDS by mapping directly to the API request structure.",
      "description_length": 404,
      "index": 535,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.InvalidDBClusterStateFault",
      "library": "aws-rds",
      "description": "This module defines a unit type and associated functions for handling the invalid DB cluster state fault in AWS RDS operations. It provides operations for parsing, converting to query format, serializing to JSON, and deserializing from JSON, all acting on unit values. This is used specifically to represent and manage error states related to DB cluster transitions in AWS RDS, such as when a cluster is in a state that prevents an operation from proceeding.",
      "description_length": 458,
      "index": 536,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.DBLogFileNotFoundFault",
      "library": "aws-rds",
      "description": "This module defines a type and associated functions for handling the `DBLogFileNotFoundFault` error in AWS RDS operations. It provides functions to construct, parse, and convert the error type to query parameters, JSON, and back from JSON. It is used when interacting with AWS RDS APIs to handle cases where a specified database log file cannot be found.",
      "description_length": 354,
      "index": 537,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.Types.AvailableProcessorFeature",
      "library": "aws-rds",
      "description": "This module defines a data structure for representing processor features available in a database instance, including their name, default value, and allowed values. It provides functions to construct, parse, and convert these features to and from XML, JSON, and query formats. Use this module when configuring or retrieving processor settings for RDS instances, particularly when interacting with the AWS API.",
      "description_length": 408,
      "index": 538,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.ModifyOptionGroupResult",
      "library": "aws-rds",
      "description": "This module handles the result of modifying an RDS option group by providing a structured representation of the modified option group. It includes functions to construct, parse, and serialize the result to different formats like JSON and query parameters. It is used when processing responses from AWS RDS after an option group update operation.",
      "description_length": 345,
      "index": 539,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.StringList",
      "library": "aws-rds",
      "description": "This module handles lists of string values for use with AWS RDS operations, providing functions to convert these lists to and from XML, JSON, and query parameters. It works specifically with lists of `Aws.BaseTypes.String.t` values. Use this module when constructing or parsing AWS RDS API requests and responses that require multiple string values, such as parameter groups or security group names.",
      "description_length": 399,
      "index": 540,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.CreateDBSecurityGroupMessage",
      "library": "aws-rds",
      "description": "This module defines a record type for creating a database security group with fields for the group name, description, and optional tags. It provides functions to construct, parse, and serialize the record to various formats including JSON and query parameters. It is used when configuring new RDS security groups and handling related API requests.",
      "description_length": 347,
      "index": 541,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types.DBSubnetGroups",
      "library": "aws-rds",
      "description": "This module handles the serialization, deserialization, and manipulation of DB subnet group data as a list. It provides functions to convert between XML, JSON, and query formats, specifically for working with AWS RDS DB subnet group responses. Use this module when processing API responses or constructing requests involving DB subnet groups in AWS RDS.",
      "description_length": 353,
      "index": 542,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBParameterGroups",
      "library": "aws-rds",
      "description": "This module handles the AWS RDS operation to describe DB parameter groups, converting input parameters into HTTP requests and parsing responses or errors from the service. It works with structured types representing RDS parameter group descriptions, including input messages, output responses, and internal error formats. Concrete use cases include querying RDS instance parameter group configurations and handling paginated results from AWS RDS API responses.",
      "description_length": 460,
      "index": 543,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CancelExportTask",
      "library": "aws-rds",
      "description": "This module handles the cancellation of an RDS export task by providing functions to construct and interpret HTTP requests and responses. It works with input and output types specific to the RDS service, including messages to cancel export tasks and responses containing updated export task details. Concrete use cases include stopping an ongoing database snapshot export to Amazon S3 and retrieving the resulting export task state after cancellation.",
      "description_length": 451,
      "index": 544,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeExportTasks",
      "library": "aws-rds",
      "description": "This module handles describing RDS export tasks by converting input parameters into HTTP requests and parsing responses into structured output or errors. It works with RDS export task messages, including filtering by task ID and other metadata. Use this module to retrieve details about ongoing or completed RDS export operations, such as their status, progress, or failure reasons.",
      "description_length": 382,
      "index": 545,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBProxyTargetGroups",
      "library": "aws-rds",
      "description": "This module handles the `DescribeDBProxyTargetGroups` operation for AWS RDS, allowing retrieval of information about DB proxy target groups associated with a specific proxy. It works with input and output types defined in `Aws_rds.Types`, along with internal error types for handling failures. Use this module to query proxy target group configurations, such as their associated targets and health status, directly from RDS.",
      "description_length": 424,
      "index": 546,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBSecurityGroups",
      "library": "aws-rds",
      "description": "This module handles describing DB security groups by sending HTTP requests to AWS RDS. It works with input and output types specific to DB security group descriptions, along with error types defined in the RDS API. It is used to retrieve information about existing DB security groups, including their rules and associated metadata, by making signed HTTP requests to the RDS service endpoint.",
      "description_length": 391,
      "index": 547,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ModifyDBClusterEndpoint",
      "library": "aws-rds",
      "description": "This module modifies an existing RDS database cluster endpoint. It accepts a `ModifyDBClusterEndpointMessage` to specify changes such as the endpoint identifier or type, and returns an updated `DBClusterEndpoint`. It is used to adjust endpoint configurations for Aurora clusters, such as changing which DB instances participate in a custom endpoint.",
      "description_length": 349,
      "index": 548,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Errors_internal",
      "library": "aws-rds",
      "description": "This module defines a comprehensive set of error types representing specific failure conditions encountered in RDS operations, such as resource not found, quota exceeded, invalid state, and authentication failures. It includes functions to convert errors to HTTP status codes, strings, and back, enabling precise error handling and reporting. Concrete use cases include validating RDS API responses, managing error states during database provisioning, and implementing retry logic based on specific error codes.",
      "description_length": 511,
      "index": 549,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.StartActivityStream",
      "library": "aws-rds",
      "description": "This module handles starting an RDS activity stream by defining input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS activity stream configurations, encoding them into AWS API-compatible query parameters and parsing stream start responses or errors. Concrete use cases include initiating database activity monitoring and capturing RDS event streams for auditing or analysis.",
      "description_length": 468,
      "index": 550,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RebootDBInstance",
      "library": "aws-rds",
      "description": "This module handles rebooting an RDS database instance by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS instance identifiers and reboot parameters, translating them into AWS query format. Concrete use cases include initiating controlled reboots for maintenance or configuration changes through AWS API calls.",
      "description_length": 422,
      "index": 551,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ImportInstallationMedia",
      "library": "aws-rds",
      "description": "This module handles the import of installation media into AWS RDS by defining the input and output types for the operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with RDS installation media messages and responses, enabling precise interaction with RDS APIs for database engine installation tasks. Use this module when importing custom database installation media to an RDS instance programmatically.",
      "description_length": 457,
      "index": 552,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ResetDBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module resets the parameters of an RDS DB cluster parameter group to their default values. It operates on input containing the parameter group name and whether to reset all parameters or a subset, producing output with the name of the modified parameter group. It handles HTTP serialization and deserialization, error parsing, and request signing for direct interaction with the AWS RDS API.",
      "description_length": 396,
      "index": 553,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DownloadDBLogFilePortion",
      "library": "aws-rds",
      "description": "This module handles downloading portions of database log files from AWS RDS. It works with input and output types specific to the `DownloadDBLogFilePortion` operation, including structured types for log data and errors. Use this module to retrieve log file segments programmatically, handling responses and errors specific to RDS log retrieval.",
      "description_length": 344,
      "index": 554,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module deletes a DB cluster parameter group by sending a properly signed HTTP request to the RDS service. It works with `DeleteDBClusterParameterGroupMessage.t` as input and produces no output on success, handling errors via `Errors_internal.t`. A concrete use case is removing an unused parameter group after migrating database configurations.",
      "description_length": 349,
      "index": 555,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeOptionGroups",
      "library": "aws-rds",
      "description": "This module handles describing RDS option groups by converting input parameters into an HTTP request and parsing the response into structured output or errors. It works with RDS-specific types for describing option groups, including input messages and option group data. Concrete use cases include querying details of existing option groups, filtering by name or ARN, and handling responses with proper error decoding.",
      "description_length": 418,
      "index": 556,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ResetDBParameterGroup",
      "library": "aws-rds",
      "description": "This module resets a database parameter group to its default values by sending an HTTP request with the specified parameter group name and reset options. It operates on input structures containing parameter group identifiers and returns output structures with the name of the modified group. Use this module to programmatically reset RDS database parameter groups to default settings during configuration management or automated recovery workflows.",
      "description_length": 448,
      "index": 557,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.RevokeDBSecurityGroupIngress",
      "library": "aws-rds",
      "description": "This module handles revoking ingress rules from an RDS database security group by sending a signed HTTP request to the AWS RDS service. It works with input and output types specific to the RevokeDBSecurityGroupIngress operation, including encoded query parameters and XML-parsed responses. Concrete use cases include programmatically removing IP ranges or EC2 security group access from a database security group to enforce network isolation or respond to security events.",
      "description_length": 472,
      "index": 558,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ModifyDBSubnetGroup",
      "library": "aws-rds",
      "description": "This module handles modifying an existing RDS DB subnet group by converting input parameters into an HTTP request and parsing the response or errors. It works with structured input and output types defined in `Aws_rds.Types`, including `ModifyDBSubnetGroupMessage` and `ModifyDBSubnetGroupResult`. Use this module to update the subnet definitions or description of a DB subnet group in AWS RDS, ensuring the request is correctly signed and formatted for the AWS API.",
      "description_length": 466,
      "index": 559,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CreateDBClusterSnapshot",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database cluster snapshots by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS-specific types like `CreateDBClusterSnapshotMessage` and `CreateDBClusterSnapshotResult`, and handles error decoding from AWS responses. Concrete use cases include initiating a snapshot of a database cluster for backup or replication purposes and processing the resulting metadata or failure conditions from the AWS API.",
      "description_length": 542,
      "index": 560,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.AuthorizeDBSecurityGroupIngress",
      "library": "aws-rds",
      "description": "This module handles authorization of ingress rules for RDS security groups by converting input data into signed HTTP requests and parsing responses. It works with structured input and output types defined in `Aws_rds.Types`, along with error types specific to RDS operations. It is used to programmatically allow network access to a DB security group, such as adding an IP range or EC2 security group to the ingress rules.",
      "description_length": 422,
      "index": 561,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeCustomAvailabilityZones",
      "library": "aws-rds",
      "description": "This module handles describing custom availability zones in RDS by converting input parameters into an HTTP request and parsing the resulting response or error. It works with RDS-specific types for input and output, including `DescribeCustomAvailabilityZonesMessage` and `CustomAvailabilityZoneMessage`. Use this module to query information about custom availability zones, such as their configuration and status, by making direct RDS API calls.",
      "description_length": 445,
      "index": 562,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBSnapshots",
      "library": "aws-rds",
      "description": "This module handles describing DB snapshots in AWS RDS by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with `DescribeDBSnapshotsMessage.t` as input and returns `DBSnapshotMessage.t` as output, while handling internal RDS errors. It is used to query metadata about existing database snapshots, such as their status, identifiers, and creation times, directly from AWS RDS.",
      "description_length": 438,
      "index": 563,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteInstallationMedia",
      "library": "aws-rds",
      "description": "This module handles the deletion of RDS installation media by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS installation media messages and error types, encoding inputs into HTTP requests and decoding HTTP responses into structured outputs or errors. It is used to issue DeleteInstallationMedia API calls to AWS RDS, handling the specific serialization and error parsing required for this operation.",
      "description_length": 505,
      "index": 564,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.PurchaseReservedDBInstancesOffering",
      "library": "aws-rds",
      "description": "This module handles purchasing a Reserved DB Instance offering in AWS RDS by converting input parameters into an HTTP request and parsing the response or errors. It works with specific RDS types for input, output, and errors, such as `PurchaseReservedDBInstancesOfferingMessage.t` and `PurchaseReservedDBInstancesOfferingResult.t`. Concrete use cases include making signed HTTP requests to the RDS service endpoint and decoding the XML responses or error messages returned by the AWS RDS API.",
      "description_length": 492,
      "index": 565,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBInstance",
      "library": "aws-rds",
      "description": "This module handles the deletion of an Amazon RDS database instance by defining the input and output types for the operation, along with functions to construct and interpret HTTP requests and responses. It works directly with RDS-specific types such as `DeleteDBInstanceMessage` for request parameters and `DeleteDBInstanceResult` for response data, while using standard AWS error types for failure handling. Concrete use cases include initiating a database instance deletion, encoding the request for transmission, and decoding or handling the result including error conditions specific to the deletion process.",
      "description_length": 612,
      "index": 566,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBInstanceAutomatedBackup",
      "library": "aws-rds",
      "description": "This module handles the deletion of automated database instance backups in AWS RDS. It works with input and output types defined in the `Aws_rds.Types` module, specifically `DeleteDBInstanceAutomatedBackupMessage` and `DeleteDBInstanceAutomatedBackupResult`, along with internal error types for handling failure cases. It provides functions to convert requests to HTTP format, parse responses, and decode errors, enabling direct interaction with the AWS RDS API for backup management tasks.",
      "description_length": 490,
      "index": 567,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteOptionGroup",
      "library": "aws-rds",
      "description": "This module handles the deletion of an RDS option group by converting a deletion request into an appropriately signed HTTP request targeting the AWS RDS service. It works with the `DeleteOptionGroupMessage` input type to specify the option group to delete and returns no output on success. It is used when permanently removing a custom option group that is no longer needed, ensuring it no longer appears in RDS listings or incurs charges.",
      "description_length": 439,
      "index": 568,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeValidDBInstanceModifications",
      "library": "aws-rds",
      "description": "This module handles the conversion of input and output types for the RDS operation that describes valid DB instance modifications. It provides functions to serialize input into an HTTP request and deserialize HTTP responses into output or error types, specifically for querying valid modifications to a DB instance. It works with RDS-specific input and output types, including error responses, and is used when checking possible configuration changes for a database instance in AWS RDS.",
      "description_length": 486,
      "index": 569,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribePendingMaintenanceActions",
      "library": "aws-rds",
      "description": "This module handles describing pending maintenance actions for AWS RDS instances by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with RDS-specific input and output types, such as `DescribePendingMaintenanceActionsMessage` and `PendingMaintenanceActionsMessage`, along with internal error types for failure handling. Concrete use cases include querying maintenance actions pending on a specific RDS instance or replication group to plan maintenance windows or system updates.",
      "description_length": 542,
      "index": 570,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeOptionGroupOptions",
      "library": "aws-rds",
      "description": "This module handles describing available RDS option group options by converting input parameters into HTTP requests and parsing responses. It works with RDS-specific types for input and output, including option group messages and internal error structures. It is used to query RDS for supported option group configurations, handling request signing, encoding, and response decoding.",
      "description_length": 382,
      "index": 571,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBParameters",
      "library": "aws-rds",
      "description": "This module handles querying and retrieving parameter group details from an RDS instance. It accepts a `DescribeDBParametersMessage` input, sends an HTTP request to the RDS service endpoint, and decodes the response into `DBParameterGroupDetails` or an appropriate error. It is used to inspect database parameter configurations, such as checking applied settings for tuning or compliance.",
      "description_length": 388,
      "index": 572,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBProxyTargets",
      "library": "aws-rds",
      "description": "This module handles describing targets associated with an RDS database proxy by defining the request and response types specific to that operation. It works with RDS proxy target data, including identifiers and endpoint information. Concrete use cases include retrieving registered database instances or clusters linked to a proxy for connection management and monitoring target health.",
      "description_length": 386,
      "index": 573,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.RemoveTagsFromResource",
      "library": "aws-rds",
      "description": "This module handles removing tags from an RDS resource by defining the input structure, error types, and conversion functions for HTTP requests and responses. It works directly with RDS tag removal messages and AWS error responses, providing the necessary tooling to construct and interpret API calls. Concrete use cases include detaching metadata tags from RDS instances or snapshots as part of resource management workflows.",
      "description_length": 426,
      "index": 574,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.AddRoleToDBCluster",
      "library": "aws-rds",
      "description": "This module associates an IAM role with an Amazon RDS DB cluster, enabling the role to manage cluster operations. It works with DB cluster identifiers and IAM role ARNs, targeting scenarios like configuring automated backups or enabling enhanced monitoring. The module sends a signed HTTP request to the RDS service endpoint and handles response parsing, including error states from the API.",
      "description_length": 391,
      "index": 575,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBClusterSnapshot",
      "library": "aws-rds",
      "description": "This module handles the deletion of RDS database cluster snapshots by defining the input and output types for the operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with RDS-specific message and result structures, including proper error handling and response parsing. Concrete use cases include initiating a snapshot deletion request and processing the resulting HTTP response or error.",
      "description_length": 442,
      "index": 576,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBProxies",
      "library": "aws-rds",
      "description": "This module handles the DescribeDBProxies operation for RDS, allowing retrieval of information about existing DB proxies. It works with input and output types specific to the RDS service, including request and response structures defined in Aws_rds.Types. Concrete use cases include querying the status and configuration of DB proxies in an AWS RDS environment.",
      "description_length": 361,
      "index": 577,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ModifyDBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module modifies an existing RDS DB cluster parameter group by applying specified parameter updates. It works with structured input and output types defined in `Aws_rds.Types`, specifically handling parameter group names and modification responses. Use this module to update parameters in an RDS cluster, such as adjusting database engine settings or enabling specific features.",
      "description_length": 382,
      "index": 578,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.AddSourceIdentifierToSubscription",
      "library": "aws-rds",
      "description": "This module adds a source identifier to an RDS event notification subscription by sending a signed HTTP request to the AWS RDS service. It handles the conversion of input data into a properly formatted query request and parses responses into either a success result or a structured error. It works directly with RDS event subscription messages and source identifiers, used when configuring event notifications for database instances or clusters.",
      "description_length": 445,
      "index": 579,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ModifyDBInstance",
      "library": "aws-rds",
      "description": "This module handles modifying an existing DB instance in AWS RDS by providing functions to construct and sign HTTP requests, send them to the correct service endpoint, and parse the responses or errors. It works directly with `ModifyDBInstanceMessage.t` as input and returns `ModifyDBInstanceResult.t` on success or `Errors_internal.t` on failure. It is used when changing DB instance settings such as allocated storage, engine version, or backup retention period.",
      "description_length": 464,
      "index": 580,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBCluster",
      "library": "aws-rds",
      "description": "This module handles modifying an Amazon RDS database cluster by providing functions to construct HTTP requests and parse responses according to the RDS API. It works with structured types representing RDS clusters, including input parameters for modification and output results. Concrete use cases include updating cluster configurations such as scaling settings, security groups, or engine versions via the RDS service.",
      "description_length": 420,
      "index": 581,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeCertificates",
      "library": "aws-rds",
      "description": "This module handles describing RDS certificates by converting input parameters into an HTTP request and parsing the response. It works with `DescribeCertificatesMessage` as input and returns a `CertificateMessage` output, interacting directly with AWS RDS service endpoints. It is used to retrieve information about RDS certificates, such as their identifiers and expiration dates, during RDS instance configuration or monitoring.",
      "description_length": 430,
      "index": 582,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DeleteGlobalCluster",
      "library": "aws-rds",
      "description": "This module handles the deletion of an AWS RDS global cluster by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS global cluster identifiers through the `DeleteGlobalClusterMessage.t` input type and returns a result indicating success or failure. Concrete use cases include programmatically removing a global cluster configuration and handling the associated API responses and errors.",
      "description_length": 487,
      "index": 583,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DeleteDBClusterEndpoint",
      "library": "aws-rds",
      "description": "This module handles the deletion of an RDS database cluster endpoint by defining the input and output types for the operation, along with functions to construct and interpret HTTP requests and responses. It works directly with `DeleteDBClusterEndpointMessage` as input and returns a `DBClusterEndpoint` upon success, using internal error types for failure handling. Concrete use cases include removing custom endpoints for managing database cluster connections in AWS RDS environments.",
      "description_length": 485,
      "index": 584,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeReservedDBInstances",
      "library": "aws-rds",
      "description": "This module handles describing reserved database instances in AWS RDS by converting input parameters into signed HTTP requests and parsing responses into structured outputs or errors. It works with input messages, output responses, and error types defined in the Aws_rds.Types and Aws_rds.Errors_internal modules. Concrete use cases include querying information about reserved DB instances, such as their status, duration, and associated offerings, by sending properly formatted and signed API requests to the RDS service endpoint.",
      "description_length": 531,
      "index": 585,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CreateGlobalCluster",
      "library": "aws-rds",
      "description": "This module handles the creation of a new RDS global cluster by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize HTTP responses into results or errors. It works directly with RDS-specific types such as `CreateGlobalClusterMessage` for input and `CreateGlobalClusterResult` for output, and interacts with AWS internal error types for failure handling. Concrete use cases include initiating a global cluster setup across multiple regions and processing the resulting cluster metadata or error responses from the AWS API.",
      "description_length": 591,
      "index": 586,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBInstances",
      "library": "aws-rds",
      "description": "This module handles describing DB instances in AWS RDS by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with `DescribeDBInstancesMessage.t` as input and returns `DBInstanceMessage.t` as output, along with handling specific RDS errors. It is used to query metadata and status of RDS database instances directly from AWS.",
      "description_length": 386,
      "index": 587,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBClusters",
      "library": "aws-rds",
      "description": "This module handles the AWS RDS operation to describe database clusters by converting input parameters into an HTTP request and parsing the response or errors. It works with input type `DescribeDBClustersMessage.t` and returns either a `DBClusterMessage.t` or an internal RDS error. Use this module to query metadata about existing RDS clusters, including configuration details and status, directly from AWS.",
      "description_length": 408,
      "index": 588,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBSnapshotAttribute",
      "library": "aws-rds",
      "description": "This module modifies attributes of a DB snapshot in Amazon RDS, specifically allowing changes to snapshot attributes such as authorization for other AWS accounts. It operates on DB snapshot identifiers and attribute values, enabling precise control over snapshot access permissions. Use this module to update which AWS accounts can restore a specific DB snapshot.",
      "description_length": 363,
      "index": 589,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterEndpoints",
      "library": "aws-rds",
      "description": "This module handles describing DB cluster endpoints in AWS RDS by converting input parameters into signed HTTP requests and parsing responses into structured output or errors. It works with `DescribeDBClusterEndpointsMessage` as input and `DBClusterEndpointMessage` as output, along with internal RDS error types. It is used to query endpoint details for a specific RDS DB cluster, such as custom endpoint configurations and associated resources.",
      "description_length": 446,
      "index": 590,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeGlobalClusters",
      "library": "aws-rds",
      "description": "This module handles describing AWS RDS global clusters by converting input parameters into HTTP requests and parsing responses. It works with input and output types specific to the RDS service, including encoded query parameters and XML responses. It is used to retrieve information about existing global clusters by sending properly signed HTTP requests to the RDS endpoint.",
      "description_length": 375,
      "index": 591,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyCertificates",
      "library": "aws-rds",
      "description": "This module handles modifying certificate configurations for RDS instances by converting input parameters into signed HTTP requests and parsing responses. It works with RDS-specific input and output types, including encoded query parameters and XML error responses. Concrete use cases include updating certificate identifiers and handling response decoding or error states during certificate modification operations.",
      "description_length": 416,
      "index": 592,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CopyDBSnapshot",
      "library": "aws-rds",
      "description": "This module handles copying an RDS database snapshot by defining the input and output types for the operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with RDS-specific message and result structures, encoding requests into query format and decoding responses into typed results or errors. It is used to initiate a snapshot copy operation against the RDS service, ensuring correct request signing and response parsing.",
      "description_length": 473,
      "index": 593,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CopyDBClusterSnapshot",
      "library": "aws-rds",
      "description": "This module handles copying RDS database cluster snapshots by providing functions to construct and process API requests. It works with input and output types defined in `Aws_rds.Types` for structured data exchange. Use this module to programmatically duplicate cluster snapshots across regions or accounts, handling request signing and response parsing directly.",
      "description_length": 362,
      "index": 594,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateOptionGroup",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS option groups by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize HTTP responses into results or errors. It works directly with RDS-specific types such as `CreateOptionGroupMessage` for input and `CreateOptionGroupResult` for output, alongside internal error types for handling failures. Concrete use cases include initiating an RDS option group creation request, signing it with the appropriate AWS credentials, and processing the server's response into structured data for further handling.",
      "description_length": 605,
      "index": 595,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBSecurityGroup",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database security groups by defining the input and output types specific to the operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with AWS RDS API messages and error responses, using `CreateDBSecurityGroupMessage.t` for request parameters and `CreateDBSecurityGroupResult.t` for responses. It is used when provisioning new database security groups in AWS RDS, ensuring correct query parameter encoding and response parsing.",
      "description_length": 520,
      "index": 596,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBProxy",
      "library": "aws-rds",
      "description": "This module implements the deletion of an RDS DB proxy by converting a deletion request into an HTTP call to AWS, handling request signing and endpoint configuration. It works with structured RDS proxy deletion requests and responses, translating them to and from HTTP format. Concrete use cases include removing a database proxy resource in an AWS RDS environment, handling errors specific to proxy deletion such as invalid state or non-existence.",
      "description_length": 448,
      "index": 597,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database cluster parameter groups by defining the input and output types specific to the operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with AWS RDS parameter group messages and responses, including error handling tailored to the RDS service. Concrete use cases include sending properly signed HTTP requests to create parameter groups and parsing the results or errors returned by the AWS RDS API.",
      "description_length": 497,
      "index": 598,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterParameterGroups",
      "library": "aws-rds",
      "description": "This module handles the AWS RDS API call to describe database cluster parameter groups. It works with input and output types specific to the RDS service, including encoded query parameters and XML responses. It is used to list existing cluster parameter groups, parse their metadata, or handle errors returned by the RDS service during retrieval.",
      "description_length": 346,
      "index": 599,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBEngineVersions",
      "library": "aws-rds",
      "description": "This module handles describing available database engine versions in AWS RDS by sending and receiving HTTP requests. It works with input and output types specific to the RDS service, including encoded query parameters and XML responses. Use this module to retrieve detailed version information for database engines, such as supported features and parameter groups, directly from RDS.",
      "description_length": 383,
      "index": 600,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.Types",
      "library": "aws-rds",
      "description": "This library component offers serialization, deserialization, and structured data manipulation capabilities for AWS RDS configuration, metadata, and operational status tracking. It operates on rich data models including database clusters, instances, snapshots, parameter groups, security settings, event subscriptions, and fault types, with consistent support for conversion between JSON, XML, and AWS query formats. These utilities enable robust API request/response handling, infrastructure monitoring, error propagation, and configuration management workflows in cloud environments.",
      "description_length": 585,
      "index": 601,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.StopDBInstance",
      "library": "aws-rds",
      "description": "This module handles stopping an Amazon RDS database instance by defining the input and output types for the operation, along with functions to convert between HTTP requests and native OCaml types. It works with RDS-specific message and result types, enabling direct interaction with the RDS service through properly signed HTTP requests. Concrete use cases include initiating a database instance shutdown and processing the response or errors from the RDS API.",
      "description_length": 460,
      "index": 602,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.RemoveRoleFromDBCluster",
      "library": "aws-rds",
      "description": "This module handles removing an IAM role from an Amazon RDS DB cluster by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS-specific message and error types, translating them to and from HTTP requests for communication with the AWS RDS service. Concrete use cases include revoking permissions for an IAM role that manages database access or auditing role associations in a DB cluster.",
      "description_length": 486,
      "index": 603,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CreateDBClusterEndpoint",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database cluster endpoints by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with `CreateDBClusterEndpointMessage.t` as input and `DBClusterEndpoint.t` as output, alongside internal error types for failure handling. Concrete use cases include configuring custom endpoints for RDS clusters, such as setting up reader or custom endpoints for load balancing or read replicas.",
      "description_length": 516,
      "index": 604,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.AddRoleToDBInstance",
      "library": "aws-rds",
      "description": "This module adds an IAM role to an RDS DB instance using the AWS API. It handles request signing, HTTP serialization, and error parsing specific to the RDS service. The module works with RDS instance identifiers and IAM role ARNs, converting them into properly formatted API requests and interpreting responses or errors from the server.",
      "description_length": 337,
      "index": 605,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.RestoreDBInstanceToPointInTime",
      "library": "aws-rds",
      "description": "This module handles restoring an RDS database instance to a specific point in time. It works with input and output types defined in the `Aws_rds.Types` module, specifically `RestoreDBInstanceToPointInTimeMessage` and `RestoreDBInstanceToPointInTimeResult`, along with internal error types for handling failures. It provides functions to convert between HTTP requests/responses and native types, sign requests, and parse errors, enabling direct interaction with the RDS service for point-in-time recovery operations.",
      "description_length": 515,
      "index": 606,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.PromoteReadReplica",
      "library": "aws-rds",
      "description": "This module handles promoting a read replica in Amazon RDS by providing functions to construct and interpret HTTP requests and responses for the `PromoteReadReplica` API operation. It works with input and output types specific to RDS read replica promotion, including encoded query parameters and XML-based error parsing. Concrete use cases include initiating the promotion of a read replica to a standalone DB instance and handling the resulting API response or error.",
      "description_length": 469,
      "index": 607,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.BacktrackDBCluster",
      "library": "aws-rds",
      "description": "This module handles backtracking a DB cluster to a specific point in time by sending and receiving RDS API requests. It works with `BacktrackDBClusterMessage` as input and returns a `DBClusterBacktrack` response, while managing errors specific to RDS operations. It is used to initiate and process the backtracking of a database cluster in AWS RDS.",
      "description_length": 348,
      "index": 608,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBSnapshot",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database snapshots by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS-specific types like `CreateDBSnapshotMessage` and `CreateDBSnapshotResult`, and handles error decoding from AWS XML responses. Concrete use cases include initiating a snapshot of a running RDS instance and processing the resulting metadata or error conditions from the AWS API.",
      "description_length": 499,
      "index": 609,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RestoreDBClusterToPointInTime",
      "library": "aws-rds",
      "description": "This module handles restoring an RDS database cluster to a specific point in time. It works with RDS cluster configuration data types, specifically `RestoreDBClusterToPointInTimeMessage` for input and `RestoreDBClusterToPointInTimeResult` for output. Use this module to initiate a point-in-time recovery of an RDS cluster via AWS API, converting requests to HTTP format and parsing the responses or errors returned by the service.",
      "description_length": 430,
      "index": 610,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CopyOptionGroup",
      "library": "aws-rds",
      "description": "This module handles copying an RDS option group by defining the input and output types for the operation, along with functions to convert between HTTP requests/responses and native OCaml types. It works with structured data types representing RDS option group configurations and AWS API errors. It is used to implement the CopyOptionGroup API call, ensuring correct serialization and deserialization of requests and responses.",
      "description_length": 426,
      "index": 611,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RestoreDBInstanceFromDBSnapshot",
      "library": "aws-rds",
      "description": "This module handles restoring a database instance from a snapshot in AWS RDS. It works with input and output types defined in the `Aws_rds.Types` module, along with internal error types for handling failures. Use this module when programmatically initiating a DB instance restore operation, such as in automated recovery workflows or infrastructure provisioning scripts.",
      "description_length": 370,
      "index": 612,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeEventCategories",
      "library": "aws-rds",
      "description": "This module handles describing event categories for AWS RDS by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with input types like `DescribeEventCategoriesMessage.t` and produces `EventCategoriesMessage.t`, interacting with AWS RDS service endpoints. It is used to retrieve event category information specific to RDS resources such as database instances and clusters.",
      "description_length": 434,
      "index": 613,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBInstance",
      "library": "aws-rds",
      "description": "This module handles the creation of a new Amazon RDS database instance by defining the input and output types for the operation, along with functions to serialize requests into HTTP format and deserialize HTTP responses into results or errors. It works directly with RDS-specific types such as `CreateDBInstanceMessage` for request configuration and `CreateDBInstanceResult` for response data, while using AWS internal error types to handle failure cases. Concrete use cases include initiating a database instance launch with specified parameters and processing the resulting API response or error.",
      "description_length": 598,
      "index": 614,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RemoveRoleFromDBInstance",
      "library": "aws-rds",
      "description": "This module handles removing an IAM role from an RDS DB instance by converting input data into a properly signed HTTP request and processing the response. It works with RDS-specific input structures and error types, encoding requests into query format with the correct action and version parameters. Use this module when detaching roles from RDS instances to manage access to external services like S3 or CloudWatch Logs.",
      "description_length": 421,
      "index": 615,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterSnapshotAttributes",
      "library": "aws-rds",
      "description": "This module handles the specific operation of describing attributes of a DB cluster snapshot in AWS RDS. It works with input and output types defined in the Aws_rds.Types module, along with internal error types for handling failures. It is used to retrieve information about which AWS accounts have access to a specific DB cluster snapshot.",
      "description_length": 340,
      "index": 616,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.RestoreDBClusterFromS3",
      "library": "aws-rds",
      "description": "This module handles restoring an Amazon RDS database cluster from an S3 bucket by defining the input and output types specific to the restore operation. It provides functions to convert native input into an HTTP request for the AWS RDS service and to parse HTTP responses into either a result or an error. Use this module when initiating and processing RDS cluster restoration tasks from S3 data sources.",
      "description_length": 404,
      "index": 617,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ModifyDBParameterGroup",
      "library": "aws-rds",
      "description": "This module modifies an existing RDS database parameter group by applying specified parameter changes. It handles the conversion of input data into HTTP requests and parsing of responses, specifically working with `ModifyDBParameterGroupMessage` as input and `DBParameterGroupNameMessage` as output. Use this module when adjusting database engine parameters, such as tuning query cache settings or modifying connection limits for a PostgreSQL RDS instance.",
      "description_length": 456,
      "index": 618,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RemoveSourceIdentifierFromSubscription",
      "library": "aws-rds",
      "description": "This module handles removing a source identifier from an RDS event subscription by defining the input and output types for the operation, along with functions to convert between HTTP requests/responses and those types. It works directly with RDS event subscription messages and error responses, encoding requests into query format and decoding results or errors from XML. Concrete use cases include managing event notifications for RDS instances by updating subscription filters.",
      "description_length": 479,
      "index": 619,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.StartExportTask",
      "library": "aws-rds",
      "description": "This module handles starting an RDS export task by converting input parameters into an HTTP request and parsing the response. It works with input type `StartExportTaskMessage.t` and returns an `ExportTask.t` or an error. Use this to initiate data exports from RDS to S3, specifying the source, target, and export options.",
      "description_length": 321,
      "index": 620,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CreateDBCluster",
      "library": "aws-rds",
      "description": "This module handles the creation of Amazon RDS database clusters by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS-specific types such as `CreateDBClusterMessage` for request configuration and `CreateDBClusterResult` for returned data, including error handling through `Errors_internal`. Concrete use cases include initiating a new multi-AZ DB cluster deployment, configuring cluster parameters like engine type and backup retention, and retrieving cluster metadata upon successful creation.",
      "description_length": 596,
      "index": 621,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBProxy",
      "library": "aws-rds",
      "description": "This module handles the creation of a DB proxy in AWS RDS by defining the request and response types, along with functions to convert between HTTP requests and native OCaml types. It works with `CreateDBProxyRequest` and `CreateDBProxyResponse` data structures, and processes errors specific to the RDS service. Concrete use cases include sending properly signed HTTP requests to create a DB proxy and parsing the resulting responses or errors from AWS.",
      "description_length": 453,
      "index": 622,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DeleteCustomAvailabilityZone",
      "library": "aws-rds",
      "description": "This module handles the deletion of custom availability zones in AWS RDS by providing functions to construct and interpret HTTP requests and responses. It works with input and output types specific to the delete operation, along with error handling tailored to the RDS service. Use this module to programmatically remove custom availability zones, handling success and error responses according to RDS API specifications.",
      "description_length": 421,
      "index": 623,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyCurrentDBClusterCapacity",
      "library": "aws-rds",
      "description": "This module modifies the capacity of an RDS database cluster by sending a specific API request to AWS. It handles the conversion of input parameters to an HTTP request and parsing of HTTP responses into structured output or error types. It is used when adjusting the compute capacity of a serverless RDS cluster in response to load changes.",
      "description_length": 340,
      "index": 624,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ModifyDBProxy",
      "library": "aws-rds",
      "description": "This module handles modifying an existing RDS DB proxy by defining the request structure, response decoding, and error parsing. It works with RDS-specific types for proxy configuration, including fields like proxy name, authentication, and network settings. Concrete use cases include updating a proxy's IAM authentication settings or adjusting its connection pooling behavior.",
      "description_length": 377,
      "index": 625,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.FailoverDBCluster",
      "library": "aws-rds",
      "description": "This module handles initiating a failover for an Amazon RDS DB cluster. It provides functions to construct HTTP requests from input parameters, parse responses into structured results or errors, and decode AWS-specific error responses into typed errors. It works directly with RDS-specific input and output types for failover operations, enabling precise control and error handling when managing database cluster failovers in AWS environments.",
      "description_length": 443,
      "index": 626,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateEventSubscription",
      "library": "aws-rds",
      "description": "This module handles the creation of event subscriptions in Amazon RDS by defining the input and output types for the operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with RDS event subscription messages and results, along with internal error types for handling failures. Concrete use cases include setting up notifications for RDS events, such as database instance state changes or backup completions, by sending properly signed HTTP requests to the RDS service endpoint.",
      "description_length": 529,
      "index": 627,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBCluster",
      "library": "aws-rds",
      "description": "This module handles the deletion of an Amazon RDS database cluster by defining the input and output types for the operation, along with functions to construct and interpret HTTP requests and responses. It works directly with RDS-specific types such as `DeleteDBClusterMessage` for request parameters and `DeleteDBClusterResult` for responses, alongside standard AWS error handling structures. Concrete use cases include initiating a database cluster deletion, encoding the request for transmission, and decoding or handling errors from the AWS RDS API response.",
      "description_length": 561,
      "index": 628,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ListTagsForResource",
      "library": "aws-rds",
      "description": "This module handles listing tags for a specified RDS resource by converting input data into an HTTP request and parsing the response or errors. It works with input and output types specific to the RDS service, including `ListTagsForResourceMessage` and `TagListMessage`. Use this module when retrieving metadata tags associated with RDS instances or snapshots for cost tracking or resource management.",
      "description_length": 401,
      "index": 629,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterParameters",
      "library": "aws-rds",
      "description": "This module handles the low-level mechanics of making and interpreting AWS RDS API calls for describing DB cluster parameters. It translates input and output types to and from HTTP requests, using RDS-specific message and error types. It is used to retrieve parameter group details for an RDS DB cluster, handling request signing, encoding, and response parsing.",
      "description_length": 362,
      "index": 630,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.AddTagsToResource",
      "library": "aws-rds",
      "description": "This module adds metadata tags to an Amazon RDS resource by sending a signed HTTP request to the RDS service. It handles input encoding into a query string format, response decoding, and error parsing specific to the RDS API. It works directly with RDS resource ARNs and tag lists, producing no output on success or a structured error on failure.",
      "description_length": 346,
      "index": 631,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeEngineDefaultParameters",
      "library": "aws-rds",
      "description": "This module handles querying and parsing engine default parameter information from AWS RDS. It converts input parameters into signed HTTP requests and decodes responses into structured results or specific RDS errors. It works directly with RDS engine default parameter messages and AWS error responses, supporting operations to retrieve and validate database engine defaults.",
      "description_length": 375,
      "index": 632,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterBacktracks",
      "library": "aws-rds",
      "description": "This module handles the conversion of RDS DBClusterBacktracks requests to HTTP and parsing of responses, specifically for the `DescribeDBClusterBacktracks` API call. It works with input and output types defined in the `Aws_rds.Types` module, including `DescribeDBClusterBacktracksMessage` and `DBClusterBacktrackMessage`. It is used when querying AWS RDS to retrieve information about DBCluster backtracks, handling request signing, encoding, and error decoding specific to that operation.",
      "description_length": 489,
      "index": 633,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.ModifyGlobalCluster",
      "library": "aws-rds",
      "description": "This module handles modifying AWS RDS global clusters by providing functions to construct HTTP requests from input parameters and parse responses or errors from AWS. It works with input and output types specific to modifying global clusters, including encoded query parameters and XML-parsed results. Concrete use cases include updating global cluster settings such as primary cluster selection or enabling/disabling global cluster features via direct AWS API calls.",
      "description_length": 466,
      "index": 634,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RegisterDBProxyTargets",
      "library": "aws-rds",
      "description": "This module handles registering DB proxy targets in AWS RDS by converting input requests to HTTP format and parsing responses or errors from the service. It works with RDS-specific input and output types defined in `Aws_rds.Types`, including proxy target identifiers and response metadata. Concrete use cases include integrating application logic with RDS proxy management, such as attaching or detaching database instances from a proxy.",
      "description_length": 437,
      "index": 635,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteEventSubscription",
      "library": "aws-rds",
      "description": "This module handles the deletion of RDS event subscriptions by converting input parameters into signed HTTP requests and parsing responses into structured outputs or errors. It works with RDS event subscription data types, including messages for deletion and results confirming removal. Concrete use cases include unsubscribing from RDS event notifications and managing event subscription lifecycle operations in AWS RDS environments.",
      "description_length": 434,
      "index": 636,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.StopActivityStream",
      "library": "aws-rds",
      "description": "This module handles stopping an RDS activity stream by defining the input and output types for the operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with RDS-specific request and response structures, including error handling tailored to the stop activity stream API call. Use this module to programmatically disable database activity streams in AWS RDS from OCaml applications.",
      "description_length": 434,
      "index": 637,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBClusterSnapshotAttribute",
      "library": "aws-rds",
      "description": "This module modifies attributes of an Amazon RDS DB cluster snapshot, enabling operations like updating the snapshot's access permissions. It works with RDS-specific data structures defined in `Aws_rds.Types`, including `ModifyDBClusterSnapshotAttributeMessage` for input and `ModifyDBClusterSnapshotAttributeResult` for output. A concrete use case is restricting or granting cross-account access to a DB cluster snapshot by modifying its attribute values.",
      "description_length": 456,
      "index": 638,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBClusterSnapshots",
      "library": "aws-rds",
      "description": "This module handles the AWS RDS operation to describe database cluster snapshots, converting input parameters into HTTP requests and parsing responses or errors from the service. It works with structured types representing RDS cluster snapshot messages and internal RDS errors. Use this module to query metadata about existing RDS cluster snapshots, such as their status, creation time, and associated database clusters.",
      "description_length": 420,
      "index": 639,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateCustomAvailabilityZone",
      "library": "aws-rds",
      "description": "This module handles the creation of custom availability zones in AWS RDS by defining the input and output types specific to the operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with RDS service messages, including `CreateCustomAvailabilityZoneMessage` for input and `CreateCustomAvailabilityZoneResult` for output, alongside internal error types for failure handling. Concrete use cases include initiating a request to create a custom availability zone and processing the resulting response or error from the RDS API.",
      "description_length": 575,
      "index": 640,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.StartDBInstance",
      "library": "aws-rds",
      "description": "This module handles starting an Amazon RDS database instance by defining the input and output types specific to the StartDBInstance operation. It provides functions to convert native input into an HTTP request, parse responses into results or errors, and map AWS errors to typed exceptions. Concrete use cases include initiating a stopped RDS instance and handling operation-specific failure conditions like invalid instance states or permissions errors.",
      "description_length": 454,
      "index": 641,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeOrderableDBInstanceOptions",
      "library": "aws-rds",
      "description": "This module handles describing orderable DB instance options in AWS RDS by converting input parameters into HTTP requests and parsing responses into structured outputs or errors. It works with input and output types specific to RDS instance configuration, such as `DescribeOrderableDBInstanceOptionsMessage` and `OrderableDBInstanceOptionsMessage`. Use this module to query available DB instance configurations, including engine versions, instance classes, and supported features, directly from AWS RDS.",
      "description_length": 503,
      "index": 642,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.PromoteReadReplicaDBCluster",
      "library": "aws-rds",
      "description": "This module handles promoting a read replica DB cluster in AWS RDS by defining the input and output types for the operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with RDS-specific message and result types defined in the Aws_rds.Types module. Use this module when implementing logic to promote a read replica cluster programmatically, such as in database management or failover automation workflows.",
      "description_length": 457,
      "index": 643,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.StopDBCluster",
      "library": "aws-rds",
      "description": "This module handles stopping an Amazon RDS database cluster by defining the input and output types specific to the stop operation, along with functions to convert between HTTP requests and native OCaml types. It works directly with RDS cluster identifiers and response data structures, encoding requests into signed HTTP queries and decoding responses into result or error types. Concrete use cases include initiating a cluster shutdown and handling the resulting state changes or errors in an RDS environment.",
      "description_length": 510,
      "index": 644,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBSecurityGroup",
      "library": "aws-rds",
      "description": "This module deletes a DB security group by sending a signed HTTP request to the RDS service. It encodes input parameters into a query string and handles response parsing, including error decoding based on HTTP status codes. It works with RDS-specific input and error types defined in Aws_rds.Types and Aws_rds.Errors_internal.",
      "description_length": 326,
      "index": 645,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBSnapshot",
      "library": "aws-rds",
      "description": "This module handles modifying DB snapshots in AWS RDS by converting input data into signed HTTP requests and parsing responses into structured results or errors. It works with RDS-specific input and output types, such as `ModifyDBSnapshotMessage.t` and `ModifyDBSnapshotResult.t`, along with internal error types for precise error handling. It is used to update attributes like retention period or snapshot identifiers for RDS database snapshots programmatically.",
      "description_length": 463,
      "index": 646,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RestoreDBInstanceFromS3",
      "library": "aws-rds",
      "description": "This module handles restoring a DB instance from an S3 bucket by converting input parameters into a properly signed HTTP request and processing the response. It works with input and output types specific to the RDS service, including encoded query parameters and XML-parsed results. Use this module to programmatically initiate a database restore operation from S3 data in AWS RDS workflows.",
      "description_length": 391,
      "index": 647,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RemoveFromGlobalCluster",
      "library": "aws-rds",
      "description": "This module handles removing a DB cluster from a global RDS cluster by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with RDS-specific types like `RemoveFromGlobalClusterMessage` and `RemoveFromGlobalClusterResult`, and handles error decoding from AWS XML responses. It is used when managing global database clusters, specifically to detach secondary clusters programmatically.",
      "description_length": 474,
      "index": 648,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBInstanceReadReplica",
      "library": "aws-rds",
      "description": "This module handles creating a read replica of a DB instance in AWS RDS. It works with input and output types specific to the CreateDBInstanceReadReplica operation, along with internal RDS error types. It converts native inputs to HTTP requests and parses HTTP responses into outputs or errors, using the appropriate AWS signing version and service name.",
      "description_length": 354,
      "index": 649,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyDBProxyTargetGroup",
      "library": "aws-rds",
      "description": "This module handles modifying an existing RDS DB proxy target group by defining the request structure, response decoding, and error handling specific to the operation. It works with HTTP requests and responses, converting between native OCaml types and AWS query format. Concrete use cases include updating connection pooling settings or target health checks for an RDS proxy.",
      "description_length": 376,
      "index": 650,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeSourceRegions",
      "library": "aws-rds",
      "description": "This module handles the conversion of RDS source region descriptions between native OCaml types and HTTP requests/responses. It works with input types representing RDS source region messages and produces output types decoded from HTTP responses, while handling specific RDS errors. It is used to serialize RDS source region queries into properly formatted HTTP requests and deserialize responses back into structured data.",
      "description_length": 422,
      "index": 651,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeEventSubscriptions",
      "library": "aws-rds",
      "description": "This module handles describing RDS event subscriptions by converting input parameters into HTTP requests and parsing responses. It works with input and output types specific to RDS event subscription descriptions, along with internal error types for handling failures. It is used to query AWS RDS for existing event subscription configurations, including filtering and pagination.",
      "description_length": 380,
      "index": 652,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeInstallationMedia",
      "library": "aws-rds",
      "description": "This module handles describing RDS installation media by converting input queries into properly signed HTTP requests and parsing responses into structured output or errors. It works with RDS-specific input and output types, such as `DescribeInstallationMediaMessage` and `InstallationMediaMessage`, along with internal error types. It is used to retrieve metadata about installation media stored in RDS, handling request signing, query encoding, and response decoding.",
      "description_length": 468,
      "index": 653,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeReservedDBInstancesOfferings",
      "library": "aws-rds",
      "description": "This module handles the AWS RDS operation to retrieve available reserved DB instance offerings. It processes input parameters into an HTTP request and decodes responses, working with RDS-specific message types and error structures. It is used to list reserved DB instance options that can be purchased for cost savings.",
      "description_length": 319,
      "index": 654,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeEvents",
      "library": "aws-rds",
      "description": "This module handles the conversion of RDS event descriptions between native OCaml types and HTTP requests/responses. It works with input types that specify event query parameters and outputs that contain event data from RDS. It is used to serialize RDS event requests into properly formatted HTTP queries and deserialize HTTP responses into structured event data or specific RDS errors.",
      "description_length": 386,
      "index": 655,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.StartDBCluster",
      "library": "aws-rds",
      "description": "This module handles starting an Amazon RDS database cluster by defining the input and output types specific to the start operation. It provides functions to convert requests to HTTP format and parse responses, ensuring correct encoding and decoding of RDS cluster start commands. It is used when initiating a stopped RDS cluster, handling the specific parameters and responses required for that action.",
      "description_length": 402,
      "index": 656,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DeleteDBSnapshot",
      "library": "aws-rds",
      "description": "This module handles the deletion of DB snapshots in AWS RDS by providing functions to construct and interpret HTTP requests and responses for the `DeleteDBSnapshot` API call. It works with input and output types defined in `Aws_rds.Types`, specifically `DeleteDBSnapshotMessage.t` for input and `DeleteDBSnapshotResult.t` for output, along with internal error types for handling failures. Concrete use cases include initiating a snapshot deletion, encoding the request into a properly signed HTTP call, and decoding or handling the response or errors returned by the AWS RDS service.",
      "description_length": 583,
      "index": 657,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBSubnetGroups",
      "library": "aws-rds",
      "description": "This module handles describing DB subnet groups in AWS RDS by converting input parameters into an HTTP request and parsing the response into structured output or error types. It works with `DescribeDBSubnetGroupsMessage.t` as input and returns `DBSubnetGroupMessage.t` as output, while handling internal RDS errors. It is used to retrieve information about configured DB subnet groups, such as their status, subnets, and associated metadata, directly from AWS RDS.",
      "description_length": 464,
      "index": 658,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyOptionGroup",
      "library": "aws-rds",
      "description": "This module handles modifying RDS option groups by providing functions to construct and interpret HTTP requests and responses for the `ModifyOptionGroup` API call. It works with input and output types specific to modifying option group configurations, including error handling for failed modifications. Concrete use cases include updating option settings in an RDS instance's option group and handling the resulting API responses or errors.",
      "description_length": 440,
      "index": 659,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeEngineDefaultClusterParameters",
      "library": "aws-rds",
      "description": "This module handles the AWS RDS operation to retrieve default parameter settings for a specified database engine in a cluster context. It works with input and output types defined in the `Aws_rds.Types` module, specifically `DescribeEngineDefaultClusterParametersMessage` and `DescribeEngineDefaultClusterParametersResult`. It is used to query RDS engine defaults, sign requests using AWS protocols, and parse responses or errors from the service.",
      "description_length": 447,
      "index": 660,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ApplyPendingMaintenanceAction",
      "library": "aws-rds",
      "description": "This module applies pending maintenance actions to AWS RDS resources using the `ApplyPendingMaintenanceActionMessage` input type and returns an `ApplyPendingMaintenanceActionResult`. It handles HTTP request construction, response decoding, and error parsing specific to this RDS operation. Use this module to programmatically apply scheduled maintenance updates to RDS instances or clusters directly via the AWS API.",
      "description_length": 416,
      "index": 661,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.RestoreDBClusterFromSnapshot",
      "library": "aws-rds",
      "description": "This module handles restoring an RDS database cluster from a snapshot by defining the input and output types specific to the operation, along with functions to convert between HTTP requests/responses and native OCaml types. It works directly with RDS-specific message and result structures, including error handling tailored to the restore operation. Concrete use cases include initiating a database cluster restore process and decoding the resulting API response or error conditions from AWS.",
      "description_length": 493,
      "index": 662,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CopyDBParameterGroup",
      "library": "aws-rds",
      "description": "This module handles copying an RDS database parameter group by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS-specific message and result types defined in `Aws_rds.Types`. Use this module when programmatically duplicating parameter groups in AWS RDS, such as when cloning database configurations across environments.",
      "description_length": 429,
      "index": 663,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.ModifyEventSubscription",
      "library": "aws-rds",
      "description": "This module handles modifying event subscriptions in AWS RDS by converting input data into HTTP requests and parsing responses into structured outputs or errors. It works with input and output types specific to RDS event subscription modifications, along with internal error types for precise error handling. Concrete use cases include enabling or disabling event notifications for specific RDS resources and updating the list of event categories that trigger notifications.",
      "description_length": 474,
      "index": 664,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBSubnetGroup",
      "library": "aws-rds",
      "description": "This module deletes a DB subnet group by sending an HTTP request with the specified DB subnet group name. It works with `DeleteDBSubnetGroupMessage.t` as input and returns no output on success or an error if the deletion fails. Use this module to remove unused or obsolete DB subnet configurations in an AWS RDS environment.",
      "description_length": 324,
      "index": 665,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeAccountAttributes",
      "library": "aws-rds",
      "description": "This module handles describing account attributes for an AWS RDS service by defining the input, output, and error types specific to that operation. It provides functions to convert between native OCaml types and HTTP requests/responses, ensuring proper encoding and decoding. It is used to retrieve account-specific metadata such as quota limits and feature availability directly from RDS.",
      "description_length": 389,
      "index": 666,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CopyDBClusterParameterGroup",
      "library": "aws-rds",
      "description": "This module handles copying an RDS DB cluster parameter group by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS-specific parameter group message and result types, as well as AWS internal error types. It is used when duplicating a parameter group to apply custom database engine settings across clusters.",
      "description_length": 416,
      "index": 667,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.CreateDBSubnetGroup",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS DB subnet groups by defining the input and output types specific to the operation, along with functions to serialize requests into HTTP format and deserialize responses. It works directly with `CreateDBSubnetGroupMessage.t` for request configuration and `CreateDBSubnetGroupResult.t` for results, while managing errors through `Errors_internal.t`. Concrete use cases include configuring subnet groups for RDS instances by encoding API calls into properly signed HTTP requests and decoding the XML responses into structured results or errors.",
      "description_length": 581,
      "index": 668,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeregisterDBProxyTargets",
      "library": "aws-rds",
      "description": "This module handles the deregistration of DB proxy targets in Amazon RDS by converting native input into HTTP requests and parsing responses or errors. It works with the `DeregisterDBProxyTargetsRequest` type for input and returns no output on success, using internal RDS error types for failure. Concrete use cases include removing specific database instances or endpoints from an RDS DB proxy target group.",
      "description_length": 408,
      "index": 669,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DeleteDBParameterGroup",
      "library": "aws-rds",
      "description": "This module deletes a DB parameter group by sending a properly signed HTTP request to the RDS service. It works with `DeleteDBParameterGroupMessage` as input and produces no output on success, handling errors via RDS-specific error types. It is used when managing RDS instances to remove custom parameter groups that are no longer needed.",
      "description_length": 338,
      "index": 670,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.CreateDBParameterGroup",
      "library": "aws-rds",
      "description": "This module handles the creation of RDS database parameter groups by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize responses. It works directly with RDS-specific types like `CreateDBParameterGroupMessage` for request configuration and `CreateDBParameterGroupResult` for successful responses, while errors are handled through `Errors_internal`. Concrete use cases include configuring custom parameter settings for RDS instances, such as setting up MySQL or PostgreSQL-specific database parameters during infrastructure provisioning.",
      "description_length": 607,
      "index": 671,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBSnapshotAttributes",
      "library": "aws-rds",
      "description": "This module handles describing attributes of RDS database snapshots by converting input data into signed HTTP requests and parsing responses into structured outputs or errors. It works directly with RDS snapshot attribute messages and error types, using AWS query format for communication. Use this module to retrieve attribute details like snapshot permissions or encryption status for a specific RDS snapshot.",
      "description_length": 411,
      "index": 672,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_rds.DescribeDBLogFiles",
      "library": "aws-rds",
      "description": "This module handles the low-level mechanics of making and interpreting AWS RDS `DescribeDBLogFiles` API requests. It translates between native OCaml types and HTTP requests/responses, including query parameter encoding, response parsing, and error decoding. It works directly with `DescribeDBLogFilesMessage.t` as input and `DescribeDBLogFilesResponse.t` as output, using internal RDS error types for failure handling. Use this module to programmatically retrieve metadata about database log files from an RDS instance, such as their size and last modified time.",
      "description_length": 562,
      "index": 673,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds.DescribeDBInstanceAutomatedBackups",
      "library": "aws-rds",
      "description": "This module handles the querying and parsing of automated backup information for RDS instances. It converts input parameters into signed HTTP requests targeting the RDS service and decodes responses into structured backup data or specific error types. It is used to retrieve details about automated snapshots, including their status, retention period, and associated DB instance identifiers.",
      "description_length": 391,
      "index": 674,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_rds",
      "library": "aws-rds",
      "description": "This module provides operations for provisioning, modifying, and managing AWS RDS infrastructure through API-driven tasks like creating/deleting clusters, instances, snapshots, and parameter groups, configuring IAM role associations, security rules, and tags, and orchestrating backups, failovers, and point-in-time recovery workflows. It operates on RDS-specific data structures such as certificates, proxies, event subscriptions, and maintenance actions, using structured request/response types for HTTP serialization, AWS signing, and error handling. Specific use cases include automating database lifecycle management, enforcing access control policies, replicating data across regions, and integrating RDS monitoring into infrastructure-as-code pipelines.",
      "description_length": 760,
      "index": 675,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 676,
    "meaningful_modules": 676,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 760,
    "min_description_length": 250,
    "avg_description_length": 384.71597633136093,
    "embedding_file_size_mb": 9.794368743896484
  }
}