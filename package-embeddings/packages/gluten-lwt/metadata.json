{
  "package": "gluten-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:44.578018",
  "modules": [
    {
      "module_path": "Gluten_lwt.Server",
      "library": "gluten-lwt",
      "description": "This module handles HTTP connection upgrades and request processing using Lwt for asynchronous I/O. It works with sockets and addresses, managing communication between clients and the server. Concrete use cases include handling WebSocket upgrades and serving HTTP requests with custom protocols.",
      "description_length": 295,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluten_lwt.Client",
      "library": "gluten-lwt",
      "description": "This module implements an Lwt-based client for handling protocol upgrades over a socket, providing functions to create a client instance, upgrade the connection, shut it down, and check if the connection is closed. It works with a socket type defined in the provided `Io` module and interacts with a runtime protocol implementation. Concrete use cases include managing WebSocket or HTTP/2 connection upgrades and lifecycle management in asynchronous network applications.",
      "description_length": 471,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluten_lwt.IO",
      "library": "gluten-lwt",
      "description": "Handles low-level socket communication with asynchronous I/O operations using Lwt. It provides functions to read from and write to sockets, shut down reception, and close connections, working directly with sockets, bigstrings, and iovec structures. Useful for implementing network protocols or streaming data over TCP connections.",
      "description_length": 330,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gluten_lwt",
      "library": "gluten-lwt",
      "description": "This module enables asynchronous network communication using Lwt, offering server and client interfaces for handling connections and data transfer. It provides core IO operations for reading and writing streams, along with server and client implementations for managing endpoints and message handling, supporting use cases like HTTP servers and custom network protocols. Submodules handle HTTP connection upgrades, client-side protocol upgrades over sockets, and low-level socket communication with support for bigstrings and iovecs. Together, they allow building and managing WebSocket connections, implementing TCP-based protocols, and handling concurrent asynchronous I/O operations directly over sockets.",
      "description_length": 708,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 708,
    "min_description_length": 295,
    "avg_description_length": 451.0,
    "embedding_file_size_mb": 0.014937400817871094
  }
}