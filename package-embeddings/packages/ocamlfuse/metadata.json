{
  "package": "ocamlfuse",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:31.182763",
  "modules": [
    {
      "module_path": "Fuse.Fuse_lib",
      "library": "ocamlfuse",
      "description": "This module implements operations for handling FUSE (Filesystem in Userspace) bindings, including checking null pointers, defining undefined behavior, and running the FUSE event loop. It works with opaque types representing FUSE instances and operations, providing named function wrappers for FUSE callbacks with arity support. Concrete use cases include integrating OCaml code with FUSE-based filesystems and handling dynamic operation naming during runtime.",
      "description_length": 459,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fuse.Unix_util",
      "library": "ocamlfuse",
      "description": "This module provides direct system call wrappers for Unix file operations, including reading from and writing to file descriptors using Bigarray buffers, converting between file descriptors and integers, and retrieving and manipulating file system statistics. It works with Unix.file_descr, Bigarray.Array1 for buffer management, and statvfs records for file system metadata. These functions are used to implement low-level file system operations in FUSE file systems, such as handling file reads/writes and responding to statvfs requests.",
      "description_length": 539,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fuse.Fuse_bindings",
      "library": "ocamlfuse",
      "description": "This module defines core types and operations for implementing FUSE (Filesystem in Userspace) filesystems. It provides functions to manage FUSE operations, read and process commands, and initialize or run the FUSE event loop. It works directly with FUSE-specific types like `fuse`, `fuse_operations`, and `fuse_cmd`, and is used to build custom filesystems by handling file operations such as read, write, and lookup.",
      "description_length": 417,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fuse",
      "library": "ocamlfuse",
      "description": "This module enables the creation of custom virtual filesystems by implementing low-level FUSE operations such as attribute handling, directory traversal, and file I/O. It integrates with child modules that provide FUSE event loop management, Unix system call wrappers for file operations, and core FUSE type definitions, allowing seamless interaction between OCaml code and user-space filesystem logic. Main data types include `buffer` for binary data, `context` for runtime state, and `operations` for defining filesystem behavior, alongside Unix.file_descr and Bigarray for efficient I/O. Example uses include mounting encrypted storage, implementing network-backed filesystems, and handling file reads/writes through FUSE callbacks.",
      "description_length": 735,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 4,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 735,
    "min_description_length": 417,
    "avg_description_length": 537.5,
    "embedding_file_size_mb": 0.01494598388671875
  }
}