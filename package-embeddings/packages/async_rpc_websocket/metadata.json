{
  "package": "async_rpc_websocket",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:55:57.383560",
  "modules": [
    {
      "module_path": "Rpc_websocket.Rpc.Connection_initiated_from",
      "library": "async_rpc_websocket",
      "description": "This module defines a type `t` representing the origin of a connection, either via a WebSocket request or a TCP connection. It includes a function `sexp_of_t` to convert values of type `t` into S-expressions for serialization or debugging. This is useful in RPC systems where connection source information needs to be logged or transmitted.",
      "description_length": 340,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpc_websocket.Rpc.Transport",
      "library": "async_rpc_websocket",
      "description": "This module provides low-level transport handling for RPC over WebSockets, including functions to create custom connection handlers and start WebSocket servers. It works directly with `Rpc.Connection.t`, `Transport.t`, and TCP address types, enabling integration with existing network infrastructure. Concrete use cases include implementing secure RPC endpoints over WebSockets, managing connection lifecycles, and embedding RPC services within HTTP servers.",
      "description_length": 458,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpc_websocket.Rpc.Connection_source",
      "library": "async_rpc_websocket",
      "description": "Converts a connection source value to an S-expression using a provided function for the contained type. Works with `Rpc_websocket.Rpc.Connection_source.t`, a type representing a source of RPC connections. Useful for logging or serializing connection state in a structured format.",
      "description_length": 279,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpc_websocket.Rpc",
      "library": "async_rpc_websocket",
      "description": "This module implements WebSocket-based RPC handling with functions to create HTTP and TCP servers that support RPC over WebSockets. It works with connection state types, Cohttp handlers, and Async RPC primitives to enable use cases like serving mixed HTTP/WebSocket RPC endpoints or connecting to remote WebSocket RPC services. Key operations include `handler` for building custom HTTP handlers, `serve` for starting WebSocket-only servers, and `client` for initiating connections to WebSocket RPC endpoints.",
      "description_length": 508,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpc_websocket",
      "library": "async_rpc_websocket",
      "description": "This module implements WebSocket-based RPC handling with functions to create HTTP and TCP servers that support RPC over WebSockets. It works with connection state types, Cohttp handlers, and Async RPC primitives to enable use cases like serving mixed HTTP/WebSocket RPC endpoints or connecting to remote WebSocket RPC services. Key operations include `handler` for building custom HTTP handlers, `serve` for starting WebSocket-only servers, and `client` for initiating connections to WebSocket RPC endpoints.",
      "description_length": 508,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 508,
    "min_description_length": 279,
    "avg_description_length": 418.6,
    "embedding_file_size_mb": 0.058554649353027344
  }
}