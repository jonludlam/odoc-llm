{
  "package": "guile",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 23,
  "creation_timestamp": "2025-06-18T16:36:05.767503",
  "modules": [
    {
      "module_path": "Bindings.Stubs.Uintptr.Infix",
      "description": "Provides arithmetic and bitwise operations on values of type t, including addition, subtraction, multiplication, division, modulus, and bit shifting. Supports logical operations such as AND, OR, and XOR, as well as left and right bit shifts. Used for low-level numeric manipulations in algorithms requiring direct control over integer representations.",
      "description_length": 351,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindings.Stubs.Intptr.Infix",
      "description": "Provides arithmetic and bitwise operations for a type `t`, including addition, subtraction, multiplication, division, modulus, and bit shifts. Supports logical operations such as AND, OR, and XOR, along with left and right bit shifting. Used for low-level numerical computations and bit manipulation in performance-critical code.",
      "description_length": 329,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindings.Stubs.Ptrdiff.Infix",
      "description": "Provides arithmetic and bitwise operations for a type `t`, including addition, subtraction, multiplication, division, remainder, and bit shifting. Supports logical operations such as AND, OR, and XOR, along with left and right shifts. Used for low-level numerical computations and bit manipulation in algorithms requiring direct control over integer representations.",
      "description_length": 366,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guile.Number.Float",
      "description": "Checks if a value is real, rational, infinite, or NaN, and determines if it is finite. Extracts numerators and denominators from rational values and converts between OCaml floats and Guile values. Returns special floating-point values like NaN and infinity.",
      "description_length": 257,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guile.Number.Complex",
      "description": "Checks if a value is a complex number, returning a boolean or a Scheme boolean. Operates on Scheme values (`scm`) representing numerical types. Used to validate input in numerical computations or type-specific processing.",
      "description_length": 221,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bindings.Stubs.Intptr",
      "description": "Performs arithmetic and bitwise operations on type `t`, including addition, subtraction, multiplication, division, modulus, and shifts. Supports logical operations like AND, OR, and XOR, enabling precise control over binary data. Operations are optimized for efficiency, making them suitable for tasks such as packing and unpacking bitfields or implementing low-level protocols. Examples include combining flags using OR, extracting specific bits with AND, and adjusting values with shifts.",
      "description_length": 490,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bindings.Stubs.Ptrdiff",
      "description": "Performs arithmetic and bitwise operations on a type `t`, including addition, subtraction, multiplication, division, and bit shifts. Supports logical operations like AND, OR, and XOR, enabling precise control over integer representations. It allows manipulation of binary data and is suited for algorithms requiring direct bit-level operations. Examples include calculating remainders, combining flags with OR, and adjusting values via shifts.",
      "description_length": 443,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindings.Stubs.Uintptr",
      "description": "Performs arithmetic and bitwise operations on integer values, including addition, subtraction, multiplication, division, modulus, and bit shifts. Supports logical operations like AND, OR, and XOR, enabling precise control over integer representations. Operations are applied directly to underlying numeric types, facilitating low-level manipulations. Examples include masking bits, scaling values, and performing efficient integer arithmetic in system-level code.",
      "description_length": 463,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guile.Bool",
      "description": "Encodes and decodes boolean values between OCaml and Guile, converting between `bool` and `scm` types. Provides predicate checks to determine if a value is a boolean and logical negation for boolean values. Used to ensure type consistency when interfacing OCaml logic with Guile's Scheme environment.",
      "description_length": 300,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guile.Number",
      "description": "Provides functions to classify numerical values, including checking for real, rational, infinite, or NaN status, extracting numerators and denominators, and converting between OCaml floats and Scheme values. Supports complex number detection and boolean validation for numerical inputs. Enables precise numerical analysis and type-safe operations in mixed-type computations. Examples include verifying if a value is finite, converting a rational number to its component parts, or checking if a Scheme value represents a complex number.",
      "description_length": 535,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guile.Pair",
      "description": "Provides operations to construct and manipulate cons cells, including accessing and modifying their head and tail, and checking their type. Works with `scm` values representing Scheme-like objects, enabling low-level list manipulation. Used to build and traverse linked structures in a Scheme interpreter or similar environment.",
      "description_length": 328,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guile.List",
      "description": "Checks if a list is empty, converts between OCaml lists and Guile lists by extracting or encoding elements with a provided function. Operates on OCaml lists and Guile list representations. Used to interface OCaml code with Guile scripting environments by transforming data structures.",
      "description_length": 284,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guile.Char",
      "description": "Checks if a value is a character, numeric, whitespace, or alphabetic, and identifies case and Unicode category. Operates on Scheme values and OCaml characters, converting between them with explicit functions. Used to validate and classify characters in mixed-language environments.",
      "description_length": 281,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guile.String",
      "description": "Checks if a value is a string and determines if it is empty. Constructs Guile strings from character lists and converts between OCaml and Guile string representations. Returns the length of a Guile string.",
      "description_length": 205,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guile.Symbol",
      "description": "Checks if a value is a symbol and converts between OCaml strings and Guile symbols, generating unique symbols with a given prefix. Works with SCM values and OCaml strings, supporting interactions with Guile's symbol system. Used to create unique identifiers in macro expansions or to safely pass symbol names between OCaml and Guile code.",
      "description_length": 338,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guile.Error",
      "description": "Provides functions to raise and handle Guile scheme errors with custom tags, using scheme values for error identification. Operates with scheme objects (scm) and string messages to communicate errors between OCaml and Guile. Used to signal specific error conditions during scheme function execution and to manage those errors gracefully in embedded OCaml code.",
      "description_length": 360,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guile.Functions",
      "description": "Registers OCaml functions with the Guile scheme interpreter, mapping them to specified names and handling argument flexibility. Each function accepts a variable number of scheme values and returns a scheme value, supporting up to 10 parameters. Configures optional arguments and rest parameters for precise control over scheme function signatures.",
      "description_length": 347,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guile.Sexp",
      "description": "Converts between OCaml s-expressions and Guile scheme values, enabling interoperability. Processes raw scheme objects and transforms them into structured s-expression trees. Used to pass complex data structures between OCaml and Guile scripts.",
      "description_length": 243,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Guile.Module",
      "description": "Resolves module names, loads them if necessary, or creates a new one. Manages variable lookups across module paths and defines or exports symbols within the current module. Supports scoped execution and module dependencies through explicit module handling.",
      "description_length": 256,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindings.Stubs",
      "description": "Provides arithmetic and bitwise operations on integer types, including addition, subtraction, multiplication, division, modulus, shifts, and logical operations like AND, OR, XOR. Supports platform-independent and exact-width integer manipulations, enabling tasks such as bitfield packing, flag combination, and low-level data processing. Operations work directly on underlying numeric types, allowing precise control over binary representations. Examples include extracting bits with AND, adjusting values via shifts, and combining flags using OR.",
      "description_length": 547,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "guile",
      "description": "Provides functions to initialize Guile, register OCaml functions for use in Scheme, and start a Guile REPL. Works with OCaml functions, Scheme expressions, and evaluation contexts. Enables embedding Scheme scripting in OCaml applications, such as extending a turtle graphics program with custom drawing commands.",
      "description_length": 312,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Guile",
      "description": "Provides type conversion and manipulation between OCaml and Guile, handling booleans, numbers, lists, strings, symbols, and s-expressions. Includes operations for checking, classifying, and transforming values, along with error handling and module management. Supports constructing cons cells, validating characters, and interfacing OCaml functions with Guile's environment. Examples include converting a rational number to numerator and denominator, building linked lists, or raising custom scheme errors from OCaml.",
      "description_length": 517,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bindings",
      "description": "Perform arithmetic and bitwise operations on integer types, including addition, subtraction, multiplication, division, modulus, shifts, and logical operations like AND, OR, XOR. Supports exact-width integer manipulations for tasks such as bitfield packing, flag combination, and low-level data processing. Operations work directly on numeric types, enabling precise control over binary representations. Examples include extracting specific bits with AND, adjusting values via shifts, and combining flags using OR.",
      "description_length": 513,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 23,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 547,
    "min_description_length": 205,
    "avg_description_length": 360.2608695652174,
    "embedding_file_size_mb": 0.08398914337158203
  }
}