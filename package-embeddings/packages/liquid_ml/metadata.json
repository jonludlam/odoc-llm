{
  "package": "liquid_ml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:49.265665",
  "modules": [
    {
      "module_path": "Liquid_ml.Exports",
      "library": "liquid_ml",
      "description": "This module provides operations for parsing Liquid templates into structured representations, including control structures, expressions, and variable assignments, along with utilities for converting lexical values to runtime types and manipulating ranges or lists. It supports creating and transforming Liquid values via filters, object packing, and typed value construction, enabling dynamic template rendering and data transformation workflows. Key use cases include processing template logic, integrating structured data with Liquid's templating engine, and applying parameterized value transformations.",
      "description_length": 606,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_ml.Logger",
      "library": "liquid_ml",
      "description": "This module provides functions for conditional logging and value inspection, using log policies to control output. It handles strings, options, and arbitrary values, with support for grouping logged values. Use cases include debugging template rendering by logging variable values or execution steps based on configured verbosity.",
      "description_length": 330,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Liquid_ml.Liquid",
      "library": "liquid_ml",
      "description": "This module enables parsing and rendering Liquid templates by processing abstract syntax trees composed of expressions, control structures, and lexical tokens. It operates on hierarchical data representations like `lex_value` and `liquid_object` to support dynamic variable substitution, conditional logic, and iterative constructs in text generation workflows. Key applications include building customizable template renderers for HTML/email output and implementing domain-specific extensions through value conversion utilities and filter pipelines.",
      "description_length": 550,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_ml",
      "library": "liquid_ml",
      "description": "This module processes Liquid templates by parsing, transforming, and rendering structured data through control structures, expressions, and filters. It defines core data types like `lex_value`, `liquid_object`, and abstract syntax trees to represent and manipulate template logic, supporting operations such as variable substitution, conditionals, and iteration. Users can build custom renderers for HTML or email generation, debug templates with conditional logging, and apply filters or type conversions to dynamic values during execution. Example workflows include rendering data-driven templates, inspecting runtime variables, and extending Liquid's behavior with domain-specific transformations.",
      "description_length": 700,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 700,
    "min_description_length": 330,
    "avg_description_length": 546.5,
    "embedding_file_size_mb": 0.014951705932617188
  }
}