{
  "package": "datakit-server-9p",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:50:18.550098",
  "modules": [
    {
      "module_path": "Fs9p_error.Infix",
      "library": "datakit-server-9p",
      "description": "Implements a custom bind operator for asynchronous result values, enabling sequential composition of Lwt promises that return `Result.result` values. Works with `('a, Fs9p_error.t) Result.result Lwt.t`, allowing error handling to propagate through chains of asynchronous computations. Useful for writing concise error-aware async workflows without explicit pattern matching at each step.",
      "description_length": 387,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fs9p.Make",
      "library": "datakit-server-9p",
      "description": "Builds a 9p server that exposes a virtual file system over a flow-based transport. It provides the `accept` function to handle incoming connections, process 9p requests, and serve a given virtual directory tree. This module is used to implement networked file servers using the 9p protocol over arbitrary flow implementations, such as Unix domain sockets or TCP.",
      "description_length": 362,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fs9p",
      "library": "datakit-server-9p",
      "description": "This module implements a 9p server that exposes a virtual file system over a flow-based transport. It provides the `accept` function to handle incoming connections and serve a virtual directory tree using the 9p protocol. It is used to build networked file servers over transports like Unix domain sockets or TCP.",
      "description_length": 313,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fs9p_error",
      "library": "datakit-server-9p",
      "description": "This module defines an error type for handling 9P protocol errors and provides functions to map and construct error values within asynchronous result contexts. It includes a custom operator for sequencing async result values, enabling clean error propagation through Lwt promises. Useful for implementing 9P server operations where errors must be transformed and propagated across asynchronous steps.",
      "description_length": 400,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 400,
    "min_description_length": 313,
    "avg_description_length": 365.5,
    "embedding_file_size_mb": 0.05836009979248047
  }
}