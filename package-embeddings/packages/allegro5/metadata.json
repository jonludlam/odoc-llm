{
  "package": "allegro5",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 25,
  "creation_timestamp": "2025-08-14T23:32:01.834017",
  "modules": [
    {
      "module_path": "Al5.Event.MouseButton",
      "library": "allegro5",
      "description": "Represents mouse button events with position, pressure, and associated display. Contains fields for coordinates (x, y, z, w), button identifier, pressure level, and the display where the event occurred. Used to handle and respond to mouse input in graphical applications.",
      "description_length": 271,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.Event.Touch",
      "library": "allegro5",
      "description": "Handles touch input events with precise coordinates and movement tracking. It provides access to touch point properties like position, delta changes, and device display context. Useful for implementing gesture recognition or interactive UI elements on touch-enabled devices.",
      "description_length": 274,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.Event.MouseMove",
      "library": "allegro5",
      "description": "This module handles mouse movement events, capturing position, delta changes, pressure, and associated display. It provides access to raw and relative coordinates, wheel data, and pressure levels for precise input tracking. Use it to implement custom mouse interactions, gesture recognition, or input logging in graphical applications.",
      "description_length": 335,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.LineCap",
      "library": "allegro5",
      "description": "This module defines an enumerated type `t` representing different line cap styles for rendering lines in vector graphics. It includes variants for no cap, square, round, triangle, and closed line ends. This type is used directly in specifying stroke properties when drawing paths or shapes in a graphics context.",
      "description_length": 312,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.TouchState",
      "library": "allegro5",
      "description": "Tracks touch input state with precise coordinates and movement deltas. It handles individual touch points with identifiers, positions, and display context. Useful for gesture recognition, touch-based UI interactions, and motion tracking in graphical applications.",
      "description_length": 263,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Ttf",
      "library": "allegro5",
      "description": "This module provides constants for configuring text rendering options, specifically controlling kerning, color depth, and hinting behavior. It works with integer values representing different rendering flags. These constants are used when loading or rendering fonts to specify options like disabling kerning, forcing monochrome output, or skipping autohinting.",
      "description_length": 360,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Event",
      "library": "allegro5",
      "description": "Handles input events from joysticks, keyboards, and touch/mouse devices with precise coordinate and state tracking. It supports detailed event types like key presses, mouse movements with deltas, touch gestures, and display lifecycle changes. Use it to implement game controls, interactive UIs, or input logging in multimedia applications.",
      "description_length": 339,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.Keymod",
      "library": "allegro5",
      "description": "This module defines integer constants representing keyboard modifier flags used in event handling. It allows developers to check or combine modifier states like shift, control, and alt during input processing. Use this module when interpreting keyboard events to determine which modifiers are active.",
      "description_length": 300,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.MouseState",
      "library": "allegro5",
      "description": "Tracks mouse position, wheel movement, and button states with precision. Provides access to raw device coordinates, scroll wheel deltas, and pressure sensitivity for applications like drawing tools or interactive UIs. Works directly with mouse input events in real-time contexts such as game loops or graphical interfaces.",
      "description_length": 322,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.DisplayOrientation",
      "library": "allegro5",
      "description": "Represents and manipulates screen orientation states using a polymorphic variant type. Includes functions to convert orientations to string labels, apply transformations, and determine valid transitions between states. Useful for handling device rotation events or rendering adjustments in graphical applications.",
      "description_length": 313,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.Bitmap",
      "library": "allegro5",
      "description": "This module provides constants for configuring bitmap rendering behavior, specifically controlling alpha channel handling and format preservation. It works with integer flags used in graphics operations to specify rendering modes. Concrete use cases include setting display options when loading or manipulating images in a graphics application.",
      "description_length": 344,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.JoystickState",
      "library": "allegro5",
      "description": "Represents the state of a joystick at a given moment, including button presses and axis positions. Contains functions to query individual button states and axis values directly. Useful for real-time input handling in games or interactive applications where immediate joystick feedback is required.",
      "description_length": 297,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.StandardPath",
      "library": "allegro5",
      "description": "This module defines an enumerated type representing common system paths and provides functions to resolve these paths at runtime. It works with string values and system-specific environment variables to determine locations like user directories, temporary storage, and executable paths. Concrete use cases include locating user data directories for configuration files or determining the executable's location for resource loading.",
      "description_length": 431,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.MouseButton",
      "library": "allegro5",
      "description": "Defines integer constants for mouse button identifiers, including left, right, and middle buttons. Used to represent and distinguish mouse input events in graphical applications. Directly supports handling user interactions in UI components like click detection or gesture recognition.",
      "description_length": 285,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.Key",
      "library": "allegro5",
      "description": "This module defines a comprehensive set of key symbols representing physical keyboard keys, including letters, numbers, function keys, modifiers, and special keys. It provides direct value constructors for each key, enabling precise key identification and handling in input processing systems. Concrete use cases include mapping user input in games, implementing keyboard shortcuts, and managing key events in graphical interfaces.",
      "description_length": 431,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Text",
      "library": "allegro5",
      "description": "This module defines constants for text alignment, including left, center, right, and integer alignment. It works with integers to represent alignment options in text formatting operations. These values are used directly in functions that require alignment specifications, such as rendering or layout utilities.",
      "description_length": 310,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Flip",
      "library": "allegro5",
      "description": "This module defines two constants, `horizontal` and `vertical`, both of type `int`. These values represent directional constants commonly used in graphical operations or layout calculations. They can be used directly in functions that require direction-based logic, such as flipping elements in a user interface or transforming coordinates in a 2D space.",
      "description_length": 354,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.LineJoin",
      "library": "allegro5",
      "description": "Represents how lines are joined in vector graphics. It defines four options: `NONE` for no join, `BEVEL` for a diagonal corner, `ROUND` for a circular join, and `MITER` with a float limit for sharp angled joins. Used when configuring stroke styles in canvas rendering to control the appearance of connected line segments.",
      "description_length": 321,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.KeyboardState",
      "library": "allegro5",
      "description": "Tracks keyboard input state for a specific display, including key presses and releases. Works with `Al5.display` and internal private state to manage real-time keyboard events. Useful for handling game controls or interactive applications where per-frame key state updates are required.",
      "description_length": 286,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.ShaderPlatform",
      "library": "allegro5",
      "description": "This module defines a variant type representing different shader platforms and dialects, including GLSL, HLSL, and minimal versions optimized for size or compatibility. It is used to specify the target platform when compiling or generating shader code in a rendering or graphics pipeline. Concrete use cases include selecting appropriate shader syntax during asset export or configuring rendering backends for cross-platform compatibility.",
      "description_length": 439,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.DisplayMode",
      "library": "allegro5",
      "description": "Represents display configurations with specific width, height, pixel format, and refresh rate. Provides functions to compare, serialize, and validate display modes for graphics applications. Used to select or match display settings in game engines or windowing systems.",
      "description_length": 269,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Display",
      "library": "allegro5",
      "description": "This module defines integer constants representing display modes and options for configuring windows and rendering contexts. It supports operations related to window creation, such as setting fullscreen, resizable, or frameless modes, and specifying graphics APIs like OpenGL or Direct3D. These values are used directly when initializing display settings in applications requiring specific rendering capabilities or window behaviors.",
      "description_length": 433,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.ShaderType",
      "library": "allegro5",
      "description": "Represents shader types in graphics programming, specifically vertex and pixel shaders. Used to distinguish between different stages of the rendering pipeline in OpenGL or similar systems. Directly supports creating and managing shader programs by identifying the type during compilation and linking.",
      "description_length": 300,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Playmode",
      "library": "allegro5",
      "description": "This module defines a set of playback modes for handling sequential or repeated execution of animations or sequences. It includes operations to determine whether a mode is looping, whether it plays in reverse, and how it transitions between forward and backward directions. These modes are used to control playback behavior in animation systems, such as UI transitions or game loops.",
      "description_length": 383,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5",
      "library": "allegro5",
      "description": "This module provides real-time input handling, 2D graphics rendering, and multimedia management operations for game and application development. It works with bitmaps, displays, shaders, audio streams, and input device states (keyboard, mouse, joystick) to enable use cases like windowed graphics applications, event-driven input processing, and pixel-level image manipulation. Key functionality includes display configuration, event queue management, geometric shape drawing, and low-level resource handling for audio, fonts, and raster graphics.",
      "description_length": 547,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 25,
    "meaningful_modules": 25,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 547,
    "min_description_length": 263,
    "avg_description_length": 340.76,
    "embedding_file_size_mb": 0.36272621154785156
  }
}