{
  "package": "allegro5",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 25,
  "creation_timestamp": "2025-07-15T23:09:35.631116",
  "modules": [
    {
      "module_path": "Al5.Event.MouseMove",
      "library": "allegro5",
      "description": "This module handles mouse movement events, capturing position, delta changes, pressure, and associated display. It provides access to detailed motion data through structured fields for input processing. Use it to implement custom mouse interactions, gesture detection, or input logging.",
      "description_length": 286,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Event.Touch",
      "library": "allegro5",
      "description": "Handles touch input events with precise coordinates and movement tracking. It provides access to touch point properties like position, delta changes, and device display context. Useful for implementing gesture recognition or interactive UI elements on touch-enabled devices.",
      "description_length": 274,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Event.MouseButton",
      "library": "allegro5",
      "description": "This module handles mouse button events in a graphical application. It provides functions to retrieve the coordinates, button pressed, pressure level, and associated display context from a mouse event. Use it to implement custom mouse interactions, such as drag-and-drop or click-based controls.",
      "description_length": 295,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.StandardPath",
      "library": "allegro5",
      "description": "Represents common system paths as enumerated constants, including resources, temporary directories, user home and document folders, executable name, and application-specific data and settings directories. Provides functions to resolve these paths at runtime, retrieve their string representations, and construct new paths relative to them. Useful for cross-platform applications needing consistent access to system-specific directories without hardcoding values.",
      "description_length": 462,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.TouchState",
      "library": "allegro5",
      "description": "Tracks touch input state with precise coordinates, movement deltas, and device information. Works with touch events on a display, capturing position, motion, and primary touch status. Useful for handling multi-touch gestures and input tracking in graphical applications.",
      "description_length": 270,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.DisplayOrientation",
      "library": "allegro5",
      "description": "This module defines a set of constants representing display orientations, including both rotational angles and physical device orientations. It supports operations to compare, convert, and match against these orientation values. Use this module to handle screen rotation states or device orientation changes in graphical applications.",
      "description_length": 334,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.KeyboardState",
      "library": "allegro5",
      "description": "Tracks keyboard input state for a specific display. Provides functions to check if a key is currently pressed and to wait for a key press or release event. Works with `Al5.display` and key identifiers to manage real-time input handling in interactive applications like games or UIs.",
      "description_length": 282,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.JoystickState",
      "library": "allegro5",
      "description": "Represents the state of a joystick at a specific moment, including button presses and axis positions. Contains functions to query individual button states and axis values numerically. Useful for reading input from game controllers in real-time applications like games or interactive simulations.",
      "description_length": 295,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.Playmode",
      "library": "allegro5",
      "description": "This module defines a set of playback modes for handling sequential or repeated execution of animations or sequences. It includes operations to determine whether a mode is looping, whether it supports bidirectional playback, and how many times it should play forward or backward. These modes are used to control animation behavior in UI components or game loops where specific playback patterns are required.",
      "description_length": 408,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.Bitmap",
      "library": "allegro5",
      "description": "This module provides constants for configuring bitmap rendering behavior, specifically controlling alpha channel handling and format preservation. It works with integer flags used in graphics operations to specify rendering modes. Concrete use cases include setting display options when loading or manipulating images in a graphics application.",
      "description_length": 344,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.LineCap",
      "library": "allegro5",
      "description": "This module defines an enumerated type `t` representing different line cap styles for rendering lines in vector graphics. It includes variants for common line cap shapes such as `ROUND`, `SQUARE`, and `TRIANGLE`, along with `NONE` and `CLOSED` for special cases. It is used to specify how the ends of open and closed paths are rendered in drawing operations.",
      "description_length": 358,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Text",
      "library": "allegro5",
      "description": "This module defines constants for text alignment, including left, center, right, and integer alignment. It works with integer values to represent alignment options in text formatting operations. These constants are used to specify alignment behavior in functions that render or manipulate textual output, such as in UI components or document layout systems.",
      "description_length": 357,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.LineJoin",
      "library": "allegro5",
      "description": "Represents line join styles for vector graphics rendering. Supports operations to define how paths connect at corners using `NONE`, `BEVEL`, `ROUND`, or `MITER` with a specified limit. Used when configuring stroke properties in canvas or SVG-like rendering contexts.",
      "description_length": 266,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.MouseButton",
      "library": "allegro5",
      "description": "This module defines integer constants representing mouse button identifiers, specifically left, right, and middle buttons. It provides direct access to these values for use in event handling and input processing. Concrete use cases include checking which mouse button was pressed in GUI event loops or game input systems.",
      "description_length": 321,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Flip",
      "library": "allegro5",
      "description": "Performs horizontal and vertical pixel flipping on image data. Expects image dimensions as integer inputs to compute flipped coordinates. Useful for rendering mirrored sprites or inverted visuals in game development.",
      "description_length": 216,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.Key",
      "library": "allegro5",
      "description": "This module defines a comprehensive set of key symbols representing standard keyboard keys, including letters, numbers, function keys, modifiers, and special keys. It provides direct value constructors for each key, enabling precise key identification and handling in input processing systems. Concrete use cases include mapping user input in games, implementing keyboard shortcuts, and managing key events in GUI applications.",
      "description_length": 427,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.Ttf",
      "library": "allegro5",
      "description": "This module provides constants for configuring text rendering options in a graphics library. It defines flags for disabling kerning, enabling monochrome rendering, and disabling autohinting. These constants are used when loading or rendering fonts to control visual appearance and performance trade-offs.",
      "description_length": 304,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Display",
      "library": "allegro5",
      "description": "This module defines integer constants representing display modes and options for configuring graphics windows. It supports operations for setting window properties such as fullscreen, resizable, and OpenGL versions. These flags are used when creating or modifying display contexts to control rendering behavior and window appearance.",
      "description_length": 333,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.MouseState",
      "library": "allegro5",
      "description": "Tracks mouse state in a graphical application, providing precise coordinates, button presses, and pressure levels. It handles input events with integer-based x/y/z/w positions, bitmasked buttons, and floating-point pressure. Useful for real-time drawing tools, game controls, or interactive UIs requiring fine-grained mouse input.",
      "description_length": 330,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Event",
      "library": "allegro5",
      "description": "This module processes input and system events into structured types like `KEY_DOWN`, `MOUSE_BUTTON_UP`, and `DISPLAY_RESIZE`, enabling direct interaction with devices and window management. It includes submodules for handling mouse movement, touch input, and mouse button events, each exposing detailed event properties such as position, delta, pressure, and display context. These tools support custom interactions like gesture detection, drag-and-drop, and UI control mapping in graphical or touch-based applications.",
      "description_length": 519,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.Keymod",
      "library": "allegro5",
      "description": "This module defines integer constants representing keyboard modifier flags used in event handling. It allows bitwise combination and comparison of modifier states such as shift, control, and alt in input processing systems. Direct use cases include checking or constructing modifier masks for keyboard events in GUI or game development.",
      "description_length": 336,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Al5.ShaderType",
      "library": "allegro5",
      "description": "This module defines a variant type representing the two main types of shaders used in graphics programming: vertex and pixel shaders. It provides direct, explicit constructors for each shader type, ensuring clear and unambiguous shader kind declarations. This module is used to specify shader stages when compiling or linking graphics pipelines in low-level rendering systems.",
      "description_length": 376,
      "index": 21,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Al5.ShaderPlatform",
      "library": "allegro5",
      "description": "This module defines a set of symbolic representations for shader platforms and their versions, primarily used to specify the target language and capabilities when compiling shaders. It includes variants for GLSL, HLSL, and their minimal or version-specific subsets like HLSL_SM_3_0. Concrete use cases include selecting the appropriate shader compilation path in a rendering engine or configuring shader output for different graphics APIs.",
      "description_length": 439,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5.DisplayMode",
      "library": "allegro5",
      "description": "This module defines a display mode with specific screen dimensions, pixel format, and refresh rate. It provides functions to compare, select, and adjust display settings for graphics applications. Commonly used in game development and multimedia software to configure window or fullscreen output.",
      "description_length": 296,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Al5",
      "library": "allegro5",
      "description": "This module enables low-level 2D graphics, input, and audio management for multimedia applications, centered around core data types like bitmaps, displays, event queues, and input state trackers. It supports real-time rendering with shaders, timers, and audio streams, while submodules handle touch, keyboard, and mouse input with precise state tracking and event processing. Specific capabilities include dynamic window configuration, sprite flipping, line styling, text alignment, and joystick querying, all usable across platforms via system path resolution and display mode selection. Use it to build games, interactive tools, or visual applications that require direct control over graphics and input across different devices and environments.",
      "description_length": 748,
      "index": 24,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 25,
    "meaningful_modules": 25,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 748,
    "min_description_length": 216,
    "avg_description_length": 355.04,
    "embedding_file_size_mb": 0.09130573272705078
  }
}