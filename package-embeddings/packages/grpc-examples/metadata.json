{
  "package": "grpc-examples",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:29:34.259130",
  "modules": [
    {
      "module_path": "Greeter.Mypackage.HelloRequest",
      "description": "Generates and manipulates a message containing a user's name, using a string type. It serializes and deserializes the message to and from binary and JSON formats with specific reader and writer interfaces. Provides a way to retrieve the fully qualified protobuf name of the message.",
      "description_length": 282,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Greeter.Mypackage.HelloReply",
      "description": "Generates and manipulates a greeting message using a string-based type. Provides serialization to and from binary and JSON formats using protocol buffer utilities. Supports creating instances with optional message customization and retrieving the protobuf name.",
      "description_length": 261,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Greeter.Mypackage",
      "description": "handles message creation, serialization, and deserialization in both binary and JSON formats, supporting string-based user and greeting messages with protocol buffer integration. it includes operations to retrieve fully qualified protobuf names and customize message content. examples include serializing a user message to JSON, deserializing a greeting from binary, and accessing protobuf metadata. the third module contributes no functional elements and serves as an empty namespace.",
      "description_length": 485,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "grpc-examples",
      "description": "Provides functions for establishing HTTP/2 connections, sending and receiving protocol buffers, and handling various RPC styles including unary, server streaming, client streaming, and bidirectional streaming. Works with byte sequences, protocol buffer messages, and connection state objects. Used to build efficient, low-latency communication between distributed services requiring real-time data exchange.",
      "description_length": 407,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Greeter",
      "description": "handles message creation, serialization, and deserialization in binary and JSON formats, with support for string-based user and greeting messages and protocol buffer integration. it provides operations to retrieve fully qualified protobuf names and modify message content. examples include converting a user message to JSON, parsing a greeting from binary data, and accessing protobuf metadata. the module enables structured communication between systems using standardized data formats.",
      "description_length": 487,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 5,
    "filtered_empty_modules": 4,
    "retention_rate": 0.5555555555555556
  },
  "statistics": {
    "max_description_length": 487,
    "min_description_length": 261,
    "avg_description_length": 384.4,
    "embedding_file_size_mb": 0.0186004638671875
  }
}