{
  "package": "resto-cohttp-client",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:06:07.921752",
  "modules": [
    {
      "module_path": "Resto_cohttp_client.Client.Make.LOGGER",
      "library": "resto-cohttp-client",
      "description": "This module logs HTTP requests and responses for a type-safe REST client. It handles structured logging of empty and parameterized requests, including media types, URIs, and encoded bodies, along with corresponding response status codes and decoded bodies. Concrete use cases include auditing API interactions and debugging service calls with precise input and output data.",
      "description_length": 373,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp_client.Client.Make.Service",
      "library": "resto-cohttp-client",
      "description": "This module constructs and manipulates type-safe HTTP service endpoints with explicit encodings for inputs, outputs, and errors. It defines functions to create standard HTTP services (GET, POST, DELETE, PATCH, PUT) that enforce correct parameter handling and automatic serialization/deserialization using a provided encoding module. It supports concrete use cases such as building RESTful APIs with statically checked routes, query parameters, and payload formats.",
      "description_length": 464,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp_client.Client.CALL",
      "library": "resto-cohttp-client",
      "description": "This module provides a `call` function to send HTTP requests with customizable headers, request method, and body to a given URI, returning a promise of the response and body. It works directly with Cohttp types such as `Cohttp.Header.t`, `Cohttp_lwt.Body.t`, `Cohttp.Code.meth`, and `Uri.t`. It is used to implement low-level HTTP client interactions, such as making GET, POST, or other HTTP method requests to remote services.",
      "description_length": 427,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp_client.Client.OfCohttp",
      "library": "resto-cohttp-client",
      "description": "Implements HTTP client calls to remote services using Cohttp, handling requests with customizable headers, methods, and URIs. Works with Cohttp types including `Uri.t`, `Cohttp.Header.t`, and `Cohttp_lwt.Body.t`. Used to send HTTP requests and receive responses with bodies in Lwt-based asynchronous workflows.",
      "description_length": 310,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Resto_cohttp_client.Client.Make",
      "library": "resto-cohttp-client",
      "description": "This module enables type-safe HTTP client interactions with Resto services, combining automatic request encoding and response decoding via the `Encoding` module while managing concurrency and scheduling through `Client`. It provides core operations for invoking services with typed parameters, handling redirects, errors, and streaming responses through Lwt promises. Submodule 1 logs structured request and response data including URIs, headers, and encoded bodies, supporting audit trails and detailed debugging. Submodule 2 defines typed service endpoints for standard HTTP methods, ensuring correct parameter and payload handling during API construction.",
      "description_length": 658,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Resto_cohttp_client.Client",
      "library": "resto-cohttp-client",
      "description": "This module implements HTTP client operations for making service calls with support for handling redirects and working with Cohttp types to perform network operations. It provides a `call` function to send HTTP requests with customizable headers, methods, and bodies to a given URI, returning a promise of the response and body, enabling low-level interactions such as GET or POST requests. Submodules enable type-safe interactions with Resto services via automatic encoding and decoding, while managing concurrency and providing structured logging of requests and responses. They also define typed service endpoints for standard HTTP methods, ensuring correct parameter handling and supporting streaming responses and error handling in Lwt-based workflows.",
      "description_length": 757,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp_client",
      "library": "resto-cohttp-client",
      "description": "This module provides HTTP client functionality for interacting with Resto services, handling redirects, and working with Cohttp types for low-level network operations. It supports sending requests with customizable methods, headers, and bodies via the `call` function, returning Lwt promises of responses and bodies. Submodules enable type-safe service interactions through automatic encoding and decoding, defining typed endpoints for standard HTTP methods with support for streaming and error handling. For example, you can perform a GET request to a typed endpoint, stream a response body, or send a POST with JSON-encoded data and custom headers.",
      "description_length": 650,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 757,
    "min_description_length": 310,
    "avg_description_length": 519.8571428571429,
    "embedding_file_size_mb": 0.025859832763671875
  }
}