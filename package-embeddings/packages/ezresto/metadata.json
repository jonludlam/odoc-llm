{
  "package": "ezresto",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:50:49.208197",
  "modules": [
    {
      "module_path": "EzResto.Arg",
      "library": "ezresto",
      "description": "This module defines serializers and deserializers for service parameters, supporting conversion between strings and OCaml types like `int`, `int32`, `int64`, `float`, and `string`. It provides functions to create custom arguments with documentation, parsing, and serialization logic, ensuring round-trip consistency between conversions. Concrete use cases include defining query or path parameters for REST APIs, such as parsing a user ID from a URL segment or validating a numeric query parameter.",
      "description_length": 498,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto.Path",
      "library": "ezresto",
      "description": "This module provides functions to construct and manipulate paths for REST services, supporting both static segments and dynamic parameterized segments. It works with a polymorphic path type that tracks parameters in the path's type, allowing safe composition of paths with typed arguments. Concrete use cases include building URIs like `/user/<id>` where `<id>` is a runtime value, appending path segments dynamically, and defining service endpoints with structured parameters.",
      "description_length": 477,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto.Query",
      "library": "ezresto",
      "description": "This module defines and manipulates query parameter descriptions for services, using typed fields and combinators to build complex query structures. It works with key-value pairs represented as lists of string pairs and supports typed access via field definitions, default values, and extraction functions. Concrete use cases include specifying optional or required query parameters for REST endpoints, parsing untyped query strings into structured data, and validating query inputs based on predefined schemas.",
      "description_length": 511,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto",
      "library": "ezresto",
      "description": "This module provides functions to define and manipulate REST services with typed paths, query parameters, and HTTP methods. It supports constructing services for `GET`, `POST`, `DELETE`, `PUT`, and `PATCH` operations, with serializers and deserializers for parameters and JSON-encoded inputs and outputs. Concrete use cases include building typed API endpoints, generating client requests, and documenting service directories with schema information.",
      "description_length": 450,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 511,
    "min_description_length": 450,
    "avg_description_length": 484.0,
    "embedding_file_size_mb": 0.0583648681640625
  }
}