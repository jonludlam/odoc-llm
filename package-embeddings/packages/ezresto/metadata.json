{
  "package": "ezresto",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:42.764599",
  "modules": [
    {
      "module_path": "EzResto.Arg",
      "library": "ezresto",
      "description": "This module defines serializers and deserializers for converting between string representations and typed values, primarily used for parsing and formatting API parameters. It operates on basic OCaml types like `int`, `int32`, `int64`, `float`, and `string`, providing predefined converters for these types. Concrete use cases include validating and transforming query parameters, path segments, and other string-based inputs into strongly-typed values when defining services in an API.",
      "description_length": 485,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto.Path",
      "library": "ezresto",
      "description": "This module constructs and manipulates API paths with static and dynamic segments. It supports appending fixed string suffixes and parameterized segments using values like strings or encoded data types. Concrete use cases include building URIs for RESTful endpoints such as `/user/<id>/profile` or `/search?query=term`.",
      "description_length": 319,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto.Query",
      "library": "ezresto",
      "description": "This module defines and manipulates query parameter descriptions for services, supporting the creation of typed query parsers and serializers. It works with query fields and open/closed query types to enforce correct parameter handling during service definition. Concrete use cases include specifying optional or required key-value parameters in URLs, such as filtering or pagination parameters for API endpoints.",
      "description_length": 413,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto",
      "library": "ezresto",
      "description": "This module provides a streamlined interface for defining type-safe REST services with structured paths, query parameters, and HTTP method handlers. It supports building URIs with typed path segments and query fields, encoding and decoding JSON payloads, and describing services with precise input and output formats. For example, you can define a service at `/user/<id>` that accepts a `GET` request with an optional `details` query parameter and returns a JSON-encoded user record. Submodules handle data conversion for path and query values, enable construction of parameterized paths, and enforce correct query parameter handling, making it straightforward to build, document, and interact with RESTful APIs.",
      "description_length": 712,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 712,
    "min_description_length": 319,
    "avg_description_length": 482.25,
    "embedding_file_size_mb": 0.014931678771972656
  }
}