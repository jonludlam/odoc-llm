{
  "package": "nuscr",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 23,
  "creation_timestamp": "2025-07-15T23:11:41.191671",
  "modules": [
    {
      "module_path": "Nuscrlib.Efsm.G.E",
      "library": "nuscr.lib",
      "description": "This module represents directed edges in a state transition graph, where each edge connects two states and carries an action label. It provides operations to create edges, retrieve their source and destination states, and access their action labels. Concrete use cases include modeling transitions between states in a state machine and analyzing or traversing the graph structure of state transitions.",
      "description_length": 401,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Efsm.G.V",
      "library": "nuscr.lib",
      "description": "This module defines a labeled vertex type for an endpoint finite state machine graph, where vertices are comparable and identified by their labels. It provides operations to create vertices from labels, retrieve labels from vertices, and compare, hash, or check equality of vertices. Concrete use cases include representing states in an EFSM graph where each state has an associated label for identification and transition logic.",
      "description_length": 429,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Names.UntaggedName",
      "library": "nuscr.lib",
      "description": "This module manages identifiers paired with source locations via the `t` type, offering operations to construct, transform, and extract components while preserving positional metadata. It supports comparison, sorting, and bounds enforcement (e.g., clamping) using identifier-based ordering, alongside utilities for serialization and pretty-printing. These capabilities are particularly valuable in compiler toolchains for tracking identifier provenance or in structured data workflows requiring precise location-aware manipulations.",
      "description_length": 532,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Names.ProtocolName",
      "library": "nuscr.lib",
      "description": "This module manages protocol identifiers with associated locations, enabling creation, modification, and comparison of names while preserving location metadata for tracking purposes. It operates on `ProtocolName.t` values composed of a string identifier and immutable `Loc.t` data, supporting ordered operations like sorting, range checks, and clamping without considering location in equality. Typical use cases include protocol negotiation systems, configuration management, or distributed applications requiring traceable identifiers with contextual metadata.",
      "description_length": 562,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Ltype.LocalProtocolId",
      "library": "nuscr.lib",
      "description": "This module provides operations for structured comparison, range restriction, and manipulation of local protocol identifiers, which are constructed from protocol and role names. It supports data structures involving ordered identifiers through clamping functions, comparators, and utilities for string/S-expression conversion, enabling precise relationship checks and boundary enforcement. Specific use cases include managing protocol instances in distributed systems where unique identification, hierarchical ordering, or constrained resource allocation are required.",
      "description_length": 568,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Names.LocalProtocolName",
      "library": "nuscr.lib",
      "description": "This module supports creation, manipulation, and comparison of protocol identifiers paired with source location metadata, encapsulated as `LocalProtocolName.t`. It provides operations to modify identifiers, extract components, enforce ordering via comparison functions, and convert between tagged types while preserving location context. These capabilities are particularly useful for tracking protocol entities in distributed systems or compilers where source position fidelity and deterministic ordering are critical.",
      "description_length": 519,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Names.Make",
      "library": "nuscr.lib",
      "description": "This module provides operations for managing identifiers with embedded source location metadata, supporting creation, transformation, and comparison of named entities while preserving positional context. It works with a structured identifier type that pairs names with location information, enabling precise tracking of definitions and references in source code. These capabilities are particularly useful for compiler or interpreter components requiring accurate error reporting, scope resolution, or cross-referencing of program elements.",
      "description_length": 540,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Names.VariableName",
      "library": "nuscr.lib",
      "description": "This module provides utilities for constructing, transforming, and comparing identifiers that carry source location metadata, including renaming, hashing, and serialization operations. It centers on the `VariableName.t` type, which pairs string identifiers with their positional origin in source code. Such functionality is essential for tasks like compiler passes requiring precise variable scoping, refactoring tools maintaining source position fidelity, or analyzers tracking identifier usage across codebases.",
      "description_length": 513,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nuscrlib.Expr.Sexp",
      "library": "nuscr.lib",
      "description": "This module represents S-expressions with distinct constructors for literal strings and atoms, supporting structured data parsing and serialization. It provides a `to_string` function to convert S-expression values to string representations. Use cases include handling symbolic expressions in domain-specific languages and processing structured configuration data.",
      "description_length": 364,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Names.TypeVariableName",
      "library": "nuscr.lib",
      "description": "This module manages type variable names that encapsulate both identifiers and source locations, enabling precise creation, structural comparison, and hash generation. It emphasizes ordering operations\u2014such as `max`, `clamp`, and bounds-checking via `between`\u2014alongside utilities for comparator construction and safe conversions from other name types, primarily serving compiler components like type inference engines where variable identity and positional context must be co-tracked.",
      "description_length": 483,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nuscrlib.Efsm.G",
      "library": "nuscr.lib",
      "description": "This module represents directed graphs with labeled vertices and edges, supporting both querying and manipulation of persistent structures. Vertices are identified by comparable labels, while edges connect two vertices and carry an action label, enabling modeling of state transitions in finite state machines. Operations include adding or removing vertices and edges, checking degrees and neighbors, and transforming graphs through mapping or folding. Example uses include analyzing reachable states in a protocol, modifying transitions between states, or traversing the graph structure to inspect action-labeled edges between labeled states.",
      "description_length": 643,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Names.LabelName",
      "library": "nuscr.lib",
      "description": "This module encapsulates operations for managing string identifiers paired with source locations (`Loc.t`) through creation, transformation, and comparison functions. It centers on the `LabelName.t` type, which combines a string payload with positional metadata, supporting use cases like static analysis or code generation where tracking identifier provenance is critical. Key capabilities include ordered manipulation (e.g., sorting, range checks) and integration with structured data workflows via serialization and comparator-driven collections.",
      "description_length": 549,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nuscrlib.Names.PayloadTypeName",
      "library": "nuscr.lib",
      "description": "This module manages identifiers paired with source locations through operations for creation, renaming, comparison, and serialization. It supports ordering, range validation, and clamping values between bounds, along with safe conversions from other name types. These features are useful in scenarios requiring precise tracking of named entities and their origins, such as compiler symbol resolution or data integrity checks.",
      "description_length": 425,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Efsm",
      "library": "nuscr.lib",
      "description": "This module models communication protocols using endpoint finite state machines (EFSMs), where states and transitions are represented as labeled graphs. It supports constructing EFSMs from local types, inspecting send and receive actions, and extracting roles and payloads for protocol analysis. The graph submodule enables querying and transforming state transitions with labeled edges, allowing tasks like reachability analysis or visualization through DOT. Specific uses include validating protocol correctness, modifying state transitions, and extracting annotated machine behavior for further processing.",
      "description_length": 609,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nuscrlib.Err",
      "library": "nuscr.lib",
      "description": "This module defines a rich set of error types for precise error reporting in a domain-specific language or compiler, including errors related to parsing, type checking, protocol definitions, and command-line arguments. It provides functions to convert errors to S-expressions and strings, enabling structured logging and user-friendly output. Specific use cases include raising errors during syntax checking, handling undefined variables, and reporting conflicts in protocol definitions.",
      "description_length": 487,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Gtype",
      "library": "nuscr.lib",
      "description": "This module provides foundational operations for manipulating session type systems, including comparison, normalization, and serialization of global types, protocols, and message payloads. It handles complex structures like recursive type definitions, nested protocols, and delegation mechanisms, while offering utilities for generating human-readable representations and protocol call labels. These capabilities enable robust type validation, inter-process communication modeling, and integration with distributed system protocols.",
      "description_length": 532,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Names",
      "library": "nuscr.lib",
      "description": "This module handles identifiers combined with source location metadata, providing structured types and operations to manage names across different domains such as protocols, labels, roles, and type variables. Each submodule focuses on a specific name category\u2014like `ProtocolName`, `LabelName`, or `VariableName`\u2014offering creation, comparison, ordering, and serialization functions that preserve positional context. Operations include renaming, clamping within bounds, structural comparison, and safe conversions between name types, ensuring accurate tracking of identifiers in compilers, analyzers, and distributed systems. Examples include sorting protocol names by identifier while retaining source positions, clamping variable names within a defined range, or comparing labeled identifiers for static analysis.",
      "description_length": 813,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Pragma",
      "library": "nuscr.lib",
      "description": "This module manages global configuration state through boolean flags that control validation, refinement, and protocol behaviors, such as enabling refinement types, nested protocols, or SMT solver tracing. It provides operations to parse, format, and query these settings via string conversions and atomic accessors, with support for resetting configurations to default values. The flags are designed to be initialized once from external sources like pragmas or CLI arguments, then treated as immutable constants during program execution.",
      "description_length": 538,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib.Ltype",
      "library": "nuscr.lib",
      "description": "This module structures local types for modeling communication protocols with message passing, choices, recursion, and dynamic participant management. It supports operations to project global types into local views, ensure variable uniqueness, and generate string representations, while its child module handles structured comparison, range restriction, and manipulation of protocol identifiers. Together, they enable precise protocol instance management in distributed systems through ordered identifiers, clamping functions, and string/S-expression conversion. Example uses include enforcing boundary constraints during protocol execution and maintaining hierarchical relationships between protocol roles.",
      "description_length": 706,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nuscrlib.LiteratureSyntax",
      "library": "nuscr.lib",
      "description": "This module defines algebraic data types for representing global and local session types as described in academic literature, using constructors like `BranchG`, `SendL`, and `RecvL` to model communication behaviors. It supports operations to convert session types from other representations and to serialize them into formats compatible with external tools like MPSTK and LaTeX with `mpstmacros`. Concrete use cases include generating human-readable or tool-consumable session type representations for documentation, analysis, or integration with formal verification systems.",
      "description_length": 575,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nuscrlib.Expr",
      "library": "nuscr.lib",
      "description": "This module manipulates expression trees used in refinement type systems, combining core operations like substitution, free variable analysis, and SMT encoding with S-expression support for structured data representation. It centers around expression data types annotated with `payload_type`, enabling precise type tracking, and includes operations for SMT sort mapping, default value generation, and environment management. The S-expression submodule provides distinct constructors for atoms and literals, along with `to_string` for serialization, supporting tasks like DSL implementation and configuration parsing. Together, these features facilitate refinement type checking, constraint solving, and symbolic expression processing in verification workflows.",
      "description_length": 760,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nuscrlib.Loc",
      "library": "nuscr.lib",
      "description": "This module defines a location type for tracking positions in source code, using standard library lexing positions. It supports creating, merging, and comparing source code locations, along with pretty-printing, serialization, and equality checks for located values. Concrete use cases include error reporting with precise source spans and tracking identifiers' origins during parsing or transformation stages.",
      "description_length": 410,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nuscrlib",
      "library": "nuscr.lib",
      "description": "This module serves as the main entry point for working with session types, offering core operations to parse, validate, and project global protocols into local behaviors, while generating executable code for distributed systems. It directly supports manipulation of session type definitions, finite state machines, and domain-specific syntax trees, with utilities for error handling, name resolution, and source location tracking. Child modules enhance these capabilities by modeling communication protocols as endpoint finite state machines, defining precise error types, managing global configuration flags, and structuring local types with dynamic participant handling. Examples include analyzing protocol correctness through state transitions, reporting parsing errors with positional context, projecting global types into role-specific views, and generating LaTeX or SMT-compatible session type representations.",
      "description_length": 916,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 25,
    "meaningful_modules": 23,
    "filtered_empty_modules": 2,
    "retention_rate": 0.92
  },
  "statistics": {
    "max_description_length": 916,
    "min_description_length": 364,
    "avg_description_length": 559.7391304347826,
    "embedding_file_size_mb": 0.0839681625366211
  }
}