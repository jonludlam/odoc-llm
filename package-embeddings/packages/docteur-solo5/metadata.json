{
  "package": "docteur-solo5",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:40.506522",
  "modules": [
    {
      "module_path": "Docteur_solo5.Fast",
      "library": "docteur-solo5",
      "description": "This module implements a read-only key-value store with operations to retrieve values, check existence, list directory entries, and obtain metadata such as size, digest, and modification time. It works with string keys and values, supporting partial reads and hierarchical key structures via `Mirage_kv.Key.t`. Concrete use cases include accessing versioned configuration data, serving static assets from a precomputed store, and validating content integrity through cryptographic digests.",
      "description_length": 489,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Docteur_solo5.Light",
      "library": "docteur-solo5",
      "description": "This module implements a read-only key-value store interface with operations to connect to a store, retrieve values and metadata, check key existence, list directory entries, and disconnect. It works with string keys and values, supporting partial reads, size queries, and digest computations. Concrete use cases include accessing static configuration data, serving precomputed assets, or inspecting versioned content in an immutable store.",
      "description_length": 440,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Docteur_solo5",
      "library": "docteur-solo5",
      "description": "This module provides a read-only key-value store interface for accessing immutable data through string-based keys, supporting operations like value retrieval, partial reads, existence checks, directory listing, and metadata queries including size, digest, and modification time. It enables working with hierarchical key structures via `Mirage_kv.Key.t` and is suitable for use cases such as serving static assets, validating content integrity, and accessing versioned or precomputed data. Examples include retrieving a configuration file by key, listing all keys under a directory prefix, or verifying a file's cryptographic digest before use.",
      "description_length": 643,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 643,
    "min_description_length": 440,
    "avg_description_length": 524.0,
    "embedding_file_size_mb": 0.011325836181640625
  }
}