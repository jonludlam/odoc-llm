{
  "package": "docteur-solo5",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:35.010117",
  "modules": [
    {
      "module_path": "Docteur_solo5.Fast",
      "description": "Provides functions to interact with a key-value store, including checking key existence, retrieving values, partial reads, listing dictionary entries, and obtaining metadata like size, last modified time, and digest. Operates on keys of type Mirage_kv.Key.t and returns results with specific error handling. Supports connecting to the store and cleanly disconnecting, with operations that distinguish between values and dictionaries.",
      "description_length": 433,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Docteur_solo5.Light",
      "description": "Provides functions to interact with a key-value store, including checking key existence, retrieving values and partial data, listing dictionary entries, and managing connections. Operates on keys of type Mirage_kv.Key.t and returns results with specific error handling. Used to query and manipulate stored data, validate key types, and manage session lifecycles.",
      "description_length": 362,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "docteur-solo5",
      "description": "Provides functions to generate a disk image from a Git repository, mount it as a read-only file system, and access specific files within the image. Operates on Git repositories, disk images, and file paths. Used to embed a versioned file system into a unikernel for runtime access, such as serving a static web page or configuration file.",
      "description_length": 338,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Docteur_solo5",
      "description": "manages key-value interactions with detailed access to data and metadata, supporting operations like key existence checks, value retrieval, partial reads, and dictionary listing. it handles keys of type Mirage_kv.Key.t and provides error-specific responses, enabling precise data manipulation and session control. it allows for connection management, ensuring safe access and disconnection from the store. examples include fetching a specific value, checking if a key exists, listing all entries in a dictionary, and retrieving metadata such as size and last modified time.",
      "description_length": 573,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 573,
    "min_description_length": 338,
    "avg_description_length": 426.5,
    "embedding_file_size_mb": 0.014936447143554688
  }
}