{
  "package": "logical",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:27.520473",
  "modules": [
    {
      "module_path": "Logical.Type.T",
      "library": "logical",
      "description": "This module defines a polymorphic type `t` that represents various primitive values such as integers, floats, strings, booleans, and variables. It provides operations to compare values, convert them to S-expressions, and generate string representations. This module is useful for symbolic manipulation and serialization of logical expressions.",
      "description_length": 343,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Logical.Value",
      "library": "logical",
      "description": "This module defines functions to construct and convert logical values of various primitive types, including integers, floats, strings, booleans, and variables. It works directly with the `Logical.Type.t` type, allowing values to be represented and manipulated in a unified form. Use this module when building or serializing logical expressions that require typed values, such as in symbolic computation or logic-based analysis tools.",
      "description_length": 433,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Logical.State",
      "library": "logical",
      "description": "This module manages logical variable assignments and unification operations. It provides functions to create and manipulate a state mapping variable names to logical terms, supporting value lookup and unification of terms. Use it to implement logic solvers or constraint systems where variables can be bound and terms unified within a consistent state.",
      "description_length": 352,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Logical.Type",
      "library": "logical",
      "description": "This module models a type system for logical expressions with support for primitive values like integers, floats, strings, booleans, and named variables. It includes a polymorphic type `t` for representing these values, along with comparison operators, S-expression serialization, and string conversion, enabling symbolic manipulation and structured output. The module also defines a state type for managing variable assignments and a goal type for expressing state transitions, allowing users to model logical constraints and perform symbolic computations. For example, you can represent and evaluate expressions like `x + 3 > 5` where `x` is a variable bound in a state.",
      "description_length": 672,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Logical.Goal",
      "library": "logical",
      "description": "This module implements logical goal construction for constraint solving, providing operations to combine goals with logical AND and OR, and to assert equality or membership. It works with logical types and goals, including sets of terms with comparators. Concrete use cases include building symbolic reasoning systems, type inference engines, and constraint-based program analyses.",
      "description_length": 381,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Logical",
      "library": "logical",
      "description": "This module provides a framework for constructing and evaluating logical expressions with typed values and variables. It supports operations like unification, comparison, and constraint solving over primitives such as integers, floats, strings, and booleans, using a unified type `t` and a state mapping variables to terms. You can represent and evaluate symbolic expressions like `x + 3 > 5`, build complex logical goals with AND/OR, and perform unification in logic solvers or constraint systems.",
      "description_length": 498,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 672,
    "min_description_length": 343,
    "avg_description_length": 446.5,
    "embedding_file_size_mb": 0.022235870361328125
  }
}