{
  "package": "logical",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T22:58:17.603904",
  "modules": [
    {
      "module_path": "Logical.Type.T",
      "library": "logical",
      "description": "This module defines a polymorphic type `t` that represents various primitive data types, including integers, floats, strings, booleans, and variables. It provides operations to compare values of type `t`, convert them to S-expressions, and generate string representations. Concrete use cases include symbolic manipulation, expression evaluation, and serialization for debugging or logging.",
      "description_length": 389,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Logical.Goal",
      "library": "logical",
      "description": "This module implements logical goal construction for constraint solving, providing operations to combine goals using logical connectives. It works with goals representing constraints on terms, allowing conjunction, disjunction, and membership testing within sets. Concrete use cases include building composite constraints for type inference or symbolic reasoning tasks.",
      "description_length": 369,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Logical.Value",
      "library": "logical",
      "description": "This module defines functions to construct and convert logical values of various primitive types into a unified logical type. It supports integers, floats, strings, booleans, and logical variables, enabling representation of typed values in logical expressions. Use this module when building or serializing logical terms that require type tagging, such as in symbolic reasoning or constraint systems.",
      "description_length": 400,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Logical.State",
      "library": "logical",
      "description": "This module manages logical variable assignments and unification within a state. It supports creating states from variable-value pairs, retrieving values, and unifying terms while maintaining consistency. Use it to implement logic solvers or constraint systems where variables can be bound and terms compared.",
      "description_length": 309,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Logical.Type",
      "library": "logical",
      "description": "This module defines a polymorphic type `t` that represents primitive values like integers, floats, booleans, strings, and named variables. It includes functions to compare values, convert them to S-expressions, and render them as strings, supporting tasks like symbolic expression evaluation, constraint solving, and serializing values for inspection. The `state` type maps variable names to values, and the `goal` type represents state-transforming computations used in logic programming.",
      "description_length": 489,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Logical",
      "library": "logical",
      "description": "This module provides operations for representing and manipulating logical values, variables, and constraints. It supports symbolic expression evaluation, unification, and constraint solving using typed primitives and logical goals. Use it to implement logic programming tasks, type inference systems, or constraint-based analyses.",
      "description_length": 330,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 489,
    "min_description_length": 309,
    "avg_description_length": 381.0,
    "embedding_file_size_mb": 0.08734989166259766
  }
}