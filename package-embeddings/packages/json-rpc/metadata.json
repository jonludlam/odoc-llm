{
  "package": "json-rpc",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:48.002874",
  "modules": [
    {
      "module_path": "Jsonrpc.Server.Error",
      "library": "jsonrpc",
      "description": "This module defines standard JSON-RPC error responses for common server-side failure scenarios. It provides predefined error values for parse errors, invalid requests, method not found, invalid parameters, and internal errors. These errors are used directly in JSON-RPC server implementations to ensure correct error response formatting during request handling.",
      "description_length": 361,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonrpc.Server",
      "library": "jsonrpc",
      "description": "This module implements a JSON-RPC server that routes incoming requests to registered callback functions, handling method dispatching and response generation using the `Jsonrpc.json` type. It includes predefined error responses for common failure scenarios such as parse errors, invalid requests, and method not found, ensuring consistent error handling across server implementations. You can use it to build JSON-RPC API endpoints, manage remote procedure calls over HTTP, and define custom method handlers for distributed systems. The combination of request processing and standardized error responses allows for robust and structured server-side JSON-RPC communication.",
      "description_length": 671,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonrpc",
      "library": "jsonrpc",
      "description": "This module provides JSON-RPC 2.0 message handling, enabling the construction, parsing, and manipulation of requests, notifications, responses, and errors using a custom JSON-based type. It supports both client and server use cases, allowing direct manipulation of JSON-RPC messages over network or inter-process communication channels. The server submodule routes incoming requests to callback functions, generates responses, and provides standard error handling for common failure scenarios. Together, they enable building structured JSON-RPC APIs, handling method dispatch, and exchanging typed JSON-RPC messages across distributed systems.",
      "description_length": 643,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 671,
    "min_description_length": 361,
    "avg_description_length": 558.3333333333334,
    "embedding_file_size_mb": 0.011303901672363281
  }
}