{
  "package": "textutils",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 15,
  "creation_timestamp": "2025-08-15T12:10:07.837868",
  "modules": [
    {
      "module_path": "Ascii_table",
      "library": "textutils.ascii_table",
      "description": "This module renders tabular data into ASCII format with customizable alignment, spacing, and display attributes. It operates on lists of rows and columns, where each column specifies how to extract and format data from a row. Concrete use cases include printing formatted logs, displaying query results in the terminal, and generating readable output for command-line tools.",
      "description_length": 374,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ascii_table_kernel.Column.Align",
      "library": "textutils.ascii_table_kernel",
      "description": "This module defines alignment options for table columns, supporting left, right, and center alignment. It includes a function to convert alignment values to S-expressions for serialization. Use this module when specifying or serializing column formatting in ASCII table generation.",
      "description_length": 281,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ascii_table_kernel.Private.Utf8_text_chunks",
      "library": "textutils.ascii_table_kernel",
      "description": "Splits UTF-8 encoded text into line chunks not exceeding a specified width, optionally preferring to split at spaces. Works directly with `Core.String.Utf8.t` values and returns a list of UTF-8 chunks. Useful for formatting long text into fixed-width columns when rendering ASCII tables.",
      "description_length": 287,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ascii_table_kernel.Column.Show",
      "library": "textutils.ascii_table_kernel",
      "description": "This module defines an enumerated type `t` with values `Yes`, `No`, and `If_not_empty`, representing display options for table columns. It includes the function `sexp_of_t` for converting these values to S-expressions. This module is useful for controlling column visibility in ASCII table rendering based on content presence or user preference.",
      "description_length": 345,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ascii_table_kernel.Column.Of_field",
      "library": "textutils.ascii_table_kernel",
      "description": "This module creates columns for ASCII tables from record fields, allowing customization of alignment, width, visibility, and headers. It supports both regular and optional fields, with variants to handle ANSI attributes for styled output. Use it to generate tabular representations of records by mapping each field to a column with specific formatting rules.",
      "description_length": 358,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ascii_table_kernel.Private",
      "library": "textutils.ascii_table_kernel",
      "description": "Splits UTF-8 encoded strings into line chunks up to a given width, preferring splits at spaces. Works with `Core.String.Utf8.t` and returns lists of UTF-8 chunks. Used for wrapping text in fixed-width table columns during ASCII table rendering.",
      "description_length": 244,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ascii_table_kernel.Column",
      "library": "textutils.ascii_table_kernel",
      "description": "This module constructs and manipulates columns for ASCII tables, supporting alignment settings, width constraints, and visibility controls. It works with data types like strings, optional values, and ANSI-styled text elements to format table columns with headers and per-cell styling. Concrete use cases include rendering structured data records as formatted text tables with customizable alignment, conditional display, and multi-line cells.",
      "description_length": 442,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ascii_table_kernel.Table_char",
      "library": "textutils.ascii_table_kernel",
      "description": "Represents characters used to draw ASCII tables, with separate fields for ASCII and UTF-8 encodings. Provides the `connect` function to create border characters for table cells based on specified top, bottom, left, and right connections. Useful for rendering tabular data with customizable borders in terminal output.",
      "description_length": 317,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ascii_table_kernel.Display",
      "library": "textutils.ascii_table_kernel",
      "description": "This module defines display styles for formatting ASCII tables, controlling how table cells and headers are rendered. It provides specific configurations like `short_box`, `tall_box`, `line`, `blank`, and `column_titles` to customize table appearance. Use cases include generating readable tabular output for logs, reports, or command-line interfaces with precise visual formatting.",
      "description_length": 382,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ascii_table_kernel.Screen",
      "library": "textutils.ascii_table_kernel",
      "description": "This module represents a screen buffer for rendering ASCII or Unicode tables with styled text. It provides `render` to output a styled table to a buffer using custom output and closing functions, and `to_string` to convert the table to a string with attribute annotations. It works with `Attr.t` lists for text styling and `Core.Buffer.t` for efficient string building, supporting concrete use cases like terminal table display or formatted text generation.",
      "description_length": 457,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ascii_table_kernel",
      "library": "textutils.ascii_table_kernel",
      "description": "This module builds and renders ASCII tables with customizable display styles, column alignment, and text styling. It works with string data, optional values, and attribute-annotated text to generate formatted tables for terminal output or log files. Concrete use cases include displaying query results in command-line tools, formatting structured data reports, and rendering aligned, styled tabular output with configurable borders and spacing.",
      "description_length": 444,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Console.Make.Ansi",
      "library": "textutils.console",
      "description": "This module provides direct control over ANSI terminal behavior, including cursor movement, screen clearing, and visual alerts. It supports operations like resetting the screen, positioning the cursor, and saving its state. Functions also allow text output with specified attributes, enabling colored or formatted console output.",
      "description_length": 329,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Console.Ansi",
      "library": "textutils.console",
      "description": "This module handles ANSI escape codes for terminal manipulation, providing functions to control cursor movement, screen clearing, and text attributes. It works with output channels and strings, allowing styled text rendering using attribute lists. Concrete use cases include building interactive command-line interfaces, formatting colored output, and managing terminal display behavior during user interaction or logging.",
      "description_length": 422,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Console.Make",
      "library": "textutils.console",
      "description": "This module provides direct control over terminal output, including ANSI attribute manipulation, cursor positioning, and screen management. It works with output channels and attribute-styled string lists, enabling formatted console display. Concrete use cases include rendering colored text, creating terminal-based UI elements, and formatting command-line tool output similar to `ls`.",
      "description_length": 385,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Console",
      "library": "textutils.console",
      "description": "This module provides terminal output formatting with support for ANSI attributes, cursor positioning, and screen management. It operates on output channels and styled string lists to produce colored and structured console output. Use it to render command-line UI elements, format log output, or generate columnized listings like file listings in a shell.",
      "description_length": 354,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 457,
    "min_description_length": 244,
    "avg_description_length": 361.4,
    "embedding_file_size_mb": 0.21785354614257812
  }
}