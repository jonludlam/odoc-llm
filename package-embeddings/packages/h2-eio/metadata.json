{
  "package": "h2-eio",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:48.955815",
  "modules": [
    {
      "module_path": "H2_eio.Server",
      "description": "Handles HTTP/2 connection lifecycle by initializing request and error handlers, managing socket communication, and integrating with Eio's concurrency model. Processes stream sockets and address information to route incoming requests through a provided handler. Used to build scalable, concurrent web servers with custom request processing logic.",
      "description_length": 345,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "H2_eio.Client",
      "description": "Provides functions to establish and manage HTTP/2 connections, send requests with custom headers and trailers, send pings with optional payloads, and check connection status. Operates on stream sockets, H2.Request.t, and H2.Body.Writer.t. Used to handle real-time data exchange, stream control, and error management in networked applications.",
      "description_length": 342,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "h2-eio",
      "description": "Provides HTTP/2 protocol parsing and serialization using Angstrom and Faraday, supporting frame decoding and encoding, stream management, and connection state tracking. Works with byte streams, HTTP/2 frames, and connection-specific data structures. Used to build compliant HTTP/2 servers and clients, handling multiplexed requests and flow control.",
      "description_length": 349,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_eio",
      "description": "manages HTTP/2 connection lifecycles, handling request routing, error management, and socket communication within Eio's concurrency framework, while enabling real-time data exchange through request sending, stream control, and ping operations. It works with stream sockets, request objects, and body writers to support custom server logic and bidirectional communication. Users can build scalable web servers, manage stream-specific data, and implement fine-grained control over connection states. Examples include processing incoming requests, sending custom headers, and monitoring connection health with pings.",
      "description_length": 613,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 613,
    "min_description_length": 342,
    "avg_description_length": 412.25,
    "embedding_file_size_mb": 0.014941215515136719
  }
}