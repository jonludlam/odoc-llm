{
  "package": "textrazor",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-06-18T16:33:57.153240",
  "modules": [
    {
      "module_path": "Textrazor.Analysis.Options",
      "description": "Provides functions to create and manipulate analysis configuration objects, including generating HTTP POST parameters from option sets. Works with custom types representing classifiers, extractors, and cleanup modes, along with a composite record type for options. Used to prepare request data for analysis workflows by converting option configurations into key-value pairs.",
      "description_length": 374,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Textrazor.Account",
      "description": "Handles conversion of JSON data into account objects using a specific parsing function. Retrieves account information from an API using a client parameter. Works with a structured record type representing account details.",
      "description_length": 221,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Textrazor.Analysis",
      "description": "Handles configuration setup and transformation for analysis workflows, converting option sets into structured HTTP parameters. It defines custom types for classifiers, extractors, and cleanup modes, along with a composite options record. Operations include generating key-value pairs for requests and managing option combinations. For example, it can transform a set of extractors and classifiers into a POST body for an analysis API.",
      "description_length": 434,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Textrazor.Category",
      "description": "Provides functions to convert JSON values into a structured category type, including a parser that handles deserialization with error tracking. Works with the `t` type, which represents categories containing identifiers and labels. Used to process and validate category data from external sources like configuration files or API responses.",
      "description_length": 339,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Textrazor.Client",
      "description": "Handles HTTP GET and POST requests with customizable endpoints and authentication. Operates on API keys and URL paths, returning parsed JSON responses or error strings. Used to interact with external services like TextRazor by sending structured data and retrieving results.",
      "description_length": 274,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Textrazor.Entailment",
      "description": "Provides functions to parse and validate logical entailment structures from JSON, ensuring correct formation of premise and conclusion pairs. Works with a custom type representing logical statements, including nested implications and conjunctions. Used to verify that a set of premises logically leads to a specified conclusion in automated reasoning systems.",
      "description_length": 359,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Textrazor.Entity",
      "description": "Processes and extracts identifiers from structured entity data, including Wikidata, Freebase, and Wikipedia URIs. Accepts JSON input via a deserialization function and returns typed entity records. Enables direct access to external knowledge base links for entity resolution and cross-referencing.",
      "description_length": 297,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Textrazor.Phrase",
      "description": "Provides functions to parse and construct phrase data from JSON, supporting conversion from Yojson values. Works with a record type containing structured linguistic elements. Used to deserialize input from API responses into internal representation for processing.",
      "description_length": 264,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Textrazor.Property",
      "description": "Provides functions to parse and validate configuration properties from JSON, handling errors during conversion. Works with a record type containing string keys and values of various primitive types. Used to load and check environment variables or settings files during application startup.",
      "description_length": 289,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Textrazor.Relation",
      "description": "Processes JSON input to extract and validate relation parameters and full relation objects, using custom type definitions for structured data. Operates on `param` and `t` types that encapsulate specific relation attributes and constraints. Used to parse and validate JSON payloads in data exchange scenarios.",
      "description_length": 308,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Textrazor.Sentence",
      "description": "Provides functions to parse JSON data into a structured sentence representation, including handling of text, tokens, and linguistic annotations. Works with a type that encapsulates sentence content, tokenization, and metadata. Used to convert JSON input from natural language processing pipelines into an internal format for further analysis.",
      "description_length": 342,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Textrazor.Topic",
      "description": "Provides functions to convert a JSON value into a topic structure, retrieve a Wikidata URI, and obtain a Wikipedia URL. Works with a structured type containing topic information. Used to parse and access external identifiers for semantic entities.",
      "description_length": 247,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Textrazor.Word",
      "description": "Converts a JSON value into a word representation, handling parsing errors. Works with JSON values and the internal word type, which includes string-based linguistic data. Used to deserialize structured text data from external sources like configuration files or API responses.",
      "description_length": 276,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "textrazor",
      "description": "Processes text or URLs by sending them to an analysis endpoint, applying customizable options for entity recognition, keyword extraction, and sentiment analysis. Operates on strings and URLs, returning structured results including entities, keywords, and sentiment scores. Used to extract actionable insights from news articles, social media posts, or customer feedback.",
      "description_length": 370,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Textrazor",
      "description": "Processes JSON data into structured objects for accounts, categories, entities, relations, sentences, topics, and words, enabling interaction with external systems and data validation. Key types include account records, category structures, entity identifiers, relation parameters, sentence annotations, and word representations, with operations for parsing, validation, and API communication. It supports transforming configuration options into HTTP requests, extracting logical entailments, and resolving semantic entities from external sources. Examples include generating API payloads, validating configuration files, and converting NLP pipeline outputs into internal formats for analysis.",
      "description_length": 693,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 693,
    "min_description_length": 221,
    "avg_description_length": 339.1333333333333,
    "embedding_file_size_mb": 0.054935455322265625
  }
}