{
  "package": "pgocaml_ppx",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:04:10.448233",
  "modules": [
    {
      "module_path": "Pgocaml_ppx.Ppx_pgsql",
      "library": "pgocaml_ppx",
      "description": "This module enables embedding SQL queries directly in OCaml code with compile-time parsing, type checking, and code generation. It processes SQL strings and OCaml abstract syntax trees (ASTs) to produce type-safe database interaction code, handling type conversions between SQL and OCaml data representations. It is particularly useful for safely composing parameterized queries and ensuring schema-level correctness through static analysis of embedded SQL fragments.",
      "description_length": 467,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pgocaml_ppx",
      "library": "pgocaml_ppx",
      "description": "This module integrates SQL queries directly into OCaml code, performing compile-time parsing, type checking, and code generation to ensure type-safe database interactions. It processes SQL strings and OCaml ASTs to automatically handle type conversions and generate safe, parameterized query code. Key data types include SQL fragments and typed result representations, with operations for query composition and schema validation. For example, developers can write inline SQL queries that are statically checked against the database schema and automatically converted into OCaml functions with strongly-typed parameters and return values.",
      "description_length": 637,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 637,
    "min_description_length": 467,
    "avg_description_length": 552.0,
    "embedding_file_size_mb": 0.007704734802246094
  }
}