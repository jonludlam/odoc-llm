{
  "package": "domainslib",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:35.130220",
  "modules": [
    {
      "module_path": "Domainslib.Chan",
      "description": "Creates and manages channels for inter-thread communication, supporting both bounded and unbounded buffering. Provides send and receive operations that block or poll based on buffer availability, enabling synchronization between concurrent tasks. Used to pass values between threads in a controlled, non-blocking manner.",
      "description_length": 320,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Domainslib.Task",
      "description": "Provides functions to manage task execution pools, run tasks synchronously or asynchronously, and coordinate parallel operations. Works with task functions, promises, and pool structures to enable concurrent execution and synchronization. Enables parallel for-loops, reductions, scans, and searches across multiple domains, with control over chunk sizes and result aggregation.",
      "description_length": 377,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "domainslib",
      "description": "Provides functions for spawning parallel tasks with async/await, parallel iteration over collections, and efficient task distribution via work-stealing queues. Operates on arbitrary functions, values, and iterable data structures like lists and arrays. Enables parallel computation of recursive algorithms, such as calculating Fibonacci numbers across multiple domains.",
      "description_length": 369,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Domainslib",
      "description": "Manages concurrent task execution and inter-thread communication through channel-based messaging and parallel processing constructs. Supports bounded and unbounded channels for sending and receiving values, along with thread pools for executing tasks in parallel. Enables non-blocking data transfer between threads and parallel iteration over data structures with customizable execution parameters. Examples include passing results between threads, executing parallel loops, and coordinating asynchronous computations.",
      "description_length": 518,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 518,
    "min_description_length": 320,
    "avg_description_length": 396.0,
    "embedding_file_size_mb": 0.014923095703125
  }
}