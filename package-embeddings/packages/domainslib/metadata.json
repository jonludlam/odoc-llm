{
  "package": "domainslib",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:40.668867",
  "modules": [
    {
      "module_path": "Domainslib.Task",
      "library": "domainslib",
      "description": "This module manages parallel task execution across multiple domains. It provides functions to set up and tear down domain pools, run tasks synchronously or asynchronously, and perform parallel computations such as for loops, reductions, scans, and searches. These operations work with pools, tasks, and promises, enabling concrete use cases like parallelizing independent computations, performing distributed reductions over integer ranges, and scanning arrays using multiple domains.",
      "description_length": 484,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Domainslib.Chan",
      "library": "domainslib",
      "description": "This module implements thread-safe channels for inter-domain communication, supporting both bounded and unbounded buffering. It provides blocking and non-blocking send and receive operations, allowing domains to synchronize and exchange values safely. Concrete use cases include coordinating parallel tasks, implementing producer-consumer patterns, and managing resource-constrained communication buffers.",
      "description_length": 405,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Domainslib",
      "library": "domainslib",
      "description": "This module enables parallel task execution and inter-domain communication through domain pools and thread-safe channels. It supports parallel computations like for loops, reductions, and scans, while channels facilitate synchronized value exchange between domains. Key data types include pools, tasks, promises, and channels, with operations for scheduling, running, and coordinating parallel work. Examples include distributing independent computations across domains, performing parallel reductions over ranges, and implementing producer-consumer patterns using bounded or unbounded channels.",
      "description_length": 595,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 595,
    "min_description_length": 405,
    "avg_description_length": 494.6666666666667,
    "embedding_file_size_mb": 0.011332511901855469
  }
}