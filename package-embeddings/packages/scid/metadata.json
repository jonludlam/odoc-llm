{
  "package": "scid",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:06:09.361827",
  "modules": [
    {
      "module_path": "Scid.D.Manual",
      "library": "scid",
      "description": "This module provides low-level functions to manually control input buffering for a decoding process. It works with `Scid.D.t` decoder instances, supplying them with raw byte sequences from strings or bytes buffers. Use this when implementing custom input handling for parsers or streaming data protocols where precise control over the decoder's input is required.",
      "description_length": 363,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scid.E.Manual",
      "library": "scid",
      "description": "This module provides low-level buffer management for encoding operations. It allows appending bytes to an encoding buffer and querying the remaining free space. Use it when manually handling binary data serialization, such as constructing network packets or binary file formats.",
      "description_length": 278,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scid.D",
      "library": "scid",
      "description": "This module decodes input from channels, strings, or manual sources, producing result values incrementally and handling partial input with explicit signals for more data, end-of-input, or detailed error messages. It includes a submodule for low-level input buffering control, allowing direct manipulation of byte sequences fed into decoder instances, which is essential for custom streaming protocols or interactive input processing. Main data types include decoder states and input buffers, with operations to advance decoding steps and inject new input data. You can use it to build streaming parsers that process data as it arrives or implement interactive command-line tools that handle partial user input gracefully.",
      "description_length": 721,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scid.E",
      "library": "scid",
      "description": "This module handles data encoding and streaming to various output destinations, supporting incremental writes and state management for scenarios like serialization or network communication. It provides core operations for creating encoders, writing values, and managing partial output, while its child module offers low-level buffer manipulation for binary data construction. You can encode structured data to a channel, buffer, or custom output function, and directly manage buffer space when building binary formats like network packets.",
      "description_length": 539,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Scid.H",
      "library": "scid",
      "description": "This module validates and writes SCID headers in byte buffers. It checks if a byte sequence at a given position matches the valid SCID header and writes a specified segment of the header to a target buffer. It operates directly on `Stdlib.Bytes.t` values, using integer positions and lengths for precise memory manipulation. Use cases include parsing and constructing SCID-identified data streams or files with strict header formatting requirements.",
      "description_length": 449,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scid.R",
      "library": "scid",
      "description": "This module defines a record type representing a time-series data point with fields for timestamp, open/high/low/close prices, trade counts, and volume metrics. It provides functions for serialization, deserialization, comparison, and pretty-printing of these records. It is used for efficiently storing, reading, and comparing financial tick data in binary format.",
      "description_length": 365,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Scid",
      "library": "scid",
      "description": "This module processes SCID-formatted data through incremental decoding and encoding, supporting streaming input and output with precise buffer control. It uses core data types like decoder states, encoder streams, and byte buffers to handle partial data, manage I/O, and validate SCID headers during transmission or parsing. You can build interactive tools that process SCID data in real-time, validate headers in binary streams, or encode financial time-series records to disk or network with minimal overhead. Specific applications include SCID-compliant network services, streaming file parsers, and binary data converters for high-frequency trading logs.",
      "description_length": 658,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 721,
    "min_description_length": 278,
    "avg_description_length": 481.85714285714283,
    "embedding_file_size_mb": 0.02582263946533203
  }
}