{
  "package": "scid",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:00:08.140573",
  "modules": [
    {
      "module_path": "Scid.E.Manual",
      "library": "scid",
      "description": "Handles byte buffer management for encoding operations. It provides `add_bytes` to supply a buffer and `rem` to check remaining space. Used when writing encoded data to a specific byte range, ensuring precise control over buffer usage.",
      "description_length": 235,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scid.D.Manual",
      "library": "scid",
      "description": "This module provides low-level functions to manually refill a decoder's input buffer using either a string or bytes. It works directly with the decoder type `Scid.D.t` and operates on byte sequences with specified offsets and lengths. Use this to implement custom decoding logic where input data is supplied incrementally, such as parsing streaming or fragmented binary data.",
      "description_length": 375,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Scid.D",
      "library": "scid",
      "description": "This module decodes input from various sources like channels, strings, or manual buffers, producing structured results or errors. It operates on a decoder type `t`, handling byte-level input and parsing into higher-level values of type `Scid.R.t`. Concrete use cases include parsing binary file formats, network protocols, or streaming data where input may arrive in fragments or require custom buffering.",
      "description_length": 405,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Scid.E",
      "library": "scid",
      "description": "Handles encoding data to output destinations like channels, buffers, or manual byte ranges. It provides `encode` to process encoding steps and `make` to initialize encoders tied to a specific output. Used for structured data serialization with precise buffer control through the `Manual` submodule.",
      "description_length": 298,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Scid.R",
      "library": "scid",
      "description": "This module defines a compact in-memory representation of financial tick data, including timestamps, price levels, trade volumes, and directional statistics. It provides direct serialization and deserialization routines for efficient binary storage or transmission, along with comparison and pretty-printing for analysis or debugging. Concrete use cases include high-frequency market data logging, backtesting engines, and real-time trading system telemetry.",
      "description_length": 458,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scid.H",
      "library": "scid",
      "description": "This module defines the structure and validation of SCID headers. It provides direct validation of byte sequences against the SCID header format and writes predefined header segments to byte buffers. It operates on `Stdlib.Bytes.t` values, supporting precise byte-level manipulation and verification at specific offsets.",
      "description_length": 320,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scid",
      "library": "scid",
      "description": "This module implements a binary format for financial tick data with strict header validation, efficient in-memory representation, and precise serialization. It operates on byte buffers and custom data structures for timestamps, prices, and volumes, enabling direct mapping between memory and storage. Concrete use cases include high-frequency trading systems, market data replay, and binary log processing.",
      "description_length": 406,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 458,
    "min_description_length": 235,
    "avg_description_length": 356.7142857142857,
    "embedding_file_size_mb": 0.10181713104248047
  }
}