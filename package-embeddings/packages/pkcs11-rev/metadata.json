{
  "package": "pkcs11-rev",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:34.062147",
  "modules": [
    {
      "module_path": "Pkcs11_rev_decl.Rev_bindings",
      "library": "pkcs11-rev._decl",
      "description": "This module defines low-level bindings for PKCS#11 cryptographic operations, mapping C-style function signatures to OCaml. It works with abstract types and structures representing cryptographic objects, sessions, and tokens. Concrete use cases include initializing cryptographic providers, managing session handles, and performing raw cryptographic operations like signing and encryption.",
      "description_length": 388,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pkcs11_rev_decl",
      "library": "pkcs11-rev._decl",
      "description": "This module provides low-level access to PKCS#11 cryptographic functionality, mapping C-style APIs to OCaml with abstract types for cryptographic objects, sessions, and tokens. It supports operations such as provider initialization, session management, and direct cryptographic actions like signing and encryption. Users can interact with hardware security modules (HSMs) or other cryptographic tokens by loading providers, opening sessions, and invoking cryptographic functions on keys stored within the token. Example usage includes initializing a PKCS#11 library, opening a session to a token, and signing data using a private key stored on a smart card.",
      "description_length": 657,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pkcs11_rev.Make",
      "library": "pkcs11-rev",
      "description": "This module generates reverse bindings for PKCS#11 operations by transforming the input module `X` into a structure that maps C-style function calls to OCaml values. It works with module types representing PKCS#11 API definitions, converting them into executable bindings that interface directly with the PKCS#11 library. Use this module to automatically derive low-level cryptographic operations such as token initialization, key generation, and signature handling from a specification.",
      "description_length": 487,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pkcs11_rev",
      "library": "pkcs11-rev",
      "description": "This module transforms PKCS#11 API definitions into executable OCaml bindings, mapping C-style functions to OCaml values. It supports low-level cryptographic operations like token initialization, key generation, and signature handling through a derived module interface. By processing a module type representing the PKCS#11 specification, it enables direct interaction with PKCS#11 libraries using idiomatic OCaml code. Example usage includes deriving functions to initialize a token or sign data using a loaded key.",
      "description_length": 516,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 657,
    "min_description_length": 388,
    "avg_description_length": 512.0,
    "embedding_file_size_mb": 0.014949798583984375
  }
}