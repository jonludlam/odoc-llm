{
  "package": "ancient",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 1,
  "creation_timestamp": "2025-08-14T22:43:29.438897",
  "modules": [
    {
      "module_path": "Ancient",
      "library": "ancient",
      "description": "This module enables moving OCaml values out of the heap using `mark` and `follow`, allowing safe access to immutable copies outside the garbage collector. It supports shared memory operations via `attach`, `share`, and `get`, enabling inter-process communication by storing OCaml values in memory-mapped files. Use cases include reducing heap pressure for large, immutable data structures and sharing precomputed values between processes without serialization.",
      "description_length": 460,
      "index": 0,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 1,
    "meaningful_modules": 1,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 460,
    "min_description_length": 460,
    "avg_description_length": 460.0,
    "embedding_file_size_mb": 0.014892578125
  }
}