{
  "package": "febusy",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-07-15T23:09:03.919953",
  "modules": [
    {
      "module_path": "Febusy.Edsl.File.List",
      "library": "febusy",
      "description": "This module constructs DAG nodes representing lists of file artifacts, using `make` to define dynamic file lists with a function producing their contents and `return` to directly specify static file lists. It works with string lists as file paths and integrates them into the DAG as artifacts with file representatives. Use it to declare output file groups for build rules or input dependencies that are resolved dynamically during DAG construction.",
      "description_length": 449,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Febusy.Edsl.Make_unix",
      "library": "febusy",
      "description": "Implements execution of dependency graphs in a Unix-like environment with functions to run build workflows and manage state files. Works with DAGs of artifacts parameterized over specification and representative types, such as file paths or checksums. Used to perform sequential builds where each node represents a build step with dependencies, like compiling files or running shell commands.",
      "description_length": 392,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Edsl.System",
      "library": "febusy",
      "description": "This module provides functions for interacting with the operating system, including running shell commands, reading and writing files, and retrieving environment information like the home directory. It works directly with strings and lists of strings for input/output, and uses standard OCaml types like unit and lists for control and data flow. Concrete use cases include scripting build steps that require file manipulation, executing external tools as part of a build process, and handling configuration files during artifact construction.",
      "description_length": 542,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Build.Artifact",
      "library": "febusy",
      "description": "This module handles serialization, deserialization, hashing, and string representation of artifact values. It works with typed artifacts that have a phantom type `'a` and a value type `'b`, allowing conversion between values and their string representations. Concrete use cases include persisting build artifacts, generating unique identifiers from values, and safely reconstructing typed data from strings.",
      "description_length": 407,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Build.Database",
      "library": "febusy",
      "description": "Stores and manages build artifacts and their hashes for tracking changes. It provides mutable lists to cache file paths with their content hashes and maintain a history of computed hashes. This enables efficient rebuild detection by comparing current and past hash values for specific files.",
      "description_length": 291,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Febusy.Build.State",
      "library": "febusy",
      "description": "This module manages the state of a build process, tracking artifacts, dependencies, and build history. It supports operations to push build statuses onto a stack, save and load state to disk, and check whether dependencies have changed based on hashes. It works with build artifacts, a database of build results, and a log of build events, providing functions to inspect, update, and query build metadata during incremental builds.",
      "description_length": 431,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Febusy.Common.Error",
      "library": "febusy",
      "description": "This module defines a custom error type that represents errors as strings or wrapped exceptions with context. It provides functions to construct and format these errors, catch exceptions into result types, and convert errors to strings. It is used to handle and propagate errors in a structured way, particularly when integrating with result-based APIs that require detailed error information.",
      "description_length": 393,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Edsl.String_value",
      "library": "febusy",
      "description": "The module defines an artifact type for representing string values in the DAG, where each string artifact is identified by a unique ID. It provides the `create` function to construct such artifacts from a string value, associating them with a specification that includes the ID. This enables tracking and rebuilding of string-based build outputs, such as generated configuration snippets or version strings embedded in code.",
      "description_length": 424,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Build.DAG",
      "library": "febusy",
      "description": "This module represents a directed acyclic graph (DAG) for building artifacts, where nodes are values of type `('a, 'b) Febusy.Build.Artifact.t` and edges represent dependencies or transformations. It supports operations like `Bind` for sequential composition, `Join` and `Join_list` for combining multiple artifact computations, and `Ensures` for enforcing actions during construction. Concrete use cases include defining build pipelines where artifacts are produced through dependent stages, such as compiling source files into executables with intermediate steps like parsing, optimization, and linking.",
      "description_length": 605,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Febusy.Build.Action",
      "library": "febusy",
      "description": "This module defines a GADT for representing actions that produce values, specifically supporting OCaml function execution. It provides operations to run these actions and convert them to string representations. Concrete use cases include modeling build steps with deferred execution and serializing actions for logging or debugging.",
      "description_length": 332,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Febusy.Edsl.File",
      "library": "febusy",
      "description": "This module represents individual files and collections of files as artifacts in a DAG, enabling operations to declare, generate, and return them based on file paths and build logic. It provides direct functions to create single files and file lists, either statically with `return` or dynamically with `make`, where the latter constructs file groups using a function to determine their contents. The module integrates file paths as representatives and supports use cases such as defining input files, producing output files through custom build steps, and grouping related files for build rules. Its combined API allows precise control over both individual file artifacts and dynamically computed file lists within the same dependency graph.",
      "description_length": 742,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Common",
      "library": "febusy",
      "description": "This module combines formatted output operations with robust error handling to support flexible logging, string manipulation, and error propagation. It provides core types like formatters and error values, along with operations for directing output to channels, buffers, or strings, and for capturing and formatting errors with context. You can use it to log structured messages to stderr, build formatted strings dynamically, or wrap exceptions into result-aware error types for safer error recovery. Submodule functionality integrates seamlessly, allowing errors to be constructed, caught, and rendered using the same formatting infrastructure.",
      "description_length": 646,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Meta",
      "library": "febusy",
      "description": "Contains metadata generated by the build system, including the version string. Works with string data types to store and expose build-time information. Used to retrieve version details programmatically during runtime or diagnostics.",
      "description_length": 232,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Edsl",
      "library": "febusy",
      "description": "This module provides a monadic DSL to construct dependency graphs of build artifacts using OCaml functions as build actions. The core type `'artifact DAG.t` represents nodes in the graph, where `'artifact` pairs a specification with a representative value like a file path or string, and dependencies are expressed using monadic binds (`>>=`), joins (`join`), and combinators like `=<>=`. Artifacts are defined and linked to build actions using `ensures` or `<--`, enabling dynamic dependency resolution and caching for workflows such as compiling files or generating configuration data. The DSL integrates with submodules for Unix execution, OS interaction, string artifacts, and file artifacts, allowing concrete operations like running shell commands, managing file-based dependencies, and tracking string-based values in the build graph.",
      "description_length": 841,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Build",
      "library": "febusy",
      "description": "This module orchestrates artifact construction and dependency resolution in build systems, defining actions, DAGs for dependencies, and build state tracking. It supports multi-stage builds, artifact management with success/failure statuses, and ordered pipeline execution. Key data types include DAG nodes representing artifacts, build state stacks, and hash-stamped file caches. You can define build pipelines with `Bind`, `Join`, and `Ensures`, track file changes with hash comparisons, serialize artifacts safely, and run deferred actions with OCaml function support.",
      "description_length": 570,
      "index": 14,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Febusy",
      "library": "febusy",
      "description": "This module coordinates the construction and management of build artifacts through a dependency-aware DSL, integrating error handling, logging, and build metadata. Core data types include `'artifact DAG.t` for representing dependency graphs, build state trackers, and version information for runtime diagnostics. Operations allow defining build steps with `>>=`, `join`, and `ensures`, logging structured messages, and capturing errors with context. You can model complex build workflows, track file changes via hashes, log diagnostic output to stderr, and programmatically access version details for runtime validation.",
      "description_length": 620,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 841,
    "min_description_length": 232,
    "avg_description_length": 494.8125,
    "embedding_file_size_mb": 0.05854511260986328
  }
}