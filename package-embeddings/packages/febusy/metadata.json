{
  "package": "febusy",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 17,
  "creation_timestamp": "2025-06-18T16:35:15.945238",
  "modules": [
    {
      "module_path": "Febusy.Edsl.File.List",
      "description": "Creates a directed acyclic graph (DAG) representing build artifacts from a list of file paths, enabling dependency tracking and execution ordering. Accepts a list of strings and a function to generate artifact specifications, producing a structured build plan. Used to define custom build steps that depend on specific files and their transformations.",
      "description_length": 351,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Build.Artifact",
      "description": "Converts a typed value to a string representation, deserializes a string into a value, serializes a value to a string, generates a hash from a value, and attempts to extract a concrete value from a wrapped type. Works with polymorphic types parameterized by kind and how_made, and custom type definitions. Used to encode and decode structured data, generate unique identifiers from values, and extract runtime representations for inspection or processing.",
      "description_length": 455,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Build.Action",
      "description": "Executes actions represented as a polymorphic variant type, returning their result or a string representation. It handles custom action definitions with specific behaviors tied to their type. Used to serialize and execute domain-specific commands in a stateful application.",
      "description_length": 273,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Febusy.Build.DAG",
      "description": "Provides operations to construct and manipulate directed acyclic graphs, including adding edges, checking for cycles, and topological sorting. Works with graph structures represented as nodes and edges, where each node has a unique identifier. Used to model dependencies in build systems and data processing pipelines.",
      "description_length": 318,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Febusy.Build.Database",
      "description": "Creates and manages a persistent storage system for structured data, supporting insert, retrieve, and delete operations on records with a defined schema. Works with a custom type representing a database instance, containing tables and indexed entries. Used to store user profiles, track session data, and manage application state across runs.",
      "description_length": 342,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Build.State",
      "description": "Manages state for artifact tracking, supporting incrementing, pushing build statuses, and maintaining hash records. It operates on a custom state type containing logs, caches, and artifact metadata. Used to persist and retrieve build information, check dependency changes, and manage artifact lookups with precise hash tracking.",
      "description_length": 328,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Edsl.File",
      "description": "represents build artifacts as a directed acyclic graph, organizing file dependencies and execution order. It processes lists of file paths and transforms them into structured build plans using a provided function. Operations include dependency resolution, topological sorting, and artifact specification generation. For example, it can track how source files generate compiled outputs and ensure correct build sequencing.",
      "description_length": 421,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Edsl.String_value",
      "description": "Creates a custom artifact from a string, associating it with a specific specification type. Operates on strings and build artifacts, embedding string values into a structured build context. Used to define build steps that depend on specific string-based configurations.",
      "description_length": 269,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Edsl.System",
      "description": "Provides functions to execute shell commands, capture their output as lists of strings, and manage file I/O by reading and writing lines. Operates with strings, lists of strings, and file paths. Executes system commands with error handling, feeds input to processes, and reads/writes files line by line.",
      "description_length": 303,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Edsl.Make_unix",
      "description": "Executes a build dependency graph in a single thread, using Unix-like process execution. It operates on build artifacts and directed acyclic graphs (DAGs) representing build steps. Used to run incremental builds with state persistence through a specified file.",
      "description_length": 260,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Common.Error",
      "description": "Provides functions to construct error messages from format strings, convert errors to strings, and handle exceptions within a result type. Works with custom error types and result types that encapsulate success or failure. Used to safely wrap code that may raise exceptions and translate them into structured error results.",
      "description_length": 323,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Build",
      "description": "Encodes and decodes structured data, generates hashes, and extracts runtime values through polymorphic type manipulation. Executes domain-specific actions with custom behaviors and manages state for artifact tracking with precise hash-based lookups. Constructs and analyzes directed acyclic graphs to model dependencies and ensure valid execution order. Maintains persistent storage for structured records, enabling reliable data retrieval and state management across application runs.",
      "description_length": 485,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Common",
      "description": "Provides functions for constructing and handling errors within a result type, supporting custom error types and exception translation. Includes operations to format error messages, convert errors to strings, and manage exceptions safely. Can be used to wrap potentially failing code and return structured error results instead of raising exceptions. Enables consistent error representation and debugging across applications.",
      "description_length": 424,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Edsl",
      "description": "combines graph-based build planning, artifact customization, shell command execution, and sequential build execution into a unified workflow. It handles file dependencies, custom string-based artifacts, command-line interactions, and DAG-driven builds. Users can define how source files generate outputs, embed configuration strings into builds, run shell commands, and execute incremental builds. Examples include compiling code with dependency tracking, injecting build-time configurations, and automating deployment scripts.",
      "description_length": 527,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy.Meta",
      "description": "Provides access to build-time metadata through a single string value representing the project's version. Works with immutable string data to convey essential build information. Used to dynamically inject and retrieve version numbers during runtime for logging or display purposes.",
      "description_length": 280,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "febusy",
      "description": "Provides functions to define and execute effectful computations with dependencies, tracking their outputs in a structured way. Works with monadic workflows and persistent state files to manage build artifacts across runs. Enables reliable incremental builds by ensuring only necessary steps are re-executed.",
      "description_length": 307,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Febusy",
      "description": "Encodes and decodes structured data, generates hashes, and manipulates polymorphic types to extract runtime values, while managing state through hash-based lookups and analyzing directed acyclic graphs for dependency resolution. Supports error handling with custom result types, formatted messages, and safe exception management to ensure robust failure reporting. Combines build planning, artifact customization, and shell command execution into a workflow that handles file dependencies, configuration injection, and incremental builds. Retrieves and injects build-time version metadata as a single string for runtime use.",
      "description_length": 624,
      "index": 16,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 17,
    "filtered_empty_modules": 6,
    "retention_rate": 0.7391304347826086
  },
  "statistics": {
    "max_description_length": 624,
    "min_description_length": 260,
    "avg_description_length": 370.0,
    "embedding_file_size_mb": 0.06221485137939453
  }
}