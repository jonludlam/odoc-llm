{
  "package": "logs-async",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:03:55.084711",
  "modules": [
    {
      "module_path": "Logs_async.LOG",
      "library": "logs-async",
      "description": "This module defines logging operations that return Async threads, ensuring log actions complete before proceeding. It works with log levels, messages, and deferred values, supporting asynchronous handling of logging results. Use it to integrate async-aware logging into applications, especially when coordinating log output with other async operations or resource management.",
      "description_length": 375,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Logs_async",
      "library": "logs-async",
      "description": "This module enables asynchronous logging through operations that return threads, ensuring completion only after log actions finish, supporting standard levels like debug, info, and error. It integrates with Logs sources, result types, and deferred values from Async_kernel, allowing structured logging with custom formatters and tags. You can use `on_error` to log structured errors, defer message evaluation with `kmsg`, and configure source-specific behavior via `src_log`. Submodules extend this functionality to handle async-aware logging, making it ideal for coordinating logs with other asynchronous operations or resource management tasks.",
      "description_length": 646,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 646,
    "min_description_length": 375,
    "avg_description_length": 510.5,
    "embedding_file_size_mb": 0.007676124572753906
  }
}