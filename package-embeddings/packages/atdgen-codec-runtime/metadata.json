{
  "package": "atdgen-codec-runtime",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:30:52.856619",
  "modules": [
    {
      "module_path": "Atdgen_codec_runtime.Json_adapter.Type_field.Default_param",
      "description": "Provides functions to handle default parameters with a specific type field name, using a string identifier. Operates on configuration records that include a type field. Used to enforce consistent parameter handling in data serialization and parsing workflows.",
      "description_length": 259,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Atdgen_codec_runtime.Json_adapter.Type_field.Make",
      "description": "Provides a function to retrieve a specific field name used for type identification. Works with string-based identifiers and type metadata. Used to dynamically access field names in generated code or configuration structures.",
      "description_length": 224,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime.Json_adapter.Type_field",
      "description": "Provides a way to retrieve the name of a type field as a string. Works with type definitions and their associated fields. Used to dynamically access field names in code generation or serialization logic.",
      "description_length": 203,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime.Decode",
      "description": "Provides a JSON decoding framework that converts JSON values into OCaml values, utilizing combinators to construct complex decoders from simpler ones, with support for primitives, collections, and structured data. It includes operations for tuple composition, enum parsing, option handling, and custom adapters to transform JSON data before decoding, enabling flexible parsing of structured and variant types.",
      "description_length": 409,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime.Encode",
      "description": "The module offers encoding functionalities to convert structured data types\u2014such as integers, floats, strings, lists, arrays, and tuples\u2014into JSON formats, along with tools for building JSON objects and handling nullability. It leverages type-specific encoders and transformation utilities to adapt outputs, supporting scenarios like API data serialization and dynamic JSON generation.",
      "description_length": 385,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime.Json",
      "description": "Constructs JSON values from strings and nested structures, supporting null, boolean, number, string, list, and object types. Combines values using operations that build complex JSON hierarchies from simple components. Used to generate structured data for API responses and configuration files.",
      "description_length": 293,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime.Json_adapter",
      "description": "Converts JSON trees between a format compliant with ATD and a standard JSON representation. Operates on the Json.t data type, ensuring structural compatibility with specific serialization needs. Used to prepare JSON for ATD-based code generation and to revert transformed data to its original form.",
      "description_length": 298,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "atdgen-codec-runtime",
      "description": "Provides functions to parse ATD syntax, generate type definitions, and produce serialization/deserialization code for C++. Works with abstract syntax trees, type declarations, and language-specific code templates. Used to create efficient data interchange formats between systems requiring strict type guarantees and performance.",
      "description_length": 329,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime",
      "description": "Provides a comprehensive JSON processing pipeline with decoding, encoding, value construction, and format conversion capabilities. It handles OCaml types through combinators, supports primitive and complex data structures, and enables transformation via adapters and custom encoders/decoders. Examples include parsing variant types from JSON, serializing API responses, and converting between ATD-compliant and standard JSON. Key operations involve tuple composition, enum parsing, null handling, and hierarchical value building.",
      "description_length": 529,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 529,
    "min_description_length": 203,
    "avg_description_length": 325.44444444444446,
    "embedding_file_size_mb": 0.033145904541015625
  }
}