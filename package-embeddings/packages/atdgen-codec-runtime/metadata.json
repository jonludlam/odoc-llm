{
  "package": "atdgen-codec-runtime",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:10:31.878796",
  "modules": [
    {
      "module_path": "Atdgen_codec_runtime.Json_adapter.Type_field.Default_param",
      "library": "atdgen-codec-runtime",
      "description": "Contains the default name `\"type\"` used to identify the field that indicates the type of a JSON object in type-driven deserialization scenarios. Works with JSON objects structured to include a type discriminant field. Used when parsing polymorphic JSON data where the type field determines how the rest of the object should be interpreted.",
      "description_length": 339,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime.Json_adapter.Type_field.Make",
      "library": "atdgen-codec-runtime",
      "description": "This module implements JSON normalization and restoration for objects with a type field, converting between arbitrary JSON trees and Atdgen-compatible representations. It operates on `Atdgen_codec_runtime.Json.t` values, typically structured as associative lists with a designated type indicator field. Use this to handle JSON objects that include a field like `\"type\"` to specify their variant, enabling seamless integration with Atdgen-generated decoders and encoders.",
      "description_length": 470,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime.Json_adapter.Type_field",
      "library": "atdgen-codec-runtime",
      "description": "This module handles JSON objects that include a type field to indicate their variant, converting between raw JSON and Atdgen-compatible representations. It provides `normalize` and `restore` operations to transform JSON trees, supporting polymorphic deserialization based on the type discriminant. Use it to process JSON data where a field like `\"type\"` determines how the object should be decoded into a variant type.",
      "description_length": 418,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime.Json",
      "library": "atdgen-codec-runtime",
      "description": "This module defines a JSON abstract syntax tree (AST) with standard JSON types like objects, arrays, numbers, and strings. It includes functions to construct JSON values, such as `constr0` for nullary variants and `constr1` for unary variants, commonly used in encoding and decoding ADT values. It is used to represent and manipulate JSON data during serialization and deserialization processes.",
      "description_length": 395,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime.Decode",
      "library": "atdgen-codec-runtime",
      "description": "This module provides functions to decode JSON values into typed OCaml data structures using a combinator-based approach. It supports decoding primitive values, collections like lists and arrays, sum types with optional or transformed constructors, and nested structures such as tuples and maps, operating on JSON trees represented as `Atdgen_codec_runtime.Json.t`. Typical use cases include deserializing JSON payloads into OCaml records or variants while handling schema variations through pre-decoding transformations and optional fields.",
      "description_length": 540,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime.Json_adapter",
      "library": "atdgen-codec-runtime",
      "description": "This module defines a common interface for JSON adapters that transform raw JSON values into forms compatible with Atdgen's expectations. It works with JSON trees represented as `Yojson.Safe.t` values, focusing on adapting structures for correct deserialization. A concrete use case is handling polymorphic variants by normalizing JSON objects with a type field, such as converting a JSON object `{ \"type\": \"user\", \"id\": 123 }` into a variant representation expected by Atdgen-generated decoders.",
      "description_length": 496,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime.Encode",
      "library": "atdgen-codec-runtime",
      "description": "This module supports encoding OCaml values into JSON representations, handling primitives, collections, tuples, and structured objects through combinators. It works with `Json.t` trees and `'a Encode.t` encoders, enabling transformations like mapping, contramapping, and handling optional values via `nullable` or `option_as_constr`. Common use cases include serializing complex data structures for APIs, configuration files, or data interchange formats where precise control over JSON output is required.",
      "description_length": 505,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Atdgen_codec_runtime",
      "library": "atdgen-codec-runtime",
      "description": "This module implements JSON serialization and deserialization for OCaml data structures using a combinator-based approach. It operates on JSON ASTs defined in the `Json` module, supporting precise decoding and encoding of primitives, collections, tuples, and algebraic data types. Concrete use cases include converting JSON API responses into typed OCaml values and generating JSON output for structured data with custom formatting.",
      "description_length": 432,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 540,
    "min_description_length": 339,
    "avg_description_length": 449.375,
    "embedding_file_size_mb": 0.11635112762451172
  }
}