{
  "package": "dssi",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:35.821970",
  "modules": [
    {
      "module_path": "Dssi.Plugin",
      "description": "Loads and unloads plugin instances, managing their lifecycle. Operates on a plugin type `t` representing loaded modules. Used to dynamically integrate external functionality at runtime.",
      "description_length": 185,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dssi.Descriptor",
      "description": "Provides functions to create and manage plugin descriptors, including retrieving API versions, LADSPA descriptors, and configuring audio processing. Works with plugin instances, event arrays, and MIDI controller values to control synthesis and program selection. Enables running single or multiple synthesizers with precise control over audio events and program changes.",
      "description_length": 370,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "dssi",
      "description": "Provides functions for parsing and manipulating DSSI plugin metadata, including extracting manufacturer and plugin names, handling MIDI control mappings, and serializing configuration data. Works with custom record types representing plugin descriptors and control assignments. Used to integrate DSSI plugins into audio applications by extracting and applying plugin-specific settings.",
      "description_length": 385,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dssi",
      "description": "loads and unloads plugin instances, managing their lifecycle through a type `t` that represents loaded modules, enabling dynamic integration of external functionality. It provides functions to create and manage plugin descriptors, retrieve API versions, and configure audio processing using event arrays and MIDI controller values. This allows precise control over synthesis, program selection, and multi-synthesizer setups. Examples include loading a synthesizer, sending MIDI events, and switching between different sound programs at runtime.",
      "description_length": 544,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 544,
    "min_description_length": 185,
    "avg_description_length": 371.0,
    "embedding_file_size_mb": 0.014943122863769531
  }
}