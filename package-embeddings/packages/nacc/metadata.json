{
  "package": "nacc",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:17.752567",
  "modules": [
    {
      "module_path": "Libnacc.Parsers",
      "description": "Parses individual characters, sets of characters, and whitespace, along with integers, floating points, and binary operation patterns. Handles structured parsing with parentheses and custom delimiters. Used for reading and validating input formats like mathematical expressions or configuration syntax.",
      "description_length": 302,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Libnacc.Parsing",
      "description": "This module offers parser combinators for constructing and managing parsers tailored to left-recursive grammars, enabling operations like sequencing, choice, repetition, and associativity resolution. It works with custom parser and state types, processing input strings to generate results or errors, particularly effective for structures like arithmetic expressions. Specific use cases include parsing nested expressions and handling left-to-right or right-to-left input feeding scenarios.",
      "description_length": 490,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "nacc",
      "description": "Provides functions for parsing input using a hand-written recursive descent parser, generating abstract syntax trees from lexical tokens, and performing type checking on parsed expressions. Works with custom token streams, AST nodes represented as variant types, and type environments implemented as association lists. Used to build domain-specific languages with custom syntax and semantics, such as configuration file parsers or simple scripting languages.",
      "description_length": 458,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Libnacc",
      "description": "Processes characters, numbers, and structured input with support for custom delimiters and parentheses, while enabling the construction of complex parsers for left-recursive grammars. Provides operations for sequencing, choice, repetition, and associativity resolution, working with custom parser and state types. Capable of parsing arithmetic expressions, nested structures, and configuration syntax with error handling. Examples include validating mathematical expressions and interpreting custom input formats with precise control over parsing behavior.",
      "description_length": 556,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 556,
    "min_description_length": 302,
    "avg_description_length": 451.5,
    "embedding_file_size_mb": 0.014963150024414062
  }
}