{
  "package": "nacc",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:54.304876",
  "modules": [
    {
      "module_path": "Libnacc.Parsers",
      "library": "nacc",
      "description": "This module implements parsers for character-based input, handling individual characters, whitespace, numeric literals, and binary operations. It supports structured parsing of integers, floating-point numbers, and parenthesized expressions with customizable delimiters. Use cases include building expression parsers for domain-specific languages or processing structured text formats.",
      "description_length": 385,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Libnacc.Parsing",
      "library": "nacc",
      "description": "This module provides parser combinators and stateful parsing operations for constructing and executing complex grammars on string-based input. It manages parser state with positional tracking (line numbers, remaining input) and supports error handling, incremental parsing, and directional control (left-to-right/right-to-left). Key use cases include building recursive-descent parsers with applicative/monadic composition, resolving left recursion in operator precedence, and processing structured text formats with precise error reporting.",
      "description_length": 541,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Libnacc",
      "library": "nacc",
      "description": "This module combines character-level parsing with combinator-based grammar construction to handle complex text processing tasks. It provides data types for parser states, input positions, and structured numeric and symbolic expressions, along with operations for composing parsers, tracking input progress, and reporting errors. You can build custom language parsers that handle operator precedence, parse nested expressions with custom delimiters, or process structured text with detailed error feedback. Example applications include arithmetic expression evaluators, domain-specific language interpreters, and configuration file parsers.",
      "description_length": 639,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 639,
    "min_description_length": 385,
    "avg_description_length": 521.6666666666666,
    "embedding_file_size_mb": 0.011324882507324219
  }
}