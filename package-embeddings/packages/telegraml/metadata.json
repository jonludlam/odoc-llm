{
  "package": "telegraml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 48,
  "creation_timestamp": "2025-06-18T16:43:07.825645",
  "modules": [
    {
      "module_path": "TelegramApi.Video.Out",
      "description": "Creates and prepares video data for transmission, handling file IDs, raw bytes, and multipart uploads. Operates on video records containing metadata like duration, caption, and chat ID. Used to generate sendable video content for messaging platforms.",
      "description_length": 250,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.PhotoSize.Out",
      "description": "Creates a photo_size structure from a chat ID, photo file ID, and optional parameters like caption, notification status, reply reference, and reply markup. Prepares the photo_size for transmission either as a file ID or raw bytes, supporting both synchronous and asynchronous multipart preparation. Used to format and ready photo data for sending in messaging contexts.",
      "description_length": 369,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Location.Out",
      "description": "Provides functions to create and prepare location data for transmission, including setting chat ID, latitude, longitude, and optional message settings. Works with a structured `location` type containing geographic coordinates and message parameters. Used to generate sendable location payloads for messaging systems.",
      "description_length": 316,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Voice.Out",
      "description": "Handles creation and preparation of voice messages for outgoing transmission. Accepts a chat ID, voice data, and optional parameters like duration and reply markup, then prepares the voice for sending using file IDs, raw bytes, or multipart data. Used to structure and format voice messages before delivery in a messaging system.",
      "description_length": 329,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.InlineQuery.Out",
      "description": "This module offers functions to construct tailored inline query responses for Telegram bots, supporting diverse media types such as articles, photos, videos, and contacts with customizable parameters like captions and reply markup. It utilizes structured data types to represent query results, including metadata for dynamic content delivery. Use cases include enabling bots to dynamically serve rich media, location data, or contact information in response to user queries.",
      "description_length": 474,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Document.Out",
      "description": "Creates and prepares documents for outgoing transmission, handling both file IDs and raw byte data. Operates on a `document` type containing metadata and content, and a `string` for raw data. Used to generate sendable formats for files in messaging contexts, such as converting raw bytes into a transportable structure.",
      "description_length": 319,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Sticker.Out",
      "description": "Creates and prepares stickers for outgoing messages, handling both file IDs and raw bytes with specific formatting. Operates on a `sticker` type containing message details and supports asynchronous preparation for multipart data. Used to generate sendable sticker content for chat interactions.",
      "description_length": 294,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Contact.Out",
      "description": "Creates and prepares contact data for transmission, handling identifiers, names, and message settings. Operates on a structured contact type containing chat ID, phone number, first and last name, and optional flags. Used to generate sendable contact representations with specific formatting and metadata.",
      "description_length": 304,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Venue.Out",
      "description": "Creates a venue structure with location details, title, address, and optional metadata like Foursquare ID, notification settings, and reply information. Works with a `venue` type containing geographic coordinates, textual information, and optional parameters. Used to generate a formatted string representation of a venue for message transmission.",
      "description_length": 347,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Audio.Out",
      "description": "Creates and prepares audio data for transmission, handling both file IDs and raw bytes with specific metadata like chat ID, duration, and performer. Operates on an `audio` type containing identifiers, metadata, and content. Used to generate message payloads for sending audio in a messaging context.",
      "description_length": 299,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Telegram.Api",
      "description": "The module provides a structured framework for interacting with an API, aggregating various components into a unified interface. It includes types such as request configurations, response handlers, and error representations, along with operations for sending and parsing API calls. Users can construct requests, manage authentication tokens, and process incoming data streams. Examples include fetching user profiles, submitting form data, and handling real-time updates through event listeners.",
      "description_length": 495,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Telegram.Actions",
      "description": "This module offers functions for orchestrating Telegram bot interactions, including command sequencing, message delivery (text, media, etc.), chat management, and update processing. It operates on identifiers like chat/user/message IDs, location data, and update structures, enabling tailored bot behavior through customizable parameters. Key use cases involve automating message flows, handling user interactions via callbacks, and efficiently managing real-time updates with control over command execution.",
      "description_length": 508,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Telegram.BotDefaults",
      "description": "Provides functions to handle various bot events and command configurations, including inline queries, callback actions, and chat updates. Works with Telegram API types such as commands, inline queries, callback queries, and chat events. Used to define bot behavior for message handling, user interactions, and chat management.",
      "description_length": 326,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.ParseMode",
      "description": "Converts between a parse mode value and its string representation, supporting specific formatting rules for messages. Works with a custom type that encodes different markup parsing behaviors. Used to generate properly formatted output in contexts like chat messages or document rendering.",
      "description_length": 288,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.User",
      "description": "Provides functions to construct a user from basic fields and parse a user from JSON data. Works with integers, strings, and optional fields to build a user record. Used to initialize user data from input parameters and deserialize user information from structured JSON responses.",
      "description_length": 279,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Chat",
      "description": "Represents chat entities with specific attributes like ID, type, title, username, and names. Processes JSON data to construct or extract chat information. Converts string representations into structured chat types for use in messaging applications.",
      "description_length": 248,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.InputFile",
      "description": "Loads a file's raw bytes from a given filename and formats data into HTTP multipart/form-data bodies. Accepts field pairs, file metadata, and a boundary string to construct a properly structured HTTP request body. Used to prepare files and associated form data for transmission in HTTP messages.",
      "description_length": 295,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.MessageEntity",
      "description": "Handles creation and parsing of message formatting entities, including converting string representations to typed values. Works with `entity_type` and `message_entity` types, which encode text formatting details like offsets and lengths. Used to process structured message data from JSON, such as in chat applications or text editors with rich formatting.",
      "description_length": 355,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.KeyboardButton",
      "description": "Represents a button on a custom keyboard with text and optional request flags for contact or location. Serializes the button into a JSON structure suitable for outgoing messages. Used to construct and format buttons for interactive user interfaces in messaging applications.",
      "description_length": 274,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.InlineKeyboardButton",
      "description": "Creates an inline keyboard button with specified text and optional URL, callback data, or inline query trigger. Serializes the button structure into a JSON object for API transmission. Used to construct and format individual button elements in Telegram bot interactions.",
      "description_length": 270,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.ReplyMarkup",
      "description": "Generates structured JSON for Telegram reply markup options using specific constructors for keyboard layouts, inline buttons, and hiding or forcing replies. Works with nested lists of button configurations and boolean flags to control behavior. Used to dynamically present interactive reply options or control user input in bot responses.",
      "description_length": 338,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.PhotoSize",
      "description": "Encapsulates photo data for messaging, handling creation, formatting, and transmission. Supports file ID and raw byte delivery with options for captions, notifications, and reply structures. Provides functions to prepare media for synchronous or asynchronous sending. Enables structured handling of image content in chat environments.",
      "description_length": 334,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Audio",
      "description": "Manages audio data preparation and transmission, encapsulating identifiers, metadata, and content within an `audio` type. Supports operations to attach chat IDs, durations, and performer details, enabling structured audio handling. Allows conversion of audio into message-compatible formats for seamless delivery. Examples include generating payloads for sending voice notes or music files with associated metadata.",
      "description_length": 415,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Document",
      "description": "Handles document creation and preparation for transmission, supporting both file identifiers and raw byte data. Operates on a `document` type with metadata and content, and a `string` for raw data, enabling conversion of file content into transportable formats. Allows for structured packaging of files for messaging systems, such as embedding binary data into a sendable representation. Supports operations like attaching files, encoding content, and preparing messages with embedded documents.",
      "description_length": 495,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Sticker",
      "description": "Handles sticker creation and formatting for message transmission, supporting both file IDs and raw byte data. Operates on a `sticker` type that encapsulates message metadata and enables asynchronous preparation of multipart content. Allows generation of sendable sticker structures for real-time chat interactions. Examples include converting a file ID into a formatted sticker for sending or embedding raw image data into a message payload.",
      "description_length": 441,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Video",
      "description": "handles video data preparation for transmission, managing file IDs, raw bytes, and multipart uploads while processing video records with metadata such as duration, caption, and chat ID. it supports operations like encoding, chunking, and metadata extraction to enable seamless integration with messaging platforms. examples include generating video payloads for sending, tracking upload progress, and associating videos with specific chat contexts. key data types include video records, file identifiers, and byte streams.",
      "description_length": 522,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Voice",
      "description": "Manages the construction and formatting of voice messages for transmission, integrating chat identifiers, voice data, and optional settings. Supports operations on voice data through types such as chat IDs, file identifiers, and raw byte streams. Enables tasks like generating structured voice payloads, embedding metadata, and preparing messages for delivery in a messaging context. Examples include converting raw audio to a sendable format or attaching reply markup to a voice message.",
      "description_length": 488,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Contact",
      "description": "manages structured contact data with fields for chat ID, phone number, names, and flags, enabling precise control over contact representation. It supports operations to format, validate, and prepare contacts for transmission, including setting message preferences. Functions include creating contacts, updating identifiers, and generating sendable payloads. Example tasks include exporting a contact with a specific chat ID or filtering contacts based on name or phone number.",
      "description_length": 476,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Location",
      "description": "Encapsulates geographic data and messaging parameters into a structured format for transmission. Supports creating and configuring location objects with coordinates, chat identifiers, and optional message settings. Enables generation of standardized location payloads for integration with messaging platforms. Allows precise control over how location information is formatted and delivered.",
      "description_length": 390,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Venue",
      "description": "manages a structured representation of locations, including geographic coordinates, titles, addresses, and optional metadata such as Foursquare IDs and notification preferences. It defines a `venue` type that encapsulates both required and optional fields, enabling flexible data handling. Operations include generating human-readable strings for communication and managing location-based information. For example, it can format a venue's details into a message or extract coordinates for mapping services.",
      "description_length": 506,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.UserProfilePhotos",
      "description": "Provides functions to create and parse user profile photos data from JSON. Operates on a list of photo size lists and a JSON structure. Used to construct and deserialize user profile photo collections from API responses.",
      "description_length": 220,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Message",
      "description": "Creates and parses message objects from JSON, handling sender details, timestamps, and media content. Works with user and chat identifiers, message entities, and media types like audio, video, and photos. Extracts sender information including first name, username, and formatted display names.",
      "description_length": 293,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.File",
      "description": "type file = { file_id : string; file_size : int option; file_path : string option } Provides functions to create a file from parameters, parse a file from JSON, and download the file content using its path. Works with file identifiers, sizes, and paths to interact with Telegram's file storage. Used to manage file resources during message processing and media retrieval.",
      "description_length": 371,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.CallbackQuery",
      "description": "Handles creation and parsing of callback query data from JSON, supporting user interactions with inline keyboard buttons. Works with user data, message references, and callback identifiers. Used to process user selections in chat interfaces, such as handling form submissions or triggering actions based on button presses.",
      "description_length": 322,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.ChatMember",
      "description": "Extracts a status from a string, constructs a chat member from a user and status, and parses a chat member from JSON. Works with custom status types and a chat_member record containing user and status fields. Used to initialize and deserialize chat member data from external sources.",
      "description_length": 283,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.InputMessageContent",
      "description": "Provides functions to construct specific message content types such as text, location, venue, and contact, each with tailored parameters for precise data inclusion. Works with structured types like text, location, venue, and contact, capturing detailed attributes for each message format. Used to generate JSON-ready representations of inline query results, including formatted text, geographic coordinates, venue details, and contact information.",
      "description_length": 447,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.InlineQuery",
      "description": "Provides structured tools for generating dynamic, media-rich responses to Telegram inline queries. It defines data types like `Result`, `Article`, `Photo`, and `Video`, along with operations to set captions, thumbnails, and reply markup. Users can create customized bot responses that include links, locations, or contact details based on user input. Examples include serving search results, location-based information, or interactive media previews.",
      "description_length": 450,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.ChatAction",
      "description": "Represents user status changes with specific actions like \"typing\", \"recording\", and \"offline\". Converts actions to strings for JSON serialization. Used to communicate real-time presence and interaction states in chat applications.",
      "description_length": 231,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Update",
      "description": "Reads a structured update from JSON and extracts the update ID. Operates on a custom `update` type representing a data record. Used to parse and retrieve identifiers from incoming data payloads.",
      "description_length": 194,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Result",
      "description": "Provides operations to handle success or failure states, including lifting values into success, mapping over successes, binding successive operations, and providing defaults for failures. Works with the polymorphic 'a result type, which encapsulates either a value or an error. Used to chain error-prone computations, such as parsing input or handling I/O, while safely recovering from failures.",
      "description_length": 395,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Command",
      "description": "Checks if an update corresponds to a command, extracts command details from a message, and processes updates with command-specific logic. Operates on update records, messages, and command definitions to execute actions based on user input. Handles authentication restrictions and splits command strings into argument lists for processing.",
      "description_length": 338,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Mk",
      "description": "Handles bot command registration and event processing for Telegram bots. Processes inline and callback queries, tracks chat member changes, and manages chat metadata updates. Uses command lists, chat objects, user data, and message structures to trigger specific actions based on bot interactions.",
      "description_length": 297,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramUtil.Result",
      "description": "Provides operations to handle computations that may fail, including lifting values into the result type, chaining operations with binding, and applying functions to wrapped values. Works with the polymorphic 'a result type, which represents either a successful value or an error. Used to safely propagate errors through a series of transformations, such as parsing input or handling external API responses.",
      "description_length": 406,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "telegraml",
      "description": "Provides functions for handling Telegram bot interactions, including command processing, inline responses, and chat event management. Operates with custom types like `Telegram.Api.Command.action` and structured API calls using snake_case method names with named arguments. Used to build modular bot logic that reacts to user input and sends tailored responses through the Telegram API.",
      "description_length": 385,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Telegram",
      "description": "offers a comprehensive system for building and managing Telegram bots by integrating API interaction, event handling, and message orchestration. It defines core types like request configurations, chat IDs, message structures, and update handlers, enabling operations such as sending messages, processing callbacks, and managing real-time data. Users can implement automated responses, handle inline queries, and control bot behavior through structured command sequences. Examples include responding to user inputs, updating chat states, and processing media-rich messages.",
      "description_length": 572,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi",
      "description": "The module enables sending diverse message types (text, media, location, contacts) and managing bot interactions through operations like update retrieval, file handling, and message delivery. It works with chat IDs, user IDs, file IDs, and metadata to facilitate real-time communication, user data retrieval, and bot execution. Use cases include automating multimedia sharing, processing user inputs, and maintaining continuous bot activity via update queues.",
      "description_length": 459,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramActions",
      "description": "This module offers a range of Telegram API interactions, including sending diverse message types (text, media, commands), managing chat members (kicking, unbanning), and retrieving chat data, alongside handling updates via sequential processing. It works with identifiers like chat IDs, user IDs, message IDs, and update/result structures, enabling bot-driven communication and real-time interaction. Specific use cases include automating message sequences, moderating groups, and processing incoming updates for dynamic response handling.",
      "description_length": 539,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramUtil",
      "description": "Handles error-prone computations using a polymorphic 'a result type, enabling safe error propagation through chaining and lifting. Supports operations like binding, mapping, and applying functions to wrapped values, ideal for parsing or API interactions. Allows combining multiple steps where any failure halts execution and returns an error. For example, parsing a JSON response and extracting a field can be done sequentially with automatic error handling.",
      "description_length": 458,
      "index": 47,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 77,
    "meaningful_modules": 48,
    "filtered_empty_modules": 29,
    "retention_rate": 0.6233766233766234
  },
  "statistics": {
    "max_description_length": 572,
    "min_description_length": 194,
    "avg_description_length": 368.8333333333333,
    "embedding_file_size_mb": 0.1747722625732422
  }
}