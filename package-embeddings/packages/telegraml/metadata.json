{
  "package": "telegraml",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 46,
  "creation_timestamp": "2025-08-15T14:15:12.175978",
  "modules": [
    {
      "module_path": "TelegramApi.Audio.Out",
      "library": "telegraml",
      "description": "This module defines operations for constructing and preparing outgoing audio messages to be sent via the Telegram bot API. It works with a structured `audio` type that includes metadata such as chat ID, file reference, duration, and optional settings like notifications and reply targets. Functions support creating audio payloads, preparing them for transmission using either a file ID or raw bytes, enabling direct integration with bot message-sending workflows.",
      "description_length": 464,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.InlineQuery.Out",
      "library": "telegraml",
      "description": "This module enables constructing inline query responses for Telegram bots by defining structured types to represent media and data payloads, such as articles, photos, videos, and cached content, each with metadata, content descriptors, and optional interactive reply markups. It provides utilities to serialize these response objects into JSON payloads for transmission, supporting both URL-based and pre-cached media formats. It is particularly useful for bots that need to dynamically generate rich inline results with thumbnails, descriptions, or buttons in response to user queries.",
      "description_length": 586,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Venue.Out",
      "library": "telegraml",
      "description": "Handles the creation and preparation of venue data structures for sending in a Telegram bot. Works with venue records containing location details and optional parameters like Foursquare ID or reply markup. Used to format venue messages with specific coordinates, titles, and addresses before transmission.",
      "description_length": 305,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Document.Out",
      "library": "telegraml",
      "description": "This module handles the creation and preparation of outgoing document messages for a Telegram bot. It defines a `document` type with fields for chat identifier, document content, notification settings, reply context, and markup. Functions support constructing document payloads, preparing them for transmission using either a file ID or raw bytes.",
      "description_length": 347,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Voice.Out",
      "library": "telegraml",
      "description": "This module constructs and prepares voice messages for sending, handling both file ID and raw byte data. It defines a `voice` record with metadata like chat ID, duration, and reply settings, and provides functions to serialize the message for API requests. Concrete use cases include sending pre-uploaded voice files via file ID or streaming raw audio data directly to Telegram.",
      "description_length": 378,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Location.Out",
      "library": "telegraml",
      "description": "This module constructs and serializes outgoing location messages for a chat. It defines a `location` type with coordinates, chat identifier, and optional message parameters, and provides functions to create and prepare location payloads. Use it to send geographic positions with optional reply behavior and notifications settings to a specific chat.",
      "description_length": 349,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.PhotoSize.Out",
      "library": "telegraml",
      "description": "This module defines operations for constructing and preparing photo messages to be sent via the Telegram bot API. It works with a `photo_size` record containing parameters like chat ID, image data, captions, and reply settings. Concrete use cases include sending images by file ID with `prepare` or uploading raw image bytes using `prepare_multipart`.",
      "description_length": 351,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Sticker.Out",
      "library": "telegraml",
      "description": "This module constructs and prepares outgoing sticker messages for transmission. It defines a `sticker` record containing the target chat ID, sticker data, notification settings, and optional reply parameters. Functions include `create` for building sticker messages, `prepare` for formatting stickers using a file ID, and `prepare_multipart` for handling raw sticker bytes.",
      "description_length": 373,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Video.Out",
      "library": "telegraml",
      "description": "This module defines operations for constructing and preparing outgoing video messages to send via the Telegram bot API. It works with a `video` record type containing metadata like chat ID, video source, duration, and reply settings. Functions support creating video messages concisely, preparing them for sending using either a file ID or raw bytes.",
      "description_length": 350,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Contact.Out",
      "library": "telegraml",
      "description": "This module constructs and prepares contact messages for sending via the Telegram bot API. It defines a `contact` type with fields like `chat_id`, `phone_number`, and `first_name`, and provides functions to create and serialize contact messages. Use it to send structured contact information to a Telegram chat, such as sharing a user's phone number and name with optional notification settings or reply behavior.",
      "description_length": 413,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Telegram.Api",
      "library": "telegraml",
      "description": "Handles core API interactions for sending requests and processing responses, including data validation and error handling. Works with structured data types like JSON objects and API-specific data models. Used to enforce API rules when transmitting messages, user data, or bot commands.",
      "description_length": 285,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Mk",
      "library": "telegraml",
      "description": "This module enables sending text and media messages (photos, audio, documents, etc.) to Telegram chats and handling user interactions through inline queries, callback queries, and chat actions. It works with Telegram entities like chat identifiers, file identifiers, and user identifiers, supporting asynchronous operations via Lwt promises. Specific functionalities include managing chat members (banning, kicking), retrieving update data, and running a bot's event loop to process incoming messages and interactions.",
      "description_length": 518,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Audio",
      "library": "telegraml",
      "description": "Handles audio metadata parsing and construction for Telegram bot interactions. It provides `create` for building audio objects with required and optional fields, and `read` for decoding JSON into structured audio data. Used to prepare audio messages for sending or processing within Telegram's API workflows.",
      "description_length": 308,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Message",
      "library": "telegraml",
      "description": "This module constructs and parses Telegram message objects using JSON, enabling creation with optional fields like text, media, and metadata. It handles message data structures containing sender details, chat context, and content types such as audio, document, or location. Use it to build or decode messages for bot logic, like responding to user input or processing media uploads.",
      "description_length": 382,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramUtil.Result",
      "library": "telegraml",
      "description": "This module implements monadic operations for handling result values, providing `return` to wrap values, `default` to extract values or use a fallback, `>>=` for chaining computations on success, and `<$>` to map functions over results. It works with the `result` type, which represents either a successful value or an error. Concrete use cases include parsing user input, handling API responses, and sequencing operations that may fail, such as validating and processing Telegram messages.",
      "description_length": 490,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Result",
      "library": "telegraml",
      "description": "Handles success or failure outcomes of API operations, providing `return` to wrap values, `default` to extract values with a fallback, and monadic bind `>>=` and map `<$>` to chain and transform results. Works with the `result` type representing either a success or failure state. Useful for processing Telegram bot API calls where operations may fail, allowing clean error propagation and transformation of successful responses.",
      "description_length": 429,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.CallbackQuery",
      "library": "telegraml",
      "description": "This module handles callback queries triggered by users interacting with inline keyboards in Telegram bots. It provides functions to construct and parse callback query data, including identifiers, user information, message context, and payload data. It is used to process user selections or actions on interactive bot interfaces, such as menus or confirmation prompts.",
      "description_length": 368,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Video",
      "library": "telegraml",
      "description": "Handles video data structures for Telegram bot interactions, offering functions to create and parse video metadata from JSON. Works with the `video` record type, including fields like `file_id`, `width`, `height`, and optional attributes such as `thumb` and `mime_type`. Used to construct and decode video messages when sending or processing videos through the Telegram API.",
      "description_length": 374,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Chat",
      "library": "telegraml",
      "description": "Handles creation and parsing of Telegram chat entities, supporting private, group, supergroup, and channel types. Works with `chat_type` enums and `chat` records containing metadata like id, title, and username. Used to construct chat objects programmatically or decode them from JSON during bot event processing.",
      "description_length": 313,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.File",
      "library": "telegraml",
      "description": "This module handles file metadata and downloading for files stored on Telegram's servers. It works with a `file` type containing `file_id`, `file_size`, and `file_path`, and supports creating, parsing from JSON, and downloading files using their path. It is used to retrieve media such as photos, documents, or audio sent via Telegram bots.",
      "description_length": 340,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Voice",
      "library": "telegraml",
      "description": "Handles voice message data with functions to create and parse voice objects, including metadata like file ID, duration, and MIME type. Works with JSON and voice records for processing incoming voice messages. Used to manage voice attachments in bot responses and message parsing.",
      "description_length": 279,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Command",
      "library": "telegraml",
      "description": "This module defines actions for interacting with the Telegram Bot API, including sending messages, managing chats, handling media, and processing updates. It works with data types like `action` for representing API operations and `command` for structuring bot commands with name, description, and execution logic. Concrete use cases include responding to user messages with `SendMessage`, handling inline queries with `AnswerInlineQuery`, and chaining multiple API actions using `Chain`.",
      "description_length": 487,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Document",
      "library": "telegraml",
      "description": "Handles document data received from Telegram bots, including parsing from JSON and constructing with optional metadata like thumbnails, MIME type, and file size. Works with the `document` type, which represents file attachments in bot interactions. Used when processing incoming document messages or building document responses that include metadata for client-side handling.",
      "description_length": 375,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Telegram.Actions",
      "library": "telegraml",
      "description": "This module handles message composition and interaction workflows for Telegram bots, supporting media transmission (text, audio, video, etc.), chat administration (member management, metadata retrieval), and inline query processing. It operates on structured data like chat/user identifiers, geographic coordinates, and API response types, using combinators to sequence actions or branch logic based on intermediate results. Typical applications include bots requiring automated message handling, group moderation capabilities, or context-aware interactions that chain API operations and update processing with conditional execution flows.",
      "description_length": 639,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Sticker",
      "library": "telegraml",
      "description": "This module defines a `sticker` type representing Telegram sticker metadata, including file identifiers, dimensions, optional thumbnails, and emoji. It provides `create` for constructing sticker values and `read` for parsing them from JSON. The `Out` submodule handles building and preparing outgoing sticker messages with functions like `create`, `prepare`, and `prepare_multipart` for use when sending stickers to users.",
      "description_length": 422,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.InputMessageContent",
      "library": "telegraml",
      "description": "This module defines data types for constructing content sent in response to inline queries, including text, location, venue, and contact information. It provides functions to create and format these content types with specific parameters like message text, geographic coordinates, or contact details. These operations are used to generate structured JSON payloads for Telegram bot responses, such as sending a venue or contact directly from an inline query result.",
      "description_length": 464,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Location",
      "library": "telegraml",
      "description": "This module defines a `location` type with latitude and longitude coordinates, and provides functions to construct and parse location data. It includes `create` for building location values with specified coordinates and `read` for extracting locations from JSON. Use it to handle geographic positions sent or received in a Telegram bot, such as user location sharing or bot-triggered location messages.",
      "description_length": 403,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Contact",
      "library": "telegraml",
      "description": "Handles contact data structures and JSON parsing for Telegram bot interactions. Provides `create` to construct contact objects with required and optional fields, and `read` to parse JSON into contact records. Used to manage user contact information, such as when a bot receives or sends contact details in a chat.",
      "description_length": 313,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.MessageEntity",
      "library": "telegraml",
      "description": "Handles text formatting entities like mentions, hashtags, and bold/italic styles within Telegram bot messages. It processes JSON input to construct message entities with type, offset, and length, enabling rich text rendering in sent or edited messages. Used when parsing or building messages with formatted text segments or user mentions.",
      "description_length": 338,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.UserProfilePhotos",
      "library": "telegraml",
      "description": "Handles user profile photo data by creating and parsing structured representations of photo collections. Works with `user_profile_photos` records containing a total count and nested lists of `photo_size` elements. Used to construct user profile photo instances from JSON responses or explicitly defined parameters.",
      "description_length": 314,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.InlineQuery",
      "library": "telegraml",
      "description": "This module handles inline query interactions for Telegram bots by parsing incoming queries and chosen results from JSON, and constructing structured responses. It defines data types for inline queries and results, including metadata like user identifiers, query strings, and offsets. Concrete use cases include processing user input for inline searches and generating rich media responses with thumbnails, descriptions, and interactive elements.",
      "description_length": 446,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.InlineKeyboardButton",
      "library": "telegraml",
      "description": "This module defines a data structure for representing individual buttons in a Telegram inline keyboard, with fields for text, optional URLs, callback data, and inline query switches. It provides functions to construct a button with optional parameters and to serialize it into JSON for API requests. It is used to build interactive inline keyboards that respond to user actions in Telegram bots.",
      "description_length": 395,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Update",
      "library": "telegraml",
      "description": "Handles parsing and extracting update data from Telegram's API, specifically for processing events like messages, inline queries, and callback queries. Works with JSON input and the `update` variant type, which encapsulates different kinds of Telegram updates along with their associated data. Directly used to convert raw API responses into structured update values and retrieve update IDs for tracking or ordering purposes.",
      "description_length": 425,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.InputFile",
      "library": "telegraml",
      "description": "Handles file loading and multipart form data construction for sending files via HTTP requests. Works with strings representing file paths and raw byte data. Used to prepare file attachments for Telegram bot messages by formatting them into HTTP multipart bodies.",
      "description_length": 262,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.User",
      "library": "telegraml",
      "description": "Handles user data in Telegram bots by providing functions to create and parse user objects. Works with JSON data and the `user` type, which includes identifiers, names, and optional username. Used to construct user instances from API responses or input data.",
      "description_length": 258,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.ChatMember",
      "library": "telegraml",
      "description": "This module handles chat member data in Telegram bot development, providing functions to parse, create, and represent chat members with their respective statuses. It works with `chat_member` records containing a `user` and a `status`, where `status` can be one of `Creator`, `Administrator`, `Member`, `Left`, or `Kicked`. Use cases include interpreting JSON responses from the Telegram API into typed chat member structures and constructing chat member values for testing or internal logic.",
      "description_length": 491,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.ReplyMarkup",
      "library": "telegraml",
      "description": "This module defines data structures for constructing reply markup options in Telegram bot messages, including reply keyboards, inline keyboards, and force reply prompts. It provides functions to create and serialize these markup types into JSON for API requests. Use cases include building interactive message interfaces like menus, quick reply buttons, and conditional reply prompts directly within bot responses.",
      "description_length": 414,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.ParseMode",
      "library": "telegraml",
      "description": "This module defines the `parse_mode` type, which represents formatting options for messages using markup languages. It includes the `string_of_parse_mode` function to convert a `parse_mode` value to its string representation. Use this module when specifying how message content should be parsed, such as when sending formatted text in a bot response.",
      "description_length": 350,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.PhotoSize",
      "library": "telegraml",
      "description": "This module defines a `photo_size` record representing metadata for images sent via the Telegram bot API, including file ID, dimensions, and optional file size. It provides functions to construct instances with `create` and parse from JSON with `read`. It is used to prepare image messages for sending, supporting both file-based and raw data uploads through the `Out` submodule.",
      "description_length": 379,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.ChatAction",
      "library": "telegraml",
      "description": "This module defines a variant type `action` representing user status actions that can be sent via the Telegram bot API, such as typing or uploading media. It includes a function `to_string` that converts each action to its string representation for use in JSON payloads. Concrete use cases include signaling to users that the bot is processing a response or preparing media.",
      "description_length": 374,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Venue",
      "library": "telegraml",
      "description": "Handles venue data construction and JSON parsing for Telegram bot interactions. Works with `venue` records containing location, title, address, and optional Foursquare ID. Used to create and decode venue messages with precise geographic and contextual information for bot responses.",
      "description_length": 282,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.KeyboardButton",
      "library": "telegraml",
      "description": "This module defines a `keyboard_button` type representing buttons on a Telegram bot's custom keyboard, with fields for text and optional contact or location requests. It provides `create` to construct buttons with specified properties and `prepare` to serialize them to JSON for API requests. Concrete use cases include building reply keyboards for user interaction, such as prompting users to share contact details or location.",
      "description_length": 428,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Telegram.BotDefaults",
      "library": "telegraml",
      "description": "This module defines default configuration values for bot behavior, including event handlers for chat interactions, command processing, and inline queries. It works with Telegram API data types such as commands, inline queries, callback queries, and chat events. Concrete use cases include setting up bot responses to new chat members, handling command postfixes, and defining actions for chat title or photo changes.",
      "description_length": 416,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi",
      "library": "telegraml",
      "description": "This module enables constructing and parsing message content with media and interactive elements, managing user interactions through inline queries and chat events, and handling error propagation via result monads. It operates on data structures representing messages, users, chats, keyboard components, and update events, with JSON serialization for API communication. Common applications include building bots that process incoming updates, send media with custom markup, and manage callback queries or chat member actions robustly.",
      "description_length": 534,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramUtil",
      "library": "telegraml",
      "description": "This module manipulates tagged values and optional data through projection, injection, and monadic composition. It handles polymorphic variant types like `String`, `Int`, `Bool`, `List`, and `Assoc`, offering direct access and conversion functions. Use cases include extracting and validating fields from Telegram message objects, constructing structured data for API requests, and safely processing nested or optional values.",
      "description_length": 426,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Telegram",
      "library": "telegraml",
      "description": "This module implements Telegram bot functionality through API interaction, action composition, and default behavior configuration. It processes structured data like JSON payloads, chat events, and media content to support message handling, user interaction workflows, and bot command routing. Concrete use cases include automating chat responses, managing group membership changes, and implementing inline query handlers with typed data transformations.",
      "description_length": 453,
      "index": 45,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 47,
    "meaningful_modules": 46,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9787234042553191
  },
  "statistics": {
    "max_description_length": 639,
    "min_description_length": 258,
    "avg_description_length": 393.2608695652174,
    "embedding_file_size_mb": 0.6671934127807617
  }
}