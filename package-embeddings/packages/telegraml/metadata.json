{
  "package": "telegraml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 48,
  "creation_timestamp": "2025-07-15T23:14:24.719400",
  "modules": [
    {
      "module_path": "TelegramApi.Venue.Out",
      "library": "telegraml",
      "description": "Handles venue creation and serialization for Telegram bot interactions. Works with venue records containing location details and optional parameters like Foursquare ID or reply markup. Directly used to construct and format venue data before sending it through the Telegram API.",
      "description_length": 277,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Contact.Out",
      "library": "telegraml",
      "description": "This module constructs and prepares contact messages for sending in a Telegram bot. It defines a `contact` type with fields like `chat_id`, `phone_number`, and `first_name`, and provides `create` to build contact payloads and `prepare` to serialize them into JSON. Use it to send structured contact information directly to a Telegram chat.",
      "description_length": 339,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Video.Out",
      "library": "telegraml",
      "description": "This module defines operations for constructing and preparing outgoing video messages to send via the Telegram bot API. It works with a `video` record type containing metadata like chat identifier, video content, duration, and optional reply settings. Concrete use cases include sending pre-uploaded videos by file ID or streaming raw video bytes directly to a chat.",
      "description_length": 366,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.InlineQuery.Out",
      "library": "telegraml",
      "description": "This module defines types and functions to construct responses for inline queries, supporting diverse result formats like articles, media, and cached content. It centers on a unified variant type that encapsulates metadata, interactive elements, and content-specific details, enabling bots to dynamically generate tailored replies. Key use cases include sending rich media previews, structured data, or precomputed results with customizable layouts and actions in inline query interactions.",
      "description_length": 490,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.PhotoSize.Out",
      "library": "telegraml",
      "description": "This module defines the structure and operations for sending photo messages in a Telegram bot. It includes functions to create a photo message with parameters like chat ID, image data, caption, and reply settings, and prepares the message for transmission either by file ID or raw bytes. It works directly with Telegram's API to handle outgoing media in bot interactions.",
      "description_length": 371,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Document.Out",
      "library": "telegraml",
      "description": "This module constructs and prepares outgoing document messages for sending via the Telegram bot API. It handles document payloads with metadata like chat ID, file data, and optional reply settings. It supports use cases like sending files directly by ID or streaming raw document content.",
      "description_length": 288,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Sticker.Out",
      "library": "telegraml",
      "description": "This module defines operations for constructing and preparing outgoing sticker messages to send via the Telegram bot API. It works with a `sticker` record containing metadata like the target chat ID, sticker source, and optional reply settings, and provides functions to format the message for transmission. Concrete use cases include sending stickers by file ID or raw image data, such as responding to a user with a predefined sticker or uploading a new one from memory.",
      "description_length": 472,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Voice.Out",
      "library": "telegraml",
      "description": "This module defines voice message construction and serialization for sending audio content. It handles data structures containing chat identifiers, audio file references or raw data, and message options like notifications and replies. Functions support creating voice payloads, preparing file-based audio for transmission, and serializing raw audio bytes for API requests.",
      "description_length": 372,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Audio.Out",
      "library": "telegraml",
      "description": "This module constructs and prepares outgoing audio messages for sending via the Telegram bot API. It defines an `audio` record with fields like `chat_id`, `audio`, `duration`, and `reply_markup`, and provides functions to create audio payloads, prepare them for transmission using file IDs, or send raw audio bytes. Concrete use cases include sending pre-uploaded audio files or streaming audio data directly to a Telegram chat.",
      "description_length": 428,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Location.Out",
      "library": "telegraml",
      "description": "This module constructs and serializes location messages for sending via the Telegram bot API. It defines a `location` record with parameters like `chat_id`, `latitude`, `longitude`, and optional message settings such as `disable_notification` and `reply_markup`. The `create` function builds a location instance with optional parameters, while `prepare` converts it into a string payload suitable for transmission.",
      "description_length": 414,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Video",
      "library": "telegraml",
      "description": "This module handles video data in Telegram bot interactions, combining core functions for constructing and parsing video objects with utilities for sending videos directly. It works with a custom `video` type containing metadata such as file ID, dimensions, duration, and optional thumbnail or reply settings, and supports both pre-uploaded videos and raw byte streaming. The module parses incoming video messages and prepares outgoing ones, allowing operations like extracting video metadata from JSON or building a video response with a specified chat identifier. Use it to process received videos or send videos by file ID, with control over duration and interaction settings.",
      "description_length": 679,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Result",
      "library": "telegraml",
      "description": "Handles success or failure outcomes of API actions with monadic and functorial operations. Works with the `result` type, which wraps values in `Success` or `Failure` states. Enables chaining operations with `>>=` and mapping values with `<$>`, while `default` extracts a value or returns a fallback. Useful for processing Telegram bot API responses where errors must be handled gracefully.",
      "description_length": 389,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.ReplyMarkup",
      "library": "telegraml",
      "description": "This module defines data structures for constructing reply markup types used in Telegram bot messages, including reply keyboards, inline keyboards, and reply hiding or forcing options. It provides functions to create and serialize these markup types into JSON for API requests. Concrete use cases include building custom keyboard layouts for user input or hiding the keyboard after a specific interaction.",
      "description_length": 405,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Telegram.BotDefaults",
      "library": "telegraml",
      "description": "This module defines default configuration values for bot behavior, including command handling, inline and callback query responses, and chat event actions. It works with Telegram-specific data types such as commands, inline queries, callback queries, and chat events. Use this to set up a bot with predefined responses to Telegram API events without custom configuration.",
      "description_length": 371,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.TELEGRAM_BOT",
      "library": "telegraml",
      "description": "This module provides functions for sending text, media, and geolocation data (e.g., `send_location`, `send_venue`), managing chat members (e.g., `kick`, `unban`), handling inline/callback queries, and editing messages. It operates on chat/user IDs, file metadata, geographic coordinates, and event-driven updates, leveraging asynchronous I/O for API interactions. Specific use cases include automating user interactions, moderating group chats, retrieving user profile photos, and implementing real-time command execution via update loops.",
      "description_length": 539,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Message",
      "library": "telegraml",
      "description": "Handles message creation, JSON parsing, and sender information extraction for Telegram bot interactions. Works with Telegram message data structures, including user, chat, and media types. Used to construct messages programmatically, parse incoming JSON payloads, and retrieve formatted sender details for logging or response handling.",
      "description_length": 335,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.InputMessageContent",
      "library": "telegraml",
      "description": "This module defines data types for constructing message content sent in response to inline queries, including text, location, venue, and contact information. It provides functions to create and prepare these content types for transmission, such as setting message text with optional parsing and preview settings, specifying geographic coordinates, and formatting venue or contact details. Concrete use cases include building rich inline query responses with formatted text, locations, or business contacts for Telegram bots.",
      "description_length": 524,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.Audio",
      "library": "telegraml",
      "description": "This module manages audio data in Telegram bot interactions, handling both the construction of outgoing audio messages and the parsing of incoming audio payloads. It defines a core audio type with metadata such as file ID, duration, and optional performer or title, supporting operations to serialize audio for API responses or extract details from JSON messages. The child module focuses on preparing and sending audio, offering record types and functions to build payloads with chat ID, audio source, and optional reply markup. Together, they enable use cases like sending pre-uploaded files by ID, streaming raw audio bytes, or parsing received audio metadata from incoming messages.",
      "description_length": 686,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.CallbackQuery",
      "library": "telegraml",
      "description": "This module handles callback queries triggered by users interacting with inline keyboards in Telegram bots. It provides functions to construct and parse callback query data, including identifiers, user information, message context, and payload data. Use it to process button presses in inline interfaces, like confirming actions or navigating menus.",
      "description_length": 349,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.InlineKeyboardButton",
      "library": "telegraml",
      "description": "Represents an individual button on a custom inline keyboard for Telegram bots. It includes fields for text, optional URL, callback data, and inline query switching, with functions to create and serialize the button to JSON for API requests. Used to build interactive inline keyboards in bot messages.",
      "description_length": 300,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.User",
      "library": "telegraml",
      "description": "Handles user data in Telegram bot interactions, providing functions to create and parse user records. Works with the `user` type, which includes identifiers and profile details from Telegram. Use this module to construct user instances from API responses or serialize them from JSON input.",
      "description_length": 289,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.UserProfilePhotos",
      "library": "telegraml",
      "description": "Handles user profile photo data by creating and parsing user profile photo objects from JSON. Works with user_profile_photos records containing total photo count and grouped PhotoSize entries. Used to retrieve and structure a user's profile images in a Telegram bot.",
      "description_length": 266,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.PhotoSize",
      "library": "telegraml",
      "description": "This module manages image metadata for chat messages, providing functions to create and parse photo size data using JSON and a record type that includes file identifiers, dimensions, and optional file size. It supports constructing and processing image attachments in Telegram bot responses, either by file ID or raw bytes. The child module extends this functionality to sending photo messages with parameters like chat ID, caption, and reply settings. Together, they enable handling both the structural data and transmission logic for images in bot interactions.",
      "description_length": 563,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.KeyboardButton",
      "library": "telegraml",
      "description": "This module defines a `keyboard_button` type with `text`, `request_contact`, and `request_location` fields, representing buttons in Telegram custom keyboards. It provides `create` for constructing buttons with optional contact or location requests and `prepare` for serializing buttons to JSON. It is used to build and send custom reply keyboards in Telegram bot interactions.",
      "description_length": 376,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.ChatAction",
      "library": "telegraml",
      "description": "This module defines a set of user status actions that can be sent through the Telegram bot API, such as typing or uploading media. It includes a type `action` with variants for each possible status and a `to_string` function to convert these actions into their string representations for JSON serialization. Use this module to indicate bot user activity in real-time, such as signaling that the bot is typing a response or uploading a file.",
      "description_length": 440,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi.File",
      "library": "telegraml",
      "description": "Handles file metadata and downloading for files stored on Telegram servers. It provides functions to create, parse, and download files using their file path and ID. Useful when processing documents, images, or other media sent by users to a Telegram bot.",
      "description_length": 254,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Document",
      "library": "telegraml",
      "description": "This module manages document creation and JSON parsing for Telegram bot file attachments, handling document records with metadata such as file IDs, thumbnails, and MIME types. It supports constructing and decoding document payloads for sending or processing files in messages, including direct file ID usage or streaming raw content. The module works with chat ID assignment, file data embedding, and optional reply configurations to customize outgoing document messages. Specific operations include building document payloads with metadata and parsing incoming document data from Telegram's API responses.",
      "description_length": 606,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Location",
      "library": "telegraml",
      "description": "This module manages geographic location data for Telegram bots, centered around `latitude` and `longitude` floats. It includes core functions `create` and `read` for constructing and parsing location values, often used in user location sharing. A child module builds and serializes location messages with parameters like `chat_id` and `disable_notification`, preparing them for API transmission. Together, they enable precise handling and exchange of geographic positions in bot interactions.",
      "description_length": 492,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramUtil.Result",
      "library": "telegraml",
      "description": "This module implements monadic operations for handling result values, providing functions to chain computations and extract values with a default fallback. It works with the `result` type, which represents either a successful value or an error. Concrete use cases include error propagation in parsing or API response handling, where operations like mapping and binding over results streamline control flow.",
      "description_length": 406,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Chat",
      "library": "telegraml",
      "description": "Handles creation and parsing of Telegram chat entities, supporting private, group, supergroup, and channel types. Works with JSON data and constructs chat records containing identifiers, type, and metadata like titles or usernames. Used to build or extract structured chat information when processing Telegram bot events or API responses.",
      "description_length": 338,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Telegram.Actions",
      "library": "telegraml",
      "description": "This module enables composing and executing bot interactions through sequential or chained API commands, handling tasks like message and media dispatch, chat management, inline query responses, and update processing. It operates on Telegram API primitives such as chat/user IDs, message identifiers, geographic coordinates, and update payloads, leveraging result-wrapped actions for error propagation. Typical applications include building event-driven bots that process user interactions, automate chat workflows, or stream media with fluent command pipelines.",
      "description_length": 561,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.BOT",
      "library": "telegraml",
      "description": "This module defines the configuration and behavior of a Telegram bot, including its token, command set, and handlers for various events like inline queries, chat member changes, and chat metadata updates. It works with Telegram-specific data types such as commands, inline queries, callback queries, chats, users, and messages. Concrete use cases include setting up bot commands, responding to inline and callback queries, and handling chat events like new members, title changes, and message pinning.",
      "description_length": 501,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.ChatMember",
      "library": "telegraml",
      "description": "This module handles chat member data in Telegram bot development, providing functions to parse and construct chat member information. It works with `chat_member` records containing a `user` and a `status`, where `status` is an enumerated type representing membership states like `Creator`, `Administrator`, or `Kicked`. Use this module to create chat member entries or extract them from JSON responses when managing group or channel participants.",
      "description_length": 446,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.MessageEntity",
      "library": "telegraml",
      "description": "This module defines types and functions for handling text formatting entities in Telegram messages, such as mentions, hashtags, URLs, and bold or italic text. It includes functions to construct and parse message entities with specific offsets and formatting types, enabling precise text styling in bot-generated messages. Use cases include formatting bot responses with inline links, code snippets, or user mentions based on incoming message data.",
      "description_length": 447,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Update",
      "library": "telegraml",
      "description": "Handles parsing and extracting information from Telegram API update objects. Works with JSON input and the `update` variant type, which represents different kinds of updates like messages or inline queries. Used to read update data from raw JSON and retrieve the unique identifier for an update.",
      "description_length": 295,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Command",
      "library": "telegraml",
      "description": "This module defines command handlers and actions for interacting with the Telegram Bot API, including sending messages, managing chat actions, handling media, and processing updates. It works with data types like `action`, `command`, and structures from the Telegram API such as messages, chats, and updates. Concrete use cases include parsing incoming messages to trigger specific bot responses, sending photos or documents with optional captions, and restricting command access to chat admins.",
      "description_length": 495,
      "index": 35,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "TelegramApi.ParseMode",
      "library": "telegraml",
      "description": "This module defines the `parse_mode` type, which represents formatting options for messages in markup languages. It includes two variants, `Markdown` and `Html`, and provides the `string_of_parse_mode` function to convert these variants to their corresponding string representations. Use this module when specifying how message text should be parsed when sending formatted messages through the Telegram bot API.",
      "description_length": 411,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Telegram.Api",
      "library": "telegraml",
      "description": "Handles low-level communication with the Telegram Bot API, including sending HTTP requests and parsing responses. Works with data types like `message`, `update`, and `chat_id` to enable message sending, updates fetching, and chat interactions. Used to implement bot backends that process incoming messages, send replies, and manage chat state.",
      "description_length": 343,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Venue",
      "library": "telegraml",
      "description": "This module manages venue data for Telegram bot interactions, combining venue creation and JSON parsing capabilities. It provides the `create` function to build venue objects with location, title, address, and optional Foursquare ID, and `read` to parse venue data from JSON. The module supports constructing and deserializing venue information, enabling bots to send rich venue details to users or process incoming data from Telegram. Submodules handle additional formatting and optional parameters like reply markup during venue serialization.",
      "description_length": 545,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.InlineQuery",
      "library": "telegraml",
      "description": "This module processes inline queries from Telegram users, parsing input and handling result selections using JSON data structures. It provides core types for representing queries and results, along with functions to encode and decode these structures when interacting with Telegram's API. The child module focuses on building rich, structured responses using a unified variant type that supports articles, media, and cached content with customizable layouts and actions. Together, they enable bots to receive user input inline, process it, and return dynamic, interactive results such as media previews or precomputed suggestions.",
      "description_length": 630,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.InputFile",
      "library": "telegraml",
      "description": "Handles file loading and HTTP multipart/form-data formatting for sending files via Telegram bot messages. Works with raw file data, string-based HTTP headers, and key-value parameter lists. Directly supports sending images, documents, and media files by preparing properly formatted HTTP requests with file attachments.",
      "description_length": 319,
      "index": 40,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "TelegramApi.Sticker",
      "library": "telegraml",
      "description": "This module manages sticker creation and JSON parsing for Telegram bot interactions, centering around the `sticker` record that holds metadata such as file ID, dimensions, and optional emoji or thumbnail. It enables constructing stickers programmatically or deserializing sticker data from incoming JSON payloads, supporting both direct API usage and integration with submodules. The submodule handles preparing outgoing sticker messages, allowing stickers to be sent by file ID or uploaded from raw image data, with options to specify target chat IDs and reply settings. Together, they facilitate both the representation and transmission of stickers within a Telegram bot application.",
      "description_length": 685,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Contact",
      "library": "telegraml",
      "description": "This module manages contact creation and JSON parsing for Telegram bot interactions, working with `contact` records that include phone number, name, and optional user ID. It provides `create` to build contact payloads and `prepare` to serialize them into JSON, enabling structured contact information to be sent directly to a Telegram chat. The module integrates with its submodules to handle both construction and serialization of contact data. Use it to generate and send contacts, or parse incoming contact responses from the Telegram API.",
      "description_length": 542,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramApi.Voice",
      "library": "telegraml",
      "description": "This module manages voice message data in Telegram bot interactions, offering functions to create and parse messages with attributes such as file ID, duration, MIME type, and file size. It supports constructing voice payloads with chat identifiers, audio file references, and message options like notifications and replies, enabling bots to send or process audio content directly. Operations include serializing raw audio bytes, preparing files for transmission, and integrating voice messages into API requests. Use it to handle voice input from users or generate voice responses in event handlers and bot workflows.",
      "description_length": 617,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Telegram",
      "library": "telegraml",
      "description": "This module orchestrates bot behavior by integrating configuration, interaction logic, and API communication. It centers around Telegram data types like `chat_id`, `update`, `message`, and query primitives, enabling bots to process commands, inline queries, and chat events with structured responses. Operations include message dispatch, media handling, update processing, and chat management via fluent command pipelines and result-wrapped actions. Example uses include automating chat workflows, responding to user commands, streaming media, and managing bot interactions through typed API calls.",
      "description_length": 598,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TelegramActions",
      "library": "telegraml",
      "description": "This module orchestrates Telegram bot workflows by enabling sequential execution of commands like message and media delivery, chat administration, and interaction handling via inline or callback queries. It processes data including chat identifiers, user metadata, geographic coordinates, and API response types, facilitating scenarios such as automated user onboarding, content broadcasting, and dynamic response generation based on incoming updates. Update inspection functions allow non-destructive analysis of message streams, supporting conditional action chains triggered by specific user inputs or system events.",
      "description_length": 619,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramUtil",
      "library": "telegraml",
      "description": "This module provides utilities for working with polymorphic variants that represent JSON-like data structures, particularly for parsing and constructing values from Telegram's API. It includes functions for safely accessing fields in associative lists, chaining optional computations, and converting between basic types and their variant representations. The result submodule adds monadic operations for handling and propagating errors during data extraction or transformation, allowing fallbacks and clean control flow. Examples include safely parsing nested JSON responses, handling optional fields, and building structured API requests with type-safe constructors.",
      "description_length": 667,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TelegramApi",
      "library": "telegraml",
      "description": "This module orchestrates the core logic for building and managing Telegram bots by integrating update processing, message handling, and interaction management. It defines primary data types such as `update`, `message`, `chat`, `user`, and `result`, and supports operations like command parsing, media handling, and structured message construction. With functions for sending media, managing chat members, and handling inline and callback queries, it enables bots to respond to user input, send rich content, and maintain interactive sessions. Submodules extend this functionality with specialized handling for media types like video, audio, and stickers, structured reply markup, and detailed user and chat metadata, allowing precise control over bot behavior across diverse interaction scenarios.",
      "description_length": 797,
      "index": 47,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 49,
    "meaningful_modules": 48,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9795918367346939
  },
  "statistics": {
    "max_description_length": 797,
    "min_description_length": 254,
    "avg_description_length": 457.125,
    "embedding_file_size_mb": 0.17482757568359375
  }
}