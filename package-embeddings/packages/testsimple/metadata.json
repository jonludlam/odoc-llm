{
  "package": "testsimple",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:52.468361",
  "modules": [
    {
      "module_path": "TestBuilder.Tester",
      "description": "Provides functions to execute and report test cases, with `plan` specifying a fixed number of tests and `no_plan` allowing dynamic test execution. Operates on unit-returning functions and generates string-based test results. Used to structure and validate test suites in automated testing workflows.",
      "description_length": 299,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "testsimple",
      "description": "Provides functions to parse and validate simple configuration files, including reading key-value pairs and checking for required fields. Operates on strings and associative lists, handling basic type conversions. Used to initialize application settings from a text-based config source.",
      "description_length": 285,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TAPDocument",
      "description": "Counts the number of test nodes in a list, optionally filtering by a test index. Constructs footer nodes for test counts and failures based on integer parameters. Processes and converts internal representations of test documents, nodes, and statuses into string formats for output. Works with test status, diagnostic, directive, and node structures to generate human-readable TAP document representations.",
      "description_length": 405,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TestBuilder",
      "description": "Executes and reports test cases using `plan` for fixed test counts or `no_plan` for dynamic execution, operating on unit-returning functions to generate string-based results. Supports structured test suite validation through functions that track success, failure, and output. Examples include running a predefined set of tests or dynamically adding tests based on runtime conditions. Provides control over test flow and detailed reporting for automated testing environments.",
      "description_length": 474,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TestSimple",
      "description": "Provides test planning and assertion functions, including `plan` to set expected test count, `no_plan` for dynamic testing, `ok` to check boolean conditions, `is` to compare values, and `diag` to output diagnostic messages. Works with booleans, arbitrary values, and strings to validate behavior and report results. Used to structure and execute simple test suites with explicit pass/fail outcomes.",
      "description_length": 398,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 474,
    "min_description_length": 285,
    "avg_description_length": 372.2,
    "embedding_file_size_mb": 0.018617630004882812
  }
}