{
  "package": "bap-trace",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:34.040393",
  "modules": [
    {
      "module_path": "Trace_main.Config",
      "library": "bap-plugin-trace",
      "description": "This module provides utilities for parsing, converting, and documenting configuration values with rich type support, including primitives, enumerations, file paths, and structured types like lists and tuples. It handles command-line parameters, default values, deprecation warnings, and manpage generation, while enabling customizable separators and optional value handling for structured data. Typical use cases include CLI argument parsing, configuration validation for file paths and directories, and generating structured documentation from typed parameters.",
      "description_length": 562,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Trace_main.Cmdline",
      "library": "bap-plugin-trace",
      "description": "This module handles command-line configuration for URI-based tracing operations. It provides functions to parse URIs, define command-line parameters for loading from or dumping to URIs, and format exit messages. It is used to configure trace sources and outputs via command-line arguments.",
      "description_length": 289,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Trace_main",
      "library": "bap-plugin-trace",
      "description": "This module provides a command-line interface for trace analysis with built-in support for loading, processing, and dumping execution traces. It includes logging at multiple severity levels, progress reporting, and trace data manipulation, while integrating URI handling for input/output operations. The configuration module enables parsing and validation of structured command-line parameters, including file paths, lists, and enums, with support for defaults and deprecation. The URI module extends this by parsing and configuring trace sources and outputs via command-line URIs, allowing seamless trace ingestion and export workflows. Example tasks include loading a trace from a file URI, applying structured configuration options, and logging progress or errors during analysis.",
      "description_length": 783,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 783,
    "min_description_length": 289,
    "avg_description_length": 544.6666666666666,
    "embedding_file_size_mb": 0.011312484741210938
  }
}