{
  "package": "async_durable",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:55:59.206638",
  "modules": [
    {
      "module_path": "Async_durable.State_rpc.Update",
      "library": "async_durable",
      "description": "This module handles updates for state RPCs, providing automatic recovery from lost connections. It works with state, update, error, and metadata types, allowing clients to track and respond to subscription loss or recovery events. Use it to maintain resilient stateful RPC connections that notify clients of connection status changes.",
      "description_length": 334,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Async_durable.Pipe_rpc",
      "library": "async_durable",
      "description": "This module manages durable pipe RPC subscriptions that automatically recover from connection failures, providing visibility into subscription state changes. It works with RPC connections, pipe RPCs, and versioned RPCs, handling reconnection delays and returning response streams with error and recovery updates. Concrete use cases include maintaining long-lived subscriptions to remote data feeds or event streams that must survive transient network outages.",
      "description_length": 459,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Async_durable.State_rpc",
      "library": "async_durable",
      "description": "This module manages state RPC subscriptions that automatically recover from connection failures, exposing state transitions to clients. It works with state, update, error, and metadata types through versioned and non-versioned RPCs, returning pipes that emit updates and subscription status changes. Use it to maintain persistent RPC subscriptions that handle reconnection logic and notify clients when state synchronization is lost or restored.",
      "description_length": 445,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Async_durable.Subscription",
      "library": "async_durable",
      "description": "Handles durable subscriptions to RPC services, automatically resubscribing after connection failures and returning updates via a pipe. Works with RPC connections, pipe RPCs, and time sources to manage query-based subscriptions with delay-backed resubscription logic. Useful for maintaining reliable streaming data feeds over potentially flaky network connections.",
      "description_length": 363,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Async_durable",
      "library": "async_durable",
      "description": "This module provides functions to manage durable resources that can be automatically recreated or rebuilt upon failure, using a `with_` interface that handles connection-level errors explicitly. It works with mutable types like `Rpc.Connection.t`, ensuring reliable access by checking integrity before use and recovering via user-defined rebuild strategies. Concrete use cases include maintaining persistent RPC connections, durable pipe subscriptions, and stateful RPC subscriptions that automatically recover from transient failures while exposing state changes and errors directly to callers.",
      "description_length": 595,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 5,
    "filtered_empty_modules": 2,
    "retention_rate": 0.7142857142857143
  },
  "statistics": {
    "max_description_length": 595,
    "min_description_length": 334,
    "avg_description_length": 439.2,
    "embedding_file_size_mb": 0.07287120819091797
  }
}