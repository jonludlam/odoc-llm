{
  "package": "async_durable",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:44.493526",
  "modules": [
    {
      "module_path": "Async_durable.State_rpc.Update",
      "library": "async_durable",
      "description": "This module handles updates for state RPCs, providing automatic recovery from lost connections. It works with state, update, error, and metadata types, allowing clients to track and respond to subscription changes. Concrete use cases include maintaining resilient RPC connections in distributed systems where state synchronization and error handling are critical.",
      "description_length": 363,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Async_durable.Pipe_rpc",
      "library": "async_durable",
      "description": "This module manages durable pipe RPC subscriptions that automatically recover from connection failures, providing clients with visibility into subscription state changes like connection loss and recovery. It supports RPC connections, versioned RPC connections, and pipe RPCs, returning streams of responses alongside state updates that indicate when the connection is lost or reestablished. Clients can use these state updates to handle reconnection delays, negotiate versions, or respond to precise error conditions during subscription failures. Specific use cases include maintaining reliable data feeds over unstable networks and implementing resilient client-server subscriptions that gracefully handle and recover from network outages.",
      "description_length": 740,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Async_durable.State_rpc",
      "library": "async_durable",
      "description": "This module manages stateful RPC subscriptions that automatically recover from connection failures, providing a stream of updates, state changes, and errors. It works with RPC connections, state RPCs, and versioned RPCs, handling reconnection logic and exposing subscription lifecycle events. The child module extends this functionality by introducing support for tracking updates, errors, and metadata, allowing clients to react to subscription state transitions. Together, they enable durable, state-aware RPC communication in distributed systems, ensuring continuity after network interruptions and supporting resilient state synchronization with precise control over recovery and error handling.",
      "description_length": 699,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Async_durable.Subscription",
      "library": "async_durable",
      "description": "This module provides durable subscriptions to RPC pipe endpoints, automatically handling reconnection and resubscription in response to connection failures. It works with RPC connections, pipe RPCs, and time sources to maintain reliable data streams across transient errors. The main data types include subscription handles and configuration parameters for backoff and retry policies. With this module, clients can establish persistent subscriptions that survive network outages and server restarts, ensuring continuous data flow without manual intervention.",
      "description_length": 558,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Async_durable",
      "library": "async_durable",
      "description": "This module manages values that can be automatically rebuilt after failures, such as `Rpc.Connection.t`, using `create`, `create_or_fail`, and `with_` to handle initialization, usage, and error propagation. It exposes state changes via `is_intact_bus`, supporting durable RPC interactions that recover from broken connections while giving precise control over error handling. Child modules extend this behavior to specific RPC patterns, including durable pipe subscriptions that maintain data streams across network outages, stateful RPC subscriptions that track updates and lifecycle events, and resilient pipe RPC clients that automatically resubscribe using configurable retry policies. These capabilities enable reliable, self-healing client-server communication for distributed systems requiring robust state synchronization and continuous data feeds.",
      "description_length": 856,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 5,
    "filtered_empty_modules": 2,
    "retention_rate": 0.7142857142857143
  },
  "statistics": {
    "max_description_length": 856,
    "min_description_length": 363,
    "avg_description_length": 643.2,
    "embedding_file_size_mb": 0.018614768981933594
  }
}