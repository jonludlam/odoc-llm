{
  "package": "iostream",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 12,
  "creation_timestamp": "2025-08-15T12:17:29.135747",
  "modules": [
    {
      "module_path": "Iostream.Slice",
      "library": "iostream",
      "description": "This module manages byte slices with operations to create, inspect, and modify slices in place. It works directly with the `t` type, which contains a `bytes` buffer along with offset and length fields. Use it when efficiently processing segments of byte streams, such as parsing binary data or handling network packets.",
      "description_length": 319,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Iostream.In_buf",
      "library": "iostream",
      "description": "This module provides operations for constructing buffered input streams from sources such as bytes, strings, files, or channels, enabling efficient data consumption through buffer management, line-by-line iteration, and full stream traversal. It works with buffered input streams (type `t`) and character sequences (`char Stdlib.Seq.t`), supporting bidirectional conversions to facilitate incremental parsing or bulk data processing, particularly useful for handling large datasets or interoperating with sequence-driven APIs. Key use cases include on-demand input consumption, structured stream composition, and seamless integration with libraries expecting sequential character interfaces.",
      "description_length": 691,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iostream.In",
      "library": "iostream",
      "description": "This module implements input streams that support reading and seeking over byte sources. It provides functions to create streams from files, strings, or byte buffers, and supports operations like reading into buffers, copying to output streams, and transforming byte content. Use cases include parsing binary file formats, streaming network data, and processing large in-memory buffers without loading entire contents upfront.",
      "description_length": 426,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iostream.Seekable",
      "library": "iostream",
      "description": "This module provides operations to move the read/write position within a stream and to retrieve the current position. It works with seekable stream objects, such as file streams, where the I/O head can be repositioned. Concrete use cases include random access in files, implementing custom stream types with position control, and efficiently navigating large data sources without reloading content.",
      "description_length": 398,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iostream.Out",
      "library": "iostream",
      "description": "This module implements output streams for writing bytes to various destinations such as files, buffers, or channels. It supports operations like writing raw bytes, strings, integers, and transforming or duplicating output across multiple streams. Use cases include logging to multiple outputs, tee-ing output for debugging, and redirecting byte-level writes to in-memory buffers or file descriptors.",
      "description_length": 399,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iostream.Out_buf",
      "library": "iostream",
      "description": "This module implements buffered output streams that write bytes to various destinations, including files, channels, or in-memory buffers. It supports writing individual characters, byte slices, strings, integers, and line sequences, with operations to flush or close the stream. Concrete use cases include efficiently writing structured data to disk, logging to memory buffers, or tee-ing output to multiple destinations.",
      "description_length": 421,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Iostream",
      "library": "iostream",
      "description": "This module provides input and output stream abstractions for efficient byte-level I/O operations. It supports creating, transforming, and composing streams from files, buffers, and channels, with precise control over reading, writing, and positioning. Concrete use cases include parsing binary file formats, streaming network data, logging to multiple outputs, and implementing custom I/O layers with seekable or buffered semantics.",
      "description_length": 433,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iostream_types.Slice",
      "library": "iostream.types",
      "description": "This module represents a slice of bytes with an offset and length, enabling efficient manipulation of byte ranges without copying. It provides operations to create, resize, and access byte slices, as well as to advance the offset for sequential reading or writing. Concrete use cases include parsing binary protocols, handling network packets, and streaming data processing where direct byte control is required.",
      "description_length": 412,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Iostream_types",
      "library": "iostream.types",
      "description": "This module defines core data types and operations for handling byte streams with precise control over reading and writing. It includes abstractions for byte slices, input/output streams, and buffered and unbuffered stream implementations. Use cases include implementing custom binary parsers, handling file or network I/O with fine-grained control, and building efficient data serialization/deserialization layers.",
      "description_length": 415,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iostream_unix.In",
      "library": "iostream.unix",
      "description": "Creates an input stream from a Unix file descriptor opened for reading, supporting seek operations. Works with `Unix.file_descr` and produces an `Iostream.In.t_seekable` stream. Useful for reading from files or sockets using low-level file descriptors in Unix environments.",
      "description_length": 273,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Iostream_unix.Out",
      "library": "iostream.unix",
      "description": "Writes data directly to a Unix file descriptor, supporting seek operations. Works with `Unix.file_descr` and `Iostream.Out.t_seekable` types. Useful for streaming output to files or sockets without intermediate buffering.",
      "description_length": 221,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Iostream_unix",
      "library": "iostream.unix",
      "description": "This module implements input and output streams for Unix file descriptors, enabling direct reading from and writing to files or sockets. It supports seek operations, working with `Unix.file_descr` and `Iostream.In.t_seekable`/`Iostream.Out.t_seekable` types. Use it to handle low-level, unbuffered I/O in Unix environments, such as streaming file contents or network data.",
      "description_length": 372,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 54,
    "meaningful_modules": 12,
    "filtered_empty_modules": 42,
    "retention_rate": 0.2222222222222222
  },
  "statistics": {
    "max_description_length": 691,
    "min_description_length": 221,
    "avg_description_length": 398.3333333333333,
    "embedding_file_size_mb": 0.1742696762084961
  }
}