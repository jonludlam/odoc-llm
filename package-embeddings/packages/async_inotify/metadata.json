{
  "package": "async_inotify",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:32.238922",
  "modules": [
    {
      "module_path": "Async_inotify.Event.Selector",
      "library": "async_inotify",
      "description": "This module defines a set of event types that can be monitored using inotify, such as file creation, deletion, modification, and movement. It works with the `t` type, which represents individual event kinds, and provides a list of all available events. Use this module to specify which file system events to track when setting up inotify watches, ensuring precise control over the events of interest without redundant checks.",
      "description_length": 425,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Async_inotify.Event",
      "library": "async_inotify",
      "description": "This module represents file system events reported by inotify, such as creation, deletion, modification, and movement, and includes variants for handling specific event types, a move type for tracking renames or moves, and utilities for converting events to strings or S-expressions. It works with the `t` type to represent individual event kinds and provides a list of all available events for precise control when setting up inotify watches. Use this module to monitor and distinguish between different file system changes in an asynchronous context, such as reacting to a file being modified or tracking when a file is moved into a watched directory. The move type allows tracking of file rename operations, enabling detection of source and destination paths during a move.",
      "description_length": 776,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Async_inotify",
      "library": "async_inotify",
      "description": "This module enables asynchronous monitoring of file system events using inotify, allowing creation of watchers that respond to changes such as file creation, modification, deletion, and renaming. It provides a type `t` to represent individual event kinds, along with a move type to track renames and utilities for event conversion and filtering. Users can monitor specific paths, handle events in real time, and distinguish between detailed event types\u2014such as detecting when a file is moved into a watched directory or when a configuration file is modified. The interface supports precise control over watched events and integrates with Async for non-blocking event handling in applications like log monitoring or live configuration reloading.",
      "description_length": 744,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 776,
    "min_description_length": 425,
    "avg_description_length": 648.3333333333334,
    "embedding_file_size_mb": 0.011307716369628906
  }
}