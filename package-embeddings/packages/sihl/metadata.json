{
  "package": "sihl",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 71,
  "creation_timestamp": "2025-07-15T23:18:11.665625",
  "modules": [
    {
      "module_path": "Sihl.Web.Csrf.Crypto.Decrypted_token",
      "library": "sihl",
      "description": "This module handles the decryption and comparison of CSRF tokens using cryptographic operations. It works with decrypted token values, secrets, and Cstruct.t representations of raw data. Concrete operations include decrypting tokens with a secret, comparing decrypted tokens for equality, and converting between encrypted token formats.",
      "description_length": 336,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Csrf.Crypto.Secret",
      "library": "sihl",
      "description": "This module provides functions to convert a raw string into a fixed-length SHA256 digest and to transform that digest into a `Cstruct.t` for cryptographic operations. It works with string inputs and produces a typed secret structure used for AES key generation. A concrete use case is preparing CSRF token secrets that meet fixed-length requirements for secure encryption.",
      "description_length": 372,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Csrf.Crypto.Encrypted_token",
      "library": "sihl",
      "description": "This module handles the encryption, decryption, and encoding of CSRF tokens using cryptographic operations. It works with `Cstruct.t` for raw data manipulation and `Secret.t` for secure key management, providing functions to convert tokens to URI-safe strings and back. Concrete use cases include securely embedding CSRF tokens in URLs and decrypting them server-side using AES encryption with or without random salting.",
      "description_length": 420,
      "index": 2,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Sihl.Database.Migration.MariaDb",
      "library": "sihl",
      "description": "This module handles database schema migrations for MariaDB by registering migration scripts and executing them. It tracks migration status, identifies pending migrations, and ensures schema updates are applied in order. Use it to manage versioned database changes, like adding tables or modifying columns, during application startup or deployment.",
      "description_length": 347,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Migration.Sig",
      "library": "sihl",
      "description": "This module handles the registration, execution, and status checking of database migrations. It works with lists of migration values and context parameters represented as string pairs. Concrete use cases include running all registered migrations, checking how many migrations are pending, and ensuring the database schema is up to date by applying unapplied migrations.",
      "description_length": 369,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Test.Session.StrMap",
      "library": "sihl",
      "description": "This module provides a string-keyed map data structure with operations for insertion, deletion, lookup, and merging, alongside functional transformations like mapping, filtering, and folding over key-value pairs. It works with maps that associate string keys to arbitrary values, including lists, and supports conversions to and from lists and sequences. These capabilities are particularly useful for processing structured test data, such as aggregating results, filtering configurations, or transforming nested test outputs.",
      "description_length": 526,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Contract.Random.Sig",
      "library": "sihl",
      "description": "This module generates random data in various forms, including Base64-encoded strings and raw byte sequences. It provides functions to create cryptographically secure random values suitable for tokens, identifiers, or secrets in web applications. The module also includes service registration and lifecycle management for integration into a service-based architecture.",
      "description_length": 367,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Contract.User.Hashing",
      "library": "sihl",
      "description": "This module securely hashes strings and verifies hashes against plain text. It uses standard string types and returns a result type for hash operations. It is used to store and validate user passwords in authentication systems.",
      "description_length": 227,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Contract.User.Sig",
      "library": "sihl",
      "description": "This module provides operations for managing user data, including creating, searching, finding, updating, and authenticating users. It works with user data structures defined in `Sihl.Contract.User`, supporting fields like email, password, username, and status. Concrete use cases include user registration with password validation, password updates with confirmation, case-insensitive email lookups, and filtered user searches with pagination.",
      "description_length": 444,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Storage.Sig",
      "library": "sihl",
      "description": "This module handles file storage operations including uploading, downloading, updating, and deleting files using base64-encoded data. It works with stored file metadata and string-based content, supporting contextual key-value pairs for flexible querying and manipulation. Concrete use cases include managing user-uploaded files, storing and retrieving configuration data, and handling binary content in a base64 format.",
      "description_length": 420,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database.Migration.Map",
      "library": "sihl",
      "description": "This module implements a string-keyed map with polymorphic values, offering operations for key-based insertion, deletion, and transformation alongside ordered traversal and predicate-driven queries. It facilitates sequence interoperability through bidirectional conversion between maps and lists/sequences of key-value pairs, supporting bulk updates and iterative processing. Designed for scenarios requiring structured data evolution, it is particularly suited for tracking versioned database schema changes, managing hierarchical configuration data, or orchestrating ordered migration workflows with conditional dependencies.",
      "description_length": 627,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Contract.Schedule.Sig",
      "library": "sihl",
      "description": "This module schedules and registers periodic tasks, using `Sihl__.Core_schedule.t` to define intervals and actions. It integrates scheduled tasks into a service lifecycle, allowing execution in contexts with optional metadata. Use it to run background jobs like data synchronization or recurring cleanups at defined intervals.",
      "description_length": 326,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Database.Migration.PostgreSql",
      "library": "sihl",
      "description": "This module handles PostgreSQL database migration registration and execution. It provides functions to register individual or multiple migration scripts, execute them asynchronously, and check the status of applied or pending migrations. Use cases include initializing database schemas, applying versioned data transformations, and ensuring database consistency across deployments.",
      "description_length": 381,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Csrf.Crypto",
      "library": "sihl",
      "description": "This module secures web forms and API endpoints by generating, encrypting, and validating CSRF tokens using cryptographic primitives. It defines core types like `Secret.t`, `Cstruct.t`, and token structures, supporting operations such as encryption, decryption, comparison, and URI-safe encoding. Submodules handle secret derivation via SHA256, AES-based encryption with optional salting, and secure token comparison. Examples include embedding encrypted tokens in URLs and validating submitted tokens against stored secrets.",
      "description_length": 525,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.User.Sig-Web",
      "library": "sihl",
      "description": "This module provides functions to retrieve a user from a Bearer token or session in an HTTP request. It works with `Rock.Request.t` and `Sihl.Contract.User.t`, handling authentication via token parsing or session decoding. Concrete use cases include authenticating users in web endpoints by extracting identity from headers or cookies.",
      "description_length": 335,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Contract.Queue.Sig",
      "library": "sihl",
      "description": "This module provides functions to manage job queues, including dispatching individual or multiple jobs with optional delays and context, registering jobs for later dispatch, and integrating a web router for dashboard access. It works with job types defined in `Sihl.Contract.Queue`, handling both single jobs and lists of jobs, and supports context metadata and time-based delays. Concrete use cases include queuing background tasks like email sending, processing uploads, or scheduling deferred operations with customizable routing for monitoring via a web interface.",
      "description_length": 568,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database.Migration.Make",
      "library": "sihl",
      "description": "This module manages database schema migrations by registering migration sets and executing them on a connection pool. It tracks migration status, checks for pending migrations, and ensures schema consistency using versioned migration steps. Concrete use cases include setting up database schemas on application startup and applying incremental schema changes during deployment.",
      "description_length": 377,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Container.Service.Sig",
      "library": "sihl",
      "description": "This module defines the interface for services managed by the container, including operations to start, stop, and retrieve service instances. It works with service definitions and lifecycle hooks that specify dependencies and initialization steps. Concrete use cases include implementing database connections, background workers, or HTTP servers that need controlled startup and shutdown sequences.",
      "description_length": 398,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database.Migration.Sig",
      "library": "sihl",
      "description": "This module manages database schema migrations through registration and execution of migration steps. It tracks migration status, applies pending migrations, and ensures schema consistency using a connection pool. Concrete use cases include initializing database schemas, versioning database changes, and verifying migration completeness.",
      "description_length": 338,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Http.Sig",
      "library": "sihl",
      "description": "This module registers HTTP routes with optional middleware and a custom not-found handler, using Opium for request handling and Rock for middleware. It manages the lifecycle of an HTTP service, including startup and shutdown, and provides structured logging via a Logs source. Concrete use cases include setting up web servers with typed routes, adding logging or authentication middleware, and handling unmatched requests with custom responses.",
      "description_length": 445,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Cache.Sig",
      "library": "sihl",
      "description": "This module provides operations to manage a key-value cache with optional values, allowing entries to be set, retrieved, and removed asynchronously. It supports setting values with context metadata and querying by key, enabling use cases like session storage, temporary data caching, and conditional value eviction. The module integrates with a service lifecycle system to manage startup and shutdown behavior.",
      "description_length": 410,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Email_template.Sig",
      "library": "sihl",
      "description": "This module manages email templates with operations to retrieve, create, and update templates by ID or label, supporting multilingual content and HTML alternatives. It works with key-value context data, string identifiers, and email template records containing text and HTML content. Concrete use cases include loading localized email templates for password resets, sending transactional emails with dynamic content, and maintaining versioned templates for legal notifications.",
      "description_length": 477,
      "index": 21,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Sihl.Contract.Email.Sig",
      "library": "sihl",
      "description": "This module manages email sending and interception for testing, providing functions to send individual or bulk emails, inspect and clear an in-memory mailbox, and register the email service. It works with email data structures represented by `Sihl.Contract.Email.t` and operates asynchronously using `Lwt.t`. Concrete use cases include verifying that expected emails were sent during tests and clearing intercepted emails between test runs.",
      "description_length": 440,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Password_reset.Sig",
      "library": "sihl",
      "description": "This module handles password reset operations by creating and managing reset tokens linked to user emails and resetting passwords using valid tokens. It provides functions to generate a reset token for a given email and to reset a user's password after verifying the token and password confirmation. The module works with strings for email, token, and password data, and returns results in Lwt asynchronous monads. Concrete use cases include initiating a password recovery flow and completing password resets in web applications.",
      "description_length": 529,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Web.Rest.VIEW",
      "library": "sihl",
      "description": "This module defines the interface for rendering HTML views in a RESTful web application. It includes functions for displaying lists of resources, individual resource details, and editable forms, all returning HTML elements as Lwt promises. The module works with resource data types and handles requests, forms, and CSRF tokens to generate dynamic HTML content.",
      "description_length": 360,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Rest.SERVICE",
      "library": "sihl",
      "description": "This module defines a service interface for managing a resource with standard CRUD operations. It works with a concrete data type `t` representing the resource, supporting creation, retrieval by ID, filtered search with pagination, and deletion. Use this interface to implement business logic for a RESTful resource, such as a database-backed entity exposed through an HTTP API.",
      "description_length": 378,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Database.Sig",
      "library": "sihl",
      "description": "This module handles database interactions using Caqti for type-safe SQL queries and transactions. It provides functions to prepare and run parameterized SQL queries, manage connection pools, and execute operations like find, collect, exec, and transaction with support for sorting, filtering, and pagination. Concrete use cases include querying a database for a single record, fetching lists of records, running transactions, and managing multiple database connections through named pools.",
      "description_length": 489,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Rest.CONTROLLER",
      "library": "sihl",
      "description": "This module defines handlers for standard REST actions like listing, creating, showing, editing, and updating resources. It works directly with HTTP requests and responses, using Conformist schemas for data validation during creation and updates. Concrete use cases include implementing custom resource management endpoints where direct control over request handling and response generation is required.",
      "description_length": 403,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Contract.Token.Sig",
      "library": "sihl",
      "description": "This module handles token creation, validation, and lifecycle management, including functions to read and verify token data, deactivate or reactivate tokens, and check expiration or activity status. It operates on string-based tokens and key-value data pairs, using optional secrets and context parameters. Concrete use cases include managing authentication tokens, validating signed data, and handling token expiration and revocation in web applications.",
      "description_length": 455,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database.Migration.Logs",
      "library": "sihl",
      "description": "This module provides functions for logging messages at various severity levels, including debug, info, warning, error, and application-specific logs. It supports logging formatted messages and handling result values that may contain errors, using the Logs library's tagging and formatting capabilities. Concrete use cases include tracking database migration progress, reporting migration failures with structured error messages, and debugging migration logic during development.",
      "description_length": 478,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Database",
      "library": "sihl",
      "description": "This module defines a database type with variants for MariaDB and PostgreSQL, along with a signature module type for database implementations. It provides a consistent interface for connection handling, query execution, and transaction management, while abstracting SQL dialect differences. The child module builds on this by enabling type-safe SQL interactions through Caqti, offering operations like find, collect, exec, and transaction with support for sorting, filtering, and pagination. Together, they allow configuring database connections, managing connection pools, and implementing backend logic that works across both database systems.",
      "description_length": 645,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Contract.Schedule",
      "library": "sihl",
      "description": "This module defines a named schedule contract with a signature that includes a name value, enforcing structured implementations across use cases like task scheduling and event planning. It coordinates with child modules to schedule periodic tasks using `Sihl__.Core_schedule.t`, specifying intervals and actions that integrate with service lifecycles and support metadata. Operations include registering recurring jobs such as data synchronization or cleanup tasks, and retrieving or modifying schedules based on application needs. The combined interface enables defining, executing, and managing schedules both directly and through lifecycle-aware background processes.",
      "description_length": 670,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Test.Session",
      "library": "sihl",
      "description": "This module handles session data manipulation in test scenarios, supporting encoding and decoding to JSON and Sexp formats. It operates on string-keyed maps for storing session values, offering insertion, lookup, and transformation functions, and integrates with Opium requests and responses for testing session handling. You can set session values in a request, extract and validate session data from responses, or merge and filter session contents during test setup and verification.",
      "description_length": 485,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Web.Session",
      "library": "sihl",
      "description": "This module handles session management by providing functions to retrieve, update, and set session data stored in cookies. It works with HTTP requests and responses to manage key-value pairs representing session state, using optional cookie keys and secrets for security. Concrete use cases include retrieving a user ID from a session, updating session values like a shopping cart, or securely setting session cookies after authentication.",
      "description_length": 439,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Time.Span",
      "library": "sihl",
      "description": "This module creates time spans in seconds, minutes, hours, days, or weeks, returning values of type `Ptime.span`. It supports integer inputs to represent durations for scheduling, timeouts, or time-based calculations. Use it to express delays, intervals, or duration arithmetic in applications like task scheduling or event timing.",
      "description_length": 331,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database.Migration",
      "library": "sihl",
      "description": "This module orchestrates database schema migrations across multiple database backends by composing versioned migration plans that include labeled SQL statements and optional foreign key checks. It tracks applied migrations globally, supports ordered execution, and enables rollback of changes, making it suitable for managing schema evolution in production environments. The module integrates with database-specific submodules for PostgreSQL and MariaDB, which handle migration registration and execution on connection pools, ensuring schema consistency and version tracking during application startup or deployment. Additionally, it leverages a polymorphic map submodule to manage structured, versioned data such as migration metadata, and includes logging facilities to report migration progress and errors with detailed, structured messages.",
      "description_length": 844,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Email",
      "library": "sihl",
      "description": "This module represents and manipulates email messages with fields for sender, recipient, subject, text, HTML content, CC, and BCC. It supports creating, modifying, serializing, and formatting emails, enabling the construction of rich email content with both plain text and HTML variants. The child module handles sending emails asynchronously, intercepting them for testing, and managing an in-memory mailbox to verify and clear sent messages. Together, they allow building, inspecting, and delivering emails programmatically, such as confirming that a confirmation email was sent during a test or sending a batch of notification emails with custom content.",
      "description_length": 657,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Token",
      "library": "sihl",
      "description": "This module defines a named signature for token-related operations, including token generation, validation, parsing, and lifecycle management. It supports string-based tokens and key-value data pairs, with operations for creating, verifying, deactivating, and checking token status, often used in authentication and authorization workflows. It includes submodules that handle token creation, validation, and state management, supporting features like expiration checks, revocation, and secret-based signing. Examples include generating secure JWT tokens, validating signed data in web applications, and managing active token sessions with context-aware parameters.",
      "description_length": 664,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Http",
      "library": "sihl",
      "description": "This module defines an HTTP contract interface with a named identifier, specifying the structure for implementing HTTP handlers with routing, request parsing, and response generation. It supports building web servers, defining API endpoints, and handling middleware, with concrete operations for registering routes, managing service lifecycle, and structured logging. Submodules enable typed route setup with optional middleware, custom not-found handling, and integration with Opium and Rock for advanced request processing. Examples include creating authenticated API endpoints, logging incoming requests, and gracefully shutting down HTTP services.",
      "description_length": 651,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Http",
      "library": "sihl",
      "description": "This module registers HTTP routes with optional middleware and a custom not-found handler, using a router to define endpoint behavior. It works with HTTP requests and responses via the Opium library, handling asynchronous operations with Lwt. Concrete use cases include setting up web servers with defined routes and middleware stacks for processing HTTP traffic.",
      "description_length": 363,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Password_reset",
      "library": "sihl",
      "description": "This module coordinates password reset workflows by generating and validating reset tokens tied to user identifiers. It directly handles token creation, verification, and password updates using string-based email, token, and password values, returning results asynchronously via Lwt. The child module extends this functionality by linking tokens to user emails, enabling password resets after confirming token validity and matching password inputs. Together, they support initiating recovery flows, verifying emailed tokens, and securely updating passwords in web applications.",
      "description_length": 577,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Request",
      "library": "sihl",
      "description": "This module provides operations for constructing and manipulating HTTP requests through a functional interface, supporting methods like GET, POST, and DELETE, while handling headers, cookies, query parameters, and payloads in formats such as JSON, URL-encoded, and multipart form data. It works with the `Sihl.Web.Request.t` type, which wraps a lower-level request representation to enable higher-level abstractions for tasks like setting content types, managing signed cookies, or extracting bearer tokens from authorization headers. Typical use cases include building HTTP clients, processing API requests with structured headers or forms, and inspecting or serializing requests for logging and debugging.",
      "description_length": 707,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Id",
      "library": "sihl",
      "description": "This module provides a function `find` that extracts an identifier from an HTTP request. It operates on `Sihl.Web.Request.t` values and returns the extracted ID as a string option. A typical use case involves retrieving a resource identifier from a request, such as extracting a user ID from a URL parameter.",
      "description_length": 308,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Htmx",
      "library": "sihl",
      "description": "This module provides functions to handle HTMX requests by inspecting request headers and constructing responses with HTMX-specific behaviors. It works with HTTP requests and responses, extracting information like the current URL, target, and trigger details, and allows setting actions such as redirects, refreshes, and client-side triggers. Concrete use cases include implementing dynamic UI updates, form submissions without full page reloads, and server-driven client-side events in web applications.",
      "description_length": 503,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Web.Flash",
      "library": "sihl",
      "description": "This module handles flash messages in web requests and responses, providing functions to store and retrieve alerts, notices, and arbitrary key-value pairs in the flash storage. It works with `Request.t` and `Response.t` types to pass messages between requests and responses, typically used to display user notifications across HTTP redirects. Concrete use cases include showing success messages after form submissions or error alerts after failed actions.",
      "description_length": 455,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Rest",
      "library": "sihl",
      "description": "This module simplifies building RESTful web interfaces by parsing and generating queries for pagination, filtering, sorting, and form handling directly from HTTP requests. It supports key operations like request parameter routing, form validation with Conformist, and resource management through a service interface that includes CRUD operations. Child modules extend this functionality by rendering dynamic HTML views, implementing service logic for resources, and defining handlers for standard REST actions. Examples include creating paginated API endpoints, handling form submissions with CSRF protection, and exposing database-backed entities through HTTP routes.",
      "description_length": 668,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Contract.Cache",
      "library": "sihl",
      "description": "This module provides a named cache interface for storing, retrieving, and deleting key-value pairs with support for string keys, arbitrary value types, and time-to-live (TTL) settings. Its child module extends this functionality with asynchronous operations, optional values, context metadata, and integration with a service lifecycle system. Together, they enable use cases such as caching database results, HTTP responses, session storage, and conditional eviction strategies. Specific operations include setting values with expiration, retrieving values by key, and managing cache behavior during service startup and shutdown.",
      "description_length": 629,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Random",
      "library": "sihl",
      "description": "This module generates cryptographically secure random values, offering functions to produce random integers, strings, and byte sequences with high unpredictability for security-sensitive applications. It supports direct creation of secure tokens, nonces, and identifiers, and includes utilities for Base64 encoding and raw byte generation. Submodules extend this functionality with additional data formats and integration hooks for service-based systems. Example uses include generating API keys, session tokens, and random passwords.",
      "description_length": 534,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Middleware",
      "library": "sihl",
      "description": "This module provides middleware for handling CSRF protection, error reporting with optional email notifications, flash messages, request ID assignment, migration checks, trailing slash normalization, and static file serving. It operates on HTTP requests and responses, working with session data, cookies, and Rock middleware pipelines. Concrete uses include securing form submissions, displaying error messages after redirects, and ensuring consistent routing by stripping trailing slashes.",
      "description_length": 490,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Schedule.Logs",
      "library": "sihl",
      "description": "This module provides functions for logging messages at various severity levels, including debug, info, warning, error, and app-specific logs. It supports logging formatted messages and handling result values by logging errors when they occur, using the Logs library's level, tag, and formatter system. Concrete use cases include tracking application events, debugging workflows, and ensuring error conditions are logged with context.",
      "description_length": 433,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Email_template",
      "library": "sihl",
      "description": "This module represents email templates with structured data including text, HTML content, and language metadata. It supports rendering templates with dynamic context, substituting placeholders, and assembling complete emails for delivery. The module works with string-based identifiers and key-value data to populate templates, enabling use cases like password reset emails, transactional messages, and localized notifications. Submodules extend this functionality with operations to store, retrieve, and manage templates by label or ID, supporting multilingual content and versioned templates for legal or critical communications.",
      "description_length": 631,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Container.Service",
      "library": "sihl",
      "description": "This module organizes service configurations and manages their lifecycle asynchronously, coordinating initialization, dependency resolution, and shutdown across a set of services. It centers around service definitions that include lifecycle callbacks, configuration data, and optional command-line interfaces, with operations to start, stop, and retrieve running instances. Submodules formalize the service interface, enabling structured implementations for components like database connections, HTTP servers, and background workers. Specific workflows include defining a PostgreSQL service with setup and teardown hooks, or orchestrating a web server that starts only after its dependencies are fully initialized.",
      "description_length": 714,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Migration",
      "library": "sihl",
      "description": "This module organizes database schema evolution by combining structured migration definitions with execution control. It defines migration steps as values containing SQL statements, labels, and foreign key constraints, and supports operations like step creation, formatting, and serialization. The child module enables registering and applying sequences of migrations, checking pending counts, and ensuring schema consistency by running unapplied steps. Together, they allow building, organizing, and applying versioned schema changes with explicit dependencies and execution tracking.",
      "description_length": 585,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Storage",
      "library": "sihl",
      "description": "This module provides data structures and operations for managing files and stored content, with support for transforming and displaying file metadata such as mime type, size, and filename. It enables direct manipulation of raw and stored file attributes, particularly during processing pipelines, and supports serialization of metadata for logging or storage. The child module extends this functionality by handling file storage operations using base64-encoded data, allowing uploads, downloads, and metadata updates alongside contextual key-value pairs. Together, they support use cases like managing user file uploads, storing configuration data, and handling binary content with flexible querying.",
      "description_length": 700,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Contract.Queue",
      "library": "sihl",
      "description": "This module manages job execution workflows with robust support for status tracking, retries, and error handling. It allows creating jobs with custom logic, failure callbacks, and scheduling parameters such as retry delays, and integrates with a web router for monitoring. The queue system supports dispatching single or batch jobs with optional delays and context metadata, enabling use cases like scheduling email delivery or deferred data processing. Job types conform to a shared contract, ensuring consistency across registration, execution, and tracking in a persistent environment.",
      "description_length": 588,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.User",
      "library": "sihl",
      "description": "This module orchestrates user data management and authentication workflows by combining data serialization, secure password handling, and HTTP request parsing. It defines core types like user records and status enumerations, and supports operations such as user creation with policy checks, password hashing and verification, and authentication via Bearer tokens or sessions. For example, it enables registering a user with a validated email and hashed password, updating credentials securely, or extracting an authenticated user from an HTTP request. Submodules handle low-level tasks like cryptographic hashing and HTTP integration, while the parent module coordinates high-level user lifecycle operations.",
      "description_length": 708,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Web.Csrf",
      "library": "sihl",
      "description": "This module extracts CSRF tokens from HTTP requests using `find` and `find_exn`, integrating directly with `Sihl.Web.Request.t` to enable token retrieval when CSRF middleware is active. Its `Crypto` submodule generates, encrypts, and validates tokens using cryptographic primitives such as SHA256 and AES, supporting operations like secure token comparison, URI-safe encoding, and salting. Core types include `Secret.t`, `Cstruct.t`, and structured tokens, enabling tasks like embedding encrypted tokens in URLs or validating form submissions. Together, the module and its submodule provide a complete workflow for CSRF protection in web forms and API endpoints.",
      "description_length": 662,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Test",
      "library": "sihl",
      "description": "This module provides utilities for manipulating session data in test scenarios, supporting encoding and decoding to JSON and Sexp formats. It operates on string-keyed maps with functions for insertion, lookup, transformation, and integration with Opium requests and responses. You can set session values in requests, extract and validate session data from responses, or merge and filter session contents during test setup. Specific examples include injecting session state into a test request or verifying session persistence across responses.",
      "description_length": 543,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Container",
      "library": "sihl",
      "description": "This module coordinates service lifecycles and dependency management, enabling the creation and orchestration of services that start and stop in the correct order. It defines core data types such as service definitions and lifecycle records, which include start and stop actions, dependencies, and metadata, and supports operations like topological sorting and dependency resolution. With it, you can define a PostgreSQL service with custom setup and teardown hooks, or ensure a web server starts only after its dependencies are fully initialized. The module also includes submodules that formalize service interfaces and manage configurations, enabling structured implementations for components like HTTP servers and background workers.",
      "description_length": 737,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Log",
      "library": "sihl",
      "description": "This module configures and provides logging functionality through various reporter implementations. It supports operations to retrieve the current log level, set up file-based logging with Lwt, and create formatted or CLI-style log reporters with customizable output handlers. Concrete use cases include directing logs to files, formatting log output for terminals, and integrating with command-line interfaces for real-time logging.",
      "description_length": 433,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract",
      "library": "sihl",
      "description": "This module combines structured data handling, secure communication, and workflow automation to support building robust backend systems. It provides core data types for databases, emails, tokens, and user records, with operations spanning connection management, type-safe queries, asynchronous messaging, and cryptographic security. You can define database-agnostic persistence logic, schedule recurring tasks, send and intercept emails for testing, generate secure tokens for authentication, and manage user workflows with password hashing and session tracking. Specific use cases include implementing HTTP APIs with typed routes, running schema migrations safely, scheduling background jobs with retries, and sending templated emails with dynamic content.",
      "description_length": 757,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web",
      "library": "sihl",
      "description": "This module orchestrates HTTP routing, middleware composition, and request/response manipulation to build dynamic web applications. It supports method-specific handlers, scoped routes, and middleware chaining, while integrating session management, CSRF protection, HTMX interactions, and flash messaging to handle stateful and interactive web workflows. Developers can define RESTful endpoints with CSRF-secured forms, extract identifiers from URLs, construct paginated queries, and manage sessions through cookie-based storage with cryptographic signing. The module enables both low-level request inspection and high-level abstractions for tasks like HTMX-driven UI updates, form validation, and middleware-driven security checks.",
      "description_length": 731,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Schedule",
      "library": "sihl",
      "description": "This module represents scheduled tasks as time-bound computations that can be started, stopped, and monitored. It supports labeled tasks running Lwt-based functions at configurable intervals, with built-in logging for task events like start, stop, and errors. The logging submodule records messages at multiple severity levels, formats structured output, and integrates with the task lifecycle to capture execution context. For example, a health check task can be scheduled to run every minute, log debug output on each run, and emit an error if a service becomes unreachable.",
      "description_length": 576,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Command",
      "library": "sihl",
      "description": "This module defines a command abstraction with name, description, usage, dependencies, and an async execution function. It provides operations to create commands, print help information, print all commands, and run a command by matching its name with a provided list of arguments. The module is used to implement command-line interfaces where commands can be executed with dependencies managed through lifecycles.",
      "description_length": 413,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database",
      "library": "sihl",
      "description": "This module provides core database operations for preparing and executing SQL queries, managing connection pools, and handling transactions, while its submodules enable structured schema migrations and versioned data management. It defines key data types such as SQL queries, connection pools, and transaction handles, with operations for query execution, result processing, and error recovery, alongside structured search workflows and transaction control. The Migration submodule orchestrates versioned schema changes across multiple backends, supporting ordered execution, rollback, and global migration tracking, integrating with database-specific handlers for PostgreSQL and MariaDB to ensure consistency during deployment. Together, these components allow developers to manage complex query logic, maintain efficient database connections, and evolve schema structures safely with reversible, logged migrations.",
      "description_length": 916,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Random",
      "library": "sihl",
      "description": "Generates random byte sequences and Base64-encoded strings for cryptographic or unique value creation. Works directly with integers to determine output length and returns raw bytes or Base64-encoded strings. Useful for generating secure tokens, random identifiers, or nonces where unpredictability is required.",
      "description_length": 310,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Time",
      "library": "sihl",
      "description": "This module represents time intervals as a custom duration type and provides tools to convert, compare, and manipulate durations and timestamps. It supports creating spans in seconds, minutes, hours, days, or weeks, and uses them to calculate future dates or convert timestamps to ISO 8601 strings. You can express a 30-minute delay as a duration, add it to a timestamp, and format the result as an ISO date. These capabilities enable precise time calculations and scheduling in web applications.",
      "description_length": 496,
      "index": 66,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Sihl.App",
      "library": "sihl",
      "description": "This module assembles and configures applications using services, command-line interfaces, and lifecycle callbacks. It supports data types like `t` for representing apps, lists of services, and Lwt-based callbacks for actions before starting or after stopping the app. Concrete use cases include setting up service dependencies, registering pre-start initialization logic, and defining shutdown hooks for resource cleanup.",
      "description_length": 422,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Configuration",
      "library": "sihl",
      "description": "This module handles loading, storing, and validating configuration data from environment variables, `.env` files, or direct input. It supports typed access to configuration values via schemas, with memoized lookups for strings, integers, and booleans, and provides environment-specific behavior based on `SIHL_ENV`. Concrete use cases include reading database connection strings, service credentials, and deployment-specific settings like hostnames or secret keys.",
      "description_length": 464,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Cleaner",
      "library": "sihl",
      "description": "This module manages a collection of asynchronous cleanup functions that can be registered and executed collectively. It works with Lwt threads and context data in the form of string-string pairs. Concrete use cases include resource deallocation, temporary file removal, or session cleanup after task completion.",
      "description_length": 311,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl",
      "library": "sihl",
      "description": "This module provides a comprehensive toolkit for building and managing backend applications with a focus on structured data, secure communication, and automated workflows. It supports key data types like sessions, services, logs, databases, and time intervals, offering operations for state manipulation, dependency coordination, secure token generation, and time-based calculations. Developers can define session-aware test scenarios, schedule recurring tasks with detailed logging, manage database-agnostic persistence with migrations, and construct HTTP routes with middleware and CSRF protection. Specific examples include building RESTful APIs with typed queries, orchestrating service lifecycles with dependency resolution, generating secure authentication tokens, and scheduling background jobs with retry logic.",
      "description_length": 819,
      "index": 70,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 72,
    "meaningful_modules": 71,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9861111111111112
  },
  "statistics": {
    "max_description_length": 916,
    "min_description_length": 227,
    "avg_description_length": 508.9577464788732,
    "embedding_file_size_mb": 0.25838375091552734
  }
}