{
  "package": "sihl",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 51,
  "creation_timestamp": "2025-08-15T15:05:53.024688",
  "modules": [
    {
      "module_path": "Sihl.Web.Csrf.Crypto.Decrypted_token",
      "library": "sihl",
      "description": "This module handles decrypted CSRF tokens using AES encryption operations, providing functions to compare tokens and convert between encrypted and randomized encrypted formats. It works with `Cstruct.t` and secret keys to ensure secure token handling without exposing raw token data. Concrete use cases include decrypting and validating CSRF tokens during web request processing and converting tokens to randomized encrypted forms for secure transmission.",
      "description_length": 455,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Csrf.Crypto.Secret",
      "library": "sihl",
      "description": "This module provides functions to convert a raw string into a fixed-length SHA256 digest and to transform that digest into a `Cstruct.t` for cryptographic operations. It works with string inputs and outputs a typed secret structure, ensuring compatibility with AES key size requirements. Concrete use cases include preparing secrets for CSRF token encryption and handling secure secret storage in web applications.",
      "description_length": 414,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Web.Csrf.Crypto.Encrypted_token",
      "library": "sihl",
      "description": "This module handles encryption and conversion of CSRF tokens using cryptographic operations. It works with encrypted token data (`t`), base64-encoded strings, and raw binary data via `Cstruct.t`. It supports generating encrypted tokens from raw data with or without randomization, converting tokens to URI-safe strings, and comparing or reconstructing tokens from external formats.",
      "description_length": 381,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.User.Hashing",
      "library": "sihl",
      "description": "This module securely hashes strings and verifies hashes against plain text. It uses standard string types and returns a result type for hash operations. Useful for handling password storage and authentication checks in web applications.",
      "description_length": 236,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database.Migration.Map",
      "library": "sihl",
      "description": "This module facilitates structured manipulation of key-value maps with string-based keys and polymorphic values, offering operations like ordered traversal (min/max/first), bulk updates from sequences, and functional transformations (map, filter, fold). It supports bidirectional conversion between maps and ordered sequences of bindings, enabling efficient handling of use cases such as schema migration tracking or configuration management where deterministic ordering and batch processing are critical.",
      "description_length": 505,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database.Migration.Logs",
      "library": "sihl",
      "description": "This module provides functions for logging messages at various severity levels, including `app`, `err`, `warn`, `info`, and `debug`, all of which format and emit log entries using the `Logs` library. It includes utilities like `on_error` and `on_error_msg` to handle and log `result` values that return `Error`, allowing custom formatting and error recovery strategies. These functions are useful for tracking database migration execution, reporting failures with structured context, and debugging migration steps.",
      "description_length": 514,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Web.Csrf.Crypto",
      "library": "sihl",
      "description": "This module provides cryptographic operations for generating, encrypting, and validating CSRF tokens. It works with `Cstruct.t`, base64-encoded strings, and raw bytes to ensure secure token handling. Concrete use cases include encrypting CSRF tokens using AES, deriving fixed-length secrets from strings, and securely comparing or converting tokens during web request validation.",
      "description_length": 379,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Test.Session.StrMap",
      "library": "sihl",
      "description": "This module provides a comprehensive set of operations for manipulating string-keyed maps with polymorphic values, including insertion, deletion, value updates, and lexicographic ordering. It supports transformations, filtering, and structural queries, along with conversions to and from lists and sequences for iterative processing. These capabilities are particularly useful in testing scenarios where precise construction, validation, or traversal of key-value data structures is required, such as verifying expected state transitions or asserting data integrity in workflows.",
      "description_length": 579,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database.Migration.Make",
      "library": "sihl",
      "description": "This module handles database schema migrations by registering and executing migration steps. It works with lists of migration tuples containing a namespace and a list of migration steps. Concrete use cases include applying versioned schema changes to a database, checking migration status, and ensuring all pending migrations are executed during application startup.",
      "description_length": 366,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database.Migration.PostgreSql",
      "library": "sihl",
      "description": "This module handles PostgreSQL database migrations by registering migration scripts and executing them with support for version tracking and transactional steps. It works with named migrations consisting of SQL commands grouped into steps, allowing execution, status checks, and lifecycle management. Concrete use cases include initializing database schemas, applying incremental updates, and ensuring consistent database states across deployments.",
      "description_length": 448,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database.Migration.MariaDb",
      "library": "sihl",
      "description": "This module handles database schema migrations for MariaDB by registering migration scripts and executing them. It tracks migration status, runs pending migrations, and ensures schema consistency. Use it to manage versioned database changes during application startup or deployment.",
      "description_length": 282,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Queue",
      "library": "sihl",
      "description": "This module defines data structures and operations for managing job instances and jobs in a queue system. It provides types like `instance` and `job'` to represent queued tasks with statuses, retries, and handlers, along with functions to create, format, and evaluate job execution logic. Concrete use cases include scheduling background tasks, handling retries with delays, and tracking job execution states in distributed systems.",
      "description_length": 432,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Htmx",
      "library": "sihl",
      "description": "This module provides functions to handle HTMX requests and responses by parsing request headers and setting response headers according to HTMX specifications. It operates on `Sihl.Web.Request.t` and `Response.t`, offering access to properties like the current URL, target, and trigger information, while allowing responses to control client-side behavior through push, redirect, refresh, and trigger actions. Concrete use cases include dynamically updating page content, handling form submissions without full page reloads, and triggering client-side events based on server responses.",
      "description_length": 584,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Database.Migration",
      "library": "sihl",
      "description": "This module manages database schema migrations through versioned steps, each consisting of a label, SQL statement, and optional foreign key check. It provides functions to create and compose migration steps, execute them in sequence, and track their application status. Concrete use cases include initializing database schemas, applying incremental updates during deployment, and ensuring consistency across different environments.",
      "description_length": 431,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Token",
      "library": "sihl",
      "description": "This module defines a named signature for token-related operations, including token generation, validation, and parsing. It works with string-based tokens, often used for authentication or authorization purposes. Concrete use cases include verifying JWT tokens, generating secure random tokens, or handling token expiration logic.",
      "description_length": 330,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Random",
      "library": "sihl",
      "description": "This module defines operations for generating random values, including strings, integers, and byte sequences. It works with basic data types like strings, integers, and buffers. Concrete use cases include generating secure tokens, random passwords, and nonces for cryptographic or session management purposes.",
      "description_length": 309,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Contract.Schedule",
      "library": "sihl",
      "description": "This module defines a named schedule contract with a signature that includes a string identifier. It works with module types and values that represent scheduled tasks or timed operations. Concrete use cases include defining and enforcing interfaces for job schedulers or timed event systems.",
      "description_length": 291,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Test.Session",
      "library": "sihl",
      "description": "This module provides functions for manipulating session data in test scenarios, including encoding and decoding session values to and from JSON and Sexp formats, extracting session information from HTTP responses, and setting session values in HTTP requests. It operates on string-keyed maps with polymorphic values, leveraging the StrMap submodule for key-value transformations and queries. Concrete use cases include validating session state in web applications, simulating session modifications during testing, and asserting session data integrity across HTTP requests and responses.",
      "description_length": 586,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Schedule.Logs",
      "library": "sihl",
      "description": "This module provides functions for logging messages at various severity levels, including `app`, `err`, `warn`, `info`, and `debug`, all of which format and emit logs using the `Logs` library. It includes utilities like `on_error` and `on_error_msg` to handle and log `result` values that return `Error`, allowing custom formatting and error propagation. These functions are useful for tracking application behavior, debugging issues, and monitoring failures in production systems.",
      "description_length": 481,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Password_reset",
      "library": "sihl",
      "description": "This module handles password reset operations, including generating and validating reset tokens, and updating user passwords. It works with user identifiers and token data structures to manage secure password recovery workflows. Concrete use cases include implementing password reset endpoints in web applications and sending reset instructions via email.",
      "description_length": 355,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.User",
      "library": "sihl",
      "description": "This module provides serialization to JSON and S-expressions for user records, including custom status enums and timestamp conversions, alongside password hashing and verification operations. It supports creating users, setting properties like confirmation status, and checking roles (e.g., admin or owner), enabling authentication flows and role-based access control. Use cases include user management systems, API data exchange, and security workflows requiring user validation and persistent storage.",
      "description_length": 503,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Cache",
      "library": "sihl",
      "description": "This module defines a named cache interface with operations to get, set, and delete key-value pairs. It works with string keys and arbitrary value types, supporting time-to-live (TTL) settings for cached entries. Concrete use cases include session storage, temporary data caching, and rate limiting.",
      "description_length": 299,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Session",
      "library": "sihl",
      "description": "This module handles session management through HTTP cookies by providing functions to retrieve, set, and update session data in web requests and responses. It operates on session data as key-value pairs, working directly with request and response objects to manage session state across HTTP transactions. Concrete use cases include storing user authentication tokens, tracking user preferences, or maintaining shopping cart contents across requests.",
      "description_length": 449,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Web.Http",
      "library": "sihl",
      "description": "This module registers HTTP routes with optional middleware and a custom 404 handler, using Opium for request handling and Rock for middleware. It works with HTTP requests/responses, routers, and Lwt for asynchronous operations. Concrete use cases include setting up web servers with typed routes, logging HTTP access, and managing server lifecycle events like startup and shutdown.",
      "description_length": 381,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Storage",
      "library": "sihl",
      "description": "This module defines data structures for handling files and stored content, including operations to update file metadata such as mime type, size, and filename. It provides functions to convert file and stored values to S-expressions and format them for display, enabling serialization and debugging. Concrete use cases include managing file uploads, persisting binary data with metadata, and inspecting stored content in a human-readable format.",
      "description_length": 444,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Container.Service",
      "library": "sihl",
      "description": "This module defines a service type with lifecycle management, configuration, and command handling. It provides operations to create services, start and stop them asynchronously, and access their properties like name, configuration, and associated commands. Concrete use cases include building and managing application services such as HTTP servers, background workers, or database connectors with dependency-aware initialization and shutdown.",
      "description_length": 442,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Rest",
      "library": "sihl",
      "description": "This module provides functions for parsing and manipulating RESTful HTTP requests, handling pagination, filtering, sorting, and form data extraction. It works with query strings, form inputs, and router configurations to streamline building standard web resources. Concrete use cases include creating paginated list views, handling CRUD form submissions, and auto-generating RESTful routes from schemas and controllers.",
      "description_length": 419,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Web.Flash",
      "library": "sihl",
      "description": "This module handles flash messages in web requests and responses, providing functions to store and retrieve alerts, notices, and arbitrary key-value pairs between HTTP requests. It works with `Sihl.Web.Request.t` and `Response.t` types, allowing messages to be set in a response and later accessed from the subsequent request. Concrete use cases include displaying error alerts after form submissions or showing success notices after user actions like login or data updates.",
      "description_length": 474,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Database",
      "library": "sihl",
      "description": "This module defines a database type with variants for MariaDB and PostgreSQL, along with a signature for implementing database-specific operations. It includes functions for connecting to and interacting with these databases using concrete implementations. Use this module to handle database connections and execute queries in applications requiring MariaDB or PostgreSQL backends.",
      "description_length": 381,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Email",
      "library": "sihl",
      "description": "This module defines an email data structure with fields for sender, recipient, subject, text, optional HTML content, CC, and BCC. It provides functions to create and manipulate email instances, including setting text and HTML bodies, and converting to and from formats like Sexp, JSON, and string representations. Use cases include constructing and serializing emails for sending or storage, such as preparing messages for an email service or logging email content in structured formats.",
      "description_length": 487,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Web.Middleware",
      "library": "sihl",
      "description": "This module provides middleware for handling CSRF protection, error reporting, flash messages, request IDs, migration checks, trailing slash normalization, and static file serving. It works with HTTP requests and responses, session data, and file systems. Concrete use cases include securing form submissions, displaying error messages between requests, and ensuring consistent URL routing.",
      "description_length": 390,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Http",
      "library": "sihl",
      "description": "This module defines an HTTP contract with a named identifier and a signature for handling HTTP requests and responses. It works with string identifiers and abstract HTTP handlers, specifying required operations for routing, middleware, and server implementations. Concrete use cases include defining standardized HTTP interfaces for web services and ensuring consistent request-response handling across different HTTP server backends.",
      "description_length": 434,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Time.Span",
      "library": "sihl",
      "description": "This module creates time spans in seconds, minutes, hours, days, or weeks, returning values of type `Ptime.span`. It supports concrete time duration calculations, such as scheduling tasks or measuring intervals. Each function takes an integer input representing the quantity of the time unit.",
      "description_length": 292,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.Contract.Email_template",
      "library": "sihl",
      "description": "This module defines and manipulates email templates with fields like label, text, and optional HTML content, supporting serialization to and from formats like Sexp and JSON. It provides functions to render templates with dynamic data, replace placeholders, and construct fully formed emails from templates. Concrete use cases include generating localized, templated transactional emails with dynamic content substitutions.",
      "description_length": 422,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Csrf",
      "library": "sihl",
      "description": "This module retrieves CSRF tokens from web requests using `find` and `find_exn`, working directly with `Sihl.Web.Request.t`. It integrates with the CSRF middleware to extract tokens from request headers or session data. The `Crypto` submodule handles cryptographic operations on `Cstruct.t`, base64 strings, and raw bytes, used for generating and validating secure tokens during request processing.",
      "description_length": 398,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract.Migration",
      "library": "sihl",
      "description": "This module defines data structures and operations for managing database migration steps. It works with tuples containing string identifiers and lists of migration steps, where each step includes a label, SQL statement, and foreign key check flag. Concrete use cases include constructing and formatting database schema migrations with labeled steps and associated SQL commands.",
      "description_length": 377,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web.Id",
      "library": "sihl",
      "description": "This module provides a function `find` that extracts an identifier from an HTTP request. It operates on `Sihl.Web.Request.t` values and returns the captured id parameter as a string option. Use this to retrieve resource identifiers directly from incoming requests in web handlers.",
      "description_length": 280,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Cleaner",
      "library": "sihl",
      "description": "This module manages a collection of asynchronous cleanup functions that can be registered and executed collectively. It works with Lwt threads and accepts optional context parameters as string pairs for each cleaner. Use it to coordinate resource deallocation, temporary file removal, or session cleanup tasks across different parts of an application.",
      "description_length": 351,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Contract",
      "library": "sihl",
      "description": "This module provides a collection of interfaces and data structures for common application-level services. It includes operations for managing caches, databases, emails, HTTP contracts, password resets, job queues, and more. Each submodule focuses on specific functionalities like session storage, database migrations, email templating, background job scheduling, and secure token handling. Use these modules to implement features such as user authentication, transactional emails, database schema updates, and distributed task processing.",
      "description_length": 539,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Container",
      "library": "sihl",
      "description": "This module manages service lifecycles and dependency resolution, providing functions to create and manipulate lifecycle values, start and stop services in dependency order, and topologically sort lifecycles. It works with services defined by their start and stop actions, dependency lists, and metadata such as names and IDs. Concrete use cases include orchestrating startup and shutdown of interdependent components like HTTP servers, background jobs, and databases in an application.",
      "description_length": 486,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Schedule",
      "library": "sihl",
      "description": "This module defines a scheduling system for executing functions at specified intervals, supporting operations to create, manage, and run scheduled tasks. It works with a custom `scheduled_time` type representing time intervals and `t` records encapsulating labeled tasks with associated functions and timing. Concrete use cases include running background jobs every second or hour, such as periodic data synchronization, automated cleanup, or recurring health checks.",
      "description_length": 467,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Random",
      "library": "sihl",
      "description": "Generates random byte sequences and Base64-encoded strings of specified lengths. Works directly with integers to determine output size and returns raw string data. Useful for creating secure tokens, random identifiers, or generating test data for cryptographic or web applications.",
      "description_length": 281,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl.App",
      "library": "sihl",
      "description": "This module creates and configures Sihl applications by managing services and lifecycle callbacks. It provides functions to add services, register pre-start and post-stop hooks, and launch the application with command-line interface integration. Use it to build standalone Sihl applications with custom services and initialization logic.",
      "description_length": 337,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Test",
      "library": "sihl",
      "description": "This module includes submodules like Session, which offers functions for encoding, decoding, and manipulating session data in formats like JSON and Sexp. It works with string-keyed maps containing polymorphic values, enabling operations such as extracting session data from HTTP responses and injecting session values into requests. Use cases include testing session handling in web applications, simulating session changes across requests, and verifying session consistency during integration tests.",
      "description_length": 500,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Command",
      "library": "sihl",
      "description": "This module defines a command-line interface for creating, managing, and executing named commands with dependencies and help documentation. It works with a custom `t` type representing commands, including their name, description, dependencies, and execution function. Concrete use cases include building CLI tools with subcommands, handling command-specific setup and teardown, and displaying usage information.",
      "description_length": 411,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Database",
      "library": "sihl",
      "description": "This module enables direct SQL query execution, connection pool management, and transaction lifecycle control using SQL queries, connection pools, and Caqti request types. It includes specialized tools for versioned schema migrations through composable SQL steps with execution status tracking, supporting structured schema evolution. Typical use cases involve application data access, transaction coordination, and deployment workflows requiring synchronized environment schemas.",
      "description_length": 480,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Web",
      "library": "sihl",
      "description": "This module provides routing abstractions for typed HTTP methods and composable routers, along with middleware for CSRF protection, session management, and flash messages. It operates on HTTP requests/responses, session cookies, URL parameters, and route definitions to enable structured web applications, RESTful API handling, and interactive HTMX-driven UIs with secure state management. Key workflows include combining routers for dynamic path handling, parsing RESTful payloads, and enhancing interactivity through middleware composition.",
      "description_length": 542,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Time",
      "library": "sihl",
      "description": "This module defines common time durations as enumerated values and provides direct conversions to and from JSON, string representations, and comparison operations. It supports working with absolute time points using `Ptime.t` and converts durations to `Ptime.span` for interval calculations. Concrete use cases include scheduling future timestamps, parsing and serializing time values in web services, and managing fixed time intervals for task execution.",
      "description_length": 455,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Configuration",
      "library": "sihl",
      "description": "This module manages service configurations by loading, validating, and accessing key-value data from environment variables, `.env` files, or in-memory storage. It supports typed configuration schemas via the conformist library, enabling strict validation and decoding of configuration values at service startup. Concrete use cases include reading environment-specific values like database connection strings, feature flags, or secret keys, and ensuring required configuration keys are present before starting services.",
      "description_length": 518,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl.Log",
      "library": "sihl",
      "description": "This module configures and provides logging reporters for the `Logs` library, supporting both file and console output. It defines functions to create custom-formatted reporters, set log levels, and determine log storage locations. Concrete use cases include setting up structured logging for applications and directing logs to specific files or standard output with custom formatting.",
      "description_length": 384,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl",
      "library": "sihl",
      "description": "This module provides core application infrastructure for building service-oriented OCaml applications. It includes components for managing command-line interfaces, configuring services from environment sources, defining HTTP routes with typed methods, handling database queries and migrations, scheduling background tasks, and coordinating resource lifecycles with dependency resolution. Use it to implement web services with secure session handling, run scheduled maintenance jobs, manage database schema updates, and structure applications around cleanly separated components with controlled startup and shutdown sequences.",
      "description_length": 625,
      "index": 50,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 53,
    "meaningful_modules": 51,
    "filtered_empty_modules": 2,
    "retention_rate": 0.9622641509433962
  },
  "statistics": {
    "max_description_length": 625,
    "min_description_length": 236,
    "avg_description_length": 423.6470588235294,
    "embedding_file_size_mb": 0.7395238876342773
  }
}