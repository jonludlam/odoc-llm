{
  "package": "ocplib-resto",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 15,
  "creation_timestamp": "2025-08-14T23:26:17.695017",
  "modules": [
    {
      "module_path": "RestoDirectory.Answer",
      "library": "ocplib-resto.directory",
      "description": "This module provides functions to construct successful answers with values and to return those answers asynchronously. It works with generic values wrapped in an answer type and Lwt promises. Concrete use cases include handling and propagating successful outcomes in a type-safe manner within asynchronous workflows.",
      "description_length": 316,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzRestoDirectory.Answer",
      "library": "ocplib-resto.directory",
      "description": "This module provides functions to construct successful answer values, wrapping results in a polymorphic answer type. It supports asynchronous operations through Lwt by offering a return function that lifts values into a deferred computation. Use cases include handling request responses in a web application where answers need to be processed asynchronously or synchronously.",
      "description_length": 375,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzRestoDirectory.Make",
      "library": "ocplib-resto.directory",
      "description": "This module enables hierarchical request routing through directory trees composed of services and subdirectories, supporting asynchronous handling via Lwt. It operates on path-parameterized structures with variable arity (2 or 3 parameters) and allows dynamic resolution of routes using custom lookup handlers. Key use cases include building RESTful APIs with nested resources, merging routing configurations, and exposing directory metadata through a dedicated description service.",
      "description_length": 482,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RestoDirectory.Make",
      "library": "ocplib-resto.directory",
      "description": "This module enables hierarchical routing and service composition through functional manipulation of directory structures, supporting operations like merging, mapping, and registering handlers with path parameters (0-5 arguments). It works with hierarchical directory and path types to model nested service endpoints, allowing dynamic segment extraction (e.g., 2-3 parameter routes) and custom resolution logic for on-demand path handling. Typical use cases include building RESTful APIs with nested resources, composable microservices, and extensible web frameworks requiring runtime-modifiable routing tables.",
      "description_length": 610,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "EzRestoDirectory",
      "library": "ocplib-resto.directory",
      "description": "This module enables the construction of hierarchical REST APIs with asynchronous processing through Lwt, organizing URL paths into service-mapped directory structures. It supports dynamic route registration with parameterized lookups (handling 0\u20133 path variables), merging of routing trees, and on-demand subtree generation for nested resources. Typical applications include scalable web services requiring non-blocking I/O, such as APIs with variable-depth paths, modular route composition, and JSON-based endpoints driven by runtime path parameters.",
      "description_length": 551,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto.Path",
      "library": "ocplib-resto",
      "description": "This module constructs and manipulates parameterized paths for web services, supporting operations to append static segments, add parameters, and compose path fragments. It works with path values that track a prefix and a parameter type, enabling type-safe routing definitions. Concrete use cases include building RESTful API endpoints with typed parameters and generating URLs from structured path definitions.",
      "description_length": 411,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto.Arg",
      "library": "ocplib-resto",
      "description": "This module defines typed path arguments with parsing and serialization functions. It supports basic types like integers, 32-bit integers, 64-bit integers, and floats, each with associated description metadata. Use it to safely convert URL path segments to typed values and back, ensuring correct formatting and validation during HTTP route handling.",
      "description_length": 350,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto.Make",
      "library": "ocplib-resto",
      "description": "This module implements functions to construct and interpret HTTP requests and responses for a given service. It works with services defined by their parameter, input, and output types, using a representation type for serialization. Concrete use cases include generating request payloads from service inputs and parsing service outputs from HTTP responses.",
      "description_length": 355,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto.Path",
      "library": "ocplib-resto",
      "description": "This module builds and manipulates parameterized paths for REST services. It supports operations to append static suffixes (`add_suffix`, `/`), inject dynamic arguments (`add_arg`, `/:`), and transform path structures (`map`). Use it to define typed routes like `/users/123` where `123` is a runtime parameter.",
      "description_length": 310,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto.Make",
      "library": "ocplib-resto",
      "description": "This module implements request serialization and response deserialization for REST services using a given representation format. It provides `forge_request` to construct HTTP requests from service definitions and parameters, and `read_answer` to parse responses into typed outputs. It operates on `Resto.service` values and uses the `Repr` module for concrete data encoding and decoding.",
      "description_length": 387,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto.Description",
      "library": "ocplib-resto",
      "description": "This module defines data structures and operations for describing and printing service directories. It works with `service_descr` and `directory_descr` types, which represent service metadata and directory structures, using JSON schemas for input and output descriptions. It is used to build and format service directory hierarchies for RESTful interfaces.",
      "description_length": 356,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto.Description",
      "library": "ocplib-resto",
      "description": "This module defines data structures for describing web services and their endpoints, specifically using `service_descr` and `directory_descr` to represent service metadata and directory structures. It provides functions to create service descriptions with optional documentation, input/output schema definitions, and to pretty-print directory descriptions. Concrete use cases include building and documenting RESTful API endpoints with JSON schema validation for requests and responses.",
      "description_length": 486,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto.Arg",
      "library": "ocplib-resto",
      "description": "This module defines typed path arguments with parsing and serialization functions. It supports basic types like integers, 32-bit and 64-bit integers, and floating-point numbers, allowing safe conversion between strings and their corresponding typed values. Use it to handle URL path parameters in a type-safe way, ensuring correct parsing and formatting for routing and API endpoint definitions.",
      "description_length": 395,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto",
      "library": "ocplib-resto",
      "description": "This module implements typed HTTP service definitions with parameterized paths, request/response handling, and JSON serialization. It supports defining services with structured parameters, inputs, and outputs, enabling type-safe construction and parsing of HTTP requests and responses. Concrete use cases include building client and server-side REST APIs where routes like `/users/123` are expressed with typed parameters and JSON payloads are automatically encoded and decoded.",
      "description_length": 478,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto",
      "library": "ocplib-resto",
      "description": "This module implements type-safe routing and service definitions for RESTful web services, handling parameterized paths and structured requests and responses. It works with typed path arguments, service descriptions, and JSON-encoded inputs and outputs, enabling precise URL construction, request serialization, and response parsing. Concrete use cases include defining API endpoints with typed URL parameters, generating HTTP requests from service specifications, and validating responses against expected JSON schemas.",
      "description_length": 520,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 15,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9375
  },
  "statistics": {
    "max_description_length": 610,
    "min_description_length": 310,
    "avg_description_length": 425.46666666666664,
    "embedding_file_size_mb": 0.21777629852294922
  }
}