{
  "package": "ocplib-resto",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-07-15T23:09:16.493844",
  "modules": [
    {
      "module_path": "RestoDirectory.Make",
      "library": "ocplib-resto.directory",
      "description": "This module enables hierarchical routing and service registration with support for dynamic path segments, variable-arity handlers, and custom lookup logic. It operates on path-parameterized directories and services in an Lwt-based asynchronous environment, facilitating use cases like REST API dispatchers with complex routing rules, introspective metadata endpoints, and dynamic path resolution strategies that extract and bind values from multi-segment URLs.",
      "description_length": 460,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzRestoDirectory.Make",
      "library": "ocplib-resto.directory",
      "description": "This module implements a hierarchical routing system for constructing directory trees that map request paths to services or nested subtrees. It operates on a `directory` type, enabling registration of handlers with fixed or variable path segments, dynamic subtree generation via callback, and asynchronous resolution of routes using `Lwt.t`. Typical use cases include building RESTful APIs with nested resources, parameterized endpoints, and lazy-loaded substructures for scalable path-based dispatch.",
      "description_length": 501,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RestoDirectory.Answer",
      "library": "ocplib-resto.directory",
      "description": "This module provides functions to construct successful responses in both synchronous and asynchronous contexts. It works with generic values wrapped in an `answer` type, which represents the result of an operation. Concrete use cases include returning parsed data from a request handler or signaling successful completion of an asynchronous task.",
      "description_length": 346,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzRestoDirectory.Answer",
      "library": "ocplib-resto.directory",
      "description": "This module provides functions to construct successful answer values, wrapping results in a polymorphic answer type. It supports asynchronous operations through Lwt by offering a return function that lifts values into a deferred computation. These functions are used to signal successful outcomes in request handling, where the wrapped value represents the result of an operation.",
      "description_length": 380,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RestoDirectory",
      "library": "ocplib-resto.directory",
      "description": "This module builds hierarchical service registries with mixed static and dynamic routing, mapping paths to handlers that extract 1-3 path parameters and support asynchronous subtree generation during resolution. It enables REST API routers with runtime-composable endpoints, introspective metadata, and lazy-loaded nested services, using path-parameterized directories and Lwt-based async execution. The module includes submodules for defining custom routing logic with variable-arity handlers and for constructing successful responses from synchronous or asynchronous operations, such as returning parsed request data or signaling task completion. Key data types include directories, services, and the `answer` type, with operations for registration, dynamic resolution, and response construction.",
      "description_length": 798,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "EzRestoDirectory",
      "library": "ocplib-resto.directory",
      "description": "This module organizes RESTful service hierarchies through dynamic directory trees that map paths to handlers or nested subtrees, supporting both static and runtime-dynamic resolution. It centers around the `directory` type, offering combinators to register handlers with fixed or variable path segments, merge directories, and build subtrees asynchronously using `Lwt.t`. Functions from child modules allow constructing successful responses with typed results, enabling deferred computation and seamless integration with asynchronous workflows. Example usage includes composing scalable APIs with nested resources, handling endpoints with variable parameters, and lazily loading substructures during request resolution.",
      "description_length": 719,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto.Arg",
      "library": "ocplib-resto",
      "description": "This module defines typed path arguments with parsing and serialization functions. It supports basic types like integers, 32-bit and 64-bit integers, and floats, using result-based destructors for safe parsing and constructors for converting values back to strings. It is used to handle typed URL path segments in web services, ensuring correct parameter extraction and formatting.",
      "description_length": 381,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto.Description",
      "library": "ocplib-resto",
      "description": "This module defines data structures for describing REST services, including service metadata, input/output schemas, and directory types. It provides functions to create service descriptions with optional documentation and to format directory descriptions for display. Concrete use cases include building typed HTTP endpoints with schema validation and generating human-readable service documentation.",
      "description_length": 400,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Resto.Description",
      "library": "ocplib-resto",
      "description": "This module defines data structures and functions for describing and printing service directories. It includes types like `service_descr` for capturing input/output schemas and descriptions of services, and `directory_descr` for representing static or dynamic directory structures. It is used to generate human-readable representations of service directories and their metadata.",
      "description_length": 378,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto.Make",
      "library": "ocplib-resto",
      "description": "This module implements functions to construct and process HTTP requests and responses for a given service definition. It works with service descriptions that include parameters, input, and output types, using the `Repr` module to handle the actual data serialization and deserialization. Concrete use cases include generating API client code where requests are built from service parameters and responses are parsed into result types based on the service's expected output.",
      "description_length": 473,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "EzResto.Arg",
      "library": "ocplib-resto",
      "description": "This module defines and manipulates typed path arguments with explicit parsing and serialization. It supports operations to create custom arguments with destruct and construct functions, and provides built-in typed arguments for integers, 32-bit integers, 64-bit integers, and floats. It is used to handle URL path parameters in a type-safe way, ensuring correct parsing from and formatting to string representations.",
      "description_length": 417,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto.Path",
      "library": "ocplib-resto",
      "description": "This module builds and manipulates parameterized paths for REST services. It supports operations to add static suffixes, dynamic arguments, and map over path parameters, working with a polymorphic path type that tracks parameters and their types. Concrete use cases include constructing typed URLs with embedded parameters for routing and client-side request generation.",
      "description_length": 370,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto.Path",
      "library": "ocplib-resto",
      "description": "This module constructs and manipulates paths for routing HTTP requests, primarily handling path segments and query parameters. It supports operations to append static suffixes, add arguments, and compose paths with type-safe parameter handling. Concrete use cases include defining RESTful API endpoints with typed parameters and generating URLs from structured path definitions.",
      "description_length": 378,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto.Make",
      "library": "ocplib-resto",
      "description": "This module implements request serialization and response deserialization for REST services using a specified representation format. It works with service descriptions parameterized by URL parameters, input, and output types, and uses the Repr module to encode and decode values. Concrete use cases include generating HTTP requests from service definitions and parsing HTTP responses into structured outputs for client-side REST interactions.",
      "description_length": 442,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto",
      "library": "ocplib-resto",
      "description": "This module provides a type-safe framework for defining and interacting with RESTful services, using structured paths, typed parameters, and JSON-encoded data. It centers on the `service` type, which encapsulates endpoints with precise input and output formats, enabling tasks like constructing API requests and decoding responses. The path module handles typed URL segments and query parameters, allowing safe extraction and formatting of values like integers and strings, while the directory module describes and displays service hierarchies with metadata. The encoding module integrates with the Repr library to serialize requests and deserialize responses, ensuring correct data transformations across client-server interactions.",
      "description_length": 733,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzResto",
      "library": "ocplib-resto",
      "description": "This module provides a type-safe framework for defining and interacting with RESTful services, combining core utilities with specialized submodules to handle service definitions, request/response processing, and path parameter management. It centers around service descriptions that capture endpoint schemas, parameterized paths that track URL structure and typed arguments, and operations to build and parse HTTP interactions with JSON encodings. With it, developers can define REST APIs using precise data structures, generate client code that enforces correct request construction, and route URLs with type-checked parameters. For example, a service can be described with input and output types, its endpoints can be used to make type-checked HTTP requests, and its parameterized paths can be manipulated to construct valid URLs with properly formatted arguments.",
      "description_length": 866,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 866,
    "min_description_length": 346,
    "avg_description_length": 502.625,
    "embedding_file_size_mb": 0.05849170684814453
  }
}