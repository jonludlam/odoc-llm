{
  "package": "bap-demangle",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:33.057406",
  "modules": [
    {
      "module_path": "Bap_demangle.Std.Demanglers",
      "library": "bap-demangle",
      "description": "This module manages a registry of name demanglers, enabling installation, lookup, and selection of demanglers based on target platforms or package-qualified names. It works with `Bap_core_theory.Theory.target` and `Bap_demangle.Std.demangler` types, supporting operations like installing a demangler for a specific target, retrieving registered demanglers by name, and listing all available demanglers. Concrete use cases include configuring demanglers for C++ symbol decoding or platform-specific name normalization during binary analysis.",
      "description_length": 540,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_demangle.Std.Demangler",
      "library": "bap-demangle",
      "description": "This module provides operations to create, register, and apply named string transformations for demangling symbol names according to specific ABIs. It works with string inputs representing mangled names and transforms them using functions like stripping leading underscores or custom decoding logic. Concrete use cases include restoring readable C++ function names from compiler-generated mangled symbols or normalizing symbol names during binary analysis.",
      "description_length": 456,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_demangle.Std",
      "library": "bap-demangle",
      "description": "This module provides a standard set of demanglers for translating low-level symbol names into human-readable forms, following ABI-specific conventions. It supports direct operations on string identifiers using built-in demanglers for common ABIs and allows registering custom demanglers that transform names by stripping prefixes or decoding C++-style mangling. The registry system enables selecting demanglers by target platform or package-qualified names, making it possible to configure and apply appropriate transformations when analyzing compiled binaries. For example, it can decode C++ function names from mangled symbols or normalize symbol names for a specific architecture during reverse engineering.",
      "description_length": 710,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_demangle",
      "library": "bap-demangle",
      "description": "This module handles ABI-specific name demangling, translating low-level symbol names into human-readable forms. It provides built-in demanglers for common ABIs and supports custom demanglers that can strip prefixes or decode C++-style mangling. The registry system allows selecting demanglers by target platform or package-qualified names. For example, it can decode mangled C++ function names or normalize symbols for a specific architecture during binary analysis.",
      "description_length": 466,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 710,
    "min_description_length": 456,
    "avg_description_length": 543.0,
    "embedding_file_size_mb": 0.014952659606933594
  }
}