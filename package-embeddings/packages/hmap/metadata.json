{
  "package": "hmap",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:57:18.378246",
  "modules": [
    {
      "module_path": "Hmap.Make.Key",
      "library": "hmap",
      "description": "This module creates and manages keys for heterogeneous maps, where each key carries type-specific information. It supports operations to create keys with associated metadata and to retrieve that metadata. Existential keys enable comparisons between keys, facilitating operations like filtering based on key identity or ordering.",
      "description_length": 328,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hmap.Make",
      "library": "hmap",
      "description": "This module implements heterogeneous maps where keys carry type-specific metadata. It supports key creation, binding, and retrieval operations, along with standard map manipulations like filtering, iteration, and folding over existentially typed bindings. Concrete use cases include managing collections of values with distinct, typed keys and performing type-safe lookups or transformations across mixed-type data.",
      "description_length": 415,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hmap.Key",
      "library": "hmap",
      "description": "This module creates and manages keys for heterogeneous maps, supporting operations to generate unique keys and compare them. It works with existential key types that abstract the key's value type, enabling comparisons between keys. Concrete use cases include filtering entries in a heterogeneous map based on key equality or ordering.",
      "description_length": 334,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hmap",
      "library": "hmap",
      "description": "This module supports standard map operations like insertion, lookup, and removal, along with traversal (iteration, folding) and transformation (filtering) over a heterogeneous map structure. It works with existentially typed keys that enforce type-safe value associations, enabling structured manipulation of mixed-type data collections. Key use cases include managing environments or configurations where distinct key types index different value types, ensuring type-correct access and updates.",
      "description_length": 495,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 495,
    "min_description_length": 328,
    "avg_description_length": 393.0,
    "embedding_file_size_mb": 0.05841541290283203
  }
}