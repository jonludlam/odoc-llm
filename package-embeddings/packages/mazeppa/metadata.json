{
  "package": "mazeppa",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T22:58:30.436497",
  "modules": [
    {
      "module_path": "Mazeppa.Gensym",
      "library": "mazeppa",
      "description": "This module generates unique symbols with a specified prefix, maintaining an internal counter to ensure uniqueness. It supports creating symbols individually or in lists, cloning and resetting state, and retrieving or assigning the latest symbol. Use it when generating fresh identifiers in compilers, parsers, or code transformation pipelines.",
      "description_length": 344,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mazeppa.Raw_program",
      "library": "mazeppa",
      "description": "This module defines and manipulates raw program structures for a domain-specific language, centered around a list of rules. It provides equality checks and pretty-printing for rules and associated attribute lists, enabling direct comparison and readable output of parsed program elements. Concrete use cases include validating the structure of parsed programs and generating human-readable representations for debugging or logging.",
      "description_length": 431,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mazeppa.Symbol",
      "library": "mazeppa",
      "description": "This module represents and manipulates symbolic identifiers used in a compiler or interpreter, supporting operations like comparison, string conversion, and classification of operator kinds. It works primarily with the abstract type `t`, derived from strings, and provides functions to check properties of symbols such as whether they represent unary, binary, or lazy operations. Concrete use cases include generating fresh symbols that satisfy certain predicates, formatting symbol lists as comma-separated strings, and serializing symbols to JSON for debugging or external representation.",
      "description_length": 590,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mazeppa.Raw_term",
      "library": "mazeppa",
      "description": "This module represents and manipulates raw terms in a symbolic language, supporting operations like variable references, constant values, function calls, pattern matching, and let bindings. It provides constructors for building terms and patterns, along with equality checks and pretty-printing functions for debugging and serialization. Concrete use cases include parsing expressions, generating intermediate representations for compilers, and implementing term rewriting systems.",
      "description_length": 481,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mazeppa.Const",
      "library": "mazeppa",
      "description": "This module defines a variant type for representing integer and string constants, along with functions to convert these values to strings, format them, and compare them. It includes utilities for converting integer types and signedness to string representations, escaping strings, and displaying values for debugging. Concrete use cases include pretty-printing expressions involving constants and generating human-readable representations of parsed integer and string literals.",
      "description_length": 477,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mazeppa",
      "library": "mazeppa",
      "description": "This module implements a domain-specific language toolchain with core abstractions for symbolic identifiers, constants, and raw terms. It supports program validation, supercompilation, evaluation, and C code generation, working with symbolic representations of programs defined through rules and expressions. Concrete use cases include compiling and executing custom language programs, generating optimized code, and debugging through pretty-printing and JSON serialization.",
      "description_length": 474,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 590,
    "min_description_length": 344,
    "avg_description_length": 466.1666666666667,
    "embedding_file_size_mb": 0.08740901947021484
  }
}