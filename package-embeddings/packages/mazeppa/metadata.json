{
  "package": "mazeppa",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:28.336707",
  "modules": [
    {
      "module_path": "Mazeppa.Symbol",
      "library": "mazeppa",
      "description": "This module defines a symbol type with operations for comparison, string conversion, and formatting. It supports parsing strings into symbols, checking properties like operator kinds and laziness, and generating fresh symbols satisfying a predicate. Typical uses include representing and manipulating symbolic identifiers in a compiler or interpreter, such as tracking variables or function names with associated metadata.",
      "description_length": 422,
      "index": 0,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Mazeppa.Gensym",
      "library": "mazeppa",
      "description": "This module generates unique symbols with a specified prefix, maintaining an internal counter to ensure uniqueness. It provides operations to create, clone, and reset symbol generators, as well as emit single symbols or lists of symbols. Use it when generating fresh identifiers in compilers, parsers, or code transformation pipelines.",
      "description_length": 335,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mazeppa.Raw_program",
      "library": "mazeppa",
      "description": "This module represents a parsed program as a list of rules, each rule containing attributes and patterns. It provides direct equality checks and pretty-printing for rules and attribute lists, enabling straightforward comparison and debugging of program structures. Concrete use cases include validating the structure of parsed programs, displaying rules for logging, and comparing attribute lists during program analysis.",
      "description_length": 421,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mazeppa.Const",
      "library": "mazeppa",
      "description": "This module defines a variant type for representing integer and string constants, along with functions to convert these values to strings, format them, and compare them. It includes utilities for converting integer types and signedness to string representations, escaping strings, and displaying values for debugging. Concrete use cases include pretty-printing expressions involving constants and generating string representations of integer types in code generation or analysis tools.",
      "description_length": 485,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mazeppa.Raw_term",
      "library": "mazeppa",
      "description": "This module defines a term language with variables, constants, function calls, pattern matching, and let bindings, supporting construction and manipulation of terms with string and integer literals. It provides equality checks, pretty-printing, and string conversion for terms, patterns, and match cases, enabling direct term analysis or transformation. Concrete use cases include parsing and evaluating symbolic expressions, implementing term rewriting, or building intermediate representations for compilers.",
      "description_length": 510,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mazeppa",
      "library": "mazeppa",
      "description": "This module processes Mazeppa programs through supercompilation, evaluation, and C translation, working directly with terms, symbols, and constants that represent language constructs. It supports parsing, optimizing, and generating code from programs composed of rules and expressions, enabling tasks like direct program evaluation, transformation, and integration with C. Symbols manage identifier representation and generation with uniqueness guarantees, while terms model program structure with support for variables, patterns, and function calls. Constants handle integer and string values with conversion and display utilities, and rule structures allow for structured program representation with comparison and formatting capabilities.",
      "description_length": 741,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 741,
    "min_description_length": 335,
    "avg_description_length": 485.6666666666667,
    "embedding_file_size_mb": 0.02218151092529297
  }
}