{
  "package": "fun-sqlite",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:03:46.494340",
  "modules": [
    {
      "module_path": "Fun_sqlite.Arg",
      "library": "fun-sqlite",
      "description": "This module defines functions to convert OCaml values into SQLite query arguments. It supports conversions for common types like strings, integers, floats, and binary data, as well as optional values. These functions are used to safely pass parameters to SQL queries, ensuring correct type handling and encoding.",
      "description_length": 312,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fun_sqlite",
      "library": "fun-sqlite",
      "description": "This module enables type-safe interaction with SQLite databases, handling parameterized queries, transactions, and schema migrations. It processes query arguments through encoding functions for types like strings, integers, and options, and extracts results using decoding combinators such as `ret` and `int`. You can perform bulk inserts with `batch_insert`, manage transactional updates, and evolve database schemas safely using migration scripts. Optional values in query results are handled directly, and parameter encoding is streamlined through the argument conversion functions.",
      "description_length": 585,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 585,
    "min_description_length": 312,
    "avg_description_length": 448.5,
    "embedding_file_size_mb": 0.007701873779296875
  }
}