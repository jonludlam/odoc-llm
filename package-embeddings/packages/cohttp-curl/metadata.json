{
  "package": "cohttp-curl",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:17.433700",
  "modules": [
    {
      "module_path": "Cohttp_curl.Private.Request",
      "library": "cohttp-curl",
      "description": "This module manages HTTP requests using cURL, handling request creation with customizable timeout, headers, method, URI, input source, and output sink. It provides access to the underlying cURL handle and response body after request completion. Concrete use cases include streaming HTTP responses to files, sending POST requests with custom data sources, and handling server responses via callback functions.",
      "description_length": 408,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl.Private.Sink",
      "library": "cohttp-curl",
      "description": "This module provides two sinks for handling HTTP response bodies: `string` accumulates the response into a string, while `discard` ignores the response data. It works with the `Cohttp_curl.Private.Sink.t` type, which represents a data sink for streaming HTTP content. Use `string` when you need to capture the full response body as a string, and `discard` when the response body is irrelevant.",
      "description_length": 393,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl.Private.Error",
      "library": "cohttp-curl",
      "description": "This module defines error handling for HTTP requests using cURL. It includes operations to create errors from cURL codes, retrieve error messages, and check for timeouts. It works with cURL error codes and custom error types to handle failed HTTP interactions.",
      "description_length": 260,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl.Private.Source",
      "library": "cohttp-curl",
      "description": "This module provides a way to create and manipulate source data for HTTP requests using the `t` type. It supports operations like creating a source from a string or using an empty source, primarily for internal handling of request bodies. Concrete use cases include preparing data payloads for HTTP methods like POST or PUT when working with the Cohttp_curl library.",
      "description_length": 366,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl.Private",
      "library": "cohttp-curl",
      "description": "This module handles HTTP request execution with cURL, supporting customizable methods, headers, timeouts, and data sources. It provides types for request bodies (`t`), response sinks (`string` and `discard`), and error handling for cURL operations. You can stream responses to strings or files, send POST requests with custom payloads, and handle errors including timeouts. Specific workflows include uploading data from a string source and capturing server responses via callbacks or string accumulation.",
      "description_length": 505,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl",
      "library": "cohttp-curl",
      "description": "This module enables HTTP communication using cURL with support for custom methods, headers, timeouts, and data handling. It defines types for request bodies and response sinks, allowing responses to be streamed to strings, files, or discarded. Users can send POST requests with arbitrary payloads, handle errors like timeouts, and process responses through callbacks or accumulated strings. Example uses include uploading data from a string and capturing server responses for further processing.",
      "description_length": 495,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 505,
    "min_description_length": 260,
    "avg_description_length": 404.5,
    "embedding_file_size_mb": 0.02222919464111328
  }
}