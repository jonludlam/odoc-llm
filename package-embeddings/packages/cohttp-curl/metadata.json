{
  "package": "cohttp-curl",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:29:17.920360",
  "modules": [
    {
      "module_path": "Cohttp_curl.Private.Error",
      "description": "Creates an error instance from a CURL error code and provides methods to retrieve its message and check if it indicates a timeout. Works with the `t` type, representing specific error conditions. Used to handle and diagnose network request failures in HTTP client implementations.",
      "description_length": 280,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl.Private.Sink",
      "description": "Produces a writable stream that appends data to a string or discards it. Accepts values of any type wrapped in a t container. Used to capture output for testing or to suppress unnecessary logging.",
      "description_length": 196,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl.Private.Source",
      "description": "Provides operations to create and manipulate source representations, including an empty source and conversion from strings. Works with the `t` type, which encapsulates source data. Used to initialize source contexts for parsing or processing tasks.",
      "description_length": 248,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl.Private.Request",
      "description": "Provides functions to create and manage HTTP requests with customizable timeouts, headers, and input/output streams. Operates on types including HTTP methods, URIs, source and sink data structures, and response handlers. Enables execution of requests via a curl interface and retrieval of response bodies after completion.",
      "description_length": 322,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl.Private",
      "description": "Encapsulates network error handling, stream management, source initialization, and HTTP request execution. It defines types for errors, streams, and sources, along with operations to generate, inspect, and use them. It allows creating timeout-aware errors, capturing or discarding output, initializing parsing sources, and executing HTTP requests with custom configurations. Examples include diagnosing network failures, testing output behavior, preparing input for parsers, and sending HTTP requests with specified timeouts and headers.",
      "description_length": 537,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "cohttp-curl",
      "description": "Provides HTTP request and response parsing, handling, and serialization using a fast, portable parser. Works with core HTTP data types such as headers, status codes, and body content. Enables building secure, asynchronous HTTP servers with TLS support through Lwt and ocaml-tls.",
      "description_length": 278,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_curl",
      "description": "Handles network errors, stream management, and HTTP request execution with custom configurations. Defines error, stream, and source types, along with operations to create, inspect, and manipulate them. Supports timeout-aware error generation, output control, and HTTP request execution with specified headers. Examples include diagnosing network issues, testing output behavior, and sending requests with custom timeouts.",
      "description_length": 421,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 537,
    "min_description_length": 196,
    "avg_description_length": 326.0,
    "embedding_file_size_mb": 0.025844573974609375
  }
}