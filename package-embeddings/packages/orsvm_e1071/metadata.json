{
  "package": "orsvm_e1071",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:32.627140",
  "modules": [
    {
      "module_path": "Orsvm_e1071.Result",
      "library": "orsvm_e1071",
      "description": "This module represents the result of an operation that may either produce a filename or fail with an error message. It defines a sum type `t` with two constructors: `Ok` for successful results containing a filename and `Error` for failed results containing an error message. This structure is used to handle outcomes of file operations or external calls that require explicit error handling, such as parsing or validation steps.",
      "description_length": 428,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Orsvm_e1071.Svm",
      "library": "orsvm_e1071",
      "description": "This module trains and applies binary SVM classifiers using dense numerical data from tab-separated text files. It supports RBF and linear kernels with configurable cost and gamma parameters, and provides functions to predict and read decision values from new data files. Concrete use cases include classification tasks on datasets stored in flat-file formats without headers, where features are arranged in rows and labels are encoded as \u00b11.",
      "description_length": 442,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Orsvm_e1071.Svmpath",
      "library": "orsvm_e1071",
      "description": "This module trains a binary SVM classifier using a linear kernel and identifies lambda values for evaluation. It processes dense numerical matrices and corresponding label vectors stored in tab-separated text files, returning prediction results for new data using a specified lambda. The module supports end-to-end training and prediction workflows with direct file input and output.",
      "description_length": 383,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Orsvm_e1071.Utls",
      "library": "orsvm_e1071",
      "description": "This module handles file input/output operations, including reading from and writing to files, processing lines of text, and parsing numerical data. It works with strings as filenames, in_channel and out_channel for file handling, and Buffer.t for efficient string concatenation. Specific use cases include reading floating-point data from files, collecting script outputs, and reading or processing prediction results.",
      "description_length": 419,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Orsvm_e1071",
      "library": "orsvm_e1071",
      "description": "This module provides tools for training and applying binary SVM classifiers using dense numerical data from tab-separated files, handling both linear and RBF kernels with configurable parameters. It supports end-to-end workflows including model training, prediction on new data, and evaluation using decision values or lambda parameters. Core data types include result types for error handling, numerical matrices and vectors for data representation, and channels for file I/O. Examples include training a classifier on a labeled dataset, predicting labels for new input files, and parsing or writing numerical data during preprocessing or postprocessing steps.",
      "description_length": 661,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 661,
    "min_description_length": 383,
    "avg_description_length": 466.6,
    "embedding_file_size_mb": 0.01862049102783203
  }
}