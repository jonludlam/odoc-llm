{
  "package": "gluon",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 18,
  "creation_timestamp": "2025-06-18T16:34:19.278004",
  "modules": [
    {
      "module_path": "Gluon.Sys.Selector",
      "description": "Provides operations to create, manage, and monitor file descriptors for I/O events. Works with a custom type `t` representing a selector instance, along with file descriptors, tokens, and interest masks. Used to register file descriptors for read/write events, update their monitoring, and wait for events with a timeout.",
      "description_length": 321,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluon.Sys.Event",
      "description": "Provides functions to create, compare, and serialize event records. Operates on the `t` type, which represents time-stamped occurrences with associated data. Used to log system activities and track user interactions in real-time applications.",
      "description_length": 242,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluon.Net.Addr",
      "description": "Provides functions to parse, convert, and inspect network addresses, including extracting IP strings, ports, and Unix socket representations. Works with custom types like `tcp_addr` for IPv4/IPv6 addresses and `stream_addr` for stream-based network endpoints. Used to construct addresses from URIs, convert between Unix and custom address formats, and check loopback status.",
      "description_length": 374,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gluon.Net.Socket",
      "description": "Provides operations to format socket representations, close sockets, and distinguish between listen and stream socket types. Works with file descriptor-based socket types and tagged variants for socket kinds. Used to manage network connections and ensure proper resource cleanup during communication.",
      "description_length": 300,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gluon.Net.Tcp_stream",
      "description": "Provides functions to establish and manage TCP connections, read from and write to socket streams, and handle file transfers. Operates on socket stream objects, supporting byte and vectorized I/O operations. Used for efficient data exchange in networked applications, such as streaming files or real-time communication.",
      "description_length": 319,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gluon.Net.Tcp_listener",
      "description": "Listens for incoming TCP connections, accepts them with detailed stream and address information, and handles socket lifecycle operations. Operates on socket objects representing bound TCP listeners. Used to create a server endpoint that waits for client connections and converts the listener into a data source for processing incoming traffic.",
      "description_length": 343,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluon.Fd",
      "description": "Provides operations to manage file descriptors, including closing, comparing, and converting them to integers. Supports seeking within a file and pretty-printing for debugging. Works directly with Unix file descriptors to interact with system-level I/O resources.",
      "description_length": 263,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluon.Non_zero_int",
      "description": "Creates a value of type t from an integer, returning None if the input is zero. Works with the t type, which is an alias for int. Used to enforce non-zero constraints in numerical computations, such as validating denominators in division operations.",
      "description_length": 249,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gluon.Token",
      "description": "Provides hash, equality, and value extraction operations for token instances, along with pretty-printing. Works with a generic value type wrapped in a token structure. Used to generate unique identifiers for parsed elements and enable consistent comparison in symbolic processing.",
      "description_length": 280,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluon.Interest",
      "description": "Provides operations to combine, check, and modify access rights represented as a bitmask. Works with the `t` type, which encapsulates permissions for reading and writing. Allows adding permissions, checking if a permission is set, and removing specific permissions from a set.",
      "description_length": 276,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluon.Event",
      "description": "Checks event status flags such as error, priority, read/write closure, and readability/writability. Operates on event objects encapsulating I/O state. Used to determine socket or file descriptor readiness and condition during asynchronous processing.",
      "description_length": 250,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluon.Sys",
      "description": "manages I/O event monitoring and time-stamped event tracking through two distinct but integrated systems. It handles file descriptor registration and event detection using a custom `t` type, while also supporting time-based event recording and serialization with another `t` type. Users can monitor file activity, respond to I/O changes, and log real-time system events with precise timestamps. Examples include tracking user input, managing network sockets, and recording application state transitions.",
      "description_length": 503,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluon.Source",
      "description": "Manages event registration and deregistration with a selector, handling I/O operations through token-based identification and interest masks. Operates on a custom type `t` and interacts with `Sys.Selector.t`, `Token.t`, and `Interest.t` to monitor and update event sources. Used to dynamically adjust which events are monitored on file descriptors or network sockets.",
      "description_length": 367,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluon.File",
      "description": "Provides functions to interact with file descriptors, including reading and writing bytes or vectorized buffers, closing the file, and pretty-printing. Operates on Unix file descriptors (`Unix.file_descr`) and returns I/O results with error handling. Used for low-level file manipulation, such as streaming data or handling binary I/O operations.",
      "description_length": 346,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gluon.Net",
      "description": "manages network address manipulation, socket lifecycle, and TCP communication through specialized types and operations. It handles IP and socket conversions, socket formatting and closure, and supports establishing, reading from, and writing to TCP streams. It enables constructing addresses from URIs, managing connection lifecycles, and handling file transfers or real-time data exchange. Examples include parsing a URI into a TCP address, closing a socket after communication, and accepting incoming connections with detailed metadata.",
      "description_length": 538,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluon.Poll",
      "description": "Manages event polling for I/O sources, allowing registration, deregistration, and monitoring of file descriptors or similar resources. Operates on `Token.t` for identifying sources and `Event.t` for reporting events. Used to efficiently track I/O readiness, such as detecting when a socket has data available for reading or writing.",
      "description_length": 332,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "gluon",
      "description": "Handles asynchronous task scheduling and event loop management using non-blocking I/O operations. Operates on lightweight threads, futures, and event channels to enable concurrent execution. Used for building high-performance network servers and real-time data processing pipelines.",
      "description_length": 282,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluon",
      "description": "manages system-level I/O, permissions, tokens, and event handling through low-level operations on file descriptors, bitmask permissions, and event objects. It provides types for file descriptors, tokens, permissions, and events, along with functions to manipulate, compare, and monitor these entities. Users can track I/O readiness, enforce non-zero constraints, manage access rights, and handle network communication with precise control. Examples include monitoring socket activity, validating division denominators, and serializing time-stamped events.",
      "description_length": 555,
      "index": 17,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 18,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 555,
    "min_description_length": 242,
    "avg_description_length": 341.1111111111111,
    "embedding_file_size_mb": 0.06582832336425781
  }
}