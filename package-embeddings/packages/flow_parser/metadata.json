{
  "package": "flow_parser",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 246,
  "creation_timestamp": "2025-08-14T20:37:18.932184",
  "modules": [
    {
      "module_path": "Flow_ast.Statement.EnumDeclaration.SymbolBody",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings abstract syntax tree nodes representing the body of symbol-based enum declarations. It operates on `SymbolBody` structures parameterized by metadata type `'M`, typically used during code generation or analysis. Concrete use cases include debugging AST representations or emitting error messages with precise enum body information.",
      "description_length": 407,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.ComponentDeclaration.Params",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting component declaration parameters to strings. It operates on a parameterized type `('M, 'T) t`, which represents parameters in component declarations. Use it to generate readable representations of typed parameters during code analysis or transformation tasks.",
      "description_length": 325,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Expression.TemplateLiteral.Element",
      "library": "flow_parser",
      "description": "This module represents elements of template literals in JavaScript abstract syntax trees, specifically storing raw and cooked string values. It provides functions to pretty-print and convert these elements to strings, supporting both direct value inspection and formatted output. Use cases include AST traversal, code generation, and static analysis tools where template literal parts need to be processed or displayed.",
      "description_length": 419,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.CallTypeArg.Implicit",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings abstract syntax tree nodes representing implicit type arguments in function calls. It operates on a parameterized type `('M, 'T) t`, where `'M` and `'T` represent metadata and type information, respectively. Concrete use cases include debugging and logging type argument structures during static analysis or transformation of Flow programs.",
      "description_length": 417,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Type.Object.MappedType",
      "library": "flow_parser",
      "description": "This module represents and manipulates mapped type annotations in Flow's abstract syntax tree, specifically handling type parameters and transformations applied to object properties. It defines an `optional_flag` type to track property optionality (e.g., `+`, `-`, or no modifier) and provides pretty-printing and string conversion functions for these flags and mapped types. It is used when processing TypeScript-style mapped types during type checking or AST transformations.",
      "description_length": 477,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.MatchPattern.ObjectPattern.Property",
      "library": "flow_parser",
      "description": "This module provides functions to format and convert object pattern properties and their keys to strings, specifically handling the `'M` and `'T` type parameters used in Flow's abstract syntax tree. It operates on object pattern property keys and properties, which represent parts of pattern matching constructs in the Flow language. These functions are used to generate human-readable representations of object pattern elements for debugging or logging purposes.",
      "description_length": 463,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.If.Alternate",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string an alternate branch of an if statement in the Flow AST. It operates on a polymorphic variant type representing the alternate clause, which may contain metadata and a statement. Concrete use cases include generating readable error messages or debugging output for if statements with else branches.",
      "description_length": 372,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Pattern.Array.Element",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of array pattern elements in the Flow AST, supporting type-parameterized formatting of both metadata and element types. It operates on the `('M, 'T) Flow_ast.Pattern.Array.Element.t` variant type, which represents elements in array patterns. Concrete use cases include generating readable output for debugging or logging array pattern structures with custom formatting for metadata and element values.",
      "description_length": 463,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Expression.Object.Property",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of object property keys and values in the Flow AST. It operates on generic types `'M` and `'T`, typically representing metadata and type annotations. Use this module to format or display object properties during AST traversal, debugging, or code generation tasks.",
      "description_length": 325,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Tuple.SpreadElement",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of tuple spread elements in Flow's AST. It operates on the `('M, 'T) Flow_ast.Type.Tuple.SpreadElement.t` type, which represents spread elements in tuple types. Concrete use cases include formatting and debugging tuple spread elements during type checking or code generation.",
      "description_length": 337,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Typeof.Target",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings the `Target.t` and `qualified` types, which represent targets of `typeof` expressions in the Flow AST. It supports custom formatting of module and type parameters through provided printer functions. These operations are used when generating readable representations of type information for debugging or tooling purposes.",
      "description_length": 397,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.EnumDeclaration.BigIntBody",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings representations of `BigIntBody` structures in Flow's AST, specifically for handling big integer enum declarations. It operates on the `t` type, which encapsulates metadata and values associated with big integer enums. Concrete use cases include generating readable output for debugging or logging enum declarations involving big integers.",
      "description_length": 415,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.EnumDeclaration.InitializedMember",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings enum declaration initialized members, which consist of an identifier and a value. It operates on a parameterized type `('I, 'M) t`, where `'I` represents identifiers and `'M` represents member values. These functions are used when generating readable representations of enum members during code analysis or transformation tasks.",
      "description_length": 405,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Object.Indexer",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string representation indexers in object types, specifically handling values of type `('M, 'T) Flow_ast.Type.Object.Indexer.t`. It operates on abstract syntax tree nodes representing object indexers, including their metadata and type annotations. Use this module when serializing or debugging object indexer structures in Flow's AST.",
      "description_length": 402,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Type.Object.InternalSlot",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string representations of internal slot annotations in object types. It operates on a parameterized type `('M, 'T) t`, where `'M` and `'T` are typically metadata and type representations, respectively. These functions are used during type printing or debugging to display object internal slots in a readable format.",
      "description_length": 384,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Type.Function.RestParam",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string a rest parameter in a function type, specifically handling its metadata and type components. It operates on the `('M, 'T) Flow_ast.Type.Function.RestParam.t` type, which represents a rest parameter with associated metadata and type. Concrete use cases include displaying rest parameters during type inspection or debugging, and generating human-readable representations of function types in tooling such as linters or IDE integrations.",
      "description_length": 511,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Statement.Try.CatchClause",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of catch clauses in try statements. It operates on typed catch clause structures parameterized by metadata and type information. Useful for generating readable error handling code or debugging parser outputs.",
      "description_length": 270,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.EnumDeclaration.NumberBody",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of number-bodied enum declarations in OCaml. It operates on the `Flow_ast.Statement.EnumDeclaration.NumberBody.t` type, which represents enums with numeric members. Concrete use cases include generating readable output for AST nodes during debugging or logging.",
      "description_length": 323,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.ComponentDeclaration.Param",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings parameter names and generic parameters in component declarations. It operates on the `param_name` and `'M, 'T t` types, which represent named parameters with metadata and type annotations. These functions are used to generate readable representations of component parameters during code analysis or debugging.",
      "description_length": 386,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.EnumDeclaration.StringBody",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of enum declaration bodies in the Flow AST, specifically for string enums. It provides functions to format and display enum members, where each member has an identifier and a value. Use this module when serializing Flow enum declarations to human-readable text or debugging enum structures in the AST.",
      "description_length": 363,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Function.Param",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting function parameter types to strings. It operates on parameter types represented as tuples of metadata and type information. Use cases include generating readable output for type annotations in JavaScript code analysis tools.",
      "description_length": 290,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Generic.Identifier",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings identifiers and qualified identifiers, which consist of metadata and type parameters. It handles generic identifiers used in type annotations and qualified names in the Flow AST. Use cases include debugging output, logging, and generating readable representations of type identifiers during analysis or transformation passes.",
      "description_length": 402,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Object.SpreadProperty",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of object spread properties in Flow's AST. It operates on typed object spread property structures parameterized by metadata and type annotations. Concrete use cases include generating readable output for type-checker diagnostics and debugging AST transformations involving object rest/spread syntax.",
      "description_length": 361,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Function.Params",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string the parameters of a function type in the Flow AST. It operates on the `('M, 'T) Flow_ast.Type.Function.Params.t` type, which represents function parameters with metadata and type annotations. Concrete use cases include displaying function signatures for debugging or generating readable output from AST nodes.",
      "description_length": 385,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Component.RestParam",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string a component's rest parameter type, which represents variadic parameters in function types. It operates on the `('M, 'T) Flow_ast.Type.Component.RestParam.t` type, typically used in abstract syntax trees for Flow. Concrete use cases include debugging and logging rest parameter structures during type analysis or transformation tasks.",
      "description_length": 409,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Statement.EnumDeclaration.DefaultedMember",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings representations of defaulted enum members in Flow's abstract syntax tree. It operates on the `t` type, which wraps a generic member type `'M` specific to enum declarations. Concrete use cases include debugging and logging enum member structures during static analysis or transformation of Flow code.",
      "description_length": 376,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.TypeParam.ConstModifier",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings values wrapped in the `ConstModifier` type, which represents type parameter modifiers in Flow's AST. It operates on values of type `'M Flow_ast.Type.TypeParam.ConstModifier.t`, typically used to annotate type parameters with variance or other modifiers. Concrete use cases include generating readable error messages or debugging output for type parameters in Flow's type system.",
      "description_length": 455,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Object.CallProperty",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string representation call properties of object types, specifically handling the display of method-like properties with type parameters and function types. It operates on the `('M, 'T) t` type, which represents call properties parameterized by type and method type. Concrete use cases include debugging and logging object type definitions in Flow AST manipulations.",
      "description_length": 434,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Statement.VariableDeclaration.Declarator",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of variable declarators in Flow's abstract syntax tree. It operates on typed declarator structures parameterized by metadata and type parameters. Concrete use cases include generating readable output for variable declarations during AST debugging or transformation processes.",
      "description_length": 337,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Pattern.Object.Property",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings the key and property types used in object patterns within Flow's abstract syntax tree. It operates on polymorphic variants of type `('M, 'T) Flow_ast.Pattern.Object.Property.key` and `('M, 'T) Flow_ast.Pattern.Object.Property.t`, which represent keys and full properties, respectively. These functions are used during AST debugging, serialization, or logging to display object pattern properties in a human-readable format.",
      "description_length": 500,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.ExportNamedDeclaration.ExportSpecifier",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting export specifier AST nodes to strings. It operates on the `('M, 'T) Flow_ast.Statement.ExportNamedDeclaration.ExportSpecifier.t` type, representing named exports in JavaScript/Flow syntax trees. Concrete use cases include generating readable output for export declarations during code analysis or transformation tasks.",
      "description_length": 384,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.Switch.Case",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting switch case statements to strings. It operates on the `('M, 'T) Flow_ast.Statement.Switch.Case.t` type, representing cases within a switch statement. Concrete use cases include generating readable output for AST nodes during debugging or logging.",
      "description_length": 312,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Object.Property",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings object property values in a typed abstract syntax tree. It operates on object property types parameterized by metadata and type representations. Use this module when rendering JavaScript object properties with type annotations for debugging or logging purposes.",
      "description_length": 338,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.EnumDeclaration.BooleanBody",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of boolean enum declaration bodies in the Flow AST. It operates on the `t` type, which represents boolean enum bodies with associated metadata. Concrete use cases include generating readable output for boolean enums during code analysis or transformation tasks.",
      "description_length": 323,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Component.Param",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string representation a parameterized type structure used in Flow's abstract syntax tree. It operates on a parametric type `('M, 'T) t`, which represents type parameters in Flow's type system, such as those used in generic components. The `pp` function formats values using a given formatter, while `show` returns a string representation, both requiring custom printers for the type's parameters.",
      "description_length": 465,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Tuple.LabeledElement",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting labeled tuple elements to strings. It operates on the `('M, 'T) t` type, representing labeled elements in a tuple type. Concrete use cases include displaying type annotations and generating readable error messages involving labeled tuples.",
      "description_length": 305,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.MatchPattern.ArrayPattern.Element",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting array pattern elements to strings. It operates on the `('M, 'T) Flow_ast.MatchPattern.ArrayPattern.Element.t` type, which represents elements in array patterns within the Flow AST. Use cases include debugging and logging array pattern structures during static analysis or transformation of JavaScript code.",
      "description_length": 372,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Component.Params",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string abstract syntax tree nodes representing component parameters in Flow's type system. It operates on a parameterized type `('M, 'T) t`, where `'M` and `'T` represent metadata and type information, respectively. These functions are used during code generation or debugging to display structured type information in a human-readable format.",
      "description_length": 412,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.ExportNamedDeclaration.ExportBatchSpecifier",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of export batch specifiers in Flow AST statements. It operates on a parameterized type `('M, 'T) t`, where `'M` and `'T` represent metadata and type information, respectively. Concrete use cases include generating readable output for debugging or logging export declarations in JavaScript code analysis tools.",
      "description_length": 371,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Function.ThisParam",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting `ThisParam` values to strings, specifically handling type parameters in function contexts. It operates on the `('M, 'T) Flow_ast.Type.Function.ThisParam.t` type, which represents `this` parameters in function types within Flow's AST. Concrete use cases include debugging and displaying type information during static analysis or tooling development.",
      "description_length": 415,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Object.SpreadProperty",
      "library": "flow_parser",
      "description": "This module handles the pretty-printing and string representation of object spread properties in Flow's abstract syntax tree. It operates on typed AST nodes that represent spread elements within object expressions. Concrete use cases include generating readable output for debugging or logging spread property structures in Flow programs.",
      "description_length": 338,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Statement.ComponentDeclaration.RestParam",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of component declaration rest parameters in the Flow AST. It operates on the `('M, 'T) t` type, which represents rest parameters with metadata and type annotations. It is used to format and display rest parameters in component declarations, such as those found in React-style function components with dynamic props.",
      "description_length": 377,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Class.Implements.Interface",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting interface implementation data structures to strings. It operates on typed interface implementations containing metadata and type parameters. Useful for debugging and logging the structure of class interface implementations in Flow's AST.",
      "description_length": 303,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Object",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of object types and their components in Flow's abstract syntax tree, including properties, spread properties, indexers, mapped types, call properties, and internal slots. It operates on parameterized object type structures with metadata and type annotations. Use it to generate readable output for type definitions during debugging, logging, or diagnostic reporting in Flow's type system.",
      "description_length": 450,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.Interface",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting interface statements to strings. It operates on interface declarations parameterized by metadata and type annotation types. Useful for generating readable output of interface definitions during code analysis or transformation tasks.",
      "description_length": 298,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Tuple",
      "library": "flow_parser",
      "description": "This module defines operations for pretty-printing and converting tuple types and their elements to strings. It works with tuple types represented as `('M, 'T) Flow_ast.Type.Tuple.t` and their associated element types, including labeled and spread elements. Concrete use cases include rendering type annotations for output and generating diagnostic messages during type checking.",
      "description_length": 379,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Function.ReturnAnnot",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting return type annotations of functions to strings. It operates on the `('M, 'T) t` type, representing return annotations with metadata and type information. Concrete use cases include displaying annotated return types during debugging or logging in a compiler or static analysis tool.",
      "description_length": 348,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Keyof",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting `Keyof` type annotations to strings, specifically handling their formatting and representation. It operates on the `('M, 'T) Flow_ast.Type.Keyof.t` type, which represents keyof types in the Flow AST. Concrete use cases include debugging and displaying type information during static analysis or tooling development.",
      "description_length": 381,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Statement.Switch",
      "library": "flow_parser",
      "description": "This module provides functions for converting switch statements to string representations, primarily used for debugging or logging AST nodes. It works with the `('M, 'T) Flow_ast.Statement.Switch.t` type, which represents switch statements in the AST. The `pp` function formats a switch statement using a formatter, while `show` returns its string representation.",
      "description_length": 363,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.JSX.Identifier",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting JSX identifier nodes to strings. It operates on the `'M` and `'T` typed identifier structure from the Flow AST, typically used for representing JSX element names. These functions are used during AST traversal or transformation to display or log JSX identifiers in a readable format.",
      "description_length": 348,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.OptionalCall",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string an abstract syntax tree (AST) representation of optional call expressions in Flow. It operates on a polymorphic tuple type `('M, 'T) t`, where `'M` and `'T` represent metadata and type information, respectively. It is used in parsing, analyzing, or transforming JavaScript code that includes optional chaining calls, such as `obj?.method()`.",
      "description_length": 417,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Intersection",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting intersection types to strings, specifically handling values of type `('M, 'T) Flow_ast.Type.Intersection.t`. It operates on intersection types that combine multiple type expressions, typically used in type systems to represent values that satisfy all constituent types simultaneously. These functions are useful when generating readable error messages or debugging output involving complex type expressions.",
      "description_length": 473,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.TypeParam",
      "library": "flow_parser",
      "description": "This module handles type parameters in Flow's AST, including their bounds and modifiers. It provides functions to pretty-print and convert to strings type parameters annotated with modifiers like variance, working with types such as `'M Flow_ast.Type.TypeParam.ConstModifier.t` and `('M, 'T) Flow_ast.Type.TypeParam.t`. It is used to generate human-readable representations of type parameters for debugging or error reporting.",
      "description_length": 426,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.IndexedAccess",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings a type representing indexed access in a data structure, typically used in abstract syntax trees. It operates on a parameterized type `('M, 'T) t`, where `'M` and `'T` might represent metadata and type information, respectively. Concrete use cases include debugging and logging type information in compilers or interpreters handling complex type systems.",
      "description_length": 430,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.This",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting `This.t` expressions to strings, using a provided formatter function. It operates on the `Flow_ast.Expression.This.t` type, which represents `this` expressions in the Flow AST. Concrete use cases include debugging AST nodes or generating readable output for analysis tools.",
      "description_length": 339,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.VariableDeclaration",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting variable declarations in Flow's abstract syntax tree to string representations. It works with typed variable declaration structures parameterized by metadata and type annotations. Concrete use cases include generating readable output for AST debugging, logging, or code generation during static analysis or transformation tasks.",
      "description_length": 394,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Class.Decorator",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting class decorator abstract syntax trees to strings. It operates on the `('M, 'T) Flow_ast.Class.Decorator.t` type, which represents decorators in class definitions. Concrete use cases include displaying parsed class decorators during debugging or logging, and generating human-readable representations of Flow's class AST nodes for tooling such as linters or code formatters.",
      "description_length": 439,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Function.RestParam",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string a rest parameter in a function, which includes its metadata and type. It operates on the `('M, 'T) Flow_ast.Function.RestParam.t` type, representing rest parameters in Flow's abstract syntax tree. Concrete use cases include debugging and displaying rest parameter information in development tools or error messages.",
      "description_length": 391,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Logical",
      "library": "flow_parser",
      "description": "This module represents logical expressions in the Flow AST, including operations like logical OR, AND, and nullish coalescing. It provides functions to pretty-print and convert logical operators and expressions to strings, supporting custom formatting for metadata and type parameters. It is used for analyzing or transforming JavaScript logical expressions in Flow's type-checking pipeline.",
      "description_length": 391,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.AsConstExpression",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string expressions that represent constant values in the AST. It operates on typed expressions parameterized by metadata and type information. Concrete use cases include debugging AST nodes and generating readable output during static analysis or transformation passes.",
      "description_length": 338,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.MatchPattern.OrPattern",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string a match pattern structure that represents disjunctions (OR patterns) in a syntax tree. It operates on a parameterized type `('M, 'T) t`, where `'M` and `'T` are representations of match patterns and types, respectively. It is used when handling pattern matching constructs in a language frontend, particularly when dealing with multiple alternative patterns in a single match case.",
      "description_length": 457,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.MatchPattern.ArrayPattern",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting array patterns to strings. It works with the `('M, 'T) Flow_ast.MatchPattern.ArrayPattern.t` type, representing array patterns in the Flow AST. It is used for debugging and logging array pattern structures during static analysis or transformation of JavaScript code.",
      "description_length": 332,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.DeclareExportDeclaration",
      "library": "flow_parser",
      "description": "This module provides functions to pretty-print and convert to strings abstract syntax tree nodes representing declare export declarations in Flow. It operates on a parameterized type `('M, 'T) t` that represents the structure of export declarations, including their metadata and type information. Concrete use cases include generating readable representations of AST nodes for debugging or logging during static analysis or transformation of Flow code.",
      "description_length": 452,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.If",
      "library": "flow_parser",
      "description": "This module provides `pp` and `show` functions for pretty-printing and converting to string an alternate branch of an if statement in the Flow AST. It works with a polymorphic variant type representing the alternate clause, which may include metadata and a statement. It is used to generate human-readable output for debugging or error reporting involving if statements with else branches.",
      "description_length": 389,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Interface",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting interface types to strings. It operates on interface type definitions parameterized by metadata and type parameters. Concrete use cases include generating readable representations of interface declarations for debugging or logging.",
      "description_length": 297,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.AsExpression",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string expressions with type annotations in a typed abstract syntax tree. It operates on expressions parameterized by metadata and type representations. Useful for generating readable output of typed expressions during compilation or analysis phases.",
      "description_length": 319,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.MatchPattern.UnaryPattern",
      "library": "flow_parser",
      "description": "This module represents unary patterns in the Flow AST, such as `+x` or `-x`, where the unary operator is either `Plus` or `Minus`. It provides functions to pretty-print and convert to strings both the operator and the pattern's argument, supporting any metadata type `'M`. Use this module when analyzing or transforming Flow JavaScript code that involves unary pattern matching in AST nodes.",
      "description_length": 391,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Assignment",
      "library": "flow_parser",
      "description": "This module defines and manipulates assignment operators such as `+=`, `-=`, `*=`, and `**=` used in expression trees. It provides functions to pretty-print and convert these operators and assignment expressions to strings, supporting concrete syntax representation. Use cases include generating readable code output and debugging abstract syntax trees in Flow's parser and transformer systems.",
      "description_length": 394,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Renders",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of type annotations in Flow's AST, specifically for rendering type variants like `Normal`, `Maybe`, or `Star`. It works with polymorphic type representations that include type parameters and type expressions. Use this module when generating readable type output for debugging, logging, or tooling interfaces that display Flow type information.",
      "description_length": 405,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.MatchPattern.MemberPattern",
      "library": "flow_parser",
      "description": "This module defines functions for pretty-printing and converting to strings the components of member patterns in match expressions. It operates on types representing the base and property parts of member patterns, parameterized by metadata and type annotations. These functions are used to display pattern structures during debugging or error reporting in the Flow AST.",
      "description_length": 369,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.DeclareModuleExports",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings abstract syntax tree nodes representing module export declarations. It operates on a parameterized type `('M, 'T) t`, where `'M` and `'T` are metadata and type information associated with the declaration. Concrete use cases include generating readable output for debugging or logging module export statements in a Flow AST.",
      "description_length": 400,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Member",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of member expressions in the Flow AST, specifically for `Member.property` and `Member.t` types. It formats object property accesses and method calls in JavaScript code, supporting type and metadata annotations. Use this module to generate readable output for AST nodes during debugging or code generation tasks.",
      "description_length": 373,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Function.Params",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting function parameter lists to strings. It operates on parameter lists containing metadata and type annotations. Use it to generate readable representations of function parameters during debugging or logging.",
      "description_length": 271,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.SpreadElement",
      "library": "flow_parser",
      "description": "This module handles the pretty-printing and string representation of spread elements in Flow's abstract syntax tree. It operates on the `('M, 'T) Flow_ast.Expression.SpreadElement.t` type, which represents expressions like `...x` in JavaScript syntax. Concrete use cases include generating readable output for AST nodes during debugging or logging.",
      "description_length": 348,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Class.Method",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting class method abstract syntax trees to strings, specifically handling method kinds and generic method types. It operates on the `'M` and `'T` parameterized method type and the fixed `kind` type representing different method classifications. Concrete use cases include generating readable output for type checking diagnostics and debugging AST transformations in Flow's compiler pipeline.",
      "description_length": 452,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.ForOf",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings the abstract syntax tree (AST) nodes representing `for...of` loop statements and their left-hand sides in JavaScript. It operates on generic AST structures parameterized by metadata and type information. These functions are used during code generation, debugging, or analysis tools to display or serialize `for...of` loop constructs with associated type and metadata.",
      "description_length": 444,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Pattern.Array",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting array patterns and their elements to strings, using custom formatting for metadata and element types. It operates on the `('M, 'T) Flow_ast.Pattern.Array.t` and `('M, 'T) Flow_ast.Pattern.Array.Element.t` types, which represent array patterns and their individual elements in the Flow AST. It is used to generate human-readable representations of array patterns for debugging or logging, with support for parameterized formatting of metadata and element values.",
      "description_length": 527,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.OpaqueType",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of opaque type declarations in Flow's abstract syntax tree. It operates on the `('M, 'T) t` type, which represents opaque types with metadata and type parameters. Concrete use cases include generating readable output for debugging or logging opaque type definitions during static analysis or compiler tooling.",
      "description_length": 371,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.Try",
      "library": "flow_parser",
      "description": "This module provides functions to pretty-print and convert try statements with catch clauses to string representations, operating on typed structures parameterized by metadata and type information. It is used for generating readable error handling code and inspecting parsed try-catch constructs during debugging. The `pp` function formats the output directly, while `show` returns it as a string.",
      "description_length": 397,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.OptionalMember",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string representations expressions involving optional member access in the Flow AST. It operates on the polymorphic variant type `('M, 'T) Flow_ast.Expression.OptionalMember.t`, which represents optional member expressions with metadata and type parameters. Concrete use cases include debugging and logging of AST nodes during static analysis or transformation of JavaScript code with optional chaining syntax.",
      "description_length": 479,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.ComponentDeclaration",
      "library": "flow_parser",
      "description": "This module provides pretty-printing and string conversion functions for component declarations in the Flow AST, handling parameters with metadata and type annotations. It operates on parameterized types like `('M, 'T) t` to represent and format component parameters and rest parameters. It is used to generate readable representations of component declarations during code analysis, debugging, or transformation tasks.",
      "description_length": 419,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.JSX.Attribute",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting JSX attributes, names, and values to strings. It operates on the parameterized types `'M` and `'T` within the `Flow_ast.JSX.Attribute` structure, handling both attribute components and full attribute lists. Concrete use cases include formatting JSX attributes during code generation or debugging, and serializing attribute data for logging or analysis tools.",
      "description_length": 424,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.DeclareClass",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings abstract syntax tree nodes representing class declarations in Flow. It operates on a parameterized type `('M, 'T) t`, where `'M` and `'T` are metadata and type annotation types, respectively. Concrete use cases include generating readable representations of class declarations for debugging or logging during static analysis or code transformation tasks.",
      "description_length": 431,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Pattern.Object",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting object patterns and their properties to strings, specifically handling polymorphic variants representing object keys and properties. It operates on types `('M, 'T) Flow_ast.Pattern.Object.Property.key`, `('M, 'T) Flow_ast.Pattern.Object.Property.t`, and `('M, 'T) Flow_ast.Pattern.Object.t`, enabling readable output during AST debugging, logging, or serialization. Concrete use cases include displaying object destructuring patterns in developer tools and generating human-readable representations of Flow AST nodes for analysis or diagnostics.",
      "description_length": 611,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Class.Implements",
      "library": "flow_parser",
      "description": "This module provides `pp` and `show` functions for converting interface implementation structures to human-readable string representations. It works with typed interface implementations that include metadata and type parameters. It is used to debug and log the structure of class interface implementations in Flow's AST.",
      "description_length": 320,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.Empty",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string representations of empty statements in the Flow AST, specifically handling the `'M Flow_ast.Statement.Empty.t` type. It works with abstract syntax tree nodes that represent empty statements, typically used in parsing and code generation tasks. Concrete use cases include debugging AST structures or serializing empty statements during code transformation processes.",
      "description_length": 441,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Binary",
      "library": "flow_parser",
      "description": "This module defines operations for working with binary expressions in the Flow AST, including a comprehensive set of operators for equality, comparison, arithmetic, bitwise manipulation, and type checking. It provides functions to pretty-print and convert binary operators and expressions to strings, supporting type-safe formatting of left-hand side and right-hand side expression types. Concrete use cases include serializing JavaScript expressions during AST traversal, generating human-readable output for debugging, and emitting code from the AST.",
      "description_length": 552,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.OptionalIndexedAccess",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of optional indexed access types in Flow's abstract syntax tree. It operates on a parametric type `('M, 'T) t`, where `M` and `T` represent metadata and type information, respectively. It is used to format and display optional index access types, such as when representing TypeScript's `T[K]?` syntax in Flow's AST.",
      "description_length": 377,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Import",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting import expressions to strings. It operates on the `('M, 'T) Flow_ast.Expression.Import.t` type, which represents import expressions parameterized over metadata and type annotation types. Concrete use cases include generating readable output for AST nodes during debugging or logging, and serializing import expressions for tooling such as linters or code transformers.",
      "description_length": 434,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.ExportDefaultDeclaration",
      "library": "flow_parser",
      "description": "This module provides functions to pretty-print and convert to strings export default declarations in a typed abstract syntax tree. It operates on `ExportDefaultDeclaration.t` and `ExportDefaultDeclaration.declaration` types, which represent the structure of default exports in Flow AST. Concrete use cases include generating readable output for debugging or serialization purposes directly from AST nodes.",
      "description_length": 405,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Update",
      "library": "flow_parser",
      "description": "This module defines and manipulates update expressions such as increment (`++`) and decrement (`--`) operators in the Flow AST. It provides functions to pretty-print and convert these operators and their associated expressions to strings. It works with the `operator` type and the polymorphic `t` type representing update expressions, parameterized over metadata and expression types.",
      "description_length": 384,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Sequence",
      "library": "flow_parser",
      "description": "This module handles the pretty-printing and string representation of sequence expressions in the Flow AST, which consist of multiple expressions evaluated in order. It provides `pp` for formatting sequences to a formatter and `show` for converting them to a string, using provided printers for metadata and type parameters. It operates on the polymorphic `('M, 'T) t` type, representing sequences of expressions with associated metadata and type information.",
      "description_length": 458,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.JSX.SpreadChild",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting JSX spread child nodes to strings. It operates on the `('M, 'T) Flow_ast.JSX.SpreadChild.t` type, which represents a spread child expression in JSX. Concrete use cases include formatting and displaying JSX spread children during AST transformations or debugging.",
      "description_length": 328,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Statement.ExportNamedDeclaration",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string conversion for named export declarations in Flow's abstract syntax tree. It operates on types like `('M, 'T) Flow_ast.Statement.ExportNamedDeclaration.t` and `('M, 'T) Flow_ast.Statement.ExportNamedDeclaration.specifier`, where `'M` and `'T` represent metadata and type information. Concrete use cases include formatting export declarations for debugging, logging, or code generation in JavaScript/Flow tooling.",
      "description_length": 458,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Object",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting object expressions and their properties to string representations. It works with generic object expression types `'M` and `'T`, typically representing metadata and type annotations in the Flow AST. Use it to generate readable output for debugging, logging, or code generation involving object expressions and their properties.",
      "description_length": 392,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Class.Property",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings class property declarations and their values in the Flow AST. It operates on generic class property types parameterized by metadata and type representations. Use this module to serialize class properties and their associated values for debugging or logging purposes.",
      "description_length": 343,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.ArgList",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting argument lists in Flow AST expressions to strings. It operates on typed argument lists parameterized by metadata and type annotations. Concrete use cases include debugging and logging of function call arguments during static analysis or transformation of JavaScript code.",
      "description_length": 337,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.CallTypeArg",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string conversion for abstract syntax tree nodes representing implicit type arguments in function calls. It works with the parameterized type `('M, 'T) t`, where `'M` and `'T` capture metadata and type information. It is used in debugging and logging type argument structures during static analysis or transformation of Flow programs.",
      "description_length": 374,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.MatchPattern.BindingPattern",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting binding patterns in match expressions to string representations. It operates on typed binding pattern structures parameterized by metadata and type information. Concrete use cases include debugging and logging of pattern matching constructs during analysis or transformation of OCaml code.",
      "description_length": 355,
      "index": 98,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Statement.ImportDeclaration",
      "library": "flow_parser",
      "description": "This module defines and manipulates import declarations in the Flow AST, including support for different import kinds (type, typeof, value), named and default specifiers, and module references. It provides functions to pretty-print and convert these structures to strings, parameterized over module and type expression representations. Concrete use cases include parsing, analyzing, or transforming JavaScript import statements in Flow-based tooling.",
      "description_length": 450,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.TypeAlias",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting type alias statements into strings. It operates on type alias structures parameterized by metadata and type parameters. Useful for generating readable representations of type aliases in JavaScript ASTs during debugging or code generation.",
      "description_length": 304,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Class.Body",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings the body of a class and its individual elements, specifically working with the polymorphic variants of class bodies and elements parameterized by metadata and type parameters. It supports structured output formatting through the `pp` and `pp_element` functions, and string representation via `show` and `show_element`. Concrete use cases include generating readable output for class structures during debugging, logging, or code generation tasks.",
      "description_length": 523,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.TaggedTemplate",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of tagged template expressions in the Flow AST. It operates on the `('M, 'T) Flow_ast.Expression.TaggedTemplate.t` type, which represents tagged templates with metadata and type annotations. It is used to format and display JavaScript tagged template literals during AST processing or debugging.",
      "description_length": 357,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Match.Case",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting match cases to strings. It operates on match case structures parameterized by three types, typically representing matchers, targets, and bodies. Use it to serialize or display pattern-matching constructs in a concrete syntax format.",
      "description_length": 298,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Function",
      "library": "flow_parser",
      "description": "This module provides functions for converting function type annotations to string representations, including handling parameters, rest parameters, `this` parameters, and return types. It operates on tuples of metadata and type information structured as `('M, 'T) Flow_ast.Type.Function.t` and related variants. Concrete use cases include displaying function signatures in JavaScript static analysis tools, generating readable type output for linters, and debugging AST transformations.",
      "description_length": 485,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Super",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string abstract syntax tree nodes representing `super` expressions in JavaScript, specifically handling type parameters. It works with the `Flow_ast.Expression.Super.t` type, which captures the structure of `super` expressions in the AST. Concrete use cases include generating readable representations of `super` expressions for debugging or logging during static analysis or code transformation tasks.",
      "description_length": 471,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Pattern.Identifier",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting identifier patterns to strings, using custom formatting functions for metadata and type parameters. It operates on the `('M, 'T) Flow_ast.Pattern.Identifier.t` type, which represents identifiers in abstract syntax trees with optional metadata and type annotations. Concrete use cases include generating readable output for AST nodes during debugging or logging, and serializing identifier patterns for tooling such as linters or code transformers.",
      "description_length": 513,
      "index": 106,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.MatchPattern.ObjectPattern",
      "library": "flow_parser",
      "description": "This module provides functions `pp` and `show` to format and convert object pattern structures to string representations, specifically handling the `'M` and `'T` type parameters from Flow's AST. It works with object pattern types that represent destructuring patterns in Flow's pattern matching syntax. These functions are used to produce readable debug output or logs for object pattern nodes during AST processing or analysis.",
      "description_length": 428,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.With",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting `With` statements to strings, specifically handling the `With` constructor in the Flow AST. It operates on the `('M, 'T) Flow_ast.Statement.With.t` type, which represents `with` statements parameterized over metadata and expression types. Concrete use cases include generating readable output for AST nodes during debugging or logging, using `pp` for formatted printing and `show` for string representation.",
      "description_length": 473,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.JSX.ExpressionContainer",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of JSX expressions within abstract syntax trees. It works with polymorphic types `'M` and `'T`, typically representing metadata and expression trees in Flow's AST. Concrete use cases include formatting JSX expressions for debugging, logging, or generating readable output from parsed JavaScript code.",
      "description_length": 362,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.JSX.MemberExpression",
      "library": "flow_parser",
      "description": "This module provides functions to format and convert JSX member expressions and their object components into strings. It operates on generic types `'M` and `'T`, representing metadata and type annotations, and supports pretty-printing and debugging of AST nodes. Concrete use cases include generating readable representations of JSX expressions like `MyComponent.SomeVariant` during linting, transformation, or error reporting in a compiler or toolchain.",
      "description_length": 454,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.JSX.Text",
      "library": "flow_parser",
      "description": "Represents text content within JSX elements, preserving both processed and raw string values. Provides `pp` and `show` functions for formatting and converting text values to strings, used when generating or inspecting JSX output. Commonly used during AST transformations and code generation for JSX-based syntax.",
      "description_length": 312,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.DoWhile",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting `DoWhile` loop structures to strings. It operates on the `('M, 'T) Flow_ast.Statement.DoWhile.t` type, which represents do-while loops in the Flow AST. Concrete use cases include generating readable output for AST nodes during debugging or logging.",
      "description_length": 314,
      "index": 112,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Expression.Conditional",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of conditional expressions in the Flow AST, supporting type-annotated JavaScript syntax trees. It provides `pp` for formatting conditional expressions with custom printers for metadata and type parameters, and `show` for converting them to strings. Concrete use cases include generating readable output for debugging or tooling, such as displaying conditional expressions during static analysis or code transformation workflows.",
      "description_length": 490,
      "index": 113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.JSX.Opening",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings JSX opening elements and their attributes, specifically handling the `Opening.t` and `Opening.attribute` types parameterized by metadata and type information. It supports rendering JSX syntax structures with customizable formatting for both element tags and their associated attributes. Concrete use cases include generating readable JSX output for debugging or code generation tasks involving Flow AST nodes.",
      "description_length": 486,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.ForIn",
      "library": "flow_parser",
      "description": "This module provides functions to pretty-print and convert to strings the abstract syntax tree (AST) nodes representing `for...in` loop statements and their left-hand sides in JavaScript. It operates on generic-typed `for...in` loop structures parameterized by metadata and type annotations. These functions are used during code generation, debugging, or analysis tools to display or serialize `for...in` loop constructs with proper formatting.",
      "description_length": 444,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.JSX.Closing",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting JSX closing elements to strings, specifically handling the `('M, 'T) t` type from the Flow AST. It supports custom formatting of JSX closing tags by taking formatter functions for metadata and type parameters. Useful when generating readable JavaScript code from AST nodes, especially for tooling like linters or code printers.",
      "description_length": 393,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Call",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of call expressions in the Flow AST, supporting type-parameterized formatting of both the callee and type arguments. It operates on the polymorphic `('M, 'T) Flow_ast.Expression.Call.t` structure, which represents function calls with associated type information. Concrete use cases include generating readable output for debugging or logging call expressions during static analysis or compiler passes.",
      "description_length": 463,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.Return",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting return statements in the Flow AST to strings. It operates on return statement structures parameterized by metadata and type information. Concrete use cases include generating readable representations of return statements for debugging or logging purposes.",
      "description_length": 321,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.MatchPattern.AsPattern",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings the `AsPattern` type, which represents pattern matching with an `as` binding in the Flow AST. It operates on the `target` type, which pairs a pattern and an identifier, and the `t` type, which wraps a pattern with an optional `as` binding. These functions are used to format and display pattern matching constructs in Flow's abstract syntax tree for debugging or logging purposes.",
      "description_length": 457,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.While",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of while loop statements in the Flow AST, specifically for the `While` type parameterized by metadata and type annotations. It provides `pp` for formatting to a `formatter` and `show` for converting directly to a string. These functions are used when generating readable output for AST nodes during debugging, logging, or tooling such as linters and code printers.",
      "description_length": 426,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.DeclareNamespace",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings the abstract syntax tree (AST) nodes representing namespace declarations in Flow. It operates on types `'M` and `'T`, typically representing module and type annotations, within the `DeclareNamespace` structure. These functions are used during code generation or debugging to display structured AST elements in a human-readable format.",
      "description_length": 411,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.TypeArgs",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting type arguments to strings. It operates on type arguments parameterized by metavariables and types. Useful for generating readable representations of generic type applications in Flow's abstract syntax tree.",
      "description_length": 272,
      "index": 122,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Statement.DeclareFunction",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings abstract syntax tree nodes representing function declarations in Flow. It operates on typed AST structures that capture function declarations, including their modifiers and type annotations. Use it to generate readable representations of function declaration nodes during debugging or logging.",
      "description_length": 370,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.DeclareComponent",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings abstract syntax tree nodes representing component declarations in Flow. It operates on a parameterized type `('M, 'T) t`, where `'M` and `'T` are metadata and type-related values associated with the AST. It is used to display or serialize component declaration statements during parsing, type checking, or code generation tasks.",
      "description_length": 405,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Function.ThisParam",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting `ThisParam` values to strings, specifically handling type and metadata parameters. It operates on the polymorphic `'M` and `'T` types within the `Flow_ast.Function.ThisParam.t` structure. Use cases include debugging and logging of abstract syntax tree nodes during analysis or transformation of JavaScript code.",
      "description_length": 377,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.Continue",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting continue statement AST nodes to strings. It operates on the `Flow_ast.Statement.Continue.t` type, which represents continue statements in the Flow AST. Concrete use cases include debugging and logging continue statements during static analysis or transformation passes.",
      "description_length": 335,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.MatchPattern.RestPattern",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of rest patterns in match expressions. It operates on the `('M, 'T) Flow_ast.MatchPattern.RestPattern.t` type, which represents rest patterns parameterized by metadata and type information. Concrete use cases include formatting rest patterns for debugging or generating readable output in tooling such as linters, printers, or IDE integrations.",
      "description_length": 406,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.MetaProperty",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings abstract syntax tree nodes representing meta properties in expressions. It operates on typed meta property structures parameterized by metadata type `'M`. Concrete use cases include generating readable representations of AST nodes for debugging or logging during analysis of JavaScript code with Flow type annotations.",
      "description_length": 395,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.ReadOnly",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string a read-only type annotation structure in the Flow AST, which captures type information with separate metadata and type parameters. It operates on the `('M, 'T) t` type, where `'M` represents metadata and `'T` represents the type content. These functions are used when displaying type annotations for debugging or logging, formatting them in a human-readable way.",
      "description_length": 438,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.New",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings abstract syntax tree nodes representing new expressions in a parsed code structure. It operates on generic `Flow_ast.Expression.New.t` types parameterized by metadata and type annotations. Concrete use cases include generating readable output for AST nodes during debugging or logging, specifically for object instantiation expressions in a JavaScript-like syntax tree.",
      "description_length": 446,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Pattern.RestElement",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string a pattern's rest element in an abstract syntax tree. It operates on a generic type `'M` representing metadata and `'T` representing the pattern's type. It is used to handle rest patterns in destructuring assignments or function parameters, where the remaining elements of a structure are captured.",
      "description_length": 373,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Component",
      "library": "flow_parser",
      "description": "This module provides pretty-printing and string conversion operations for component-related types in Flow's abstract syntax tree. It works with parameterized types like `('M, 'T) t`, where `'M` and `'T` represent metadata and type information, as seen in generic components and function parameters. Use cases include displaying structured type information during debugging, logging, and code generation tasks.",
      "description_length": 409,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Class.Extends",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string instances of the `Extends` type, which represents class inheritance in the Flow AST. It operates on generic types `'M` and `'T`, typically used for module and type annotations. Concrete use cases include debugging and logging class extension information during static analysis or transformation of JavaScript code.",
      "description_length": 390,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.TypeCast",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of type cast expressions in the Flow AST. It operates on type cast structures parameterized by metadata and type annotation types. Useful for debugging or logging type cast nodes with formatted output.",
      "description_length": 263,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Infer",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting type inference annotations to strings. It operates on the `('M, 'T) t` type, which represents annotated type information in the Flow AST. Concrete use cases include debugging type inference results and generating readable output for type-related diagnostics.",
      "description_length": 324,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.Throw",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of throw statements in the Flow AST, specifically for values of type `('M, 'T) Flow_ast.Statement.Throw.t`. It provides `pp` for formatting to a `formatter` and `show` for converting directly to a string. These operations are used when generating readable output for throw statements during AST processing or debugging.",
      "description_length": 381,
      "index": 136,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Function.Param",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting function parameter abstract syntax trees to strings. It operates on parameter types that include metadata and type annotations. Use it to generate readable representations of function parameters during code analysis or transformation tasks.",
      "description_length": 306,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.JSX.NamespacedName",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting namespaced JSX names to strings. It operates on a generic tuple type `('M, 'T) t`, where each element is formatted using provided functions. It is used to handle JSX names that include namespace qualifiers in syntax trees.",
      "description_length": 288,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Nullable",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting nullable type annotations to strings. It operates on the `('M, 'T) Flow_ast.Type.Nullable.t` type, which represents nullable types in the Flow AST. Concrete use cases include formatting nullable types for error messages or debugging output.",
      "description_length": 306,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.Debugger",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting debugger statements into string representations. It operates on the `Flow_ast.Statement.Debugger.t` type, which represents debugger statements in the Flow AST. Concrete use cases include generating readable output for debugging or logging purposes.",
      "description_length": 314,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Yield",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting yield expressions to strings. It operates on the `'M` and `'T` parameterized type representing yield expressions in the Flow AST. Concrete use cases include generating readable output for debugging or logging yield expressions in JavaScript code analysis tools.",
      "description_length": 327,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Typeof",
      "library": "flow_parser",
      "description": "This module provides `pp` and `show` functions for converting `Typeof.t` values to human-readable string and formatted representations. It operates on the `Typeof.t` type, which represents the targets of `typeof` expressions in the Flow AST, and uses custom printer functions for module and type parameters. It is used to generate precise string representations of type information for debugging and developer tooling.",
      "description_length": 418,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Unary",
      "library": "flow_parser",
      "description": "This module defines unary operators used in JavaScript abstract syntax trees, including operations like negation, logical not, bitwise not, and type inspection. It provides functions to pretty-print and convert operator values to strings, supporting direct manipulation of unary expressions in static analysis or transformation tools. Concrete use cases include printing diagnostic messages for type checkers or generating code from ASTs.",
      "description_length": 438,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Conditional",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of conditional type expressions in the Flow AST. It operates on a parametrized type `('M, 'T) t`, typically representing conditional types with members and type arguments. Concrete use cases include generating readable output for type annotations and debugging type structures in Flow-based tooling.",
      "description_length": 361,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.Labeled",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting labeled statement abstract syntax tree (AST) nodes to strings. It operates on the `('M, 'T) Flow_ast.Statement.Labeled.t` type, which represents labeled statements in the Flow AST. Concrete use cases include debugging AST structures and generating readable output during static analysis or transformation passes.",
      "description_length": 378,
      "index": 145,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Statement.Expression",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting expression statements to strings, specifically handling abstract syntax tree nodes parameterized with metadata and type information. It operates on the polymorphic variant type `('M, 'T) Flow_ast.Statement.Expression.t`, representing JavaScript expressions in the Flow AST. Concrete use cases include generating readable output for debugging or logging expression statements with associated metadata and types.",
      "description_length": 476,
      "index": 146,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Type.Array",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting array types to strings in the Flow AST. It operates on array types parameterized by metadata and element types. Concrete use cases include debugging and logging array structures during type checking or code analysis.",
      "description_length": 282,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.Block",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting block statements into string representations. It operates on block statement structures parameterized by metadata and type information. Concrete use cases include generating readable output for AST nodes during debugging or logging.",
      "description_length": 298,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.EnumDeclaration",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings various forms of enum declarations in Flow's abstract syntax tree, including boolean, number, string, symbol, and big integer-bodied enums. It operates on parameterized types representing enum members and bodies, allowing for structured formatting of identifiers, values, and metadata. Concrete use cases include debugging, logging, and generating human-readable representations of enum structures during static analysis or code transformation tasks.",
      "description_length": 527,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.TypeGuard",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting type guard annotations to strings, specifically handling the `kind` variant and generic `t` type. It operates on Flow AST type guard structures, including metadata and type parameters. Useful for debugging and logging type guard information during static analysis or transformation of JavaScript code.",
      "description_length": 367,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.CallTypeArgs",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting call-type arguments to strings. It operates on the `('M, 'T) Flow_ast.Expression.CallTypeArgs.t` type, which represents type arguments in function calls within the Flow AST. Use cases include debugging and logging type information during static analysis or transformation of JavaScript code.",
      "description_length": 357,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.Array",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of array expressions in the Flow AST, supporting both full arrays and individual elements. It works with generic array structures parameterized over metadata and element types, including optional elements. Concrete use cases include debugging AST transformations and generating readable output for array literals in JavaScript code analysis tools.",
      "description_length": 409,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.TSSatisfies",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to string a Flow AST node representing a TypeScript satisfies expression. It operates on a generic tuple type `('M, 'T) t`, where `'M` and `'T` represent metadata and type information, respectively. Concrete use cases include debugging and logging of Flow AST structures during static analysis or transformation of TypeScript code.",
      "description_length": 397,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.JSX.SpreadAttribute",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting JSX spread attribute nodes to strings. It operates on the `('M, 'T) Flow_ast.JSX.SpreadAttribute.t` type, which represents spread attributes in JSX syntax trees. Concrete use cases include formatting and debugging JSX spread attributes during AST transformations or code generation tasks.",
      "description_length": 354,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Union",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting union type annotations to strings. It operates on union types parameterized by metadata and type representations. Useful for debugging or logging type information in a readable format during analysis or transformation of Flow AST nodes.",
      "description_length": 302,
      "index": 155,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.Type.Predicate",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting to strings the `Predicate` type and its `kind` variant, which represent type predicates in the Flow AST. It operates on generic types `'M` and `'T`, allowing integration with different syntax tree nodes. These functions are used when generating readable error messages or debugging output involving type predicates in Flow's type system.",
      "description_length": 403,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.DeclareModule",
      "library": "flow_parser",
      "description": "This module provides functions to pretty-print and convert to strings identifiers and declarations related to module statements in the Flow AST. It operates on the `id` and `t` types, which represent module identifiers and module declarations, respectively. These functions are used when generating readable representations of module declarations for debugging or logging purposes.",
      "description_length": 381,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.Generic",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting generic type annotations to strings, specifically handling identifiers with metadata and type parameters. It operates on the `('M, 'T) t` type, which represents generic types in the Flow AST. Use cases include generating readable type representations for debugging, logging, and analysis tools.",
      "description_length": 360,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.Break",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of break statements in the Flow AST, specifically working with `Flow_ast.Statement.Break.t` values. It provides `pp` for formatting break statements using a custom printer and `show` for converting them to strings. These operations are used when generating readable output for AST nodes during code analysis or transformation tasks.",
      "description_length": 394,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.DeclareVariable",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting variable declaration statements to strings. It operates on typed variable declaration structures parameterized by metadata and type information. Useful for generating readable output of variable declarations during code analysis or transformation tasks.",
      "description_length": 319,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Class.PrivateField",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting private field declarations in a class AST to strings. It operates on private field structures parameterized by metadata and type information. Concrete use cases include debugging and logging private field definitions during static analysis or transformation of JavaScript class structures.",
      "description_length": 355,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type.TypeParams",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting type parameter lists to strings. It operates on type parameter structures parameterized by metadata and type representations. Useful for generating readable type signatures in tools like linters, type printers, or code generators.",
      "description_length": 296,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression.TemplateLiteral",
      "library": "flow_parser",
      "description": "This module handles template literal expressions in JavaScript ASTs, providing pretty-printing and string conversion operations. It works with parameterized types representing template elements, supporting both raw and processed string values. Concrete use cases include formatting JavaScript code during AST transformations and extracting template parts for analysis in linters or code generators.",
      "description_length": 398,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement.For",
      "library": "flow_parser",
      "description": "This module provides functions to pretty-print and convert to strings For loop initialization expressions and statements in the Flow AST, specifically handling generic types `'M` and `'T`. It supports structured rendering of For loops, including both the initialization part and the full statement, with customizable formatting for the type parameters. Concrete use cases include generating readable JavaScript code from AST nodes and debugging AST structures in Flow implementations.",
      "description_length": 484,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsdoc.Param",
      "library": "flow_parser",
      "description": "This module defines and manipulates parameter metadata for documentation, including optionality states, path structures, and descriptive information. It supports operations to format, compare, and display parameter paths and their associated details, such as optional flags and descriptions. Concrete use cases include generating or analyzing Jsdoc annotations for function parameters with nested or member paths.",
      "description_length": 413,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Type_parser.Type",
      "library": "flow_parser",
      "description": "This module parses type annotations and related constructs in Flow's AST, handling operations like type identifiers, generic types, object types, function and component parameter lists, return annotations, and predicates. It works with parsed type expressions, annotations, and environments, producing structured AST nodes with location information. Concrete use cases include parsing type parameters in function signatures, extracting return type annotations, and processing generic type applications in Flow code.",
      "description_length": 515,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Object_parser.Object",
      "library": "flow_parser",
      "description": "This module parses object and class constructs in JavaScript, handling property keys, initializers, class declarations, expressions, implements clauses, and decorators. It processes abstract syntax tree nodes annotated with location data, working with environments to track parsing state. Concrete use cases include parsing ES6+ class syntax, object literals, and decorator applications during JavaScript source analysis.",
      "description_length": 421,
      "index": 167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.StringLiteral",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting string literal abstract syntax trees to strings, specifically working with the `Flow_ast.StringLiteral.t` type. The `pp` function formats a string literal using a provided formatter, while `show` returns a string representation using the same formatting logic. These operations are useful when generating readable output for parsed JavaScript string literals during AST manipulation or debugging.",
      "description_length": 462,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Enum_parser.Enum",
      "library": "flow_parser",
      "description": "Parses enum declarations with optional leading comments, producing typed AST nodes. Works with `Loc.t` and `Flow_ast` structures to represent source locations and abstract syntax trees. Used for transforming enum syntax into structured data during JavaScript parsing.",
      "description_length": 267,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parser_flow.Parse",
      "library": "flow_parser",
      "description": "This module provides recursive descent parsing operations for converting JavaScript/Flow syntax into typed AST structures, handling constructs like object initializers, function bodies, class declarations, and type annotations. It processes token streams within parser environments to generate located AST nodes (e.g., expressions, patterns, JSX) paired with error tracking or metadata, while enforcing syntactic and type-related constraints. Typical use cases include AST generation for static analysis, code transformation pipelines, and Flow type system integration.",
      "description_length": 569,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parser_env.Lex_mode",
      "library": "flow_parser",
      "description": "This module defines a set of lexing modes used during parsing to control how input is interpreted in different contexts. It includes functions to convert these modes to debug strings for inspection. Concrete use cases include managing transitions between normal code, type annotations, JSX tags and children, template literals, and regular expressions during lexical analysis.",
      "description_length": 376,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.JSX",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting JSX AST nodes to strings, handling structures like identifiers, attributes, elements, and fragments. It operates on polymorphic types `'M` and `'T` used for metadata and expression trees in the Flow AST. Concrete use cases include formatting JSX syntax for debugging, logging, and generating readable output during AST traversal, transformation, or code generation tasks.",
      "description_length": 437,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Variable",
      "library": "flow_parser",
      "description": "This module defines the `kind` type representing variable declaration kinds (`Var`, `Let`, `Const`) and provides functions `pp_kind` and `show_kind` for pretty-printing and converting these kinds to strings. It is used to handle variable declarations in the Flow AST, particularly during analysis or transformation of JavaScript code where distinction between `var`, `let`, and `const` is required. Concrete use cases include linting, code formatting, and static analysis tools that need to inspect or report on variable scoping.",
      "description_length": 529,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast_utils.ExpressionSort",
      "library": "flow_parser",
      "description": "This module defines a polymorphic type `t` representing various JavaScript expression kinds such as `Array`, `Binary`, `Call`, and `Object`. It provides functions `pp`, `show`, and `to_string` for converting these expression types into string representations, primarily used for debugging or logging AST nodes. Concrete use cases include pretty-printing expression categories during static analysis or error reporting in JavaScript AST transformations.",
      "description_length": 452,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Statement_parser.Statement",
      "library": "flow_parser",
      "description": "This module provides functions to parse JavaScript and Flow statements\u2014including control structures, variable declarations, imports/exports, and labeled operations\u2014into typed abstract syntax tree (AST) nodes. It operates on a `Parser_env.env` environment and produces `(Loc.t, Loc.t) Flow_ast.Statement.t` structures, capturing source location metadata for error reporting and tooling. These utilities are used during AST construction for static analysis, type checking, or code transformation workflows.",
      "description_length": 504,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pattern_cover.Cover",
      "library": "flow_parser",
      "description": "This module converts pattern coverage information into AST expressions or patterns, handling error accumulation and manipulation. It operates on `Parser_common.pattern_cover` and `Parser_common.pattern_errors` types, using environment and error contexts. Useful for transforming parsed pattern data into structured AST nodes while managing associated parsing errors.",
      "description_length": 366,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Declaration_parser.Declaration",
      "library": "flow_parser",
      "description": "This module parses various declaration forms in the AST, handling variable declarations (let, const, var), function and component declarations, and related checks for strict mode and parameter uniqueness. It operates on parser environments and produces AST nodes with associated comments and errors, supporting features like async, generator, and variance annotations. Concrete use cases include parsing top-level declarations in a module or function body, validating parameter lists, and processing enum or component syntax.",
      "description_length": 525,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Comment",
      "library": "flow_parser",
      "description": "This module provides functions to pretty-print and convert to strings comments and their kinds from the Flow AST. It supports operations like formatting comments for display or debugging and serializing comment kinds into readable string representations. Concrete use cases include generating human-readable outputs of parsed comments during tooling development or debugging AST transformations.",
      "description_length": 395,
      "index": 178,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.NumberLiteral",
      "library": "flow_parser",
      "description": "This module handles the pretty-printing and string representation of number literals in the Flow AST, specifically working with the `NumberLiteral.t` type parameterized over metadata. It provides `pp` for formatting number literals with custom metadata and `show` for converting them to strings. These operations are used when generating readable output for AST nodes during code analysis or transformation tasks.",
      "description_length": 413,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Function",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting various components of function abstract syntax trees to strings, including parameters, rest parameters, `this` parameters, return type annotations, and function bodies. It operates on polymorphic types representing these components, such as `('M, 'T) t` for functions and their parts, along with specialized types like `effect_` for function effects. Concrete use cases include generating human-readable output for debugging, logging, and displaying function signatures and annotations in development tools or error messages.",
      "description_length": 591,
      "index": 180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Match_pattern_parser.Match_pattern",
      "library": "flow_parser",
      "description": "Parses match patterns in the Flow AST, handling pattern matching logic for types and values. Works with `Loc.t` and `Flow_ast.MatchPattern.t` data structures, which represent source locations and match pattern nodes. Used during AST traversal to interpret pattern matching constructs in Flow type annotations and pattern matching expressions.",
      "description_length": 342,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Syntax",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting abstract syntax trees (ASTs) to strings, specifically handling typed ASTs parameterized by metadata and internal types. It works with the `Flow_ast.Syntax.t` type, which represents syntax nodes in the Flow AST, along with formatter functions for metadata and internal data. Concrete use cases include debugging AST structures or generating readable output for syntax nodes during compiler or linter development.",
      "description_length": 477,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.MatchPattern",
      "library": "flow_parser",
      "description": "This module provides pretty-printing and string conversion functions for various pattern types in the Flow AST, including unary, member, binding, rest, object, array, or, and as-patterns. It operates on parameterized pattern types that carry metadata and type information, enabling precise formatting during AST traversal or analysis. These functions are used to generate human-readable representations of match patterns for debugging, logging, and tooling such as linters and IDE integrations.",
      "description_length": 494,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parser_env.Peek",
      "library": "flow_parser",
      "description": "This module provides functions to inspect tokens and check their syntactic properties, such as identifying line terminators, identifiers, or elements of syntactic constructs. It operates on the token stream within a `Parser_env.env` state, supporting parsing logic that requires classification of tokens for tasks like error recovery or comment handling.",
      "description_length": 354,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.BigIntLiteral",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of big integer literals in the Flow AST. It provides `pp` for formatting values with a custom printer and `show` for converting values to strings. These operations are used when generating readable output for AST nodes containing big integers during code analysis or transformation tasks.",
      "description_length": 350,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Pattern",
      "library": "flow_parser",
      "description": "This module provides functions `pp` and `show` for pretty-printing and converting various pattern types in an abstract syntax tree to strings, supporting custom formatting of metadata and type parameters. It works with the polymorphic variant type `('M, 'T) Flow_ast.Pattern.t`, which encompasses array, object, identifier, and rest element patterns. Concrete use cases include generating human-readable representations of patterns for debugging, logging, or diagnostics in developer tools and AST processing utilities.",
      "description_length": 519,
      "index": 186,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Expression_parser.Expression",
      "library": "flow_parser",
      "description": "Parses and manipulates JavaScript expressions, handling operations like assignments, conditionals, and sequence expressions. Works with abstract syntax tree (AST) nodes representing expressions, along with environment and location tracking. Used for processing function calls, type arguments, and ensuring valid left-hand side assignments during parsing.",
      "description_length": 354,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Class",
      "library": "flow_parser",
      "description": "This module provides pretty-printing and string conversion functions for Flow's class abstract syntax trees, including components like methods, properties, private fields, inheritance, and decorators. It operates on parameterized class structures with metadata and type annotations. Use it to generate human-readable representations of class AST nodes for debugging, logging, or tooling such as code formatters and linters.",
      "description_length": 423,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Expression",
      "library": "flow_parser",
      "description": "This module provides utilities for converting and pretty-printing abstract syntax tree (AST) expressions into readable string formats, supporting operations like member access, type casting, template literals, and object/array manipulations. It works with parameterized AST node types that encapsulate metadata and type annotations, enabling precise formatting of JavaScript and TypeScript expressions during code analysis or transformation workflows. These tools are particularly useful for debugging compiler pipelines, generating code from ASTs, or logging structured representations of expressions in static analysis tools.",
      "description_length": 627,
      "index": 189,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsdoc.Params",
      "library": "flow_parser",
      "description": "This module represents and manipulates lists of parameter names paired with their documentation. It provides operations for pretty-printing, converting to strings, and comparing parameter lists for equality. It is used to handle function or method parameter documentation in a structured and serializable way.",
      "description_length": 309,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parser_env.Expect",
      "library": "flow_parser",
      "description": "This module provides functions to validate and handle expected tokens during parsing, including checking for specific tokens, identifiers, and generating errors. It operates on the `Parser_env.env` type, interacting directly with `Token.t` and `Loc.t` values. Concrete use cases include enforcing syntax rules, such as ensuring a specific token follows a construct or validating identifier usage in language expressions.",
      "description_length": 420,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Identifier",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of identifiers in the Flow AST, which include metadata and type information. It provides functions `pp` and `show` to format and convert identifier values for debugging or logging purposes. Use cases include displaying variable names with associated type annotations or source location metadata during analysis or tooling development.",
      "description_length": 396,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Token_translator.Translate",
      "library": "flow_parser",
      "description": "Translates parser tokens into a structured format using offset information to track positions in the source text. It handles individual tokens and lists of tokens, producing values of the type defined by the `Impl` module. This module is used to build precise, position-aware representations of parsed elements during syntax tree construction.",
      "description_length": 343,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.ModuleRefLiteral",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting module reference literals to strings. It operates on a parameterized type `('M, 'T) t`, where `'M` and `'T` are formatter-specific types. Concrete use cases include displaying module references in error messages or generating readable representations of AST nodes during debugging.",
      "description_length": 347,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pattern_parser.Pattern",
      "library": "flow_parser",
      "description": "Converts expressions into pattern syntax trees and parses raw patterns, working with Flow AST expressions and patterns. It operates on parsed JavaScript code, handling variable declarations and destructuring assignments. This module is used during the parsing phase to transform expression nodes into valid pattern forms for further analysis.",
      "description_length": 342,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Program",
      "library": "flow_parser",
      "description": "This module handles pretty-printing and string representation of abstract syntax trees (ASTs) for programs. It operates on the `('M, 'T) Flow_ast.Program.t` type, which represents program structures parameterized by metadata and type information. Concrete use cases include generating readable output for debugging or logging ASTs during static analysis or compiler stages.",
      "description_length": 373,
      "index": 196,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_ast.PrivateName",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting private name abstract syntax tree (AST) nodes to strings. It operates on values of type `'M Flow_ast.PrivateName.t`, which represent private names in the AST, parameterized by metadata type `'M`. Concrete use cases include debugging AST structures and generating readable output for private name bindings during static analysis or transformation passes.",
      "description_length": 419,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsdoc.Unrecognized_tags",
      "library": "flow_parser",
      "description": "This module represents and manipulates lists of unrecognized documentation tags, where each tag is a pair of a string name and an optional string value. It provides functions to pretty-print, convert to string, and compare these tag lists for equality. Concrete use cases include handling custom or unknown tags in Jsdoc parsing and processing workflows.",
      "description_length": 354,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parse_error.PP",
      "library": "flow_parser",
      "description": "Formats parse errors into human-readable strings. Converts structured error data into a string representation for reporting or logging. Useful for displaying syntax errors during parsing workflows.",
      "description_length": 197,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Statement",
      "library": "flow_parser",
      "description": "This module formats Flow AST statements into human-readable representations by leveraging metadata and type parameters embedded in node structures. It handles control flow constructs (if, loops), declarations (type aliases, variables), and programmatic directives (debugger, exports) through consistent pretty-printing logic. The generated output supports static analysis tooling, logging frameworks, and developer-facing diagnostics by preserving semantic context from the original source code.",
      "description_length": 495,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parser_env.Eat",
      "library": "flow_parser",
      "description": "This module manipulates the lexical parsing environment by consuming tokens, inspecting comments, and managing lexing modes. It operates on the `Parser_env.env` type, interacting with tokens, comments, and lexical modes. Concrete use cases include skipping expected tokens, checking for specific token presence, adjusting lexing behavior during parsing, and collecting comments associated with program elements or trailing specific locations.",
      "description_length": 442,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Match",
      "library": "flow_parser",
      "description": "This module provides functions to pretty-print and convert match constructs to strings, using a formatter and functions for the match's three type parameters. It works with match structures parameterized by three types, typically representing matchers, targets, and bodies. Use it to serialize or display pattern-matching constructs in a concrete syntax format.",
      "description_length": 361,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Variance",
      "library": "flow_parser",
      "description": "This module provides functions to pretty-print and convert to strings variance annotations and their kinds in the Flow AST. It works with the `t` type representing variance with location metadata and the `kind` type distinguishing variance directions. Concrete use cases include debugging AST nodes by displaying variance information in error messages or logging.",
      "description_length": 363,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parser_env.Try",
      "library": "flow_parser",
      "description": "Handles optional parsing operations by attempting a function and returning a structured result indicating success or failure. It works with parsing environments and functions that produce values within a `parse_result` context. Used to implement backtracking in parser combinators, where a fallback value is provided if the initial parse attempt fails.",
      "description_length": 352,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.RegExpLiteral",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting regular expression literals to strings. It operates on the `t` type, which represents regular expression literals in the Flow AST. Concrete use cases include formatting regular expressions for debugging or generating readable output from AST nodes.",
      "description_length": 314,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.ComputedKey",
      "library": "flow_parser",
      "description": "This module provides functions for pretty-printing and converting computed key abstract syntax tree (AST) nodes to strings. It operates on values of type `('M, 'T) Flow_ast.ComputedKey.t`, where `'M` and `'T` are parameters representing metadata and type information, respectively. The `pp` function formats a computed key for display, while `show` generates a string representation, both useful for debugging or logging during analysis or transformation of JavaScript code in Flow.",
      "description_length": 482,
      "index": 206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.BooleanLiteral",
      "library": "flow_parser",
      "description": "This module handles the pretty-printing and string representation of boolean literals in the Flow AST. It provides functions `pp` and `show` that format and convert boolean literal values, respectively. Useful for generating readable output during AST traversal or debugging.",
      "description_length": 275,
      "index": 207,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsx_parser.JSX",
      "library": "flow_parser",
      "description": "Parses JSX elements or fragments given an optional parent opening name and parser environment, returning a located value indicating whether the parsed structure is an element or fragment. Works with Flow AST JSX nodes, including element and fragment types annotated with location information. Used in JavaScript and React code parsing to handle JSX syntax during AST construction.",
      "description_length": 380,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Estree_translator.Translate",
      "library": "flow_parser",
      "description": "Translates ESTree AST nodes into a target representation using a provided implementation and configuration. It handles programs, expressions, and error collections, producing values of type `t` that represent the translated output. This module is used to convert parsed JavaScript code into an intermediate form suitable for analysis or transformation tools.",
      "description_length": 358,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast.Type",
      "library": "flow_parser",
      "description": "This module provides pretty-printing and string conversion operations for type constructs such as conditional, function, object, generic, and indexed access types, operating on parameterized representations that combine metadata with type information. It supports annotations, type parameters, predicates, and guards to generate readable type representations used in debugging, error reporting, and tooling like linters, code generators, and static analysis utilities.",
      "description_length": 468,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "File_key",
      "library": "flow_parser",
      "description": "This module defines a sum type for different kinds of file keys and provides operations to inspect, transform, and compare them. It supports parsing file paths, checking and modifying file suffixes, and mapping over the internal string values. Concrete use cases include handling file categorization logic and path manipulations in a build system or configuration loader.",
      "description_length": 371,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parser_common",
      "library": "flow_parser",
      "description": "This module provides utilities for parsing and validating JavaScript/Flow syntax structures, including expressions, patterns, and statements, with a focus on error handling, location tracking, and AST manipulation. It operates on abstract syntax trees, source location data, and parser environments, employing parser combinators to handle tasks like type guard validation, parameter list analysis, and re-parsing argument lists as match expressions. These capabilities are particularly useful for processing Flow type annotations or resolving complex parsing scenarios that require positional tracking and iterative AST transformations.",
      "description_length": 636,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pattern_parser",
      "library": "flow_parser",
      "description": "Parses and evaluates pattern-matching expressions over structured data. Works with variant types and abstract syntax trees representing patterns. Used to implement custom pattern matching logic for configuration validation and data transformation pipelines.",
      "description_length": 257,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Declaration_parser",
      "library": "flow_parser",
      "description": "Parses OCaml source code to extract module and type declarations. Works with abstract syntax trees (ASTs) generated from OCaml parsetrees. Useful for static analysis tools and documentation generators that need to process interface files or implementation modules.",
      "description_length": 264,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast_utils",
      "library": "flow_parser",
      "description": "This module offers utilities for analyzing and transforming abstract syntax trees (ASTs) with a focus on validation, source location extraction, and comment handling. It operates on Flow and JavaScript AST structures such as expressions, patterns, and statements, supporting tasks like binding analysis, directive partitioning, and framework-specific function call detection (e.g., Jest mocks, `require`). Key applications include static analysis, code transformation, and debugging workflows that require precise manipulation of typed AST nodes and metadata.",
      "description_length": 559,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast",
      "library": "flow_parser",
      "description": "This library provides utilities to convert and pretty-print enriched AST nodes\u2014such as literals, identifiers, JSX elements, expressions, and program structures\u2014into human-readable strings. It operates on parameterized AST types decorated with metadata and type annotations, enabling robust formatting for diagnostics and tooling. These capabilities directly support debugging, static analysis, and developer tools like linters, formatters, and IDE integrations.",
      "description_length": 461,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Comment_attachment",
      "library": "flow_parser",
      "description": "This module manipulates comment attachments and location data in Flow's AST by stripping trailing comments from nodes like expressions, types, and function parameters, while also identifying and adjusting comment boundaries around syntactic elements such as array elements, type parameters, and statement components. It operates on located AST nodes to extract leading/trailing comments and modify comment bounds, specifically aiding in parsing and transforming JavaScript code while preserving documentation context.",
      "description_length": 517,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsdoc",
      "library": "flow_parser",
      "description": "This module processes Jsdoc documentation by extracting structured information such as parameter metadata, descriptions, and unrecognized tags. It operates on Jsdoc abstract syntax trees derived from comments, supporting concrete use cases like static analysis and documentation generation for JavaScript functions. Key operations include parsing comments into Jsdoc structures, retrieving parameter details, and handling custom or unsupported tags.",
      "description_length": 449,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Offset_utils",
      "library": "flow_parser",
      "description": "This module creates and manipulates offset conversion structures based on UTF-8 or JavaScript character encoding rules. It supports converting source code positions to integer offsets, retrieving line lengths, and checking for multibyte characters. Use it when mapping positions in source files to byte offsets for tools like linters or compilers.",
      "description_length": 347,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parse_error_utils",
      "library": "flow_parser",
      "description": "Converts a string to camel case, typically used to transform error identifiers into more readable format. Works with standard OCaml strings. Useful for normalizing error messages or generating consistent error codes from string inputs.",
      "description_length": 235,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsx_parser",
      "library": "flow_parser",
      "description": "Parses JSX syntax into OCaml abstract syntax trees, handling embedded expressions and attribute lists. Converts XML-like tags into function calls and object literals while preserving source locations. Useful for compiling frontend frameworks or templating systems that use JSX in OCaml projects.",
      "description_length": 295,
      "index": 221,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_id_unicode",
      "library": "flow_parser",
      "description": "This module defines arrays of integer ranges representing Unicode code points for valid JavaScript identifier start and continue characters. It provides direct access to these ranges for checking or validating JavaScript identifiers according to Unicode standards. Use cases include lexing, parsing, or validating JavaScript code in tools like compilers, linters, or syntax highlighters.",
      "description_length": 387,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Estree_translator",
      "library": "flow_parser",
      "description": "Translates ESTree ASTs into ReasonML/OCaml data structures, handling JavaScript syntax trees with support for custom configuration via a module type. Works directly with AST nodes and supports transformations like renaming identifiers or adjusting function parameters. Useful for building custom linters, code generators, or static analysis tools targeting JavaScript.",
      "description_length": 368,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Enum_common",
      "library": "flow_parser",
      "description": "This module defines an enumeration of explicit type tags including Boolean, Number, String, Symbol, and BigInt. It provides comparison and string conversion operations for these types. Useful for type tagging and runtime type identification in data processing pipelines.",
      "description_length": 270,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parse_error",
      "library": "flow_parser",
      "description": "This module defines a comprehensive set of parse error variants that represent specific syntactic and semantic issues encountered during parsing. It includes operations to compare errors and trigger errors with locations, alongside a dedicated submodule for formatting errors into readable strings. These features are used to report precise parsing issues in workflows involving complex language constructs, such as JSX, async functions, and type annotations.",
      "description_length": 459,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Statement_parser",
      "library": "flow_parser",
      "description": "Parses SQL-like statement strings into abstract syntax trees, handling operations like `SELECT`, `INSERT`, `UPDATE`, and `DELETE`. Works with string inputs and produces structured representations such as expression trees and query components. Used to validate and transform raw SQL queries into executable database commands.",
      "description_length": 324,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lex_result",
      "library": "flow_parser",
      "description": "This module defines a record type that captures the output of a lexer, including a token, location, list of errors, and collected comments. It provides accessors to retrieve each component of the lexer result and a function to generate a debug string representation. It is used to pass lexer output to subsequent parsing stages while preserving error and comment information.",
      "description_length": 375,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Enum_parser",
      "library": "flow_parser",
      "description": "Parses enum declarations in JavaScript code, handling optional leading comments and generating typed abstract syntax tree (AST) nodes. Uses `Loc.t` for source location tracking and `Flow_ast` for representing parsed structures. Directly transforms enum syntax into structured data for further analysis or processing in the compiler pipeline.",
      "description_length": 341,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Object_parser",
      "library": "flow_parser",
      "description": "Parses JSON objects into strongly typed OCaml values, converting fields based on provided decoders. Works with associative lists and custom record types to map JSON key-value pairs to structured data. Useful for deserializing API responses or configuration files into domain-specific types.",
      "description_length": 290,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Loc",
      "library": "flow_parser",
      "description": "This module provides operations for managing source code locations with start and end positions, supporting comparisons, containment checks, and intersection analysis. It works primarily with `Loc.t` values that encapsulate positional data and optional source identifiers, enabling precise tracking of code regions. These tools are used for debugging, integrating with editors like VSCode, and analyzing spatial relationships between code segments.",
      "description_length": 448,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flow_ast_mapper",
      "library": "flow_parser",
      "description": "This module provides functions to transform and manipulate abstract syntax trees with a focus on handling optional values, lists, and location-annotated nodes. It supports operations like mapping over lists, applying transformations to nodes with or without location information, and folding over programs with a list of mappers. Concrete use cases include rewriting specific AST nodes during static analysis or code transformation tasks, such as updating type annotations or modifying expressions in a typed JavaScript AST.",
      "description_length": 524,
      "index": 231,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Token",
      "library": "flow_parser",
      "description": "This module defines a comprehensive set of token types representing lexical elements in a JavaScript-like language, including literals, identifiers, operators, keywords, and punctuation. It provides functions to compare tokens and their subtypes for equality, convert tokens to strings, extract token values, quote token values, and generate human-readable explanations of tokens. These operations are used during parsing and analysis to identify and handle lexical constructs such as numbers, strings, control structures, and type annotations.",
      "description_length": 544,
      "index": 232,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Flow_lexer",
      "library": "flow_parser",
      "description": "This module defines a set of functions for lexing specific syntactic elements such as JSX children, regular expressions, JSX tags, template tails, type annotations, and general tokens. Each function takes a lexing environment and returns an updated environment along with a lexing result, enabling stateful token recognition. It operates on lex buffers and is used to parse identifiers and structured syntax elements in a JavaScript-like language, particularly supporting JSX and template literals.",
      "description_length": 498,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pattern_cover",
      "library": "flow_parser",
      "description": "This module converts pattern coverage data into AST expressions and patterns, while accumulating and managing parsing errors. It operates on `Parser_common.pattern_cover` and `Parser_common.pattern_errors` types, using environment and error contexts to guide transformations. It is used to produce structured AST nodes from parsed pattern information in a way that preserves and handles associated errors.",
      "description_length": 405,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Type_parser",
      "library": "flow_parser",
      "description": "Parses type annotations and constructs in Flow's AST, including type identifiers, generics, object types, function parameters, return types, and predicates. Operates on parsed type expressions and environments, producing structured AST nodes with location data. Used to process type parameters in function signatures, extract return type annotations, and handle generic type applications in Flow code.",
      "description_length": 401,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Token_translator",
      "library": "flow_parser",
      "description": "Translates parser tokens into structured values with positional tracking, using offset data to maintain accurate source text references. Works with token lists and individual tokens, producing typed outputs according to the `Impl` module's definitions. Used during syntax tree construction to build precise, location-aware representations of parsed elements.",
      "description_length": 358,
      "index": 236,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Comment_utils",
      "library": "flow_parser",
      "description": "This module provides functions to manipulate and remove comments from abstract syntax trees. It operates on AST nodes and programs annotated with location information, particularly handling inlined comments and docblocks. Use cases include preprocessing source code by stripping comments before analysis or transformation, and extracting comment metadata tied to specific locations in the AST.",
      "description_length": 393,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parser_env",
      "library": "flow_parser",
      "description": "This module manages parsing context and state transitions during lexical analysis and error handling, operating on environments (`env`) that track lexing modes, parsing flags (e.g., strict mode, function context), and metadata like comments, labels, and token locations (`Token.t`, `Loc.t`). It supports use cases such as validating JavaScript/TypeScript syntax with feature toggles (decorators, Flow types), reporting contextual parse errors, and enabling backtracking in parser combinators through state manipulation and token inspection. Key operations include querying reserved identifiers, adjusting lexing modes, and managing error recovery strategies.",
      "description_length": 658,
      "index": 238,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Js_id",
      "library": "flow_parser",
      "description": "Determines whether a given Unicode code point is valid for use in JavaScript identifiers. Works with integer values representing Unicode code points. Useful for validating characters in dynamically generated JavaScript variable names or identifiers.",
      "description_length": 249,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lex_env",
      "library": "flow_parser",
      "description": "This module manages lexical analysis state for parsing, tracking position, errors, and comment syntax context. It operates on lex buffers and location data to support precise error reporting and source tracking. Used during tokenization to maintain line numbers, handle embedded comments, and accumulate parse errors.",
      "description_length": 317,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parser_flow",
      "library": "flow_parser",
      "description": "This module implements recursive descent parsing for JavaScript and Flow syntax, producing typed ASTs with location tracking and error reporting. It handles parsing of programs, expressions, type annotations, and specific structures like JSX and JSON objects, while checking for duplicate exports and errors. Use cases include static analysis tools, code transformation pipelines, and integration with the Flow type system.",
      "description_length": 423,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Expression_parser",
      "library": "flow_parser",
      "description": "Parses mathematical and logical expressions from string input into abstract syntax trees. Supports operations like addition, multiplication, comparison, and boolean logic with operator precedence and parentheses. Designed for use in compilers, interpreters, or configuration systems where dynamic expression evaluation is required.",
      "description_length": 331,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Match_pattern_parser",
      "library": "flow_parser",
      "description": "Parses and processes match patterns in the Flow AST, focusing on pattern matching logic for types and values. It operates on `Loc.t` and `Flow_ast.MatchPattern.t` to represent and manipulate source locations and match pattern nodes. Used during AST traversal to analyze and interpret pattern matching constructs in Flow type annotations and expressions.",
      "description_length": 353,
      "index": 243,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Translator_intf",
      "library": "flow_parser",
      "description": "Defines a formal interface for translation modules, specifying required functions like `translate` and `validate`. Works with abstract syntax trees and target language representations. Used to ensure consistent translation behavior across different backends in a compiler or transpiler.",
      "description_length": 286,
      "index": 244,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RelativeLoc",
      "library": "flow_parser",
      "description": "Represents file locations relative to an unspecified file context. Converts absolute locations to and from relative representations using `of_loc` and `to_loc`, which require a `File_key.t` to resolve paths when converting back. Useful for tracking source positions across different files during parsing or transformation tasks.",
      "description_length": 328,
      "index": 245,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 250,
    "meaningful_modules": 246,
    "filtered_empty_modules": 4,
    "retention_rate": 0.984
  },
  "statistics": {
    "max_description_length": 658,
    "min_description_length": 197,
    "avg_description_length": 394.4715447154472,
    "embedding_file_size_mb": 3.564596176147461
  }
}