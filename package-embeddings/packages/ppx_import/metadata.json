{
  "package": "ppx_import",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:04:13.228404",
  "modules": [
    {
      "module_path": "Ppx_import.Tt",
      "library": "ppx_import",
      "description": "This module converts various OCaml AST types from the `At` module to their equivalents in `Ppxlib`. It handles flags, labels, and attributes, ensuring compatibility during AST transformations. Use it when migrating or interoperating between different OCaml AST versions in ppx extensions.",
      "description_length": 288,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_import",
      "library": "ppx_import",
      "description": "This module enables deep introspection and transformation of type and module declarations during AST processing, bridging OCaml compiler types like `type_declaration` and `Env.t` with ppxlib structures such as `module_type` and `signature`. It includes a submodule that converts AST components\u2014such as flags, labels, and attributes\u2014between the `At` module and ppxlib, ensuring compatibility across AST versions. You can use it to resolve module dependencies, extract type metadata, or implement substitution-based transformations in PPX extensions. For example, it allows mapping a `type_declaration` from the compiler AST into a corresponding ppxlib `type_decl`, preserving attributes and structure for further processing.",
      "description_length": 723,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 723,
    "min_description_length": 288,
    "avg_description_length": 505.5,
    "embedding_file_size_mb": 0.0076961517333984375
  }
}