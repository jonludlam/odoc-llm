{
  "package": "ppx_import",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:47:27.320904",
  "modules": [
    {
      "module_path": "Ppx_import.Tt",
      "library": "ppx_import",
      "description": "Converts AST nodes from the At module to their equivalents in Ppxlib, handling mutable flags, private flags, argument labels, and attributes. Works directly with Parsetree attributes and flag types. Useful for integrating custom syntax extensions with Ppxlib-based tools like ppx_jsx or ppx_deriving.",
      "description_length": 300,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_import",
      "library": "ppx_import",
      "description": "This module provides utilities for transforming OCaml AST nodes, focusing on type and module declarations through operations like signature extraction, longident path resolution, type substitution, and self-reference handling. It operates on compiler AST elements such as `type_declaration`, `module_type`, and `signature_item`, enabling version compatibility and context-aware syntax transformations. These capabilities are primarily used to implement PPX extensions that import type definitions from external modules or apply structured AST rewrites during compilation.",
      "description_length": 571,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 571,
    "min_description_length": 300,
    "avg_description_length": 435.5,
    "embedding_file_size_mb": 0.02941131591796875
  }
}