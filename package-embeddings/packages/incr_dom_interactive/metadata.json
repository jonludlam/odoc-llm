{
  "package": "incr_dom_interactive",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:54.986479",
  "modules": [
    {
      "module_path": "Incr_dom_interactive.Primitives.Button_state",
      "library": "incr_dom_interactive",
      "description": "Represents the state of a button in a user interface, with variants for pressed and not pressed. Used to track and update the visual or behavioral state of buttons in response to user input. Directly supports rendering and event handling logic for interactive UI components.",
      "description_length": 274,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Incr_dom_interactive.Let_syntax.Let_syntax",
      "library": "incr_dom_interactive",
      "description": "This module provides monadic operations for composing incremental computations. It supports values wrapped in the `Incr_dom_interactive.t` type, allowing sequencing with `bind`, transforming values with `map`, combining two computations with `both`, and wrapping pure values with `return`. These functions enable building dynamic user interfaces where state changes propagate efficiently through the application.",
      "description_length": 412,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Incr_dom_interactive.Monad_infix",
      "library": "incr_dom_interactive",
      "description": "This module defines infix operators for monadic chaining and transformation of incremental values. It provides `>>=` for flat-mapping over incremental computations and `>>|` for mapping pure functions over incremental values. These operations are used to sequence asynchronous or dynamic updates in user interfaces built with the Incr_dom library.",
      "description_length": 347,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Incr_dom_interactive.Let_syntax",
      "library": "incr_dom_interactive",
      "description": "This module provides monadic bind and map operations for working with incremental values in the `Incr_dom_interactive` type, supporting chaining asynchronous or incremental computations using `return`, `>>=`, and `>>|`. It enables expressive dataflow programming for reactive UI components that update over time, such as form inputs or dynamic displays. The child module extends this capability with additional combinators like `both`, which combines two incremental computations, and functions like `bind` and `map` for sequencing and transforming values. Together, they support efficient propagation of state changes through UI layers by composing `Incr_dom_interactive.t` values directly.",
      "description_length": 691,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Incr_dom_interactive.Primitives",
      "library": "incr_dom_interactive",
      "description": "This module provides primitives for building interactive UI components with typed values and event handling, including input elements like text fields, checkboxes, buttons, and dropdowns that produce values for declarative UI workflows. It directly supports stateful controls such as buttons, whose state (pressed or not pressed) can be tracked and updated in response to user input, enabling dynamic rendering and behavior changes. Operations include creating and composing UI elements, binding event handlers, and managing internal state for interactive controls. Example uses include form creation, custom component development, and building responsive UIs with integrated DOM event handling.",
      "description_length": 695,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Incr_dom_interactive",
      "library": "incr_dom_interactive",
      "description": "This module enables building interactive UIs with incremental computations by combining dynamic values and Vdom nodes that react to user input and state changes. It supports monadic operations like `bind`, `map`, and `both` for sequencing and transforming incremental values, and integrates event handling through input elements like buttons and text fields that inject updates into the model. You can wrap components in containers with dynamic attributes, create forms that update state on user input, or build custom interactive elements that respond to events. Submodules provide infix operators for chaining, combinators for value transformation, and primitives for constructing stateful UI components with typed event handling.",
      "description_length": 732,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 732,
    "min_description_length": 274,
    "avg_description_length": 525.1666666666666,
    "embedding_file_size_mb": 0.022240638732910156
  }
}