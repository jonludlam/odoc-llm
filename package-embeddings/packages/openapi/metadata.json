{
  "package": "openapi",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:30:06.433644",
  "modules": [
    {
      "module_path": "Openapi.Json_schema.Helpers",
      "description": "This module provides schema-building and validation operations, enabling the creation of structured JSON schemas with fields like ID, title, and constraints, while leveraging references and maps for composability. It supports specialized validation rules for primitive and complex data types, including dates, emails, and URIs, alongside IRI construction and parsing. Use cases include ensuring data format consistency, enforcing schema hierarchies, and validating resource identifiers in structured workflows.",
      "description_length": 510,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Openapi.Json_schema",
      "description": "Provides schema-building and validation capabilities, allowing the creation of structured JSON schemas with fields such as ID, title, and constraints. It supports complex validation rules for primitive and composite data types, including date, email, and URI validation, along with IRI construction. Schemas can be composed using references and maps, enabling hierarchical and reusable definitions. Examples include validating user input formats, ensuring consistent resource identifiers, and enforcing data structure integrity in workflows.",
      "description_length": 541,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Openapi.Spec",
      "description": "This module provides functions for constructing, serializing, and deserializing structured API-related data types, including objects like media type definitions, response configurations, security schemes, and path endpoints, with support for JSON (yojson) conversion, pretty-printing, and string representation. It operates on custom OCaml types such as `parameter_object`, `security_scheme_object`, and `paths_object`, enabling precise modeling of OpenAPI specifications and metadata. Use cases include generating API documentation, validating request/response formats, and transforming structured data for API integration or inspection.",
      "description_length": 638,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "openapi",
      "description": "Provides functions for constructing OpenAPI specifications, serializing them to JSON, and generating documentation pages. Works with route definitions, request handlers, and JSON schema structures to map HTTP endpoints to API descriptions. Enables developers to define routes and automatically produce openapi.json files and interactive documentation.",
      "description_length": 351,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Openapi",
      "description": "Offers schema-building and data-structuring capabilities for API specifications, supporting validation of primitive and composite types, IRI construction, and schema composition through references. It handles custom OCaml types like `parameter_object` and `paths_object`, enabling serialization, deserialization, and pretty-printing of API metadata. Users can validate input formats, enforce data consistency, and generate structured API documentation. Examples include validating email fields, constructing URI templates, and modeling security schemes for API endpoints.",
      "description_length": 571,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 5,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8333333333333334
  },
  "statistics": {
    "max_description_length": 638,
    "min_description_length": 351,
    "avg_description_length": 522.2,
    "embedding_file_size_mb": 0.01862049102783203
  }
}