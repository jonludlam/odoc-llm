{
  "package": "openapi",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:31.956010",
  "modules": [
    {
      "module_path": "Openapi.Json_schema.Helpers",
      "library": "openapi",
      "description": "This module facilitates the creation and manipulation of JSON Schema objects for OpenAPI specifications through a fluent API, enabling precise definition of schema properties (e.g., titles, descriptions), data constraints (e.g., enums, item limits), and structural rules (e.g., required fields, property mappings). It operates on `schema`, `or_ref`, and `map` types, supporting use cases like modeling API data structures with format validations (e.g., email, datetime, URI) and composing complex schemas via logical operators (`any_of`, `one_of`). Specific applications include defining reusable schema references, enforcing array or object constraints, and validating IRI/URI strings against formatting standards.",
      "description_length": 715,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Openapi.Json_schema",
      "library": "openapi",
      "description": "This module enables the manipulation and transformation of JSON Schema definitions, combining core utilities for comparison, pretty-printing, and conversion with a fluent API for constructing complex schemas. It centers around key data types like `schema`, `or_ref`, and polymorphic `map` structures, supporting operations such as type validation, constraint application, and reference resolution. Users can define schemas with format-specific validations (e.g., email, URI), compose nested structures using logical operators, and generate API specifications with metadata like titles and descriptions. The combined interface allows both direct schema manipulation and high-level composition, suitable for tasks ranging from data validation to OpenAPI document generation.",
      "description_length": 772,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Openapi.Spec",
      "library": "openapi",
      "description": "This module provides a comprehensive set of operations for constructing, serializing, and manipulating OpenAPI specification entities, including metadata, API components, and request/response models. It works with OCaml record types representing OpenAPI elements like `parameter_object`, `response_object`, `components_object`, `server_object`, and `security_scheme_object`, along with utilities for JSON conversion (`yojson_of_*`, `*_of_yojson`), pretty-printing (`pp_*`), and optional field handling. These tools are used to build and validate OpenAPI documents, model API endpoints and their behaviors, and manage configurations for servers, authentication schemes, and external documentation.",
      "description_length": 696,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Openapi",
      "library": "openapi",
      "description": "This module combines JSON Schema manipulation with OpenAPI specification construction to model, validate, and serialize API definitions. It supports core data types like `schema`, `or_ref`, `parameter_object`, `response_object`, and `components_object`, enabling operations such as schema composition, reference resolution, and metadata attachment. Users can define structured API endpoints with validation rules, generate JSON representations, and manage security schemes or server configurations. Example tasks include building request validators, generating OpenAPI documents from OCaml types, and composing complex API models with reusable components.",
      "description_length": 655,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 772,
    "min_description_length": 655,
    "avg_description_length": 709.5,
    "embedding_file_size_mb": 0.014934539794921875
  }
}