{
  "package": "openapi",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 3,
  "creation_timestamp": "2025-08-14T22:53:17.290256",
  "modules": [
    {
      "module_path": "Openapi.Json_schema.Helpers",
      "library": "openapi",
      "description": "This module provides utilities for building and refining JSON Schema definitions to model OpenAPI data structures, focusing on schema composition, validation constraints, and structural annotations. It operates on schema objects and related types, supporting primitives like strings and numbers, compound types such as arrays and objects, and format-specific validators (e.g., email, URI). Typical applications include defining reusable schema components, enforcing data integrity rules (e.g., `minItems`, `enum`), and validating complex structures like IRI references or nested object properties.",
      "description_length": 597,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Openapi.Spec",
      "library": "openapi",
      "description": "This module provides type-safe construction, serialization, and manipulation of OpenAPI v3 specification components, focusing on request/response modeling, parameter definitions, and schema elements. It works with OCaml records representing OpenAPI objects like `parameter_object`, `response_object`, `components_object`, `operation_object`, and `server_variable`, alongside supporting types for media types, security schemes, and external documentation. These tools enable developers to programmatically build, parse, and convert OpenAPI documents to/from JSON while handling optional fields, polymorphic structures, and validation rules inherent to the specification.",
      "description_length": 669,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Openapi",
      "library": "openapi",
      "description": "This module provides functions to construct, serialize, and manipulate OpenAPI v3 specifications using OCaml records that model specification components such as parameters, responses, operations, and components. It supports working with media types, security schemes, server variables, and external documentation, enabling programmatic creation and parsing of OpenAPI documents with proper handling of optional fields and polymorphic structures. Concrete use cases include generating API documentation from OCaml types, validating request/response structures, and converting OpenAPI specifications to and from JSON.",
      "description_length": 615,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 3,
    "filtered_empty_modules": 1,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 669,
    "min_description_length": 597,
    "avg_description_length": 627.0,
    "embedding_file_size_mb": 0.043869972229003906
  }
}