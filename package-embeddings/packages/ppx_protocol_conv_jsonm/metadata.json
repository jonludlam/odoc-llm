{
  "package": "ppx_protocol_conv_jsonm",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:02.002531",
  "modules": [
    {
      "module_path": "Protocol_conv_jsonm.Jsonm.Make",
      "library": "ppx_protocol_conv_jsonm",
      "description": "This module enables bidirectional conversion between OCaml types and JSON-like data structures, focusing on serializing and deserializing values like primitives (integers, strings, booleans), containers (lists, arrays, options), and structured types (records, variants, tuples) to and from an intermediate representation compatible with JSON serialization. It handles error propagation and lazy or result-wrapped values, supporting use cases like API data encoding, configuration parsing, or persistent storage of typed data in JSON format. The core operations revolve around transforming OCaml values into a JSON-adjacent type (`t`) while preserving type structure and handling edge cases during conversion.",
      "description_length": 708,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol_conv_jsonm.Jsonm",
      "library": "ppx_protocol_conv_jsonm",
      "description": "This module facilitates bidirectional serialization of OCaml values\u2014including primitives, containers, records, variants, and tuples\u2014into a JSON-compatible intermediate type (`t`) and back, with strong type safety and detailed error handling. It includes submodules that extend this functionality to support structured data transformations, lazy or result-wrapped values, and customizable encoders and decoders for complex types. You can use it to parse JSON into typed OCaml structures, generate JSON from OCaml values, and handle malformed input with precise error messages. Common applications include decoding API responses, encoding configuration data, and persisting state in a structured, human-readable format.",
      "description_length": 717,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol_conv_jsonm",
      "library": "ppx_protocol_conv_jsonm",
      "description": "This module enables bidirectional conversion between OCaml values and JSON through a type-safe intermediate representation, supporting primitives, records, variants, and containers. It provides operations to encode OCaml data into JSON and decode JSON into structured OCaml types, with precise error handling for malformed input. Submodules extend support to lazy values, result-wrapped data, and custom encoders/decoders. You can use it to parse API responses into typed records, serialize configuration objects, or persist application state in JSON format.",
      "description_length": 558,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 717,
    "min_description_length": 558,
    "avg_description_length": 661.0,
    "embedding_file_size_mb": 0.011317253112792969
  }
}