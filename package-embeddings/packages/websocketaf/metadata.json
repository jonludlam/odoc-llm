{
  "package": "websocketaf",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:32:08.193646",
  "modules": [
    {
      "module_path": "Websocketaf.Websocket.Opcode",
      "description": "Encodes and decodes integer values to and from a custom type representing opcode values, supporting safe and unsafe conversions. Handles specific opcode categories including control and non-control instructions through typed representations. Provides human-readable formatting for debugging and logging purposes.",
      "description_length": 312,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocketaf.Websocket.Close_code",
      "description": "Provides conversion between a custom type and integers, including safe and unsafe options for decoding and encoding. Works with an abstract type `t` and integer values, supporting both standard and extended error handling. Used to serialize and deserialize status codes or error identifiers in system-level communication.",
      "description_length": 321,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocketaf.Websocket.Frame",
      "description": "Provides methods to inspect and manipulate WebSocket frame properties, including checking if a frame is final, extracting the opcode, and handling masking. Works with the `t` type, which represents a frame, and interacts with `Bigstringaf.t` and `Bytes.t` for payload access and serialization. Used to parse incoming frames, apply masking, and construct outgoing frames with specified payload data.",
      "description_length": 398,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocketaf.Websocket",
      "description": "Encodes and decodes opcodes and status codes using custom types with safe and unsafe conversion functions, enabling precise control over WebSocket protocol elements. Provides frame inspection and manipulation capabilities, allowing checks for frame finality, extraction of opcodes, and handling of masking with support for raw byte data. Supports serialization and deserialization of frame payloads using efficient byte buffer types. Can be used to parse incoming WebSocket traffic, apply masking rules, and construct frames with specific status codes or opcode values.",
      "description_length": 569,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "websocketaf",
      "description": "Provides functions for establishing and managing WebSocket connections using HTTP/AF, including message sending, receiving, and connection state transitions. Works with socket streams, binary and text data, and connection states. Used to build real-time client applications that communicate over WebSockets, such as chat interfaces or live data feeds.",
      "description_length": 351,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocketaf",
      "description": "Encodes and decodes WebSocket protocol elements using custom types with safe and unsafe conversions, enabling precise control over opcodes and status codes. Offers frame inspection, manipulation, and payload serialization using efficient byte buffers, allowing checks for frame finality, extraction of opcodes, and application of masking rules. Can parse incoming traffic, construct frames with specific parameters, and handle raw byte data. Supports low-level frame operations critical for implementing WebSocket communication protocols.",
      "description_length": 538,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 6,
    "filtered_empty_modules": 6,
    "retention_rate": 0.5
  },
  "statistics": {
    "max_description_length": 569,
    "min_description_length": 312,
    "avg_description_length": 414.8333333333333,
    "embedding_file_size_mb": 0.02221202850341797
  }
}