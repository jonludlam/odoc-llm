{
  "package": "websocketaf",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:05:29.618295",
  "modules": [
    {
      "module_path": "Websocketaf.Websocket.Frame",
      "library": "websocketaf",
      "description": "This module handles WebSocket frame parsing and serialization, providing direct access to frame properties like fin, opcode, mask, and payload length. It works with `Bigstringaf.t` and `Bytes.t` for efficient payload manipulation, supporting in-place masking and unmasking operations. Concrete use cases include parsing incoming WebSocket frames, constructing control frames, and serializing application data frames with proper masking.",
      "description_length": 436,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocketaf.Websocket.Close_code",
      "library": "websocketaf",
      "description": "This module defines types and functions for working with WebSocket close codes, including standard symbolic representations and arbitrary integer values. It provides conversions between close code values and their integer encodings, along with safe and unsafe lookup functions. Concrete use cases include handling WebSocket connection closures with specific error codes like `1000` for normal closure or `1006` for abnormal termination.",
      "description_length": 436,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocketaf.Websocket.Opcode",
      "library": "websocketaf",
      "description": "This module defines types and functions for working with WebSocket opcodes, including standard non-control (`Continuation`, `Text`, `Binary`) and control (`Connection_close`, `Ping`, `Pong`) codes. It provides conversions between opcode values and integers, along with safe and unsafe lookup functions for parsing and serializing WebSocket frames. Concrete use cases include handling frame types during WebSocket message processing and validating opcode values during protocol negotiation.",
      "description_length": 489,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocketaf.Client_handshake",
      "library": "websocketaf",
      "description": "This module manages the WebSocket handshake process for clients, handling the transition from HTTP to WebSocket. It works with HTTP responses and WebSocket frames, using types like `Bigstringaf.t` and `IOVec.t` for efficient buffer management. Concrete use cases include initiating WebSocket connections, processing handshake responses, and managing read/write operations during the handshake phase.",
      "description_length": 399,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocketaf.Wsd",
      "library": "websocketaf",
      "description": "This module manages WebSocket data transmission for client and server connections. It supports sending text and binary messages, control frames like ping/pong, and connection termination. Operations include scheduling data for writing, handling send readiness, and tracking connection state.",
      "description_length": 291,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocketaf.Websocket",
      "library": "websocketaf",
      "description": "This module implements low-level WebSocket frame handling, opcode management, and connection close semantics. It works with bigstrings and bytes for efficient binary data processing, supporting operations like frame parsing, masking, and serialization. Concrete use cases include implementing WebSocket servers and clients that require precise control over frame structure, opcode handling, and connection termination codes.",
      "description_length": 424,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocketaf.Client_connetion",
      "library": "websocketaf",
      "description": "This module manages WebSocket client connections, handling the lifecycle of sending and receiving frames, including handshake negotiation and error handling. It works with low-level buffer operations using `Bigstringaf.t` and `IOVec.t`, and provides callbacks for processing incoming frames and connection termination. Concrete use cases include implementing real-time messaging clients, handling binary or text WebSocket frames, and managing backpressure during writes.",
      "description_length": 470,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocketaf",
      "library": "websocketaf",
      "description": "This module implements WebSocket protocol handling for both clients and servers, focusing on frame parsing, masking, and connection lifecycle management. It operates on low-level buffers like `Bigstringaf.t` and `IOVec.t` to efficiently process WebSocket messages, supporting text, binary, and control frames. Concrete use cases include building high-performance WebSocket servers, implementing custom message framing logic, and managing connection termination with precise control over close codes and reason payloads.",
      "description_length": 519,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 519,
    "min_description_length": 291,
    "avg_description_length": 433.0,
    "embedding_file_size_mb": 0.11623001098632812
  }
}