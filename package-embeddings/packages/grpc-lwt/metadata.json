{
  "package": "grpc-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T22:57:25.709260",
  "modules": [
    {
      "module_path": "Grpc_lwt.Server.Rpc",
      "library": "grpc-lwt",
      "description": "This module implements gRPC server-side RPC handlers for unary, client-streaming, server-streaming, and bidirectional-streaming communication patterns over HTTP/2. It processes incoming requests using Lwt for asynchronous I/O, handling message serialization and response streaming. Use this module to define and serve gRPC endpoints that exchange messages with clients using the specified streaming semantics.",
      "description_length": 409,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_lwt.Client.Rpc",
      "library": "grpc-lwt",
      "description": "This module implements gRPC client RPC handlers for four communication patterns: bidirectional streaming, client streaming, server streaming, and unary calls. It works with Lwt-based streams and promises, handling request/response encoding and transmission over network connections. Concrete use cases include sending a sequence of requests and receiving streamed responses in real-time, or making standard request-response API calls with asynchronous I/O.",
      "description_length": 456,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_lwt.Server.Service",
      "library": "grpc-lwt",
      "description": "This module manages the lifecycle and routing of gRPC services using Lwt for asynchronous handling. It provides operations to create a service, add RPC methods by name, and route incoming HTTP/2 requests to the appropriate RPC handler. It works directly with `H2.Reqd.t` for handling HTTP/2 requests and `Grpc_lwt.Server.Rpc.t` for individual RPC endpoints. A concrete use case is building a gRPC server that dynamically registers and routes RPCs while handling streaming and unary requests over HTTP/2.",
      "description_length": 503,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_lwt.Client",
      "library": "grpc-lwt",
      "description": "Implements gRPC client operations for unary, server streaming, client streaming, and bidirectional streaming RPCs using Lwt for asynchronous I/O. It encodes and transmits requests and responses over H2 connections, handling headers, streaming bodies, and trailers. Used to build clients that perform real-time data exchange, batched requests, or standard synchronous API calls over HTTP/2.",
      "description_length": 389,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_lwt.Server",
      "library": "grpc-lwt",
      "description": "This module implements gRPC server functionality over HTTP/2 using Lwt for asynchronous I/O. It provides operations to create a server instance, register named gRPC services, and route incoming HTTP/2 requests to the appropriate handlers. It works directly with `H2.Reqd.t` for request handling and supports unary, streaming, and bidirectional RPC patterns. Use this module to build a gRPC server that serves multiple endpoints with different streaming semantics over HTTP/2.",
      "description_length": 475,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_lwt",
      "library": "grpc-lwt",
      "description": "This module implements gRPC client and server functionality over HTTP/2 using Lwt for asynchronous I/O. It handles unary, streaming, and bidirectional RPC patterns, working directly with H2 types like `H2.Reqd.t` on the server and managing streaming bodies and trailers on the client. Use it to build efficient, real-time gRPC services and clients that communicate over HTTP/2 with precise control over request routing and stream handling.",
      "description_length": 439,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 503,
    "min_description_length": 389,
    "avg_description_length": 445.1666666666667,
    "embedding_file_size_mb": 0.08730220794677734
  }
}