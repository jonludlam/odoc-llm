{
  "package": "grpc-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:53.316531",
  "modules": [
    {
      "module_path": "Grpc_lwt.Server.Service",
      "library": "grpc-lwt",
      "description": "This module manages gRPC service definitions and request routing. It provides operations to create a service, register RPC methods by name, and handle incoming HTTP/2 requests by dispatching them to the appropriate RPC handler. It works with service instances, RPC descriptors, and HTTP/2 request objects to implement server-side gRPC routing logic.",
      "description_length": 349,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_lwt.Server.Rpc",
      "library": "grpc-lwt",
      "description": "This module defines and handles the four core gRPC streaming patterns\u2014unary, client streaming, server streaming, and bidirectional streaming\u2014using Lwt for asynchronous processing. It operates on raw string payloads extracted from HTTP/2 requests (`H2.Reqd.t`) and sends responses via Lwt streams or direct callbacks. Concrete use cases include implementing gRPC service handlers that process incoming requests and send back results or stream data incrementally over persistent connections.",
      "description_length": 489,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_lwt.Client.Rpc",
      "library": "grpc-lwt",
      "description": "This module implements gRPC client-side RPC handlers for different streaming patterns. It works with Lwt promises, streams, and string-based serialization to manage bidirectional, client-streaming, server-streaming, and unary RPC interactions. Concrete use cases include sending a sequence of messages and receiving incremental responses, or handling request-response pairs with optional payloads over asynchronous channels.",
      "description_length": 424,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_lwt.Client",
      "library": "grpc-lwt",
      "description": "This module implements gRPC client operations over HTTP/2 using Lwt for asynchronous execution, supporting unary, client-streaming, server-streaming, and bidirectional RPC patterns. It provides the `call` function to invoke remote procedures with custom request and response handlers, working directly with H2 for low-level stream management. The child module extends this functionality by implementing client-side RPC handlers that manage streaming interactions using Lwt promises and streams. Together, they enable concrete use cases such as sending a sequence of messages and receiving incremental responses, or handling request-response pairs with optional payloads and custom headers or trailers.",
      "description_length": 701,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_lwt.Server",
      "library": "grpc-lwt",
      "description": "This module builds an asynchronous gRPC server using Lwt and H2.Reqd.t to manage HTTP/2 connections, supporting creation and routing of named services to handle remote procedure calls. It provides data types such as service instances and RPC descriptors, and operations to register handlers, dispatch requests, and manage streaming communication. The Service submodule organizes service definitions and routing logic, while Rpc handles the four gRPC streaming patterns\u2014unary, client, server, and bidirectional\u2014using Lwt streams for asynchronous data exchange. Example usage includes defining a service with streaming endpoints and registering handlers that process incoming HTTP/2 requests and return responses or data streams.",
      "description_length": 727,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_lwt",
      "library": "grpc-lwt",
      "description": "This module implements gRPC over HTTP/2 using Lwt for asynchronous communication, supporting all four streaming patterns\u2014unary, client-streaming, server-streaming, and bidirectional. It provides client and server components to define RPCs, manage connections, and exchange data using streams and promises, with direct handling of headers, trailers, and payloads. You can define services with streaming endpoints, send sequences of messages, and handle bidirectional communication between clients and servers over HTTP/2. Example use cases include real-time data feeds, request-response interactions with custom metadata, and duplex streaming for interactive APIs.",
      "description_length": 663,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 727,
    "min_description_length": 349,
    "avg_description_length": 558.8333333333334,
    "embedding_file_size_mb": 0.02222728729248047
  }
}