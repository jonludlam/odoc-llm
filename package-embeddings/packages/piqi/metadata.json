{
  "package": "piqi",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:03:50.156971",
  "modules": [
    {
      "module_path": "Piqirun.IBuf",
      "library": "piqirun.pb",
      "description": "This module handles input buffering by providing direct access to bytes from either a string slice or an input channel. It supports operations like reading the next byte, extracting a block of bytes, checking the current position, and converting the buffer to a string. Concrete use cases include parsing binary data from files or in-memory buffers, where precise byte-level control is required.",
      "description_length": 395,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Piqirun.OBuf",
      "library": "piqirun.pb",
      "description": "This module provides functions to construct and manipulate output buffers composed of strings, characters, and nested buffer lists. It supports operations to calculate buffer size, append buffer contents to a standard buffer or output channel, and flatten nested buffer structures. Concrete use cases include efficient serialization of structured data to strings or output channels, and building complex byte sequences from individual components.",
      "description_length": 446,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Piqirun.List",
      "library": "piqirun.pb",
      "description": "This module provides a comprehensive toolkit for list manipulation, encompassing element access, transformation via mapping and folding, filtering, sorting, and association list operations, along with utilities for sequence-to-list conversion. It emphasizes efficiency through tail-recursive implementations and supports precise control over traversal, aggregation, and structural transformations. Use cases include data processing pipelines, key-value pair handling, and algorithms requiring efficient list concatenation, reversal",
      "description_length": 531,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Piqirun",
      "library": "piqirun.pb",
      "description": "The module provides low-level binary data manipulation for Protocol Buffers and PIQ formats, focusing on parsing and serializing numeric types (varints, fixed integers, floats, booleans), strings, and structured data (records, arrays, packed fields) using efficient buffer operations. It works with input/output buffers (`IBuf`, `OBuf`) and parsed value representations (`t`) to handle tasks like zigzag decoding, field header extraction, size-prefixed block parsing, and packed array serialization. Specific use cases include deserializing protobuf messages from binary streams, encoding structured data for network transmission, and managing memory-efficient buffer manipulations for both in-channel and in-memory data sources.",
      "description_length": 729,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Piqirun_ext",
      "library": "piqirun.ext",
      "description": "This module handles data format conversions between JSON, Protocol Buffers, Piq, and XML, using specified input and output formats. It supports structured data transformation with customizable options like pretty printing and field omission. Use it to serialize or deserialize data while controlling parsing and formatting behavior for specific types.",
      "description_length": 351,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 729,
    "min_description_length": 351,
    "avg_description_length": 490.4,
    "embedding_file_size_mb": 0.07289409637451172
  }
}