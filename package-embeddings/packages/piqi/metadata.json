{
  "package": "piqi",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:30:12.355337",
  "modules": [
    {
      "module_path": "Piqirun.List",
      "description": "This module offers list manipulation through operations like length calculation, element access, reversal, concatenation, and transformation via mapping, filtering, and folding, with optimizations for tail recursion. It handles single or paired lists, enabling parallel processing, predicate checks, and structured data operations such as key-value lookups and sorting. Use cases include data transformation pipelines, comparative analysis of list elements, and efficient sequence-to-list conversions.",
      "description_length": 501,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Piqirun.IBuf",
      "description": "Provides operations to create and manipulate buffered input data, including reading from channels, converting to strings, and accessing position and size. Works with byte-level data and blocks, supporting direct byte retrieval and block slicing. Used for efficient parsing of binary data streams and error reporting during input processing.",
      "description_length": 340,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Piqirun.OBuf",
      "description": "Provides operations to construct and manipulate buffer-like structures from strings, characters, and lists, and to convert them to strings, buffers, or output channels. Works with a custom type `t` representing buffered data and list of `t` instances. Used to efficiently build and output concatenated data streams, such as generating HTTP responses or logging formatted messages.",
      "description_length": 380,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "piqi",
      "description": "Converts OCaml values to and from JSON, XML, and Protocol Buffers using a unified API. Operates on OCaml data types such as records, variants, lists, and tuples. Enables seamless data exchange between OCaml applications and external systems requiring structured data formats.",
      "description_length": 275,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Piqirun_ext",
      "description": "Initializes a PIQI configuration from a string, retrieves PIQI type information, constructs conversion options with specific formatting and parsing controls, and performs format conversions between input and output representations. Works with PIQI type definitions, input and output format enumerations, and configuration options. Used to convert data between PIQ and JSON formats with custom parsing and serialization settings.",
      "description_length": 428,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Piqirun",
      "description": "manages data processing through list operations, binary input handling, and buffer construction, enabling efficient data transformation, parsing, and output generation. It includes list operations like mapping, filtering, and sorting, binary input methods for byte-level access, and buffer types for assembling and outputting structured data. Users can build HTTP responses, parse binary streams, and perform complex list transformations. Operations include list reversal, byte slicing, and buffer concatenation.",
      "description_length": 512,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 512,
    "min_description_length": 275,
    "avg_description_length": 406.0,
    "embedding_file_size_mb": 0.022225379943847656
  }
}