{
  "package": "pds-reachability",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 34,
  "creation_timestamp": "2025-08-18T18:35:05.772934",
  "modules": [
    {
      "module_path": "Pds_reachability_types_stack.Null_dynamic_pop_hanlder.Stack_action.T",
      "library": "pds-reachability",
      "description": "This module defines a variant type for representing stack actions in a pushdown system, including push, pop, no-op, and dynamic pop operations. It works with stack elements and targeted dynamic pop actions, enabling precise modeling of stack transitions. Concrete use cases include specifying transition rules in a PDS where dynamic pops are conditionally or non-deterministically applied based on the stack state.",
      "description_length": 414,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types_stack.Null_dynamic_pop_hanlder.Terminus.T",
      "library": "pds-reachability",
      "description": "This module defines a variant type `t` that represents termini in a pushdown system, distinguishing between static and dynamic cases. It includes constructors for static termini based on a state and dynamic termini based on an untargeted dynamic pop action. This type is used to model the possible end states of stack operations in a PDS that does not require dynamic pop handling.",
      "description_length": 381,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types.Make.Node",
      "library": "pds-reachability",
      "description": "This module defines a node type used in reachability analysis, including equality, comparison, and serialization operations. It provides concrete functions for comparing nodes, converting them to strings, and serializing to Yojson. These capabilities support tracking and analyzing control-flow nodes in program analysis tasks.",
      "description_length": 327,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pds_reachability_types_stack.Null_dynamic_pop_hanlder.Stack_action",
      "library": "pds-reachability",
      "description": "This module defines a variant type for representing stack actions in a pushdown system, including push, pop, no-op, and dynamic pop operations. It works with stack elements and targeted dynamic pop actions, enabling precise modeling of stack transitions. Concrete use cases include specifying transition rules in a PDS where dynamic pops are conditionally or non-deterministically applied based on the stack state.",
      "description_length": 414,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types_stack.Terminus_constructor.T",
      "library": "pds-reachability",
      "description": "This module defines a variant type `t` representing decorated stack actions, specifically distinguishing between static and dynamic termini. It works with data types such as `state` and `untargeted_dynamic_pop_action`, which are used to model different kinds of stack operations in a pushdown system. Concrete use cases include tracking the outcome of stack manipulations during reachability analysis, where static termini represent fixed states and dynamic termini correspond to unresolved pop actions.",
      "description_length": 503,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types_stack.Null_dynamic_pop_hanlder.Targeted_dynamic_pop_action",
      "library": "pds-reachability",
      "description": "This module defines a concrete type `t` representing targeted dynamic pop actions within a pushdown system. It includes standard comparison, equality, and serialization functions (`equal`, `compare`, `pp`, `show`, `to_yojson`) for this type. These operations support precise handling and inspection of dynamic pop actions in contexts where such actions are selectively applied.",
      "description_length": 377,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pds_reachability_types_stack.Null_dynamic_pop_hanlder.Terminus",
      "library": "pds-reachability",
      "description": "This module defines a variant type `t` representing termini in a pushdown system, with constructors for static termini based on a state and dynamic termini based on untargeted dynamic pop actions. It provides comparison, equality checking, and pretty-printing functions for these termini. This type models the end states of stack operations in a PDS that does not require dynamic pop handling.",
      "description_length": 393,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_analysis.Make.Class",
      "library": "pds-reachability",
      "description": "This module defines operations for comparing, printing, and serializing state classes in a pushdown system reachability analysis. It works with the abstract type `t` representing state classes, supporting equality checks, ordering, and conversion to string or JSON formats. Concrete use cases include tracking and analyzing distinct state classes during PDS traversal, enabling debugging and result inspection through structured output.",
      "description_length": 436,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_analysis.Make_with_classifier.Edge",
      "library": "pds-reachability",
      "description": "This module defines a decorated edge type used in reachability analysis, including equality, comparison, and serialization operations. It works with edge structures that carry additional data for analysis tracking. Concrete use cases include representing transitions between states in a pushdown system with attached metadata for debugging or result interpretation.",
      "description_length": 365,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_analysis.Make.Edge",
      "library": "pds-reachability",
      "description": "This module defines a concrete edge type used in reachability analysis, equipped with equality, comparison, and serialization operations. It supports structured inspection and transformation of edge data through standard type classes. Useful for representing and manipulating control-flow or state-transition edges in program analysis contexts.",
      "description_length": 344,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types_stack.Stack_action_constructor.T",
      "library": "pds-reachability",
      "description": "This module defines a polymorphic variant type representing stack actions in a pushdown system, including push, pop, no-op, and a specialized dynamic pop operation. It works with stack elements and targeted dynamic pop actions, enabling precise modeling of stack transitions. Concrete use cases include representing and manipulating individual stack operations during reachability analysis in a PDS.",
      "description_length": 399,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pds_reachability_analysis.Make_with_classifier.Node",
      "library": "pds-reachability",
      "description": "This module defines a node type with equality, comparison, and serialization operations. It supports structured node-based data representations with concrete instances used in reachability analysis. Typical uses include node identity checks, ordered collections of nodes, and generating string or JSON representations for debugging and external output.",
      "description_length": 352,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_analysis.Make.Node",
      "library": "pds-reachability",
      "description": "This module defines a node type with equality, comparison, and serialization operations. It supports structured node representations for use in reachability analysis, including pretty-printing and JSON conversion. Used to uniquely identify and display nodes during PDS state exploration.",
      "description_length": 287,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types_stack.Null_dynamic_pop_hanlder.Untargeted_dynamic_pop_action",
      "library": "pds-reachability",
      "description": "This module defines a type `t` representing untargeted dynamic pop actions in a pushdown system, along with standard operations for equality checking, comparison, pretty-printing, string conversion, and JSON serialization. It works directly with the `Untargeted_dynamic_pop_action.t` type, providing concrete functionality for handling and inspecting untargeted dynamic pop actions. These capabilities support tasks such as logging, debugging, and serializing dynamic pop actions when no targeted handling is required.",
      "description_length": 518,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types.Make.Edge",
      "library": "pds-reachability",
      "description": "This module defines the concrete type `t` for edges used in reachability analysis, along with standard comparison, equality, and serialization functions. It supports operations like `equal`, `compare`, pretty-printing via `pp`, string conversion with `show`, and JSON serialization through `to_yojson`. These functions enable edge manipulation, logging, and integration with external data formats in reachability computations.",
      "description_length": 426,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_work_collection_templates.Work_stack",
      "library": "pds-reachability",
      "description": "This module implements a work collection abstraction for managing a collection of work units of type `W.t`. It supports operations to add and remove elements, check emptiness and size, compare and pretty-print collections, and serialize them to JSON. Concrete use cases include tracking and processing units of work in a traversal or search algorithm, where elements are added and removed in a structured order.",
      "description_length": 411,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types.Make",
      "library": "pds-reachability",
      "description": "This module implements data structures and operations for modeling control-flow graphs in program analysis, specifically handling nodes and edges with associated stack actions. It defines intermediate destinations for flow tracking, edges with action metadata, and supports concrete operations like node comparison, edge serialization, and conversion to string for logging and analysis. Use cases include constructing and analyzing pushdown system transitions during static analysis of recursive programs.",
      "description_length": 505,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_analysis.Make_with_classifier",
      "library": "pds-reachability",
      "description": "This module enables the construction and extension of pushdown system reachability analyses by adding edges, dynamic pop actions, and start states, with classification-based filtering to restrict transition generation. It operates on analyses tracking reachability between states via stack actions, offering closure checks, reachable state enumeration, and data export in pretty-printed, JSON, and delta JSON formats for tasks like verifying procedural code properties or exploring stack-sensitive program behaviors.",
      "description_length": 516,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pds_reachability_work.Make",
      "library": "pds-reachability",
      "description": "This module defines a variant type `t` representing operations for expanding nodes, introducing edges, or handling untargeted dynamic population actions in a graph or state space. It provides comparison, equality, and pretty-printing functions for these operations, supporting tasks like traversal or transformation of graph structures. Concrete use cases include modeling incremental changes in reachability analysis or dynamic graph manipulation.",
      "description_length": 448,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pds_reachability_utils.Unit",
      "library": "pds-reachability",
      "description": "This module defines standard operations for the unit type, including equality checking, comparison, pretty-printing, string conversion, and JSON serialization. It supports use cases requiring canonical representations of unit values in data processing pipelines, testing frameworks, and serialization systems.",
      "description_length": 309,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types_stack.Null_dynamic_pop_hanlder",
      "library": "pds-reachability",
      "description": "This module provides dummy implementations for handling dynamic pop operations in a pushdown system, specifically for cases where such operations are not required. It defines types and functions for targeted and untargeted dynamic pop actions, stack actions, and termini, along with resolution functions that generate action sequences or termini pairs. Concrete use cases include modeling stack transitions and end states in a PDS where dynamic pops are conditionally applied or entirely omitted.",
      "description_length": 496,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types_stack.Stack_action_constructor",
      "library": "pds-reachability",
      "description": "This module creates a polymorphic variant type representing stack actions in a pushdown system, including push, pop, no-op, and dynamic pop operations. It works with stack elements and targeted dynamic pop actions to model precise stack transitions. Concrete use cases include representing and manipulating individual stack operations during reachability analysis in a PDS.",
      "description_length": 373,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pds_reachability_types_stack.Terminus_constructor",
      "library": "pds-reachability",
      "description": "This module defines a variant type `t` that represents decorated stack actions, distinguishing between static and dynamic termini. It uses `state` and `untargeted_dynamic_pop_action` types to model stack operations in a pushdown system, specifically for tracking stack manipulation outcomes during reachability analysis. It supports operations like equality checking, comparison, pretty-printing, string conversion, and JSON serialization for these decorated actions.",
      "description_length": 467,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_structure.Make",
      "library": "pds-reachability",
      "description": "This module provides operations for manipulating and querying a PDS reachability graph, including adding edges, checking transitions, and performing lookups by source or target nodes. It operates on a structured representation of states and transitions, utilizing nodes, edges, and node sets with support for serialization and difference computation. These capabilities are designed for reachability analysis tasks such as exploring state spaces and verifying properties in pushdown systems.",
      "description_length": 491,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability",
      "library": "pds-reachability",
      "description": "This module implements algorithms to determine whether a given state in a push-down system is reachable, specifically for systems that accept by empty stack. It operates on configurations represented as states and stack contents, providing functions to explore transitions and check reachability under stack-empty acceptance conditions. It is used in formal verification tasks, such as model checking recursive programs or analyzing call-stack behavior in procedural languages.",
      "description_length": 477,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types_stack",
      "library": "pds-reachability",
      "description": "This module defines data types and interfaces for managing stack operations in a pushdown system, including actions, termini, and dynamic pop handlers. It supports modeling stack transitions and end states with optional dynamic pop behavior through abstract types and resolution functions. Concrete use cases include formal verification of stack-based computations and simulating PDS executions where dynamic pops are conditionally applied or omitted.",
      "description_length": 451,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_analysis",
      "library": "pds-reachability",
      "description": "This module implements reachability analysis for pushdown systems, providing functions to compute reachable states and transitions. It works with control-flow graphs and pushdown automata representations, supporting precise interprocedural analysis of recursive programs. Concrete use cases include static analysis of program paths and detection of potential execution flows in structured code.",
      "description_length": 394,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pds_reachability_utils",
      "library": "pds-reachability",
      "description": "This module provides standard operations for the unit type, including equality, comparison, pretty-printing, string conversion, and JSON serialization. It supports use cases requiring canonical representations of unit values in data processing pipelines, testing frameworks, and serialization systems.",
      "description_length": 301,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_work",
      "library": "pds-reachability",
      "description": "This module defines a work type for managing reachability analysis tasks in program analysis. It supports operations to add, retrieve, and track analysis units such as functions or code blocks. Concrete use cases include coordinating iterative dataflow analysis and ensuring all reachable code paths are processed.",
      "description_length": 314,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_work_collection_templates",
      "library": "pds-reachability",
      "description": "Implements a work collection abstraction for managing units of type `W.t` with operations to add, remove, check emptiness and size, compare, pretty-print, and serialize to JSON. Designed for tracking and processing work units in traversal or search algorithms where structured order is required.",
      "description_length": 295,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_work_collection",
      "library": "pds-reachability",
      "description": "This module defines a work collection structure for managing and processing units of work in reachability analysis. It supports operations to add, retrieve, and track work items, typically represented as nodes or tasks in a graph traversal context. Concrete use cases include coordinating exploration of program paths during static analysis or managing job queues in distributed systems.",
      "description_length": 387,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_types",
      "library": "pds-reachability",
      "description": "This module defines core data types and associated operations used in pushdown system (PDS) reachability analysis. It includes representations for states, transitions, and stacks, along with functions for manipulating and querying these structures. Concrete use cases include modeling control-flow graphs with stack-based memory and computing reachable configurations in program analysis.",
      "description_length": 388,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_basis",
      "library": "pds-reachability",
      "description": "This module implements algorithms for computing reachability bases and classifying states in program analysis. It provides operations to determine minimal sets of states that can reach or be reached from others, using fixed-point computations. The core data structures include sets and maps for states, transitions, and basis elements, tailored for interprocedural analysis and slicing. Use cases include computing control-flow reachability, program slicing, and static analysis optimizations.",
      "description_length": 493,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pds_reachability_structure",
      "library": "pds-reachability",
      "description": "This module implements a specialized data structure for tracking reachability information in a pushdown system (PDS). It provides operations to add and query reachable configurations, supporting efficient storage and retrieval of control states and stack contents. Concrete use cases include model checking and static analysis tools that require precise representation of program paths and call-stack behavior.",
      "description_length": 410,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 35,
    "meaningful_modules": 34,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9714285714285714
  },
  "statistics": {
    "max_description_length": 518,
    "min_description_length": 287,
    "avg_description_length": 407.70588235294116,
    "embedding_file_size_mb": 0.4932117462158203
  }
}