{
  "package": "OCADml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 24,
  "creation_timestamp": "2025-06-18T16:37:56.556588",
  "modules": [
    {
      "module_path": "OCADml.Path2.Round",
      "description": "Creates chamfered, circular, or bezier-based corner specifications using distinct types for cut, joint, and radius parameters. Operates on lists of 2D points paired with optional corner definitions or amplitude values. Applies consistent or variable roundover styles to path segments, supporting open or closed shapes with customizable curvature.",
      "description_length": 346,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Path3.Round",
      "description": "Creates chamfered, circular, or bezier-based corner specifications for path roundovers. Operates on 3D points and paired point-specification lists, supporting variable amplitude and curvature settings. Applies consistent or custom corner styles across paths, with control over open or closed shapes.",
      "description_length": 299,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Mesh.Cap",
      "description": "Creates offset profiles for 3D extrusion caps using chamfer, circular, teardrop, and bezier shapes. Operates on offset lists, poly_specs, and caps types to define how 2D paths are extended into 3D. Used to generate sealed or open ends for sweep-based 3D models with customizable rounding and geometry.",
      "description_length": 301,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Mesh.Prism",
      "description": "Constructs and manipulates rounded prism configurations using joint distances and curvature parameters. Operates on a `spec` type that includes joint positions and curvature settings for top, bottom, and side surfaces. Flips joint polarity to adjust inward or outward rounding in response to path winding direction.",
      "description_length": 315,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.V2",
      "description": "The module provides arithmetic, geometric, and transformation operations on 2D vectors, including normalization, dot/cross products, rotations, and spatial relationships, working with vector types and composite structures like paths and polygons. It enables precise calculations such as distance, interpolation, and line intersections, alongside conversions between coordinate systems and 3D extensions, ideal for applications in computer graphics or geometric modeling. Specific use cases include manipulating points in 2D space, constructing complex shapes, and handling spatial transformations with epsilon tolerance for accuracy.",
      "description_length": 633,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OCADml.V3",
      "description": "This module offers a comprehensive set of operations for 3D vector manipulation, including arithmetic, geometric computations (dot product, cross product, normalization), transformations (rotation, scaling, projection), and spatial relationships (distance, angle, midpoint). It works with 3D vector types and higher-level structures like paths, polygons, and meshes, enabling precise control over spatial data. Applications include 3D graphics rendering, physics simulations, and geometric modeling, where accurate vector algebra and coordinate transformations are critical.",
      "description_length": 574,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OCADml.Affine2",
      "description": "This module handles arithmetic operations, transposition, and element-wise manipulations on 3x3 affine matrices, alongside constructing transformations like rotation, scaling, and translation using 2D vectors and floating-point values. It enables applying these matrices to 2D vectors, skewing, and converting transformations to 3D or string representations, supporting tasks such as geometric modeling and computer graphics. Key use cases include 2D animation, spatial transformations, and matrix-based simulations requiring precise control over affine operations.",
      "description_length": 565,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Affine3",
      "description": "The module provides matrix operations for 4x4 affine transformations, including multiplication, transposition, and element extraction, working with 3D vectors (V3.t), quaternions, and float arrays. It supports constructing transformation matrices for tasks like rotation, scaling, reflection, and alignment, enabling precise manipulation of 3D shapes and vectors. Specific use cases include axis-aligned and arbitrary-axis transformations, as well as conversions to 2D matrices or string representations.",
      "description_length": 504,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Quaternion",
      "description": "This module provides quaternion creation, arithmetic operations (addition, subtraction, multiplication), normalization, conjugation, and conversions between Euler angles, affine transformations, and quaternions, alongside 3D vector rotation and interpolation. It works with quaternions (t) and 3D vectors (V3.t) to enable smooth rotational transformations and composable 3D transformations. Specific use cases include interpolating between orientations for animation, converting between rotational representations, and applying rotations to 3D objects in graphics or simulation contexts.",
      "description_length": 587,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Plane",
      "description": "The module provides operations for converting between 2D and 3D coordinates, applying affine transformations, and calculating geometric properties like distances and angles on normalized planes. It works with 3D points, vectors, and a plane coordinate type `t` that incorporates axis-specific transformations such as `yz`. Use cases include spatial modeling, projection tasks, and coordinate system alignment in applications requiring precise geometric computations.",
      "description_length": 466,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Path2",
      "description": "Generates and modifies 2D paths with support for arcs, shapes, and rounded corners using structured types for corner definitions, radii, and curvature. Processes lists of 2D points with optional parameters to apply consistent or variable roundovers, chamfers, or Bezier transitions. Enables offsetting paths, adjusting joint styles, and measuring geometric properties. Examples include creating a closed polygon with rounded corners, offsetting a line with variable radii, or generating a path with mixed Bezier and circular segments.",
      "description_length": 534,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Bezier2",
      "description": "The module provides operations for generating, analyzing, and transforming 2D B\u00e9zier curves and surfaces, working with control points (V2.t lists/arrays) and parameterized curve functions. It includes geometric transformations, length calculations, path creation, and intersection detection, with specialized handling for continuity and subdivision in piecewise paths. Use cases include animation, CAD, and simulations requiring precise curve manipulation and surface modeling.",
      "description_length": 477,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OCADml.CubicSpline",
      "description": "Calculates and stores cubic spline coefficients for 2D paths, enabling interpolation and extrapolation of x-values to corresponding y-values. It operates on lists of 2D control points and coefficient structures, providing precise access to range limits and polynomial terms. Use it to generate smooth paths from discrete points or predict values outside the original data range.",
      "description_length": 378,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OCADml.Poly2",
      "description": "This module provides geometric operations for 2D polygons, including creation, transformation, and validation, working with `Path2.t` structures and point lists to construct shapes like circles, squares, and rings. It enables manipulations such as offsetting, rotating, and calculating properties like area and centroids, while supporting complex structures with outer paths and inner holes. Use cases include CAD design, GIS processing, and graphics applications requiring precise polygon handling.",
      "description_length": 499,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Path3",
      "description": "Generates and manipulates 3D paths with support for complex corner definitions, including chamfers, circles, and B\u00e9zier curves, using 3D points and paired specifications. Offers control over curvature, amplitude, and shape closure, enabling precise path styling. Converts paths into sweeping transformations and calculates geometric properties. Examples include creating rounded corners on a closed polygon or defining a smooth B\u00e9zier transition between path segments.",
      "description_length": 468,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Bezier3",
      "description": "The module generates and manipulates 3D B\u00e9zier curves and surfaces using parametric functions and lists/arrays of 3D vectors (V3.t), enabling operations like path interpolation, derivative calculation, and geometric transformations. It supports affine transformations such as rotation and scaling applied to parametric curves, facilitating applications in modeling complex shapes or animations. Specific use cases include creating smooth splines from discrete paths and modifying curve orientations for design or simulation purposes.",
      "description_length": 533,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OCADml.Poly3",
      "description": "This module handles geometric operations on 3D planar polygons, including creating shapes like circles and squares, adding holes, and performing transformations such as mirroring, scaling, and rotation. It works with structured data comprising outer paths and inner hole paths, enabling tasks like bounding box calculations, centroid determination, and area measurements. Use cases include CAD design, GIS applications, and 3D modeling where precise planar geometry manipulation and validation are required.",
      "description_length": 507,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Mesh",
      "description": "Generates and modifies triangular meshes through profile extrusion and rounded prism construction. Supports operations on offset lists, poly_specs, and spec types to define 3D geometry with customizable shapes and curvature. Enables creation of sealed extrusion caps with chamfered or rounded edges, and adjusts joint rounding for complex prism forms. Examples include generating a teardrop-ended cylinder or a prism with inward-curving sides.",
      "description_length": 443,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Math",
      "description": "Provides operations for manipulating floats, including clamping, linear interpolation, quantization, and approximate equality checks. Handles 2D matrix operations such as multiplication, transposition, and dimension retrieval. Used for numerical computations in graphics, simulations, and polynomial root finding.",
      "description_length": 313,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.Easing",
      "description": "Computes easing functions using cubic B\u00e9zier curves defined by two handle points, mapping an input value between 0 and 1 to a corresponding output value. It supports predefined easing profiles like linear, ease, ease_in, ease_out, and ease_in_out, each with specific handle configurations. The module works with 2D vector types to represent control points and returns interpolated values for animation or timing calculations.",
      "description_length": 425,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OCADml.BallTree2",
      "description": "Provides indexed access to and retrieval of points used in a 2d vector ball tree, along with methods to construct the tree from lists or arrays and perform radius-based nearest neighbor searches. Operates on 2d vector data stored in lists or arrays, returning indices or point values within a specified distance. Useful for efficiently querying large static datasets of 2d points, such as in spatial indexing or geometric proximity checks.",
      "description_length": 439,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml.BallTree3",
      "description": "Provides indexed access to 3D vectors, returns point lists or arrays, and constructs ball trees from lists or arrays of 3D vectors. Supports efficient nearest neighbor searches within a specified radius, returning either indices or actual points. Useful for applications requiring repeated spatial queries on static 3D datasets, such as collision detection or spatial clustering.",
      "description_length": 379,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OCADml",
      "description": "Combines 2D and 3D vector arithmetic, geometric operations, and transformation capabilities with support for matrices, quaternions, and complex shapes. Provides types for vectors (V2.t, V3.t), matrices (3x3, 4x4), quaternions (t), and structured path/polygon data, enabling operations like rotation, scaling, interpolation, and intersection detection. Users can construct and manipulate paths, B\u00e9zier curves, splines, and meshes, perform coordinate conversions, and execute spatial queries using ball trees. Examples include rotating 3D objects, generating smooth curves, offsetting polygons, and interpolating between orientations.",
      "description_length": 632,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PolyText",
      "description": "Provides functions to generate 2D polygonal path representations of text using system fonts, supporting styling options like size, slant, and weight. Operates on string inputs to produce lists of Poly2.t structures, which encode vector paths. Useful for creating precise, scalable text geometry for rendering or CAD applications.",
      "description_length": 329,
      "index": 23,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 26,
    "meaningful_modules": 24,
    "filtered_empty_modules": 2,
    "retention_rate": 0.9230769230769231
  },
  "statistics": {
    "max_description_length": 633,
    "min_description_length": 299,
    "avg_description_length": 456.0833333333333,
    "embedding_file_size_mb": 0.08759880065917969
  }
}