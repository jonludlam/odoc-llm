{
  "package": "ocf_ppx",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 3,
  "creation_timestamp": "2025-08-14T22:52:44.864063",
  "modules": [
    {
      "module_path": "Ocf_ppx.Ppx_ocf.SMap",
      "library": "ocf_ppx",
      "description": "This module offers operations for manipulating string-keyed maps, including insertion, deletion, transformation, and querying, with support for key-value-aware functions like merging and filtering. It works with polymorphic maps where keys are strings and values can be any type, enabling conversions to and from lists and lazy sequences. Typical applications include managing hierarchical configurations, processing key-value data with functional purity, and building data pipelines that leverage lazy evaluation through sequence conversions.",
      "description_length": 543,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ocf_ppx.Ppx_ocf",
      "library": "ocf_ppx",
      "description": "This module provides utilities for constructing and transforming OCaml AST nodes during PPX processing, with operations to manipulate attributes, generate expressions (e.g., strings, lists), and process record fields using custom wrappers or defaults. It works with OCaml abstract syntax trees, type declarations, and string-keyed maps (via `SMap`) to enable code generation tasks like deriving value bindings from types or folding over structure items. Specific use cases include synthesizing default values for fields, extracting metadata from attributes, and rewriting AST fragments to embed generated code.",
      "description_length": 610,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocf_ppx",
      "library": "ocf_ppx",
      "description": "This module manipulates OCaml AST nodes during PPX processing, offering operations to transform attributes, generate expressions (like strings and lists), and process record fields with custom wrappers or defaults. It works directly with abstract syntax trees, type declarations, and string-keyed maps (`SMap`) to support code generation tasks. Concrete use cases include synthesizing default values for record fields, extracting metadata from attributes, and rewriting AST fragments to embed generated code.",
      "description_length": 508,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 3,
    "filtered_empty_modules": 1,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 610,
    "min_description_length": 508,
    "avg_description_length": 553.6666666666666,
    "embedding_file_size_mb": 0.043915748596191406
  }
}