{
  "package": "search",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-07-15T23:08:13.577686",
  "modules": [
    {
      "module_path": "Search.Tfidf.Generic.Witness.Tid",
      "library": "search",
      "description": "This module defines a witness type `Tid` for identifying documents within a Tfidf search index. It provides operations to create, compare, and serialize document identifiers. Concrete use cases include tracking individual documents during index construction and enabling precise result retrieval in search queries.",
      "description_length": 314,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Search.Tfidf.Generic.Witness",
      "library": "search",
      "description": "This module computes TF-IDF scores for documents extended with witness tags, enabling relevance ranking in heterogeneous document collections. It supports document indexing and search through weighted term matching and score normalization. The `Tid` submodule manages document identifiers, allowing precise tracking and retrieval of indexed documents. Example uses include building ranked search engines over tagged document sets and analyzing term significance across collections.",
      "description_length": 481,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Search.Private.Witness.Tid",
      "library": "search",
      "description": "This module defines a witness type `Tid` for use in type-safe searches, ensuring correct handling of type representations during search operations. It works with the `t` type and the extensible `witness` type to enable precise type identification. Concrete use cases include implementing search algorithms that require strict type checking and avoiding type mismatches in complex data traversals.",
      "description_length": 396,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Search.Tfidf.Generic.Uid",
      "library": "search",
      "description": "This module manages unique identifiers for documents in a Tfidf search index, ensuring type-safe association between document values and their unique IDs. It provides operations to create and manipulate these IDs, including equality and comparison functions for use in indexing and retrieval. Concrete use cases include tracking document identities across different stages of search processing and maintaining consistent references in a generic Tfidf index.",
      "description_length": 457,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Search.Private.Witness",
      "library": "search",
      "description": "This module enables type-safe dynamic type handling through witnesses and equality evidence, supporting creation and comparison of type identifiers. It introduces the `t` type for extensible type representations and operations to generate fresh identifiers or derive typed equality proofs. The `Tid` submodule provides a concrete witness type for precise type identification, particularly in search algorithms requiring strict type checking. Together, they facilitate safe runtime type inspection and generic programming where dynamic type equivalence must be verified and preserved.",
      "description_length": 583,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Search.Tfidf.Mono",
      "library": "search",
      "description": "This module builds and maintains a TF-IDF search index for a single document type, supporting document indexing, multiple field-based indexing, and keyword search. It works with unique identifiers and documents parameterized over `Uid` and `Doc`, and exposes operations to add documents, define indexing strategies, and perform searches. Concrete use cases include full-text search over articles, product descriptions, or logs using customizable tokenization and sanitization.",
      "description_length": 476,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Search.Uids.String",
      "library": "search",
      "description": "Implements comparison and string conversion for string-based unique identifiers. Uses standard string comparison for ordering and returns the string itself as its string representation. Useful in contexts requiring ordered string keys, such as sorted collections or identifier handling in search systems.",
      "description_length": 304,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Search.Tfidf.Generic",
      "library": "search",
      "description": "This module builds a Tfidf search index over arbitrary document types, supporting document indexing, dynamic field addition, and full-text search with relevance scoring. It uses unique document identifiers and heterogeneous search bindings to handle polymorphic collections like user profiles, articles, and product listings. The index computes TF-IDF scores using weighted term matching and score normalization, enabling ranked search results over tagged documents. Operations include adding documents, creating field-specific indexes, and querying with tokenized terms, with identifiers managed through a dedicated submodule for type-safe document tracking.",
      "description_length": 659,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Search.Uids.Int",
      "library": "search",
      "description": "This module implements a total ordering function and string conversion for integer keys. It provides `compare` for sorting or comparing integers and `to_string` for converting integers to their string representations. These functions are used in contexts requiring ordered integer identifiers, such as indexing or logging.",
      "description_length": 322,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Search.Tfidf",
      "library": "search",
      "description": "This module builds and maintains a TF-IDF search index supporting multiple document types, each with customizable field-based indexing and dynamic schema extension. It uses unique identifiers and heterogeneous bindings to manage polymorphic collections like articles, products, and logs, enabling full-text search with relevance scoring. Main operations include adding documents, defining indexing strategies per field, and performing weighted term searches with score normalization. Example uses include searching tagged user profiles by bio or location, or querying product listings using sanitized keyword inputs.",
      "description_length": 616,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Search.Uid",
      "library": "search",
      "description": "This module defines a unique identifier type `t` with a total ordering function `compare` for sorting and equality checks, and a `to_string` function for string representation. It is used to manage identifiers in data structures like sets or maps where uniqueness and ordering are required. Concrete use cases include tracking unique entities in a database or managing ordered keys in a search index.",
      "description_length": 400,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Search.Private",
      "library": "search",
      "description": "This module enables type-safe dynamic type handling through witnesses and equality evidence, supporting creation and comparison of type identifiers. It introduces the `t` type for extensible type representations and operations to generate fresh identifiers or derive typed equality proofs. The `Tid` submodule provides a concrete witness type for precise type identification, particularly in search algorithms requiring strict type checking. Together, they facilitate safe runtime type inspection and generic programming where dynamic type equivalence must be verified and preserved.",
      "description_length": 583,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Search.Uids",
      "library": "search",
      "description": "This module provides ordered unique identifiers with consistent comparison and string conversion operations for both string and integer keys. It supports lexicographic ordering for strings and numeric ordering for integers, enabling their use in sorted data structures or systems requiring stable key comparison. Key operations include `compare` for ordering and `to_string` for readable representation, allowing identifiers to be used in indexing, logging, or search systems. For example, it can sort a list of string identifiers alphabetically or compare integer keys for insertion into a binary tree.",
      "description_length": 603,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Search",
      "library": "search",
      "description": "This module implements a search indexing system based on TF-IDF weighting, enabling document ranking by relevance and similarity analysis. It supports polymorphic document collections with customizable indexing strategies per field, using unique identifiers for document management and ordered keys for stable comparisons. Main operations include document indexing, weighted term search, and score normalization, with concrete use cases like searching user profiles by bio or querying product listings. Type-safe dynamic handling ensures precise type identification during search operations, while identifier modules provide ordering and string representation for efficient indexing and retrieval.",
      "description_length": 697,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 697,
    "min_description_length": 304,
    "avg_description_length": 492.2142857142857,
    "embedding_file_size_mb": 0.047725677490234375
  }
}