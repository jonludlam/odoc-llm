{
  "package": "rpmfile-eio",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:37.490074",
  "modules": [
    {
      "module_path": "Rpmfile_eio.P.R",
      "library": "rpmfile-eio",
      "description": "This module offers byte-level parsing and buffer manipulation operations for processing structured input streams, including strings, buffers, and Eio flows. It provides combinators for composing parsers, error handling, and precise stream control through a parser monad, enabling efficient extraction and validation of binary data. These capabilities are optimized for parsing RPM package metadata, where low-level stream inspection and structured decoding of binary formats are required.",
      "description_length": 488,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile_eio.Reader.Make",
      "library": "rpmfile-eio",
      "description": "Reads RPM package metadata from a source stream with configurable size limits. Processes data into structured metadata results, handling errors as string messages. Useful for extracting RPM headers and package information directly from streams in Eio-based applications.",
      "description_length": 270,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile_eio.Reader.S",
      "library": "rpmfile-eio",
      "description": "This module reads RPM package metadata from a source stream, providing a single entry point to parse and validate the metadata. It works with `Eio.Flow.source` streams and returns structured `Rpmfile.metadata` on success or an error message. Use it to extract package information from RPM files in an Eio-based application.",
      "description_length": 323,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rpmfile_eio.P",
      "library": "rpmfile-eio",
      "description": "This module implements RPM metadata parsers using Eio abstractions, combining stream processing with structured decoding of RPM components like leads, headers, and entries. It exposes operations to extract null-terminated strings, header indices, and entry values directly from buffers, supporting precise navigation of RPM binary structures. The module's parser combinators enable composition of complex reads, such as extracting a header by tag or validating signature blocks, while handling errors and stream position automatically. Together with its submodules, it provides both low-level buffer inspection and high-level RPM structure decoding.",
      "description_length": 649,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rpmfile_eio.Reader",
      "library": "rpmfile-eio",
      "description": "This module reads RPM package metadata from Eio stream sources, parsing headers and extracting structured package information such as name, version, and dependencies without full extraction. It supports direct stream processing with configurable size limits and error handling, enabling efficient metadata inspection from remote or non-file sources. Child modules provide streamlined parsing interfaces and validation workflows, returning `Rpmfile.metadata` on success or descriptive error messages. Use it to query RPM details in Eio-based applications, with control over stream handling and resource constraints.",
      "description_length": 614,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpmfile_eio",
      "library": "rpmfile-eio",
      "description": "This library enables reading RPM metadata using Eio abstractions, combining stream processing with structured decoding of RPM components such as leads, headers, and entries. It provides data types like `Rpmfile.metadata`, `header`, and `entry`, along with operations to extract null-terminated strings, header indices, and entry values from buffers or streams. The module supports precise navigation of RPM binary structures, allowing tasks like validating signature blocks or querying package details such as name, version, and dependencies directly from streams. Examples include inspecting RPMs from remote sources without full extraction or composing complex reads over Eio-managed buffers.",
      "description_length": 694,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 694,
    "min_description_length": 270,
    "avg_description_length": 506.3333333333333,
    "embedding_file_size_mb": 0.022233963012695312
  }
}