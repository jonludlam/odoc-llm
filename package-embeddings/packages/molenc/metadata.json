{
  "package": "molenc",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 22,
  "creation_timestamp": "2025-08-15T12:12:58.175502",
  "modules": [
    {
      "module_path": "Molenc.Rdkit.Rdkit",
      "library": "molenc",
      "description": "This module implements a set of operations for working with molecular structures using the RDKit library. It provides functions for creating molecules from SMILES strings, adding hydrogen atoms, querying atom properties (such as element type and bonding information), and calculating molecular metrics like distances and diameter. Additionally, it supports generating deep SMILES representations and extracting structural data such as element symbols and atomic numbers.",
      "description_length": 470,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Index.Bstree",
      "library": "molenc",
      "description": "This module organizes molecular fingerprints into a binary space partitioning tree to enable efficient similarity searches, nearest neighbor queries, and range-based analysis of chemical compounds. It operates on hierarchical tree structures and molecule lists, supporting conversions between these representations for simplified grouping or reconstruction. Commonly used in cheminformatics workflows for clustering, substructure screening, and similarity-guided exploration of molecular datasets.",
      "description_length": 497,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Node",
      "library": "molenc",
      "description": "This module defines a node structure used to represent elements in a graph, where each node has a type and a set of integer successors. It provides functions to create nodes, add successors, and retrieve node properties. Concrete use cases include building and manipulating control flow graphs or dependency networks with typed nodes and directed edges.",
      "description_length": 353,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Fingerprint",
      "library": "molenc",
      "description": "This module implements fixed-size fingerprint vectors for molecular representations, using a one-dimensional Bigarray to store integer feature counts. It provides operations for creating, converting, and comparing fingerprints, including similarity metrics like Tanimoto and Tversky coefficients, as well as utilities for filtering and iterating over feature-value pairs. Typical use cases include cheminformatics tasks such as molecular similarity search and feature-based compound classification.",
      "description_length": 498,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Molenc.Mini_mol",
      "library": "molenc",
      "description": "This module represents molecular structures with a name, graph, diameter, and adjacency matrix. It provides operations to access atom types, neighbors, and encoded environments, as well as to compute atom pairs and types at a given distance. Concrete use cases include analyzing molecular graphs for chemical similarity and generating structural features for machine learning models.",
      "description_length": 383,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Atom_pair",
      "library": "molenc",
      "description": "This module represents pairs of atoms with a source, destination, and distance. It provides functions to create atom pairs, convert them to strings, and retrieve their distance. Useful for modeling molecular interactions where precise atom relationships and distances are required.",
      "description_length": 281,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Molenc.Utls",
      "library": "molenc",
      "description": "This module combines file handling, string validation, statistical analysis, and process management operations, working with data structures like strings, arrays, lists, and system resources. Functions support tasks such as enforcing file extensions, calculating medians or standard deviations, validating binary/integer inputs, and forking external commands, while also providing utilities for data transformation, random selection, and time measurement. Specific use cases include system introspection (e.g., core count checks), data sanitization (e.g., prefix removal), and statistical hypothesis testing (e.g., Wilcoxon rank-sum to p-value conversion).",
      "description_length": 656,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Molenc.Scale",
      "library": "molenc",
      "description": "Handles parsing and formatting of scale values from strings or dictionary headers into a structured type that represents either a single integer or a pair of integers. Converts scales to string representations or lists of integers. Useful for processing configuration data where scales are defined as either single values or ranges.",
      "description_length": 332,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Ap_types",
      "library": "molenc",
      "description": "Reads a single molecular structure from an input channel, using a reference integer to track position. Operates on `in_channel` and returns a `Mini_mol.t` value representing the parsed molecule. Useful for sequential parsing of multi-molecule files in formats like SDF or MOL.",
      "description_length": 276,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Bloom",
      "library": "molenc",
      "description": "This module implements a Bloom filter using a 2D integer array as the underlying data structure. It provides functions to generate distinct random indices, initialize the filter with specified parameters, and encode data into the filter using a hash-based approach. Concrete use cases include efficient membership testing in streaming data applications where false positives are acceptable but false negatives are not.",
      "description_length": 418,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Rdkit",
      "library": "molenc",
      "description": "This module enables working with molecular structures using the RDKit library. It supports creating molecules from SMILES strings, adding hydrogen atoms, querying atom properties like element type and bonding, and calculating molecular metrics such as distances and diameter. It also generates deep SMILES representations and extracts structural data including element symbols and atomic numbers.",
      "description_length": 396,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.PiEltHA",
      "library": "molenc",
      "description": "This module defines a type `t` as a string and provides a dummy string value. It includes identity functions `to_string` and `of_string`, which return their input unchanged, and a `compare` function that orders strings using the standard library's comparison. These operations support handling and comparing string-based identifiers or labels in a type-safe context.",
      "description_length": 366,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Molenc.Index",
      "library": "molenc",
      "description": "This module implements a binary space partitioning tree for organizing molecular fingerprints, enabling efficient nearest neighbor queries, similarity searches, and range-based analysis. It operates on tree structures and lists of fingerprinted molecules, providing direct access to nearest neighbor lookups by name and distance. Functions support both list and array-based inputs, facilitating integration into cheminformatics pipelines for clustering, substructure screening, and dataset exploration.",
      "description_length": 502,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Norm",
      "library": "molenc",
      "description": "This module defines two norm types, `Max_norm` and `L1_norm`, and provides `of_string` to convert string representations to norm values. It also includes `map_norm`, which applies the selected norm to an integer-labeled map of integers, returning a float result. Use this module to compute vector norms from mapped data, such as feature vectors in machine learning or summary statistics.",
      "description_length": 387,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Molenc.WMH",
      "library": "molenc",
      "description": "This module implements weighted minhash algorithms for similarity estimation, operating on dense bit arrays and hashed integer arrays. It provides functions to generate seeds, compute minhash signatures, estimate Jaccard similarity and distance, and manage bounds tables for weighted elements. Concrete use cases include document similarity analysis, large-scale data deduplication, and probabilistic set comparison in high-dimensional spaces.",
      "description_length": 443,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.FpMol",
      "library": "molenc",
      "description": "This module defines a molecule representation with a name, index, value, and fingerprint, along with functions to create, parse, and convert molecules to strings or output channels. It supports operations like computing distances (dist) and Tanimoto coefficients (tani) between molecules, checking activity status, and filtering fingerprint features. Use cases include analyzing molecular similarity, processing molecule files, and feature selection in cheminformatics workflows.",
      "description_length": 479,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Ptable",
      "library": "molenc",
      "description": "This module maps chemical element symbols to prime numbers and atomic numbers, providing direct lookups via hash tables and arrays. It includes predefined arrays of primes and atomic numbers, along with regular expressions for parsing elements. Use cases include encoding chemical formulas using primes and converting between symbols, atomic numbers, and primes efficiently.",
      "description_length": 374,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Gram",
      "library": "molenc",
      "description": "This module processes and analyzes arrays of data points using distance metrics, producing and updating matrices of results. It includes functions to initialize matrices with computed distances, emit and gather values during iteration, and print matrix corners for debugging. Concrete use cases include clustering algorithms and numerical analysis where pairwise distance calculations and matrix updates are required.",
      "description_length": 417,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.MyList",
      "library": "molenc",
      "description": "This module offers a comprehensive suite of list operations for creation, transformation (including mapping, folding, and filtering), sorting, grouping, and combining lists through concatenation or Cartesian products. It supports polymorphic lists with utilities for indexed access, custom comparison logic, stateful processing, and handling optional or exception-safe computations. These functions are ideal for data processing pipelines, algorithm implementation, managing association lists, and interoperability with structures like sequences or enumerated types.",
      "description_length": 566,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Atom_env",
      "library": "molenc",
      "description": "This module handles encoding and decoding of molecular environment data structures, specifically lists of layers containing atom types and counts. It provides functions to convert these structures to and from string representations, and to parse molecular information from file comments. Use cases include reading and writing molecular data from files, and restoring indexed molecular environments from parsed input.",
      "description_length": 416,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.MSE_mol",
      "library": "molenc",
      "description": "This module handles parsing and representation of molecular data from text files. It defines a type `t` that stores a molecule name and a map of string keys to integer values, using `StringMap`. Key operations include reading molecule data from file lines, extracting feature counts from strings, and managing a reference to the previous molecule name during parsing. Use cases include processing molecular datasets where each molecule is defined by a name and associated features with counts.",
      "description_length": 493,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc",
      "library": "molenc",
      "description": "This module provides operations for parsing molecular structures from input channels, encoding molecular environments, and representing atom pairs with distances. It works with data types such as `Mini_mol.t` for molecular structures, layered environment lists, and atom pair records. Concrete use cases include sequential reading of multi-molecule files, modeling molecular interactions, and restoring encoded molecular data from file comments.",
      "description_length": 445,
      "index": 21,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 22,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9565217391304348
  },
  "statistics": {
    "max_description_length": 656,
    "min_description_length": 276,
    "avg_description_length": 429.45454545454544,
    "embedding_file_size_mb": 0.31937313079833984
  }
}