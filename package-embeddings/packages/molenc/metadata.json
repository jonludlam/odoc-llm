{
  "package": "molenc",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 11,
  "creation_timestamp": "2025-06-18T16:39:32.503456",
  "modules": [
    {
      "module_path": "Molenc.Rdkit.Rdkit",
      "description": "Provides functions to convert between OCaml and Python objects, construct molecules from SMILES strings, add hydrogens, and query atomic properties such as atom types, element symbols, and neighbor counts. Works with molecule representations stored in a custom type `t` and returns arrays of integers or strings for molecular data. Used to analyze molecular structures, generate deep SMILES, and calculate distances between atoms.",
      "description_length": 430,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Index.Bstree",
      "description": "The module offers operations for constructing and querying a binary search tree tailored to `FpMol.t` molecular data, enabling spatial indexing through partitioning and traversal. It supports tasks like nearest neighbor searches and distance sampling, leveraging the tree structure to efficiently manage spatial queries on molecular arrays. The `t` type encapsulates the tree, derived from lists of `FpMol.t` via dedicated construction functions.",
      "description_length": 446,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Atom_pair",
      "description": "Represents pairs of atomic identifiers with a associated distance value. Provides creation from two strings and an integer, conversion to a string representation, and retrieval of the distance. Used to model interactions between atoms in molecular simulations or graph edge data.",
      "description_length": 279,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Index",
      "description": "provides a structured approach to managing spatial queries on molecular data through a binary search tree implementation. it defines a `t` type for the tree, built from lists of `FpMol.t`, and includes methods for insertion, traversal, and spatial queries. operations such as finding nearest neighbors and sampling distances are optimized using the tree's partitioning logic. it enables efficient querying of large molecular datasets by organizing them in a searchable hierarchical format.",
      "description_length": 489,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.MyList",
      "description": "Provides enhanced list operations with tail-recursive implementations for common functions like map, append, and fold_right, ensuring safe handling of large lists. Includes list comparison, equality, and abstraction layers for consistent behavior. Functions such as remove_assoc and split operate on lists with modified, safer implementations. Overrides standard list functions to improve reliability without changing their names or basic semantics.",
      "description_length": 449,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Norm",
      "description": "The module provides a framework for handling normalized data structures, offering operations to create, manipulate, and validate instances of core data types. It includes functions for checking emptiness, merging elements, and ensuring consistency across representations. Users can construct and inspect normalized forms, perform equality checks, and apply transformations to data. Example uses include validating input formats and streamlining data processing pipelines.",
      "description_length": 471,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.PiEltHA",
      "description": "Provides string-based conversion and comparison operations, including transforming values to and from strings and comparing string representations. Works exclusively with string data types and ensures consistent handling of textual representations. Used to standardize string input/output and enforce strict string comparison in data processing pipelines.",
      "description_length": 355,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc.Rdkit",
      "description": "Converts OCaml objects to Python equivalents and constructs molecules from SMILES, enabling atomic property queries like element symbols and neighbor counts. Operates on a custom molecule type `t`, returning arrays of integers or strings for detailed molecular analysis. Supports tasks such as generating deep SMILES and calculating interatomic distances. Hydrogens can be added to refine molecular structures for further processing.",
      "description_length": 433,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Molenc.Scale",
      "description": "Converts between string representations and integer lists, and constructs instances from file headers. Works with string, integer list, and file header data types. Used to parse scale information from filenames and serialize scales for output.",
      "description_length": 243,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "molenc",
      "description": "Encodes molecular structures into J-L Faulon's Signature Molecular Descriptor (SMD) and unfolded-counted atom pairs using RDKit through OCaml. Processes molecules represented as SMILES strings and generates feature dictionaries mapping indices to atom environments. Used for precise molecular representation in cheminformatics tasks requiring collision-free fingerprinting and atom environment analysis.",
      "description_length": 403,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Molenc",
      "description": "The module includes a type for representing atomic pairs with associated distances, enabling modeling of molecular interactions and graph edges. It supports creating pairs from strings and integers, converting them to strings, and retrieving distance values. This functionality is useful for analyzing molecular structures or graph relationships. Another part of the module offers a binary search tree for efficient spatial queries on molecular data, allowing operations like nearest neighbor searches and distance sampling.",
      "description_length": 524,
      "index": 10,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 86,
    "meaningful_modules": 11,
    "filtered_empty_modules": 75,
    "retention_rate": 0.12790697674418605
  },
  "statistics": {
    "max_description_length": 524,
    "min_description_length": 243,
    "avg_description_length": 411.09090909090907,
    "embedding_file_size_mb": 0.04038047790527344
  }
}