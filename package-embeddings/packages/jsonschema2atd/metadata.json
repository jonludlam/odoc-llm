{
  "package": "jsonschema2atd",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:58.263567",
  "modules": [
    {
      "module_path": "Jsonschema2atd_runtime.Adapter.One_of",
      "description": "Provides functions to standardize and reconstruct values based on tagged variants. Operates on polymorphic variants that encode either a list of elements or a string. Used to ensure consistent representation after parsing or transformation steps.",
      "description_length": 246,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonschema2atd_runtime.Adapter",
      "description": "Encodes and decodes values using polymorphic variants, handling both lists and strings through standardized transformations. Key operations include tagging, untagging, and restructuring data to maintain consistency. It supports conversions between variant representations and raw values, enabling seamless integration with parsing and processing pipelines. For example, it can convert a variant list into a string or reconstruct a variant from a parsed input.",
      "description_length": 459,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "jsonschema2atd",
      "description": "Generates OCaml types and serialization code from JSON Schema or OpenAPI specifications. Processes schema definitions to produce ATD-compatible type definitions. Used to automate type generation for API clients and data validation pipelines.",
      "description_length": 241,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonschema2atd_runtime",
      "description": "Encodes and decodes values using polymorphic variants, with support for lists and strings via standardized transformations. It provides operations for tagging, untagging, and restructuring data to ensure consistency across representations. This enables conversion between variant forms and raw values, such as transforming a variant list into a string or rebuilding a variant from parsed input. These capabilities facilitate integration with parsing and data processing workflows.",
      "description_length": 480,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 480,
    "min_description_length": 241,
    "avg_description_length": 356.5,
    "embedding_file_size_mb": 0.014941215515136719
  }
}