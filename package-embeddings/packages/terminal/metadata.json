{
  "package": "terminal",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:06:57.032789",
  "modules": [
    {
      "module_path": "Terminal.Ansi",
      "library": "terminal",
      "description": "This module provides operations to control terminal output using ANSI escape sequences, including showing or hiding the cursor, moving the cursor vertically, and erasing parts of the terminal display. It works directly with `Stdlib.Format.formatter` for output manipulation and emits raw ANSI strings for terminal control. Concrete use cases include building progress displays, interactive command-line interfaces, and dynamic terminal output without relying on Unix-specific libraries.",
      "description_length": 486,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal.Color",
      "library": "terminal",
      "description": "This module defines and manipulates terminal color values using both 4-bit ANSI and 24-bit RGB color models. It supports operations to construct colors from standard color names, bright variants, RGB components, or hexadecimal strings, and includes a function to pretty-print color values. These capabilities enable precise control over terminal output appearance, such as highlighting log levels in distinct colors or rendering UI elements with specific color schemes.",
      "description_length": 469,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terminal.Style",
      "library": "terminal",
      "description": "This module defines and manipulates text styling for terminal output using ANSI escape codes. It provides predefined styles such as bold, faint, italic, underline, and reverse, as well as functions to set foreground and background colors. These styles can be combined to produce colored and formatted text output in terminal applications.",
      "description_length": 338,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terminal.Size",
      "library": "terminal",
      "description": "This module provides functions to retrieve the current terminal's dimensions, including rows and columns, as well as setting a callback for terminal resize events. It operates on a `dimensions` record containing integer values for rows and columns, and returns optional values to handle cases where the terminal size cannot be determined. Concrete use cases include dynamically adjusting output layout based on terminal size or triggering redraws when the terminal is resized.",
      "description_length": 476,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal",
      "library": "terminal",
      "description": "This module enables terminal interaction through string width measurement, ANSI escape sequence control, color and style manipulation, and terminal size detection. It provides core operations for formatting text with colors and styles, managing cursor movement, and adapting output to terminal dimensions. Submodules handle specific tasks: ANSI sequences for display control, color definitions for precise palette selection, styles for text formatting, and size detection for responsive layouts. Examples include rendering progress bars with dynamic updates, coloring log messages, and adjusting output width based on terminal resize events.",
      "description_length": 641,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terminal_ansi.Color",
      "library": "terminal.ansi",
      "description": "This module defines values and functions for constructing terminal color values using either standard 4-bit ANSI codes or 24-bit RGB values. It supports color representations through the `plain` type for basic colors, `ansi` for generating ANSI color values, and `rgb` or `hex` for precise RGB color definitions. Use cases include formatting terminal output with specific colors, such as highlighting log messages or styling command-line interface elements.",
      "description_length": 457,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal_ansi.Ansi",
      "library": "terminal.ansi",
      "description": "This module provides low-level terminal control operations such as showing or hiding the cursor, moving the cursor vertically, and erasing parts of the terminal display. It works directly with strings representing ANSI escape sequences and uses a formatter for output. Concrete use cases include building progress bars, interactive command-line interfaces, and dynamic terminal output without relying on Unix-specific libraries.",
      "description_length": 428,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terminal_ansi.Style",
      "library": "terminal.ansi",
      "description": "This module defines and manipulates text styling for terminal output using ANSI escape codes. It supports operations to create styles such as bold, faint, italic, underline, and reverse, as well as setting foreground and background colors. These styles can be applied to text in terminal applications to enhance readability or convey status through visual cues.",
      "description_length": 361,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terminal_ansi",
      "library": "terminal.ansi",
      "description": "This module enables precise control over terminal output formatting using ANSI escape codes, allowing manipulation of color, style, and display behavior. It supports operations such as applying foreground and background colors, text attributes like bold and underline, and low-level cursor movement and screen manipulation. The module works with strings and formatters to build dynamic terminal interfaces, such as progress bars, colored logs, and interactive CLI elements, without relying on Unix-specific dependencies. By combining color definitions, styling, and terminal control, it provides a cohesive toolkit for creating rich terminal experiences across different environments.",
      "description_length": 684,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 684,
    "min_description_length": 338,
    "avg_description_length": 482.22222222222223,
    "embedding_file_size_mb": 0.033156394958496094
  }
}