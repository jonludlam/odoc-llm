{
  "package": "terminal",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-06-18T16:32:03.522727",
  "modules": [
    {
      "module_path": "Terminal.Color",
      "description": "Provides functions to create colors using ANSI escape codes or RGB values, including parsing from hex strings. Works with a type representing terminal colors, supporting both 4-bit and 24-bit color formats. Used to apply specific color codes in terminal output, such as highlighting text in a custom theme or generating colored logs.",
      "description_length": 333,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal.Style",
      "description": "Provides functions to create and retrieve ANSI escape codes for text styling, including bold, underline, and color specifications. Works with color values from the Color module and a style type representing terminal formatting. Used to generate styled output for terminal applications, such as highlighting errors or formatting logs.",
      "description_length": 333,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal.Ansi",
      "description": "Produces ANSI escape sequences for terminal manipulation, including cursor visibility control and line erasure. Operates on strings and format printers to adjust text display in terminal environments. Used to dynamically update terminal output, such as in progress indicators or interactive command-line interfaces.",
      "description_length": 315,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal.Size",
      "description": "Returns the terminal's width and height as an option, with separate functions to retrieve columns and rows. Works with the `dimensions` type containing width and height fields. Used to adjust output layout dynamically when the terminal size changes.",
      "description_length": 249,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal_ansi.Color",
      "description": "Provides functions to create colors using ANSI 4-bit codes, RGB values, and hex strings, with validation for input ranges and formats. Works with types representing color values and plain color variants, including bright versions. Used to generate terminal output with specific color schemes, ensuring compatibility with both standard and modern terminals.",
      "description_length": 356,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terminal_ansi.Style",
      "description": "Provides functions to construct and retrieve ANSI escape codes for text styling. Works with a custom type `t` representing style configurations and color values from the `Color` module. Used to apply specific terminal text effects like bold, underline, or colored foreground/background.",
      "description_length": 286,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terminal_ansi.Ansi",
      "description": "Produces ANSI escape sequences for terminal manipulation, including cursor visibility control and line erasure. Operates with strings and Format.formatter to adjust text display in terminal environments. Used to dynamically update terminal output, such as in progress indicators or interactive command-line interfaces.",
      "description_length": 318,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "terminal",
      "description": "Provides functions to define and render custom progress bar layouts, with support for updating multiple bars in real time. Operates on terminal dimensions and progress state records. Enables real-time visualization of concurrent processes during long-running tasks.",
      "description_length": 265,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal",
      "description": "Provides functions to generate ANSI escape codes for color, styling, and terminal manipulation, along with utilities to query terminal dimensions. It includes a color type supporting 4-bit and 24-bit formats, a style type for text formatting, and a dimensions type for terminal size. Operations include creating colored text, applying styles, clearing lines, and adjusting output based on terminal size. Examples include generating colored logs, formatting error messages, and building dynamic progress indicators.",
      "description_length": 514,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal_ansi",
      "description": "Encapsulates ANSI escape sequence generation for terminal manipulation, including color application, text styling, and display control. It supports color creation via 4-bit, RGB, and hex inputs, style configuration with foreground and background colors, and terminal operations like cursor hiding and line clearing. Functions produce formatted strings or work with formatter objects to dynamically adjust terminal output. Examples include rendering colored text, applying bold or underline effects, and updating progress bars in real time.",
      "description_length": 539,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 539,
    "min_description_length": 249,
    "avg_description_length": 350.8,
    "embedding_file_size_mb": 0.03674793243408203
  }
}