{
  "package": "terminal",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:09:50.688682",
  "modules": [
    {
      "module_path": "Terminal_ansi.Ansi",
      "library": "terminal.ansi",
      "description": "This module provides operations to control terminal output using ANSI escape sequences, including showing or hiding the cursor, moving the cursor vertically, and erasing parts of the terminal display. It works directly with `Stdlib.Format.formatter` for output and constructs strings containing ANSI codes. Concrete use cases include building progress displays, text-based user interfaces, and dynamic terminal output in environments without Unix dependencies.",
      "description_length": 460,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal_ansi.Style",
      "library": "terminal.ansi",
      "description": "This module defines a set of basic text styling options for terminal output using ANSI escape codes. It supports operations to create styles such as bold, faint, italic, underline, and reverse, as well as setting foreground and background colors. These styles can be applied to text in environments that support ANSI-compatible terminals, enabling colored and formatted output in logs, command-line tools, or status displays.",
      "description_length": 425,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal_ansi.Color",
      "library": "terminal.ansi",
      "description": "This module defines operations for constructing and rendering terminal colors using both standard 4-bit ANSI codes and 24-bit RGB values. It supports two primary color representations: `plain` for basic ANSI colors and `t` for extended color types including bright variants and RGB definitions. Functions like `ansi`, `rgb`, and `hex` allow precise color creation, while `pp_dump` outputs color definitions for debugging.",
      "description_length": 421,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal_ansi",
      "library": "terminal.ansi",
      "description": "This module implements ANSI escape sequence handling for terminal manipulation, including cursor control, screen erasure, and styled text rendering. It operates on strings and formatters to produce colored and formatted output, with support for RGB and 256-color modes. It is used to build progress bars, status displays, and terminal UI elements in non-POSIX environments like unikernels.",
      "description_length": 389,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal.Ansi",
      "library": "terminal",
      "description": "This module provides operations to control terminal output using ANSI escape sequences, including showing or hiding the cursor, moving the cursor vertically, and erasing parts of the terminal display. It works directly with `Format.formatter` for output manipulation and emits raw strings containing ANSI codes. Concrete use cases include building progress bars, interactive command-line interfaces, and dynamic terminal output without relying on Unix-specific libraries.",
      "description_length": 471,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terminal.Style",
      "library": "terminal",
      "description": "This module defines and manipulates text styling for terminal output using ANSI escape codes. It provides predefined styles such as bold, faint, italic, underline, and reverse, as well as functions to set foreground and background colors. These styles can be applied to text in terminal applications to enhance readability or convey status, such as highlighting errors in red or emphasizing important messages.",
      "description_length": 410,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terminal.Color",
      "library": "terminal",
      "description": "This module defines operations for constructing and manipulating terminal color values using both 4-bit ANSI codes and 24-bit RGB values. It supports color representations such as basic named colors, bright variants, RGB triples, and hex strings. These capabilities enable precise control over terminal output appearance, such as coloring log messages or highlighting UI elements in command-line applications.",
      "description_length": 409,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal.Size",
      "library": "terminal",
      "description": "This module provides functions to retrieve the current terminal's dimensions, including rows and columns, as well as individual access to row or column counts. It works with the `dimensions` record type, which contains two integers representing the terminal's height and width. These functions are useful for dynamically adjusting output layout in terminal applications, such as progress bars or full-screen interfaces, based on the terminal's current size.",
      "description_length": 457,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terminal",
      "library": "terminal",
      "description": "This module handles terminal interactions through operations for color manipulation, text styling, cursor control, and terminal sizing. It works with strings, ANSI escape sequences, and dimension records to manage output appearance and layout. Use cases include rendering colored logs, creating styled UI elements, implementing progress bars, and adapting output to terminal dimensions dynamically.",
      "description_length": 398,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 471,
    "min_description_length": 389,
    "avg_description_length": 426.6666666666667,
    "embedding_file_size_mb": 0.13086318969726562
  }
}