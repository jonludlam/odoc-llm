{
  "package": "terml",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 13,
  "creation_timestamp": "2025-08-14T23:18:29.368699",
  "modules": [
    {
      "module_path": "Terml.Virtual_input.Virtual",
      "library": "terml",
      "description": "Reads input events from a virtual device, returning a result that indicates whether input was successfully read, the stream ended, a retry is needed, or the input was malformed. It operates on string-based input representations and uses a polymorphic variant type to signal event outcomes. This module is useful for handling simulated or replayed input streams in testing and automation scenarios.",
      "description_length": 397,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Input.Input",
      "library": "terml",
      "description": "Reads input events from the terminal, returning either a line of text, an end-of-input signal, a retry indication, or a malformed input error. It handles raw terminal input parsing, including special key sequences and line editing. Useful for implementing interactive command-line interfaces or custom input handlers.",
      "description_length": 317,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Color",
      "library": "terml",
      "description": "This module defines a set of color values, including named ANSI colors and RGB triples, and provides functions to convert colors to ANSI escape sequences, check if ANSI color output is disabled, and parse color values from strings. It operates on the `t` type, which represents both standard terminal colors and custom RGB values. Concrete use cases include formatting terminal output with specific colors and dynamically parsing or generating color codes for styled text rendering.",
      "description_length": 482,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Style",
      "library": "terml",
      "description": "This module defines styling attributes for terminal text formatting, including foreground and background colors, text effects like bold or underline, and color customization for underlines. It provides functions to construct and modify styled text elements, apply visual effects, and generate ANSI escape sequences from style definitions. Use cases include building colored and formatted terminal output, such as logs, prompts, or UI components with custom text appearance.",
      "description_length": 473,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terml.Virtual_input",
      "library": "terml",
      "description": "Handles input event simulation with a virtual device, queuing string-based input and providing non-blocking reads. It supports testing and automation by replaying input streams and signaling event outcomes with precise status results. Uses a queue to manage input strings and returns structured results for read operations.",
      "description_length": 323,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Events",
      "library": "terml",
      "description": "This module handles low-level terminal input events, including key presses and modifier keys. It parses control sequences and provides mechanisms to read or poll for events from an input source. Concrete use cases include handling keyboard input in terminal-based user interfaces or command-line applications.",
      "description_length": 309,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Ansi",
      "library": "terml",
      "description": "This module provides direct ANSI escape sequences for terminal text styling, including colors, formatting, and control codes. It works with strings to construct styled terminal output for enhanced visual presentation. Concrete use cases include highlighting errors in red, emphasizing text with bold or underline, and programmatically coloring log output.",
      "description_length": 355,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terml.Input",
      "library": "terml",
      "description": "Reads terminal input events, returning parsed lines, end-of-input signals, retry requests, or malformed input errors. Handles raw input parsing, including special keys and line editing. Ideal for building interactive command-line interfaces or custom input handlers.",
      "description_length": 266,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Cursor",
      "library": "terml",
      "description": "This module defines operations to control terminal cursor behavior, including movement, positioning, visibility, and styling. It works with a concrete sum type representing cursor commands and a style type for visual appearance. Use cases include building terminal-based user interfaces, text editors, or interactive command-line tools with precise cursor control and visual feedback.",
      "description_length": 384,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Terminal",
      "library": "terml",
      "description": "This module provides direct control over terminal behavior through low-level commands like enabling/disabling line wrap, switching screen buffers, scrolling, setting terminal size and title, and managing synchronous updates. It works with terminal control sequences, window size records, and Unix file descriptors to manipulate terminal state. Concrete use cases include building custom terminal interfaces, implementing scrollable output panels, and managing full-screen applications with precise rendering control.",
      "description_length": 516,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Input_source",
      "library": "terml",
      "description": "This module defines an abstract type `t` representing a source of input characters, typically used for parsing or reading from streams like files or buffers. It provides operations to read individual characters, peek ahead, and track position within the input source. Concrete use cases include implementing custom lexers, parsers, or any process requiring character-level input inspection.",
      "description_length": 390,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Command",
      "library": "terml",
      "description": "This module handles terminal command construction and execution, supporting operations like setting colors, styles, cursor positions, and printing styled text. It works with a list of command types that represent individual terminal actions, including strings, color and style settings, and terminal control codes. Concrete use cases include building and queuing sequences of terminal output commands for rendering UI elements like progress bars, status lines, or colored logs.",
      "description_length": 477,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml",
      "library": "terml",
      "description": "This module provides terminal text styling, cursor control, input handling, and low-level terminal manipulation. It works with strings, color values, command sequences, cursor positions, and input events to enable rich terminal output and interaction. Concrete use cases include rendering colored logs, building interactive command-line tools, handling keyboard input, and constructing terminal-based user interfaces with precise visual control.",
      "description_length": 445,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 516,
    "min_description_length": 266,
    "avg_description_length": 394.9230769230769,
    "embedding_file_size_mb": 0.18888378143310547
  }
}