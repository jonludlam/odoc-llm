{
  "package": "terml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 13,
  "creation_timestamp": "2025-06-18T16:33:57.208190",
  "modules": [
    {
      "module_path": "Terml.Virtual_input.Virtual",
      "description": "Reads input from a virtual source, returning parsed data, end-of-input signals, or error conditions. It handles string-based input and emits structured results including successful reads, end-of-stream, retries, or malformed data. Used to process user input in interactive applications or simulate input sources in testing environments.",
      "description_length": 336,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terml.Input.Input",
      "description": "Reads input from a source, returning parsed results as tagged variants, including successful reads, end-of-input, retries, or malformed data. Processes raw string input and emits structured outcomes for handling user or external input streams. Used to implement interactive command-line interfaces and data validation pipelines.",
      "description_length": 328,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Ansi",
      "description": "Generates ANSI escape sequences for text formatting, including color, style, and special effects. It constructs strings that modify terminal output by applying attributes like bold, underline, and color changes. The module supports direct escape sequence generation and applies styles to foreground and background colors.",
      "description_length": 321,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Color",
      "description": "Converts color names to ANSI escape sequences, checks if ANSI colors are disabled, and parses color strings into internal representations. Works with string inputs and an abstract color type representing color values. Used to generate terminal output with color codes and conditionally disable color formatting.",
      "description_length": 311,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Command",
      "description": "Provides operations to manage and execute a list of command objects, including queuing, flushing, executing, and clearing commands. Works with a custom command type and maintains a global command queue. Used to sequence and control the execution of specific command actions in a structured manner.",
      "description_length": 297,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Cursor",
      "description": "Moves the cursor to specific coordinates, navigates lines, and adjusts position relative to current location. Operates on a cursor state type and a style type to control appearance and behavior. Used to dynamically adjust terminal cursor position and visibility during text rendering or interactive applications.",
      "description_length": 312,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Input",
      "description": "Processes raw input strings and converts them into structured outcomes through tagged variants, enabling precise handling of valid, invalid, or incomplete data. Supports operations such as parsing, validation, and stateful input processing, with types representing success, end-of-input, retries, and errors. Users can build interactive interfaces or data pipelines that respond dynamically to input conditions. For example, it can parse user commands, validate form inputs, or manage streaming data with error recovery.",
      "description_length": 520,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Input_source",
      "description": "Reads input from a source, returning either a string, end-of-input signal, retry request, or malformed data indication. Operates on external input streams, handling errors and control flow explicitly. Used to process user input, file lines, or network data with fine-grained control over reading behavior.",
      "description_length": 305,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Style",
      "description": "Provides functions to create and manipulate styled text elements, including setting foreground and background colors, applying text effects like bold or underline, and combining styles. Works with a private `styled` type and a `t` type representing style sequences. Used to generate ANSI-encoded strings for terminal output with specific formatting.",
      "description_length": 349,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terml.Terminal",
      "description": "Provides commands to control terminal behavior, including line wrapping, screen scrolling, size adjustment, title setting, and synchronous updates. Works with terminal file descriptors, clear types, and window size records. Used to manage terminal display state in applications requiring precise control over text rendering and user interface updates.",
      "description_length": 351,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Terml.Virtual_input",
      "description": "Reads string-based input from a virtual source, returning structured results such as parsed data, end-of-stream markers, or error conditions. It supports operations to check for successful reads, detect end-of-input, and handle malformed data. Users can process interactive input or simulate input sources for testing. Examples include parsing user commands, validating input formats, and managing input flow in automated tests.",
      "description_length": 428,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "terml",
      "description": "Provides functions for positioning the cursor, clearing lines, and applying text styles in terminal output. Works with strings, coordinates, and terminal state representations. Enables creation of interactive command-line interfaces, such as progress bars or menu systems.",
      "description_length": 272,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Terml",
      "description": "combines terminal control, input handling, and text styling to enable rich, interactive command-line applications. it manages ANSI color conversion, cursor positioning, command execution, and key event processing, while supporting styled text generation and input parsing. operations include applying color and style to output, moving the cursor, queuing commands, and parsing structured input. examples include rendering colored logs, building interactive shells, and controlling terminal layout dynamically.",
      "description_length": 509,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 13,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9285714285714286
  },
  "statistics": {
    "max_description_length": 520,
    "min_description_length": 272,
    "avg_description_length": 356.84615384615387,
    "embedding_file_size_mb": 0.04767608642578125
  }
}