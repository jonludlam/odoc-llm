{
  "package": "archi-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:14.425103",
  "modules": [
    {
      "module_path": "Archi_lwt.Component.COMPONENT",
      "library": "archi-lwt",
      "description": "This module defines a component interface with operations to initialize and terminate components using Lwt for asynchronous handling. It works with abstract types for components (`t`), context (`ctx`), and arguments (`args`). Concrete use cases include managing lifecycle events of system components like servers or connectors in concurrent applications.",
      "description_length": 354,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi_lwt.Component.SIMPLE_COMPONENT",
      "library": "archi-lwt",
      "description": "This module defines a component interface with operations to start and stop a component, handling initialization and shutdown within a context. It works with a component type `t` and a context type `ctx`, returning result-bearing IO actions for controlled lifecycle management. Concrete use cases include managing network servers, database connections, or background tasks that require asynchronous setup and teardown.",
      "description_length": 418,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi_lwt.System",
      "library": "archi-lwt",
      "description": "This module manages the lifecycle of component-based systems with dependency resolution. It allows creating systems from component definitions, starting and stopping them, and retrieving their initialized state. Key use cases include orchestrating application components like servers, databases, and services with proper startup and shutdown sequences.",
      "description_length": 352,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi_lwt.Component",
      "library": "archi-lwt",
      "description": "This module orchestrates components with dependency injection, enabling asynchronous initialization and termination through Lwt-based IO actions. It defines core types like `deps`, `ctx`, and `t`, supporting type-safe composition of components such as servers or databases, each carrying their own context and dependencies. The module allows linking components where one's output serves as another's input, enabling patterns like starting a database connection before initializing a web server that depends on it. Submodules refine component behavior with concrete lifecycle operations, handling start, stop, and error propagation in concurrent and result-aware contexts.",
      "description_length": 671,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi_lwt.Io",
      "library": "archi-lwt",
      "description": "This module implements monadic operations for handling asynchronous I/O actions. It provides `return` to wrap values in an asynchronous context, `map` to transform results of asynchronous computations, and `bind` to sequence asynchronous operations based on prior results. These functions are used to build non-blocking I/O pipelines, such as reading from and writing to network sockets or files without blocking the main execution thread.",
      "description_length": 439,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi_lwt",
      "library": "archi-lwt",
      "description": "This module coordinates the lifecycle of interdependent components using asynchronous I/O, ensuring correct initialization and shutdown order. It defines types like `deps`, `ctx`, and `t` to represent dependencies, execution context, and components, supporting type-safe composition and injection. Operations allow linking components so that one's output feeds another's input, such as initializing a database before a server that depends on it. It provides `return`, `map`, and `bind` to sequence and transform asynchronous actions, enabling non-blocking workflows like concurrent network or file I/O.",
      "description_length": 602,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 671,
    "min_description_length": 352,
    "avg_description_length": 472.6666666666667,
    "embedding_file_size_mb": 0.02223491668701172
  }
}