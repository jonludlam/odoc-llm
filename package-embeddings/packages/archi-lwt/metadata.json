{
  "package": "archi-lwt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:27:16.631285",
  "modules": [
    {
      "module_path": "Archi_lwt.Io",
      "description": "Provides monadic operations for asynchronous computations, including lifting values into the effect type, mapping over results, and chaining operations. Works with Lwt's thread-safe promise type to handle non-blocking I/O and concurrency. Enables structured handling of asynchronous file reads, network requests, and event loops.",
      "description_length": 329,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi_lwt.Component",
      "description": "Handles initialization and termination of components with context and argument parameters. Operates on custom types `t`, `ctx`, and `args` to manage lifecycle events. Used to launch background processes and cleanly shut them down during system termination.",
      "description_length": 256,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi_lwt.System",
      "description": "Provides functions to create and manage stateful processes with context, including initializing with arguments, starting, stopping, and retrieving state. Operates on typed components and stateful objects with distinct lifecycle states. Used to control long-running tasks with explicit state transitions and error handling.",
      "description_length": 322,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "archi-lwt",
      "description": "Manages stateful components and their dependencies through lifecycle events and dependency resolution. Works with custom component types and dependency graphs. Enables structured initialization, updating, and cleanup of interdependent system parts.",
      "description_length": 248,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi_lwt",
      "description": "Manages asynchronous workflows, component lifecycles, and stateful processes through a unified interface. It supports monadic operations for non-blocking I/O, initializes and terminates components with custom types, and controls stateful processes with explicit transitions. Functions include lifting values into effect types, launching background tasks, and managing process states. Examples include asynchronous file reading, background service management, and controlled execution of long-running operations.",
      "description_length": 511,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 511,
    "min_description_length": 248,
    "avg_description_length": 333.2,
    "embedding_file_size_mb": 0.01858806610107422
  }
}