{
  "package": "archi-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:55:39.849067",
  "modules": [
    {
      "module_path": "Archi_lwt.Io",
      "library": "archi-lwt",
      "description": "This module implements monadic operations for handling asynchronous I/O actions. It provides `return` to wrap values in an asynchronous context, `map` to transform results of asynchronous computations, and `bind` to sequence asynchronous operations where the next depends on the result of the previous. These functions are used to build non-blocking I/O pipelines, such as reading from and writing to network sockets or files without blocking the main execution thread.",
      "description_length": 469,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi_lwt.System",
      "library": "archi-lwt",
      "description": "This module manages the lifecycle of component-based systems with dependency resolution, allowing components to be started, stopped, and accessed safely. It works with systems parameterized by context, arguments, and component state, tracking their lifecycle stages (`started`, `stopped`). Concrete use cases include orchestrating startup and shutdown of interdependent services, such as databases, servers, and background workers, ensuring correct initialization and teardown order.",
      "description_length": 483,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi_lwt.Component",
      "library": "archi-lwt",
      "description": "This module composes and manipulates components with dependency injection, supporting asynchronous start and stop operations. It works with components that carry context, dependencies, and lifecycle actions, using types like `deps` for dependency chains and `t` for component instances. Concrete use cases include building modular systems where components are constructed from dependencies, linked sequentially, or adapted from existing systems.",
      "description_length": 445,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi_lwt",
      "library": "archi-lwt",
      "description": "This module implements monadic I/O operations and composes asynchronous components into lifecycle-managed systems. It provides `return`, `map`, and `bind` for non-blocking I/O pipelines, and supports dependency injection, component composition, and system-wide start/stop coordination. Use it to build and manage modular, asynchronous applications like network servers with interdependent services and safe resource handling.",
      "description_length": 425,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 483,
    "min_description_length": 425,
    "avg_description_length": 455.5,
    "embedding_file_size_mb": 0.058365821838378906
  }
}