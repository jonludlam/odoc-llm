{
  "package": "integers",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 38,
  "creation_timestamp": "2025-06-18T16:40:59.920774",
  "modules": [
    {
      "module_path": "Unsigned.ULLong.Infix",
      "description": "Provides arithmetic and bitwise operations for a numeric type, including addition, subtraction, multiplication, division, modulus, and bit shifting. Works with integer or arbitrary-precision numeric types supporting these operations. Enables efficient manipulation of numerical values in low-level computations or algorithmic transformations.",
      "description_length": 342,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.UInt32.Infix",
      "description": "Provides arithmetic and bitwise operations for numeric types, including addition, subtraction, multiplication, division, modulus, and bit shifting. Works with integer and bitwise data structures, enabling low-level manipulation of binary values. Used for implementing mathematical expressions and bit-level computations in performance-critical code.",
      "description_length": 349,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.UInt8.Infix",
      "description": "Provides arithmetic and bitwise operations on values of type t, including addition, subtraction, multiplication, division, modulus, and bit shifts. Supports logical operations such as AND, OR, and XOR, as well as left and right bit shifting. Used for low-level numerical computations and bit manipulation in performance-critical code.",
      "description_length": 334,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.UShort.Infix",
      "description": "Provides arithmetic and bitwise operations on values of type t, including addition, subtraction, multiplication, division, remainder, and bit shifting. Supports logical operations such as AND, OR, and XOR, as well as left and right bit shifts. Used for low-level numerical computations and bit manipulation in performance-critical code.",
      "description_length": 336,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.Size_t.Infix",
      "description": "Provides arithmetic and bitwise operations for numeric types, including addition, subtraction, multiplication, division, modulus, and bit shifting. Works with integer and bitwise data structures, enabling low-level manipulation of binary values. Used for implementing mathematical expressions and bit-level computations in performance-critical code.",
      "description_length": 349,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.UChar.Infix",
      "description": "Provides arithmetic and bitwise operations for numeric types, including addition, subtraction, multiplication, division, modulus, and bit shifting. Works with integer and bitwise data structures, enabling low-level manipulation of binary values. Used for implementing mathematical expressions and bit-level computations in performance-critical code.",
      "description_length": 349,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.UInt64.Infix",
      "description": "Provides arithmetic and bitwise operations for numeric types, including addition, subtraction, multiplication, division, modulus, and bit shifting. Works with integer and bitwise data structures, enabling low-level manipulation of binary values. Used for implementing mathematical expressions and bit-level transformations in performance-critical code.",
      "description_length": 352,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Unsigned.UInt.Infix",
      "description": "Provides arithmetic and bitwise operations for numeric types, including addition, subtraction, multiplication, division, modulus, and bit shifting. Works with integer and bitwise data structures, enabling low-level manipulation of binary values. Used for implementing mathematical expressions and bit-level computations in performance-critical code.",
      "description_length": 349,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.ULong.Infix",
      "description": "Provides arithmetic and bitwise operations for numeric types, including addition, subtraction, multiplication, division, modulus, and bit shifting. Works with integer and bitwise data structures, enabling low-level manipulation of binary values. Used for implementing mathematical expressions and bit-level computations in performance-critical code.",
      "description_length": 349,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.UInt16.Infix",
      "description": "Provides arithmetic and bitwise operations for numeric types, including addition, subtraction, multiplication, division, modulus, and bit shifting. Works with integer and bitwise data structures, enabling low-level manipulation and calculations. Used for implementing mathematical expressions, bit manipulation in algorithms, and optimizing performance-critical code.",
      "description_length": 367,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Signed.Int32.Infix",
      "description": "Provides arithmetic and bitwise operations for a type `t`, including addition, subtraction, multiplication, division, remainder, and bit shifting. Supports logical operations such as AND, OR, and XOR, as well as left and right bit shifts. Used for low-level numerical computations and bit manipulation in performance-critical code.",
      "description_length": 331,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Signed.Long.Infix",
      "description": "Provides arithmetic and bitwise operations for numeric types, including addition, subtraction, multiplication, division, modulus, and bit shifting. Supports logical operations such as AND, OR, and XOR, along with left and right shifts. Enables direct manipulation of integer values in low-level computations and bit-level processing.",
      "description_length": 333,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Signed.Int64.Infix",
      "description": "Provides arithmetic and bitwise operations for a numeric type, including addition, subtraction, multiplication, division, modulus, and bit shifting. Supports logical operations such as AND, OR, and XOR, along with left and right shifts. Enables direct manipulation of values in mathematical and low-level bitwork contexts.",
      "description_length": 322,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Signed.SInt.Infix",
      "description": "Provides arithmetic and bitwise operations for numeric types, including addition, subtraction, multiplication, division, remainder, and bit shifting. Works with integer and bitwise data structures, enabling low-level manipulation of binary values. Used for implementing mathematical expressions and bit-level transformations in performance-critical code.",
      "description_length": 354,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Signed.Int.Infix",
      "description": "Provides arithmetic and bitwise operations on values of type t, including addition, subtraction, multiplication, division, remainder, and bit shifting. Supports logical operations such as AND, OR, and XOR, along with left and right bit shifts. Enables direct manipulation of numeric or bit-level data in contexts like low-level computations or algorithmic transformations.",
      "description_length": 372,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Signed.LLong.Infix",
      "description": "Provides arithmetic and bitwise operations for numeric types, including addition, subtraction, multiplication, division, remainder, and bit shifting. Works with integer and bitwise data structures, enabling low-level manipulation of binary values. Used for implementing mathematical expressions and bit-level transformations in performance-critical code.",
      "description_length": 354,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.UChar",
      "description": "Performs arithmetic and bitwise operations on unsigned integer values, supporting addition, subtraction, multiplication, division, modulus, and bit shifting. Handles binary data manipulation through direct access to underlying numeric representations. Enables precise control over low-level data processing, such as packing and unpacking bitfields or optimizing numerical calculations. Examples include calculating checksums, managing flags, or performing efficient data serialization.",
      "description_length": 485,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.UInt8",
      "description": "Performs arithmetic and bitwise operations on 8-bit unsigned integers, including addition, multiplication, AND, OR, XOR, and shifts. Supports division, modulus, and logical operations for precise control over binary data. Enables efficient manipulation of raw byte values in systems programming and network protocols. Examples include packing multiple values into a single byte or extracting specific bits for processing.",
      "description_length": 421,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.UInt16",
      "description": "Performs arithmetic and bitwise operations on 16-bit unsigned integers, supporting addition, subtraction, multiplication, division, modulus, and bit shifting. Handles low-level data manipulation, enabling precise control over binary representations and numerical computations. Examples include calculating checksums, managing flags, and optimizing performance-sensitive algorithms. Supports efficient operations on integer and bitwise structures for system-level programming.",
      "description_length": 475,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Unsigned.UInt32",
      "description": "Handles 32-bit unsigned integer arithmetic and bitwise operations, including addition, subtraction, multiplication, division, modulus, and shifts. Supports direct manipulation of binary representations for low-level computations. Enables efficient implementation of mathematical expressions and bit-level logic. Examples include calculating hash values, managing flags, and performing efficient numeric transformations.",
      "description_length": 419,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Unsigned.UInt64",
      "description": "Performs arithmetic and bitwise operations on 64-bit unsigned integers, supporting addition, subtraction, multiplication, division, modulus, and bit shifting. Handles binary data manipulation through direct access to integer bits, enabling precise control over numeric representations. Examples include calculating modular inverses, performing bit masking, and optimizing low-level data processing. Supports efficient implementation of cryptographic algorithms and system-level programming tasks.",
      "description_length": 496,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.Size_t",
      "description": "Manages unsigned integer operations with support for arithmetic and bitwise manipulations, including addition, subtraction, multiplication, division, modulus, and bit shifting. Handles integer and bitwise data structures, allowing precise control over binary representations. Enables efficient implementation of mathematical expressions and low-level bit operations. Examples include calculating modular inverses, performing bit masking, and optimizing memory-related computations.",
      "description_length": 481,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Unsigned.UShort",
      "description": "Performs arithmetic and bitwise operations on unsigned 16-bit integers, including addition, multiplication, division, and logical operations like AND, OR, and XOR. Supports bit shifting left and right, enabling precise control over binary data. Operations are optimized for speed, making them suitable for systems programming and embedded applications. Examples include combining flags, masking bits, and performing efficient integer arithmetic in constrained environments.",
      "description_length": 473,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.UInt",
      "description": "Performs arithmetic and bitwise operations on unsigned integers, supporting addition, subtraction, multiplication, division, modulus, and bit shifting. Handles integer and bitwise data structures, enabling precise control over binary representations. Operations include combining bits, isolating sections of data, and performing efficient numerical calculations. Examples include masking bits, rotating values, and implementing custom numeric algorithms.",
      "description_length": 454,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.ULong",
      "description": "Performs arithmetic and bitwise operations on unsigned integers, supporting addition, subtraction, multiplication, division, modulus, and bit shifting. Handles binary data manipulation with efficient, low-level operations suitable for performance-sensitive applications. Examples include calculating large numeric expressions, masking bits, and optimizing data serialization. Supports direct interaction with integer and bitwise data structures for precise control over binary representations.",
      "description_length": 493,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.ULLong",
      "description": "Performs arithmetic and bitwise operations on large integer values, supporting addition, subtraction, multiplication, division, modulus, and bit shifting. Handles both standard and arbitrary-precision integers, enabling precise control over numerical computations. Operations include converting between numeric types, performing bitwise logic, and managing overflow in low-level contexts. Examples include calculating large factorials, implementing bit manipulation algorithms, and optimizing numerical processing in system-level code.",
      "description_length": 535,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Signed.Int",
      "description": "Performs arithmetic and bitwise operations on signed integers, including addition, subtraction, multiplication, division, and bit shifts. Supports logical operations like AND, OR, and XOR, enabling manipulation of both numeric and bit-level data. Operations are suitable for tasks such as implementing algorithms requiring bit-level control or numerical transformations. Examples include calculating remainders, performing bitwise masking, and adjusting values through shifts.",
      "description_length": 476,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Signed.Int32",
      "description": "Handles 32-bit signed integer arithmetic and bitwise operations, including addition, subtraction, multiplication, division, and bit shifts. Supports logical operations like AND, OR, and XOR, enabling precise control over binary data. Operations are optimized for efficiency, making them suitable for systems programming and algorithmic tasks. Examples include masking bits, performing efficient divisions, and manipulating flags in low-level data structures.",
      "description_length": 458,
      "index": 27,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Signed.Int64",
      "description": "Offers arithmetic and bitwise operations for 64-bit signed integers, including addition, subtraction, multiplication, division, modulus, and shifts. Supports logical operations like AND, OR, and XOR, enabling precise control over integer values. Users can perform mathematical computations and bit-level manipulations efficiently. Examples include calculating large integer expressions, masking bits, and implementing low-level data processing.",
      "description_length": 444,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Signed.SInt",
      "description": "Performs arithmetic and bitwise operations on signed integers, supporting addition, subtraction, multiplication, division, remainder, and bit shifting. Handles binary data manipulation through integer representations, enabling precise control over bit-level structures. Examples include calculating signed integer divisions, performing bitwise AND/OR/NOT, and shifting bits for data encoding. Used in systems programming and low-level algorithm implementation.",
      "description_length": 460,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Signed.Long",
      "description": "Performs arithmetic and bitwise operations on signed long integers, including addition, subtraction, multiplication, division, modulus, and shifts. Supports logical operations like AND, OR, and XOR, enabling precise control over bit-level data. Operations allow manipulation of integer values in low-level contexts, such as setting or extracting specific bits. Examples include calculating remainders, combining flags with OR, and adjusting values through bit shifting.",
      "description_length": 469,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Signed.LLong",
      "description": "Performs arithmetic and bitwise operations on signed 64-bit integers, supporting addition, subtraction, multiplication, division, remainder, and bit shifts. Handles binary data manipulation through direct access to integer representations, enabling precise control over bit patterns. Supports operations like masking, rotation, and scaling for low-level numeric processing. Examples include calculating large integer expressions, extracting bit fields, and implementing custom encoding schemes.",
      "description_length": 494,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Unsigned.Infix",
      "description": "Provides arithmetic and bitwise operations for numeric types, including addition, subtraction, multiplication, division, modulus, and bit shifting. Works with integer and bitwise data structures, enabling low-level manipulation and calculations. Used for implementing mathematical expressions, bit manipulation in algorithms, and optimizing performance-critical code.",
      "description_length": 367,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Signed.Infix",
      "description": "Provides arithmetic and bitwise operations on values of type t, including addition, subtraction, multiplication, division, remainder, and bit shifts. Supports logical operations such as AND, OR, and XOR, as well as left and right bit shifting. Used for low-level numerical computations and bit manipulation in performance-critical code.",
      "description_length": 336,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "integers",
      "description": "Provides arithmetic operations, bitwise manipulations, and type conversions for fixed-size integers, including 8-, 16-, 32-, and 64-bit signed and unsigned variants. Works with custom integer types that mirror standard library modules but extend support for platform-dependent types like long and size_t. Used for low-level system programming, network protocol parsing, and embedded systems where precise control over integer representation is required.",
      "description_length": 453,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Unsigned",
      "description": "Provides infix operators for arithmetic and bitwise operations on unsigned integers, including addition, subtraction, multiplication, division, remainder, and bit shifts. Works with the `t` type, representing unsigned integers of arbitrary size. Enables efficient manipulation of binary data and low-level numeric computations.",
      "description_length": 327,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Integer_printers",
      "description": "Formats signed and unsigned integer types with specific bit widths using OCaml's Format module, supporting representations from 8-bit to 64-bit. Each function binds a distinct integer type to a formatter for consistent output formatting. Used to generate human-readable string representations of integer values in low-level data processing tasks.",
      "description_length": 346,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Signed",
      "description": "Performs arithmetic and bitwise operations on values of type `t`, including addition, subtraction, multiplication, division, remainder, and bit shifts. Supports logical operations such as AND, OR, and XOR, as well as left and right bit shifting. Used for low-level numeric manipulations in cryptographic algorithms and binary data processing.",
      "description_length": 342,
      "index": 37,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 39,
    "meaningful_modules": 38,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9743589743589743
  },
  "statistics": {
    "max_description_length": 535,
    "min_description_length": 322,
    "avg_description_length": 401.2105263157895,
    "embedding_file_size_mb": 0.12053585052490234
  }
}