{
  "package": "hxd",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:06:33.530967",
  "modules": [
    {
      "module_path": "Hxd_string",
      "library": "hxd.string",
      "description": "This module processes and formats hexadecimal string data with configurable output options. It supports operations for converting strings to hexadecimal representations, generating formatted output, and pretty-printing with positional control. Concrete use cases include binary data inspection, hex dump generation, and structured hexadecimal visualization.",
      "description_length": 357,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hxd_unix",
      "library": "hxd.unix",
      "description": "Implements hexadecimal dumping of input channel data to an output channel, supporting absolute or relative byte offsets. Works with standard input/output channels, configuration values, and format specifiers. Useful for inspecting binary file contents or network streams directly from the command line.",
      "description_length": 302,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hxd_lwt",
      "library": "hxd.lwt",
      "description": "This module implements a streaming hexadecimal dumper that reads data chunks from an Lwt-based input source and writes formatted hexadecimal output through a provided writer function. It processes input as a sequence of (string * int * int) option values, representing buffers, offsets, and lengths. The `generate` function drives the transformation, using an Hxd configuration and a formatter to control output layout.",
      "description_length": 419,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hxd.Fmt",
      "library": "hxd.core",
      "description": "This module formats and serializes binary data into colored or plain ASCII hexdumps for human-readable output. It supports custom styling through ANSI escape codes, including foreground and background colors in standard, bright, 8-bit, 24-bit, and grayscale modes. Use it to visualize binary structures in a terminal or log file with optional syntax highlighting.",
      "description_length": 363,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hxd.Make",
      "library": "hxd.core",
      "description": "This module defines injection and projection operations between a structured type `'a s` and a hexdump-compatible representation `t`. It enables converting values to and from a format suitable for human-readable hexdump serialization, supporting data types that the enclosing `Hxd` module can render. Use this when encoding or decoding binary data structures to and from hexdump strings, particularly when working with custom data representations that need to be visualized or transmitted safely.",
      "description_length": 496,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hxd",
      "library": "hxd.core",
      "description": "This module serializes binary data into human-readable hexdumps with optional ANSI color styling, supporting configurable formatting such as case, grouping, and column layout. It operates on byte sequences and integrates with `Format.formatter` for styled output, enabling use cases like generating terminal-friendly memory dumps or embedding binary data in source code as OCaml values. The child modules enhance this functionality by providing direct control over color styling via ANSI escape codes and defining conversions between structured types and hexdump-compatible representations. These features allow for precise visualization and transformation of binary data structures, both for display and for encoding or decoding custom binary formats.",
      "description_length": 752,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 752,
    "min_description_length": 302,
    "avg_description_length": 448.1666666666667,
    "embedding_file_size_mb": 0.022230148315429688
  }
}