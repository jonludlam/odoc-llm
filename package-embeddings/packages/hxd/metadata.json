{
  "package": "hxd",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T23:02:49.111615",
  "modules": [
    {
      "module_path": "Hxd_unix",
      "library": "hxd.unix",
      "description": "Implements hexadecimal dumping of input channel data to an output channel, supporting absolute or relative byte offsets. Works with standard input/output channels, configuration values, and format printers. Useful for inspecting binary file contents or network streams directly from the command line.",
      "description_length": 300,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hxd_lwt",
      "library": "hxd.lwt",
      "description": "This module defines functions for processing input and output streams asynchronously using Lwt. It handles input sources that produce string chunks with positions and output sinks that consume them, coordinating the flow of data through a configuration. A typical use case involves streaming large text files or network data incrementally while tracking line and column positions.",
      "description_length": 380,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hxd_string",
      "library": "hxd.string",
      "description": "This module handles string-to-hex and hex-to-string conversions with configurable formatting. It works with strings and structured configuration values, supporting absolute or relative length specifications. Concrete use cases include encoding binary data for display, parsing hex dumps, and generating formatted hex output for debugging or serialization.",
      "description_length": 355,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hxd.Make",
      "library": "hxd.core",
      "description": "This module defines injection and projection functions for converting between a structured type `'a s` and a serialization type `t`. It operates on values that represent serializable data forms, enabling transformations suitable for ASCII representation. Use it to encode custom data structures into a format suitable for hex dumping or mail-safe transmission.",
      "description_length": 360,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hxd.Fmt",
      "library": "hxd.core",
      "description": "This module formats binary data into colored hexadecimal representations using OCaml's `Format.formatter`. It supports ANSI color codes for foreground and background styling with standard, bright, 8-bit, 24-bit, and grayscale color types. Use it to generate readable hex dumps with syntax highlighting in terminals or formatted output streams.",
      "description_length": 343,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hxd",
      "library": "hxd.core",
      "description": "This module handles binary data serialization into colored hexadecimal formats, supporting ASCII styling with various color types. It works with configurations for formatting options and color schemes, enabling generation of readable hex dumps or OCaml list/array representations. Use it to produce syntax-highlighted hex dumps in terminals or serialize binary data into structured ASCII formats for transmission.",
      "description_length": 413,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 413,
    "min_description_length": 300,
    "avg_description_length": 358.5,
    "embedding_file_size_mb": 0.08736038208007812
  }
}