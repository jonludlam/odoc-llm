{
  "package": "ocamlgraph_gtk",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 18,
  "creation_timestamp": "2025-08-15T12:20:55.858613",
  "modules": [
    {
      "module_path": "Graph_gtk.DGraphContainer.Make.Tree.V",
      "library": "ocamlgraph_gtk",
      "description": "This module represents vertices in a tree structure where each vertex has a unique label and supports comparison, hashing, and equality checks. It provides functions to create vertices from labels and retrieve their labels. It is used to manage labeled tree nodes in a graph visualization context, particularly when vertex identity and ordering matter.",
      "description_length": 352,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Make.Tree.E",
      "library": "ocamlgraph_gtk",
      "description": "This module implements a directed edge structure with ordered comparison, supporting creation of edges between vertices with labels and retrieval of edge properties. It works with vertices and edges in a tree structure, where edges are uniquely determined by their source, destination, and label. Concrete use cases include representing labeled transitions in a tree-based graph and enabling ordered traversal or comparison of edges in graph algorithms.",
      "description_length": 453,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot.Tree.E",
      "library": "ocamlgraph_gtk",
      "description": "This module implements directed edges with labels, supporting creation of edges between vertices with associated labels and comparison operations. It defines a type `t` for edges, a `compare` function for ordering edges, and functions `src`, `dst`, and `label` to access the origin, destination, and label of an edge. A concrete use case is representing labeled control flow edges in a graphical CFG (Control Flow Graph) viewer.",
      "description_length": 428,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot.Tree.V",
      "library": "ocamlgraph_gtk",
      "description": "This module defines a labeled vertex type for a directed graph structure, where each vertex is uniquely identified and supports comparison, hashing, and equality checks. It works with comparable vertex values and string-like labels representing vertex identities. It is used to construct and manipulate tree-based graph nodes in a DOT format visualization context.",
      "description_length": 364,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Make.GView",
      "library": "ocamlgraph_gtk",
      "description": "This module creates a graphical view of a directed graph using the Gnome Canvas, supporting zooming and scrolling. It works with vertices, edges, and clusters from a directed graph model, rendering them interactively. Use it to visualize complex graph structures with dynamic layout adjustments and real-time user interaction.",
      "description_length": 326,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot.TView",
      "library": "ocamlgraph_gtk",
      "description": "This module provides a function `view` to render a directed graph model with vertices, edges, and clusters as a scrollable and zoomable Gnome Canvas widget. It supports dynamic delay of node, edge, and cluster rendering through optional predicate functions and allows configuration of visual properties like border width, dimensions, and packing behavior. Concrete use cases include visualizing hierarchical data structures, dependency graphs, or network topologies with interactive exploration.",
      "description_length": 495,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Make.Tree",
      "library": "ocamlgraph_gtk",
      "description": "This module supports operations for constructing and navigating hierarchical directed tree structures with labeled vertices and edges, enabling efficient degree calculations, successor/predecessor queries, and property-based comparisons. It works with typed graph components like `Tree.vertex`, `Tree.edge`, and `Tree.t`, offering transformations through mapping, folding, and iterative processing of graph elements. Specific use cases include dependency resolution, tree-based data aggregation, and hierarchical data visualization workflows.",
      "description_length": 542,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Make.TView",
      "library": "ocamlgraph_gtk",
      "description": "This module creates a scrollable, zoomable graphical view of a directed graph using the Gnome Canvas widget. It takes a graph model with vertices, edges, and clusters and renders them visually, supporting dynamic layout adjustments and interactive navigation. Use it to display complex tree-based structures or dependency graphs with customizable rendering delays for performance optimization.",
      "description_length": 393,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot.GView",
      "library": "ocamlgraph_gtk",
      "description": "This module creates a graphical view of directed graphs using the Gnome Canvas, supporting interactive features like zooming and scrolling. It works with vertex, edge, and cluster types to render and manipulate graph elements dynamically. Use it to visualize complex graph structures with customizable rendering delays and layout parameters.",
      "description_length": 341,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot.Tree",
      "library": "ocamlgraph_gtk",
      "description": "This module provides directed graph manipulation capabilities centered on labeled vertices and edges, enabling creation, structural queries (like membership checks and degree calculations), and traversal operations. It supports transformations through mapping and folding over graph elements while preserving label information, with specialized handling for incoming/outgoing edge relationships. Designed for DOT format compatibility, it facilitates tasks like hierarchical layout generation and dependency visualization in directed acyclic graphs.",
      "description_length": 548,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Make",
      "library": "ocamlgraph_gtk",
      "description": "This module instantiates a graph container for directed graphs with customizable views and interaction handlers. It works with graph structures composed of typed vertices, edges, and clusters, supporting operations like graph initialization, view creation, and command integration. Concrete use cases include building interactive graph editors, visualizing dependency hierarchies, and embedding navigable graph displays in GTK-based applications.",
      "description_length": 446,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot",
      "library": "ocamlgraph_gtk",
      "description": "This module renders DOT-formatted directed graphs using GTK-based visualization components, supporting interactive exploration through zooming, scrolling, and dynamic layout adjustments. It works with labeled vertices and edges structured according to the DOT format, enabling hierarchical and clustered graph representations. Concrete use cases include visualizing build dependencies, control flow graphs, and networked data structures with interactive rendering controls.",
      "description_length": 473,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphView.Make",
      "library": "ocamlgraph_gtk",
      "description": "Creates a graphical view for a directed graph model with support for zooming and scrolling. It uses customizable delay functions to control the display timing of nodes, edges, and clusters, improving rendering performance when handling large graphs. This module works directly with vertex, edge, and cluster data types provided by the model to render them on a canvas.",
      "description_length": 368,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer",
      "library": "ocamlgraph_gtk",
      "description": "This module manages directed graph containers with support for clusters, customizable views, and interaction handling. It works with typed vertices, edges, and string-labeled clusters, offering operations for graph creation, view management, and command integration. Use it to build interactive graph editors, visualize dependency hierarchies, or embed navigable graph displays in GTK applications.",
      "description_length": 398,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphViewItem",
      "library": "ocamlgraph_gtk",
      "description": "This module defines view items for rendering nodes, edges, and clusters in a graphical graph representation. It supports operations to create visual elements with customizable shapes and text, using RGBA colors, line widths, and dash patterns. Concrete use cases include displaying graph structures with styled vertices and edges, such as visualizing network topologies or dependency graphs.",
      "description_length": 391,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphView",
      "library": "ocamlgraph_gtk",
      "description": "This module provides functions to control the delayed display of graph elements such as nodes, edges, and clusters, improving rendering efficiency by deferring visual updates. It works with graph structures displayed on a canvas, supporting zooming and scrolling operations. Concrete use cases include dynamically adjusting graph layouts in GUI applications without immediate redrawing, enhancing performance during batch updates or interactive manipulations.",
      "description_length": 459,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.PangoMeasure",
      "library": "ocamlgraph_gtk",
      "description": "Creates a Pango context with specified font settings and measures the width and height of a given string. Works with Pango contexts, font names, and string values. Useful for determining text layout metrics in GUI applications using GTK.",
      "description_length": 237,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk",
      "library": "ocamlgraph_gtk",
      "description": "This module provides components for building and rendering interactive directed graphs in GTK applications. It supports graph structures with typed vertices, edges, and labeled clusters, along with visual customization and delayed rendering for performance. Use it to implement graph editors, dependency visualizers, and interactive network topology displays with precise control over layout and appearance.",
      "description_length": 407,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 28,
    "meaningful_modules": 18,
    "filtered_empty_modules": 10,
    "retention_rate": 0.6428571428571429
  },
  "statistics": {
    "max_description_length": 548,
    "min_description_length": 237,
    "avg_description_length": 412.27777777777777,
    "embedding_file_size_mb": 0.26120662689208984
  }
}