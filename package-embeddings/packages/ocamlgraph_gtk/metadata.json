{
  "package": "ocamlgraph_gtk",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 25,
  "creation_timestamp": "2025-07-15T23:11:41.412422",
  "modules": [
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot.Tree.E",
      "library": "ocamlgraph_gtk",
      "description": "This module represents directed edges in a graph structure, where each edge has a source vertex, a destination vertex, and a label. It provides operations to create edges with labels, retrieve source and destination vertices, and access edge labels. Concrete use cases include modeling relationships between nodes in a dependency graph or representing transitions in a state machine with labeled edges indicating actions or conditions.",
      "description_length": 435,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Make.Tree.E",
      "library": "ocamlgraph_gtk",
      "description": "This module represents directed edges in a graph with ordered comparison and labeling. It provides operations to create edges between vertices with labels, retrieve edge labels, and determine the source and destination vertices of an edge. Use this module when building or manipulating tree-based graphs where edges need to be uniquely ordered and labeled.",
      "description_length": 356,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Make.Tree.V",
      "library": "ocamlgraph_gtk",
      "description": "This module implements a container for vertices in a directed graph, where each vertex is uniquely identified by a label and supports comparison, hashing, and equality checks. It provides operations to create vertices from labels and to retrieve the label of a vertex. This module is useful when building tree-like graph structures where vertices must be efficiently compared and stored.",
      "description_length": 387,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot.Tree.V",
      "library": "ocamlgraph_gtk",
      "description": "This module defines a labeled, comparable vertex type for use in graph structures, specifically within a DOT tree representation. It provides operations to create vertices from labels, retrieve labels from vertices, and compare, hash, or check equality of vertices. The vertex labels are of type `Graph_gtk.DGraphContainer.Dot.vertex`, and vertices themselves are treated as distinct values that can be efficiently managed in sets or maps.",
      "description_length": 439,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Make.TView",
      "library": "ocamlgraph_gtk",
      "description": "This module creates a GTK view for a directed graph model with support for vertices, edges, and clusters. It renders the graph on a Gnome Canvas, enabling interactive zooming and scrolling. Use it to visualize complex hierarchical graphs in a GTK application, such as dependency trees or network topologies.",
      "description_length": 307,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot.TView",
      "library": "ocamlgraph_gtk",
      "description": "This module renders a directed graph model as a scrollable, zoomable GNOME canvas view. It supports customizable delays for node, edge, and cluster rendering, along with standard display parameters like size and border width. Concrete use cases include visualizing complex hierarchical graphs with interactive navigation.",
      "description_length": 321,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot.GView",
      "library": "ocamlgraph_gtk",
      "description": "This module creates a graphical view of a directed graph using the Gnome Canvas, supporting interactive features like zooming and scrolling. It works with vertex, edge, and cluster types to render and manage visual elements dynamically. Use it to display complex graph structures with customizable layout and interaction behaviors.",
      "description_length": 331,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Make.GView",
      "library": "ocamlgraph_gtk",
      "description": "This module creates a graphical view of a directed graph model with support for zooming and scrolling on a Gnome Canvas. It handles vertices, edges, and clusters, allowing conditional delays for rendering elements based on predicates. Concrete use cases include visualizing complex dependency graphs or network structures with interactive navigation.",
      "description_length": 350,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Make.Tree",
      "library": "ocamlgraph_gtk",
      "description": "This module provides directed tree graph operations with vertex and edge management, supporting membership checks, degree calculations, and directional traversal. It uses modular vertex and edge types to enable functional transformations like mapping and labeled edge accumulation, facilitating tasks such as dependency analysis and hierarchical data processing. The edge submodule handles labeled, ordered connections between vertices, allowing creation and inspection of directed relationships, while the vertex submodule manages unique, label-based identifiers with comparison and hashing support. Together, they enable constructing, analyzing, and transforming tree-structured graphs with precise control over nodes and directed links.",
      "description_length": 739,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot.Tree",
      "library": "ocamlgraph_gtk",
      "description": "This module provides directed graph manipulation capabilities centered on traversal, transformation, and analysis, using structured vertex and edge types. It supports operations to count and inspect graph elements, navigate neighborhoods, and iterate over edges, enabling tasks like dependency resolution and pathfinding. Vertices are labeled and comparable values managed through set and map operations, while edges connect source and destination vertices with associated labels, modeling relationships or transitions. Together, these components allow building and analyzing complex graph structures with rich connectivity information.",
      "description_length": 636,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.S-GView",
      "library": "ocamlgraph_gtk",
      "description": "This module creates a scrollable, zoomable graphical view of a directed graph with support for vertices, edges, and clusters. It allows configuration of rendering parameters such as anti-aliasing, delay predicates for elements, and widget properties like size and border width. Concrete use cases include visualizing complex dependency graphs or network topologies with dynamic element rendering.",
      "description_length": 396,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graph_gtk.DGraphView.S",
      "library": "ocamlgraph_gtk",
      "description": "Implements a GTK-based canvas view for displaying directed graphs with support for dynamic node, edge, and cluster rendering delays. Works with vertex, edge, and cluster types from an abstract graph model to enable efficient, interactive visualizations with zooming and scrolling. Suitable for real-time graph exploration tools where rendering performance and incremental display are critical.",
      "description_length": 393,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.S-TView",
      "library": "ocamlgraph_gtk",
      "description": "This module creates a scrollable, zoomable graphical view of a directed graph using the Gnome Canvas, supporting dynamic node and edge rendering. It works with vertex, edge, and cluster types defined in the Tree module, integrating directly with the DGraphModel abstract graph model. Concrete use cases include visualizing hierarchical tree structures with interactive layout adjustments and real-time rendering of graph changes.",
      "description_length": 429,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Make",
      "library": "ocamlgraph_gtk",
      "description": "This module builds a GTK container for interactive directed graph visualization, integrating graph data structures with rendering and user interaction. It initializes graph views with customizable layout, callbacks, and navigation, supporting use cases like control flow graphs and dependency trees. The graph view modules render vertices, edges, and clusters on a Gnome Canvas with zooming and scrolling, while the tree graph submodule provides core operations for constructing, analyzing, and transforming hierarchical graphs. With labeled edges, unique vertices, and directional traversal, it enables precise manipulation of graph topology and visual representation in tandem.",
      "description_length": 679,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.S",
      "library": "ocamlgraph_gtk",
      "description": "This module manages directed graphs with vertices, edges, and clusters, supporting dynamic layout and visualization through associated view types. It provides operations for constructing, modifying, and rendering graph structures, including tree-based hierarchies and clustered subgraphs. Concrete use cases include interactive graph editors, visual debuggers, and hierarchical data viewers where real-time layout updates are required.",
      "description_length": 435,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.Dot",
      "library": "ocamlgraph_gtk",
      "description": "This module creates interactive GTK views of directed graphs from DOT strings, combining visualization and manipulation capabilities. It supports vertex, edge, and cluster data types to build and render hierarchical structures like control flow graphs or dependency trees, with features such as zooming, scrolling, and customizable rendering delays. The graph view integrates with packing widgets and status bars for enhanced display control. Submodules handle canvas rendering, dynamic element management, and graph analysis tasks such as traversal and pathfinding.",
      "description_length": 566,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.S-Tree-V",
      "library": "ocamlgraph_gtk",
      "description": "This module represents vertices in a tree structure with labeled nodes, supporting comparison, hashing, and equality checks. It works with comparable vertex types where each vertex is identified by a label of the same type. Concrete use cases include managing node identities in tree-based data structures, ensuring efficient lookups and comparisons during graph operations.",
      "description_length": 374,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.S-Tree-E",
      "library": "ocamlgraph_gtk",
      "description": "This module represents directed edges in a graph with ordered types, providing operations to create edges, retrieve their source and destination vertices, and access edge labels. It works with vertices and edges as part of a tree structure, where edges are uniquely identified and ordered. Concrete use cases include building and manipulating tree-based graph structures where edge direction and labels are significant, such as representing control flow graphs or dependency trees.",
      "description_length": 481,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer.S-Tree",
      "library": "ocamlgraph_gtk",
      "description": "This structure provides functions to analyze and manipulate directed graph relationships through membership checks, degree calculations, and neighbor traversal, along with transformation operations like mapping and folding over vertices and edges. It operates on hierarchical graph representations with dedicated types for nodes and directed connections, enabling tasks like dependency tracking, path analysis, and localized or global graph processing. Applications include modeling hierarchical data flows, resolving node dependencies, and transforming graph components through iterative or recursive operations.",
      "description_length": 613,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphView.Make",
      "library": "ocamlgraph_gtk",
      "description": "Creates a GTK canvas view for a directed graph model with support for zooming and scrolling. It allows delaying the display of nodes, edges, or clusters using customizable boolean functions. This module works directly with vertex, edge, and cluster types provided by the `V`, `E`, and `C` modules. Useful for visualizing large dynamic graphs where rendering performance is critical, enabling on-demand element display to improve responsiveness.",
      "description_length": 444,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.PangoMeasure",
      "library": "ocamlgraph_gtk",
      "description": "Creates a Pango context with specified font settings and measures the width and height of a given string. Works with Pango contexts, font names, and string values. Useful for determining text layout metrics in GUI applications using GTK.",
      "description_length": 237,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphViewItem",
      "library": "ocamlgraph_gtk",
      "description": "This module defines view items for rendering nodes, edges, and clusters in a graphical graph representation. It supports customization of visual properties such as fill color, outline color, line width, and dash patterns using the `shape_p` type. It is used to display graph elements with specific layouts and styling in a GTK-based interface.",
      "description_length": 343,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphContainer",
      "library": "ocamlgraph_gtk",
      "description": "This module organizes hierarchical graph structures with nodes, edges, and string-based clusters, enabling status tracking and dynamic layout adjustments for interactive visualization. It supports operations to build, modify, and analyze directed graphs, with key types including labeled vertices, ordered edges, and clustered subgraphs. The module integrates with GTK and Gnome Canvas for rendering views with zooming, scrolling, and customizable display parameters, suitable for visualizing dependency trees or control flow graphs. Submodules handle core graph analysis, dynamic element rendering, and tree-based hierarchical manipulation, allowing real-time updates and interactive editing of complex graph topologies.",
      "description_length": 721,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk.DGraphView",
      "library": "ocamlgraph_gtk",
      "description": "This module controls the display timing of graph elements in a GTK-based directed graph viewer, allowing nodes, edges, and clusters to be rendered immediately or delayed based on customizable boolean functions. It integrates with dynamic graph models to support efficient, interactive visualizations where rendering performance matters, such as incrementally displaying large graphs. The main data types include vertex, edge, and cluster representations from the graph model, with operations to set delay conditions for each element type. Submodules provide concrete GTK canvas views with zooming, scrolling, and on-demand rendering, enabling real-time exploration of complex graph structures.",
      "description_length": 693,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graph_gtk",
      "library": "ocamlgraph_gtk",
      "description": "This module supports the creation and interactive visualization of directed graphs using GTK, integrating text layout, visual styling, hierarchical structure, and rendering control. It provides key data types including labeled vertices, ordered edges, clusters, and customizable visual properties like colors and shapes, with operations for building, modifying, and analyzing graph structures. You can measure text for GUI layout, style graph elements, dynamically adjust hierarchies, and control rendering timing for performance. Example uses include visualizing dependency trees with custom node styling, interactive control flow graphs with real-time updates, and large-scale graph exploration with on-demand rendering.",
      "description_length": 722,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 36,
    "meaningful_modules": 25,
    "filtered_empty_modules": 11,
    "retention_rate": 0.6944444444444444
  },
  "statistics": {
    "max_description_length": 739,
    "min_description_length": 237,
    "avg_description_length": 473.08,
    "embedding_file_size_mb": 0.09125614166259766
  }
}