{
  "package": "topology",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 47,
  "creation_timestamp": "2025-06-18T16:41:51.903985",
  "modules": [
    {
      "module_path": "Network_Common.Net.Topology.Vertex",
      "description": "Compares vertex identifiers and converts them to string representations suitable for graph visualization formats like DOT and Mininet. Processes attributes from DOT and GML files to construct vertex objects. Works with node data structured as part of graph representations in various formats.",
      "description_length": 292,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Net.Topology.Edge",
      "description": "Provides comparison, string conversion, and DOT format serialization for graph edges. Processes GML and DOT attributes to construct edge representations. Uses Link.t as the underlying type for edge data.",
      "description_length": 203,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Net.Topology.UnitWeight",
      "description": "Calculates the weight of a labeled edge, compares two weights, and adds them together. It operates on integer weights and edge labels. Used to manage and combine edge weights in graph algorithms.",
      "description_length": 195,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Net.Topology.EdgeSet",
      "description": "This module provides set operations for managing edge collections, including membership checks, modifications, and combinatory functions like unions and intersections, alongside edge-specific queries such as finding extremal elements or partitioning sets. It works with an abstract type representing edge sets, enabling efficient traversal, predicate-based searches, and structural inspections. Use cases include graph processing tasks requiring dynamic edge management or analytical operations on network structures.",
      "description_length": 517,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Net.Topology.VertexSet",
      "description": "This module provides set operations such as membership checks, unions, intersections, and predicate-based filtering, along with vertex-specific queries like retrieving minimum/maximum elements or splitting sets. It works with a `t` type representing vertex sets and an `elt` alias for `vertex`, enabling efficient manipulation of structured data. Use cases include graph processing tasks, where operations like vertex selection or set partitioning are critical for analysis.",
      "description_length": 474,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Net.Topology.VertexHash",
      "description": "Provides operations to manage a hash table where keys are vertices and values are arbitrary types. Supports adding, removing, looking up, and iterating over entries, along with in-place filtering and statistical analysis. Used to track properties of graph nodes, such as labels or metadata, during graph processing tasks.",
      "description_length": 321,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Net.Topology.PortSet",
      "description": "The module provides set operations such as membership checks, unions, intersections, and transformations for generic elements, alongside specialized functions for managing port collections, including querying min/max values, splitting sets, and predicate-based searches. It works with abstract set types containing either arbitrary elements or port-specific data, enabling efficient manipulation of dynamic port configurations or resource allocations. Use cases include network protocol management, where precise control over port ranges and intersections is required, or system-level resource tracking with flexible set operations.",
      "description_length": 632,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Network.Make.Topology.Vertex",
      "description": "Compares vertices based on their internal representation, converts them to string formats for graph visualization, and parses attributes from DOT and GML formats into vertex objects. Operates on vertex identifiers and associated metadata stored in attribute lists or value lists. Used to generate graph descriptions for tools like Graphviz and Mininet, and to construct vertex data from structured input files.",
      "description_length": 410,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Make.Topology.Edge",
      "description": "Provides comparison, string conversion, and DOT format serialization for graph edges. Processes GML and DOT attributes to construct edge representations. Used to standardize edge data during graph parsing and visualization.",
      "description_length": 223,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Network.Make.Topology.UnitWeight",
      "description": "Calculates the weight of a labeled edge, compares two weights, and adds them together. It operates on integer weights and edge labels. Used to manage and combine edge weights in graph algorithms.",
      "description_length": 195,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Make.Topology.EdgeSet",
      "description": "This module provides set operations such as union, intersection, membership checks, and transformations on ordered edge collections, along with traversal and partitioning functions like min/max retrieval and predicate-based searches. It works with a custom ordered set type representing edges, enabling efficient manipulation of structured edge data. Use cases include graph processing tasks like pathfinding or connectivity analysis, where dynamic edge set management is critical.",
      "description_length": 481,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Make.Topology.VertexSet",
      "description": "This module provides set manipulations and vertex-specific queries, including membership checks, unions, intersections, and element retrieval, alongside operations like finding min/max elements or splitting sets. It works with a `t` type representing vertex collections and an `elt` type for individual vertices, enabling efficient traversal and predicate-based filtering. Use cases include graph processing tasks such as tracking connected components or analyzing network structures.",
      "description_length": 484,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Make.Topology.VertexHash",
      "description": "Provides operations to manage a hash table where keys are vertices and values are arbitrary types. Supports adding, removing, looking up, and iterating over entries, along with in-place filtering and statistical analysis. Used to track properties of graph nodes, such as labels or attributes, during graph processing tasks.",
      "description_length": 323,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Network.Make.Topology.PortSet",
      "description": "This module provides standard set operations\u2014such as membership checks, unions, intersections, and transformations\u2014alongside port-specific queries like finding minimum/maximum values, splitting sets, and predicate-based searches. It works with sets of port values, enabling efficient manipulation and analysis of port ranges or configurations. Use cases include network protocol management, firewall rule generation, and resource allocation where precise port handling is critical.",
      "description_length": 481,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Network_Common.Net.Topology",
      "description": "manages graph structures by handling vertex and edge data, their attributes, and relationships through specialized set operations and weight calculations. It supports vertex and edge comparisons, string serialization, and operations on sets of vertices, edges, and ports, along with hash tables for node properties. Functions include calculating edge weights, combining sets, and filtering based on predicates, enabling tasks like graph visualization, network analysis, and resource management. Examples include converting vertex identifiers to DOT format, merging edge sets, and aggregating weighted edges for pathfinding algorithms.",
      "description_length": 634,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Net.Traverse",
      "description": "Performs breadth-first and depth-first traversal of graph structures, applying a given function to each vertex. Operates on graph topologies represented by the Topology module. Used to explore nodes in a structured manner for tasks like network analysis or dependency resolution.",
      "description_length": 279,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Net.Path",
      "description": "Calculates the weight of a label, compares paths for ordering, and combines paths by addition. It operates on a custom path type and uses edge labels from the Topology module. This supports tasks like graph traversal analysis and path cost aggregation.",
      "description_length": 252,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Net.UnitPath",
      "description": "Computes shortest paths between vertices in a graph using edge lists, with support for single-source and all-pairs shortest path calculations. Operates on graph topologies and vertex identifiers, returning path details or weights. Used for route optimization and network analysis tasks.",
      "description_length": 286,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Net.Parse",
      "description": "Loads network topology from a DOT file or a GML file, returning a structured representation of the network. Works with string inputs and produces a `Topology.t` data structure. Used to initialize network models from external configuration files.",
      "description_length": 245,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Net.Pretty",
      "description": "Generates string representations of network topologies, including a human-readable format, a DOT language format for visualization, and a Mininet script with optional prologue and epilogue files. Operates on the Topology.t data type, which models network node and link configurations. Used to export topology data for visualization tools, network simulation, and configuration generation.",
      "description_length": 388,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Make.Topology",
      "description": "manages graph vertices, edges, and associated data through specialized operations for comparison, serialization, and set manipulation. It handles vertex attributes, edge weights, and port ranges, supporting tasks like graph visualization, pathfinding, and network analysis. Operations include converting data to string formats, combining weights, and performing set-based queries. Examples include generating Graphviz-compatible output, calculating shortest paths, and managing port configurations in network protocols.",
      "description_length": 519,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Make.Traverse",
      "description": "Performs breadth-first and depth-first traversal of a graph structure, applying a given function to each vertex. Operates on a topology representation that includes vertices and their connections. Used to explore all nodes in a graph for analysis or processing tasks.",
      "description_length": 267,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Make.Path",
      "description": "Calculates the weight of a label, compares paths for ordering, and combines paths by addition. It operates on a custom path type and edge labels from the Topology module. Used to aggregate network routes and determine optimal paths in graph-based systems.",
      "description_length": 255,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Make.UnitPath",
      "description": "Computes shortest paths between vertices in a graph using edge lists, with support for single pairs, all pairs, and weighted path calculations. Operates on graph topologies and vertex identifiers, returning path data or hash maps of results. Used for network routing optimization and graph traversal analysis.",
      "description_length": 309,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Make.Parse",
      "description": "Loads network topology from a DOT file or a GML file, returning a structured representation of the network. Works with string inputs and produces a `Topology.t` data structure. Used to initialize network models from external configuration files.",
      "description_length": 245,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Make.Pretty",
      "description": "Generates string representations of network topologies in multiple formats. Produces human-readable output, DOT language for graph visualization, and Mininet configuration scripts. Accepts optional prologue and epilogue files to customize Mininet output.",
      "description_length": 254,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Topology.Vertex",
      "description": "Compares vertex identifiers, converts them to string representations for graph visualization formats, and parses attributes from DOT and GML graph descriptions. Operates on a custom vertex type representing nodes in graph structures. Used to generate network configurations and analyze graph data from external file formats.",
      "description_length": 324,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Topology.Edge",
      "description": "Provides comparison, string conversion, and DOT format serialization for edge representations. Processes GML and DOT attributes to construct edge instances. Includes a default edge value for initialization.",
      "description_length": 206,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Topology.UnitWeight",
      "description": "Calculates the weight of a labeled edge, compares two labeled edges based on their integer weights, and combines them through addition. It operates on integer weights and edges represented as labels. Used to manage and aggregate edge weights in graph algorithms.",
      "description_length": 262,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Topology.EdgeSet",
      "description": "The module provides set operations such as union, intersection, and membership checks, along with higher-order functions for transforming and inspecting edge collections, including mapping, folding, and filtering. It operates on an abstract type `t` representing edge sets, enabling efficient manipulation of graph-related data structures. Use cases include optimizing graph algorithms, querying edge properties, and decomposing complex edge relationships through predicates and traversal patterns.",
      "description_length": 498,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Topology.VertexSet",
      "description": "The module offers set operations such as membership checks, unions, intersections, and predicate-based filtering, alongside traversal and element retrieval functions like finding minimum/maximum elements or splitting sets. It operates on a `t` type for vertex collections and `elt` type for individual vertices, enabling efficient manipulation of graph-related data structures. Use cases include graph algorithms requiring dynamic vertex set management, such as tracking connected components or optimizing pathfinding operations.",
      "description_length": 529,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Network.Topology.VertexHash",
      "description": "Provides operations to manage a hash table where keys are vertices and values are arbitrary types. Supports adding, removing, looking up, and iterating over entries, along with in-place filtering and statistical analysis. Used to track properties of graph nodes, such as labels or metadata, during graph processing tasks.",
      "description_length": 321,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Topology.PortSet",
      "description": "This module provides set operations like membership checks, unions, intersections, and transformations, along with port-specific queries such as retrieving elements, finding min/max values, and splitting sets. It works with structured port data, enabling predicate-based searches and dynamic manipulation of port collections. Use cases include network configuration management and system resource tracking, where efficient port set analysis and modification are critical.",
      "description_length": 471,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Node",
      "description": "Provides comparison, string conversion, and serialization functions for network node representations. Works with a custom node type and a device type representing hardware attributes. Used to generate graph descriptions in DOT and Mininet formats, parse graph data from DOT and GML, and manage node identifiers and properties.",
      "description_length": 326,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common.Link",
      "description": "Provides operations to compare, serialize, and parse link data, including converting to DOT format and extracting attributes like cost, capacity, and weight. Works with a custom type representing network links, initialized with integer and floating-point values. Used to construct and manipulate network link configurations in graph-based simulations.",
      "description_length": 351,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Network_Common.Net",
      "description": "Computes shortest paths between vertices using Dijkstra's algorithm, returning edge lists representing the optimal routes. Handles weighted graphs by processing vertex pairs and generating path data structures. Used to determine efficient routing in network topologies and optimize traversal sequences.",
      "description_length": 302,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Network_Common.NetPath",
      "description": "Calculates shortest paths between vertices in a network topology, returning edge lists representing the optimal routes. Handles single-source shortest paths and all-pair shortest paths with weighted edges. Used for network routing optimization and path selection in distributed systems.",
      "description_length": 286,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Make",
      "description": "Provides comparison, string conversion, and DOT format serialization for graph representations. Accepts attribute lists from DOT and GML formats to construct graph objects. Includes a default graph configuration for initialization.",
      "description_length": 231,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Topology",
      "description": "combines vertex and edge management, attribute parsing, and set operations for graph and network data. It handles custom vertex and edge types, supports weight calculations, and provides efficient set manipulations for vertices, edges, and ports. Operations include parsing from DOT/GML, calculating edge weights, and filtering port collections. Examples include generating graph visualizations, optimizing pathfinding, and managing network configurations through dynamic set queries.",
      "description_length": 484,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Traverse",
      "description": "Performs breadth-first and depth-first traversal of a graph structure, applying a given function to each vertex. Operates on a topology representation that includes vertices and their connections. Used to process nodes in a graph for analysis, rendering, or algorithmic exploration.",
      "description_length": 282,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Network.Path",
      "description": "Calculates the weight of a label, compares paths for ordering, and combines paths by addition. It operates on a custom path type and edge labels from the Topology module. Used to aggregate and evaluate network routes based on defined metrics.",
      "description_length": 242,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.UnitPath",
      "description": "Computes shortest paths between vertices in a graph using edge lists, with support for single-source and all-pairs scenarios. Handles weighted edges represented as integers and returns path details or hash maps of results. Used for network routing optimization and graph traversal analysis.",
      "description_length": 290,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network.Parse",
      "description": "Loads graph data from DOT and GML files into a topology structure, supporting network and graph modeling. Processes structured text formats to construct interconnected node and edge representations. Used to initialize simulation environments from external configuration files.",
      "description_length": 276,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Network.Pretty",
      "description": "Generates string representations of network topologies in multiple formats. Produces human-readable output, DOT language for graph visualization, and Mininet configuration syntax. Accepts optional files to prepend and append custom content to the Mininet output.",
      "description_length": 262,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "topology",
      "description": "Provides functions for calculating shortest paths, detecting cycles, and determining connectivity in directed and undirected graphs. Operates on graph representations using adjacency lists and edge lists. Used to analyze network structures, optimize routing algorithms, and validate graph properties in simulation systems.",
      "description_length": 322,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network_Common",
      "description": "manages network topologies through operations on nodes and links, supporting graph serialization, parsing, and path computation. It defines custom types for nodes and links, enabling tasks like generating DOT files, extracting link attributes, and calculating shortest paths. Dijkstra's algorithm is used to find optimal routes, while link and node data can be compared, converted, and manipulated. Examples include parsing GML files, generating Mininet configurations, and optimizing routing tables.",
      "description_length": 500,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Network",
      "description": "Calculates shortest paths between vertices in a network topology, returning edge lists or weighted path information. Operates on topological structures, including vertices and edges, with support for single and all-pair path computations. Used to determine optimal routing routes or analyze connectivity efficiency in network graphs.",
      "description_length": 333,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 47,
    "meaningful_modules": 47,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 634,
    "min_description_length": 195,
    "avg_description_length": 346.0,
    "embedding_file_size_mb": 0.16408443450927734
  }
}