{
  "package": "prbnmcn-stats",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 54,
  "creation_timestamp": "2025-07-15T23:16:12.552680",
  "modules": [
    {
      "module_path": "Stats.Graph.Make.Vertex_set",
      "library": "prbnmcn-stats",
      "description": "This module supports standard set operations for vertex collections, including membership checks, cardinality queries, and set algebra, while enabling ordered traversal, filtering, and sequence-based transformations. It works with sets of vertices represented as `Vertex_set.t` values, where elements (`Vertex_set.elt`) are graph vertices, and leverages `Stdlib.Seq.t` for iterative processing. Typical applications include analyzing subgraph structures, partitioning vertex groups for clustering algorithms, or computing statistical properties over dynamic vertex subsets.",
      "description_length": 573,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Graph.Make.Undirected_edge",
      "library": "prbnmcn-stats",
      "description": "This module represents undirected edges as pairs of vertices, ensuring equality and hashing are symmetric with respect to vertex order. It provides comparison, equality checking, pretty-printing, and hashing operations for edge values. Useful for tracking relationships in undirected graphs where edge direction is irrelevant, such as social network connections or undirected graph analysis.",
      "description_length": 391,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Make.Tree",
      "library": "prbnmcn-stats",
      "description": "This module implements tree structures with operations to construct and deconstruct trees, iterate over vertices and edges, and check vertex membership. It works with a concrete tree type representing rooted trees with vertex values and child subtrees. Use cases include analyzing hierarchical graph data, building tree-based representations for traversal or decomposition, and computing statistics on tree structures derived from undirected graphs.",
      "description_length": 449,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Graph.Make.Table",
      "library": "prbnmcn-stats",
      "description": "This module provides hash table operations centered on undirected edges as keys, enabling efficient storage and retrieval of values of arbitrary type `'a` indexed by graph edges. It operates on `Table.t` structures, which are specialized hashtables optimized for undirected edge keys via `Undirected_edge.t`. Specific use cases include tracking edge-centric metrics like weights, frequencies, or annotations in graph analyses, with support for bulk initialization and transformation using sequences of edge-value pairs.",
      "description_length": 519,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Make.Vertex_table",
      "library": "prbnmcn-stats",
      "description": "This module provides imperative hash table operations optimized for vertex-keyed data, including in-place modifications, bulk sequence-based construction, and traversal via iteration or folding. It operates on hashtables mapping graph vertices to arbitrary values, with support for efficient key-based access and bulk transformations using `Stdlib.Seq` sequences of vertex-value pairs. Designed for scenarios requiring dynamic tracking of vertex-associated metadata\u2014such as statistical accumulators or intermediate computation state in graph algorithms\u2014it enables efficient aggregation and mutation workflows over undirected graph structures.",
      "description_length": 642,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Graph.Make.Vertex_bij",
      "library": "prbnmcn-stats",
      "description": "This module implements finite bijections between graph vertices and integers, enabling efficient lookups in both directions. It supports operations to map vertices to unique integer indices, retrieve vertices by index, and query the size of the bijection. Common use cases include indexing vertices for numerical computations or serialization, such as preparing graph data for statistical analysis or storage.",
      "description_length": 409,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Fin.Rational.Dist",
      "library": "prbnmcn-stats",
      "description": "Implements the L-infinity distance calculation between two finite, rational-valued distributions represented as hash tables. Takes as input two measures and computes the maximum absolute difference between their values across all keys. Useful for comparing probability distributions over discrete domains where exact matches are rare but worst-case deviation matters.",
      "description_length": 367,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Gen.Make.Infix",
      "library": "prbnmcn-stats",
      "description": "This module provides infix operators for monadic composition of generative distributions, including bind (`>>=` and `let*`) and map (`>|=`). It works with stateful random number generators and probabilistic distributions over arbitrary types. Concrete use cases include chaining sampling operations and transforming generated values within probabilistic programs.",
      "description_length": 363,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Gen.Make.Rational",
      "library": "prbnmcn-stats",
      "description": "Implements generative distributions for rational-number weights using a stateful RNG. Provides functions like `categorical` for sampling from a distribution of weighted elements, where weights are exact rational numbers. Useful for probabilistic modeling tasks requiring precise weight handling, such as Bayesian inference or stochastic simulations.",
      "description_length": 349,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Fin.Float.Dist",
      "library": "prbnmcn-stats",
      "description": "This module computes statistical distances and divergences between finite, float-valued distributions. It provides functions for calculating the Kullback-Leibler divergence, Lp distance, and L-infinity distance, using hash tables to handle discrete supports. These operations are useful for comparing probability distributions in machine learning, statistical inference, and information theory applications.",
      "description_length": 407,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Emp.Rational",
      "library": "prbnmcn-stats",
      "description": "This module computes empirical means and variances for distributions over rational numbers. It operates on empirical distributions represented as weighted samples, using `Q.t` for rational arithmetic. Use it to calculate sample statistics like mean and variance from a set of rational-valued observations.",
      "description_length": 305,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Graph_statistics-Vertex_set",
      "library": "prbnmcn-stats",
      "description": "This module provides set-theoretic operations for managing immutable collections of ordered vertices, supporting union, intersection, difference, and ordered traversal. It works with vertex sets and sequences, enabling transformations like filtering, mapping, and partitioning while preserving element ordering. Typical use cases involve graph algorithms requiring ordered vertex processing, such as iterative traversal or constructing hierarchical graph representations from sequential data.",
      "description_length": 492,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Mh.Make",
      "library": "prbnmcn-stats",
      "description": "Implements a Metropolis-Hastings MCMC sampler that generates a sequence of samples from a target distribution defined by the input module's log-weight function. Works with any type `X.t` that supports computing log weights and generating transitions. Useful for Bayesian inference tasks where posterior sampling is required, such as parameter estimation in probabilistic models.",
      "description_length": 378,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Stats_intf.Fin_dist",
      "library": "prbnmcn-stats",
      "description": "This module enables the creation and manipulation of finite discrete probability distributions and general measures from arrays, empirical data, or association lists, supporting operations like integration, sampling, and statistical evaluation. It operates on finite measures over ordered domains, facilitating computations of means, variances, quantiles, and combined measure analyses using hash tables for efficient support folding, with applications in statistical analysis of empirical datasets, probabilistic modeling, and numerical computations involving measure theory.",
      "description_length": 576,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Graph_statistics-Vertex_table",
      "library": "prbnmcn-stats",
      "description": "This module implements a hash table structure optimized for vertex-keyed data storage and bulk transformation, supporting efficient insertion, lookup, aggregation, and sequence-driven updates. It operates on vertex-indexed tables with arbitrary value types, enabling statistical analysis workflows that require per-vertex metric accumulation and batch processing of graph element sequences. Typical applications include tracking vertex degrees, clustering coefficients, or other graph properties during traversal or analysis pipelines.",
      "description_length": 535,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Finbij.Make",
      "library": "prbnmcn-stats",
      "description": "This module implements a bijection between a finite set of elements and integer indices, enabling efficient lookup in both directions. It supports operations to retrieve elements by index (`nth_exn`, `nth_opt`), find indices by element (`idx_exn`, `idx_opt`), and iterate over the mapping (`fold`). It is useful for scenarios like encoding categorical data into integer indices for statistical models or machine learning pipelines.",
      "description_length": 431,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Stats_intf.Graph",
      "library": "prbnmcn-stats",
      "description": "This module represents undirected, simple graphs with vertices and edges, offering operations to query graph structure such as vertex and edge counts, adjacency checks, and traversal via successors. It supports concrete data types like vertex lists, edge lists, and graph folds, enabling direct manipulation and analysis of graph components. Use cases include graph traversal, connectivity analysis, and structural property computation in statistical or network processing tasks.",
      "description_length": 479,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Dist",
      "library": "prbnmcn-stats",
      "description": "This module defines a type `t` to represent distances between graph vertices, with values for zero, one, and infinity distances. It provides arithmetic and comparison operations, including addition, equality, and maximum distance computation. It is used to calculate and compare shortest path lengths in graph structures.",
      "description_length": 321,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Gen.Rational",
      "library": "prbnmcn-stats",
      "description": "Implements generative distributions for rational-valued data using exact arithmetic. Provides functions like `categorical` for sampling from distributions with rational weights. Useful for probabilistic models requiring precise probability calculations and discrete value generation.",
      "description_length": 283,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Mh.Make_core_sampling_loop",
      "library": "prbnmcn-stats",
      "description": "Implements a generic Metropolis-Hastings sampling loop for producing Markov chains. It operates on state values of type `X.t`, using a transition function that generates new states and associated statistics. This module is used to perform Bayesian inference by iteratively sampling from a posterior distribution after an initial burn-in phase.",
      "description_length": 343,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Finbij.S",
      "library": "prbnmcn-stats",
      "description": "This module implements bijections between a finite set of elements and the range {0, ..., n-1}, enabling efficient indexing and lookup operations. It supports construction from a list, direct element access by index (O(1)), and index lookup by element (O(log n)), using a map-based internal representation. Typical use cases include encoding categorical data as integer indices for statistical models or efficiently mapping between symbolic values and dense integer representations.",
      "description_length": 482,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Stats_intf.Gen",
      "library": "prbnmcn-stats",
      "description": "This module enables composing probabilistic samplers using monadic operations such as `bind` and `map`, allowing the construction of complex stochastic workflows from primitive distributions like uniform, Gaussian, and categorical. It operates on numerical types, booleans, arrays, and empirical distributions, while supporting structured sampling patterns including tuples, mixtures, and subsets without replacement. Typical applications include simulation-based inference, probabilistic modeling, and generating synthetic datasets with combinatorial dependencies.",
      "description_length": 565,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Mh.MH_parameters",
      "library": "prbnmcn-stats",
      "description": "This module defines the parameters required to construct a Metropolis-Hastings sampler, including the proposal kernel, its log density, and the log weight of the target measure. It operates on a custom type `t` representing the state of the sampler and uses `Stats.Log_space.t` for numerical stability in probabilistic computations. Concrete use cases include configuring MCMC samplers for Bayesian inference tasks where custom proposal distributions and unnormalized target densities are provided.",
      "description_length": 498,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Emp.Float",
      "library": "prbnmcn-stats",
      "description": "This module computes empirical means and variances for distributions of floats. It operates on empirical distributions represented as samples, providing direct calculations for statistical properties. Use it to analyze numerical data samples, such as estimating average values or measuring spread in experimental results.",
      "description_length": 321,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Emp.Empirical_statistics",
      "library": "prbnmcn-stats",
      "description": "This module computes empirical statistics for distributions, specifically providing the empirical mean and uncorrected empirical variance of a given distribution. It operates on empirical distributions represented as weighted samples, supporting both basic numeric types and generic modules with a defined scalar type `r`. Use cases include statistical analysis of sampled data in machine learning and probabilistic modeling, such as estimating central tendency and dispersion from a set of observations.",
      "description_length": 504,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Fin.Float",
      "library": "prbnmcn-stats",
      "description": "This module represents and manipulates float-valued, finitely supported distributions using arrays, association lists, or custom functions, enabling operations like normalization, sampling, and integration. It computes statistical properties such as mean, variance, and quantiles, and supports conversions between measures and probabilities over finite domains. The child module extends this functionality by computing distances and divergences\u2014such as Kullback-Leibler, Lp, and L-infinity\u2014using hash tables to compare distributions, which is essential for tasks in machine learning and statistical inference. Together, they enable modeling empirical data, generating binomial distributions, and implementing numerical methods that rely on precise, efficient distribution handling.",
      "description_length": 781,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Stats_intf.Gen-Infix",
      "library": "prbnmcn-stats",
      "description": "This module defines standard monadic operators for composing computations in a statistical context, including bind (`>>=` and `let*`) and map (`>|=`) operations. It works with values wrapped in a monadic type `'a t`, typically representing probabilistic or statistical computations. These operators enable chaining statistical operations while handling effects such as sampling or conditioning.",
      "description_length": 394,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Make",
      "library": "prbnmcn-stats",
      "description": "This module analyzes undirected graph structures through adjacency and Laplacian matrices, shortest paths, connected components, and probabilistic sampling via uniform spanning trees. It provides vertex-centric data manipulation through sets, trees, and hash tables indexed by vertices or undirected edges, enabling operations like membership checks, hierarchical decomposition, and edge-based value tracking. Specific capabilities include computing degree distributions, identifying cut edges, generating spanning trees with Aldous-Broder, and mapping vertices to indices for numerical processing. Submodules enhance these operations with specialized structures for vertex sets, undirected edges, tree representations, and bidirectional vertex-index mappings.",
      "description_length": 760,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Gen.Make",
      "library": "prbnmcn-stats",
      "description": "This module implements a monadic framework for stateful random number generation, supporting sampling from continuous and discrete distributions like uniform, Bernoulli, Poisson, and gamma, as well as sequence operations including shuffling and subsampling. It provides core operations for building probabilistic workflows using arrays, lists, and tuples, enabling structured output generation and mixture modeling. The child module extends it with infix operators for monadic composition and value transformation, allowing fluent chaining of stochastic computations, while another child module adds support for categorical sampling with exact rational-number weights, enhancing precision in Bayesian and simulation tasks. Together, they enable concise, compositional construction of complex probabilistic models with precise control over randomness and distribution parameters.",
      "description_length": 878,
      "index": 28,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Stats.Stats_intf.Graph-V",
      "library": "prbnmcn-stats",
      "description": "Implements a directed graph structure with vertices of type `V.t` and edges represented as pairs. Provides operations to add vertices and edges, check for vertex or edge existence, and traverse the graph in topological order. Useful for modeling dependencies between statistical models or computational workflows where ordering and connectivity matter.",
      "description_length": 352,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Graph_statistics-Undirected_edge",
      "library": "prbnmcn-stats",
      "description": "This module represents undirected edges as pairs of vertices, ensuring equality and hashing are symmetric with respect to vertex order. It provides comparison, equality checking, pretty-printing, and hashing operations for edge values. Useful for managing adjacency relationships in undirected graphs where edge direction is irrelevant.",
      "description_length": 336,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Graph_statistics-Table",
      "library": "prbnmcn-stats",
      "description": "This module offers standard hashtable operations\u2014insertion, lookup, iteration, and bulk manipulation\u2014specialized for undirected edges as keys, supporting sequence-based construction and in-place filtering. It works with hashtables storing arbitrary values indexed by undirected graph edges, leveraging sequences for efficient data transformation and statistical aggregation. Typical applications include tracking edge frequencies, accumulating graph metrics, or managing edge-centric metadata in graph analysis workflows.",
      "description_length": 521,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Gen.Infix",
      "library": "prbnmcn-stats",
      "description": "This module defines infix operators for monadic composition of generative distributions, including bind (`>>=` and `let*`) and map (`>|=`). It works with values of type `'a Stats.Gen.t`, representing probabilistic computations that generate values. These operators enable chaining and transforming distributions in a concise, readable way, particularly useful when building complex stochastic models from simpler components.",
      "description_length": 424,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Stats_intf.Gen-Rational",
      "library": "prbnmcn-stats",
      "description": "Implements rational-weighted categorical distributions using arrays of value-probability pairs. Accepts input data in the form of arrays with elements of any type paired with rational weights. Useful for sampling from discrete distributions where exact probability representation is required, such as in probabilistic modeling or statistical inference tasks.",
      "description_length": 358,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Fin.Rational",
      "library": "prbnmcn-stats",
      "description": "This module provides exact rational-valued finite distributions using `mes` and `prb` types, supporting construction from arrays, functions, or associations, along with statistical operations like mean, variance, and quantiles. It enables integration, sampling, normalization, and empirical measure computation, making it suitable for precise probability calculations over discrete domains. A child module computes the L-infinity distance between two distributions, measuring the maximum absolute difference across keys in hash tables, useful for comparing distributions where worst-case deviation is critical. Together, these components support modeling, analysis, and comparison of discrete statistical data with exact arithmetic.",
      "description_length": 732,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Graph_statistics-Vertex_bij",
      "library": "prbnmcn-stats",
      "description": "This module implements finite bijections between graph vertices and integer indices, enabling efficient bidirectional lookups. It supports operations to construct bijections from vertex lists, retrieve vertices by index or their corresponding indices, and fold over the bijection's elements. Use cases include mapping sparse vertex representations to dense integer indices for algorithmic processing or maintaining indexed collections of vertices in graph algorithms.",
      "description_length": 467,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Stats_intf.Stateful_PRNG",
      "library": "prbnmcn-stats",
      "description": "This module defines a stateful pseudo-random number generator (PRNG) interface with operations to generate random values of specific types. It supports generating random floats within a range, random integers within a range, and random boolean values. Concrete use cases include stochastic simulations, randomized algorithms, and generating test data with controlled randomness.",
      "description_length": 378,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Graph_statistics",
      "library": "prbnmcn-stats",
      "description": "This module offers structural analysis operations for graph data structures, computing adjacency and Laplacian matrices, shortest paths (via Floyd-Warshall), connected components, degree distributions, and edge cuts. It works with graph representations involving vertices, edges, and associated numeric or boolean properties, supporting operations like subgraph connectivity checks and volume calculations. A specialized function implements the Aldous-Broder algorithm for uniform spanning tree sampling in subgraphs defined by vertex predicates, useful in probabilistic graph analysis and network modeling.",
      "description_length": 607,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Graph_statistics-Tree",
      "library": "prbnmcn-stats",
      "description": "This module implements tree structures with operations to construct and deconstruct trees, iterate over vertices and edges, and check vertex membership. It works with trees composed of vertices and directed edges from parent to child nodes. Concrete use cases include analyzing hierarchical data, traversing directory structures, and computing node-based statistics in tree-shaped graphs.",
      "description_length": 388,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.String_table",
      "library": "prbnmcn-stats",
      "description": "This module provides imperative hash table operations for string-indexed data, supporting insertion, in-place updates, deletion, iteration, folding, and bulk initialization from key-value sequences. It works with polymorphic values stored under string keys, enabling efficient key-based access and transformation while offering statistics reporting and sequence-based bulk manipulation. Typical use cases include aggregating data indexed by strings, processing large datasets via streaming sequences, and maintaining dynamic mappings with performance-sensitive lookups.",
      "description_length": 569,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Fin",
      "library": "prbnmcn-stats",
      "description": "This module represents finite measures as finitely supported functions, supporting both float-valued and exact rational-valued distributions through types like `mes` and `prb`. It enables key operations such as normalization, sampling, integration, and computation of statistical properties like mean, variance, and quantiles, with backends using arrays, association lists, or hash tables. Distances and divergences\u2014including Kullback-Leibler, Lp, and L-infinity\u2014are computed to compare distributions, essential for statistical inference and machine learning. Examples include modeling empirical data, generating binomial distributions, and analyzing worst-case deviations using exact arithmetic.",
      "description_length": 696,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph",
      "library": "prbnmcn-stats",
      "description": "This module analyzes graph structures through statistical and structural operations, computing metrics like degree distributions, clustering coefficients, shortest paths, and connected components. It supports both directed and undirected graphs, using functors to adapt to different graph implementations, and provides core types for distances, edges, and vertex-indexed data. Operations include matrix-based analysis, uniform spanning tree sampling, and vertex set manipulations, enabling tasks like network modeling, hierarchical decomposition, and metric aggregation. Submodules enhance these capabilities with ordered vertex sets, edge-based hashtables, and bidirectional index mappings for efficient traversal and analysis.",
      "description_length": 728,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Gen",
      "library": "prbnmcn-stats",
      "description": "This module provides a monadic framework for generating random values through uniform sampling, probability distributions, and sequence operations. It supports fundamental types like integers, floats, and booleans, as well as structured data such as arrays, sequences, and tuples, using algorithms optimized for correctness and performance. Key applications include probabilistic modeling with distributions like Poisson or Gaussian, simulation of independent or dependent samples, and empirical data-driven generation with subsampling or shuffling. The child module adds support for exact arithmetic in rational-valued distributions, enabling precise sampling with functions like `categorical`, while another provides infix operators for fluent composition and transformation of stochastic computations.",
      "description_length": 804,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Binning",
      "library": "prbnmcn-stats",
      "description": "This module specifies and applies binning strategies to map continuous values to discrete intervals. It supports creating regular grids with configurable origin, width, and truncation, and maps values to bin indices or back to interval origins. It is used to discretize empirical data or finite measures over floats into histograms or binned distributions.",
      "description_length": 356,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Mh",
      "library": "prbnmcn-stats",
      "description": "This module implements the Metropolis-Hastings algorithm for Markov Chain Monte Carlo sampling, enabling inference over arbitrary parameter spaces using user-defined target distributions and proposal kernels. It supports log-density functions for numerical stability and provides core operations for constructing and running sampling loops, including transition kernel application, acceptance ratio computation, and chain generation. The module works with a custom state type `X.t` that encapsulates both parameter values and log-weight calculations, allowing sampling from unnormalized distributions in Bayesian inference tasks such as posterior estimation. Submodules define sampler configuration parameters, implement generic sampling loops, and provide utilities for managing transition statistics and burn-in phases.",
      "description_length": 821,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Stats_intf",
      "library": "prbnmcn-stats",
      "description": "This module establishes the foundational abstractions for statistical modeling, including interfaces for random number generation, finite distributions, and graph-based models, operating over floats, probability distributions, and stateful generators. It enables the definition of bounded parameter spaces for sampling and the specification of probabilistic model structures, with direct support for numeric range declarations and core statistical operations. Submodules extend this foundation by providing discrete probability distributions over ordered domains, undirected and directed graph representations for structural modeling, rational-weighted categorical distributions, and monadic combinators for composing probabilistic workflows. These components collectively support tasks like statistical analysis of empirical data, simulation-based inference, graph traversal, dependency modeling, and controlled stochastic generation.",
      "description_length": 935,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Specfun",
      "library": "prbnmcn-stats",
      "description": "Implements mathematical functions for statistical computations, including logarithms of factorials, binomial coefficients, and gamma functions. Operates on integers and floats, providing precise evaluations for combinatorial problems. Useful for computing probabilities in distributions like binomial and Poisson without numerical overflow.",
      "description_length": 340,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Finbij",
      "library": "prbnmcn-stats",
      "description": "This module provides bijections between finite sets and the range {0, ..., n-1}, enabling efficient bidirectional mapping between elements and integer indices. It supports direct construction from ordered collections and offers operations like `idx_exn` and `nth_exn` for lookup in both directions, along with folding over the mapped elements. The internal map-based representation ensures O(log n) index retrieval and O(1) element access, making it suitable for encoding categorical data or optimizing combinatorial algorithms that require dense integer representations. Submodules extend this functionality with additional utilities for iteration, error handling, and list-based construction.",
      "description_length": 694,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Combi",
      "library": "prbnmcn-stats",
      "description": "Handles combinatorial operations on lists, specifically generating all subsets of a given size. Works with integer values and generic lists. Useful for tasks like generating combinations of features in statistical models or experimental design.",
      "description_length": 244,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Pdfs",
      "library": "prbnmcn-stats",
      "description": "This library component provides probability density functions and their logarithmic variants for standard statistical distributions, supporting numerical operations on scalar types like floats and integers. It offers combinators to construct joint distributions over tuples of independent variables (up to 6 dimensions) and convex mixtures of distributions using weighted arrays, leveraging log-domain arithmetic for numerical stability. These tools are particularly useful for probabilistic modeling tasks requiring multi-dimensional density estimation, Bayesian inference, or composite distribution construction in machine learning pipelines.",
      "description_length": 644,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Emp",
      "library": "prbnmcn-stats",
      "description": "This module builds and manipulates empirical distributions from sampled data, supporting transformations like mapping and truncation, along with statistical operations such as quantile computation and outlier removal. It handles ordered data types, with specialized support for floats and rational numbers, enabling tasks like percentile analysis and filtering outliers based on standard deviations. Child modules provide statistical functions for computing means and variances over rational and floating-point data, as well as generic weighted samples. For example, users can estimate the average of numerical experimental results, calculate variance in probabilistic model outputs, or filter extreme values from sampled data.",
      "description_length": 727,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Log_space",
      "library": "prbnmcn-stats",
      "description": "This module represents values in log-space to avoid numerical underflow or overflow during probabilistic computations. It supports arithmetic operations like multiplication, division, and comparisons, while preserving numerical stability. Common use cases include Bayesian inference and hidden Markov model implementations where small probabilities are manipulated frequently.",
      "description_length": 376,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Int_table",
      "library": "prbnmcn-stats",
      "description": "This module implements a hash table with integer keys and arbitrary value types, supporting imperative operations like insertion, lookup, deletion, iteration, folding, and table management. It provides utilities for bulk population from sequences, including adding or replacing multiple entries and constructing tables directly from key-value sequences. Such functionality is ideal for scenarios requiring efficient integer-keyed storage with dynamic updates, such as frequency counting, sparse data aggregation, or caching intermediate statistical results.",
      "description_length": 557,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats",
      "library": "prbnmcn-stats",
      "description": "This library provides tools for building and analyzing probability distributions, performing statistical inference, and processing empirical data through a combination of functional and imperative data structures. Core data types include distributions over discrete and continuous values, histograms, hash tables for efficient lookups, and graph structures with statistical metrics, supporting operations like Bayesian inference, MCMC sampling, and combinatorial analysis. Users can model empirical data with histograms and binned distributions, perform exact or approximate probabilistic computations using rational or float-valued distributions, and analyze graph networks through degree distributions and shortest paths. Submodules enhance these capabilities with log-space arithmetic for numerical stability, bidirectional mappings for categorical data, and imperative hash tables for high-performance data aggregation.",
      "description_length": 923,
      "index": 53,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 55,
    "meaningful_modules": 54,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9818181818181818
  },
  "statistics": {
    "max_description_length": 935,
    "min_description_length": 244,
    "avg_description_length": 514.2962962962963,
    "embedding_file_size_mb": 0.19663047790527344
  }
}