{
  "package": "prbnmcn-stats",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 36,
  "creation_timestamp": "2025-08-15T14:40:48.855786",
  "modules": [
    {
      "module_path": "Stats.Fin.Float.Dist",
      "library": "prbnmcn-stats",
      "description": "This module computes statistical distances and divergences between finite, float-valued distributions. It provides functions for calculating the Kullback-Leibler divergence, Lp distance, and L-infinity distance between two measures over a common discrete support. These operations are used when comparing probability distributions in machine learning, statistical inference, and information theory applications.",
      "description_length": 411,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Make.Tree",
      "library": "prbnmcn-stats",
      "description": "This module implements tree structures with operations to construct and deconstruct trees using a root and a list of subtrees. It provides functions to check for vertex membership, and to iterate over vertices and edges. It is useful for representing hierarchical data such as parse trees, directory structures, or family trees, and for performing traversals or accumulations over such data.",
      "description_length": 391,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Fin.Rational.Dist",
      "library": "prbnmcn-stats",
      "description": "This module computes the L-infinity distance between two finite rational-valued distributions represented as hash tables. It takes as input two measures and a hash table module for key comparison, returning the maximum absolute difference of their values across all keys. This function is useful for comparing discrete probability distributions over finite domains, such as evaluating convergence in iterative algorithms or measuring dissimilarity between empirical distributions.",
      "description_length": 480,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Gen.Make.Rational",
      "library": "prbnmcn-stats",
      "description": "Implements generative distributions for rational-number weights using a stateful RNG. Provides functions like `categorical` for sampling from weighted discrete distributions. Useful for probabilistic modeling where exact arithmetic is required.",
      "description_length": 244,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Graph.Make.Vertex_set",
      "library": "prbnmcn-stats",
      "description": "This module provides ordered set operations for managing vertex collections in undirected graphs, supporting efficient membership checks, union/intersection/difference calculations, and ordered traversal via sequences. It works with graph vertices as ordered elements using a comparison function from an `Ord` parameter, enabling functional transformations like filtering, partitioning, and mapping. Specific use cases include analyzing vertex neighborhoods, tracking visited nodes in graph traversal algorithms, and computing intersections between subgraphs for connectivity analysis.",
      "description_length": 585,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Make.Undirected_edge",
      "library": "prbnmcn-stats",
      "description": "This module represents undirected edges as unordered pairs of vertices, ensuring operations like comparison, equality, and hashing are invariant under vertex permutation. It provides concrete functions for comparing, checking equality, pretty-printing, and hashing edges. Useful for tracking relationships in undirected graphs where edge direction is irrelevant, such as social network connections or undirected graph traversal algorithms.",
      "description_length": 439,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Make.Table",
      "library": "prbnmcn-stats",
      "description": "This module specializes in hash table operations tailored for undirected edges as keys, enabling efficient storage and retrieval of values associated with graph edges. It provides imperative-style modification (insertion, removal, updates) and functional transformations (folding, iteration, sequence conversion), with bulk operations optimized for processing large edge sets from sequences. Such capabilities are particularly useful in graph algorithms requiring edge-centric data aggregation, property tracking, or batch statistical computations over undirected graph structures.",
      "description_length": 581,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Make.Vertex_bij",
      "library": "prbnmcn-stats",
      "description": "This module implements finite bijections between graph vertices and integers, enabling efficient lookups in both directions. It supports operations to construct a bijection from a list of vertices, retrieve vertices by index, find indices for vertices, and fold over the mapping. These functions are useful for indexing vertices in graph algorithms where fast access and unique integer identifiers are required.",
      "description_length": 411,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Make.Vertex_table",
      "library": "prbnmcn-stats",
      "description": "This module implements a hash table structure optimized for vertex-keyed data, offering standard imperative operations like insertion, lookup, and deletion alongside bulk transformations using sequences. It handles associations between graph vertices and arbitrary typed values, supporting efficient iteration, filtering, and aggregation across vertex mappings. Designed for statistical graph analysis, it enables tracking vertex properties (e.g., degrees, weights) and intermediate computation results in large-scale graph processing workflows.",
      "description_length": 545,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Gen.Make.Infix",
      "library": "prbnmcn-stats",
      "description": "This module provides infix operators for monadic composition of generative distributions, including bind (`>>=`, `let*`) and map (`>|=`). It works with stateful random number generators and probabilistic values represented as `'a t`. These operators enable chaining sampling operations and transformations in a concise, readable syntax within probabilistic programs.",
      "description_length": 366,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Emp.Float",
      "library": "prbnmcn-stats",
      "description": "This module computes empirical means and variances for distributions of floats. It operates on empirical distributions represented as weighted samples. Use it to analyze statistical properties of sampled data in machine learning or probabilistic computations.",
      "description_length": 259,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Fin.Rational",
      "library": "prbnmcn-stats",
      "description": "This module enables constructing and manipulating finitely supported rational-valued probability distributions and measures through operations like creating from arrays, associations, and empirical data, computing integrals, sampling, and iterating over supports. It works with hash tables mapping finite supports to rational weights, supporting statistical calculations such as mean, variance, quantiles, and L-infinity distance comparisons. Typical applications include precise probabilistic modeling, statistical analysis of empirical datasets, and formal verification scenarios requiring exact rational arithmetic.",
      "description_length": 618,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Gen.Make",
      "library": "prbnmcn-stats",
      "description": "This module provides a monadic framework for stateful random number generation, enabling sampling from discrete and continuous distributions (e.g., Poisson, gamma, Gaussian, categorical) and combinatorial operations like shuffling, subsampling, and tuple generation. It works with sequences, lists, and rational-number representations to support precise probabilistic computations, particularly in scenarios requiring explicit state management or exact sampling without replacement. Use cases include probabilistic programming, statistical modeling, and data processing pipelines where controlled randomness and compositional flexibility are critical.",
      "description_length": 651,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Mh.Make",
      "library": "prbnmcn-stats",
      "description": "Implements a Metropolis-Hastings Markov Chain Monte Carlo sampler for generating samples from a target distribution defined by a module `X`. It operates on data types provided by the `X` module, requiring `X.t` for states and using `X.log_weight` to define the target distribution. Useful for Bayesian inference tasks where sampling from complex, unnormalized probability distributions is required.",
      "description_length": 398,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Fin.Float",
      "library": "prbnmcn-stats",
      "description": "This module offers tools for building and transforming finite float-valued distributions through operations like normalization, integration, and sampling, alongside statistical computations such as mean, variance, and quantiles. It operates on arrays, hashtables, and custom measure types, enabling practical applications like distribution comparison via KL divergence or Lp norms, ordered data analysis with customizable sorting, and conversion between probabilistic representations.",
      "description_length": 484,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Emp.Rational",
      "library": "prbnmcn-stats",
      "description": "This module computes empirical means and variances for distributions over rational numbers. It operates on empirical distributions represented as weighted samples, using `Q.t` for rational arithmetic. Concrete use cases include statistical analysis of discrete data samples where exact rational precision is required, such as financial calculations or probabilistic model evaluations.",
      "description_length": 384,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Gen.Rational",
      "library": "prbnmcn-stats",
      "description": "Implements a categorical distribution over weighted elements, where each outcome is paired with a rational number representing its weight. Accepts an array of element-weight pairs and returns a generator for sampling according to those weights. Useful for probabilistic modeling tasks where exact weight representation is required, such as Bayesian inference or simulation experiments.",
      "description_length": 385,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Dist",
      "library": "prbnmcn-stats",
      "description": "This module defines a type `t` to represent distances between graph vertices, with constructors for finite distances and infinity. It provides arithmetic and comparison operations, including addition, equality, and maximum, tailored for graph distance calculations. Use cases include computing shortest paths, comparing vertex separation, and handling disconnected components in graph algorithms.",
      "description_length": 396,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Graph.Make",
      "library": "prbnmcn-stats",
      "description": "This module offers graph analysis operations for undirected graphs, including matrix representations (adjacency, Laplacian), shortest path computation, connectivity analysis, and metrics like volume and diameter. It leverages vertex sets, edge hash tables, and bijections between vertices and integers to enable efficient statistical computations on graph structures. Applications include network analysis, community detection, and hierarchical tree construction via algorithms like Aldous-Broder for uniform spanning trees.",
      "description_length": 524,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Finbij.Make",
      "library": "prbnmcn-stats",
      "description": "This module implements a bijection between a finite set of elements and integer indices using a map-based structure. It supports operations to construct the bijection from a list, retrieve elements by index or their corresponding index by element, and fold over the bijection's elements with their indices. Use cases include efficiently mapping categorical data to integer representations and performing index-based lookups in statistical computations.",
      "description_length": 452,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Gen.Infix",
      "library": "prbnmcn-stats",
      "description": "This module defines infix operators for monadic composition of generative statistical distributions, including bind (`>>=` and `let*`) and map (`>|=`). It works with values of type `'a Stats.Gen.t`, representing distributions that generate values of type `'a`. These operators enable concise chaining of probabilistic computations, such as sampling from a sequence of dependent distributions.",
      "description_length": 392,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Mh.Make_core_sampling_loop",
      "library": "prbnmcn-stats",
      "description": "Implements a generic Metropolis-Hastings sampling loop over a state space X, supporting burn-in and configurable verbosity. It produces a Markov chain that generates samples from a target distribution after initial adaptation. Used to build custom MCMC samplers with trace collection and progress reporting.",
      "description_length": 307,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Stats_intf",
      "library": "prbnmcn-stats",
      "description": "This module defines core abstractions for statistical distributions, random number generation, and probabilistic modeling. It includes types like `range` for bounded intervals and interfaces such as `Fin_dist` for finite distributions and `Stateful_PRNG` for random number generators. Concrete use cases include implementing sampling algorithms, defining custom probability distributions, and building probabilistic graphical models.",
      "description_length": 433,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Gen",
      "library": "prbnmcn-stats",
      "description": "This module provides stateful random sampling operations for statistical distributions (e.g., normal, Poisson, categorical) and combinatorial constructs (shuffle, subsample, sampling without replacement), alongside structured uniform samplers for ranges, tuples, and geometric regions. It manipulates numeric types, arrays, lists, sequences, and pairs to enable precise probabilistic modeling and exact empirical sampling with explicit state management. Applications include simulation of complex probabilistic models, exact finite-population sampling, and combinatorial optimization scenarios requiring controlled randomness.",
      "description_length": 626,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Finbij",
      "library": "prbnmcn-stats",
      "description": "This module implements bijections between finite sets and integer indices, enabling efficient mapping of categorical data to integers. It supports constructing bijections from lists, retrieving elements by index, and finding indices by element. Use cases include index-based lookups in statistical models and encoding categorical variables for computation.",
      "description_length": 356,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Binning",
      "library": "prbnmcn-stats",
      "description": "This module specifies and applies binning strategies to finite distributions by mapping continuous values to discrete bins. It supports operations to create regular grids, bin empirical data or measures, and convert between values and bin indices. Concrete use cases include discretizing sensor data, aggregating floating-point samples into histograms, and preparing continuous data for statistical analysis.",
      "description_length": 408,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Int_table",
      "library": "prbnmcn-stats",
      "description": "This module provides imperative hash table operations for integer keys, enabling creation, insertion, deletion, lookup, iteration, and folding over key-value pairs. It supports bulk initialization and updates via sequences of key-value pairs, making it efficient for aggregating data from streams or performing statistical computations on integer-mapped values. The structure is particularly suited for scenarios requiring high-performance integer-indexed storage with in-place modifications and sequence integration.",
      "description_length": 517,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Mh",
      "library": "prbnmcn-stats",
      "description": "Implements a Metropolis-Hastings Markov Chain Monte Carlo sampler for generating samples from a target distribution defined by a module `X`, operating on `X.t` states and using `X.log_weight` to guide sampling. Supports burn-in, configurable verbosity, and trace collection, enabling Bayesian inference tasks over complex, unnormalized distributions. Used to build custom MCMC samplers with progress reporting and adaptation.",
      "description_length": 425,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Log_space",
      "library": "prbnmcn-stats",
      "description": "This module represents values in log-space as floats, enabling numerical stability for computations involving very small or large magnitudes. It supports arithmetic operations like multiplication, division, and comparisons, along with conversions to and from standard floats. Concrete use cases include probabilistic computations and statistical algorithms where underflow or overflow is a concern.",
      "description_length": 398,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Specfun",
      "library": "prbnmcn-stats",
      "description": "Implements mathematical functions for statistical computations, including logarithms of factorials, binomial coefficients, and gamma functions. Operates on integer and floating-point inputs to support precise probability calculations. Useful for computing combinatorial probabilities and normalizing constants in Bayesian inference.",
      "description_length": 332,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Combi",
      "library": "prbnmcn-stats",
      "description": "Enumerates all subsets of a given size from a list. Works with integer sizes and generic list elements. Useful for generating combinations in statistical sampling or combinatorial analysis.",
      "description_length": 189,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Pdfs",
      "library": "prbnmcn-stats",
      "description": "This module provides probability density functions and their logarithmic forms for standard statistical distributions like Poisson, Gaussian, exponential, and binomial, operating on numeric types such as `float` and `int`. It supports constructing joint distributions over tuples of independent variables (up to 6 elements) and n-dimensional uniform distributions, while also enabling mixture models with weighted combinations of distributions. These capabilities are particularly useful for probabilistic modeling, Bayesian inference, and scenarios requiring composite or multi-dimensional distribution representations.",
      "description_length": 620,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Graph",
      "library": "prbnmcn-stats",
      "description": "This module computes graph statistics such as shortest paths, diameter, and volume for undirected graphs, using adjacency and Laplacian matrices. It handles vertex sets, edge hash tables, and distance calculations, including support for infinite distances via the `Dist` module. Concrete use cases include network analysis, community detection, and generating uniform spanning trees with Aldous-Broder.",
      "description_length": 402,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stats.Emp",
      "library": "prbnmcn-stats",
      "description": "This module represents empirical distributions built from sampled data, supporting transformations like mapping functions over samples and converting generative distributions into empirical ones. It provides statistical operations such as quantile computation, outlier removal, and truncation based on order relations, working with data types like floats and rational numbers. Concrete use cases include analyzing sampled outputs from probabilistic models, performing statistical analysis on empirical data with precise arithmetic, and filtering noisy samples in machine learning pipelines.",
      "description_length": 590,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats.Fin",
      "library": "prbnmcn-stats",
      "description": "This module implements finite measures as distributions with finite support, providing operations for constructing, transforming, and analyzing both float-valued and rational-valued distributions. It supports key statistical computations such as normalization, integration, sampling, mean, variance, and quantile calculation, working directly with arrays, association lists, and hash tables mapping support elements to weights. Concrete use cases include comparing distributions using KL divergence or Lp norms, performing exact probabilistic calculations with rational arithmetic, and converting between different probabilistic representations for analysis or simulation.",
      "description_length": 672,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stats",
      "library": "prbnmcn-stats",
      "description": "This module provides operations for constructing and manipulating probability distributions, including finite and empirical distributions, stateful random generators, and density functions. It works with data types such as floats, integers, arrays, lists, and hash tables to support statistical computations like sampling, integration, quantile calculation, and KL divergence. Concrete use cases include building probabilistic models, performing Bayesian inference with MCMC samplers, discretizing continuous data with binning strategies, and computing combinatorial probabilities using specialized mathematical functions.",
      "description_length": 622,
      "index": 35,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 38,
    "meaningful_modules": 36,
    "filtered_empty_modules": 2,
    "retention_rate": 0.9473684210526315
  },
  "statistics": {
    "max_description_length": 672,
    "min_description_length": 189,
    "avg_description_length": 452.5833333333333,
    "embedding_file_size_mb": 0.5221948623657227
  }
}