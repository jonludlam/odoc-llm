{
  "package": "lua_parser",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 10,
  "creation_timestamp": "2025-08-14T23:08:10.972005",
  "modules": [
    {
      "module_path": "Lua_parser.Pp_lua",
      "library": "lua_parser.lib",
      "description": "This module provides functions to pretty-print Lua abstract syntax trees (ASTs) either directly to standard output or into a string. It operates on the `ast` type defined in the `Lua_parser.Ast` module. Use `pp_lua` to display an AST for debugging or logging, and `pp_lua_str` to capture the formatted output for further processing or analysis.",
      "description_length": 344,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Parse",
      "library": "lua_parser.lib",
      "description": "This module provides functions to parse Lua source code into an abstract syntax tree (AST) from either a string or an input channel like stdin. It directly works with Lua code representations and produces structured AST data for further analysis or transformation. Concrete use cases include building Lua interpreters, linters, or code analysis tools that require structured access to Lua programs.",
      "description_length": 398,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Parser",
      "library": "lua_parser.lib",
      "description": "Parses Lua source code into an abstract syntax tree (AST) using a lexer function that produces tokens. It operates on `lexbuf` input, consuming tokens to build structured AST nodes representing Lua programs. This module is used to transform raw Lua code into a navigable tree structure for analysis or compilation tasks.",
      "description_length": 320,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Lexer_utils",
      "library": "lua_parser.lib",
      "description": "This module handles lexical analysis tasks for parsing Lua code, providing functions to manage token extraction, buffer manipulation, and state transitions for comments and strings. It operates on lexing buffers to track positions, capture lexemes, and handle multi-line constructs. Concrete use cases include extracting the next token, managing line counting, and buffering characters during comment or string parsing.",
      "description_length": 419,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lua_parser.Lexer",
      "library": "lua_parser.lib",
      "description": "This module implements a lexer for parsing Lua source code, converting character streams into lexical tokens recognized by the Lua language parser. It processes input using `Lexing.lexbuf` and produces tokens such as keywords, identifiers, strings, and comments, including support for long strings and nested comments. Concrete use cases include tokenizing Lua scripts during compilation or interpreting Lua code in embedded systems.",
      "description_length": 433,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Pp_tokens",
      "library": "lua_parser.lib",
      "description": "This module provides functions to print token values in S-expression and string formats. It operates directly on the `token` type from the `Lua_parser.Tokens` module. These functions are useful for debugging parsers or inspecting token streams during lexing and parsing of Lua code.",
      "description_length": 282,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Tokens",
      "library": "lua_parser.lib",
      "description": "This module defines a token type representing lexical elements of the Lua language, including operators, keywords, literals, and punctuation. It provides functions for converting tokens to and from S-expressions, pretty-printing tokens, and converting tokens to string representations. These operations support parsing and processing Lua source code, such as building abstract syntax trees or implementing custom Lua linters.",
      "description_length": 425,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lua_parser.Pp_ast",
      "library": "lua_parser.lib",
      "description": "Prints abstract syntax trees in S-expression or JSON format. Operates on Lua_parser.Ast.ast values. Useful for debugging parsers or analyzing Lua code structure.",
      "description_length": 161,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Ast",
      "library": "lua_parser.lib",
      "description": "This module defines a comprehensive algebraic data type representing the abstract syntax tree (AST) of Lua programs, including nodes for control structures, expressions, and declarations. It provides functions for converting between S-expressions and AST nodes, pretty-printing AST nodes, and extracting lists of child nodes from composite AST elements. Concrete use cases include parsing Lua code into a structured format, analyzing or transforming Lua programs, and serializing ASTs for debugging or storage.",
      "description_length": 510,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lua_parser",
      "library": "lua_parser.lib",
      "description": "This module provides a complete Lua parser toolchain, handling lexing, parsing, and AST manipulation. It includes precise tokenization of Lua source code, construction of abstract syntax trees, and utilities for pretty-printing and analyzing Lua programs. Concrete use cases include building Lua interpreters, linters, code transformers, and static analysis tools that require detailed access to Lua's syntax and structure.",
      "description_length": 423,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 510,
    "min_description_length": 161,
    "avg_description_length": 371.5,
    "embedding_file_size_mb": 0.1452503204345703
  }
}