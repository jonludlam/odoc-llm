{
  "package": "lua_parser",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 11,
  "creation_timestamp": "2025-06-18T16:31:29.554486",
  "modules": [
    {
      "module_path": "Lua_parser.Ast",
      "description": "Converts between S-expression representations and an abstract syntax tree type, enabling serialization and deserialization. Provides pretty-printing and string representation for debugging or logging. Extracts a list of child nodes from a composite AST node for traversal or analysis.",
      "description_length": 284,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lua_parser.Lexer",
      "description": "Processes input streams to recognize and return tokens such as identifiers, literals, and operators. Operates on `Lexing.lexbuf` structures, extracting tokens from source code or text input. Handles specific constructs like long strings, comments, and end-of-line markers during lexical analysis.",
      "description_length": 296,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lua_parser.Lexer_utils",
      "description": "Provides functions to track and manipulate the state of a lexical analyzer's buffer and position, including retrieving tokens, handling newlines, and managing long comments and strings. Operates on `Lexing.lexbuf` and internal character buffers to support custom lexing workflows. Used to debug tokenization, build multi-line constructs, and manage complex input patterns during parsing.",
      "description_length": 387,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Parse",
      "description": "Parses input sources into an abstract syntax tree (AST) structure. Accepts either a character input channel or a string as input. Used to convert raw text input into structured program representations for further processing.",
      "description_length": 224,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Parser",
      "description": "Parses a stream of tokens into an abstract syntax tree using a provided lexer. It processes input through a lexing buffer and maps tokens to their corresponding AST nodes. This is used to convert source code into a structured representation for further analysis or execution.",
      "description_length": 275,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Pp_ast",
      "description": "Prints an abstract syntax tree using S-expressions or JSON formatting. Accepts an AST structure and outputs it in a human-readable form. Used for debugging or inspecting parsed program structures during development.",
      "description_length": 215,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Pp_lua",
      "description": "Provides pretty printing of Lua abstract syntax trees to standard output and string representation. Operates on the `Ast.ast` type, generating formatted Lua code. Used to generate human-readable Lua source from parsed syntax trees for debugging or code inspection.",
      "description_length": 264,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Pp_tokens",
      "description": "Prints token representations in S-expressions and as human-readable strings. Operates on `Tokens.token` values, which encapsulate lexical elements from a parser. Used to debug token streams during parsing or to generate verbose output for analysis.",
      "description_length": 248,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser.Tokens",
      "description": "Converts between a custom token type and S-expressions, with pretty-printing and string representation capabilities. Operates on a polymorphic variant type representing lexical tokens. Used to serialize and deserialize tokens during parsing and debugging workflows.",
      "description_length": 265,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "lua_parser",
      "description": "Parses and pretty prints Lua 5.2 code, converting between abstract syntax trees and human-readable strings. Operates on Lua syntax trees and source code strings, preserving semantic structure. Used to format existing Lua scripts or generate valid Lua output from parsed structures.",
      "description_length": 281,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_parser",
      "description": "Transforms Lua source code into structured abstract syntax trees through lexical analysis, token processing, and parsing, while supporting serialization, deserialization, and pretty-printing of both tokens and ASTs. It handles `Lexing.lexbuf` structures, `Ast.ast` types, and custom token variants, enabling operations like token extraction, AST traversal, and formatted output. Users can convert between S-expressions and ASTs, debug token streams, and generate human-readable Lua code from parsed structures. Examples include parsing a string into an AST, printing tokens as S-expressions, and traversing child nodes for analysis.",
      "description_length": 632,
      "index": 10,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 632,
    "min_description_length": 215,
    "avg_description_length": 306.45454545454544,
    "embedding_file_size_mb": 0.040421485900878906
  }
}