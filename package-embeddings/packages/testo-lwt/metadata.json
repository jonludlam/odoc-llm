{
  "package": "testo-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:55:10.102718",
  "modules": [
    {
      "module_path": "Testo_lwt.Promise.Operators",
      "library": "testo-lwt",
      "description": "This module provides Lwt-style asynchronous binding through the `>>=` operator, enabling sequential composition of promise-based test actions. It works with `Testo_lwt.Promise.t`, representing asynchronous computations in test scenarios. Use it to chain dependent asynchronous test steps, such as setting up a resource then verifying its behavior.",
      "description_length": 347,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Testo_lwt.Tag",
      "library": "testo-lwt",
      "description": "This module manages string-based tags for categorizing and selecting test cases. It supports operations to declare, compare, and convert tags, as well as list all registered tags or check tag equality. Use it to define and filter test subsets based on descriptive labels, such as selecting only network-related or performance tests via the command line.",
      "description_length": 353,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Testo_lwt.Promise",
      "library": "testo-lwt",
      "description": "This module implements asynchronous test workflows using promise-based concurrency. It provides monadic operations like `bind` and `return` for composing and sequencing Lwt-backed test actions, along with exception handling via `catch` and resource cleanup via `protect`. Use it to write tests that involve asynchronous I/O, such as waiting for background tasks, handling timeouts, or verifying concurrent behavior in a controlled way.",
      "description_length": 435,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Testo_lwt",
      "library": "testo-lwt",
      "description": "This module provides utilities for defining and executing tests with support for asynchronous operations via LWT, output stream capture (stdout/stderr), and test categorization via tags. It manages test configurations using structured types that track execution metadata, expected outcomes, and output normalization rules, enabling use cases like approval testing, environment variable manipulation, and selective test execution based on tags or categories. The module also supports integration with Alcotest and includes a CLI tool for running filtered test suites and handling output verification.",
      "description_length": 599,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 599,
    "min_description_length": 347,
    "avg_description_length": 433.5,
    "embedding_file_size_mb": 0.05836296081542969
  }
}