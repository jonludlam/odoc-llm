{
  "package": "testo-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:08.112073",
  "modules": [
    {
      "module_path": "Testo_lwt.Promise.Operators",
      "library": "testo-lwt",
      "description": "This module provides Lwt-style bind (`>>=`) for composing asynchronous test operations, enabling sequential execution of promises within test cases. It works with `Testo_lwt.Promise.t`, a wrapper for Lwt promises, allowing test functions to handle asynchronous values directly. Use it to chain setup, assertion, and teardown steps in async tests without blocking.",
      "description_length": 363,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Testo_lwt.Tag",
      "library": "testo-lwt",
      "description": "This module manages test tags used to categorize and select test cases via the command line. It provides operations to declare, compare, and convert tags to and from strings, ensuring tags are registered before use. Use cases include organizing tests by features like \"network\" or \"database\" and filtering execution based on these tags.",
      "description_length": 336,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Testo_lwt.Promise",
      "library": "testo-lwt",
      "description": "This module enables asynchronous test execution using Lwt promises, supporting non-blocking operations and concurrency through direct functions like `bind`, `catch`, and `protect`. It integrates with Lwt-based code to handle async workflows, allowing tests for network services, file I/O, and callback-driven logic. The `bind` operator composes async test steps sequentially, working with `Testo_lwt.Promise.t` to manage setup, assertions, and teardown without blocking. Together, the module and its submodules provide a streamlined interface for writing and composing asynchronous test cases using promise-style programming.",
      "description_length": 625,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Testo_lwt",
      "library": "testo-lwt",
      "description": "This module orchestrates structured test execution for Lwt-based test suites, managing test results, output expectations, and status tracking. It supports asynchronous workflows through direct integration with Lwt promises, enabling non-blocking test composition using `bind`, `catch`, and `protect`, while handling setup, assertions, and teardown concurrently. Tag-based test organization allows declaring, filtering, and grouping tests under categories like \"network\" or \"database\" for selective execution. It also captures and normalizes stdout/stderr output, validates results against expected values, and converts test definitions for external frameworks like Alcotest.",
      "description_length": 674,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 674,
    "min_description_length": 336,
    "avg_description_length": 499.5,
    "embedding_file_size_mb": 0.014954566955566406
  }
}