{
  "package": "vscoq-language-server",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 69,
  "creation_timestamp": "2025-08-15T15:08:58.540088",
  "modules": [
    {
      "module_path": "Protocol.ExtProtocol.Request.Client.SearchParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for capturing search parameters in a language server protocol request, including the document identifier, position, search pattern, and unique request ID. It provides serialization and deserialization functions to and from JSON using the Yojson library. This module is used to handle client-initiated search requests within an extended LSP implementation, ensuring structured data exchange for search operations.",
      "description_length": 449,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Request.Client.DocumentStateParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure representing parameters for a document state request, specifically containing a text document identifier. It includes functions to serialize and deserialize the structure to and from JSON format. This module is used to pass document identifiers when making requests related to document state in a language server protocol.",
      "description_length": 359,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Request.Client.DocumentProofsParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for specifying a text document identifier in a JSON-based request format. It includes functions to convert the structure to and from YoJSON representations. This is used to serialize and deserialize document identifiers when making requests related to document proofs in a client-server protocol.",
      "description_length": 333,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Request.Client.LocateParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for handling locate requests in a language server protocol, specifically capturing parameters like the document identifier, position, and search pattern. It includes functions to serialize and deserialize the structure to and from JSON, enabling communication between client and server. It is used to support features like symbol navigation or code references by providing contextual document and position information.",
      "description_length": 455,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Request.Client.AboutParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for handling request parameters in a language server protocol, specifically for queries related to code navigation or documentation lookup. It includes functions to serialize and deserialize the structure to and from JSON format, enabling communication between client and server components. The structure contains a versioned text document identifier, a position within the document, and a search pattern string.",
      "description_length": 449,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Notification.Client.StepForwardParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for representing parameters used in a step-forward notification, specifically containing a versioned text document identifier. It provides functions to serialize and deserialize this structure to and from JSON format. This is useful when handling notifications related to document state changes in a language server protocol context.",
      "description_length": 370,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Notification.Client.InterpretToEndParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a record type `t` containing a `textDocument` field of type `Lsp.Types.VersionedTextDocumentIdentifier.t`. It provides serialization and deserialization functions `t_of_yojson` and `yojson_of_t` for converting values of type `t` to and from JSON. This module is used to handle notification parameters in an LSP client, specifically for identifying a versioned text document when interpreting to end actions.",
      "description_length": 427,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Notification.Server.ProofViewParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure `t` that holds optional proof state information and a list of diagnostic messages with associated severities. It provides serialization and deserialization functions to and from Yojson for use in JSON-based communication. It is used to convey proof-related feedback, such as errors or warnings, in a server notification context.",
      "description_length": 365,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Request.Client.ResetParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for handling reset parameters in a language server protocol, specifically containing a text document identifier. It provides functions to convert this structure to and from JSON format. This module is used when a client sends a reset request to the server, ensuring the correct document context is referenced.",
      "description_length": 346,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Request.Client.CheckParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for handling check parameters in a language server protocol, specifically for client requests. It includes serialization and deserialization functions for converting between JSON and the structured type, which contains a versioned text document identifier, a position, and a pattern string. It is used to transmit and process contextual pattern-checking requests within an LSP-based editor or IDE.",
      "description_length": 434,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Notification.Server.BlockOnErrorParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for handling block-on-error notifications in a language server protocol. It includes serialization and deserialization functions for converting between JSON and a record type containing a document URI and a range. It is used to specify locations in source code where execution should pause when errors occur.",
      "description_length": 345,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol.ExtProtocol.Notification.Client.StepBackwardParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for handling step-backward notifications in a language server protocol, specifically containing a versioned text document identifier. It provides functions to convert this structure to and from JSON format using Yojson. This module is used when implementing client-side notifications for navigating backward through document versions in an editor or IDE.",
      "description_length": 391,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Notification.Server.MoveCursorParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for representing cursor movement parameters in a document, including the document URI and a range. It provides serialization and deserialization functions to and from JSON format, enabling transmission of cursor state in language server protocol messages. This module is used to communicate precise cursor positioning information between a client and a language server.",
      "description_length": 406,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol.ExtProtocol.Request.Client.DocumentStateResult",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for representing a document state result with a single string field. It provides functions to serialize and deserialize this structure to and from JSON using the Yojson library. This is typically used in client-server communication where a document's state needs to be transmitted or reconstructed from JSON data.",
      "description_length": 350,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol.Settings.Goals.Diff.Mode",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a type `t` representing the display mode for goal differences, with variants `On`, `Off`, and `Removed`. It includes functions to convert between this type and JSON strings. This module is used to serialize and deserialize goal difference display settings in a JSON format.",
      "description_length": 293,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Request.Client.DocumentProofsResult",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for handling document proofs results, specifically a list of proof blocks. It includes functions to convert the structure to and from JSON format using Yojson. It is used to serialize and deserialize proof data for document validation processes.",
      "description_length": 282,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Request.Client.PrintParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for capturing request parameters used in client-side operations involving text documents, positions, and search patterns. It includes functions to serialize and deserialize the structure to and from JSON, enabling communication with external systems. Concrete use cases include handling print or log requests in an LSP-based editor integration, where document context and cursor position are required alongside a pattern match.",
      "description_length": 464,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Notification.Server.CoqLogMessageParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for handling log message notifications in a server protocol. It includes functions to convert between a custom type `t` with a `message` field and JSON representations using `Yojson`. It is used to serialize and deserialize log messages for transmission or storage in a specific server communication context.",
      "description_length": 345,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Notification.Client.InterpretToPointParams",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for handling notification parameters that include a versioned text document identifier and a position. It provides serialization and deserialization functions to and from Yojson for this structure. This is used to interpret client notifications in the context of a specific point in a text document.",
      "description_length": 336,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol.Settings.Goals.Diff",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a type `t` with a `mode` field that represents the display settings for goal differences, using variants `On`, `Off`, and `Removed`. It provides functions to serialize and deserialize these settings to and from JSON. This module is used to persist and retrieve goal difference display preferences in a JSON-compatible format.",
      "description_length": 345,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Notification.Client",
      "library": "vscoq-language-server.lsp",
      "description": "This module handles client notifications for a language server protocol extension, supporting operations to interpret document changes to specific points or the end, and navigate backward or forward through document versions. It works with versioned text document identifiers and positions, providing JSON serialization and deserialization for each notification type. Concrete use cases include processing client-side navigation and interpretation requests in an IDE or editor integrated with a language server.",
      "description_length": 511,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Request.Client",
      "library": "vscoq-language-server.lsp",
      "description": "This module handles client-side request parameters and responses for a language server protocol, defining structured data formats for operations like document resets, code navigation, pattern checking, symbol location, printing, and search. It works with JSON and Yojson for serialization, supporting concrete use cases such as transmitting document identifiers, positions, patterns, and proof data between client and server. Specific applications include handling LSP extensions for document state queries, code intelligence features, and structured logging or validation workflows.",
      "description_length": 583,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol.ExtProtocol.Notification.Server",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines data structures and JSON serialization for handling notifications related to cursor movement, error pausing, proof state display, and log messages in a language server protocol. It supports typed representations of notification payloads, enabling precise client-server communication for document navigation, debugging, and feedback. Use cases include transmitting cursor positions, error blocking ranges, proof diagnostics, and log output during interactive development sessions.",
      "description_length": 499,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.Settings.Completion.RankingAlgoritm",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a type `t` representing two ranking algorithms used for completion suggestions: `SplitTypeIntersection` and `StructuredSplitUnification`. It provides serialization and deserialization functions to and from JSON using `yojson_of_t` and `t_of_yojson`. These functions enable storing and retrieving algorithm configurations in JSON format, typically used in settings or configuration files for editor integrations.",
      "description_length": 431,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.Settings.Goals.Messages",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for representing goal-setting messages with a single boolean field indicating completeness. It provides functions to convert this structure to and from JSON format. This module is used to serialize and deserialize goal state data for transmission or storage.",
      "description_length": 295,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.LspWrapper.QuickFixData",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for representing quick fix information in an LSP (Language Server Protocol) context, including a text description and a range within a document. It provides serialization and deserialization functions to and from Yojson for interoperability with JSON-based LSP messages. This module is used to encode and decode quick fix proposals sent between a language server and a client, such as code corrections or refactoring suggestions.",
      "description_length": 466,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol.Settings.Goals",
      "library": "vscoq-language-server.lsp",
      "description": "This module manages goal-related settings by combining display preferences for goal differences and goal state messages into a composite type. It supports JSON serialization and deserialization of this combined configuration, enabling storage or transmission of user preferences and goal states. It is used to persist and synchronize goal display settings and message completeness across sessions or systems.",
      "description_length": 408,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.LspWrapper.DiagnosticSeverity",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a type `t` representing diagnostic severity levels in the LSP protocol, including `Error`, `Warning`, `Information`, and `Hint`. It provides functions to convert between this type and S-expressions, Yojson, and a feedback level representation. Use cases include serializing diagnostic severities for transport, parsing incoming severity values from external sources, and mapping user feedback levels to LSP diagnostic severities.",
      "description_length": 449,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol.Settings.PointInterpretationMode",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines an enumeration with two variants, `Cursor` and `NextCommand`, representing different modes for interpreting points in a protocol. It provides functions `yojson_of_t` and `t_of_yojson` to serialize and deserialize these modes to and from Yojson integer values. This is used to handle configuration settings in a protocol where point interpretation affects command execution behavior.",
      "description_length": 402,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol.Settings.DelegationMode",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a type `t` representing delegation modes with three possible values: `None`, `Skip`, and `Delegate`. It includes functions to convert between this type and Yojson for serialization and deserialization. This module is used to handle configuration settings for delegation behavior in protocol operations.",
      "description_length": 322,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol.Settings.Mode",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a type `t` representing two operational modes: `Continuous` and `Manual`. It provides serialization and deserialization functions `yojson_of_t` and `t_of_yojson` for converting between these modes and JSON integer values. These functions are used to persist or transmit mode settings in a JSON format, typically during configuration loading or remote communication.",
      "description_length": 385,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Request",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines data structures and serialization logic for client-side requests and responses in a language server protocol. It supports operations like document resets, code navigation, and symbol queries using JSON and Yojson, with concrete use cases in transmitting document identifiers, positions, and proof data between client and server.",
      "description_length": 348,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.Settings.Memory",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for managing memory settings with a single integer limit field. It provides functions to convert this structure to and from JSON format using the Yojson library. It is used to configure and persist memory constraints in applications that process large data sets.",
      "description_length": 299,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.Settings.Completion",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a configuration type `t` for completion suggestion ranking, including enabling the feature, selecting an algorithm, and tuning factors for type specificity and size. It supports serialization to and from JSON for storing settings in configuration files, particularly for editor integrations. The module works with boolean, integer, float, and custom algorithm types, providing direct encoding and decoding functions.",
      "description_length": 436,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.LspWrapper.FeedbackChannel",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a variant type `t` representing feedback channels with constructors `Debug`, `Info`, and `Notice`. It provides functions to convert values of type `t` to and from S-expressions, Yojson, and a `Feedback.level`. These conversions enable serializing and deserializing feedback levels for use in logging or communication protocols.",
      "description_length": 347,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.LspWrapper.Range",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines and manipulates text range structures defined by start and end positions. It provides operations for creating ranges, comparing them, checking inclusion and adjacency, and converting to and from JSON and S-expressions. Use cases include tracking regions of source code in editors or analysis tools, managing document edits, and implementing language server protocol features like hover or completion ranges.",
      "description_length": 427,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.LspWrapper.CoqFeedback",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a data structure for representing Coq feedback messages with a range, message, and feedback channel. It provides serialization and deserialization functions for converting between S-expressions, JSON, and the defined type. It is used to convey diagnostic or status information from Coq to an LSP client, such as proof state updates or error messages.",
      "description_length": 370,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.Settings.Proof",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a record type for proof settings, including delegation mode, worker count, operation mode, block handling, and point interpretation mode. It provides serialization and deserialization functions to and from Yojson for this type. Use this module to configure and persist proof-related parameters in a structured format.",
      "description_length": 337,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.Settings.Diagnostics",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a configuration structure for enabling and controlling diagnostic features, such as error reporting and highlighting, in a client-server context. It includes serialization and deserialization functions for converting between JSON and the diagnostic settings type. It is used to interpret and send diagnostic-related configuration options in language server protocol implementations.",
      "description_length": 402,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol.Notification",
      "library": "vscoq-language-server.lsp",
      "description": "This module implements language server protocol notifications for bidirectional communication between clients and servers. It defines structured data formats and JSON encoders/decoders for events like document version updates, cursor movements, error diagnostics, and proof state rendering. Use cases include synchronizing document states across versions, displaying interactive proof feedback, and handling navigation commands in development tools.",
      "description_length": 449,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.LspWrapper.Position",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines a concrete data type for representing positions in a text document, with fields for character offset and line number. It provides functions to construct position values, convert them to and from JSON and S-expressions, and compare or display them as strings. Concrete use cases include tracking cursor locations, parsing ranges in source files, and serializing position data for communication in language server protocols.",
      "description_length": 442,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.Printing",
      "library": "vscoq-language-server.lsp",
      "description": "This module converts between different pretty-printing representations, specifically translating values of type `Pp.t` (from Coq) to a custom `pp` type and serializing/deserializing `pp` values to and from Yojson. It supports data types used in protocol messaging where structured pretty-printing is needed, such as document formatting or structured logging. A concrete use case is enabling communication between Coq's internal pretty-printer and external tools that consume or display formatted output in a protocol-driven environment.",
      "description_length": 536,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.LspWrapper",
      "library": "vscoq-language-server.lsp",
      "description": "This module implements data structures and serialization routines for LSP protocol messages, including positions, ranges, diagnostics, and feedback. It provides precise types for representing document locations, quick fixes, and severities, along with conversion functions to and from JSON and S-expressions. Concrete use cases include parsing and emitting LSP messages for Coq IDE integration, handling document edits, and transmitting diagnostic feedback between a language server and client.",
      "description_length": 494,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.Settings",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines structured configuration settings for protocol operations, combining proof, goal, completion, diagnostics, and memory parameters into a unified type. It provides serialization and deserialization to and from JSON using Yojson, enabling persistence and transmission of complex configuration data. Concrete use cases include loading and saving protocol settings, synchronizing client-server configurations, and transmitting mode and behavior preferences across distributed systems.",
      "description_length": 499,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ProofState",
      "library": "vscoq-language-server.lsp",
      "description": "This module defines and manipulates proof-related structures such as statements, steps, and blocks, each with associated JSON serialization and deserialization functions. It supports concrete operations like constructing proof elements from strings and ranges, and extracting proof data from Coq's Vernacstate. Use cases include tracking proof progress in an LSP-based editor and synchronizing proof state with JSON-based communication protocols.",
      "description_length": 446,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol.ExtProtocol",
      "library": "vscoq-language-server.lsp",
      "description": "Implements language server protocol messages for bidirectional communication, handling document synchronization, proof state updates, and navigation commands. Uses JSON and Yojson for structured data exchange, working with document identifiers, positions, and diagnostic information. Enables real-time collaboration, interactive proof feedback, and code navigation in development environments.",
      "description_length": 393,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol",
      "library": "vscoq-language-server.lsp",
      "description": "This module implements the core components for a language server protocol, handling bidirectional communication with structured data exchange in JSON and Yojson. It works with document identifiers, positions, ranges, diagnostics, proof states, and configuration settings to support real-time editing, proof feedback, and code navigation. Concrete use cases include parsing and emitting LSP messages for Coq IDE integration, synchronizing proof state with JSON-based protocols, and transmitting diagnostic and formatting data between server and client.",
      "description_length": 551,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.ParTactic.TacticWorkerProcess",
      "library": "vscoq-language-server.dm",
      "description": "Handles command-line option parsing and initialization for a tactic worker process. It processes Coq arguments, extracts worker-specific options, and prepares the environment for tactic execution. The module initializes logging and starts the main worker loop with a given Vernac state and parsed options.",
      "description_length": 305,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.DelegationManager.MakeWorker",
      "library": "vscoq-language-server.dm",
      "description": "This module manages worker delegations and job handling, providing operations to resize worker pools, process events, and coordinate job execution with feedback. It works with job types defined by the `Job` parameter, along with event streams, cancellation handles, and job queues. Concrete use cases include handling asynchronous job updates, logging job events, and setting up job execution pipelines with feedback loops.",
      "description_length": 423,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.Types.RangeList",
      "library": "vscoq-language-server.dm",
      "description": "This module manages lists of LSP ranges with operations to insert, merge, remove, truncate, and cut ranges within a list. It ensures that ranges remain non-overlapping and properly ordered after each operation. Concrete use cases include maintaining document regions in an editor, such as tracking selections, edits, or highlighting areas that must dynamically adjust as new changes occur.",
      "description_length": 389,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.ExecutionManager.ProofWorkerProcess",
      "library": "vscoq-language-server.dm",
      "description": "This module manages proof processing in a Coq toplevel environment without forking, handling task execution and state management for delegated proof operations. It works with Coq's vernacular state and command-line arguments, providing functions to parse options and run the main proof worker loop. Concrete use cases include executing proof scripts in isolated worker processes and logging proof-related events with conditional output control.",
      "description_length": 444,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.DocumentManager.Internal",
      "library": "vscoq-language-server.dm",
      "description": "Handles document state transitions and event injection for Coq IDE interactions. It operates on document states, raw documents, and execution states, providing functions to extract document content, track sentence IDs, and validate document structure during editing. Used to manage feedback delivery and synchronization between the IDE and Coq's internal document processing.",
      "description_length": 375,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.Document.Internal",
      "library": "vscoq-language-server.dm",
      "description": "Handles low-level manipulation of document content, including text parsing into sentences and code lines, and conversion of structured elements back into strings. Works directly with sentence and code_line types, which represent parsed document components. Used for tasks like rendering document sections to text or processing code blocks during document evaluation.",
      "description_length": 366,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.DelegationManager",
      "library": "vscoq-language-server.dm",
      "description": "This module manages worker delegations and job handling, providing operations to resize worker pools, process events, and coordinate job execution with feedback. It works with job types defined by the `Job` parameter, along with event streams, cancellation handles, and job queues. Concrete use cases include handling asynchronous job updates, logging job events, and setting up job execution pipelines with feedback loops.",
      "description_length": 423,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.ExecutionManager",
      "library": "vscoq-language-server.dm",
      "description": "This module orchestrates task execution for Coq document processing, handling proof checking, state caching, and error reporting while supporting dynamic delegation to worker processes. It manipulates document regions, execution contexts, and task metadata to enable state invalidation, region shifting, and feedback aggregation. Key use cases include incremental proof validation, document structure synchronization, and distributed task execution with real-time state tracking.",
      "description_length": 479,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.Log",
      "library": "vscoq-language-server.dm",
      "description": "This module manages logging and event handling during initialization and execution. It provides functions to create and retrieve logs, track events like worker initialization, and handle feedback messages with specific routing and location data. Concrete use cases include logging initialization steps, capturing debug events, and feeding back messages with structured diagnostics.",
      "description_length": 381,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.CompletionSuggester",
      "library": "vscoq-language-server.dm",
      "description": "Handles completion requests by generating a list of possible completions based on current settings and environment state. It processes user input in interactive sessions, suggesting valid terms, commands, or identifiers. Works with completion settings and environment state to produce structured completion items for editors or IDEs.",
      "description_length": 333,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.PriorityManager",
      "library": "vscoq-language-server.dm",
      "description": "This module defines integer constants representing priority levels for different tasks in a system, such as parsing, execution, and user feedback. These priorities control the order in which operations are processed, particularly in contexts like event handling or task scheduling. Use cases include setting the urgency of language server protocol messages or determining the precedence of UI updates in a proof assistant interface.",
      "description_length": 432,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.CompletionItems",
      "library": "vscoq-language-server.dm",
      "description": "This module defines a data structure for representing completion items in a proof assistant, including their reference, type, environment, and completion status. It provides functions to construct and pretty-print these items, with support for indicating partial or full completion. Use cases include interactive proof development, where users request auto-completion suggestions based on the current context.",
      "description_length": 409,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dm.Document",
      "library": "vscoq-language-server.dm",
      "description": "This module provides parsing, validation, editing, and navigation operations for structured documents, particularly Coq-like proof texts. It operates on granular elements like proof blocks, outline components, parsing events, sentences, code lines, and comments, enabling use cases such as document analysis, error detection during parsing, and scheduling text processing tasks.",
      "description_length": 378,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dm.ParTactic",
      "library": "vscoq-language-server.dm",
      "description": "This module manages the setup and execution of a tactic worker process, handling command-line argument parsing, environment initialization, and logging configuration. It works with Coq's Vernac state and worker-specific options to prepare for tactic execution, and starts the main worker loop. A concrete use case is launching a worker that processes proof tactics with a configured state and feedback routing.",
      "description_length": 410,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.Types",
      "library": "vscoq-language-server.dm",
      "description": "This module defines core data types and structures for managing document state and execution tracking in an LSP-based editor environment. It includes types for sentence identifiers, text edits, inter-process communication links, and error representations, along with an execution overview record that tracks progress using range lists. The RangeList submodule provides precise operations to manage dynamic, non-overlapping LSP ranges, enabling concrete use cases like tracking document edits, selections, and asynchronous processing regions.",
      "description_length": 541,
      "index": 61,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dm.Scheduler",
      "library": "vscoq-language-server.dm",
      "description": "This module manages the planning and execution of document sentences, handling dependencies and error recovery strategies. It works with sentences represented as abstract syntax trees, along with task structures that include execution, skipping, blocking, and proof-related operations. Concrete use cases include incremental scheduling of proof tasks, invalidating dependent sentences on errors, and resuming execution from specific points in a document.",
      "description_length": 454,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dm.DocumentManager",
      "library": "vscoq-language-server.dm",
      "description": "This module coordinates logical state transitions for Coq documents within IDEs, enabling text edits, sentence interpretation, and background processing of proof scripts. It operates on structured data including sentence identifiers, positional ranges, and proof states to support feedback retrieval, code navigation (like hover and jump-to-definition), and document structure analysis. Its design facilitates interactive IDE features such as diagnostic reporting and executed range tracking without requiring direct parsing of Coq's vernacular syntax by the IDE.",
      "description_length": 563,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dm.SearchQuery",
      "library": "vscoq-language-server.dm",
      "description": "Handles search queries and feedback notifications for a language server protocol. It interprets search requests within a given environment and evar map, returning restricted qualified identifier lists based on provided search criteria. Useful for implementing code navigation and symbol search features in an IDE.",
      "description_length": 313,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm.RawDocument",
      "library": "vscoq-language-server.dm",
      "description": "This module represents a text document and supports operations such as converting between character locations and text positions, extracting substrings from specific ranges, identifying words at given positions, and applying text edits. It works with LSP range and position types alongside internal location values to manage document content. Concrete use cases include text manipulation in response to editor actions, such as handling user input or implementing auto-correction features.",
      "description_length": 488,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dm",
      "library": "vscoq-language-server.dm",
      "description": "This module provides structured handling of document processing, task execution, and interactive feedback in a proof assistant environment. It includes facilities for auto-completion, job delegation, document parsing and editing, execution management, logging, and priority-based scheduling. Concrete use cases include incremental proof checking, interactive IDE features like hover and jump-to-definition, and distributed tactic execution with real-time feedback.",
      "description_length": 464,
      "index": 66,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Language.Hover",
      "library": "vscoq-language-server.language",
      "description": "Handles requests for hover information in an LSP server by retrieving markup content for qualified identifiers, working with environment and evar_map state. It resolves identifiers to their definitions or documentation, producing formatted content for display in an editor. Used during code navigation to show symbol details inline.",
      "description_length": 332,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Language",
      "library": "vscoq-language-server.language",
      "description": "Handles hover requests in an LSP server by resolving qualified identifiers to definitions or documentation, producing formatted markup content. Works with environment and evar_map state to retrieve symbol details during code navigation. Used to display inline documentation and type information in editors.",
      "description_length": 306,
      "index": 68,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 69,
    "meaningful_modules": 69,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 583,
    "min_description_length": 282,
    "avg_description_length": 406.94202898550725,
    "embedding_file_size_mb": 1.0001192092895508
  }
}