{
  "package": "menhirCST",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:58:24.298646",
  "modules": [
    {
      "module_path": "MenhirCST.Settle.Make.CST",
      "library": "menhirCST",
      "description": "This module defines an algebraic data type for concrete syntax trees (CSTs) composed of terminal and nonterminal nodes, where terminals wrap tokens and nonterminals pair productions with arrays of child CSTs. It provides direct access to the structure of parsed programs, enabling manipulation and transformation of syntax trees in a grammar-agnostic way. Use cases include implementing custom pretty-printers, performing syntax-directed transformations, and analyzing parse trees for semantic validation.",
      "description_length": 505,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MenhirCST.Settle.Make.DCST",
      "library": "menhirCST",
      "description": "This module defines an abstract type `dcst` for disjunctive concrete syntax trees and provides low-level constructors for building terminal, nonterminal, and choice nodes. It works directly with arrays of `dcst` values and assumes correctness of grammar structure without runtime checks. Concrete use cases include manually constructing ambiguous parse trees that can later be resolved into valid CSTs using the settlement algorithm.",
      "description_length": 433,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MenhirCST.Settle.Make",
      "library": "menhirCST",
      "description": "This module implements a resolution algorithm that converts disjunctive concrete syntax trees (DCSTs) into valid concrete syntax trees (CSTs) based on a given LR(1) automaton. It works with terminal and nonterminal nodes, using grammar productions and arrays of child trees to represent parse structures. It is used to insert parentheses or disambiguation tokens automatically, ensuring the resulting CST is parser-valid when processed from a specific state with a lookahead terminal.",
      "description_length": 484,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MenhirCST.Settle",
      "library": "menhirCST",
      "description": "This module defines data structures for concrete syntax trees (CSTs) and disjunctive concrete syntax trees (DCSTs), along with a resolution algorithm that selects a valid CST from a DCST by determining where to insert disambiguation tokens like parentheses. It operates on grammar productions, terminal and nonterminal nodes, and arrays of child trees, using an LR(1) automaton to ensure parser validity. It is used to automatically correct ambiguous parse trees so that they round-trip correctly through the parser.",
      "description_length": 516,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MenhirCST",
      "library": "menhirCST",
      "description": "This module provides algorithms to resolve disambiguated concrete syntax trees (DCSTs) into valid concrete syntax trees (CSTs) by inserting necessary disambiguation tokens such as parentheses. It works with grammar productions, terminal and nonterminal symbols, and tree structures representing parsed input. It is used to ensure that parsed trees can be re-parsed unambiguously, preserving parser validity through an LR(1) automaton.",
      "description_length": 434,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 516,
    "min_description_length": 433,
    "avg_description_length": 474.4,
    "embedding_file_size_mb": 0.07288074493408203
  }
}