{
  "package": "menhirCST",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:28.690174",
  "modules": [
    {
      "module_path": "MenhirCST.Settle.Make.DCST",
      "library": "menhirCST",
      "description": "This module defines an abstract type `dcst` for disjunctive concrete syntax trees and provides low-level constructors to build terminal, nonterminal, and choice nodes. It works directly with arrays of `dcst` values and `A.token` and `A.production` from the applied automaton description. Concrete use cases include constructing ambiguous parse trees with choice points that are later resolved into valid CSTs using the resolution algorithm.",
      "description_length": 440,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MenhirCST.Settle.Make.CST",
      "library": "menhirCST",
      "description": "The module defines an algebraic data type for concrete syntax trees (CSTs) composed of terminal and nonterminal nodes, each annotated with grammar productions and tokens. It supports operations to compute the fringe of a tree and check its viability, ensuring the parser round-trips correctly. This is used to validate and manipulate parsed structures in a grammar-agnostic way, particularly in disambiguating expressions with operator precedence.",
      "description_length": 447,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MenhirCST.Settle.Make",
      "library": "menhirCST",
      "description": "This module implements a resolution algorithm that converts disjunctive concrete syntax trees into viable concrete syntax trees, using an LR(1) automaton state and terminal symbol to resolve ambiguity. It operates on `CST.cst` and `DCST.dcst` types, which represent structured parse trees with annotations for productions and tokens, and supports operations like fringe computation and viability checking. The `DCST` submodule provides constructors for building ambiguous trees with choice nodes, while the `CST` submodule defines the resolved tree structure and validation logic. A typical use case involves constructing a DCST with multiple parenthesization options and resolving it into a valid CST that satisfies the parser's round-trip property.",
      "description_length": 750,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MenhirCST.Settle",
      "library": "menhirCST",
      "description": "This module provides types for concrete syntax trees (CST) and disjunctive concrete syntax trees (DCST), along with a resolution algorithm that transforms DCSTs into viable CSTs by inserting parentheses based on LR(1) automaton states and terminal symbols. The core operations include building ambiguous trees with choice nodes using DCST, validating and inspecting resolved trees with CST, and computing the fringe of a tree to check its viability. An example workflow involves constructing a DCST with multiple parenthesization options, then resolving it into a CST that round-trips correctly through the parser.",
      "description_length": 614,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MenhirCST",
      "library": "menhirCST",
      "description": "This module defines data structures for representing ambiguous and resolved syntax trees, enabling the construction and validation of concrete syntax trees derived from parsing. It supports operations to build disjunctive trees with choice nodes, resolve ambiguities using LR(1) automaton states and terminal symbols, and inspect the structure of resolved trees. The fringe of a tree can be computed to verify that it matches expected parser input. For example, a user can construct a DCST with multiple parenthesization options and resolve it into a CST that correctly round-trips through the parser.",
      "description_length": 601,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 750,
    "min_description_length": 440,
    "avg_description_length": 570.4,
    "embedding_file_size_mb": 0.01858806610107422
  }
}