{
  "package": "menhirCST",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:54.238507",
  "modules": [
    {
      "module_path": "MenhirCST.Settle.Make.CST",
      "description": "Represents concrete syntax trees with a generic structure suitable for various grammars, supporting operations to traverse and manipulate tree nodes. Works with non-terminal and terminal nodes, and provides functions to check viability and extract token sequences from tree fringes. Used to validate parser outputs and ensure consistency between parsed tokens and tree structures.",
      "description_length": 380,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MenhirCST.Settle.Make.DCST",
      "description": "Constructs and manipulates disjunctive concrete syntax trees using terminal, nonterminal, and choice operations. Operates on tokens and productions to build tree structures representing grammar rules. Used to represent alternative parse paths in a parser, ensuring head symbols align for valid choices.",
      "description_length": 302,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MenhirCST.Settle.Make",
      "description": "Extracts integer identifiers from states, maps tokens to terminal symbols, and retrieves left-hand sides of productions. It checks for transitions between states using terminals or nonterminals and evaluates whether a production can be reduced given a state and lookahead. Used in parser state management and shift-reduce decision logic.",
      "description_length": 337,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MenhirCST.Settle",
      "description": "Provides a system for representing and resolving ambiguous syntactic structures through concrete syntax trees (CSTs) and disjunctive concrete syntax trees (DCSTs). It includes operations to resolve ambiguities by selecting specific parenthesizations, ensuring the resulting tree satisfies the parser's round-trip property. The module supports extracting identifiers, mapping tokens to symbols, and evaluating reductions during parsing. It enables precise control over parsing decisions, such as determining valid reductions based on state and lookahead.",
      "description_length": 553,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "menhirCST",
      "description": "Provides functions to parse and transform a custom abstract syntax tree representing a language's grammar, including node creation, traversal, and modification. Operates on recursive data types such as expressions, statements, and type annotations. Used to generate intermediate representations for code analysis and transformation pipelines.",
      "description_length": 342,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MenhirCST",
      "description": "represents and resolves ambiguous syntax using concrete and disjunctive trees, with tools to select parenthesizations and maintain parser consistency. It handles identifier extraction, token-to-symbol mapping, and reduction evaluation during parsing. Operations allow fine-grained control over parsing decisions based on state and lookahead. Users can manipulate tree structures, resolve ambiguities, and ensure correct semantic interpretations during analysis.",
      "description_length": 461,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 553,
    "min_description_length": 302,
    "avg_description_length": 395.8333333333333,
    "embedding_file_size_mb": 0.02221393585205078
  }
}