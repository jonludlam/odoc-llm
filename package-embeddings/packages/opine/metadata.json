{
  "package": "opine",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:53:08.779247",
  "modules": [
    {
      "module_path": "Opine.Unparse.State",
      "library": "opine",
      "description": "This module manages state during the unparsing of Python expressions, handling indentation, buffering output, and precedence tracking. It provides operations to modify the current indentation level, delimit blocks with specific strings, conditionally wrap expressions in parentheses, and buffer intermediate results. Use cases include generating properly formatted Python code from an AST, ensuring correct operator precedence, and managing line breaks and indentation in nested expressions.",
      "description_length": 491,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opine.Unparse.Precedence",
      "library": "opine",
      "description": "This module defines a set of precedence levels corresponding to Python expression constructs such as logical operations, arithmetic, and bitwise operations. It provides direct mappings between these precedence levels and integers, enabling comparisons, hashing, and serialization to and from S-expressions. Use this module to determine the correct parenthesization when unparsing abstract syntax trees by comparing operator precedences or converting them to numeric values for efficient storage or transmission.",
      "description_length": 511,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opine.Unparse",
      "library": "opine",
      "description": "This module transforms abstract syntax trees into syntactically correct source code through recursive traversal and formatting rules. It handles operator precedence, indentation tracking, and string escaping while operating on AST nodes like expressions, function definitions, and module imports. Key applications include generating readable Python code from AST representations, preserving semantic structure in docstrings, and ensuring valid parenthesization during code reconstruction.",
      "description_length": 488,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opine",
      "library": "opine",
      "description": "Transforms abstract syntax trees into valid source code by recursively applying formatting rules, handling operator precedence, indentation, and string escaping. Operates on AST nodes such as expressions, function definitions, and imports. Used to generate readable Python code, preserve docstring semantics, and ensure correct parenthesization during code reconstruction.",
      "description_length": 372,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 511,
    "min_description_length": 372,
    "avg_description_length": 465.5,
    "embedding_file_size_mb": 0.05837535858154297
  }
}