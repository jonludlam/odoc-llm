{
  "package": "opine",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:30:06.186190",
  "modules": [
    {
      "module_path": "Opine.Unparse.Precedence",
      "description": "Provides comparison, serialization, and hashing operations for a type representing precedence levels. Works with an abstract type `t` and integer-based enumerations for conversion. Used to manage operator precedence in parsing or evaluation contexts.",
      "description_length": 250,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opine.Unparse.State",
      "description": "Provides operations to construct and manipulate a stateful buffer for generating formatted output, including adding strings, wrapping blocks, and conditionally delimiting content. Works with a custom state type that tracks indentation, buffer content, and expression precedences. Used to generate Python-like syntax with proper spacing and formatting, such as inserting code blocks or handling operator precedence.",
      "description_length": 414,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opine.Unparse",
      "description": "manages operator precedence and formatted output through abstract type operations and stateful buffer manipulation. It supports comparing, serializing, and hashing precedence values, and constructs buffers that track indentation, content, and precedences to generate structured text. Users can insert code blocks, handle spacing, and manage operator precedence during output generation. Examples include formatting Python-like syntax or generating expressions with correct spacing and grouping.",
      "description_length": 494,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "opine",
      "description": "Provides functions for parsing and evaluating logical expressions using a custom abstract syntax tree. Operates on strings, boolean values, and structured expression trees derived from user input. Enables real-time validation of complex query conditions in a rule-based system.",
      "description_length": 277,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opine",
      "description": "manages operator precedence and formatted output using abstract types and stateful buffers, enabling precise control over indentation, content, and spacing during text generation. It supports comparing, serializing, and hashing precedence values, and allows inserting code blocks with correct grouping. Users can generate structured outputs like Python expressions with proper formatting. Examples include producing well-indented code or expressions with accurate operator precedence handling.",
      "description_length": 493,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 494,
    "min_description_length": 250,
    "avg_description_length": 385.6,
    "embedding_file_size_mb": 0.018598556518554688
  }
}