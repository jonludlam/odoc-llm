{
  "package": "llama_core",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-07-15T23:08:36.946257",
  "modules": [
    {
      "module_path": "Llama_core.Midi.Gate_table",
      "library": "llama_core",
      "description": "This module implements a lookup table for MIDI gate signals, mapping integer keys to gate values. It provides direct access to individual gates using the `get` function. Useful for retrieving precomputed gate states based on MIDI note numbers or other integer indices.",
      "description_length": 268,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_core.Music.Note_name",
      "library": "llama_core",
      "description": "This module defines a polymorphic variant type representing the twelve chromatic musical note names, including sharps. It provides a function to convert each note name to its corresponding string representation. This facilitates tasks like musical notation display, MIDI conversion, and music theory calculations where precise note names are required.",
      "description_length": 351,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_core.Midi.Controller_table",
      "library": "llama_core",
      "description": "This module maps MIDI controller values to signals, providing direct access to raw controller data and specialized signals for modulation and volume. It works with MIDI controller tables and signal values, enabling real-time parameter control in audio processing. Use it to bind MIDI knobs, sliders, or pedals to dynamic parameters in a synthesizer or effects chain.",
      "description_length": 366,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_core.Signal.Ctx",
      "library": "llama_core",
      "description": "This module defines a context type for signal processing operations, containing the current sample index and sample rate in Hz. It provides functions to create, update, and query these context values during audio signal manipulation. Use this module when handling time-based audio processing tasks such as waveform generation or filtering.",
      "description_length": 339,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_core.Signal.Trigger",
      "library": "llama_core",
      "description": "This module provides operations to create, manipulate, and sample trigger signals, which are boolean signals that transition from false to true for a single sample. It supports detecting rising edges on boolean signals, converting existing boolean signals into trigger signals, and inspecting trigger behavior through sampling and debug printing. Concrete use cases include detecting button presses in UIs, capturing discrete events in signal processing pipelines, and synchronizing state changes in reactive systems.",
      "description_length": 517,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_core.Music.Note",
      "library": "llama_core",
      "description": "This module represents musical notes as pairs of note names and octaves. It provides functions to convert notes to MIDI indices and back, as well as to calculate their frequency in Hertz. These operations support tasks like synthesizer tuning, MIDI file parsing, and audio signal generation.",
      "description_length": 291,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_core.Signal.Raw",
      "library": "llama_core",
      "description": "This module implements signal transformations using stateful computations, allowing the creation of new signals based on initial state and update functions. It supports mapping and binding operations over signal values, enabling dynamic behavior modification and chaining of signal-driven logic. Concrete use cases include modeling time-varying values like sensor inputs, UI state, or animation parameters that evolve in response to internal or external changes.",
      "description_length": 462,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_core.Midi.Midi_sequencer",
      "library": "llama_core",
      "description": "Handles MIDI event streams by extracting gate signals and synthesizing voice data. It processes event lists into structured outputs with pitch, gate, and velocity signals, supporting polyphonic synthesis on a specified channel. Useful for real-time MIDI sequencing and voice allocation in audio synthesis applications.",
      "description_length": 318,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_core.Signal.Gate",
      "library": "llama_core",
      "description": "This module provides functions to convert between gate signals and boolean values, sample gate states within a context, and transform gates into triggers. It operates on the abstract type `t` representing a gate and its associated signal type. Concrete use cases include controlling signal flow in reactive systems, debugging sampled gate activations, and integrating boolean logic into signal networks.",
      "description_length": 403,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_core.Midi",
      "library": "llama_core",
      "description": "This module processes MIDI signals and sequences, integrating gate tables, controller mappings, and event stream handling to support real-time MIDI data manipulation. It provides data types for representing MIDI events, control changes, and voice signals, with operations to map, retrieve, and synthesize audio parameters. Use it to bind MIDI controllers to dynamic parameters, extract gate signals from note events, or generate polyphonic synthesis output from incoming MIDI streams. Submodules enable direct access to gate states, raw controller data, and structured voice outputs for flexible integration in audio applications.",
      "description_length": 630,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_core.Dsl",
      "library": "llama_core",
      "description": "This module provides a domain-specific language for constructing and manipulating signals through transformations, arithmetic operations, and audio-specific processing. It operates on signals represented as `float Llama_core.Dsl.t`, alongside triggers, gates, and sequencer steps, enabling pipelines for tasks like audio synthesis, filtering, and envelope shaping. Key use cases include building signal processing graphs with dynamic sampling, generating waveforms, applying effects like delay and saturation, and designing audio synthesis systems with feedback loops or step sequencing.",
      "description_length": 587,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_core.Music",
      "library": "llama_core",
      "description": "This module combines core utilities for musical pitch computation with structured representations of musical notes and their transformations. It offers functions to convert MIDI indices to frequencies and calculate semitone intervals, while its submodules define precise note names and octave-based note structures. Main data types include polymorphic variants for chromatic note names and tuples pairing note names with octaves. You can convert note names to strings, transform notes to MIDI values, compute their frequencies, and support applications like synthesizer tuning and musical scale generation.",
      "description_length": 606,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_core.Float",
      "library": "llama_core",
      "description": "This module supports arithmetic operations (including FMA, remainder, and decomposition), numerical analysis (classification, logarithms, trigonometric functions), and value transformation (rounding, clamping, sign manipulation) on OCaml's native `float` type. It adheres to IEEE 754 semantics, handling edge cases like infinities, NaNs, and subnormal numbers, while providing utilities for conversion to/from integers/strings and hash generation. Typical applications include scientific computing, financial modeling, and machine learning, where precise floating-point calculations and robust handling of numerical edge cases are critical.",
      "description_length": 640,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Llama_core.Signal",
      "library": "llama_core",
      "description": "This module processes numerical and boolean signals for applications like audio synthesis and reactive systems, supporting arithmetic transformations, range conversion, and conditional routing through gates. It manages time-based operations via a context type that tracks sample index and rate, while trigger signals capture single-sample events like button presses or state transitions. Stateful computations enable dynamic signal chains based on evolving values, and gate operations bridge boolean logic with signal flow control. Examples include generating waveforms, synchronizing events in UIs, and modeling sensor inputs that adapt over time.",
      "description_length": 648,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Llama_core",
      "library": "llama_core",
      "description": "This collection processes MIDI and audio signals, numerical data, and musical structures to build dynamic synthesis and control systems. It supports MIDI event handling, signal processing pipelines, musical pitch computation, floating-point arithmetic, and time-aware signal manipulation. Key data types include MIDI events, float signals with triggers and gates, note representations, and numerical operations adhering to IEEE 754. You can map MIDI controllers to audio parameters, design synthesis graphs with feedback, convert note names to frequencies, perform precise floating-point calculations, and synchronize signal processing with time-based events.",
      "description_length": 659,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 659,
    "min_description_length": 268,
    "avg_description_length": 472.3333333333333,
    "embedding_file_size_mb": 0.05493640899658203
  }
}