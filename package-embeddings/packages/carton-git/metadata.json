{
  "package": "carton-git",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:14.714329",
  "modules": [
    {
      "module_path": "Carton_git_unix.Store",
      "description": "Provides functions for managing file descriptors and data storage, including creating, mapping, and closing files with specific access modes. Operates on types like file paths, file descriptors, and error states, supporting read and write operations. Used to read data from specific positions in a file, retrieve list of user IDs, and determine file lengths asynchronously.",
      "description_length": 373,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carton_git_unix.Make",
      "description": "Provides operations to construct, manipulate, and inspect a fixed-size binary data type, including feeding data from a buffer, extracting raw strings, and converting to and from hexadecimal. Works with a context type for incremental processing and a core type representing binary data. Used for parsing or generating binary protocols, ensuring precise control over data representation.",
      "description_length": 385,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carton_git.Make",
      "description": "Provides functions to create, manage, and interact with file descriptors, including reading data, closing files, and listing user IDs. Operates on custom types like file descriptors, user IDs, and error states, using big strings for data transfer. Used to handle low-level file operations and ensure safe, asynchronous resource management.",
      "description_length": 339,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "carton-git",
      "description": "Provides functions to parse Git repository metadata, including commit hashes, tree structures, and blob content from a local repository. Operates on byte sequences, strings, and custom record types representing Git objects. Enables direct inspection of Git history and file contents without external dependencies.",
      "description_length": 313,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carton_git_unix",
      "description": "manages file operations and binary data processing through functions for handling file descriptors, reading and writing data, and inspecting file properties, while also enabling binary data manipulation with context-based processing and hexadecimal conversion. It works with file paths, descriptors, error states, and a binary data core type, supporting asynchronous file length checks and binary protocol parsing. Operations include reading from specific file offsets, extracting strings from binary data, and converting between binary and hexadecimal formats. Examples include retrieving user IDs from files and constructing binary messages for network communication.",
      "description_length": 669,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carton_git",
      "description": "Provides monadic operations for handling asynchronous or effectful computations, including exception handling with `catch`, chaining with `bind`, and lifting values with `return`. Works with a parameterized type `'a t` representing computations that may involve side effects. Used to manage Git operations that require error recovery and sequential execution.",
      "description_length": 359,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 669,
    "min_description_length": 313,
    "avg_description_length": 406.3333333333333,
    "embedding_file_size_mb": 0.02222919464111328
  }
}