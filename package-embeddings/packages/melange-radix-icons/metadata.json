{
  "package": "melange-radix-icons",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 638,
  "creation_timestamp": "2025-06-18T17:17:29.943384",
  "modules": [
    {
      "module_path": "RadixIcons.Radiobutton.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DoubleArrowRight.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderNone.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ShadowOuter.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Video.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Trash.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Play.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Cross2.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.RulerSquare.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.TextAlignJustify.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type for configuration. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic behavior.",
      "description_length": 287,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Crosshair2.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.MagnifyingGlass.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that returns a React element based on the provided properties. Used to generate reusable UI elements with controlled styling and reference handling.",
      "description_length": 297,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Share2.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ArrowDown.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type with optional fields. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 296,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SewingPin.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LinkBreak2.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ComponentBoolean.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function to generate a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 286,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CrumpledPaper.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type for configuration. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic behavior.",
      "description_length": 287,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Reader.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Bookmark.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.BorderDashed.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ThickArrowLeft.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DoubleArrowUp.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Download.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Sun.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CardStack.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.CodeSandboxLogo.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ListBullet.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TextAlignLeft.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.SewingPinFilled.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BarChart.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference, using a structured record type for configuration. Accepts and returns React elements, enabling integration with JSX and component hierarchies. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 321,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.RotateCounterClockwise.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type to encapsulate these attributes. Accepts a function that generates a React element based on the provided properties. Used to construct reusable UI elements with dynamic styling and reference handling.",
      "description_length": 318,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Component1.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AlignLeft.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LetterCaseLowercase.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ArrowUp.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.NotionLogo.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ArrowBottomRight.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ColumnSpacing.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Moon.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ChevronUp.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Gear.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ThickArrowRight.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Face.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.AllSides.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and element identification.",
      "description_length": 266,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Target.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type to encapsulate these attributes. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic behavior.",
      "description_length": 301,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Calendar.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CardStackMinus.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a React element as a render function, enabling dynamic and typed component composition. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 308,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ChatBubble.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpeakerQuiet.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and element targeting.",
      "description_length": 256,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LetterCaseUppercase.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Layers.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Crop.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CircleBackslash.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.MaskOff.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Margin.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LockOpen2.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Archive.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ActivityLog.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SketchLogo.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference, using a structured record type. Operates on optional string and DOM reference values to configure component behavior. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 291,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Share1.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Button.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ExclamationTriangle.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Checkbox.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.CheckCircled.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.InstagramLogo.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.CornerTopRight.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TriangleRight.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type with optional fields. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 296,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Slider.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Grid.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Quote.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PinRight.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.MaskOn.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 72,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.TextAlignCenter.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PieChart.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Code.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.StarFilled.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type for configuration. Operates with React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic attributes.",
      "description_length": 291,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Underline.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.QuestionMarkCircled.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PinTop.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LinkedInLogo.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 80,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.EnvelopeClosed.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Tokens.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DragHandleVertical.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CaretLeft.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Width.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FontRoman.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.StretchHorizontally.Comp",
      "description": "Handles property and component creation for React elements, supporting optional color, class name, ref, and key attributes. Operates on record types with optional fields and React elements. Used to construct reusable UI components with dynamic styling and reference management.",
      "description_length": 277,
      "index": 87,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.BorderAll.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Copy.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.EnterFullScreen.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.VercelLogo.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Height.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Strikethrough.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Image.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ThickArrowDown.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpeakerLoud.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DrawingPin.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type for configuration. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic behavior.",
      "description_length": 287,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Exit.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LetterCaseToggle.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Circle.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Mobile.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Commit.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.MixerHorizontal.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Clipboard.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.IconJarLogo.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Pause.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DiscordLogo.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.EyeOpen.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ThickArrowUp.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Person.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Move.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type for configuration. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic attributes.",
      "description_length": 289,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Shuffle.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TrackNext.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ViewNone.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 114,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.DragHandleDots2.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ValueNone.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 116,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.DoubleArrowDown.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 117,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.FileMinus.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ArrowTopRight.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Dashboard.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DrawingPinFilled.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Dash.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 122,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Half2.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FontItalic.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ArrowTopLeft.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 125,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Laptop.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Heading.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.File.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderWidth.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Corners.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference, using a structured record type. Accepts and returns React elements, enabling component composition with specific attributes. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 303,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ZoomOut.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BoxModel.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AlignCenterHorizontally.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.EyeClosed.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ArrowBottomLeft.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type to encapsulate these attributes. Accepts a function that generates a React element based on the provided properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 314,
      "index": 135,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ViewGrid.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PlusCircled.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ChevronDown.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Home.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type to encapsulate these attributes. Operates with React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic behavior in a React application.",
      "description_length": 326,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.RowSpacing.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Reset.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Disc.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TransparencyGrid.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ExitFullScreen.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Hand.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderSplit.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Stopwatch.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderStyle.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CornerBottomRight.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 149,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Badge.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CrossCircled.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.InfoCircled.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LapTimer.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.TrackPrevious.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.EyeNone.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type with optional fields. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 296,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LetterCaseCapitalize.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Cube.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Switch.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ComponentPlaceholder.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BlendingMode.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 160,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Dimensions.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type with optional fields. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 296,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CountdownTimer.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Plus.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Half1.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FontStyle.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Stop.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Enter.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference, using a structured record type. Accepts and returns React elements, enabling component composition with specific attributes. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 303,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpaceEvenlyVertically.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Table.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 169,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.BorderRight.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CaretDown.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderDotted.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Text.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ShadowNone.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 174,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.PinBottom.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CounterClockwiseClock.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TriangleDown.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Size.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PinLeft.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LineHeight.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Rocket.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LinkNone2.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FontSize.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type to encapsulate these options. Accepts a function that generates a React element based on the provided properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 311,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CornerBottomLeft.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type to encapsulate these options. Accepts a function that generates a React element based on the provided properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 311,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Backpack.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference. Operates on option types for optional attributes and React elements. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 247,
      "index": 185,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.HamburgerMenu.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type for configuration. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic attributes in a React application.",
      "description_length": 312,
      "index": 186,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Slash.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.IdCard.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and element identification.",
      "description_length": 266,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Section.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Clock.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Avatar.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Star.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 192,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.RulerHorizontal.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LightingBolt.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Frame.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference, using a structured record type for configuration. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with controlled attributes and lifecycle hooks.",
      "description_length": 321,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FramerLogo.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type for configuration. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with controlled behavior and lifecycle management.",
      "description_length": 315,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ComponentInstance.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Layout.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CaretSort.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CornerTopLeft.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 200,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LockClosed.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Pencil2.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type to encapsulate these attributes. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic behavior in a React application.",
      "description_length": 324,
      "index": 202,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ShadowInner.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CursorArrow.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Stack.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ClipboardCopy.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type to encapsulate these attributes. Accepts a function that generates a React element based on the provided properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 314,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.MagicWand.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LinkNone1.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 208,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.DoubleArrowLeft.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 209,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.TextNone.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 210,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.TextAlignTop.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Mix.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and element targeting.",
      "description_length": 256,
      "index": 212,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ModulzLogo.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TextAlignBottom.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ColorWheel.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 215,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.CaretUp.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.HobbyKnife.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Check.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Accessibility.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DropdownMenu.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderLeft.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DividerHorizontal.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type with optional fields. Operates on React elements and DOM references to build reusable UI components. Used to generate styled, identifiable, and referenceable React elements in a type-safe manner.",
      "description_length": 313,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.StretchVertically.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TextAlignRight.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ChevronRight.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Eraser.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type for configuration. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic attributes in a React application.",
      "description_length": 312,
      "index": 226,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.TextAlignMiddle.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Columns.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ViewVertical.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 229,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Square.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 230,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.AlignCenterVertically.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TriangleLeft.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference, using a structured record type for configuration. Accepts and returns React elements, enabling component composition with specific attributes. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 321,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Globe.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Desktop.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpeakerModerate.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AspectRatio.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference, using a structured record type. Accepts and returns React elements, enabling component composition with specific attributes. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 303,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Overline.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Heart.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and element identification.",
      "description_length": 266,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Update.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference, using a structured record type for configuration. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with controlled attributes and lifecycle hooks.",
      "description_length": 321,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Padding.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function to generate a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 286,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Transform.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AlignBottom.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 242,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.BorderTop.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FontBold.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Rows.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.MixerVertical.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type for configuration. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic behavior.",
      "description_length": 287,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpeakerOff.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpaceBetweenHorizontally.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type with optional fields. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 296,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Dot.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type with optional fields. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 296,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Timer.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type with optional fields. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 296,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DragHandleDots1.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ArrowRight.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference, using a structured record type for configuration. Accepts and returns React elements, enabling component composition with specific attributes. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 321,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DividerVertical.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type for configuration. Accepts a React element as a render function, enabling dynamic and reusable UI components. Used to build interactive UI elements with controlled styling and reference management.",
      "description_length": 315,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FilePlus.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 254,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.CardStackPlus.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference, using a structured record type for configuration. Operates on React elements and DOM references to build interactive UI components. Used to generate reusable, styled UI elements with dynamic attributes in a type-safe manner.",
      "description_length": 320,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.StitchesLogo.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpaceEvenlyHorizontally.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Minus.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ComponentNone.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PaperPlane.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TwitterLogo.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LinkBreak1.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AlignBaseline.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderSolid.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.EnvelopeOpen.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Value.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BookmarkFilled.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 267,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.FigmaLogo.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Resume.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.OpenInNewWindow.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Shadow.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type with optional fields. Operates on React elements and DOM references, enabling structured component configuration. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 314,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpaceBetweenVertically.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LockOpen1.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Container.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Symbol.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Input.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 276,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Angle.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ViewHorizontal.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DotsHorizontal.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Box.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CursorText.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and element identification.",
      "description_length": 266,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AlignTop.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 282,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Link2.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Reload.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Pencil1.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Component2.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.BorderBottom.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.MinusCircled.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Camera.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference, using a structured record type. Accepts and returns React elements, enabling component composition with specific attributes. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 303,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Group.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a record type for configuration. Accepts a function that generates a React element based on the provided properties. Used to build reusable UI elements with dynamic styling and reference handling.",
      "description_length": 300,
      "index": 290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Bell.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Crosshair1.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.GitHubLogo.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TriangleUp.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Keyboard.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FontFamily.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Cross1.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DragHandleHorizontal.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a React element as a render function, enabling flexible UI composition. Used to build reusable, configuration-driven UI elements with explicit typing.",
      "description_length": 288,
      "index": 298,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Scissors.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 299,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Loop.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Opacity.Comp",
      "description": "Creates React components with customizable properties such as color, class name, and reference. Operates on a record type containing optional string and DOM reference fields. Used to generate styled, reusable UI elements with controlled attributes.",
      "description_length": 248,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ChevronLeft.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AlignRight.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ZoomIn.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.HeartFilled.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 305,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ArrowLeft.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.QuestionMark.Comp",
      "description": "Creates React components with customizable properties such as color, class name, ref, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 256,
      "index": 307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Upload.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ExternalLink.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DotsVertical.Comp",
      "description": "Handles property and component creation for React elements, supporting color, class name, ref, and key attributes. Operates on option types for flexible configuration and React elements. Used to construct reusable UI components with dynamic styling and reference management.",
      "description_length": 274,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CaretRight.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LetterSpacing.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Pilcrow.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and interactivity.",
      "description_length": 257,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Cookie.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 314,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Link1.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key, using a typed record structure. Accepts a function that generates a React element based on these properties. Used to build reusable UI elements with controlled styling and reference handling.",
      "description_length": 289,
      "index": 315,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.FileText.Comp",
      "description": "Creates a component with customizable properties including color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 259,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DotFilled.Comp",
      "description": "Creates React components with customizable properties such as color, class name, reference, and key. Operates on a record type containing optional string and DOM reference fields. Used to generate reusable UI elements with dynamic styling and reference handling.",
      "description_length": 262,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Accessibility",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that includes optional string and DOM reference fields. Supports customization via color, class name, reference, and key properties. Enables creation of adaptable UI elements that respond to runtime changes. Examples include themed buttons, interactive forms, and dynamic lists with custom styling.",
      "description_length": 395,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ActivityLog",
      "description": "Generates reusable React components with dynamic styling and interactivity by applying optional string and DOM reference properties. Operates on a record type that defines color, class name, reference, and key. Allows for the creation of customizable UI elements that can be dynamically rendered and manipulated. Example uses include building interactive buttons with custom colors or handling DOM references for form elements.",
      "description_length": 427,
      "index": 319,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.AlignBaseline",
      "description": "Manages reusable UI components with dynamic styling and reference tracking through a record type containing optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of adaptable elements that integrate seamlessly into larger interfaces. Example uses include generating styled buttons with unique identifiers or dynamically updating component references.",
      "description_length": 427,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AlignBottom",
      "description": "Provides a flexible way to construct reusable UI components by encapsulating properties such as color, class name, reference, and key. Accepts a rendering function that produces a React element, enabling dynamic and styled UI building. Supports controlled styling and reference management through a typed record interface. Example use includes creating a customizable button with specific styling and event handling capabilities.",
      "description_length": 429,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AlignCenterHorizontally",
      "description": "Manages horizontal alignment of UI components through a record-based structure that supports optional string and DOM reference fields. Allows customization of visual and structural properties such as color and class name. Enables dynamic creation of reusable elements with controlled styling and reference management. Example use includes generating a centered button with a specified background color and accessible DOM reference.",
      "description_length": 431,
      "index": 322,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AlignCenterVertically",
      "description": "Manages vertically centered UI components with dynamic styling and reference capabilities. Operates on a record type with optional string and DOM reference fields, enabling customization through color, class name, and other properties. Supports creation of reusable elements that maintain consistent vertical alignment while adapting to runtime configurations. Example uses include centering form elements or dynamic content within a layout while preserving interactivity through references.",
      "description_length": 491,
      "index": 323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AlignLeft",
      "description": "Provides a flexible way to construct reusable UI components by combining customizable properties such as color, class name, reference, and key. Accepts a rendering function that produces a React element, enabling dynamic and styled UI building. Key data types include a typed record for properties and a function mapping those properties to elements. Examples include creating a styled button with a custom class or a form input with a referenced handler.",
      "description_length": 455,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.AlignRight",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of component instances with tailored behavior and layout. Example: rendering a button with a specified background color and click handler attached to a DOM element.",
      "description_length": 408,
      "index": 325,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.AlignTop",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic color, class, ref, and key assignments. Enables consistent, type-safe component creation with flexible configuration options.",
      "description_length": 339,
      "index": 326,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.AllSides",
      "description": "Generates reusable React components with dynamic styling and element identification through a record type containing optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of adaptable UI elements that can be dynamically rendered and manipulated. Examples include styled buttons with custom classes or interactive elements with unique identifiers.",
      "description_length": 423,
      "index": 327,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Angle",
      "description": "Encapsulates UI element creation through a record-based structure that supports optional string and DOM reference fields. Enables dynamic styling and interactivity by allowing customization of properties like color and class name. Components can be instantiated with specific configurations and integrated into larger React applications. Examples include generating styled buttons with custom classes or attaching references for programmatic control.",
      "description_length": 450,
      "index": 328,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Archive",
      "description": "Generates reusable UI elements by combining customizable properties like color, class name, and DOM references into structured components. Operates on a record type with optional string and reference fields to enable dynamic styling and interactivity. Allows developers to create components that adapt to different contexts while maintaining consistent behavior. For example, a button component can be styled dynamically based on user input or rendered with a custom reference for programmatic interaction.",
      "description_length": 506,
      "index": 329,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ArrowBottomLeft",
      "description": "Encapsulates UI components with customizable attributes such as color, class, reference, and key, using a record type to manage properties. Accepts a rendering function to generate React elements dynamically. Supports creating reusable, styled UI elements with programmatic reference management. Example: rendering a button with custom styling and a ref attached for DOM manipulation.",
      "description_length": 384,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ArrowBottomRight",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a button with conditional styling and event handlers.",
      "description_length": 377,
      "index": 331,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ArrowDown",
      "description": "Provides a flexible way to construct reusable UI components by combining customizable properties such as color, class name, reference, and key. The core data type is a record with optional fields, and it supports a function that renders a React element based on these values. This enables dynamic styling, element referencing, and component composition. For example, it can generate a button with custom styles and attach a reference to a DOM node for programmatic interaction.",
      "description_length": 477,
      "index": 332,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ArrowLeft",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling tailored UI elements. Components can be dynamically rendered with specified attributes and linked to DOM nodes for enhanced control. Example uses include creating styled buttons with custom classes or handling user interactions through referenced elements.",
      "description_length": 481,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ArrowRight",
      "description": "Generates reusable React components with configurable properties like color, class, and reference, using a structured record for setup. Components accept and return React elements, supporting composition through attribute passing. Operations include defining, customizing, and combining UI elements. Example: create a button with dynamic styling and attach a ref for DOM manipulation.",
      "description_length": 384,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ArrowTopLeft",
      "description": "Provides a flexible way to construct reusable UI components with typed configuration. Accepts a styling function and exposes properties like color, class, ref, and key for customization. Enables dynamic rendering of elements with controlled appearance and behavior. Example: render a button with specific color and class using a predefined styling function.",
      "description_length": 357,
      "index": 335,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ArrowTopRight",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a button with a custom color and event handler attached via a reference.",
      "description_length": 396,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ArrowUp",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a button with conditional styling and event handlers tied to a DOM element.",
      "description_length": 394,
      "index": 337,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.AspectRatio",
      "description": "Provides a system for building reusable React components with structured configuration, allowing customization through color, class names, and references. Key data types include a record type for component properties and React elements for output. Operations enable composition and styling of UI elements, such as creating a styled button with a custom class and reference. Examples include generating a responsive container with dynamic styling or a clickable element that triggers a callback via a reference.",
      "description_length": 510,
      "index": 338,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Avatar",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these attributes. Example uses include rendering styled buttons with custom classes or managing component references for DOM manipulation.",
      "description_length": 470,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Backpack",
      "description": "Generates reusable React components with dynamic styling and reference management through optional properties. Accepts and returns React elements, utilizing option types for flexible attribute handling. Supports customization via color, class name, and ref, enabling tailored UI elements. Examples include creating styled buttons with optional classes or handling dynamic component references.",
      "description_length": 393,
      "index": 340,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Badge",
      "description": "Generates reusable React UI elements with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key parameters. Enables creation of component instances with tailored properties and direct DOM manipulation. Examples include rendering styled badges with custom classes or attaching references for programmatic interaction.",
      "description_length": 431,
      "index": 341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BarChart",
      "description": "Generates reusable React UI elements with dynamic styling and reference management through a structured configuration record. Supports custom properties like color, class name, and ref, and produces React elements compatible with JSX. Enables flexible component composition and styling adjustments at render time. Example: rendering a bar chart with varying colors and interactive references.",
      "description_length": 392,
      "index": 342,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Bell",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via properties like color, class name, reference, and key. Enables creation of interactive UI elements with flexible configuration. Example: rendering a button with custom color and class that updates based on user input.",
      "description_length": 394,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BlendingMode",
      "description": "Combines customizable UI components with dynamic rendering, allowing properties like color and class to influence element output. Operates on typed records containing styling, reference, and key information, and applies a rendering function to produce React elements. Enables creation of reusable, styled UI parts with controlled behavior. For example, it can generate a button with specified background color and CSS class, or a form input with a custom reference handler.",
      "description_length": 473,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BookmarkFilled",
      "description": "Encapsulates reusable UI components with tailored styling and reference management through a typed record. Accepts a rendering function to generate elements based on provided properties. Supports custom color, class, ref, and key attributes for flexible component creation. Enables consistent, controlled UI building across different parts of an application.",
      "description_length": 358,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Bookmark",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic color, class, ref, and key assignments for flexible component composition. Enables creation of consistent, configurable UI elements like buttons or inputs with controlled behavior.",
      "description_length": 394,
      "index": 346,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.BorderAll",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of adaptable UI elements that respond to user input and state changes. Example: rendering a bordered container with specified color and class, attaching a reference for programmatic access.",
      "description_length": 433,
      "index": 347,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.BorderBottom",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of adaptable UI elements that respond to runtime changes. Example: rendering a styled border with a custom class and reference to manipulate it via JavaScript.",
      "description_length": 403,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderDashed",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a styled border with a custom class and reference to manipulate its DOM node.",
      "description_length": 401,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderDotted",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that holds optional string and DOM reference fields. Supports customization via color, class name, ref, and key parameters. Enables creation of adaptable UI elements that can be dynamically styled and integrated with external references. Examples include rendering styled borders with custom classes or attaching refs to track component instances.",
      "description_length": 451,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderLeft",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Allows for creating flexible UI elements that adapt to different contexts. Example: rendering a bordered element with a specified color and custom class.",
      "description_length": 380,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderNone",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that includes optional string and DOM reference fields. Supports customization via color, class name, ref, and key parameters. Enables creation of adaptable UI elements that can be dynamically styled and integrated with external references. Examples include rendering styled buttons with custom classes or managing focus through refs.",
      "description_length": 438,
      "index": 352,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.BorderRight",
      "description": "Generates reusable React components with dynamic styling and reference management through a record-based configuration. Supports optional string and DOM reference fields for flexible component customization. Enables creation of elements with specified color, class, ref, and key attributes. Allows for tailored UI building by combining these properties in various configurations.",
      "description_length": 379,
      "index": 353,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.BorderSolid",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Allows customization of color, class name, reference, and key to tailor UI elements. Components can be rendered with specific styles and linked to DOM nodes for enhanced control. Example uses include creating styled borders with custom classes or attaching event handlers via references.",
      "description_length": 437,
      "index": 354,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.BorderSplit",
      "description": "Manages UI components with dynamic styling and reference capabilities through a record-based interface. Supports operations to configure and render elements with optional color, class, reference, and key attributes. Allows for the creation of reusable, customizable UI fragments that integrate with DOM manipulation. Example uses include generating styled divs with unique identifiers or applying conditional classes based on state.",
      "description_length": 432,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderStyle",
      "description": "Manages UI elements through a record type that holds optional string and DOM reference values, enabling dynamic styling and component customization. Supports creation of reusable React components with properties like color, class name, ref, and key. Allows for flexible manipulation of UI elements by exposing internal state and behavior. Example uses include applying conditional styles or attaching event handlers to specific DOM nodes.",
      "description_length": 438,
      "index": 356,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.BorderTop",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of adaptable UI elements that respond to user input and layout changes. Example: rendering a bordered section with a custom color and accessible reference for programmatic interaction.",
      "description_length": 428,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.BorderWidth",
      "description": "Manages UI components with dynamic styling and interactivity through a record type holding optional string and DOM reference values. Supports customization of color, class name, reference, and key for flexible component creation. Enables the generation of reusable elements that adapt to varying design and functional requirements. For example, it can produce a bordered container with a specified color and class, or a clickable element that updates its state on user interaction.",
      "description_length": 481,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Box",
      "description": "Encapsulates reusable UI elements with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible component creation. Allows direct manipulation of rendered elements through references. Generates components that can be styled dynamically and integrated into larger React applications.",
      "description_length": 418,
      "index": 359,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "RadixIcons.BoxModel",
      "description": "Encapsulates reusable UI element creation with dynamic styling and reference management. Operates on a record type with optional string and DOM reference fields, enabling customization through properties like color and class name. Supports component generation with flexible configuration and direct DOM interaction. Allows developers to build and manipulate UI elements with precise control over appearance and behavior.",
      "description_length": 421,
      "index": 360,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Button",
      "description": "Manages interactive UI elements by defining components with adjustable visual and structural properties. It works with records that hold optional strings and DOM references, enabling dynamic rendering and element manipulation. Users can create buttons with custom colors, classes, and event handlers, while maintaining control over their lifecycle through references. This allows for flexible, reusable components that integrate seamlessly into larger applications.",
      "description_length": 465,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Calendar",
      "description": "Generates reusable UI elements by combining customizable properties like color, class name, and references into a structured record type. Supports dynamic styling and DOM interaction through optional fields and component composition. Enables creation of adaptable components that can be styled and referenced at render time. Examples include themed buttons, interactive forms, and dynamic lists with custom attributes.",
      "description_length": 418,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Camera",
      "description": "Encapsulates reusable UI building blocks with configurable styling and reference management through a structured record type. Supports component composition by accepting and returning React elements with defined attributes. Allows precise control over visual properties like color and class names, enabling dynamic and maintainable UI structures. Examples include creating a styled button with custom classes or a configurable image component with reference tracking.",
      "description_length": 467,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CardStack",
      "description": "Encapsulates reusable UI components with tailored styling and reference management through a typed record structure. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic color, class, ref, and key assignments for flexible component composition. Enables creation of consistent, configurable UI elements like buttons, cards, or form fields with controlled behavior.",
      "description_length": 413,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CardStackMinus",
      "description": "Encapsulates reusable UI components with typed configuration, allowing dynamic rendering through a function that accepts a React element. Supports custom styling, class names, and reference management via a structured record type. Enables creation of adaptable elements like buttons or cards with consistent behavior and type safety. Example: building a styled button with custom color and event handlers.",
      "description_length": 405,
      "index": 365,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.CardStackPlus",
      "description": "Manages the creation of interactive React components through a structured configuration record, enabling dynamic styling and behavior. Supports operations on React elements and DOM references to construct reusable UI fragments. Allows customization via color, class names, and references, facilitating type-safe, component-based UI development. Examples include generating styled buttons with event handlers or dynamic class toggles.",
      "description_length": 433,
      "index": 366,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CaretDown",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key parameters. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a button with a custom color and event handler attached to a DOM node.",
      "description_length": 394,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CaretLeft",
      "description": "Encapsulates a reusable UI component with dynamic styling and reference management through a record type containing optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive elements that can be dynamically updated or accessed. Examples include rendering styled buttons with unique identifiers or managing focus states through references.",
      "description_length": 426,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CaretRight",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Allows for the creation of component instances with tailored behavior and appearance. Enables developers to build interactive UI elements that adapt to runtime conditions.",
      "description_length": 398,
      "index": 369,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.CaretSort",
      "description": "Manages dynamic UI components through a record-based structure that supports optional string and DOM reference fields. Enables creation of reusable elements with customizable styling and interactivity via properties like color and class name. Allows direct manipulation of generated components through references. Example: rendering a button with a custom color and attaching a ref for programmatic focus.",
      "description_length": 405,
      "index": 370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CaretUp",
      "description": "Manages dynamic React component creation through a record-based configuration, enabling customization of visual and structural properties. Key data types include records with optional string and DOM reference fields, supporting operations like component rendering and property injection. Examples include generating styled buttons with custom classes or attaching refs for direct DOM manipulation. The system facilitates building interactive, reusable UI elements with fine-grained control over behavior and appearance.",
      "description_length": 519,
      "index": 371,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ChatBubble",
      "description": "Manages dynamic UI elements by defining and rendering components with adjustable styling and reference capabilities. Operates on a record type with optional string and DOM reference fields, enabling flexible component configuration. Supports creation of reusable elements that can be styled dynamically and accessed via references. Examples include generating chat messages with custom colors or attaching refs to track component instances.",
      "description_length": 440,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CheckCircled",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via color, class name, ref, and key parameters. Enables creation of interactive UI elements with flexible configuration. Example: rendering a circled button with custom color and accessibility attributes.",
      "description_length": 379,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Check",
      "description": "Encapsulates UI component creation with customizable attributes, operating on a record type that includes optional strings and DOM references. Supports dynamic styling, class assignment, and element referencing for interactive interfaces. Enables the construction of reusable, configurable UI elements through structured data manipulation. Examples include generating styled buttons with unique identifiers or managing dynamic form elements with custom classes.",
      "description_length": 461,
      "index": 374,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Checkbox",
      "description": "Encapsulates a reusable UI component with customizable visual and structural properties, allowing for dynamic rendering via a provided function. Key data types include a typed record for configuration and a function that maps this record to a React element. Operations involve setting styles, classes, and references, enabling fine-grained control over component behavior. Examples include creating a styled checkbox with custom event handlers or integrating it into larger form components.",
      "description_length": 490,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ChevronDown",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a button with a custom color and event handler attached to a DOM node.",
      "description_length": 389,
      "index": 376,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ChevronLeft",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key parameters. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a button with a custom color and event handler attached to a DOM node.",
      "description_length": 394,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ChevronRight",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Allows customization via color, class name, reference, and key parameters. Components can be tailored for specific UI needs while maintaining flexibility and reusability. Example uses include creating styled buttons with custom classes or interactive elements that respond to user input.",
      "description_length": 437,
      "index": 378,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ChevronUp",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to different contexts. Example: rendering a clickable icon with custom color and event handlers.",
      "description_length": 378,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CircleBackslash",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a button with a custom color and event handler attached to a DOM node.",
      "description_length": 389,
      "index": 380,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Circle",
      "description": "Encapsulates logic for building dynamic, reusable UI elements by combining configurable properties with DOM interaction. Supports record types with optional string and reference fields to manage styling, identification, and element access. Enables creation of components that adapt to runtime conditions, such as applying different color schemes or attaching event handlers via references. Examples include generating styled buttons with custom classes or managing focus states through referenced elements.",
      "description_length": 506,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ClipboardCopy",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a record type containing color, class name, reference, and key. Accepts a rendering function to generate React elements based on these properties. Enables creation of adaptable UI fragments that respond to varying input. Example: building a button with custom color and class that maintains a reference for external manipulation.",
      "description_length": 419,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Clipboard",
      "description": "Manages dynamic UI elements through a record-based structure that holds optional strings and DOM references, enabling the creation of reusable, customizable React components. Supports properties like color, class name, and key to control appearance and behavior. Allows for the generation of interactive elements with dynamic styling and event handling. Examples include creating styled buttons with custom classes or managing input fields with referenced DOM nodes.",
      "description_length": 466,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Clock",
      "description": "Generates reusable UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Supports dynamic styling and interactivity through customizable component configurations. Enables creation of components with optional fields, allowing flexible rendering and manipulation. Example: building a button with a dynamic background color and a reference to attach event handlers.",
      "description_length": 418,
      "index": 384,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Code",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via properties like color, class name, reference, and key. Enables creation of component instances with tailored behavior and structure. Example: render a button with a specified background color and click handler attached to a DOM element.",
      "description_length": 413,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CodeSandboxLogo",
      "description": "Encapsulates a reusable UI component builder that accepts a configuration record with color, class name, reference, and key, and applies a rendering function to produce React elements. The core data type is a typed record defining visual and structural properties, with a primary operation of transforming these into rendered components. This enables precise control over styling, element identification, and dynamic content generation. For example, it can create a customizable logo component that changes color based on user input or applies different class names for varying layouts.",
      "description_length": 586,
      "index": 386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ColorWheel",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic color application, class assignment, and element referencing. Enables creation of consistent, configurable UI elements like buttons or icons with tailored behavior.",
      "description_length": 378,
      "index": 387,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ColumnSpacing",
      "description": "Manages UI components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of reusable elements that adapt to varying layouts and user interactions. Examples include styled buttons with custom classes and interactive tables with dynamic row spacing.",
      "description_length": 399,
      "index": 388,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Columns",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of structured, interactive UI elements with flexible configuration. Example: rendering a styled button with a custom class and event handler.",
      "description_length": 380,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Commit",
      "description": "Encapsulates UI component creation with customizable attributes, operating on a record type that includes optional strings and DOM references. Supports dynamic styling, class assignment, and element referencing for interactive interfaces. Enables the construction of reusable, configurable UI elements tailored to specific layout and behavior needs. Examples include generating styled buttons with unique identifiers or managing dynamic form inputs through referenced DOM nodes.",
      "description_length": 478,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Component1",
      "description": "Generates reusable UI elements by combining customizable properties like color, class name, and DOM references into a structured record. Supports dynamic styling and interactivity through optional fields and component-specific configurations. Allows creation of elements with unique keys and mutable references for efficient rendering. Example: building a button with a custom class, dynamic color, and a reference to manipulate its state.",
      "description_length": 439,
      "index": 391,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Component2",
      "description": "Encapsulates reusable UI elements with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports operations like setting color, class, ref, and key for dynamic component behavior. Enables creation of controlled, flexible UI components tailored to specific design and interaction needs.",
      "description_length": 392,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ComponentBoolean",
      "description": "Encapsulates reusable UI elements with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic color, class, reference, and key assignments. Enables creation of consistent, configurable components like toggle switches or status indicators.",
      "description_length": 356,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ComponentInstance",
      "description": "Encapsulates reusable UI elements with dynamic properties, supporting color, class name, reference, and key. Operates on a record type with optional string and DOM reference fields. Allows creation of components that can be styled and referenced dynamically. Enables building interactive interfaces with customizable, reusable elements.",
      "description_length": 336,
      "index": 394,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ComponentNone",
      "description": "creates reusable UI elements by encapsulating properties like color, class name, and DOM references within a record type, enabling dynamic styling and interactivity. it supports component creation with optional fields, allowing flexible configuration and integration with React's rendering pipeline. operations include defining component structures, attaching references, and applying custom styles on a per-instance basis. examples include generating styled buttons with unique IDs or interactive elements that respond to user input through attached references.",
      "description_length": 562,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ComponentPlaceholder",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via properties like color, class name, reference, and key. Enables creation of component instances with tailored behavior and layout. Example: rendering a button with a specified color and click handler attached to a DOM element.",
      "description_length": 402,
      "index": 396,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Container",
      "description": "Manages reusable UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Supports dynamic styling and interactivity through customizable component definitions. Allows creation of components with optional fields, enabling flexible and structured DOM manipulation. Example: rendering a button with a specified color and click handler attached via a reference.",
      "description_length": 411,
      "index": 397,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Cookie",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color overrides, and element references. Enables creation of consistent, configurable UI parts like buttons or inputs with controlled behavior.",
      "description_length": 370,
      "index": 398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Copy",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key. Enables creation of component instances with tailored behavior and structure. Example: rendering a button with a specified background color and click handler.",
      "description_length": 374,
      "index": 399,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CornerBottomLeft",
      "description": "Encapsulates UI component creation with customizable properties like color, class, reference, and key, using a record type for configuration. Accepts a rendering function to generate React elements dynamically. Supports building reusable, styled UI elements with controlled references. Examples include creating a styled button with custom classes or a form input with dynamic color themes.",
      "description_length": 390,
      "index": 400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CornerBottomRight",
      "description": "Encapsulates a reusable UI component with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color overrides, and element references. Enables creation of consistent, configurable UI parts like buttons or icons with tailored behavior.",
      "description_length": 368,
      "index": 401,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CornerTopLeft",
      "description": "Encapsulates a reusable UI component with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic color, class, ref, and key assignments for flexible component creation. Enables consistent, controlled UI building with tailored visual and structural properties.",
      "description_length": 377,
      "index": 402,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CornerTopRight",
      "description": "Encapsulates logic for building dynamic React components with configurable properties, including color, class name, ref, and key. Operates on a record type with optional string and DOM reference fields to manage component state and behavior. Enables creation of reusable UI elements with tailored styling and reference management. Examples include rendering styled buttons with custom classes or handling dynamic DOM references in interactive components.",
      "description_length": 454,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Corners",
      "description": "Encapsulates reusable UI building blocks with configurable styling and reference management through a structured record type. Supports component composition by accepting and returning React elements with defined attributes. Allows creation of tailored components using properties like color and class name. Enables dynamic UI assembly with controlled element behavior and styling.",
      "description_length": 380,
      "index": 404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CountdownTimer",
      "description": "Manages a timer with customizable UI elements, allowing dynamic styling and DOM manipulation through a record structure. Supports operations like starting, stopping, and resetting the timer, with properties that can be adjusted at runtime. Enables creation of interactive countdown displays with unique identifiers and visual attributes. Example use includes rendering a timer with a custom color and class for a game interface.",
      "description_length": 428,
      "index": 405,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.CounterClockwiseClock",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Examples include styled buttons with event handlers and dynamically rendered lists with unique identifiers.",
      "description_length": 412,
      "index": 406,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Crop",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions while maintaining consistent structure. Examples include styled buttons with custom classes or input fields with dynamic ref assignments.",
      "description_length": 463,
      "index": 407,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Cross1",
      "description": "creates reusable React components with dynamic styling and reference management through a record type that includes optional string and DOM reference fields. it supports custom properties like color, class name, ref, and key to tailor component behavior and appearance. developers can generate components that adapt to different contexts while maintaining consistent structure. examples include creating styled buttons with custom classes or managing component references for interactive elements.",
      "description_length": 497,
      "index": 408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Cross2",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these properties. Example uses include building themed buttons or interactive forms with programmatically managed references.",
      "description_length": 457,
      "index": 409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CrossCircled",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a button with a custom color and event handler attached to a DOM node.",
      "description_length": 394,
      "index": 410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Crosshair1",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a styled button with a custom class and event handler.",
      "description_length": 373,
      "index": 411,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Crosshair2",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports color, class name, reference, and key configuration for fine-grained control. Enables creation of dynamic, maintainable UI elements with consistent structure and behavior.",
      "description_length": 377,
      "index": 412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CrumpledPaper",
      "description": "Encapsulates reusable UI components with dynamic styling and behavior through a configuration record. Supports operations on React elements and DOM references, enabling custom color, class, and key assignments. Allows creation of interactive elements like buttons or inputs with tailored properties. Example: rendering a styled input field with a custom class and event handlers.",
      "description_length": 379,
      "index": 413,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Cube",
      "description": "Generates reusable UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Supports dynamic styling and component referencing through customizable parameters. Enables creation of interactive and adaptable React components with fine-grained control over rendering. Examples include styled buttons with custom classes and components that expose internal DOM nodes for external manipulation.",
      "description_length": 442,
      "index": 414,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.CursorArrow",
      "description": "Manages interactive UI elements through a record-based structure that holds optional strings and DOM references, enabling dynamic rendering and customization. Supports operations to create and manipulate components with adjustable styles and event handlers. Allows developers to generate reusable arrow components with tailored visual and functional properties. Examples include rendering colored arrows, attaching event listeners, and integrating with larger UI frameworks.",
      "description_length": 474,
      "index": 415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.CursorText",
      "description": "Manages dynamic UI elements through a record-based structure that holds optional strings and DOM references, enabling flexible component creation. Supports custom styling and element identification via properties like color and class name. Allows for the generation of reusable, dynamically configurable UI components. Examples include rendering styled text fields with unique identifiers or applying custom colors to interactive elements.",
      "description_length": 439,
      "index": 416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Dash",
      "description": "creates a reusable UI component system with typed configuration, allowing developers to define elements using structured properties like color, class, ref, and key. it supports dynamic element generation through a provided function, enabling flexible and type-safe rendering. common use cases include building styled buttons, input fields, or custom hooks with controlled behavior. the core data types include a configuration record and a rendering function, facilitating modular and maintainable UI development.",
      "description_length": 512,
      "index": 417,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Dashboard",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Allows customization via properties like color, class name, reference, and key. Components can be tailored for specific UI needs while maintaining flexibility and reusability. Example uses include creating styled buttons with custom classes or interactive elements that respond to user input.",
      "description_length": 442,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Desktop",
      "description": "Generates reusable UI elements by defining components with dynamic properties like color, class, reference, and key, using a record type with optional fields. Supports customization through parameterized configurations and DOM interaction. Enables creation of interactive, styled components that can be dynamically rendered and manipulated. Examples include buttons with custom colors, input fields with references, and styled containers with unique keys.",
      "description_length": 455,
      "index": 419,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Dimensions",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a flexible record type. Supports operations to generate React elements using customizable properties like color, class, ref, and key. Allows developers to create consistent, configurable UI parts with tailored behavior. Example: building a button component that adjusts appearance based on input props and maintains internal references.",
      "description_length": 426,
      "index": 420,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Disc",
      "description": "Encapsulates logic for building dynamic, reusable UI elements through a record-based structure that supports optional string and DOM reference fields. Offers operations to configure and render components with customizable properties like color, class name, and reference handling. Enables creation of interactive elements with dynamic styling and event binding. Examples include generating styled buttons with custom classes or managing component references for form validation.",
      "description_length": 478,
      "index": 421,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.DiscordLogo",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that includes optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to different contexts. Example: rendering a button with a custom color and event handler attached via a reference.",
      "description_length": 394,
      "index": 422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DividerHorizontal",
      "description": "Provides a mechanism for generating reusable, styled React components with customizable attributes. Utilizes a record type with optional fields to manage properties like color, class name, reference, and key, enabling fine-grained control over DOM elements. Supports type-safe creation and manipulation of React elements with explicit references. Allows developers to build consistent, identifiable UI elements that integrate seamlessly into larger component hierarchies.",
      "description_length": 471,
      "index": 423,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DividerVertical",
      "description": "Provides a flexible vertical divider component with customizable styling and behavior. Accepts a render function to generate dynamic content and uses a configuration record to manage properties like color, class, ref, and key. Enables creation of reusable, interactive UI elements with fine-grained control over appearance and interactivity. Example: render a styled divider with a custom class and inline styling within a larger component.",
      "description_length": 440,
      "index": 424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DotFilled",
      "description": "Generates reusable React components with dynamic styling and reference management through a record-based configuration. Supports optional string and DOM reference fields for flexible component customization. Enables creation of elements with specified color, class, and reference attributes. Examples include rendering styled icons with unique identifiers and attaching event handlers via references.",
      "description_length": 400,
      "index": 425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Dot",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a flexible record type. Supports operations like rendering elements with custom properties and handling DOM references. Accepts a generator function to produce React elements based on input parameters. Enables creation of components with tailored color, class, and key attributes for interactive interfaces.",
      "description_length": 397,
      "index": 426,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.DotsHorizontal",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of consistent, configurable UI elements across different contexts. Example: rendering a set of interactive icons with varying colors and event handlers.",
      "description_length": 396,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DotsVertical",
      "description": "Manages React element construction with support for properties like color, class name, ref, and key, using option types for flexible configuration. Provides functions to create and manipulate React elements with dynamic styling and reference handling. Allows for the assembly of reusable UI components with customizable attributes. Examples include generating styled buttons with optional refs or dynamically applying class names based on state.",
      "description_length": 445,
      "index": 428,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DoubleArrowDown",
      "description": "Provides a system for constructing reusable UI components with fine-grained control over styling, naming, and reference management. Key data types include a typed record for properties and a function that maps these properties to React elements. Users can create components with custom colors, class names, and refs, enabling dynamic and maintainable UI construction. For example, a button component can be defined with a specific color and class, then rendered with consistent styling across the application.",
      "description_length": 509,
      "index": 429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DoubleArrowLeft",
      "description": "Encapsulates a reusable UI component builder that accepts typed configurations and rendering functions. It supports custom properties such as color, class name, reference, and key, enabling fine-grained control over element behavior. Operations include defining and rendering elements with dynamic styling and reference management. Example use cases include creating interactive buttons with custom classes or managing focusable elements via references.",
      "description_length": 453,
      "index": 430,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DoubleArrowRight",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via properties like color, class name, reference, and key. Enables creation of component instances with tailored behavior and appearance. Example: rendering a button with a specific color and click handler attached via a reference.",
      "description_length": 404,
      "index": 431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DoubleArrowUp",
      "description": "Provides a flexible way to construct reusable UI components by combining customizable properties such as color, class name, reference, and key. Accepts a rendering function that takes these properties and returns a React element, enabling dynamic and styled UI building. Supports controlled styling and reference management through a typed record structure. Example use includes creating a button component with custom colors and class names that can be reused across an application.",
      "description_length": 483,
      "index": 432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Download",
      "description": "Provides a flexible way to construct reusable UI components by combining customizable properties such as color, class name, reference, and key. Accepts a rendering function that takes these properties and returns a React element, enabling dynamic and styled UI building. Key data types include a typed record for configuration and a function signature for element generation. Examples include creating a button with custom styling or a form input with controlled references.",
      "description_length": 474,
      "index": 433,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DragHandleDots1",
      "description": "Generates reusable React UI elements with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive components that can be styled and manipulated at runtime. Example: rendering a set of draggable dots with distinct colors and event handlers.",
      "description_length": 396,
      "index": 434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DragHandleDots2",
      "description": "Generates reusable React UI elements with dynamic styling and interactivity through a record type holding optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive components that adapt to runtime conditions. Example: rendering a set of draggable dots with distinct colors and event handlers.",
      "description_length": 380,
      "index": 435,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.DragHandleHorizontal",
      "description": "Provides a flexible way to construct interactive UI elements with typed configuration, allowing custom styling and behavior through a structured interface. Supports rendering of React elements via a function, enabling dynamic and reusable components. Key data types include a configuration record with color, class, ref, and key, along with a render function. Example usage includes creating a horizontally draggable handle with custom styling and event handlers.",
      "description_length": 463,
      "index": 436,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.DragHandleVertical",
      "description": "Encapsulates interactive vertical drag functionality through a component that accepts styling and reference parameters. Utilizes a record structure with optional string and DOM reference fields to manage dynamic UI behavior. Enables creation of draggable elements with custom classes, colors, and event handling. Supports integration into larger interfaces by allowing direct manipulation of rendered DOM nodes.",
      "description_length": 411,
      "index": 437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DrawingPinFilled",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type containing optional string and DOM reference fields. Supports customization via color, class name, ref, and key parameters. Enables creation of adaptable UI elements that can be dynamically rendered and manipulated. Example uses include rendering styled icons with unique identifiers and attaching references for programmatic interaction.",
      "description_length": 442,
      "index": 438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DrawingPin",
      "description": "Encapsulates reusable UI components with dynamic styling and behavior through a configuration record. Supports operations on React elements and DOM references, enabling custom color, class, and interactive properties. Allows creation of elements like buttons or inputs with tailored attributes and event handling. Example: render a styled button with a custom class and click handler.",
      "description_length": 384,
      "index": 439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.DropdownMenu",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type containing optional string and DOM reference fields. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Examples include dropdowns with themed backgrounds or dynamically updated options.",
      "description_length": 394,
      "index": 440,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.EnterFullScreen",
      "description": "Provides a component with customizable properties, including color, class name, reference, and key, using a record type with optional string and DOM reference fields. Enables dynamic styling and reference management for reusable UI elements. Allows developers to create and manipulate interactive UI components with fine-grained control. Examples include generating styled buttons with custom classes or attaching references to DOM elements for programmatic interaction.",
      "description_length": 470,
      "index": 441,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Enter",
      "description": "Provides a system for constructing reusable React components with fine-grained control over appearance and behavior. Key data types include a structured record for properties and React elements for output, with operations that merge attributes and manage references. Users can create components that dynamically apply styles, attach refs, and compose with other elements. For example, a button component can be defined with a specific color and class, then rendered with custom props and integrated into larger UI structures.",
      "description_length": 525,
      "index": 442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.EnvelopeClosed",
      "description": "Encapsulates reusable UI components with customizable styling, naming, and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic element creation with controlled class names and inline styles. Enables consistent component structure while allowing flexible customization in UI development.",
      "description_length": 382,
      "index": 443,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.EnvelopeOpen",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key parameters. Allows for the creation of component instances that can be styled and manipulated at runtime. Example uses include building interactive buttons with custom colors or attaching references to form elements for programmatic access.",
      "description_length": 455,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Eraser",
      "description": "Encapsulates reusable UI elements with dynamic styling and behavior through a configuration record. Supports operations on React elements and DOM references, enabling interactive component creation. Allows setting color, class, reference, and key to tailor component appearance and functionality. Facilitates building adaptable UIs by combining these properties in a structured way.",
      "description_length": 382,
      "index": 445,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ExclamationTriangle",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key parameters. Enables creation of interactive UI elements with tailored appearance and behavior. Example: render a clickable icon with a custom color and event handler attached.",
      "description_length": 390,
      "index": 446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ExitFullScreen",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements with flexible configuration. Example: rendering a button with custom color and class that triggers a DOM event.",
      "description_length": 377,
      "index": 447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Exit",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via properties like color, class name, reference, and key. Enables creation of component instances with tailored behavior and layout. Example: rendering a button with a specified background color and click handler.",
      "description_length": 387,
      "index": 448,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ExternalLink",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and reference. Enables creation of interactive elements with controlled rendering and event handling. Examples include styled links with custom classes and dynamically updated references.",
      "description_length": 394,
      "index": 449,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.EyeClosed",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that includes optional string and DOM reference fields. Supports customization via properties like color, class name, ref, and key. Enables creation of adaptable UI elements that can be dynamically styled and integrated with external references. Examples include rendering interactive buttons with custom colors or linking components to DOM nodes for programmatic control.",
      "description_length": 476,
      "index": 450,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.EyeNone",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a flexible record type. Supports operations like rendering elements with custom color, class, ref, and key attributes. Allows developers to define component behavior via a transformation function applied to these properties. Enables creation of adaptable UI elements such as styled buttons or interactive widgets with minimal boilerplate.",
      "description_length": 428,
      "index": 451,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.EyeOpen",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these properties. Example uses include building themed buttons or interactive forms with programmatically managed references.",
      "description_length": 457,
      "index": 452,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Face",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color overrides, and element references. Enables creation of consistent, configurable UI building blocks like buttons or cards.",
      "description_length": 354,
      "index": 453,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.FigmaLogo",
      "description": "Generates reusable UI elements with dynamic styling and reference management through a record type containing optional strings and DOM references. Supports customization via color, class name, reference, and key parameters. Allows for flexible component creation and integration within larger UI structures. Enables precise control over rendered elements and their associated properties.",
      "description_length": 387,
      "index": 454,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.File",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, ref, and key. Enables creation of adaptable UI elements that can be dynamically styled and interacted with. Examples include rendering styled buttons with custom classes or managing component references for focus or animation control.",
      "description_length": 448,
      "index": 455,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.FileMinus",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, reference, and key. Enables creation of component instances with tailored behavior and structure. Example: render a button with a specific color and click handler linked to a DOM element.",
      "description_length": 394,
      "index": 456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FilePlus",
      "description": "creates a reusable UI component system with typed configuration, allowing developers to define elements with specific styling, class names, and references. it supports dynamic element generation through a provided function, enabling flexible and structured UI building. key data types include a configuration record and a React element generator function. examples include creating styled buttons with custom classes or managing refs for form inputs.",
      "description_length": 450,
      "index": 457,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FileText",
      "description": "Encapsulates UI component logic with customizable styling and reference management through a record type that holds optional strings and DOM references. Supports dynamic rendering and interaction by allowing properties like color and class to be set at creation. Enables the construction of reusable elements that can be dynamically updated or accessed via references. Example uses include creating styled buttons or input fields that maintain state and respond to user actions.",
      "description_length": 478,
      "index": 458,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FontBold",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements with flexible configuration. Example: rendering a bold text element with a custom class and inline style.",
      "description_length": 371,
      "index": 459,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FontFamily",
      "description": "Manages reusable UI elements through a record-based structure that supports optional string and DOM reference fields. Enables dynamic styling and interactivity by allowing customization of color, class names, and references. Components can be rendered with specific configurations, such as applying a custom color or attaching a reference to a DOM node. Facilitates the creation of interactive, styled UI components with flexible property settings.",
      "description_length": 448,
      "index": 460,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.FontItalic",
      "description": "Encapsulates a reusable UI component with dynamic styling and reference management, operating on a record with optional string and DOM reference fields. Supports customization through color, class name, reference, and key properties. Enables creation of interactive, styled elements that can be dynamically updated or accessed. Examples include rendering styled text with custom classes or attaching references to DOM nodes for programmatic interaction.",
      "description_length": 453,
      "index": 461,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FontRoman",
      "description": "Encapsulates reusable UI components with styled, reference-enabled elements through a typed record system. Accepts a rendering function to generate React elements based on properties like color, class, ref, and key. Supports dynamic styling and element management within a component hierarchy. Enables creation of consistent, configurable UI parts such as styled text blocks or interactive labels.",
      "description_length": 397,
      "index": 462,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.FontSize",
      "description": "Encapsulates customizable UI components with dynamic styling and reference management through a record-based configuration. Supports operations like rendering elements with specified color, class, ref, and key. Allows developers to create reusable components by passing a function that defines the element structure. Example: generating a styled text element with a custom class and inline color.",
      "description_length": 396,
      "index": 463,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.FontStyle",
      "description": "Manages UI elements through a record type with optional string and DOM reference fields, enabling dynamic styling and interactivity. Supports component creation with properties like color, class name, and reference, allowing for flexible and reusable UI construction. Components can be customized at render time and integrated with external DOM elements. Examples include styled text elements with dynamic color changes and interactive buttons with custom class names.",
      "description_length": 468,
      "index": 464,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Frame",
      "description": "creates reusable UI elements by combining configurable properties with React's rendering and DOM handling capabilities. it defines a record type for component configuration, including color, class, and reference, and provides functions to generate and manipulate React elements. operations include setting dynamic attributes, managing refs, and integrating lifecycle methods. examples include building styled buttons with custom classes or handling DOM events through referenced elements.",
      "description_length": 488,
      "index": 465,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.FramerLogo",
      "description": "Encapsulates a reusable UI component with configurable styling and behavior, leveraging React elements and DOM references. Accepts a record type with properties such as color, class name, and reference to define visual and functional attributes. Supports dynamic rendering, event handling, and integration with React's lifecycle. Enables creation of interactive elements like buttons or icons with custom styles and controlled interactions.",
      "description_length": 440,
      "index": 466,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Gear",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a record type holding optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive elements that adapt to runtime conditions. Examples include dynamically styled buttons with unique identifiers and event handlers.",
      "description_length": 388,
      "index": 467,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.GitHubLogo",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to different contexts. Example: rendering a GitHub icon with a custom color and click handler.",
      "description_length": 371,
      "index": 468,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Globe",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a record type featuring optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables the creation of interactive, maintainable elements by linking them to specific DOM nodes. Examples include rendering styled buttons with unique identifiers or dynamically updating component classes based on state.",
      "description_length": 449,
      "index": 469,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Grid",
      "description": "Generates reusable UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Supports dynamic styling and interactivity through customizable component definitions. Allows creation of components with optional fields, enabling flexible and structured DOM manipulation. Example uses include rendering styled buttons with event handlers or dynamically updating grid layouts.",
      "description_length": 422,
      "index": 470,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Group",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a configuration record. Accepts a rendering function to generate React elements based on provided properties. Supports customization via color, class name, reference, and key. Enables creation of flexible, component-based user interfaces with tailored behavior.",
      "description_length": 351,
      "index": 471,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Half1",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that includes optional string and DOM reference fields. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for different use cases while maintaining consistent structure and behavior. Examples include creating styled buttons with custom classes or managing component references for interactive elements.",
      "description_length": 493,
      "index": 472,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Half2",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions while maintaining consistent structure. Example uses include building interactive buttons with custom colors or form elements with dynamic class assignments.",
      "description_length": 483,
      "index": 473,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.HamburgerMenu",
      "description": "Manages interactive, reusable UI elements with dynamic styling and attributes through a configuration record. Supports React elements and DOM references, enabling custom color, class, and key assignments. Allows for the creation of adaptable menu components with programmatic control over rendering and behavior. Examples include generating a collapsible menu with custom CSS classes or attaching event handlers via references.",
      "description_length": 427,
      "index": 474,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Hand",
      "description": "Encapsulates logic for building and managing React components with dynamic properties. Exposes a record type with optional string and DOM reference fields, enabling flexible styling and element referencing. Supports creation of reusable UI elements by combining color, class, ref, and key parameters. Allows developers to construct components that adapt to varying layouts and interactions.",
      "description_length": 390,
      "index": 475,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Heading",
      "description": "Manages reusable UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Supports dynamic styling and interactivity through customizable component generation. Allows direct manipulation of rendered elements via references and conditional rendering based on provided parameters. Enables creation of components with unique identifiers and flexible styling options.",
      "description_length": 416,
      "index": 476,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.HeartFilled",
      "description": "Encapsulates reusable UI components with customizable visual and structural properties. Accepts a function to generate React elements, leveraging typed records for color, class, reference, and key. Enables precise control over styling and element behavior. Allows developers to create consistent, dynamic UI elements with tailored configurations.",
      "description_length": 346,
      "index": 477,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Heart",
      "description": "Generates reusable UI elements by encapsulating properties like color, class name, reference, and key within a record structure. Supports dynamic styling and element identification through optional fields and custom configurations. Enables creation of component instances with tailored behavior and DOM integration. Examples include rendering styled buttons with unique identifiers or dynamically updating component properties at runtime.",
      "description_length": 438,
      "index": 478,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Height",
      "description": "Manages UI component creation through a record-based structure that supports optional string and DOM reference fields. Enables dynamic styling and interactivity by allowing customization of color, class name, reference, and key. Components can be instantiated with specific properties to generate reusable, adaptable UI elements. For example, a button can be rendered with a custom class and inline style, or a form field can be linked to a DOM reference for programmatic access.",
      "description_length": 479,
      "index": 479,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.HobbyKnife",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these attributes. Example uses include building themed buttons or interactive forms with programmable references.",
      "description_length": 445,
      "index": 480,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Home",
      "description": "Encapsulates UI elements with customizable properties such as color, class, reference, and key, using a record type for structured data. Supports interaction with React elements and DOM references to build dynamic, reusable components. Allows for the creation of styled, interactive UI parts that can be easily integrated into larger applications. Examples include generating buttons with custom styles or forms that respond to user input.",
      "description_length": 439,
      "index": 481,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.IconJarLogo",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that includes optional string and DOM reference fields. Supports customization via color, class name, reference, and key parameters. Enables creation of interactive UI elements that adapt to different contexts. Example: rendering a logo component with a specified color and class for a themed application.",
      "description_length": 402,
      "index": 482,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.IdCard",
      "description": "Generates reusable React components with dynamic styling and element identification through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI construction. Components can be tailored for different visual themes or integrated into larger application structures. Examples include creating styled buttons with unique identifiers or dynamically rendered lists with custom classes.",
      "description_length": 480,
      "index": 483,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Image",
      "description": "Generates reusable UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Supports dynamic styling and interactivity through customizable component definitions. Allows creation of components with optional fields, enabling flexible and structured DOM manipulation. Example: rendering a button with a specified background color and click handler attached via a reference.",
      "description_length": 424,
      "index": 484,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.InfoCircled",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that includes optional string and DOM reference fields. Supports customization via properties like color, class name, ref, and key. Enables creation of adaptable UI elements that can be dynamically styled and integrated with external references. Examples include rendering interactive buttons with custom colors or linking components to DOM nodes for programmatic access.",
      "description_length": 475,
      "index": 485,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Input",
      "description": "Encapsulates reusable UI components with customizable styling, class names, and references through a typed record interface. Accepts a rendering function to generate React elements based on provided properties. Supports controlled element creation with explicit key management and class application. Enables consistent, flexible UI building by abstracting common properties and behaviors.",
      "description_length": 388,
      "index": 486,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.InstagramLogo",
      "description": "Generates reusable UI components with styled elements through a typed record that defines color, class, reference, and key. Accepts a rendering function to produce React elements based on these properties. Allows precise control over styling and element behavior in a component-based architecture. Enables creation of consistent, customizable icons or buttons with dynamic properties.",
      "description_length": 384,
      "index": 487,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Keyboard",
      "description": "Manages interactive UI elements with dynamic styling and reference management. Operates on records with optional string and DOM reference fields, enabling flexible component creation. Supports custom color, class, and key attributes for tailored rendering. Allows developers to build reusable, interactive elements with precise control over appearance and behavior.",
      "description_length": 365,
      "index": 488,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LapTimer",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color schemes, and element references for flexible component composition. Enables creation of styled, reusable UI parts with controlled behavior and layout.",
      "description_length": 383,
      "index": 489,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Laptop",
      "description": "Generates reusable UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Supports dynamic styling and component customization through optional fields and reference management. Enables creation of adaptable React components with structured configuration. Examples include rendering styled buttons with custom classes or managing component refs for interactive elements.",
      "description_length": 424,
      "index": 490,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Layers",
      "description": "Manages UI components with dynamic properties, supporting color, class names, references, and keys through a record structure. Provides operations to construct and manipulate elements with optional fields for flexibility. Allows creation of reusable, styled UI parts that can be referenced and uniquely identified. Enables dynamic rendering of components with customizable and trackable properties.",
      "description_length": 398,
      "index": 491,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Layout",
      "description": "Manages UI component creation through a record-based structure that supports optional string and DOM reference fields. Enables dynamic styling, class assignment, and interactivity by allowing custom property configurations. Components can be rendered with specified colors, class names, and references for DOM manipulation. Examples include generating styled buttons with unique keys or attaching references to form elements for programmatic access.",
      "description_length": 449,
      "index": 492,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LetterCaseCapitalize",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these properties. Example uses include creating styled buttons or input fields that respond to user actions.",
      "description_length": 440,
      "index": 493,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LetterCaseLowercase",
      "description": "Manages the creation and configuration of reusable React components through a structured record type that includes optional string and DOM reference fields. Supports dynamic styling and interactivity by allowing customization of properties like color, class name, and reference. Enables the generation of component instances with specific configurations tailored to different UI needs. For example, it can produce a button with a custom color and class name, or an input field with a referenced DOM element for programmatic access.",
      "description_length": 531,
      "index": 494,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LetterCaseToggle",
      "description": "Manages dynamic UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Enables the creation of reusable, interactive components with customizable styling and behavior. Supports dynamic updates and event handling through exposed manipulation functions. Example use cases include toggling text case in real-time or applying conditional styles based on user input.",
      "description_length": 416,
      "index": 495,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LetterCaseUppercase",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic color, class names, and element references for flexible component composition. Enables creation of consistent, configurable UI elements like buttons or inputs with controlled behavior.",
      "description_length": 398,
      "index": 496,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LetterSpacing",
      "description": "Manages UI components with dynamic styling and reference capabilities through a record-based structure. Supports operations to set and retrieve color, class name, reference, and key properties. Enables creation of reusable elements that adapt to varying design and interaction requirements. Example: render a styled text element with a custom class and DOM reference for external manipulation.",
      "description_length": 393,
      "index": 497,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LightingBolt",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions while maintaining consistent structure. Examples include styled buttons with custom classes or input fields with dynamic references.",
      "description_length": 458,
      "index": 498,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LineHeight",
      "description": "Manages UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Supports dynamic rendering and interaction through component generation. Allows for the creation of reusable, styled elements with customizable behavior. Enables developers to build interactive interfaces by binding references and applying conditional styles.",
      "description_length": 377,
      "index": 499,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Link1",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic color, class, ref, and key assignments. Enables creation of flexible, controlled UI elements like buttons or links with consistent structure.",
      "description_length": 355,
      "index": 500,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Link2",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these properties. Example uses include creating styled buttons with custom classes or handling element references for form validation.",
      "description_length": 466,
      "index": 501,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LinkBreak1",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling tailored UI elements. Components can be dynamically rendered with specific styles and event handlers. Example uses include creating styled buttons with custom classes or interactive elements that reference DOM nodes.",
      "description_length": 441,
      "index": 502,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LinkBreak2",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these properties. Example uses include building themed buttons or interactive lists with custom event handlers.",
      "description_length": 443,
      "index": 503,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LinkNone1",
      "description": "Provides a mechanism for constructing reusable UI components with tailored styling and reference management. Accepts a function that maps a typed record\u2014containing color, class name, reference, and key\u2014to a React element. Enables dynamic rendering with controlled properties, allowing for consistent and flexible component creation. Example use cases include generating styled buttons or input fields with custom classes and inline styles.",
      "description_length": 439,
      "index": 504,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LinkNone2",
      "description": "Encapsulates a reusable UI component with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties for flexible element generation. Allows developers to create and manipulate UI elements with tailored attributes and event handling. Enables the construction of interactive, styled components that integrate seamlessly into larger applications.",
      "description_length": 472,
      "index": 505,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LinkedInLogo",
      "description": "Generates reusable UI components with tailored styling and reference management through a structured record type. Accepts a rendering function to produce React elements based on provided properties. Supports custom color schemes, class names, and element references for dynamic UI construction. Enables consistent, configurable logo rendering across different application contexts.",
      "description_length": 381,
      "index": 506,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ListBullet",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key. Enables creation of structured, interactive UI elements with flexible configuration. Example: rendering a list of items with distinct colors and custom classes.",
      "description_length": 376,
      "index": 507,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.LockClosed",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a record type featuring optional strings and DOM references. Supports customization via color, class name, and other properties for flexible element creation. Enables dynamic updates and efficient DOM manipulation through referenced elements. Example uses include generating styled buttons with unique identifiers and event handlers.",
      "description_length": 423,
      "index": 508,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LockOpen1",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key. Enables creation of interactive UI elements with flexible configuration. Example: render a button with a custom color and attach a reference for programmatic focus.",
      "description_length": 380,
      "index": 509,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.LockOpen2",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that includes optional string and DOM reference fields. Supports customization via properties like color, class name, ref, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions while maintaining consistent structure. Examples include creating styled buttons with custom classes or managing focus through DOM references.",
      "description_length": 481,
      "index": 510,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Loop",
      "description": "Generates reusable React components with dynamic styling and reference management through a record-based configuration. Supports optional string and DOM reference fields for flexible component customization. Enables creation of elements with specified colors, class names, and unique identifiers. Allows for structured and type-safe component generation in a functional React workflow.",
      "description_length": 385,
      "index": 511,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.MagicWand",
      "description": "Encapsulates a system for building dynamic, reusable UI components with customizable styling and reference management. It operates on a record type with optional string and DOM reference fields, enabling flexible element configuration. Users can create elements with specific colors, class names, and references, allowing for structured and interactive UI construction. Examples include generating styled buttons with unique identifiers or managing dynamic lists with controlled DOM access.",
      "description_length": 490,
      "index": 512,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.MagnifyingGlass",
      "description": "Provides a flexible way to construct reusable UI components with typed configuration. Accepts a function that generates a React element, allowing dynamic rendering based on properties like color, class name, reference, and key. Enables consistent styling and reference management across multiple instances. Can be used to create themed buttons, input fields, or any component requiring controlled customization.",
      "description_length": 411,
      "index": 513,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Margin",
      "description": "Generates reusable React components with dynamic styling and interactivity by manipulating a record type that includes optional strings and DOM references. Supports customization through properties like color, class name, and key, enabling flexible UI element creation. Components can be dynamically styled and linked to DOM elements for enhanced interactivity. Examples include creating styled buttons with custom classes or attaching references to form inputs for programmatic access.",
      "description_length": 486,
      "index": 514,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.MaskOff",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key parameters. Enables creation of component instances with tailored properties and direct DOM manipulation. Example: rendering a button with a custom class and inline style, or attaching a reference to a form input for programmatic access.",
      "description_length": 452,
      "index": 515,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.MaskOn",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color overrides, and element references. Enables creation of consistent, configurable UI parts like buttons or inputs with controlled behavior.",
      "description_length": 370,
      "index": 516,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.MinusCircled",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via color, class name, and key properties, enabling flexible UI element creation. Components can be tailored for different visual themes and integrated with external DOM elements. Examples include styled buttons with custom classes or interactive elements that maintain internal state through references.",
      "description_length": 479,
      "index": 517,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Minus",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type containing optional string and DOM reference fields. Supports customization via properties like color, class name, ref, and key. Enables creation of component instances with tailored visual and structural attributes. Examples include rendering styled buttons with custom classes or managing component references for DOM interactions.",
      "description_length": 437,
      "index": 518,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Mix",
      "description": "Encapsulates logic for building dynamic, reusable React components by combining configurable properties like color, class name, and DOM references. It operates on a record type with optional string and reference fields, enabling flexible UI element creation. Users can generate components with tailored styles and direct DOM access. Examples include rendering styled buttons with custom classes or attaching references to form elements for programmatic interaction.",
      "description_length": 465,
      "index": 519,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.MixerHorizontal",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, ref, and key for flexible UI construction. Enables creation of component instances with tailored visual and structural attributes. Example: render a horizontally aligned element with a custom class and inline style.",
      "description_length": 429,
      "index": 520,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.MixerVertical",
      "description": "Combines configurable UI elements with dynamic behavior, using a record-based setup for properties like color and class. Supports React elements and DOM references to enable interactive, reusable components. Allows customization through parameters and direct manipulation of the DOM. Examples include creating styled buttons or panels that respond to user input.",
      "description_length": 362,
      "index": 521,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Mobile",
      "description": "Generates reusable UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Supports dynamic styling and component referencing through optional fields. Enables creation of adaptable React components with customizable behavior. Example: rendering a button with a specified color and attaching a ref for direct DOM access.",
      "description_length": 373,
      "index": 522,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ModulzLogo",
      "description": "Generates reusable UI components with dynamic styling and reference management through a record type containing optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Allows for flexible component creation and integration within larger applications. Example uses include rendering styled icons with unique identifiers and attaching event handlers through references.",
      "description_length": 425,
      "index": 523,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Moon",
      "description": "Generates reusable UI elements by encapsulating properties like color, class name, reference, and key within a record structure. Supports dynamic styling and interactivity through customizable component definitions. Allows direct manipulation of DOM references and conditional rendering based on optional fields. Enables creation of components that adapt to different layouts or user interactions.",
      "description_length": 397,
      "index": 524,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Move",
      "description": "Encapsulates UI component creation with flexible configuration through a record type, enabling dynamic styling and attribute management. Supports React elements and DOM references to construct interactive, reusable interfaces. Allows setting color, class, reference, and key properties for tailored component behavior. Example uses include generating styled buttons with custom event handlers or dynamic class toggles.",
      "description_length": 418,
      "index": 525,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.NotionLogo",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that includes optional string and DOM reference fields. Supports customization via color, class name, reference, and key properties. Enables creation of adaptable UI elements that respond to user input and state changes. Example: rendering a button with a custom color and click handler attached via a reference.",
      "description_length": 409,
      "index": 526,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Opacity",
      "description": "Encapsulates logic for building and configuring React components with dynamic styling and attribute control. Exposes a record type with optional string and DOM reference fields, enabling flexible component customization. Supports creating reusable UI elements with controlled color, class, and reference properties. Allows developers to generate components that adapt to different styling needs while maintaining structural consistency.",
      "description_length": 436,
      "index": 527,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.OpenInNewWindow",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that includes optional string and DOM reference fields. Supports customization via properties like color, class name, ref, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions while maintaining consistent structure. Examples include creating styled buttons with custom classes or linking components to DOM elements for programmatic control.",
      "description_length": 503,
      "index": 528,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Overline",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties for flexible element creation. Enables the generation of interactive, maintainable UI fragments by binding dynamic values to DOM elements. Examples include creating styled buttons with unique identifiers or dynamically updating component classes based on state.",
      "description_length": 489,
      "index": 529,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Padding",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Supports dynamic element generation using provided properties and functions. Allows precise control over color, class, ref, and key attributes. Enables creation of consistent, configurable UI elements across a React application.",
      "description_length": 339,
      "index": 530,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PaperPlane",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, ref, and key for flexible UI construction. Enables creation of component instances with tailored behaviors and structured data. Example: rendering a button with a custom class and inline style, or linking a component to a DOM element for programmatic interaction.",
      "description_length": 477,
      "index": 531,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Pause",
      "description": "Manages dynamic UI elements through a record-based structure that supports optional string and DOM reference fields. Enables creation of reusable components with customizable properties like color, class name, and key. Allows for dynamic styling and reference management during component generation. Examples include rendering styled buttons with unique identifiers or attaching refs to interactive elements.",
      "description_length": 408,
      "index": 532,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Pencil1",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key. Enables creation of interactive UI elements with flexible configuration. Example: rendering a button with a custom color and event handler attached via a reference.",
      "description_length": 380,
      "index": 533,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Pencil2",
      "description": "Encapsulates UI component properties into a structured record, enabling dynamic and reusable element creation in React. Supports color, class, reference, and key attributes, allowing fine-grained control over rendering and interaction. Components can be tailored for specific UI needs while maintaining consistency and reusability. Examples include styled buttons with custom classes or interactive elements that respond to user input through DOM references.",
      "description_length": 458,
      "index": 534,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Person",
      "description": "Generates reusable UI elements with dynamic styling and interactivity by defining components with optional string and DOM reference fields. Supports customization through properties like color, class name, reference, and key. Allows for the creation of interactive, styled components that can be dynamically rendered and manipulated. Example uses include building buttons with custom colors or input fields with dynamic class names.",
      "description_length": 432,
      "index": 535,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PieChart",
      "description": "Generates reusable UI elements with dynamic styling and reference management through a record type containing optional string and DOM reference fields. Supports customization via color, class name, reference, and key properties. Enables creation of interactive, component-based pie chart elements with tailored visual and structural attributes. Allows for flexible integration into larger UI frameworks with controlled rendering and state management.",
      "description_length": 450,
      "index": 536,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Pilcrow",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these properties. Example uses include building themed buttons or interactive forms with programmatically managed references.",
      "description_length": 457,
      "index": 537,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PinBottom",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these properties. Example uses include building themed buttons or interactive forms with programmatically managed references.",
      "description_length": 457,
      "index": 538,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PinLeft",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key. Enables creation of interactive UI elements with flexible configuration. Example: rendering a button with a custom color and event handler attached via a reference.",
      "description_length": 380,
      "index": 539,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PinRight",
      "description": "Manages reusable UI components with dynamic styling and reference tracking through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive elements that can be dynamically updated or accessed. Examples include rendering styled buttons with unique identifiers or managing form inputs with custom classes.",
      "description_length": 418,
      "index": 540,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.PinTop",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color overrides, and element references. Enables creation of consistent, configurable UI elements like buttons or inputs with controlled behavior.",
      "description_length": 373,
      "index": 541,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Play",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color overrides, and element references. Enables creation of flexible, maintainable UI elements like buttons or inputs with consistent behavior.",
      "description_length": 371,
      "index": 542,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.PlusCircled",
      "description": "Encapsulates logic for building interactive, styled UI elements through a record-based configuration. Supports dynamic properties like color, class, and reference, enabling flexible component customization. Allows creation of reusable components with controlled styling and DOM interaction. Examples include generating buttons with custom colors or handling user events via attached references.",
      "description_length": 394,
      "index": 543,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Plus",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that includes optional string and DOM reference fields. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions while maintaining consistent structure. Examples include styled buttons with custom classes or input fields with dynamic references.",
      "description_length": 466,
      "index": 544,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.QuestionMarkCircled",
      "description": "Encapsulates a reusable UI component with dynamic styling and reference management through a record type holding optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive elements that adapt to runtime conditions. Examples include rendering styled icons with unique identifiers or integrating with external DOM manipulation logic.",
      "description_length": 418,
      "index": 545,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.QuestionMark",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, ref, and key for flexible UI construction. Enables creation of component instances with tailored visual and structural attributes. Example: rendering a styled button with a custom class and a reference to a DOM element.",
      "description_length": 433,
      "index": 546,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Quote",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via properties like color, class name, reference, and key. Enables creation of component instances with tailored visual and behavioral attributes. Example: rendering a button with a specified background color and click handler.",
      "description_length": 400,
      "index": 547,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Radiobutton",
      "description": "Manages interactive UI elements with customizable styling and behavior through a record structure that holds optional strings and DOM references. Supports dynamic rendering and event handling for reusable components. Allows setting colors, class names, and references to enable tailored user interactions. Enables creation of responsive buttons that adapt to application state and user input.",
      "description_length": 392,
      "index": 548,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Reader",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via properties like color, class name, reference, and key. Enables creation of component instances with tailored behavior and structure. Example: rendering a button with a specified background color and click handler.",
      "description_length": 390,
      "index": 549,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Reload",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, ref, and key for flexible UI construction. Enables creation of component instances with tailored configurations and direct DOM interaction. Examples include rendering styled buttons with custom classes or managing component references for programmatic access.",
      "description_length": 473,
      "index": 550,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Reset",
      "description": "Manages reusable UI components with dynamic styling and reference tracking through a record type that holds optional strings and DOM references. Supports customization via color, class name, and other properties, enabling flexible element creation. Allows for programmatic access to elements via references and dynamic class application. Example uses include building interactive buttons with custom colors or dynamically updating component classes based on state.",
      "description_length": 464,
      "index": 551,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Resume",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these properties. Example uses include building themed buttons or interactive forms with programmable references.",
      "description_length": 445,
      "index": 552,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Rocket",
      "description": "Manages UI components with dynamic properties, supporting color, class names, and DOM references through a record structure. Provides functions to create and manipulate elements with optional fields, enabling flexible and reusable interface building. Allows setting and accessing attributes like style and identifiers for interactive elements. Example: constructing a button with custom styling and a reference for programmatic interaction.",
      "description_length": 440,
      "index": 553,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.RotateCounterClockwise",
      "description": "Encapsulates UI components with customizable attributes such as color, class name, and reference, using a record type to manage properties. Accepts a rendering function to generate React elements dynamically. Supports creation of reusable, styled UI elements with controlled references. Example: building a button with dynamic color and custom class applied at render time.",
      "description_length": 373,
      "index": 554,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.RowSpacing",
      "description": "Provides a flexible way to construct UI components with tailored styling and reference management. Accepts a function that maps a typed record\u2014containing color, class name, reference, and key\u2014to a React element. Enables creation of reusable, controlled UI elements with precise configuration. Examples include generating styled buttons or input fields with dynamic class application and ref handling.",
      "description_length": 400,
      "index": 555,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Rows",
      "description": "Manages UI elements through a record structure that holds optional strings and DOM references, enabling dynamic styling and component customization. It supports creating reusable React components with properties like color, class name, ref, and key. Operations include defining component layouts and binding dynamic values to DOM elements. Examples include generating styled buttons with custom classes or handling user interactions via referenced elements.",
      "description_length": 457,
      "index": 556,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.RulerHorizontal",
      "description": "Provides a reusable UI component with customizable styling and reference management. Operates on a record type with optional string and DOM reference fields, enabling dynamic element creation. Supports setting color, class, ref, and key for tailored rendering. Allows developers to generate and manipulate horizontal ruler elements with fine-grained control over appearance and behavior.",
      "description_length": 387,
      "index": 557,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.RulerSquare",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate elements based on provided properties. Supports dynamic color, class, ref, and key assignments for flexible component creation. Enables building structured, maintainable UIs with controlled element generation.",
      "description_length": 361,
      "index": 558,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Scissors",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic color, class, ref, and key assignments for flexible component creation. Enables consistent, controlled UI building with structured configuration.",
      "description_length": 359,
      "index": 559,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Section",
      "description": "Manages dynamic UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Supports component creation with customizable attributes and reference management for interactive elements. Enables dynamic styling and efficient DOM manipulation through structured data. Examples include generating styled buttons with unique identifiers or handling user interactions via referenced elements.",
      "description_length": 435,
      "index": 560,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SewingPinFilled",
      "description": "Encapsulates logic for building dynamic, reusable React components with tailored styling and reference management. Operates on a record type featuring optional string and DOM reference fields, enabling flexible component configuration. Supports creation of elements with custom colors, class names, and DOM access. Allows developers to generate components that adapt to different layouts and interactions through configurable properties.",
      "description_length": 437,
      "index": 561,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SewingPin",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via properties like color, class name, reference, and key. Allows for the creation of component instances that can be styled and manipulated at runtime. Enables developers to build flexible UI elements that adapt to different contexts and user interactions.",
      "description_length": 430,
      "index": 562,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Shadow",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a structured record type. Supports operations on React elements and DOM nodes, allowing customization via optional properties like color and class name. Enables creation of adaptable, component-based interfaces with fine-grained control over rendering and behavior. Example uses include generating styled buttons with custom classes or managing focusable elements via references.",
      "description_length": 469,
      "index": 563,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ShadowInner",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these attributes. Example uses include building themed buttons or interactive form elements with programmatically managed references.",
      "description_length": 465,
      "index": 564,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ShadowNone",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate elements based on provided properties. Supports dynamic class names, color overrides, and element references. Enables creation of consistent, configurable UI parts like buttons or inputs with controlled behavior.",
      "description_length": 364,
      "index": 565,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ShadowOuter",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a record type holding optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive elements that adapt to runtime conditions. Examples include dynamically styled buttons with unique identifiers and event handlers.",
      "description_length": 388,
      "index": 566,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Share1",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key. Enables creation of component instances with specific configurations and direct DOM manipulation. Example: rendering a button with a custom color and attaching a reference for programmatic focus.",
      "description_length": 411,
      "index": 567,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Share2",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a record type featuring optional strings and DOM references. Supports customization via color, class name, reference, and key parameters. Enables the creation of adaptable, interactive elements that integrate seamlessly into larger applications. Examples include generating styled buttons with unique identifiers or dynamically updating component references at runtime.",
      "description_length": 459,
      "index": 568,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Shuffle",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via properties like color, class name, reference, and key. Enables creation of component instances with tailored behavior and layout. Example: render a button with a specified background color and click handler attached to a DOM element.",
      "description_length": 410,
      "index": 569,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Size",
      "description": "Encapsulates UI component creation with customizable attributes, operating on a record type that includes optional strings and DOM references. Supports dynamic styling, class assignment, and element referencing for interactive interfaces. Enables the construction of reusable, configurable UI elements tailored to specific layout or behavior needs. Examples include generating styled buttons with unique identifiers or dynamically updating component classes based on user input.",
      "description_length": 478,
      "index": 570,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.SketchLogo",
      "description": "Generates reusable React components with dynamic styling and interactivity through a structured record type that accepts optional string and DOM reference values. Supports customization of properties like color, class name, and reference for flexible UI element creation. Allows developers to define and render components with tailored behaviors and visual attributes. Example uses include creating styled buttons with custom classes or interactive elements that respond to user input.",
      "description_length": 485,
      "index": 571,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Slash",
      "description": "Manages dynamic UI elements through a record-based structure that supports optional string and DOM reference fields. Enables creation of reusable components with customizable properties like color, class name, ref, and key. Allows for flexible styling and reference management during component generation. Examples include rendering styled buttons with custom classes or attaching refs to form inputs for programmatic access.",
      "description_length": 425,
      "index": 572,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Slider",
      "description": "Manages interactive UI elements with adjustable visual and structural properties. Supports record types for optional string and DOM reference values, enabling dynamic component creation. Allows setting color, class, and reference attributes to tailor appearance and behavior. Facilitates building reusable sliders with custom styling and DOM integration.",
      "description_length": 354,
      "index": 573,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.SpaceBetweenHorizontally",
      "description": "Provides a flexible way to construct UI components with dynamic styling and reference management. Accepts a record containing optional color, class, ref, and key values, and applies them when rendering a React element via a provided function. Allows for reusable, customizable elements that adapt to different styling and interaction needs. Example: creating a button with conditional color schemes or dynamic class names based on props.",
      "description_length": 437,
      "index": 574,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpaceBetweenVertically",
      "description": "Encapsulates logic for rendering vertically spaced UI elements through configurable component structures. Processes records with optional string and DOM reference fields to manage styling, layout, and interactivity. Supports dynamic updates and custom properties like color and class name. Enables creation of responsive, reusable UI sections with controlled vertical spacing.",
      "description_length": 376,
      "index": 575,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpaceEvenlyHorizontally",
      "description": "Manages horizontal layout by positioning child elements with consistent spacing. Operates on records containing optional strings and DOM references, enabling dynamic UI construction. Supports custom styling and element referencing for interactive components. Allows creation of responsive, styled layouts with programmable spacing and element alignment.",
      "description_length": 353,
      "index": 576,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpaceEvenlyVertically",
      "description": "Manages vertical spacing in UI layouts by defining and manipulating components with customizable visual and structural properties. It works with records that hold optional strings and DOM references, enabling dynamic styling and element referencing. Components can be configured with colors, class names, and unique identifiers for flexible rendering. This allows for the creation of responsive, reusable UI elements with controlled vertical alignment and layout behavior.",
      "description_length": 472,
      "index": 577,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpeakerLoud",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a button with a custom color and event handler attached via a reference.",
      "description_length": 391,
      "index": 578,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpeakerModerate",
      "description": "Manages dynamic UI elements through a record-based system that supports optional string and DOM reference fields. Enables creation of reusable React components with customizable styling and reference management. Allows setting of color, class names, and keys to tailor component behavior. Examples include generating styled buttons with unique identifiers and attaching references for programmatic interaction.",
      "description_length": 410,
      "index": 579,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.SpeakerOff",
      "description": "creates a reusable UI component with dynamic styling and reference management through a record type containing optional strings and DOM references. it enables customization of visual and structural properties, allowing for flexible and maintainable UI construction. developers can define elements with specific colors, class names, and DOM interactions. examples include rendering styled buttons with unique identifiers or managing dynamic content through referenced elements.",
      "description_length": 476,
      "index": 580,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.SpeakerQuiet",
      "description": "Manages dynamic UI elements through a record-based configuration system, enabling the creation of reusable React components with customizable styling and DOM integration. Key data types include a record with optional string and reference fields, supporting operations like component generation and property application. Users can define components with specific colors, class names, and element references for tailored UI behavior. This allows for flexible, dynamic interface construction with direct control over rendered elements.",
      "description_length": 532,
      "index": 581,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Square",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color overrides, and element references. Enables creation of consistent, configurable UI blocks like buttons or cards with controlled behavior.",
      "description_length": 370,
      "index": 582,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Stack",
      "description": "Manages reusable UI components with dynamic styling and reference tracking through a record type that includes optional strings and DOM references. Supports customization via color, class name, and key properties. Enables creation of interactive elements that can be dynamically updated or accessed. Examples include rendering styled buttons or input fields with programmatically assigned IDs.",
      "description_length": 393,
      "index": 583,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.StarFilled",
      "description": "Provides a system for building reusable, interactive UI components with dynamic styling and attributes. Features a configuration record type that defines color, class, reference, and key, enabling flexible component customization. Supports integration with React elements and DOM references for enhanced interactivity. Allows developers to create styled, reusable elements such as buttons or icons with tailored behavior and appearance.",
      "description_length": 436,
      "index": 584,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Star",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color settings, and element references. Enables creation of consistent, configurable UI elements like buttons or cards with tailored behavior.",
      "description_length": 369,
      "index": 585,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.StitchesLogo",
      "description": "Manages reusable UI components with dynamic styling and reference capabilities. Operates on a record type with optional string and DOM reference fields, enabling customization through color, class name, reference, and key. Supports creation of interactive elements that can be dynamically updated or accessed. Examples include rendering styled buttons with unique identifiers or integrating with external DOM manipulation logic.",
      "description_length": 428,
      "index": 586,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Stop",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color overrides, and element references. Enables creation of consistent, configurable UI parts like buttons or icons with controlled behavior.",
      "description_length": 369,
      "index": 587,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Stopwatch",
      "description": "Manages UI components with dynamic styling and reference tracking through a record type that holds optional strings and DOM references. Supports customization of visual and structural properties for reusable elements. Enables creation of interactive, configurable UI parts with controlled rendering and state management. Examples include rendering a styled timer display or attaching event handlers to DOM nodes.",
      "description_length": 412,
      "index": 588,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.StretchHorizontally",
      "description": "Manages the creation and configuration of React elements with customizable properties, including color, class name, ref, and key. It works with record types that support optional fields, enabling dynamic and reusable UI components. Operations include element construction, attribute application, and reference handling. Examples include building styled buttons with custom classes or managing component references in dynamic lists.",
      "description_length": 431,
      "index": 589,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.StretchVertically",
      "description": "Manages dynamic UI elements by defining and rendering components with adjustable styles and interactivity through a record structure that holds optional strings and DOM references. Supports customization via color, class, reference, and key properties, enabling flexible and reusable component creation. Components can be tailored for different layouts and behaviors while maintaining consistent data handling. Examples include vertically stretching elements with custom classes or attaching event handlers through references.",
      "description_length": 526,
      "index": 590,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Strikethrough",
      "description": "Manages reusable UI components with dynamic styling and reference tracking through a record type containing optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Allows for the creation of interactive elements that can be dynamically updated or accessed. Enables efficient manipulation of DOM nodes within a functional UI framework.",
      "description_length": 392,
      "index": 591,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Sun",
      "description": "Generates reusable UI elements by combining customizable properties like color, class name, and reference into a structured record. Supports dynamic styling and interactivity through optional fields and DOM manipulation. Enables creation of component instances with specific configurations, such as a button with a custom class and click handler. Allows for flexible composition and integration into larger application interfaces.",
      "description_length": 430,
      "index": 592,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Switch",
      "description": "Manages interactive UI elements with dynamic styling and reference management. Operates on records with optional string and DOM reference fields, enabling customization through color, class, and key. Supports creation of reusable components that adapt to runtime conditions. Allows developers to build interactive switches with tailored visual and functional properties.",
      "description_length": 370,
      "index": 593,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Symbol",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via properties like color, class name, reference, and key. Allows for the creation of component instances with tailored visual and functional attributes. Enables developers to build interactive UI elements that adapt to runtime conditions.",
      "description_length": 412,
      "index": 594,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Table",
      "description": "Generates reusable UI components with customizable styling, class names, and references through a typed record interface. Accepts a rendering function to produce React elements based on provided properties. Supports controlled element creation with explicit key management. Enables consistent, type-safe component building for dynamic user interfaces.",
      "description_length": 351,
      "index": 595,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Target",
      "description": "Encapsulates UI elements with customizable properties such as color, class name, and reference, using a record type to manage attributes. Supports interaction with React elements and DOM references to construct dynamic, reusable components. Allows for the creation of styled, interactive UI parts with programmable behavior. Examples include generating buttons with custom styles or input fields that respond to user events.",
      "description_length": 424,
      "index": 596,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TextAlignBottom",
      "description": "Manages UI components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports custom properties like color, class name, and reference, enabling flexible component configuration. Allows creation of reusable elements that adapt to different layouts and user interactions. Example: rendering a styled button with a custom class and event handler.",
      "description_length": 405,
      "index": 597,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TextAlignCenter",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of adaptable UI elements that respond to runtime changes. Example: rendering a centered text block with a custom color and inline style.",
      "description_length": 380,
      "index": 598,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.TextAlignJustify",
      "description": "Manages the creation of interactive, reusable UI components with customizable styling and behavior. Utilizes a record type to define properties such as color, class name, and DOM references, enabling dynamic element generation. Supports React element manipulation and component composition for flexible UI design. Examples include building styled buttons with event handlers or dynamically updating content based on user input.",
      "description_length": 427,
      "index": 599,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TextAlignLeft",
      "description": "Provides a flexible way to construct UI components with tailored styling and reference management. Accepts a function that maps a typed record\u2014containing color, class name, reference, and key\u2014to a React element. Enables creation of reusable elements with precise control over appearance and behavior. Example: rendering a styled text block with dynamic color and custom class.",
      "description_length": 376,
      "index": 600,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.TextAlignMiddle",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of adaptable UI elements that respond to runtime changes. Example: rendering a centered text block with a custom color and inline style.",
      "description_length": 380,
      "index": 601,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.TextAlignRight",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of tailored UI elements that adapt to different layouts and user interactions. Example: rendering a text block with a specified color and inline style.",
      "description_length": 395,
      "index": 602,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TextAlignTop",
      "description": "Manages UI components with dynamic styling and reference capabilities through a record type that holds optional strings and DOM references. Supports customization via color, class name, and other properties for flexible element creation. Enables the generation of reusable, interactive elements by linking styles and references. Examples include creating styled buttons with custom classes or tracking DOM elements for programmatic interaction.",
      "description_length": 444,
      "index": 603,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Text",
      "description": "Encapsulates UI element creation with customizable styling and reference management through a record-based structure. Supports dynamic updates and component reuse by handling optional string and DOM reference fields. Allows setting color, class, reference, and key properties for tailored rendering. Enables the construction of interactive, reusable UI components with fine-grained control over appearance and behavior.",
      "description_length": 419,
      "index": 604,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TextNone",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate elements based on provided properties. Supports dynamic color application, class assignment, and reference tracking. Enables creation of consistent, configurable UI parts like buttons or inputs with controlled behavior.",
      "description_length": 371,
      "index": 605,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ThickArrowDown",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type containing optional string and DOM reference fields. Supports customization via color, class name, ref, and key properties. Enables creation of adaptable UI elements that integrate seamlessly into larger component hierarchies. Example: rendering a styled button with a custom class and a reference to a DOM node.",
      "description_length": 416,
      "index": 606,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ThickArrowLeft",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Allows for the creation of interactive UI elements that can be dynamically styled and linked to DOM nodes. Example uses include rendering clickable icons with custom colors or attaching refs to track component instances.",
      "description_length": 447,
      "index": 607,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ThickArrowRight",
      "description": "Provides a flexible way to construct reusable UI components by encapsulating properties such as color, class name, reference, and key within a typed record. It allows developers to define custom rendering logic through a function that produces a React element. This enables consistent styling, dynamic class application, and safe reference management across components. Examples include creating a styled button with custom colors or a form element with controlled input references.",
      "description_length": 482,
      "index": 608,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ThickArrowUp",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Allows for creating and manipulating UI elements with flexible configuration. Example: rendering an arrow component with a specified color and attaching a DOM reference for event handling.",
      "description_length": 410,
      "index": 609,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Timer",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a record type containing optional properties. Accepts a rendering function to generate React elements based on provided configurations. Supports custom color schemes, class names, and element references for flexible component composition. Enables creation of adaptable UI elements like buttons or inputs with tailored behavior and appearance.",
      "description_length": 432,
      "index": 610,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Tokens",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key. Enables creation of interactive UI elements with flexible configuration. Examples include styled buttons with custom classes and components that expose DOM references for external manipulation.",
      "description_length": 409,
      "index": 611,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.TrackNext",
      "description": "Generates reusable React components with dynamic styling and interactivity by combining optional string and DOM reference fields. Supports customization through properties like color, class name, reference, and key. Enables creation of interactive UI elements that adapt to runtime conditions. Examples include styled buttons with custom classes and components that expose DOM references for external manipulation.",
      "description_length": 414,
      "index": 612,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TrackPrevious",
      "description": "Manages dynamic UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Supports component creation with flexible styling and reference management for interactive elements. Enables the generation of reusable, configurable UI components tailored to specific rendering needs. Examples include creating styled buttons with custom classes or tracking DOM elements for form validation.",
      "description_length": 434,
      "index": 613,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Transform",
      "description": "Encapsulates UI component creation with customizable attributes, operating on a record type that includes optional strings and DOM references. Supports dynamic styling, class assignment, and element referencing for reusable components. Enables the construction of interactive and adaptable UI elements through structured property management. Examples include generating styled buttons with unique identifiers or managing dynamic form elements with custom classes.",
      "description_length": 463,
      "index": 614,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TransparencyGrid",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of adaptable UI elements that can be dynamically rendered and manipulated. Example: rendering a grid cell with a specified background color and clickable handler.",
      "description_length": 406,
      "index": 615,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Trash",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key, enabling flexible UI element creation. Components can be tailored for specific layouts or interactions by modifying these properties. Example uses include building themed buttons or interactive forms with programmatically managed references.",
      "description_length": 457,
      "index": 616,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TriangleDown",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a scalable SVG triangle with user-defined color and event handlers.",
      "description_length": 391,
      "index": 617,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TriangleLeft",
      "description": "Generates reusable React components with tailored styling and reference management through a structured configuration record. Supports element composition by accepting and returning React nodes, allowing dynamic UI construction. Enables precise control over visual properties like color and class names. Example: create a button component with custom color and event handlers, then embed it within a larger layout.",
      "description_length": 414,
      "index": 618,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TriangleRight",
      "description": "Encapsulates reusable UI components with dynamic styling and reference management through a flexible record type. Supports custom properties such as color, class name, and key, and renders elements via a provided function. Allows for tailored component creation with optional field configuration. Enables building adaptable UI elements that respond to varying design and functional requirements.",
      "description_length": 395,
      "index": 619,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TriangleUp",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive UI elements that adapt to runtime conditions. Example: rendering a clickable triangle with a custom color and event handler.",
      "description_length": 378,
      "index": 620,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.TwitterLogo",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of tailored UI elements that adapt to different contexts. Example: rendering a styled icon with a custom class and event handler.",
      "description_length": 368,
      "index": 621,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Underline",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Allows customization of properties like color, class name, reference, and key for fine-grained control. Components can be rendered with specific styles and linked to DOM elements for event handling. Example uses include creating styled text elements or interactive UI blocks with custom classes and inline styles.",
      "description_length": 463,
      "index": 622,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Update",
      "description": "Manages dynamic UI elements by combining configuration records with React's rendering system. It handles properties like color, class, and references, and supports lifecycle interactions. Operations include component creation, DOM manipulation, and attribute control. Examples include generating styled buttons with custom classes or managing form inputs with real-time updates.",
      "description_length": 378,
      "index": 623,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Upload",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional string and DOM reference values. Supports customization via properties like color, class name, reference, and key. Enables creation of component instances with tailored behavior and appearance. Example: rendering a button with a specified background color and click handler attached to a DOM element.",
      "description_length": 417,
      "index": 624,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.Value",
      "description": "Encapsulates logic for building interactive UI elements by combining configurable properties with DOM manipulation. It processes records with optional string and reference fields to define component behavior and appearance. Users can generate dynamic, reusable components with tailored styling and event handling. Examples include creating buttons with custom colors, linking to DOM elements, and managing unique identifiers for rendering.",
      "description_length": 439,
      "index": 625,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ValueNone",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color overrides, and element references. Enables creation of flexible, maintainable UI fragments with controlled behavior.",
      "description_length": 349,
      "index": 626,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.VercelLogo",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Allows customization via color, class name, reference, and key parameters. Components can be tailored for specific UI needs while maintaining flexibility and reusability. Example uses include rendering themed icons or interactive elements with user-defined styles.",
      "description_length": 409,
      "index": 627,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Video",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record structure. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color overrides, and element references for fine-grained control. Enables creation of consistent, configurable video players or embedded media elements with tailored behavior.",
      "description_length": 412,
      "index": 628,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ViewGrid",
      "description": "Manages reusable UI components with dynamic styling and reference tracking through a record type containing optional strings and DOM references. Supports customization via color, class name, reference, and key properties. Enables creation of interactive elements that can be dynamically updated or accessed. Examples include rendering styled buttons with unique identifiers or managing lists with individual item references.",
      "description_length": 424,
      "index": 629,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ViewHorizontal",
      "description": "Generates reusable React components with dynamic styling and reference management through a record type containing optional string and DOM reference fields. Supports customization via color, class name, ref, and key properties. Enables creation of adaptable UI elements that can be dynamically styled and interacted with. Examples include rendering scrollable containers or horizontally aligned components with custom classes and inline styles.",
      "description_length": 444,
      "index": 630,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ViewNone",
      "description": "Encapsulates reusable UI components with customizable styling and reference management through a typed record. Accepts a rendering function to generate React elements based on provided properties. Supports dynamic class names, color overrides, and element references. Enables creation of consistent, configurable UI building blocks with fine-grained control over appearance and behavior.",
      "description_length": 387,
      "index": 631,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ViewVertical",
      "description": "Provides a flexible way to construct reusable UI components with controlled styling and reference management. Accepts a function that maps a typed record\u2014containing color, class name, reference, and key\u2014to a React element. Enables consistent component creation with customizable visual and structural properties. Examples include building a styled button with dynamic class names or a list item that maintains a reference for scroll positioning.",
      "description_length": 445,
      "index": 632,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.Width",
      "description": "Manages UI component creation through a record-based structure that supports optional string and DOM reference fields. Enables dynamic styling and interactivity by allowing color, class name, reference, and key customization. Components can be rendered with tailored properties, facilitating reusable and adaptable UI elements. For example, a button can be instantiated with a specific color and class name, and its reference can be used to manipulate the DOM directly.",
      "description_length": 469,
      "index": 633,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons.ZoomIn",
      "description": "Manages dynamic UI elements by encapsulating properties like color, class name, and DOM references within a record structure. Enables the creation of reusable, interactive components through customizable fields and direct DOM manipulation. Supports dynamic styling and event handling via exposed properties. Example: generating a button with a custom color and click handler attached to a DOM reference.",
      "description_length": 403,
      "index": 634,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RadixIcons.ZoomOut",
      "description": "Generates reusable React components with dynamic styling and interactivity through a record type that holds optional strings and DOM references. Supports customization via properties like color, class name, and key. Enables creation of interactive UI elements with flexible configuration. Example: rendering a button with a custom color and event handler attached to a DOM reference.",
      "description_length": 383,
      "index": 635,
      "embedding_norm": 1.0
    },
    {
      "module_path": "melange-radix-icons",
      "description": "Provides functions to parse and manipulate dependency specifications, including version constraints and package sources. Works with strings, version ranges, and package metadata structures. Used to integrate external libraries from Git repositories into Dune-based projects.",
      "description_length": 274,
      "index": 636,
      "embedding_norm": 1.0
    },
    {
      "module_path": "RadixIcons",
      "description": "The module provides a system for constructing reusable React components with dynamic styling and interactivity, centered around a typed record that includes optional string and DOM reference fields. Key data types include a configuration record with properties like color, class name, reference, and key, and a rendering function that maps these to React elements. It supports customization of visual and structural attributes, enabling the creation of adaptable UI elements such as buttons, icons, and form components. Examples include rendering styled buttons with custom classes, managing component references for DOM manipulation, and building interactive elements that respond to user input and state changes.",
      "description_length": 714,
      "index": 637,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 638,
    "meaningful_modules": 638,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 714,
    "min_description_length": 247,
    "avg_description_length": 346.3448275862069,
    "embedding_file_size_mb": 1.5645885467529297
  }
}