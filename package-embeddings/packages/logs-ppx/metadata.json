{
  "package": "logs-ppx",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:03:54.992734",
  "modules": [
    {
      "module_path": "Logs_ppx.Ppx",
      "library": "logs_ppx",
      "description": "Implements custom syntax extensions for logging expressions, transforming them into structured data during compilation. Works directly with OCaml abstract syntax trees (ASTs), specifically expressions and extension contexts. Enables embedding logging statements with custom formatting and metadata directly in OCaml code.",
      "description_length": 321,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Logs_ppx",
      "library": "logs_ppx",
      "description": "This module adds compile-time logging capabilities by transforming OCaml AST expressions into structured logging data. It processes logging statements embedded in code, converting them into executable operations that capture values, source locations, and custom formatting. The core functionality revolves around parsing and rewriting OCaml expressions within extension nodes, enabling developers to write expressive logging statements that are type-safe and efficient. For example, a developer can write `[%log \"value: %d\" x]` and have it automatically capture `x`'s value and source position at runtime.",
      "description_length": 605,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 605,
    "min_description_length": 321,
    "avg_description_length": 463.0,
    "embedding_file_size_mb": 0.0076961517333984375
  }
}