{
  "package": "reason-react-ppx",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:59:43.032677",
  "modules": [
    {
      "module_path": "Reason_react_ppx.Binding.React",
      "library": "reason_react_ppx",
      "description": "This module handles the creation and manipulation of React JSX elements and fragments within OCaml code. It provides functions to generate expressions for null values, arrays, and JSX fragments, supporting the transformation of ReasonML-style JSX into valid OCaml AST nodes. These operations are used during the PPX rewriting phase to enable JSX syntax in ReasonReact components.",
      "description_length": 379,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Reason_react_ppx.Binding.ReactDOM",
      "library": "reason_react_ppx",
      "description": "Handles transformation of ReasonReact JSX props into React DOM properties. Works with OCaml abstract syntax trees, specifically expressions and location information. Used internally during JSX compilation to map ReasonReact component props to React DOM attributes.",
      "description_length": 264,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Reason_react_ppx.Binding",
      "library": "reason_react_ppx",
      "description": "This module processes JSX transformations for ReasonReact components by converting JSX syntax into OCaml abstract syntax trees. It includes submodules for handling React DOM attribute mapping and creating JSX elements, fragments, and arrays. Used during PPX rewriting, it enables direct use of JSX in OCaml code by translating it into valid React operations.",
      "description_length": 358,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Reason_react_ppx.Builder",
      "library": "reason_react_ppx",
      "description": "This module provides utilities for constructing and manipulating OCaml abstract syntax trees (ASTs), covering operations for expressions, types, modules, classes, patterns, and signatures. It works with Ppxlib's AST types like `expression`, `core_type`, `module_expr`, and `class_type`, enabling precise location tracking and attribute handling. These functions are used in PPX rewriters to generate or transform OCaml code programmatically, such as building type declarations, pattern-matching constructs, or module bindings with fine-grained control over syntax tree structure.",
      "description_length": 579,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Reason_react_ppx",
      "library": "reason_react_ppx",
      "description": "This module provides AST manipulation utilities focused on transforming ReasonReact JSX syntax into OCaml code, handling expression construction, attribute management, and child node traversal with precise source location tracking. It operates on OCaml AST structures like `value_binding`, `core_type`, and `structure_item` to enable transformations such as JSX expansion, external component declaration generation, and type annotation manipulation. The tools are specifically designed for PPX rewriters implementing ReasonReact's JSX conventions, supporting both syntax-directed code generation and structural AST refactoring during compilation.",
      "description_length": 646,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 646,
    "min_description_length": 264,
    "avg_description_length": 445.2,
    "embedding_file_size_mb": 0.07285594940185547
  }
}