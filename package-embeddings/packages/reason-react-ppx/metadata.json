{
  "package": "reason-react-ppx",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:30:23.046158",
  "modules": [
    {
      "module_path": "Reason_react_ppx.Binding.ReactDOM",
      "description": "Handles the transformation of property lists into DOM element configurations, using location-aware parsing to ensure accurate syntax representation. Operates on labeled argument expressions and source code locations to construct valid DOM structures. Used to generate React element props with precise positional metadata during code generation.",
      "description_length": 344,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Reason_react_ppx.Binding.React",
      "description": "Generates AST nodes for React-specific syntax, including null values, arrays, and JSX fragments with attributes. It constructs expressions and core types representing React components and JSX elements. Used to transform OCaml code into AST structures compatible with React's syntax during preprocessing.",
      "description_length": 303,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Reason_react_ppx.Builder",
      "description": "Provides utilities for constructing objects with location tracking, intended for direct use or aliasing. Includes helper functions that accept a ~loc parameter to annotate generated structures. Supports building and annotating AST nodes or similar constructs with positional information. Can be used to inject location data into generated code elements seamlessly.",
      "description_length": 364,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Reason_react_ppx.Binding",
      "description": "Transforms labeled OCaml expressions and source locations into structured DOM configurations, while generating React-compatible AST nodes for elements, arrays, and fragments. Processes syntax with positional metadata to ensure accurate code generation and transformation. Supports creating JSX elements with attributes, null values, and array structures directly from OCaml code. Enables precise conversion of OCaml expressions into React-specific AST representations for use in preprocessing pipelines.",
      "description_length": 503,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "reason-react-ppx",
      "description": "Provides functions for creating and managing React components with type-safe props and state, including rendering, event handling, and component composition. Works with custom types, records, and React-specific data structures like elements and components. Used to build interactive UIs in ReasonML projects that interoperate seamlessly with existing JavaScript ecosystems.",
      "description_length": 373,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Reason_react_ppx",
      "description": "Injects positional metadata into OCaml constructs and converts labeled expressions into React-compatible AST nodes. Supports building annotated AST elements with location tracking and generating JSX structures from OCaml code. Enables creation of React elements, arrays, and fragments directly from OCaml expressions. Allows seamless integration of location-aware code generation and JSX transformation in preprocessing workflows.",
      "description_length": 430,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 6,
    "filtered_empty_modules": 2,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 503,
    "min_description_length": 303,
    "avg_description_length": 386.1666666666667,
    "embedding_file_size_mb": 0.022226333618164062
  }
}