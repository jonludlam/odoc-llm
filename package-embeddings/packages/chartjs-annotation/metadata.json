{
  "package": "chartjs-annotation",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:01:29.481370",
  "modules": [
    {
      "module_path": "Chartjs_annotation.CoerceTo",
      "library": "chartjs-annotation",
      "description": "This module provides functions to safely cast generic annotation objects into specific types, such as line or box annotations, for use in Chart.js. It works with JavaScript objects representing annotations, leveraging OCaml's type system to ensure correct coercion. Concrete use cases include validating and converting annotation configurations when integrating with Chart.js visualizations.",
      "description_length": 391,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs_annotation.Position",
      "library": "chartjs-annotation",
      "description": "This module defines positional constants and conversions for chart annotations. It provides specific values for left, right, top, bottom, and center positions, along with an `of_string` function to convert string representations into position values. It is used to specify where annotations should be placed relative to chart elements, such as aligning text or markers on a chart axis.",
      "description_length": 385,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs_annotation.Line_mode",
      "library": "chartjs-annotation",
      "description": "This module defines line annotation modes for charting, specifically supporting vertical and horizontal line types. It works with the `t` type, which represents line annotation configurations. Use this module to specify axis-aligned line annotations in chart visualizations.",
      "description_length": 274,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs_annotation.Draw_time",
      "library": "chartjs-annotation",
      "description": "This module defines values representing specific draw times for annotations in Chart.js, such as `afterDraw`, `afterDatasetsDraw`, and `beforeDatasetsDraw`. It works with the `Chartjs_annotation.Draw_time.t` type, which is used to control when annotations are rendered relative to chart elements. Use this module to specify the timing of annotation rendering in relation to dataset drawing operations.",
      "description_length": 401,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chartjs_annotation",
      "library": "chartjs-annotation",
      "description": "This module implements annotation configuration for Chart.js visualizations, providing line mode specifications, draw timing controls, positional alignment values, and type-safe coercion utilities. It operates on JavaScript objects wrapped through `Js_of_ocaml`, enabling precise annotation setup such as axis-aligned lines, box annotations, and label positioning. Concrete use cases include defining time-based thresholds in line charts with vertical annotations, overlaying static labels at specific chart coordinates, and dynamically configuring annotations based on chart options.",
      "description_length": 584,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 5,
    "filtered_empty_modules": 5,
    "retention_rate": 0.5
  },
  "statistics": {
    "max_description_length": 584,
    "min_description_length": 274,
    "avg_description_length": 407.0,
    "embedding_file_size_mb": 0.0728750228881836
  }
}