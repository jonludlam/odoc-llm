{
  "package": "chartjs-annotation",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:16.979670",
  "modules": [
    {
      "module_path": "Chartjs_annotation.Draw_time",
      "library": "chartjs-annotation",
      "description": "This module defines constants representing draw timing events for annotations in Chart.js. It provides values to specify when annotations should be rendered relative to dataset drawing, with `afterDraw`, `afterDatasetsDraw`, and `beforeDatasetsDraw` corresponding to specific rendering phases. The values are used to control annotation layering in chart visualizations.",
      "description_length": 369,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chartjs_annotation.Position",
      "library": "chartjs-annotation",
      "description": "This module defines positional constants and conversions for annotation placement in Chart.js. It supports string-to-position conversion and provides predefined values for common alignment points like left, right, top, and bottom. Use this module to specify where annotations should appear relative to chart elements.",
      "description_length": 317,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chartjs_annotation.CoerceTo",
      "library": "chartjs-annotation",
      "description": "This module provides functions to safely cast generic annotation objects into specific types, such as line or box annotations, for use in Chart.js. It works with JavaScript objects representing annotations, leveraging the Js_of_ocaml type system to ensure type correctness during coercion. Concrete use cases include converting raw annotation data into typed structures when dynamically generating or modifying chart annotations in OCaml code.",
      "description_length": 443,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs_annotation.Line_mode",
      "library": "chartjs-annotation",
      "description": "This module defines line annotation modes for charting, specifically supporting vertical and horizontal line annotations. It works with the `t` type, which represents the mode configuration as a JavaScript object. Use this module to specify the orientation of line annotations in chart visualizations.",
      "description_length": 301,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chartjs_annotation",
      "library": "chartjs-annotation",
      "description": "This module enables the creation and customization of annotations in Chart.js visualizations, combining direct manipulation of annotation objects with utilities for rendering, positioning, and typing. It supports key data types such as line and box annotations, with operations to define their appearance, placement, and draw timing relative to datasets. Specific functionality includes adding horizontal or vertical reference lines, highlighting chart regions, and attaching labels to data points, using positional constants like top, bottom, left, and right. Submodules control rendering order, alignment, and type-safe conversions, ensuring annotations integrate correctly into dynamic chart configurations.",
      "description_length": 710,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 5,
    "filtered_empty_modules": 5,
    "retention_rate": 0.5
  },
  "statistics": {
    "max_description_length": 710,
    "min_description_length": 301,
    "avg_description_length": 428.0,
    "embedding_file_size_mb": 0.01859760284423828
  }
}