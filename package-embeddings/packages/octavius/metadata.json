{
  "package": "octavius",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:56.692597",
  "modules": [
    {
      "module_path": "Octavius.Errors",
      "library": "octavius",
      "description": "This module defines error types and location information for parsing and lexing OCaml documentation comments. It includes detailed error cases for both lexer and parser stages, tracking positions and regions in the source text. Use cases include reporting syntax errors in ocamldoc comments with precise line and column numbers, and distinguishing between unclosed delimiters or unexpected tokens during parsing.",
      "description_length": 412,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Octavius.Types",
      "library": "octavius",
      "description": "This module defines data types for representing structured documentation comments, including text formatting styles, reference kinds, and documentation tags. It supports parsing and handling of inline markup, cross-references, and standard or custom documentation annotations. Concrete use cases include processing OCaml code comments into structured documentation or generating API documentation from source code.",
      "description_length": 414,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Octavius",
      "library": "octavius",
      "description": "This module processes textual data into structured values using a custom type definition, handling input through a lex buffer to produce either a parsed result or a detailed error. It supports robust conversion of OCaml documentation comments into typed structures, with precise error reporting that includes location information for syntax issues like unclosed delimiters or unexpected tokens. The data types include representations for formatted text, cross-references, and documentation tags, enabling operations such as parsing inline markup or extracting structured annotations. Examples include transforming ocamldoc comments into an AST for further processing or displaying typed values with proper formatting and error handling.",
      "description_length": 736,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 736,
    "min_description_length": 412,
    "avg_description_length": 520.6666666666666,
    "embedding_file_size_mb": 0.011311531066894531
  }
}