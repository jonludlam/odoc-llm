{
  "package": "pa_ppx_regexp",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-06-18T16:33:49.876762",
  "modules": [
    {
      "module_path": "Pa_ppx_regexp.Split.ReBuild",
      "description": "Processes parsed OCaml expressions to generate build results, using location data and configuration options. Operates on OCaml abstract syntax tree nodes and integer identifiers. Used to reconstruct and evaluate expressions during incremental compilation.",
      "description_length": 255,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_regexp.Split.PcreBuild",
      "description": "Handles the construction of expression nodes with location tracking and option-based configuration, using location records and option lists to generate AST fragments. Processes integer parameters to influence expression structure during parsing or transformation. Used to embed compiled regular expression results into abstract syntax trees during code generation.",
      "description_length": 364,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_regexp.Split.Pcre2Build",
      "description": "Handles the construction of expression nodes with location tracking and option-based configuration, using location data and a list of options to generate specific AST nodes. Operates on MLast.loc for source positioning and Options.t for configuration parameters. Used to dynamically build syntax tree elements during parsing or transformation phases.",
      "description_length": 350,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_regexp.Match.ReBuild",
      "description": "Converts ML expressions into string representations based on location, options, and an integer parameter, and constructs result expressions with boolean flags. Works with MLast.loc, Options.t, and MLast.expr types. Used to generate debug output and validate transformation logic during parsing and rewriting processes.",
      "description_length": 318,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_regexp.Match.PcreBuild",
      "description": "Converts PCRE match results into OCaml expressions, handling string transformations and boolean outcomes based on provided options and match indices. Operates on location data, option lists, integers, and booleans to generate abstract syntax tree nodes. Used to embed compiled regular expression match logic directly into generated code during parsing or transformation workflows.",
      "description_length": 380,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pa_ppx_regexp.Match.Pcre2Build",
      "description": "Converts PCRE2 pattern strings into OCaml expressions with location tracking, supporting options for pattern compilation. Operates on location data, option lists, integers, and boolean flags to generate abstract syntax tree nodes. Used to inline compiled regex patterns into generated code during parsing or transformation workflows.",
      "description_length": 333,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_regexp.Options",
      "description": "Provides functions to process and manipulate option data, including pretty-printing, string conversion, filtering, and validation. Works with a custom type `t` representing options and related data structures like lists and tuples. Used to filter fixed options, check for conflicts in oneof groups, and generate string group configurations.",
      "description_length": 340,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_regexp.Match",
      "description": "Transforms ML and regex patterns into structured OCaml expressions with location tracking, using options and indices to control output. Processes ML expressions, PCRE match results, and regex patterns to generate AST nodes for debugging, validation, and code embedding. Supports boolean flags and integer parameters to customize transformations during parsing and rewriting. Enables inline regex compilation and debug output generation with precise control over syntax and semantics.",
      "description_length": 483,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_regexp.Split",
      "description": "manages the creation and evaluation of OCaml AST nodes with location and configuration awareness, enabling dynamic expression construction and incremental compilation. It works with MLast.loc for positioning, Options.t for settings, and integer identifiers to shape AST structures. It allows embedding compiled regex results into syntax trees and reconstructing expressions during parsing. Examples include generating location-aware expressions and adapting ASTs based on configuration parameters.",
      "description_length": 497,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pa_ppx_regexp.Pattern",
      "description": "Extracts and processes pattern syntax from strings, constructing abstract syntax tree nodes for expressions and patterns. Operates on location data, option lists, and strings to generate structured OCaml code elements. Validates option configurations and supports custom expression building for parsing tasks.",
      "description_length": 309,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_regexp.Subst",
      "description": "Validates substitution options against a location and list of options, ensuring correctness before application. Processes source and target strings to construct an expression tree with location information. Used to dynamically generate code substitutions in parser transformations.",
      "description_length": 281,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "pa_ppx_regexp",
      "description": "Provides pattern matching and substitution operations on strings using regular expressions, with support for capturing groups and backreferences. Works with string values and compiled regex patterns generated by the pcre library. Enables parsing of log lines and extraction of structured data from unformatted text.",
      "description_length": 315,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_regexp_runtime",
      "description": "Provides a function to split a string using a compiled PCRE2 regular expression, returning a list of either delimiter matches or text segments. Operates on PCRE2 compiled regex patterns and strings. Used to parse structured text by separating content based on specific pattern matches.",
      "description_length": 285,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_regexp",
      "description": "Combines pattern processing, AST construction, and option validation to enable flexible regex integration in OCaml. It handles custom types like `t`, location data, and option lists to generate structured expressions, validate configurations, and embed compiled regex results. Operations include pretty-printing, filtering, transformation, and substitution, with support for location tracking and configuration-driven adjustments. Examples include building location-aware syntax trees, generating debug output, and ensuring valid option usage during parsing.",
      "description_length": 558,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 558,
    "min_description_length": 255,
    "avg_description_length": 362.0,
    "embedding_file_size_mb": 0.05130958557128906
  }
}