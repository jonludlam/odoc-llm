{
  "package": "ppx_deriving_variant_string",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:01.161586",
  "modules": [
    {
      "module_path": "Ppx_deriving_variant_string.Lib.Ppx_deriving",
      "library": "ppx_deriving_variant_string",
      "description": "This module handles name mangling and type manipulation for OCaml type declarations, supporting transformations based on casing conventions like OCaml or Reason. It provides utilities to prefix or suffix type names, extract and modify attributes, and strip pervasive module references from type identifiers. These operations are used to generate derived type representations and manage extension attributes during PPX rewriting.",
      "description_length": 428,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_deriving_variant_string.Lib",
      "library": "ppx_deriving_variant_string",
      "description": "This module enables the construction and manipulation of OCaml AST elements with precise location tracking and error reporting, supporting the creation of expressions, patterns, and attributes tied to variant and string-based syntax. It integrates name mangling and type transformation utilities that handle casing conventions, attribute modification, and module reference stripping, facilitating derived type generation and PPX extension implementation. Specific use cases include rewriting type declarations across different naming schemes and injecting customized AST nodes during syntax extension processing. The combined functionality streamlines source-aware transformations and type-level metaprogramming in OCaml toolchains.",
      "description_length": 732,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_deriving_variant_string",
      "library": "ppx_deriving_variant_string",
      "description": "The module provides utilities for constructing and manipulating OCaml AST elements with precise location tracking and error reporting, enabling source-aware transformations and type-level metaprogramming. It supports the creation of expressions, patterns, and attributes tied to variant and string-based syntax, along with name mangling and type transformation operations for handling casing conventions and module references. Specific capabilities include rewriting type declarations across naming schemes and injecting custom AST nodes during PPX extension processing. These tools facilitate derived type generation and syntax extension implementation in OCaml toolchains.",
      "description_length": 674,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 3,
    "filtered_empty_modules": 2,
    "retention_rate": 0.6
  },
  "statistics": {
    "max_description_length": 732,
    "min_description_length": 428,
    "avg_description_length": 611.3333333333334,
    "embedding_file_size_mb": 0.011323928833007812
  }
}