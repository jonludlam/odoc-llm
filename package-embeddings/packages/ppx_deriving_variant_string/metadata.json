{
  "package": "ppx_deriving_variant_string",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 3,
  "creation_timestamp": "2025-08-14T22:53:34.845583",
  "modules": [
    {
      "module_path": "Ppx_deriving_variant_string.Lib.Ppx_deriving",
      "library": "ppx_deriving_variant_string",
      "description": "This module provides functions for manipulating type declarations and attributes in OCaml ASTs, including converting type declarations to core types, mangling identifiers with prefixes or suffixes based on casing, and filtering or extracting attributes. It works with data types such as `type_declaration`, `core_type`, `attribute`, and `longident`, primarily from the Ppxlib and Astlib libraries. Concrete use cases include custom code generation during PPX rewriting, transforming variant types into string representations, and handling deriver-specific attributes in syntax extensions.",
      "description_length": 588,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_deriving_variant_string.Lib",
      "library": "ppx_deriving_variant_string",
      "description": "This module provides functions for constructing and manipulating OCaml AST nodes such as patterns, expressions, and type attributes. It handles data types including `Parsetree.pattern`, `Parsetree.expression`, `Ppxlib.loc`, and various attribute types, primarily used in PPX rewriters. Concrete use cases include generating pattern matches for variant types, creating labeled identifiers, attaching attributes to type declarations, and building expressions from strings during syntax extension processing.",
      "description_length": 505,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_deriving_variant_string",
      "library": "ppx_deriving_variant_string",
      "description": "This module processes variant types by converting between string representations and OCaml AST nodes. It includes functions for parsing strings into patterns and expressions, generating code for variant matching, and attaching attributes to type declarations. Concrete use cases include building custom syntax extensions, generating boilerplate code for variant types, and manipulating AST elements during PPX rewriting.",
      "description_length": 420,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 3,
    "filtered_empty_modules": 2,
    "retention_rate": 0.6
  },
  "statistics": {
    "max_description_length": 588,
    "min_description_length": 420,
    "avg_description_length": 504.3333333333333,
    "embedding_file_size_mb": 0.04390430450439453
  }
}