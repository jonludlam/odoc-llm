{
  "package": "ppx_deriving_variant_string",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:30.405955",
  "modules": [
    {
      "module_path": "Ppx_deriving_variant_string.Lib.Ppx_deriving",
      "description": "Converts OCaml type declarations to core types and manipulates identifiers and attributes for code generation. Handles string mangling with prefix/suffix options and manages custom attributes for ppx rewriters. Processes type declarations to remove pervasive module references and supports flag checks for conditional processing.",
      "description_length": 329,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_deriving_variant_string.Lib",
      "description": "Transforms OCaml type declarations into core representations, managing identifiers, attributes, and string manipulation with customizable prefixes and suffixes. It removes references to pervasive modules and enables conditional processing based on flags. Supports ppx rewriter attribute handling and modifies type structures for code generation. Examples include generating unique symbol names, filtering type definitions, and adapting types for specific compilation targets.",
      "description_length": 475,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ppx_deriving_variant_string",
      "description": "Converts between regular and polymorphic variants and string representations, handling OCaml and Reason naming conventions. Processes variant types with custom string mappings and case transformations. Enables serialization and deserialization of variant values for configuration parsing or API communication.",
      "description_length": 309,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_deriving_variant_string",
      "description": "Converts OCaml type declarations into structured representations, handling identifiers, attributes, and string transformations with customizable formatting. It supports conditional processing, ppx attribute management, and type adaptation for code generation. Users can generate unique symbol names, filter type definitions, and modify types for specific compilation needs. The module provides core utilities for manipulating and generating OCaml types programmatically.",
      "description_length": 470,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 4,
    "filtered_empty_modules": 2,
    "retention_rate": 0.6666666666666666
  },
  "statistics": {
    "max_description_length": 475,
    "min_description_length": 309,
    "avg_description_length": 395.75,
    "embedding_file_size_mb": 0.014939308166503906
  }
}