{
  "package": "why3find",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 14,
  "creation_timestamp": "2025-08-14T23:19:19.387551",
  "modules": [
    {
      "module_path": "Why3find.Global.Sites",
      "library": "why3find",
      "description": "This module defines lists of package and resource locations used for managing external dependencies and assets in a Why3find project. It works with `Dune_site.Private_.Helpers.Location.t` values, which represent paths or identifiers for these resources. Concrete use cases include locating installed Why3 packages and shared resources during build or execution.",
      "description_length": 361,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Why3find.Prover",
      "library": "why3find",
      "description": "This module handles prover data manipulation and configuration management within a verification system. It works with prover descriptions, instances, and environment configurations to enable tasks like pattern-based prover selection, version matching, and default prover retrieval. Key use cases include resolving prover identities from string representations, validating prover availability in configurations, and issuing diagnostics when required provers are missing.",
      "description_length": 469,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Tactic",
      "library": "why3find",
      "description": "This module defines operations for managing and querying tactics in the Why3 environment. It provides functions to retrieve, compare, and display tactics, as well as to look up and select tactics using environment and string identifiers. Concrete use cases include tactic introspection, command-line completion, and pretty-printing for user feedback.",
      "description_length": 350,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Why3find.Crc",
      "library": "why3find",
      "description": "This module provides operations to construct and analyze hierarchical proof attempt structures, aggregating statistics like stuck counts, proof times, and depth, while determining overall proof outcomes. It works with a tree of nodes classified into `Stuck`, `Prover`, or `Tactic` states, alongside CRC values that support merging, JSON serialization, and formatting, enabling use cases such as tracking proof progress, integrating results from multiple provers, and persisting proof data for debugging or distributed collaboration.",
      "description_length": 532,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Vc",
      "library": "why3find",
      "description": "Processes Why3 proof tasks by identifying and organizing logical chunks such as goals and conditions within source files. It extracts structured information using range data from Why3's internal representation and groups it into categorized chunks. This module is used to analyze and display verification conditions and their locations in Why3 proof scripts.",
      "description_length": 358,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Wutil",
      "library": "why3find",
      "description": "This module handles file extensions, path parsing, and loading of Why3 theories and modules. It provides functions to iterate over identifiers in declarations, symbol maps, and module instantiations. Additionally, it includes printers for various Why3 structures like theories, modules, and declarations, supporting pretty-printing to format output.",
      "description_length": 349,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Version",
      "library": "why3find",
      "description": "Stores and provides access to the current version of the Why3find tool as a string. Exposes a single value `version` that represents the semantic version number. Used to check or display the version of Why3find at runtime or in diagnostic output.",
      "description_length": 246,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Meta",
      "library": "why3find",
      "description": "Handles package metadata for Why3 installations, providing access to package details like dependencies and drivers. It supports operations to locate shared files and installation paths, and to install or query package metadata. Useful for managing Why3 package configurations and resolving dependencies during installation or build processes.",
      "description_length": 342,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Id",
      "library": "why3find",
      "description": "This module provides operations for identifier manipulation, including hashing, equality checks, path resolution, and pretty-printing with context-aware formatting. It works with identifiers (`ident`), module paths, and theory declarations (`decl`), supporting source location extraction, infix notation conversion, and qualified name resolution. Key use cases include resolving identifiers within Why3 theories, generating documentation links, and handling proof-related annotations during code analysis or transformation tasks.",
      "description_length": 529,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Global",
      "library": "why3find",
      "description": "This module manages external dependency and resource locations for Why3find projects. It operates on `Dune_site.Private_.Helpers.Location.t` values, enabling precise resolution of installed Why3 packages and shared assets during build or runtime. Use cases include querying predefined paths for package metadata and resource files.",
      "description_length": 331,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Session",
      "library": "why3find",
      "description": "This module manages hierarchical proof components through operations like session creation, theory and goal extraction, and metadata querying (e.g., names, locations, explanations). It manipulates `session`, `theory`, and `goal` structures to support tasks such as proof state persistence, goal analysis, and tactic application in theorem proving workflows. Specific use cases include inspecting proof hierarchies, transforming goals via tactics, and generating human-readable representations of proof elements.",
      "description_length": 511,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Why3find.Config",
      "library": "why3find",
      "description": "Handles configuration loading, parsing, and environment setup for Why3find, including JSON serialization and deserialization of configuration values. Works with `config` records specifying search parameters and `wenv`/`env` structures for Why3 environments and project contexts. Used to load and save configuration files, create Why3 environments with custom load paths, and initialize project-specific environments with package metadata.",
      "description_length": 438,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Dump",
      "library": "why3find",
      "description": "This module provides a collection of pretty-printing functions for various Why3 internal data structures, including identifiers, terms, expressions, and type-related symbols. It supports direct visualization of entities like program variables, function symbols, and types in both definition and usage contexts. These functions are used to generate human-readable representations of Why3's abstract syntax tree nodes during debugging or logging.",
      "description_length": 444,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find",
      "library": "why3find",
      "description": "This module provides functionality for managing Why3 project configurations, proof attempt analysis, identifier resolution, and prover interactions. It operates on data structures such as configuration records, hierarchical proof nodes, identifiers, and prover descriptions to support concrete tasks like loading project environments, analyzing proof statistics, resolving symbolic references, and selecting appropriate provers based on patterns or versions. Use cases include initializing Why3 sessions with custom load paths, tracking proof progress across multiple provers, extracting goal metadata, and ensuring correct prover availability in verification workflows.",
      "description_length": 670,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 670,
    "min_description_length": 246,
    "avg_description_length": 423.57142857142856,
    "embedding_file_size_mb": 0.20336151123046875
  }
}