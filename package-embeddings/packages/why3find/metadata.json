{
  "package": "why3find",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-06-18T16:34:48.151324",
  "modules": [
    {
      "module_path": "Why3find.Global.Sites",
      "description": "Provides access to lists of location-based data structures representing packages and resources. Operates on Dune_site.Private_.Helpers.Location.t to organize and retrieve site-specific elements. Used to manage and reference built artifacts and static content during site generation.",
      "description_length": 282,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Crc",
      "description": "The module provides operations for tracking and analyzing proof states, including creating, traversing, and querying goal trees, with a focus on monitoring proved, stuck, and unknown goals alongside metrics like timing and depth. It works with custom `crc` and `status` types, enabling functionalities such as merging CRC values, pretty-printing results, and serializing/deserializing data to JSON. These capabilities are particularly useful for debugging proof sessions, generating summaries, and integrating proof state data with external tools or logging systems.",
      "description_length": 566,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Why3find.Dump",
      "description": "Prints various Why3 language elements using format functions, including identifiers, terms, types, expressions, and symbols. Operates on specific Why3 types such as ident, term, ity, cty, expr, and rsymbol. Used to generate human-readable representations for debugging or logging internal Why3 structures.",
      "description_length": 305,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Global",
      "description": "Organizes and retrieves site-specific elements using location-based data structures, enabling efficient management of built artifacts and static content. It operates on Dune_site.Private_.Helpers.Location.t to structure packages and resources. Users can navigate and reference site elements dynamically during generation. Examples include accessing resource paths, organizing build outputs, and managing static assets by location.",
      "description_length": 430,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Why3find.Id",
      "description": "This module offers functions for manipulating identifiers through hashing, equality checks, comparison, and pretty-printing, with support for extracting metadata like location, file, and line information. It works with `id` types from the Why3 library, enabling specialized formatting for qualified names, full paths, and HTML links, as well as handling package URLs and proof-related representations. Use cases include code analysis tools, documentation generators, and systems requiring structured identifier resolution or transformation.",
      "description_length": 540,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Meta",
      "description": "Provides functions to locate and manage package paths, retrieve installed package metadata, and install packages. Operates on package identifiers and file paths, handling dependencies explicitly. Used to resolve shared file locations, determine installation roots, and manage package installations with dependency tracking.",
      "description_length": 323,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Why3find.Prover",
      "description": "Provides a framework for representing and manipulating provers through a set of core types and operations. Includes a base type for prover states and methods for constructing and querying proof contexts. Supports basic operations such as adding assumptions, checking validity, and generating proof steps. Example tasks include validating logical expressions and tracking proof progress through structured state transitions.",
      "description_length": 423,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Why3find.Session",
      "description": "The module provides functions for creating, saving, and inspecting session data, working with structured elements like theories, goals, tasks, and proofs to extract metadata and manage proof states within a Why3-based verification system. It enables retrieval of session details such as names, theories, goals, and task information, supporting tasks like proof state management and verification process tracking.",
      "description_length": 412,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Tactic",
      "description": "Provides operations to retrieve the name of a tactic, compare tactics for equality, and format them for output. Works with the `tactic` type and interacts with Why3's environment to look up and select tactics by name. Used to dynamically access and apply tactics in proof automation workflows.",
      "description_length": 293,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Vc",
      "description": "Processes a file and Why3 task to extract structured code segments, returning a list of chunk records. Operates on Why3 task and theory objects, along with file paths and integer contexts. Used to analyze and serialize specific portions of formal verification tasks for debugging or inspection.",
      "description_length": 294,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Version",
      "description": "Provides a single function to retrieve a version string. Operates on no data types beyond basic strings. Used to dynamically access application version information in logs or user interfaces.",
      "description_length": 191,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find.Wutil",
      "description": "Extracts file extensions and processes file paths, loading theories from Why3 environments and iterating over identifiers in declarations, type declarations, and module instances. Outputs structured representations of Why3 theories, modules, and declarations using pretty-printing functions. Handles symbol mappings and module instantiations for analysis and transformation tasks.",
      "description_length": 380,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "why3find",
      "description": "Provides functions for configuring theorem provers, executing proof tasks, and debugging proofs interactively. Works with proof files, solver configurations, and library packages. Enables streamlined development workflows, documentation generation, and deployment of distributed proof systems.",
      "description_length": 293,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Why3find",
      "description": "Provides tools for managing proof states, printing Why3 language elements, organizing site resources, manipulating identifiers, handling package paths, representing provers, inspecting session data, managing tactics, extracting code chunks, retrieving version strings, and processing file paths. Operates on custom types like `crc`, `status`, `ident`, `id`, `tactic`, and location-based structures, enabling tasks such as debugging proof sessions, generating human-readable outputs, resolving package dependencies, and analyzing formal verification content. Examples include merging CRC values, pretty-printing identifiers, navigating site resources, and extracting theory declarations. Supports integration with external systems, logging, and proof automation workflows.",
      "description_length": 771,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 14,
    "filtered_empty_modules": 3,
    "retention_rate": 0.8235294117647058
  },
  "statistics": {
    "max_description_length": 771,
    "min_description_length": 191,
    "avg_description_length": 393.07142857142856,
    "embedding_file_size_mb": 0.05126667022705078
  }
}