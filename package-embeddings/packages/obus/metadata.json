{
  "package": "obus",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 143,
  "creation_timestamp": "2025-08-18T18:51:09.881976",
  "modules": [
    {
      "module_path": "Notification_interfaces.Org_freedesktop_Notifications",
      "library": "obus.notification",
      "description": "This module defines the D-Bus interface for desktop notifications, including methods to send, close, and query notification capabilities. It works with basic types like strings and integers, as well as structured types for notification actions and hints. Concrete use cases include displaying system notifications, retrieving server metadata, and managing notification timeouts and interactions.",
      "description_length": 395,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Notification_interfaces",
      "library": "obus.notification",
      "description": "This module implements the D-Bus interface for desktop notifications, providing methods to send, close, and query notification capabilities. It operates on basic types such as strings and integers, along with structured types for actions and hints used in notifications. Use cases include displaying system alerts, retrieving server metadata, and managing notification timeouts and user interactions.",
      "description_length": 400,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Notification",
      "library": "obus.notification",
      "description": "This module displays and manages popup notifications with customizable content, urgency levels, and actions. It supports operations to show notifications with text, images, or icons, and handles user interactions through clickable actions or dismissal. Concrete use cases include alerting users of application events, displaying progress updates, or prompting for input via notification actions.",
      "description_length": 395,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_obus",
      "library": "ppx_obus",
      "description": "This module processes OCaml attributes and structure items to support custom exception handling and code transformation. It provides functions to locate specific attributes within a list, register exceptions, and map over OCaml AST elements. It works directly with OCaml AST types like `attribute`, `expression`, and `structure_item`, making it suitable for use in PPX rewriters that need to manipulate or extend OCaml syntax.",
      "description_length": 426,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_auth.Server",
      "library": "obus",
      "description": "This module implements server-side authentication mechanisms for D-Bus connections, handling challenge-response protocols and user identity verification. It works with D-Bus streams and authentication data, supporting mechanisms like anonymous, external, and cookie-based authentication. Concrete use cases include authenticating clients connecting to a D-Bus server, negotiating capabilities, and determining user identity during the authentication exchange.",
      "description_length": 459,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_error.Register",
      "library": "obus",
      "description": "This module provides functions to register OCaml exceptions as D-Bus errors, allowing seamless conversion between the two. It operates on exception values defined in the `Error` module parameter, mapping them to D-Bus error names. Use it to define custom error types that can be propagated over D-Bus, such as reporting application-specific failures in a D-Bus service.",
      "description_length": 369,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OBus_member.Property",
      "library": "obus",
      "description": "This module describes D-Bus properties with access modes like readable and writable. It provides functions to create and inspect properties, specifying their interface, member name, type, and annotations. Use it to define and query property metadata for D-Bus object interfaces.",
      "description_length": 278,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_interfaces.Org_freedesktop_DBus_Properties",
      "library": "obus",
      "description": "This module handles property access and modification for D-Bus objects, providing methods to get, set, and retrieve all properties, along with a signal for property changes. It works with D-Bus interfaces and objects, using strings for property and interface names, and `OBus_value.V.single` for property values. Concrete use cases include implementing or interacting with D-Bus services that expose configurable properties, such as system settings or device state monitoring.",
      "description_length": 476,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_auth.Client",
      "library": "obus",
      "description": "This module implements client-side D-Bus authentication mechanisms, handling challenge-response protocols and stream negotiation. It provides predefined mechanisms like EXTERNAL, ANONYMOUS, and DBUS_COOKIE_SHA1, and allows custom mechanism creation through the `mech_exec` handler. The `authenticate` function performs the full authentication flow over a stream, returning the server GUID and negotiated capabilities upon success.",
      "description_length": 430,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_member.Method",
      "library": "obus",
      "description": "This module describes D-Bus methods, including their interface, name, input and output arguments, and annotations. It works with D-Bus method descriptions, handling argument types and introspection data. Concrete use cases include defining method signatures for D-Bus interfaces and generating introspection data for method calls.",
      "description_length": 330,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_proxy.Private",
      "library": "obus",
      "description": "This module defines the core structure and conversion functions for private proxy objects. It works directly with `OBus_proxy.proxy` values, enabling the creation of private views into shared proxy instances. Use this to implement custom proxy behaviors or restrict access to specific proxy operations in a type-safe manner.",
      "description_length": 324,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_interfaces.Org_freedesktop_DBus_Peer",
      "library": "obus",
      "description": "This module defines methods for interacting with D-Bus peer objects, specifically providing `Ping` to test connectivity and `GetMachineId` to retrieve the machine identifier. It works with D-Bus objects that implement the peer interface, allowing clients to query machine-specific information and check service availability. Concrete use cases include verifying D-Bus service responsiveness and identifying remote machine endpoints in system-level communication.",
      "description_length": 462,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_interfaces.Org_freedesktop_DBus_Introspectable",
      "library": "obus",
      "description": "This module defines the D-Bus Introspectable interface, providing a method to retrieve XML introspection data for D-Bus objects. It includes the `m_Introspect` method that takes no arguments and returns an XML string describing the object's structure. The `make` function constructs an interface implementation from a set of members, enabling objects to expose their structure for tools like `dbus-introspect`.",
      "description_length": 410,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_member.Signal",
      "library": "obus",
      "description": "This module describes D-Bus signals by specifying their interface, member name, argument types, and annotations. It provides functions to create and inspect signal definitions, projecting each component such as interface, member, and arguments individually. It is used to define and introspect the structure of signals in D-Bus object implementations.",
      "description_length": 351,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_interfaces.Org_freedesktop_DBus",
      "library": "obus",
      "description": "This module provides operations for managing D-Bus service names (requesting, releasing, activating), introspecting connections, and handling name ownership events. It operates on string identifiers, integer32 values, lists of strings, and environment variables, using bidirectional conversions for result and flag types. Specific use cases include monitoring active services, controlling service activation, and retrieving system information through D-Bus interactions.",
      "description_length": 470,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_method",
      "library": "obus",
      "description": "This module implements D-Bus method invocation with support for synchronous calls, context-aware responses, and fire-and-forget patterns. It operates on D-Bus method definitions paired with proxies referencing remote objects. Concrete use cases include interacting with system services over D-Bus, such as querying device properties or triggering remote actions without waiting for completion.",
      "description_length": 393,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_address_lexer",
      "library": "obus",
      "description": "This module implements lexing utilities for parsing D-Bus addresses, handling component extraction, separator syntax (commas, semicolons), and validation of delimiters (colons, equals signs) through recursive lexing. It operates on `Lexing.lexbuf` and `Buffer.t` structures, providing low-level string manipulation functions for escaping/unescaping characters and efficient buffer management, specifically used in processing structured D-Bus address strings with nested parameters and escaped sequences.",
      "description_length": 503,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OBus_auth",
      "library": "obus",
      "description": "Handles D-Bus authentication protocols on both client and server sides, supporting mechanisms like EXTERNAL, ANONYMOUS, and DBUS_COOKIE_SHA1. Works with streams built from file descriptors or input/output channels, enforcing line length limits for protocol safety. Authenticates connections, negotiates capabilities, and verifies user identity during D-Bus session setup.",
      "description_length": 371,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_resolver",
      "library": "obus",
      "description": "This module resolves and monitors bus names on a D-Bus connection, returning the current owner of a specified name as a reactive signal. It works with `OBus_connection.t` and `OBus_name.bus`, providing a lightweight interface for tracking service availability. Use it to detect when a D-Bus service appears or disappears on the bus.",
      "description_length": 332,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OBus_context",
      "library": "obus",
      "description": "This module manages contexts for D-Bus message handling, providing access to the connection, sender, destination, flags, and serial of received messages. It works with D-Bus connections, messages, and peers. Use it to extract metadata about incoming D-Bus messages within method call handlers.",
      "description_length": 293,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OBus_match_rule_lexer",
      "library": "obus",
      "description": "This module processes lexical analysis for match rules in D-Bus object paths, handling parsing of strings, namespaces, and paths with specific token recognition. It operates on `lexbuf` input, extracting structured data like integer-string tuples or tagged values (`Namespace`, `Path`, `String`). Concrete use cases include parsing D-Bus match rules from configuration files or runtime strings to define signal filtering and routing logic.",
      "description_length": 439,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_match",
      "library": "obus",
      "description": "This module enables defining and applying message filtering rules for D-Bus communication, focusing on criteria like message type, sender, interface, path, and argument values. It operates on D-Bus connections and rule objects to register or compare rules, ensuring efficient matching of signals or method calls against exact values, paths, or namespaces. Typical use cases include selectively handling messages based on their origin, interface, or payload, while avoiding redundant or overly broad rule registrations.",
      "description_length": 518,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_interfaces",
      "library": "obus",
      "description": "This module implements D-Bus interface definitions for system-level communication, including name management, introspection, peer interaction, and property handling. It works with D-Bus objects, interfaces, and values, using strings, integers, and XML data to enable service control, system monitoring, and inter-process communication. Concrete use cases include querying machine identifiers, exposing object structure to debugging tools, managing service activation, and tracking property changes in system services.",
      "description_length": 517,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_object",
      "library": "obus",
      "description": "This module provides operations for creating and exporting D-Bus objects with customizable interfaces, dynamic method handling, and property management using React signals and Lwt threads. It centers around `OBus_object.t` instances, which represent D-Bus objects with associated paths, interfaces, and owners, enabling runtime modification of behavior and introspection. Suitable for implementing D-Bus services that require asynchronous property updates, signal emission, or reactive interactions with other processes.",
      "description_length": 520,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_transport",
      "library": "obus",
      "description": "This module handles the low-level transmission of D-Bus messages over various transport mechanisms. It provides functions to send and receive messages, manage transport capabilities, and create transports for sockets, loopback communication, and address-based connections. It works directly with file descriptors, message types, and authentication capabilities to establish and control transport channels.",
      "description_length": 405,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_signal",
      "library": "obus",
      "description": "Handles D-Bus signal emission and reception with precise control over message routing and filtering. Works with D-Bus objects, proxies, and signal descriptors to enable type-safe event-driven communication. Use to implement inter-process communication where specific events need to be broadcast or filtered based on sender or arguments.",
      "description_length": 336,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OBus_config",
      "library": "obus",
      "description": "Contains configuration constants including the file path for the machine UUID and the version string. Works with string values to store fixed paths and version information. Used to access predefined system configuration values in OBus applications.",
      "description_length": 248,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_bus",
      "library": "obus",
      "description": "This module enables managing D-Bus connections by handling name registration, service activation, proxy creation, and ownership tracking, alongside configuring message routing rules and monitoring bus events. It operates on connection handles, service names, peer identifiers, and introspection data, supporting use cases like system service orchestration, real-time bus activity monitoring, and integration with OS-level contexts such as Unix user sessions or SELinux policies.",
      "description_length": 478,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_server",
      "library": "obus",
      "description": "This module creates and manages servers for one-to-one communication over D-Bus. It provides functions to start a server with custom connection handlers, retrieve the addresses it listens on, and shut it down cleanly. The server works with D-Bus addresses, connections, and authentication mechanisms, enabling use cases like implementing custom D-Bus services that accept client connections and process method calls or signals.",
      "description_length": 427,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_peer",
      "library": "obus",
      "description": "This module manages D-Bus peers by providing constructors, accessors, and operations such as `ping`, `get_machine_id`, and `wait_for_exit` to interact with remote applications over a D-Bus connection. It works with the `t` type, which encapsulates a connection and an optional peer name, supporting both named and anonymous peers. Concrete use cases include tracking connected applications, identifying remote machines, and synchronizing with peer lifecycle events.",
      "description_length": 465,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_message",
      "library": "obus",
      "description": "This module provides operations for constructing and inspecting D-Bus messages, including method calls, returns, errors, and signals, by manipulating structured components like types, flags, and payloads along with metadata such as serial numbers and endpoints. It includes functionality for validating message signatures to detect mismatches and generating formatted representations of messages, supporting use cases like inter-process communication and system service management in environments relying on the D-Bus protocol.",
      "description_length": 527,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_error",
      "library": "obus",
      "description": "This module handles conversion between OCaml exceptions and D-Bus error names, enabling precise error propagation across D-Bus interfaces. It allows registering custom exceptions with specific D-Bus error names, and provides functions to create, cast, and map exceptions to and from D-Bus-compatible error messages. Use it to define service-specific errors that are exposed over D-Bus, such as authentication failures or invalid method arguments.",
      "description_length": 446,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_wire",
      "library": "obus",
      "description": "This module handles message serialization and deserialization for D-Bus communication, supporting operations to read and write messages to channels or Unix sockets, including handling file descriptors. It works with `OBus_message.t`, `Unix.file_descr`, and specialized `reader` and `writer` types for socket-based I/O. Concrete use cases include sending and receiving D-Bus messages over Unix domain sockets while managing associated file descriptors correctly.",
      "description_length": 461,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_property",
      "library": "obus",
      "description": "This module provides operations for managing and monitoring D-Bus object properties, enabling read/write access, batch processing through groups, and type-safe value transformations. It works with proxies and interfaces, leveraging structures like maps and groups to handle property values, signals, and contexts, with support for cache bypassing and dynamic map construction in scenarios requiring efficient data synchronization or event-driven updates.",
      "description_length": 454,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_member",
      "library": "obus",
      "description": "This module describes D-Bus interface members, including methods, signals, and properties. It provides operations to define, inspect, and generate introspection data for these members, specifying components such as interfaces, names, argument types, and annotations. Concrete use cases include constructing method signatures, defining signal structures, and setting property metadata for D-Bus object interfaces.",
      "description_length": 412,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_address",
      "library": "obus",
      "description": "This module parses, constructs, and manipulates D-Bus addresses, handling operations like extracting specific arguments, converting addresses to and from string representations, and accessing predefined system and session bus addresses. It works with a structured type representing D-Bus addresses, including their transport name and key-value arguments, along with GUIDs. Concrete use cases include configuring D-Bus connections using standard addresses or custom transport parameters.",
      "description_length": 486,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_uuid",
      "library": "obus",
      "description": "This module generates and manipulates D-Bus UUIDs, providing functions to create UUIDs from 32-character hexadecimal strings, generate new UUIDs, and convert UUIDs back to their string representation. It works with a custom type `t` that represents a UUID internally. Use this module when handling D-Bus machine IDs, bus IDs, or address identifiers that require UUID parsing, generation, or serialization.",
      "description_length": 405,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_proxy",
      "library": "obus",
      "description": "This module creates and manages remote D-Bus object proxies, enabling method calls and introspection on remote objects. It works with D-Bus peers, paths, and connections to access remote services. Use it to invoke methods, retrieve object properties, or inspect remote D-Bus interfaces directly from OCaml.",
      "description_length": 306,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_info",
      "library": "obus",
      "description": "This module provides access to runtime information about the D-Bus implementation, including the library version, machine UUID, protocol version, and message size limits. It works with basic types like strings, integers, and lazy values, along with the `OBus_uuid.t` type for UUIDs. Concrete use cases include retrieving the machine's unique identifier for service registration and checking protocol limits for message validation.",
      "description_length": 430,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OBus_value.V",
      "library": "obus.internals",
      "description": "This module provides functions to construct, inspect, and transform structured data representations for D-Bus communication, including operations to map OCaml values to D-Bus types, manage file descriptor lifetimes, and serialize values into string formats. It operates on basic types (e.g., integers, strings), composite types like variants and structures, and sequence types such as arrays, dictionaries, and byte sequences. These capabilities are critical for tasks like encoding method call arguments, decoding signal payloads, or handling binary data in D-Bus-based inter-process communication.",
      "description_length": 599,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_value.T",
      "library": "obus.internals",
      "description": "This component provides operations for constructing and manipulating D-Bus type representations, including basic types (integers, strings, booleans), composite structures (arrays, dictionaries, variants), and sequences. It works with type-safe values modeled through `basic`, `single`, and `sequence` types, enabling precise assembly of D-Bus message payloads. Specific use cases include serializing complex data for inter-process communication, handling variant types in system interfaces, and converting structured values to string representations for debugging or transmission.",
      "description_length": 580,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_value.C",
      "library": "obus.internals",
      "description": "This module provides type conversion functions to map OCaml values to D-Bus representations and back, supporting primitive types (integers, strings, floats) and structured types like arrays, dictionaries, variants, and file descriptors. It enables constructing and deconstructing fixed-arity sequences (up to 16 elements) for D-Bus message handling, using boxed values to manage tuple-like data structures in scenarios such as inter-process communication or system service integration.",
      "description_length": 485,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_introspect",
      "library": "obus.internals",
      "description": "This module handles D-Bus object introspection by parsing and generating XML documents that describe interfaces, methods, signals, and properties. It defines types for annotations, arguments, access modes, and interface members, and provides functions to convert between XML and introspection documents. It is used to inspect and expose D-Bus object capabilities, such as listing available methods or defining property access semantics.",
      "description_length": 436,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OBus_xml_parser",
      "library": "obus.internals",
      "description": "This module provides functions for parsing XML documents using a monadic approach, focusing on handling attributes and elements with precision. It works with XML input streams and structured node parsers, allowing extraction and transformation of specific XML data. Concrete use cases include parsing D-Bus introspection documents to process service descriptions and interface definitions.",
      "description_length": 389,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OBus_value",
      "library": "obus.internals",
      "description": "This module provides operations for parsing and validating D-Bus type signatures, constructing method argument tuples, and performing type-safe conversions between OCaml values and D-Bus representations. It handles D-Bus data structures including basic types (integers, strings), sequences, variants, and structured tuples with up to 16 elements, while supporting labeled value composition for precise message serialization. These capabilities enable tasks like encoding method calls with heterogeneous parameters, decoding signal payloads, and ensuring type correctness during inter-process communication.",
      "description_length": 606,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_introspect_ext",
      "library": "obus.internals",
      "description": "This module enables the manipulation and encoding of extended introspection data for D-Bus interfaces, focusing on semantic constructs like enumerations, flags, and complex types. It operates on structured representations such as arrays, dictionaries, variants, and symbolic references, bridging standard D-Bus types with enriched metadata through annotations. Use cases include defining interface members with enhanced type information, resolving symbolic dependencies, and translating between OCaml values and extended introspection documents for dynamic interface generation or analysis.",
      "description_length": 590,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_util",
      "library": "obus.internals",
      "description": "This module includes functions for list manipulation such as `assoc`, `assq`, `find_map`, `filter_map`, and `part_map`, which handle key-value lookups and transformations with optional results. It provides utilities for string encoding and decoding, SHA-1 hashing, and determining the user's home directory. Additionally, it offers random number generation functions that produce random bytes, integers, and strings, with support for both secure and pseudo-random sources.",
      "description_length": 472,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_string",
      "library": "obus.internals",
      "description": "This module defines validators for D-Bus string constraints, checking requirements for strings, bus names, error names, and paths. It provides functions to validate strings and return detailed error information, including position and reason for failure. Use this module to enforce D-Bus string rules when constructing or receiving messages.",
      "description_length": 341,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_type_ext_lexer",
      "library": "obus.internals",
      "description": "This module implements lexing functions for parsing type definitions and structured values, focusing on tuple-like syntax and type expressions. It processes input via `Lexing.lexbuf` and constructs custom `term` type hierarchies (e.g., `Term`, `Tuple`) to represent parsed data, supporting operations like enumeration, flag handling, and nested type arguments. It is particularly suited for parsing complex type declarations and value lists in domain-specific languages requiring precise positional tracking and error diagnostics.",
      "description_length": 530,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "OBus_protocol",
      "library": "obus.internals",
      "description": "This module defines constants and values used in the implementation of the D-Bus protocol, including limits for type recursion depth, name length, array size, and message size. It also provides predefined identifiers such as the system bus name, object paths, and interface names. These values are used to enforce protocol constraints and to reference well-known D-Bus entities in message construction and validation.",
      "description_length": 417,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_path",
      "library": "obus.internals",
      "description": "This module constructs, manipulates, and validates D-Bus object paths, represented as lists of string elements. It supports operations like path concatenation, substring extraction, escaping/unescaping path elements, and generating unique paths. Concrete use cases include building D-Bus object hierarchies, parsing and validating D-Bus object paths from strings, and safely handling path elements with special characters.",
      "description_length": 422,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OBus_name",
      "library": "obus.internals",
      "description": "This module handles D-Bus names, validating and translating them according to specific rules. It provides functions to check bus, interface, member, and error names against D-Bus specifications and convert them into identifier formats used in OCaml and Haskell. Use cases include adapting D-Bus names for code generation in OCaml or Haskell and ensuring compliance with D-Bus naming conventions during inter-process communication setup.",
      "description_length": 436,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Device_WakeOnLan",
      "library": "obus.hal",
      "description": "This module defines methods to interact with Wake-on-LAN functionality of a device, including enabling or disabling the feature, checking its status, and determining support. It works with boolean and 32-bit integer types to handle device state and method return values. Concrete use cases include remotely managing device power states over a network and querying hardware capabilities for Wake-on-LAN support.",
      "description_length": 410,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Device_LaptopPanel",
      "library": "obus.hal",
      "description": "This module defines methods to interact with laptop panel devices via D-Bus, specifically supporting getting and setting screen brightness levels. It works with `OBus_member.Method.t` for method definitions and integrates with D-Bus object interfaces through the `make` function. Concrete use cases include adjusting display brightness programmatically and retrieving current brightness settings on systems using the HAL device framework.",
      "description_length": 438,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_device.Wake_on_lan",
      "library": "obus.hal",
      "description": "This module provides functions to manage Wake-on-LAN settings for a device, including retrieving supported features, checking current status, and enabling or disabling the feature. It works with `Hal_device.t` to interact with device-specific configurations through Lwt-based asynchronous operations. Concrete use cases include controlling remote device wake-up capabilities over a network and querying device support for Wake-on-LAN.",
      "description_length": 434,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hal_device.Storage_removable",
      "library": "obus.hal",
      "description": "Handles detection and management of removable storage devices. Provides functions to check for media presence and monitor device state changes. Works with `Hal_device.t` instances representing storage devices, returning async boolean results for media availability. Useful for dynamically responding to USB drive insertions or SD card changes in embedded systems.",
      "description_length": 363,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Device_CPUFreq",
      "library": "obus.hal",
      "description": "This module defines methods to query and configure CPU frequency settings on a device. It provides operations to get and set CPU frequency governors, performance levels, and whether nice values are considered. The module works with unit inputs and outputs, strings, integers, and lists of strings, primarily for interacting with CPU frequency policies and states.",
      "description_length": 363,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Device_Volume_Crypto",
      "library": "obus.hal",
      "description": "This module defines methods for setting up and tearing down cryptographic volumes, specifically handling operations with device encryption keys. It works with string-based encryption keys and unit-type triggers for volume teardown. Concrete use cases include unlocking encrypted storage devices and securely removing access to them.",
      "description_length": 332,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Device_Storage",
      "library": "obus.hal",
      "description": "This module defines methods for interacting with storage devices, including ejecting media and closing trays. It works with D-Bus objects representing storage devices, using string lists for options and returning status codes. Concrete use cases include controlling optical drives and removable storage through D-Bus method calls.",
      "description_length": 330,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hal_device.Kill_switch",
      "library": "obus.hal",
      "description": "Implements power management kill-switch logic for hardware devices. Provides functions to safely disable power by validating device state before invoking `set_power`, ensuring power cannot be restored once killed. Used in critical shutdown sequences to prevent unauthorized power changes.",
      "description_length": 288,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Manager",
      "library": "obus.hal",
      "description": "This module defines methods and signals for managing hardware devices and global interface locks via D-Bus. It provides operations to find, add, and remove devices, check device existence, and handle capability matches, along with signals for device events and lock state changes. It works with strings, lists, and D-Bus signal types to interact with the HAL device management system.",
      "description_length": 384,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Device_Leds",
      "library": "obus.hal",
      "description": "This module defines operations to interact with LED devices via the HAL (Hardware Abstraction Layer) D-Bus interface. It provides methods to retrieve and set the brightness level of LEDs, working with 32-bit integers for brightness values. Concrete use cases include adjusting keyboard backlighting or status LEDs on hardware devices through D-Bus method calls.",
      "description_length": 361,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Device_Volume",
      "library": "obus.hal",
      "description": "This module defines methods for managing volume operations such as mounting, unmounting, and ejecting storage devices. It works with D-Bus interfaces and string lists to handle mount options and error codes. Concrete use cases include integrating with system-level storage management in desktop environments or device handling daemons.",
      "description_length": 335,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_device.Volume",
      "library": "obus.hal",
      "description": "Handles volume operations for devices, including mounting, unmounting, and ejecting with specific path and argument lists. Works directly with `Hal_device.t` and string lists for system interaction. Used for managing device storage volumes in low-level system operations.",
      "description_length": 271,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Device_SystemPowerManagement",
      "library": "obus.hal",
      "description": "This module defines methods for controlling system power states via the HAL device interface. It provides operations to hibernate, reboot, shut down, and suspend the system, as well as enabling power save mode and hybrid suspend. These functions are used for direct system power management tasks such as initiating sleep states or powering off the machine.",
      "description_length": 356,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_device.Storage",
      "library": "obus.hal",
      "description": "Handles storage-related operations for devices, providing functions to eject media and close device trays asynchronously. Works with `Hal_device.t` and string lists, returning promises of integer results. Used to control physical storage devices like CD/DVD drives or removable media.",
      "description_length": 284,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hal_device.Laptop_panel",
      "library": "obus.hal",
      "description": "Works with laptop panel devices to control screen brightness. Provides `set_brightness` and `get_brightness` functions for adjusting and retrieving the current brightness level. Useful for power management applications or user interface tools that need to adapt screen brightness based on environmental conditions or user preferences.",
      "description_length": 334,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Device",
      "library": "obus.hal",
      "description": "This module supports querying and modifying device properties, managing interface locks, and triggering device rescan operations. It works with D-Bus HAL device properties and capabilities, handling data types like strings, integers, and lists. Use cases include dynamic device configuration, concurrency control through locking, and hardware state management via property updates or capability checks.",
      "description_length": 402,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Device_Storage_Removable",
      "library": "obus.hal",
      "description": "This module defines operations for interacting with removable storage devices via the HAL (Hardware Abstraction Layer) D-Bus interface. It provides a method `m_CheckForMedia` to check for the presence of media in a storage device and constructs an interface for exposing these capabilities. It works with D-Bus objects representing storage devices, specifically handling media detection functionality.",
      "description_length": 401,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hal_device.Cpufreq",
      "library": "obus.hal",
      "description": "This module provides functions to configure and retrieve CPU frequency settings for a device, including governor, performance level, and whether nice values are considered. It works with strings for governors, integers for performance levels, and booleans for nice value flags. Concrete use cases include dynamically adjusting CPU behavior for power management or performance tuning based on system load or user preferences.",
      "description_length": 424,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_device.System_power_management",
      "library": "obus.hal",
      "description": "This module provides functions to manage system power states, including suspending, hibernating, shutting down, rebooting, and enabling or disabling power-saving mode. It operates on `Hal_device.t` instances, which represent hardware devices managed by the HAL system. Use this module to control device power behavior in response to system events or user actions, such as initiating a reboot or entering low-power mode.",
      "description_length": 419,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_interfaces.Org_freedesktop_Hal_Device_KillSwitch",
      "library": "obus.hal",
      "description": "This module defines methods to control power state via a kill switch device, providing `GetPower` to retrieve the current power status and `SetPower` to enable or disable it. It works with D-Bus objects representing hardware kill switches, typically used for managing devices like Wi-Fi or Bluetooth. Concrete use cases include querying and toggling the power state of a wireless adapter through system-level D-Bus interactions.",
      "description_length": 428,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hal_manager",
      "library": "obus.hal",
      "description": "This module manages hardware devices via the Hardware Abstraction Layer (HAL), providing operations to query, add, and remove devices, as well as handle global interface locks and device capabilities. It works with `Hal_device.t` for device representations and `OBus_proxy.proxy` for D-Bus communication, supporting signals for device changes and capability additions. Concrete use cases include enumerating all devices, searching for devices by string or capability, acquiring interface locks, and committing device configurations to GDL.",
      "description_length": 539,
      "index": 72,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Hal_interfaces",
      "library": "obus.hal",
      "description": "This module provides D-Bus interface definitions for interacting with hardware devices and system management features. It includes operations for device property manipulation, power control, CPU frequency tuning, LED and display brightness adjustments, storage and volume management, system power states, and device capability checks. These modules are used for low-level hardware interaction, such as configuring device settings, managing removable media, controlling system sleep states, and handling encrypted volumes.",
      "description_length": 521,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Hal_device",
      "library": "obus.hal",
      "description": "This module enables manipulation of hardware device properties (integers, booleans, strings, lists), configuration of device capabilities, and access control through the `Hal_device.t` type and UDI identifiers. It supports managing power states, storage devices, CPU frequency, and system events like Wake-on-LAN or laptop panel brightness, leveraging asynchronous Lwt operations and OBus signals for real-time state notifications.",
      "description_length": 431,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_settings.Connection.Secrets",
      "library": "obus.network_manager",
      "description": "This module retrieves secrets for a given connection setting, such as passwords or private keys, using D-Bus interactions. It works with NetworkManager connection objects and handles secret hints, new secret requests, and authentication challenges. Concrete use cases include fetching Wi-Fi passwords or TLS key passphrases during connection setup or reauthentication.",
      "description_length": 368,
      "index": 75,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_Device",
      "library": "obus.network_manager",
      "description": "This module defines operations and properties for managing and monitoring network devices via the NetworkManager D-Bus interface. It provides methods to disconnect devices, track state changes, and access device properties such as driver, interface name, IP configurations, and capabilities. Concrete use cases include retrieving current network device status, handling DHCP configuration paths, and monitoring device state transitions in system networking tools.",
      "description_length": 463,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_device.Wired",
      "library": "obus.network_manager",
      "description": "This module provides access to Wired device properties and events, including hardware address, connection speed, and carrier status. It works with NetworkManager device objects to monitor and retrieve Ethernet-specific state changes. Concrete use cases include detecting network link status updates and querying MAC addresses for device identification.",
      "description_length": 352,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_device.Gsm",
      "library": "obus.network_manager",
      "description": "Handles GSM device operations within NetworkManager, providing functions to manage mobile broadband connections. Works with `Nm_device.t` instances representing GSM devices, and interacts with property change signals to monitor device state. Use it to retrieve GSM-specific properties, handle connection status updates, and configure mobile network settings programmatically.",
      "description_length": 375,
      "index": 78,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_device.Bluetooth",
      "library": "obus.network_manager",
      "description": "This module extends NetworkManager device functionality specifically for Bluetooth devices. It provides access to Bluetooth-specific properties such as device capabilities and responds to property changes relevant to Bluetooth connections. Use it to monitor and manage Bluetooth device state, such as tracking changes in capabilities or maintaining connection status.",
      "description_length": 367,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_Device_Bluetooth",
      "library": "obus.network_manager",
      "description": "This module defines the D-Bus interface for interacting with Bluetooth devices via NetworkManager. It provides access to device properties such as hardware address, name, and Bluetooth capabilities, along with a signal for tracking property changes. It is used to retrieve and monitor Bluetooth device information in system-level networking applications.",
      "description_length": 354,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_Device_Wireless",
      "library": "obus.network_manager",
      "description": "This module interacts with wireless network devices via D-Bus, exposing methods to retrieve access points and monitor changes through signals like access point addition or removal. It works with D-Bus paths, string values, and integer properties to represent device state and capabilities. Concrete use cases include scanning for available Wi-Fi networks, tracking connection status, and retrieving hardware-specific details like bitrate and MAC address.",
      "description_length": 454,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_settings.Connection",
      "library": "obus.network_manager",
      "description": "This module manages NetworkManager connection settings through D-Bus, allowing creation, deletion, and modification of connections using `update`, `delete`, and `get_settings`. It works directly with `OBus_proxy.proxy` values representing NetworkManager connection objects, and emits signals like `updated` and `removed` to track changes. Concrete use cases include modifying Wi-Fi configurations, applying new TLS certificates, or synchronizing connection properties across system components.",
      "description_length": 493,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_VPN_Connection",
      "library": "obus.network_manager",
      "description": "This module defines the interface for interacting with a NetworkManager VPN connection, providing access to properties like the connection banner and current state. It includes signals for monitoring changes to the connection's properties and state, enabling real-time updates in applications. Concrete use cases include building UI components that display or react to VPN status changes or connection metadata.",
      "description_length": 411,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManagerSettings",
      "library": "obus.network_manager",
      "description": "This module defines methods and signals for managing network connections via NetworkManager's D-Bus API. It provides operations to add connections (`m_AddConnection`), list existing connections (`m_ListConnections`), and listen for new connection events (`s_NewConnection`). The module works with D-Bus paths, string-based connection settings, and variant values representing configuration data.",
      "description_length": 395,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_Device_Serial",
      "library": "obus.network_manager",
      "description": "This module defines an interface for interacting with NetworkManager serial devices, specifically exposing a signal for PPP statistics. It works with D-Bus objects and tuples of 32-bit integers to represent statistical data. Concrete use cases include monitoring connection statistics for serial devices like modems managed by NetworkManager.",
      "description_length": 342,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_Device_OlpcMesh",
      "library": "obus.network_manager",
      "description": "This module defines an interface for interacting with OLPC mesh devices via NetworkManager, exposing properties such as the active channel, companion device path, and hardware address. It provides signals for property changes and allows constructing an object interface from a set of members. Concrete use cases include monitoring and configuring OLPC mesh device settings in a D-Bus environment.",
      "description_length": 396,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_IP4Config",
      "library": "obus.network_manager",
      "description": "This module defines properties for IPv4 configuration data, including addresses, domains, nameservers, routes, and WINS servers, all accessible through D-Bus. It works with lists of 32-bit integers and strings to represent network configuration parameters. Concrete use cases include retrieving current IPv4 settings from NetworkManager and monitoring changes to DNS or routing information.",
      "description_length": 390,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_settings.System",
      "library": "obus.network_manager",
      "description": "This module manages system-wide NetworkManager settings related to hostname configuration, permissions, and property changes. It provides functions to get and set the hostname, check modification permissions, retrieve permission levels, and listen to property change events. Concrete use cases include updating the system hostname asynchronously, monitoring permission changes, and ensuring runtime modification capabilities.",
      "description_length": 425,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager",
      "library": "obus.network_manager",
      "description": "This module provides methods to manage network connections, including activating and deactivating connections, retrieving device lists, and controlling wireless and WWAN states. It works with D-Bus paths, strings, and boolean and integer values to interact with NetworkManager's D-Bus API. Concrete use cases include monitoring device changes through signals like DeviceAdded and DeviceRemoved, adjusting wireless settings via the WirelessEnabled property, and tracking the overall state of the network manager.",
      "description_length": 511,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_DHCP4Config",
      "library": "obus.network_manager",
      "description": "This module provides access to DHCPv4 configuration data through a D-Bus interface. It includes a property for retrieving DHCP options as a list of key-value pairs and a signal for tracking changes to those properties. It is used to monitor and manage IPv4 DHCP configuration settings in NetworkManager.",
      "description_length": 303,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_PPP",
      "library": "obus.network_manager",
      "description": "This module defines methods for managing PPP (Point-to-Point Protocol) connections in NetworkManager. It provides operations to set IPv4 configuration, update connection state, and request secrets, working with string-keyed configuration maps and integer states. Concrete use cases include configuring dial-up networking, managing authentication credentials, and controlling PPP interface state transitions.",
      "description_length": 407,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_device.Olpc_mesh",
      "library": "obus.network_manager",
      "description": "This module provides access to OLPC mesh device properties such as active channel and hardware address. It works with `OBus_proxy.t` and exposes device-specific attributes through readable properties. Concrete use cases include retrieving the current mesh network channel and the device's MAC address for network diagnostics or configuration.",
      "description_length": 342,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManagerSettings_Connection_Secrets",
      "library": "obus.network_manager",
      "description": "This module defines an interface for retrieving secrets associated with network connections. It provides a method `m_GetSecrets` that takes a connection path, a list of setting names, and a boolean flag to control whether to return only secrets that need saving. The method returns a list of secrets grouped by setting, where each secret is represented as a key-value pair. Use this module to interact with NetworkManager's secret management system when handling connection configurations that require authentication or encryption keys.",
      "description_length": 536,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_Device_Wired",
      "library": "obus.network_manager",
      "description": "This module provides access to properties and signals for monitoring and managing wired network devices via the NetworkManager D-Bus API. It includes properties for checking carrier status, hardware address, and connection speed, along with a signal for tracking property changes. Concrete use cases include retrieving the current link speed and monitoring carrier presence on a wired network interface.",
      "description_length": 403,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManagerSettings_Connection",
      "library": "obus.network_manager",
      "description": "This module defines methods and signals for managing network connection settings via D-Bus. It provides operations to delete a connection, retrieve its settings, and update its configuration, working with structured data such as string-keyed property lists. It is used to interact with NetworkManager's D-Bus API for configuring and monitoring network connections.",
      "description_length": 364,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManagerSettings_System",
      "library": "obus.network_manager",
      "description": "This module defines D-Bus interface bindings for interacting with NetworkManager settings, specifically handling hostname configuration and permissions. It provides methods to get permissions, save a hostname, and exposes properties indicating whether the hostname can be modified and what the current hostname is. Use cases include querying and updating system hostname settings through D-Bus and checking user permissions for configuration changes.",
      "description_length": 450,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_device.Serial",
      "library": "obus.network_manager",
      "description": "Handles serial communication devices, providing access to PPP statistics as a signal. Works with NetworkManager device objects to expose data such as bytes received and transmitted. Useful for monitoring network usage over serial connections in real time.",
      "description_length": 255,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_AccessPoint",
      "library": "obus.network_manager",
      "description": "This module provides access to properties of a NetworkManager access point, including flags, frequency, hardware address, maximum bitrate, mode, RSN/WPA flags, SSID, and signal strength. It works with D-Bus objects to retrieve wireless network details. Concrete use cases include scanning available Wi-Fi networks and displaying connection information like signal strength and security protocols.",
      "description_length": 396,
      "index": 98,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_IP6Config",
      "library": "obus.network_manager",
      "description": "This module defines properties for IPv6 configuration data, including addresses, domains, nameservers, and routes. It works with lists of strings and tuples representing network parameters. Concrete use cases include retrieving and exposing IPv6 configuration details via D-Bus for network management.",
      "description_length": 301,
      "index": 99,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_device.Wireless",
      "library": "obus.network_manager",
      "description": "This module manages wireless network devices, providing functions to retrieve and monitor access points, device capabilities, and connection properties. It works with `Nm_device.t` and `Nm_access_point.t` types, exposing wireless-specific attributes like hardware address, bitrate, and supported security protocols. Concrete use cases include scanning available Wi-Fi networks, tracking changes to device capabilities, and retrieving the current active access point for a wireless connection.",
      "description_length": 492,
      "index": 100,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_Connection_Active",
      "library": "obus.network_manager",
      "description": "This module provides access to properties of active network connections, including the connection path, devices involved, state, and service name. It allows reading properties such as whether the connection is the default, whether it's a VPN, and its specific object path. Use this module to monitor and retrieve status information about active NetworkManager connections via D-Bus signals and property queries.",
      "description_length": 411,
      "index": 101,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_VPN_Plugin",
      "library": "obus.network_manager",
      "description": "This module defines methods and signals for managing a NetworkManager VPN plugin, including connecting with configuration parameters, disconnecting, handling secrets, setting IP4 configuration, and reporting failures. It works with D-Bus interfaces, methods, signals, and properties, using tuples and lists of string-value pairs for configuration data. Concrete use cases include implementing a custom VPN plugin that integrates with NetworkManager via D-Bus, handling connection state changes, and providing runtime configuration updates.",
      "description_length": 539,
      "index": 102,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_device.Cdma",
      "library": "obus.network_manager",
      "description": "Handles CDMA-specific device operations, including connecting, disconnecting, and retrieving cellular carrier information. Works with `Nm_device.t` instances representing CDMA network devices. Useful for managing mobile broadband connections in environments relying on CDMA technology, such as certain cellular networks.",
      "description_length": 320,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_Device_Gsm",
      "library": "obus.network_manager",
      "description": "This module defines the interface for interacting with GSM devices via NetworkManager's D-Bus API. It provides access to properties and signals specific to GSM devices, such as carrier information and connection status. Use this module to monitor or configure mobile broadband connections in a Linux environment.",
      "description_length": 312,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces.Org_freedesktop_NetworkManager_Device_Cdma",
      "library": "obus.network_manager",
      "description": "This module defines the CDMA device interface for interacting with NetworkManager via D-Bus. It provides a signal for property changes and a method to construct the interface, working with D-Bus objects and string-typed values. It is used to manage and monitor CDMA network devices in a D-Bus-based system integration context.",
      "description_length": 326,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_vpn_connection",
      "library": "obus.network_manager",
      "description": "This module provides operations to manage and monitor VPN connections using D-Bus proxies. It supports querying connection state, banner information, and property changes, as well as subscribing to signals for state transitions and property updates. Concrete use cases include tracking active VPN sessions, reacting to connection status changes, and retrieving runtime configuration details from NetworkManager-managed VPN connections.",
      "description_length": 435,
      "index": 106,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_settings",
      "library": "obus.network_manager",
      "description": "This module manages NetworkManager settings via D-Bus, providing functions to access user and system settings, list connections, and handle new connection events. It works with `OBus_proxy.proxy` values representing NetworkManager settings objects and emits signals when connections are added or updated. Concrete use cases include retrieving system-wide network configurations, monitoring new connection creation, and managing connection lifecycles through D-Bus proxies.",
      "description_length": 472,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_ip4_config",
      "library": "obus.network_manager",
      "description": "This module provides access to IPv4 configuration properties via D-Bus proxies. It supports reading IP addresses, nameservers, WINS servers, domains, and routes from network configuration objects. Use it to retrieve and monitor IPv4 settings in network management applications.",
      "description_length": 277,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_monitor",
      "library": "obus.network_manager",
      "description": "Monitors properties of Network Manager interfaces, tracking changes in system network configuration. Works with `OBus_property.monitor` to observe property updates on D-Bus objects. Useful for applications needing real-time updates on network state, such as connection status or device availability.",
      "description_length": 299,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_interfaces",
      "library": "obus.network_manager",
      "description": "This module provides D-Bus interface bindings for managing network configurations and system hostname settings, enabling operations like device state monitoring, connection activation/deactivation, IP/DHCP configuration retrieval, and hostname modification. It works with network devices (wired, wireless, Bluetooth, GSM, CDMA), access point data, connection secrets, and system configuration properties through structured D-Bus paths and key-value pairs. Specific use cases include handling Wi-Fi network discovery, cellular modem configurations, and permission-aware hostname updates in system management tools.",
      "description_length": 613,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_device",
      "library": "obus.network_manager",
      "description": "This module enables operations for managing network devices through D-Bus interactions, focusing on retrieving device properties (state, IP configuration, type), controlling connections, and tracking state changes using a D-Bus proxy wrapper. It extends core functionality with device-type-specific modules that expose tailored operations\u2014such as Wi-Fi scanning, MAC address retrieval, or cellular connection monitoring\u2014while maintaining a unified interface for heterogeneous device handling. Designed for network management tasks, it supports use cases like connection diagnostics, dynamic network configuration, and device state synchronization in system-level applications.",
      "description_length": 676,
      "index": 111,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_vpn_plugin",
      "library": "obus.network_manager",
      "description": "This module provides operations to manage a NetworkManager VPN plugin instance, including connecting, disconnecting, and setting configuration. It works with D-Bus proxies and handles IP configuration, secrets, and state changes via signals and properties. Concrete use cases include integrating a custom VPN backend with NetworkManager over D-Bus, handling authentication, and propagating connection status updates.",
      "description_length": 416,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_manager",
      "library": "obus.network_manager",
      "description": "This module provides functions to interact with the NetworkManager daemon, including retrieving devices, activating and deactivating connections, and managing daemon state transitions. It works with network devices, connections, and D-Bus peers, exposing operations like `get_devices`, `activate_connection`, and `sleep`. Concrete use cases include monitoring network state changes, enabling/disabling wireless interfaces, and handling device additions or removals through D-Bus signals.",
      "description_length": 487,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_access_point",
      "library": "obus.network_manager",
      "description": "This module provides functions to interact with network access points using D-Bus proxies, allowing retrieval of properties like SSID, frequency, hardware address, and security flags. It supports querying encryption capabilities (WPA/RSN), connection modes, and signal strength, along with monitoring property changes via signals. Concrete use cases include scanning available Wi-Fi networks, assessing access point security configurations, and managing wireless device connectivity.",
      "description_length": 483,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_ip6_config",
      "library": "obus.network_manager",
      "description": "This module provides access to IPv6 configuration properties through D-Bus proxies. It retrieves addresses, nameservers, domains, and routes associated with a network interface. Use cases include inspecting IPv6 settings for network diagnostics or dynamic configuration updates.",
      "description_length": 278,
      "index": 115,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_dhcp4_config",
      "library": "obus.network_manager",
      "description": "This module provides access to DHCPv4 configuration data through D-Bus proxies. It allows retrieving configuration options as key-value pairs and listening for property change notifications. Concrete use cases include inspecting DHCP lease information and monitoring dynamic configuration updates from the D-Bus interface.",
      "description_length": 322,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nm_ppp",
      "library": "obus.network_manager",
      "description": "This module provides operations to manage PPP (Point-to-Point Protocol) connections through D-Bus proxies. It supports retrieving secrets, setting IPv4 configuration, and updating the state of a PPP connection. The module works directly with PPP proxy objects, allowing configuration and control of network interfaces using specific key-value settings and state transitions.",
      "description_length": 374,
      "index": 117,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nm_connection",
      "library": "obus.network_manager",
      "description": "This module manages active network connections, providing access to connection state, associated devices, and configuration properties. It works with D-Bus proxies and NetworkManager settings connections, exposing signals for property changes. Concrete use cases include monitoring connection activation status, retrieving device lists for active connections, and accessing VPN or default route flags.",
      "description_length": 401,
      "index": 118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "UPower_interfaces.Org_freedesktop_UPower_Device",
      "library": "obus.upower",
      "description": "This module supports querying historical data, statistical metrics, and real-time state updates for power devices via D-Bus, with operations like retrieving energy levels, refreshing device status, and subscribing to change notifications. It exposes device metrics (e.g., energy capacity, rechargeability, presence) and metadata (e.g., serial number, technology, voltage) through typed properties, enabling precise monitoring of hardware attributes. Typical use cases include tracking battery health, detecting power supply transitions, and accessing device-specific details for system diagnostics or user interfaces.",
      "description_length": 617,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UPower_interfaces.Org_freedesktop_UPower",
      "library": "obus.upower",
      "description": "This module provides power management operations for system state control and device monitoring, including suspension, hibernation, and battery status tracking, alongside D-Bus interface construction for service integration. It works with system power states, device paths, and D-Bus object interfaces, exposing properties like battery charge levels and lid switch status through typed method handlers. Typical use cases include desktop environment power management, device event handling, and daemon version reporting in system services.",
      "description_length": 538,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UPower_interfaces.Org_freedesktop_UPower_QoS",
      "library": "obus.upower",
      "description": "This module defines methods and signals for managing power quality of service (QoS) policies on a system. It provides operations to request, cancel, and adjust latency constraints, as well as retrieve current latency information and monitor changes via signals. Concrete use cases include enforcing power-saving policies for devices or applications and tracking active latency requests in real time.",
      "description_length": 399,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UPower_interfaces.Org_freedesktop_UPower_Wakeups",
      "library": "obus.upower",
      "description": "This module provides methods to retrieve wakeup data and totals from the system, along with signals to monitor changes in that data. It works with unit inputs and returns structured data including boolean flags, integers, floats, and strings, organized in lists and tuples. Concrete use cases include querying system wake-up statistics and subscribing to updates when those statistics change.",
      "description_length": 392,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UPower_interfaces",
      "library": "obus.upower",
      "description": "This module implements power management interfaces for system state control, device monitoring, and quality of service policies over D-Bus. It provides operations for suspending or hibernating the system, querying battery status, retrieving device metrics, setting latency constraints, and accessing wakeup statistics. These interfaces work with power states, device paths, D-Bus object interfaces, and structured metric types, supporting use cases such as desktop environment power management, battery health tracking, and system diagnostics.",
      "description_length": 543,
      "index": 123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "UPower_wakeups",
      "library": "obus.upower",
      "description": "This module retrieves and monitors system wakeup sources, providing detailed information about each source's origin, type, and activity rate. It works with process IDs, command lines, and kernel driver IRQs to identify wakeup causes. Concrete use cases include diagnosing power consumption due to frequent wakeups and identifying misbehaving applications or drivers.",
      "description_length": 366,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UPower",
      "library": "obus.upower",
      "description": "This module enables interaction with the UPower daemon through D-Bus to manage system sleep/hibernate operations, enumerate and monitor power devices, and access system-wide power properties like lid state and battery status. It operates on `UPower.t` peer objects, leveraging Lwt for asynchronous workflows and OBus for property bindings, supporting use cases such as detecting low battery thresholds, controlling power state transitions, or querying device capabilities like suspend/hibernate readiness.",
      "description_length": 505,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UPower_device",
      "library": "obus.upower",
      "description": "This module provides operations for retrieving device properties, statistics, and historical data from UPower device proxies over D-Bus, with support for monitoring state changes through signals. It works with `UPower_device.t` objects to access typed properties like energy levels, battery status, and hardware metadata, returning values via `OBus_property.r` wrappers. Typical use cases include battery status monitoring, power supply diagnostics, and system-level energy management tasks.",
      "description_length": 491,
      "index": 126,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "UPower_policy",
      "library": "obus.upower",
      "description": "This module manages power-saving policies by handling latency requests, setting minimum latency values, and tracking changes in latency requirements for CPU/DMA and network operations. It works with data types like `cookie` to identify requests, `latency_request` records containing metadata and values in microseconds or kilobits per second, and `latency` types distinguishing between CPU/DMA and network constraints. Concrete use cases include optimizing system performance for real-time applications by adjusting latency requirements or monitoring changes in power-saving policies.",
      "description_length": 584,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UPower_monitor",
      "library": "obus.upower",
      "description": "Monitors property changes on UPower interfaces, tracking updates to device and system power states. Works with `OBus_property` values to detect and respond to changes in battery levels, AC power status, and device wake/sleep events. Useful for applications needing real-time power state notifications, such as power management tools or status indicators.",
      "description_length": 354,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Policy_kit_interfaces.Org_freedesktop_PolicyKit_AuthenticationAgent",
      "library": "obus.policykit",
      "description": "This module defines an interface for handling PolicyKit authorization requests, providing a method to obtain authorization with action ID, user ID, and process ID. It works with D-Bus objects and members to expose authentication agent functionality. Concrete use cases include implementing a custom authentication agent for PolicyKit in a system service or desktop environment.",
      "description_length": 377,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Policy_kit_interfaces",
      "library": "obus.policykit",
      "description": "This module defines an interface for handling PolicyKit authorization requests, providing a method to obtain authorization with action ID, user ID, and process ID. It works with D-Bus objects and members to expose authentication agent functionality. Concrete use cases include implementing a custom authentication agent for PolicyKit in a system service or desktop environment.",
      "description_length": 377,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Policy_kit",
      "library": "obus.policykit",
      "description": "This module provides functions to interact with PolicyKit for checking and obtaining authorization for specific actions. It works with string identifiers for actions, process IDs, and optional X11 display identifiers. A typical use case involves calling `obtain_authorization` to request user permission before performing privileged operations such as system management tasks.",
      "description_length": 376,
      "index": 131,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "UDisks_interfaces.Org_freedesktop_UDisks_Expander",
      "library": "obus.udisks",
      "description": "This module defines an interface for interacting with expander devices on a UDisks system. It provides read-only access to properties such as the adapter path, model, native path, number of ports, revision, upstream ports, and vendor. These properties are useful for inspecting hardware details and relationships of expander devices in storage systems.",
      "description_length": 352,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UDisks_interfaces.Org_freedesktop_UDisks_Port",
      "library": "obus.udisks",
      "description": "This module defines the interface for interacting with UDisks port objects, exposing properties such as adapter, connector type, native path, number, and parent. It provides access to the `Changed` signal for monitoring updates to port state. Concrete use cases include querying port configuration and monitoring hardware connection changes in storage devices.",
      "description_length": 360,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UDisks_interfaces.Org_freedesktop_UDisks_Adapter",
      "library": "obus.udisks",
      "description": "This module defines an interface for accessing properties of a UDisks adapter, including driver, fabric, model, native path, number of ports, and vendor information. It works with D-Bus objects to expose read-only adapter metadata through signals and properties. Concrete use cases include retrieving hardware-specific details for storage adapters in system management tools.",
      "description_length": 375,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UDisks_interfaces.Org_freedesktop_UDisks",
      "library": "obus.udisks",
      "description": "This module provides system-level storage management operations, including device enumeration and configuration (drives, adapters, expanders), LVM2 volume group and logical volume manipulation, and MD RAID device handling. It works with D-Bus paths, string/integers for device identifiers, and string lists for filesystems, supporting use cases like automated storage provisioning, hardware change monitoring, and encryption management through LUKS. Key functionalities include device spindown control, volume creation/removal, and real-time job status tracking via signals.",
      "description_length": 574,
      "index": 135,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "UDisks_expander",
      "library": "obus.udisks",
      "description": "This module provides access to expander devices on a bus, allowing retrieval of device-specific properties such as native path, vendor, model, and number of ports. It works with data types like `OBus_proxy.proxy`, `UDisks_port.t`, and `UDisks_adapter.t` to represent and interact with hardware expanders. Concrete use cases include monitoring expander device changes via the `changed` signal and querying upstream ports or adapter information for device management tasks.",
      "description_length": 471,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UDisks_device",
      "library": "obus.udisks",
      "description": "This module provides comprehensive storage management capabilities, including device control (ejection, spindown, benchmarking), filesystem operations (mounting, creation, repair), encryption management (LUKS unlock/lock, passphrase changes), and RAID/LVM configuration (array expansion, volume group tracking). It operates on block device proxies (`UDisks_device.t`) to expose hardware-specific attributes, SMART health data, partition tables, and dynamic properties like job status or media state. Specific use cases include automated disk encryption workflows, RAID array monitoring, performance tuning via SMART self-tests, and system-level storage orchestration for Linux environments.",
      "description_length": 690,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UDisks_adapter",
      "library": "obus.udisks",
      "description": "This module provides access to UDisks adapter properties such as fabric, number of ports, driver, model, vendor, and native path. It allows converting between adapter objects and D-Bus proxies and emits a signal when the adapter changes. Concrete use cases include monitoring adapter state changes and retrieving hardware-specific metadata for storage devices.",
      "description_length": 360,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UDisks_monitor",
      "library": "obus.udisks",
      "description": "Monitors property changes on UDisks interfaces, tracking updates to device and drive attributes. Works with `OBus_property.monitor` to provide real-time notifications for system events like device insertion or configuration changes. Useful for applications that need to react to hardware state changes, such as auto-mounting tools or system dashboards.",
      "description_length": 352,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UDisks_interfaces",
      "library": "obus.udisks",
      "description": "This module provides interfaces for low-level storage device management, enabling operations such as querying device properties, monitoring hardware changes, and managing storage components like adapters, expanders, and ports. It works with D-Bus objects and system paths to expose detailed metadata and state changes of storage hardware. Concrete use cases include tracking device connectivity, inspecting storage topology, and integrating hardware events into system monitoring tools.",
      "description_length": 486,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "UDisks_port",
      "library": "obus.udisks",
      "description": "This module defines an interface for interacting with UDisks port objects, providing access to properties like connector type, port number, parent adapter, and native path. It allows conversion between port objects and D-Bus proxies and exposes a signal for change notifications. Concrete use cases include monitoring port state changes and retrieving port configuration details in storage management applications.",
      "description_length": 414,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UDisks",
      "library": "obus.udisks",
      "description": "This module provides system-level storage management operations for configuring and monitoring disk devices, logical volumes, and hardware components. It works with LVM2 volume groups, physical volumes, logical volumes, system devices identified by UUIDs or device files, and hardware adapters or expanders, supporting tasks like RAID array creation, filesystem capability queries, and drive power management. Specific use cases include dynamic storage provisioning via LVM, real-time device lifecycle tracking through signal-based notifications, and daemon state inspection for job progress monitoring.",
      "description_length": 603,
      "index": 142,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 147,
    "meaningful_modules": 143,
    "filtered_empty_modules": 4,
    "retention_rate": 0.9727891156462585
  },
  "statistics": {
    "max_description_length": 690,
    "min_description_length": 248,
    "avg_description_length": 419.86013986013984,
    "embedding_file_size_mb": 2.0584115982055664
  }
}