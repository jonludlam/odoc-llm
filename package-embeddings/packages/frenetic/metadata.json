{
  "package": "frenetic",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 865,
  "creation_timestamp": "2025-06-18T17:46:56.236377",
  "modules": [
    {
      "module_path": "Frenetic.Network.Make.Topology.EdgeSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on named data structures that represent identifiers or labels. Used to validate hierarchical relationships and ensure consistency in configuration or schema definitions.",
      "description_length": 278,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.EdgeSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided constructor. It operates on S-expressions parsed from text and is used to deserialize structured data into domain-specific objects. This enables direct mapping of sexp-encoded configurations or messages into application-specific representations.",
      "description_length": 314,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.PortSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.PortSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expression data structures generated by the ppx_sexp_conv library. This is used to deserialize structured data from S-expressions into application-specific types during parsing.",
      "description_length": 284,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on named data structures that represent identifiers or labels. Used to validate hierarchical relationships and ensure consistency in configuration or schema definitions.",
      "description_length": 278,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expressions parsed from text and transforms them into structured data. This is used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 276,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.EdgeSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. Operates on structured data with unique identifiers and hierarchical relationships. Used to validate configuration overlaps and ensure consistency in data models.",
      "description_length": 316,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.EdgeSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to parse structured data from S-expressions into domain-specific types during deserialization.",
      "description_length": 270,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.PortSet.Tree.Named",
      "description": "Checks whether one named entity is a subset of another and verifies equality between two named entities, both returning error results on failure. Operates on custom named types representing structured identifiers. Used to validate hierarchical relationships and ensure consistency in data models.",
      "description_length": 296,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.PortSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text input, transforming them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 270,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. Operates on structured data with unique identifiers and hierarchical relationships. Used to validate configuration consistency and ensure data integrity in domain-specific models.",
      "description_length": 333,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text and transforms them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 265,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.EdgeSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.EdgeSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expression data structures generated by the ppx_sexp_conv library. This is used to deserialize structured data from S-expressions into domain-specific types during parsing.",
      "description_length": 279,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.PortSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, both returning error results on failure. Works with named entities represented as structured data types containing identifiers and attributes. Used to validate hierarchical relationships and ensure consistency in configuration management systems.",
      "description_length": 346,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.PortSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expressions parsed from text and transforms them into structured data. This is used to deserialize configuration data from S-expression format into application-specific types.",
      "description_length": 282,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. Operates on structured data with unique identifiers and hierarchical relationships. Used to validate configuration consistency and ensure data integrity in domain-specific models.",
      "description_length": 333,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type using a provided constructor. Operates on Sexp.t and a specific Elt.t structure. Used to parse structured data from S-expressions into domain-specific values.",
      "description_length": 202,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Seq.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a key type using a custom parsing function. Operates on S-expression data structures and the Key module's type. Used to deserialize structured data from S-expressions into key representations for lookup or comparison.",
      "description_length": 247,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Par.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on data structures representing named entities, such as identifiers or labeled values. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 295,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Par.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expression data structures generated by the ppx_sexp_conv library. This is used to deserialize structured data from S-expressions into domain-specific types during parsing.",
      "description_length": 279,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.EdgeSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.EdgeSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text and transforms them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 265,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.PortSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.PortSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expressions parsed from text and transforms them into structured data. This is used to deserialize data from S-expressions into application-specific types during parsing.",
      "description_length": 277,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to parse structured data from S-expressions into domain-specific types during serialization workflows.",
      "description_length": 278,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.EdgeSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.EdgeSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expressions parsed from text and transforms them into structured data. This is used to deserialize configuration data into a domain-specific type during runtime.",
      "description_length": 268,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.PortSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.PortSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to parse structured data from S-expressions into domain-specific types during deserialization.",
      "description_length": 270,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, both returning error results on failure. Works with the `named` type, which represents entities with identifiers. Used to validate hierarchical relationships and ensure consistency in data models.",
      "description_length": 296,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expression data structures generated by the ppx_sexp_conv library. This is used to deserialize structured data from S-expressions into application-specific types during parsing.",
      "description_length": 284,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.EdgeSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on data structures representing named entities, such as identifiers or labeled values. Used to validate hierarchical relationships and ensure consistency in named data during configuration checks or data validation workflows.",
      "description_length": 334,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.EdgeSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expression data structures generated by the ppx_sexp_conv library. This is used to deserialize structured data from S-expressions into application-specific types during parsing.",
      "description_length": 284,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.PortSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on named data structures representing entities with identifiers. Used to validate hierarchical relationships and ensure consistency in entity definitions.",
      "description_length": 263,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.PortSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by ppx_sexp_conv. Used to parse structured data from S-expressions into domain-specific types during serialization workflows.",
      "description_length": 266,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration models.",
      "description_length": 284,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to parse structured data from S-expressions into domain-specific types during deserialization.",
      "description_length": 270,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.EdgeSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on named data structures that represent entities with identifiers. Used to validate hierarchical relationships and ensure consistency in configuration models.",
      "description_length": 267,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.EdgeSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on `Ppx_sexp_conv_lib.Sexp.t` values to produce instances of `Elt.t`. Used to deserialize structured data from S-expression format into application-specific types.",
      "description_length": 262,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.PortSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on data structures representing named entities, such as identifiers or labeled values. Used to validate hierarchical relationships and ensure consistency in configuration or schema definitions.",
      "description_length": 302,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.PortSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text input. Used to deserialize structured data from S-expression format into application-specific types.",
      "description_length": 233,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data containing identifiers and attributes. Used to validate hierarchical relationships and ensure consistency in configuration models.",
      "description_length": 316,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on `Ppx_sexp_conv_lib.Sexp.t` values to produce instances of `Elt.t`. Used to deserialize structured data from S-expression format into application-specific types.",
      "description_length": 262,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.EdgeSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, both returning error results on failure. Works with named entities represented as structured data types containing identifiers and attributes. Used to validate hierarchical relationships and ensure consistency in configuration models.",
      "description_length": 334,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.EdgeSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to parse structured data from S-expressions into domain-specific types during deserialization.",
      "description_length": 270,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.PortSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.PortSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to deserialize structured data from S-expressions into domain-specific types during parsing.",
      "description_length": 268,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expression data structures generated by the ppx_sexp_conv library. This is used to deserialize structured data from S-expressions into application-specific types during parsing.",
      "description_length": 284,
      "index": 50,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexHash.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Works with the `Ppx_sexp_conv_lib.Sexp.t` type and a specific key type. Used to deserialize structured data from S-expressions into a keyed representation for lookup or indexing.",
      "description_length": 253,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexHash.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing values of a specific type using the Bin_prot library, including size calculation, writing, and reading operations. Works with custom types that require binary encoding, supporting both direct and variant-based reading. Used to enable efficient binary persistence of data structures in applications needing fast I/O.",
      "description_length": 368,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.EdgeSet.Elt",
      "description": "Converts between a custom edge type and S-expression representations, and provides a comparator for ordered operations. Works with the `edge` type and comparator witness to enable structured data handling. Used to serialize and deserialize edge data and support ordered comparisons in algorithms.",
      "description_length": 296,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.EdgeSet.Tree",
      "description": "Provides operations to compare and validate named entities, ensuring subset and equality relationships, and converts S-expressions into structured domain objects using a custom type `Elt.t`. Named entities are used to represent identifiers or labels in hierarchical contexts, while S-expressions are transformed into typed values for application use. It supports tasks like checking configuration consistency and parsing structured data. Examples include verifying that a schema subset matches a parent definition or converting a sexp-encoded message into a typed representation.",
      "description_length": 579,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.EdgeSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on data structures representing named entities, such as identifiers or labeled values. Used to validate hierarchical relationships and ensure consistency in named data during configuration checks or data validation processes.",
      "description_length": 334,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.EdgeSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text and transforms them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 265,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.EdgeSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based decoding. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 343,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.EdgeSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance and consistency with comparison. Operates on custom data types through a fold-based approach, incorporating size information to prevent prefix-based collisions. Used to generate reliable hash values for complex structures like lists and variants, ensuring uniform distribution in hash tables.",
      "description_length": 425,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.PortSet.Elt",
      "description": "Converts between a port value and its S-expression representation, and provides a comparator for ordered operations. Works with the `port` type and its associated comparator witness. Used to serialize and deserialize port data and enable sorted comparisons in data structures.",
      "description_length": 276,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.PortSet.Tree",
      "description": "Provides operations to validate hierarchical relationships between structured named entities and convert S-expression data into custom types. It includes checks for subset and equality relations, and supports deserialization using a conversion function. Users can ensure data consistency and transform parsed input into application-specific representations. For example, it can verify that a configuration subtree adheres to a defined schema or convert a serialized data structure into a typed value.",
      "description_length": 500,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.PortSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. Operates on structured data with unique identifiers and associated properties. Used to validate hierarchical relationships and ensure consistency in configuration models.",
      "description_length": 324,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.PortSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type using a provided constructor. Operates on Sexp.t and a specific Elt.t type defined elsewhere. Used to parse structured data from S-expressions into domain-specific values.",
      "description_length": 215,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.PortSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based decoding. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 343,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.PortSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Operates on custom data types defined with `Elt.t`, preserving hash consistency with their comparison function. Used to generate reliable hash values for complex types in hash tables and serialization, preventing collision patterns that arise from naive folding.",
      "description_length": 462,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexSet.Elt",
      "description": "Converts between a custom vertex type and S-expression representations, and provides a comparator for ordered operations. Works with the `vertex` type and its associated comparator witness. Used to serialize and compare vertex data in structured formats.",
      "description_length": 254,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexSet.Tree",
      "description": "Provides operations to check subset and equality relationships between named entities and to convert S-expressions into structured `Elt.t` values. Named entities are used to represent identifiers or labels in hierarchical contexts, while S-expressions are transformed into application-specific data. It enables validation of configuration consistency and deserialization of structured data. For example, it can verify that a child configuration is a subset of a parent or convert a textual S-expression into a typed representation for processing.",
      "description_length": 546,
      "index": 66,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to deserialize structured data from S-expressions into domain-specific types during parsing.",
      "description_length": 268,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a specific type `t` defined by `Elt`, supporting polymorphic variants through a tag-based reader. Used to persist and reconstruct instances of `t` in binary format for storage or communication.",
      "description_length": 355,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Works with custom data types defined using the `Elt` module, supporting recursive and nested structures. Used to generate consistent and unique hash values for complex types in hashing-based data structures like hash tables.",
      "description_length": 422,
      "index": 70,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Topology.EdgeSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Topology.EdgeSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text and transforms them into structured data. Used to deserialize configuration data from S-expressions into a domain-specific type.",
      "description_length": 261,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.PortSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data containing identifiers and metadata. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 322,
      "index": 73,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Topology.PortSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expression data structures generated by the ppx_sexp_conv library. This is used to deserialize structured data from S-expressions into domain-specific types during parsing.",
      "description_length": 279,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. Operates on structured data with unique identifiers and hierarchical relationships. Used to validate configuration consistency and ensure data integrity in domain-specific models.",
      "description_length": 333,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type using a provided constructor function. Operates on Sexp.t and a user-defined type Elt.t. Used to parse structured data from S-expressions into application-specific representations.",
      "description_length": 224,
      "index": 76,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexHash.Provide_of_sexp",
      "description": "Converts an S-expression into a key using a custom parsing function. Works with S-expression data structures generated by ppx_sexp_conv. Used to deserialize structured data from S-expressions into a specific key type for lookup or indexing.",
      "description_length": 240,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexHash.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing a specific type using Bin_prot, including size calculation, writing, reading, and shape information. Works with a custom type `key` and its polymorphic variant form when applicable. Used to enable binary persistence of data structures in applications requiring efficient serialization.",
      "description_length": 338,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.EdgeSet.Elt",
      "description": "Converts between a custom edge type and S-expression representations, and provides a comparator for ordered operations. Works with the `edge` type and comparator witness to enable structured data handling. Used for serializing and comparing graph edge data in parsing and sorting scenarios.",
      "description_length": 290,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.EdgeSet.Tree",
      "description": "Provides operations for validating relationships between structured named entities and converting S-expressions into domain-specific types. Supports subset checks, equality comparisons, and deserialization of hierarchical data using unique identifiers. Accepts S-expressions and returns `Elt.t` values with validated relationships. Enables consistent data model validation and structured data parsing in applications.",
      "description_length": 417,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.EdgeSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.EdgeSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text and transforms them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 265,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.EdgeSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a user-defined type `Elt.t` and its variants, supporting polymorphic variants through a tag-based reader. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 353,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.EdgeSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Operates on custom data types defined with `Elt.t`, supporting recursive and nested structures. Used to generate consistent, collision-resistant hash values for complex types in serialization and comparison contexts.",
      "description_length": 414,
      "index": 84,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.PortSet.Elt",
      "description": "Converts between a custom type and S-expression representations, and provides a comparator for ordered operations. Works with the `port` type and its associated comparator witness. Used to serialize and compare port values in data structures.",
      "description_length": 242,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.PortSet.Tree",
      "description": "Provides operations to validate hierarchical relationships between structured identifiers and convert S-expressions into typed data. Supports subset checks, equality verification, and custom deserialization using conversion functions. Accepts named entities and S-expressions as inputs, producing validated or transformed structured data. Enables consistent data modeling and configuration loading from textual representations.",
      "description_length": 427,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.PortSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 87,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.PortSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text input. Used to deserialize structured data from S-expression format into application-specific types.",
      "description_length": 233,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.PortSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based decoding. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 343,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.PortSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Works with custom data types defined using the `Elt` module, supporting recursive and composite structures. Used to generate consistent, collision-resistant hash values for serialization, equality checks, and efficient storage in hash tables.",
      "description_length": 442,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexSet.Elt",
      "description": "Provides serialization and deserialization between S-expressions and a vertex type, along with a comparator for ordered operations. Works with the `t` type, which represents a vertex, and the `comparator_witness` type for type-safe comparisons. Used to enable persistent storage and ordered data handling in graph-related computations.",
      "description_length": 335,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexSet.Tree",
      "description": "Provides operations to compare and validate named entities based on subset and equality relationships, along with conversion of S-expressions into structured `Elt.t` types. Supports validation of hierarchical data consistency and deserialization of configuration data. Enables checks like determining if one entity fully contains another or if two entities are identical. Allows transforming textual S-expression representations into application-specific models for further processing.",
      "description_length": 485,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexSet.Named",
      "description": "Checks whether one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. The operations return error-tolerant results, ensuring validation during comparisons. Used to enforce consistency in configurations where named resources must match or be contained within defined sets.",
      "description_length": 360,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text input. Used to deserialize structured data from S-expression format into application-specific types.",
      "description_length": 233,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a user-defined type `Elt.t` and its polymorphic variants when necessary. Enables efficient binary storage and retrieval of structured data in applications requiring persistent or networked data exchange.",
      "description_length": 365,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance and consistency with comparison. Works with custom data types through a fold-based approach that includes size information to prevent prefix collisions. Used to generate reliable hash values for complex structures like lists and variants during serialization or equality checks.",
      "description_length": 409,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexHash.Provide_of_sexp",
      "description": "Converts an S-expression into a key by parsing and validating its structure. Works with S-expression data generated from OCaml values using ppx_sexp_conv. Used to deserialize configuration keys from structured text formats in parsing pipelines.",
      "description_length": 244,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexHash.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing values of a specific type using the Bin_prot library, including size calculation, writing, and reading operations. Works with custom types that require binary encoding and decoding, supporting polymorphic variants through a constructor tag. Used to enable efficient binary persistence of data structures in applications requiring fast I/O.",
      "description_length": 392,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.EdgeSet.Elt",
      "description": "Converts between a custom edge type and S-expression representations, and provides a comparator for ordered operations. Works with the `edge` type and comparator witness to enable structured data serialization and comparison. Used to serialize graph edges for persistence and to sort edge collections efficiently.",
      "description_length": 313,
      "index": 99,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.EdgeSet.Tree",
      "description": "Provides operations to validate hierarchical relationships between structured named entities and convert S-expressions into domain-specific types. It includes checks for subset and equality relations on entities and supports deserialization using custom conversion functions. Users can ensure data consistency during configuration validation and parse complex data structures from S-expressions. Examples include verifying that a child configuration is a subset of a parent and transforming serialized data into typed representations.",
      "description_length": 534,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.EdgeSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 101,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.EdgeSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expression data structures generated by the ppx_sexp_conv library. This is used to deserialize structured data from S-expressions into domain-specific types during parsing.",
      "description_length": 279,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.EdgeSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based decoding. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 343,
      "index": 103,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.EdgeSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Works with custom data types defined using the `Elt` module, supporting recursive and composite structures. Used to generate consistent, collision-resistant hash values for serialization, equality checks, and efficient storage in hash tables.",
      "description_length": 440,
      "index": 104,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.PortSet.Elt",
      "description": "Provides serialization and deserialization between `t` and S-expressions, along with a comparator for ordered operations. Works with the `t` type, which represents a port, and the `comparator_witness` type for type-safe comparisons. Used to enable persistent storage and ordered data handling for port values.",
      "description_length": 309,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.PortSet.Tree",
      "description": "Verifies subset and equality relationships between structured named entities, returning errors on mismatch, and converts S-expressions into custom `Elt.t` types using a provided function. It supports validation of hierarchical data and deserialization of configuration information. Operations include checking inclusion, comparing entities, and transforming textual representations into typed structures. For example, it can ensure a child configuration fully complies with a parent schema or parse a configuration file into a domain-specific model.",
      "description_length": 549,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.PortSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. Operates on structured data with unique identifiers and hierarchical relationships. Used to validate configuration consistency and ensure data integrity in domain-specific models.",
      "description_length": 333,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.PortSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text and transforms them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 265,
      "index": 108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.PortSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based decoding. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 343,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.PortSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Operates on custom types defined with `Elt.t`, supporting recursive and nested data structures. Used to generate consistent and unique hash values for complex data during serialization or comparison operations.",
      "description_length": 410,
      "index": 110,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexSet.Elt",
      "description": "Provides serialization and deserialization between S-expressions and a vertex type, along with a comparator for ordered operations. Works with the `t` type, which represents a vertex, and its associated comparator witness. Used to enable persistent storage and ordered comparisons in graph-related data structures.",
      "description_length": 314,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexSet.Tree",
      "description": "Validates and compares named entities with custom data types, ensuring subset and equality relationships through unique identifiers and hierarchical structures. Parses S-expressions into domain-specific values using a provided constructor, transforming raw Sexp.t into structured Elt.t representations. Enables configuration validation and data conversion within specialized modeling contexts. For example, it checks if a user role is a subset of an access level or converts a configuration file's S-expression into a typed representation for further processing.",
      "description_length": 562,
      "index": 112,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 286,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text input. Used to deserialize structured data from S-expression format into application-specific types.",
      "description_length": 233,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based reading. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 342,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance and consistency with comparison. It operates on custom data types by recursively incorporating their elements and structural metadata, such as length, during the hashing process. Used to generate reliable hash values for complex structures like lists and variants, preventing collisions that arise from structural similarity.",
      "description_length": 458,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.PacketSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on data structures representing named entities, such as identifiers or labeled values. Used to validate hierarchical relationships and ensure consistency in configuration or schema definitions.",
      "description_length": 302,
      "index": 117,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.PacketSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to parse structured data from S-expressions into domain-specific types during deserialization.",
      "description_length": 270,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.HeadersValues.Fields.Direct",
      "description": "Provides operations to iterate over, fold, check conditions, convert to lists, transform, and update mutable fields of a packet representation. Works with packet metadata including Ethernet addresses, VLAN tags, IP information, and port numbers. Used to process and modify network packet data in a structured, field-specific manner.",
      "description_length": 332,
      "index": 119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Global_compiler.FDD.BinTbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Operates on S-expression data structures generated by ppx_sexp_conv. Used to deserialize structured data from S-expressions into a specific key type for lookup or indexing purposes.",
      "description_length": 256,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Global_compiler.FDD.BinTbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific type using Bin_prot, providing size calculation, writing, reading, and shape information. Operates on a custom type defined as `key` with strict binary format adherence. Used to encode and decode instances of `key` in binary format for storage or communication.",
      "description_length": 317,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Global_compiler.FDD.Tbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key by parsing and validating its structure. Works with S-expression data from the Ppx_sexp_conv_lib library. Used to deserialize structured data into a specific key type for lookup or comparison operations.",
      "description_length": 239,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Global_compiler.FDD.Tbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific type using Bin_prot, providing size calculation, writing, reading, and shape information. Operates on a custom type defined by the module's type definition. Used to persist or transmit data structures efficiently in binary format.",
      "description_length": 286,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Local_compiler.FDD.BinTbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Works with the Sexp.t type and a specific key type defined in the context. Used to deserialize structured data from S-expressions into a keyed representation for lookup or indexing.",
      "description_length": 256,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Local_compiler.FDD.BinTbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific key type using Bin_prot, including size calculation, writing, reading, and shape information. Operates on custom data types that conform to Bin_prot's type class requirements. Used to persist and reconstruct key values in binary format for storage or communication.",
      "description_length": 321,
      "index": 125,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Local_compiler.FDD.Tbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Works with the Sexp.t type and a specific key type defined elsewhere. Used to deserialize structured data from S-expressions into a keyed representation for lookup or indexing.",
      "description_length": 251,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Local_compiler.FDD.Tbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific type using Bin_prot, providing size calculation, writing, reading, and shape information. Operates on a custom type defined as `key` with strict binary format requirements. Used to persist and reconstruct instances of `key` in binary form for storage or communication.",
      "description_length": 324,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.FDD.BinTbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key by parsing and validating its structure. Works with S-expression data generated from OCaml values using ppx_sexp_conv. Used to deserialize structured data from external sources into a typed key representation.",
      "description_length": 245,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.FDD.BinTbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific type using Bin_prot, providing size calculation, writing, reading, and shape information. Operates on a custom type defined as `key` with strict binary format guarantees. Used to persist and reconstruct instances of `key` in binary form for storage or communication.",
      "description_length": 322,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.FDD.Tbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Operates on S-expression data structures generated by ppx_sexp_conv. Used to deserialize structured data from S-expressions into a specific key type for lookup or indexing purposes.",
      "description_length": 256,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.FDD.Tbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific type using Bin_prot, providing size calculation, writing, reading, and shape information. Operates on a custom type defined as `key` with strict binary format adherence. Used to encode and decode data structures in binary form for storage or transmission.",
      "description_length": 311,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Seq.Key",
      "description": "Converts between a custom type representing fields or containers and S-expression data structures, and provides a comparator for ordered operations. Works with the `t` type, which encapsulates either a field or a continuation. Used to serialize and compare internal representation in parsing and evaluation contexts.",
      "description_length": 316,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Seq.Tree",
      "description": "Converts S-expressions into key types using a custom parser, enabling structured data to be represented as comparable values. The key type supports operations like equality checks and ordering, facilitating efficient lookups. It allows for parsing and manipulating tree-like data structures in a typed, predictable manner. For example, it can transform a nested S-expression into a key for use in a map or set.",
      "description_length": 410,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Seq.Provide_of_sexp",
      "description": "Converts an S-expression into a key type using a custom parsing function. Operates on S-expression data structures and the Key module's type. Used to deserialize structured data from S-expressions into key representations for lookup or comparison.",
      "description_length": 247,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Seq.Provide_bin_io",
      "description": "Provides functions to serialize and deserialize values of type Key.t using Bin_prot, including size calculation, writing, reading, and shape definition. Works with Key.t and polymorphic variants of Key.t when necessary. Used to persist and reconstruct key data structures in binary format for storage or communication.",
      "description_length": 318,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Seq.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance and consistency with comparison. It operates on custom data types, particularly those defined with `Key.t`, and enforces proper handling of collections by incorporating their size before element-wise folding. Used to generate reliable hash values for complex structures in hashing-based data structures like hash tables.",
      "description_length": 451,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Par.Elt",
      "description": "Converts between a sequence of values and S-expression representations, enabling serialization and deserialization. Operates on sequences of values wrapped in a custom type. Used to persist and reconstruct value sequences in a structured, human-readable format.",
      "description_length": 261,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Par.Tree",
      "description": "Provides operations for validating hierarchical relationships between named entities and converting S-expressions into domain-specific types. It supports subset checks, equality comparisons, and deserialization using custom conversion functions. Named entities are represented as identifiers or labeled values, while deserialization targets the `Elt.t` type. Examples include verifying that a configuration subset adheres to a schema or parsing structured data into typed representations.",
      "description_length": 488,
      "index": 138,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Par.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. Operates on structured data with unique identifiers and hierarchical relationships. Used to validate configuration consistency and ensure data integrity in system modeling.",
      "description_length": 326,
      "index": 139,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Par.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on `Ppx_sexp_conv_lib.Sexp.t` values to produce instances of `Elt.t`. Used to deserialize structured data from S-expression format into a domain-specific type.",
      "description_length": 258,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Par.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based reading. Used to encode and decode instances of `t` in binary format for storage or communication.",
      "description_length": 346,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Par.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance and consistency with comparison. Works with custom data types and collections, requiring explicit handling of structure size during folding. Used to generate reliable hash values for complex types in hashing-based data structures.",
      "description_length": 361,
      "index": 142,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Vlr.Make.BinTbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key by parsing and extracting the underlying value. Works with the `Ppx_sexp_conv_lib.Sexp.t` type, which represents S-expression data. Used to transform serialized data into a usable key format for lookups or comparisons.",
      "description_length": 254,
      "index": 143,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Vlr.Make.BinTbl.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing values of a specific type using the Bin_prot library, including size calculation, writing, reading, and shape information. Works with custom types that need to be encoded in a binary format suitable for persistence or communication. Used to enable binary serialization of a type for storage in files or transmission over networks.",
      "description_length": 383,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Vlr.Make.Tbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Works with the Sexp.t type from the Ppx_sexp_conv_lib library. Used to deserialize structured data from S-expressions into a specific key format for lookup or indexing.",
      "description_length": 243,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Vlr.Make.Tbl.Provide_bin_io",
      "description": "Provides functions to serialize and deserialize a specific type using Bin_prot, including size calculation, writing, reading, and shape information. Works with custom types that require binary encoding and decoding, particularly those involving polymorphic variants. Enables efficient storage and transmission of structured data in binary format.",
      "description_length": 346,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexHash.Provide_of_sexp",
      "description": "Converts an S-expression into a key by parsing and extracting the underlying value. Works with the `Ppx_sexp_conv_lib.Sexp.t` type, which represents S-expression data. Used to transform serialized data from S-expressions into a usable key format for lookups or comparisons.",
      "description_length": 273,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexHash.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing a specific type using Bin_prot, including size calculation, writing, reading, and shape information. Works with custom types that require binary I/O support, including polymorphic variants. Used to enable efficient binary persistence of data structures in applications needing fast serialization.",
      "description_length": 349,
      "index": 148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.EdgeSet.Elt",
      "description": "Converts between a custom edge type and S-expression representations, and provides a comparator for ordered operations. Works with the `edge` data type and its associated comparator witness. Used to serialize and deserialize edge structures and enable ordered comparisons in data structures.",
      "description_length": 291,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.EdgeSet.Tree",
      "description": "Provides operations to validate hierarchical relationships between structured named entities and convert S-expressions into custom types. Supports subset checks, equality verification, and deserialization using user-defined conversion functions. Named entities and `Elt.t` instances are central data types, enabling validation and data transformation workflows. For example, it can ensure a configuration tree adheres to a defined schema or parse and structure textual configuration data.",
      "description_length": 488,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.EdgeSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, both returning error results on failure. Operates on custom named types representing structured data with identifiers. Used to validate hierarchical relationships and ensure consistency in data models.",
      "description_length": 301,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.EdgeSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text input. Used to deserialize structured data from S-expression format into application-specific types.",
      "description_length": 233,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.EdgeSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based reading. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 342,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.EdgeSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a data structure into a hash state, ensuring full traversal and collision resistance. Operates on custom data types through a `hash_fold_t` function that incorporates element values and structural information like size. Used to generate consistent, collision-resistant hash values for complex types in serialization and comparison contexts.",
      "description_length": 406,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.PortSet.Elt",
      "description": "Converts between a custom type and S-expression representations, and provides a comparator for ordered operations. Works with a type alias for port and an associated comparator witness. Used to enable serialization and ordered comparisons in systems requiring protocol-specific data handling.",
      "description_length": 292,
      "index": 155,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.PortSet.Tree",
      "description": "Validates hierarchical relationships between structured named entities and ensures data consistency through subset and equality checks, while also converting S-expressions into custom types using user-defined functions. The core data types include named entities and the custom `Elt.t` type, with operations for validation and deserialization. For example, it can verify that a configuration subtree matches an expected structure or parse a textual S-expression into a typed representation. These capabilities support robust data handling in systems requiring strict schema enforcement and structured input processing.",
      "description_length": 618,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.PortSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. Operates on structured data with unique identifiers and hierarchical relationships. Used to validate configuration consistency and ensure data integrity in domain-specific models.",
      "description_length": 333,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.PortSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text and transforms them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 265,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.PortSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a specific type `Elt.t` and its polymorphic variants when necessary. Used to persist and reconstruct instances of `Elt.t` in binary format for storage or communication.",
      "description_length": 330,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.PortSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Operates on custom data types defined with `Elt.t`, preserving equality-based hash consistency. Used to generate reliable hash values for complex types in hash tables and serialization, preventing collision patterns that arise from naive folding.",
      "description_length": 446,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexSet.Elt",
      "description": "Converts between a custom vertex type and S-expression representations, and provides a comparator for ordered operations. Works with the `vertex` type and its associated comparator witness. Used to serialize and compare vertex data in structured formats.",
      "description_length": 254,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexSet.Tree",
      "description": "Validates hierarchical relationships between structured named entities and checks for equality, with error reporting for inconsistencies. Parses S-expressions into domain-specific types using a custom conversion function, enabling structured data serialization. Supports operations like subset verification, equality checks, and type conversion. Can ensure configuration consistency or transform parsed data into application-specific representations.",
      "description_length": 450,
      "index": 162,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexSet.Named",
      "description": "Checks whether one named entity is a subset of another and verifies equality between two named entities, both returning error results on failure. Operates on custom named types that represent entities with identifiers. Used to validate hierarchical relationships and ensure consistency in data models.",
      "description_length": 301,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text and transforms them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 265,
      "index": 164,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a specific type `Elt.t` and its polymorphic variant form when required. Used to persist and reconstruct instances of `Elt.t` in binary format, such as saving configuration states or transmitting data over networks.",
      "description_length": 376,
      "index": 165,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Works with custom data types defined using the `Elt` module, enabling consistent hashing for complex, nested structures. Used to generate reliable hash values for persistent data structures, ensuring that equivalent structures produce identical hashes regardless of internal representation.",
      "description_length": 490,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Seq.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a key type using a custom parsing function. Works with S-expressions and a specific key data structure. Used to deserialize configuration keys from textual S-expression formats.",
      "description_length": 207,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Par.Tree.Named",
      "description": "Checks whether one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. Operates on structured data where each element has an associated name and value. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 339,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Par.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text and transforms them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 265,
      "index": 169,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexHash.Provide_of_sexp",
      "description": "Converts an S-expression into a key by parsing and validating its structure. Works with S-expression data from the Ppx_sexp_conv_lib library. Used to deserialize structured data into a specific key type for lookup or comparison operations.",
      "description_length": 239,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexHash.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing a specific type using Bin_prot, including size calculation, writing, reading, and shape information. Works with custom types that require binary I/O support, including polymorphic variants. Used to enable efficient binary persistence of data structures in applications needing fast serialization.",
      "description_length": 349,
      "index": 171,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.EdgeSet.Elt",
      "description": "Converts between a custom edge type and S-expression representations, and provides a comparator for ordered operations. Works with the `edge` type and its associated comparator witness. Used to serialize and deserialize edge data and enable sorted collections of edges.",
      "description_length": 269,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.EdgeSet.Tree",
      "description": "Validates hierarchical relationships between structured named entities by checking subset and equality conditions, with error reporting for inconsistencies. Transforms parsed S-expressions into a custom type using a user-defined conversion function, enabling runtime deserialization of configuration data. Operations include subset verification, equality checks, and type conversion. For example, it can ensure a child configuration fully complies with a parent schema or convert a textual representation into a typed data structure for processing.",
      "description_length": 548,
      "index": 173,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.EdgeSet.Named",
      "description": "Checks whether one named entity is a subset of another and verifies equality between two named entities, both returning error results on failure. Works with named entities represented as structured data types containing identifiers and attributes. Used to validate hierarchical relationships and ensure consistency in configuration models.",
      "description_length": 339,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.EdgeSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided constructor. It operates on S-expressions parsed from text and is used to deserialize structured data into domain-specific objects. This enables direct mapping of sexp representations to internal data models in parsing workflows.",
      "description_length": 298,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.EdgeSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a user-defined type `Elt.t` and its polymorphic variants when necessary. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 320,
      "index": 176,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.EdgeSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Works with custom data types and collections, using a deterministic and secure hashing strategy. Used to generate consistent, collision-resistant hash values for complex types in serialization and equality checks.",
      "description_length": 411,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.PortSet.Elt",
      "description": "Converts between a custom type representing a port and S-expression format, and provides a comparator for ordered operations. Works with the `t` type, which is an alias for `port`, and the associated `comparator_witness` for type-safe comparisons. Used to serialize and deserialize port data and enable ordered comparisons in data structures.",
      "description_length": 342,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.PortSet.Tree",
      "description": "Validates hierarchical relationships between structured named entities, checking subset and equality conditions with error reporting. Parses S-expressions into domain-specific types using a custom conversion function, enabling structured data deserialization. Supports operations like verifying configuration consistency and transforming serialized data into typed representations. Examples include ensuring a child configuration is a subset of a parent or converting S-expressions into custom data models for processing.",
      "description_length": 521,
      "index": 179,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.PortSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.PortSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expressions parsed from text and transforms them into structured data. This is used to deserialize configuration data into a domain-specific type during parsing.",
      "description_length": 268,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.PortSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based decoding. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 343,
      "index": 182,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.PortSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Works with custom data types defined using the `Elt` module, supporting recursive and nested structures. Used to generate consistent and unique hash values for complex types in hashing-based data structures like hash tables.",
      "description_length": 422,
      "index": 183,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexSet.Elt",
      "description": "Provides serialization and deserialization between S-expressions and a vertex type, along with a comparator for ordered operations. Works with the `t` type, which represents a vertex, and the `comparator_witness` type for type-safe comparisons. Used to enable persistent storage and ordered data handling in graph-related computations.",
      "description_length": 335,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexSet.Tree",
      "description": "Provides operations for validating hierarchical relationships between named entities and converting S-expressions into structured types. It includes subset and equality checks for the `named` type and a deserialization function for transforming S-expressions into `Elt.t`. These capabilities enable consistent data validation and flexible data parsing. For example, it can verify that a child entity is a subset of a parent or parse configuration data from a textual representation.",
      "description_length": 482,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 186,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text input, transforming them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 270,
      "index": 187,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, and reading operations. Works with custom types that have a defined `Elt.t` structure and supports polymorphic variants through a tag-based reader. Used to persist and reconstruct complex data structures in binary format for storage or communication.",
      "description_length": 368,
      "index": 188,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a data structure into a hash state, ensuring collision resistance and consistency with comparison. Works with custom data types and collections, requiring explicit handling of structure size during folding. Used to generate reliable hash values for complex types in hashing-based data structures.",
      "description_length": 362,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.EdgeSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on data structures representing named entities, such as identifiers or labeled values. Used to validate hierarchical relationships and ensure consistency in named data during configuration checks or data validation workflows.",
      "description_length": 334,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.EdgeSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on `Ppx_sexp_conv_lib.Sexp.t` values to produce instances of `Elt.t`. Used to deserialize structured data from S-expression format into a domain-specific type.",
      "description_length": 258,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.PortSet.Tree.Named",
      "description": "Checks whether one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. Operates on structured data with unique identifiers and hierarchical relationships. Used to validate configuration consistency and ensure data integrity in domain-specific models.",
      "description_length": 338,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.PortSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on `Ppx_sexp_conv_lib.Sexp.t` values to produce instances of `Elt.t`. Used to deserialize structured data from S-expression format into a domain-specific type.",
      "description_length": 258,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 194,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to deserialize structured data from S-expressions into domain-specific types during parsing.",
      "description_length": 268,
      "index": 195,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexHash.Provide_of_sexp",
      "description": "Converts an S-expression into a key by parsing and extracting the underlying value. Works with S-expression data structures generated by ppx_sexp_conv. Used to deserialize structured data from S-expressions into a specific key type for lookup or comparison.",
      "description_length": 257,
      "index": 196,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexHash.Provide_bin_io",
      "description": "Provides functions to serialize and deserialize a specific type using Bin_prot, including size calculation, writing, reading, and shape information. Works with custom types that require binary I/O support, including polymorphic variants. Enables efficient binary encoding for data persistence or network transmission.",
      "description_length": 317,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.EdgeSet.Elt",
      "description": "Converts between a custom edge type and S-expression representations, and provides a comparator for ordered operations. Works with the `edge` data type and its associated comparator witness. Used to serialize and deserialize edge structures and enable sorted collections of edges.",
      "description_length": 280,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.EdgeSet.Tree",
      "description": "Provides operations to check subset and equality relationships between named entities and to convert S-expressions into custom types. It handles data structures like identifiers and labeled values, enabling validation of hierarchical data and deserialization of structured input. Users can verify consistency in configuration data and transform parsed S-expressions into application-specific representations. For example, it can ensure a subtree matches a defined schema or convert a serialized record into a typed variant.",
      "description_length": 523,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.EdgeSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on data structures representing named entities, such as identifiers or labeled values. Used to validate hierarchical relationships and ensure consistency in named data during configuration checks or data validation workflows.",
      "description_length": 334,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.EdgeSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expression data structures generated by the ppx_sexp_conv library. This is used to deserialize structured data from S-expressions into domain-specific types during parsing.",
      "description_length": 279,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.EdgeSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape definition. Operates on a type `t` that is parameterized by `Elt.t`, supporting polymorphic variants through a constructor tag reader. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 357,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.EdgeSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Works with custom data types defined using the `Elt` module, supporting recursive and nested structures. Used to generate consistent and unique hash values for complex types in hash tables and serialization workflows.",
      "description_length": 417,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.PortSet.Elt",
      "description": "Converts between a custom type representing a port and S-expression format, and provides a comparator for ordered operations. Works with the `t` type, which is an alias for `port`, and the `comparator_witness` type for type-safe comparisons. Used to serialize port data for parsing and to enable sorted collections of ports.",
      "description_length": 324,
      "index": 204,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.PortSet.Tree",
      "description": "Provides operations to compare and validate named entities, and to convert S-expressions into domain-specific types. Supports subset checks, equality verification, and custom type conversion via S-expression parsing. Named entities are represented with identifiers and hierarchical relationships, while S-expressions are transformed into structured `Elt.t` values. Can ensure entity consistency in data models and enable seamless serialization between formats.",
      "description_length": 460,
      "index": 205,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.PortSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, both returning error results on failure. Operates on values of the `named` type, which encapsulate identifiers with associated metadata. Used to validate hierarchical relationships and exact matches in configuration or data modeling scenarios.",
      "description_length": 343,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.PortSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to deserialize structured data from S-expressions into domain-specific types during parsing.",
      "description_length": 268,
      "index": 207,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.PortSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a user-defined type `Elt.t` and its polymorphic variants when necessary. Enables efficient storage and retrieval of structured data in binary format.",
      "description_length": 311,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.PortSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance and consistency with comparison. Works with custom data types and collections, requiring explicit handling of structure size during folding. Used to generate reliable hash values for complex types in hashing-based data structures.",
      "description_length": 361,
      "index": 209,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexSet.Elt",
      "description": "Provides serialization and deserialization between S-expressions and a vertex type, along with a comparator for ordered operations. Works with the `t` type, which represents a vertex, and its associated comparator witness. Used to enable persistent storage and ordered comparisons of vertex entities in graph-related data structures.",
      "description_length": 333,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexSet.Tree",
      "description": "Validates hierarchical relationships between structured named entities by checking subset and equality conditions, with error reporting for inconsistencies. Parses S-expressions into domain-specific types using a custom conversion function, enabling structured data deserialization. Operations include subset verification, equality checks, and S-expression to custom type conversion. For example, it ensures a configuration subtree adheres to a defined schema or transforms serialized data into executable model elements.",
      "description_length": 521,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. Operates on structured data with unique identifiers and hierarchical relationships. Used to validate configuration overlaps and ensure consistency in data models.",
      "description_length": 316,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expressions parsed from text and transforms them into structured data. This is used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 276,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a user-defined type `Elt.t` and its polymorphic variants when necessary. Enables efficient storage and transmission of structured data in binary format.",
      "description_length": 314,
      "index": 214,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Operates on custom data types defined with `Elt.t`, supporting recursive and composite structures. Used to generate consistent, collision-resistant hash values for complex types in serialization and equality checks.",
      "description_length": 413,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexHash.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Operates on S-expression data structures generated by ppx_sexp_conv. Used to deserialize structured data from S-expressions into a specific key type for lookup or indexing purposes.",
      "description_length": 256,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexHash.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing values of a specific type using the Bin_prot library, including size calculation, writing, and reading operations. Works with custom types that require binary I/O support, including polymorphic variants through a constructor tag reader. Used to enable efficient binary persistence of data structures in applications requiring fast serialization.",
      "description_length": 398,
      "index": 217,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.EdgeSet.Elt",
      "description": "Converts between a custom edge type and S-expression representations, and provides a comparator for ordered operations. Works with the `edge` data type and its associated comparator witness. Used to serialize and compare edge structures in data serialization and sorting contexts.",
      "description_length": 280,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.EdgeSet.Tree",
      "description": "Validates hierarchical relationships and equality between named entities using identifier-based data structures, ensuring consistency in configuration models. Transforms S-expression data into custom `Elt.t` types via a user-defined conversion function, enabling structured data deserialization. Operations include subset checks, equality verification, and S-expression parsing. Examples include validating parent-child relationships in a model and converting configuration files into typed representations.",
      "description_length": 507,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.EdgeSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on data structures representing named entities, such as identifiers or labeled values. Used to validate hierarchical relationships and ensure consistency in configuration or schema definitions.",
      "description_length": 302,
      "index": 220,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.EdgeSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to parse structured data from S-expressions into domain-specific types during deserialization.",
      "description_length": 270,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.EdgeSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based decoding. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 343,
      "index": 222,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.EdgeSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Works with custom data types defined using the `Elt` module, supporting recursive and nested structures. Used to generate consistent and unique hash values for complex types in hash tables and serialization workflows.",
      "description_length": 417,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.PortSet.Elt",
      "description": "Converts between a custom type and S-expression representations, and provides a comparator for ordered operations. Works with a port type and its associated comparator witness. Used to serialize and compare port values in data structures.",
      "description_length": 238,
      "index": 224,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.PortSet.Tree",
      "description": "Verifies subset and equality relationships between named entities, and deserializes S-expressions into custom types. Operates on hierarchical data structures and parsed text inputs, enabling validation and transformation workflows. Supports checks like determining if a configuration fragment is contained within a larger schema, and converting raw input into typed representations. Provides functions for comparing entity hierarchies and mapping S-expression data to application-specific models.",
      "description_length": 496,
      "index": 225,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.PortSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 226,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.PortSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text and transforms them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 265,
      "index": 227,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.PortSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based reading. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 342,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.PortSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance and consistency with comparison. Works with custom data types through a fold-based approach that includes size information to prevent prefix collisions. Used to generate reliable hash values for complex structures like lists and variants during serialization or equality checks.",
      "description_length": 409,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexSet.Elt",
      "description": "Converts between a custom vertex type and S-expression representations, and provides a comparator for ordered operations. Works with the `vertex` type and its associated comparator witness. Used to serialize and compare vertex data in structured formats.",
      "description_length": 254,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexSet.Tree",
      "description": "Validates hierarchical relationships between structured named entities by checking subset and equality conditions, with error reporting for inconsistencies. Transforms S-expression data into custom `Elt.t` types using a user-defined conversion function, enabling structured data deserialization. Operations include verifying entity relationships and parsing external data formats. Examples include ensuring configuration consistency and converting serialized data into application-specific models.",
      "description_length": 497,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 232,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to parse structured data from S-expressions into domain-specific types during serialization workflows.",
      "description_length": 278,
      "index": 233,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting polymorphic variants through a constructor tag reader. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 358,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance and consistency with comparison. Works with custom data types through a fold-based approach, incorporating size information to prevent prefix-based collisions. Used to generate reliable hash values for complex structures like lists and variants during serialization or equality checks.",
      "description_length": 416,
      "index": 235,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexHash.Provide_of_sexp",
      "description": "Converts an S-expression into a key by parsing and validating its structure. Works with S-expression data generated from OCaml values using ppx_sexp_conv. Used to deserialize structured data from external sources into typed keys for lookup or processing.",
      "description_length": 254,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexHash.Provide_bin_io",
      "description": "Provides functions to serialize and deserialize a specific type using Bin_prot, including size calculation, writing, reading, and shape information. Works with custom types that require binary encoding, supporting polymorphic variants through a constructor tag reader. Used to enable efficient binary persistence and network transmission of structured data.",
      "description_length": 357,
      "index": 237,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.EdgeSet.Elt",
      "description": "Provides serialization and deserialization between `t` and S-expressions, along with a comparator for ordered operations. Works with the `t` type, which represents an edge, and the `comparator_witness` for type-safe comparisons. Used to enable persistent storage and ordered processing of edge data in graph-related algorithms.",
      "description_length": 327,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.EdgeSet.Tree",
      "description": "Verifies subset and equality relationships between structured named entities, returning errors when checks fail, and converts S-expressions into domain-specific types using custom parsing functions. It handles hierarchical validation and data deserialization, working with identifiers, attributes, and custom type representations. Operations include checking inclusion, comparing entities, and transforming S-expressions into typed values. For example, it can ensure a configuration subtree adheres to a defined schema or parse a serialized data structure into an in-memory representation.",
      "description_length": 589,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.EdgeSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 240,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.EdgeSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to parse structured data from S-expressions into domain-specific types during serialization workflows.",
      "description_length": 278,
      "index": 241,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.EdgeSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a user-defined type `Elt.t` and its polymorphic variants when applicable. Enables efficient storage and retrieval of structured data in binary format.",
      "description_length": 312,
      "index": 242,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.EdgeSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Operates on custom types defined with `Elt.t`, applying a deterministic and collision-avoiding hashing strategy. Used to generate consistent and unique hash values for complex data structures in contexts requiring reliable hashing, such as custom hash tables or serialization.",
      "description_length": 476,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.PortSet.Elt",
      "description": "Converts between a custom type and S-expression representations, and provides a comparator for ordered operations. Works with a type alias for port and an associated comparator witness. Used to enable serialization and ordered comparisons in systems requiring protocol-specific data handling.",
      "description_length": 292,
      "index": 244,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.PortSet.Tree",
      "description": "Provides operations to validate hierarchical relationships between structured named entities and convert S-expressions into domain-specific types. Supports subset checks, equality verification, and deserialization using custom conversion functions. Named entities are represented as structured data, and S-expressions are transformed into `Elt.t` values. Can ensure configuration consistency or parse complex data models from textual representations.",
      "description_length": 450,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.PortSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 246,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.PortSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to parse structured data from S-expressions into domain-specific types during deserialization.",
      "description_length": 270,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.PortSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a specific type `t` defined by `Elt`, supporting both direct and variant-based reading. Used to persist and reconstruct instances of `t` in binary format for storage or communication.",
      "description_length": 345,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.PortSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Operates on custom data types defined with `Elt.t`, supporting recursive and composite structures. Used to generate consistent, collision-resistant hash values for complex types in serialization and equality checks.",
      "description_length": 413,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexSet.Elt",
      "description": "Provides serialization and deserialization between a vertex type and S-expressions, along with a comparator for ordered operations. Works with the `vertex` data type and its associated comparator witness. Used to enable persistent storage and ordered comparisons of graph nodes.",
      "description_length": 278,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexSet.Tree",
      "description": "Validates hierarchical relationships between structured named entities by checking subset and equality conditions, with error reporting for inconsistencies. Transforms S-expression data into custom types using a provided conversion function, enabling seamless deserialization. Operations include validation checks and data conversion, supporting tasks like configuration verification and data parsing. For example, it can ensure a child configuration fully complies with a parent schema or convert serialized data into application-specific representations.",
      "description_length": 556,
      "index": 251,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 286,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on `Ppx_sexp_conv_lib.Sexp.t` values to produce instances of `Elt.t`. Used to deserialize structured data from S-expression format into a domain-specific type.",
      "description_length": 258,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a specific type `Elt.t` and its polymorphic variant form when needed. Used to persist and reconstruct instances of `Elt.t` in binary format for storage or communication.",
      "description_length": 331,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance and consistency with comparison. Works with custom data types and collections, incorporating size information to prevent prefix-based collisions. Used to generate reliable hash values for complex structures in serialization and equality checks.",
      "description_length": 375,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.UnitWeight",
      "description": "Provides operations to convert between a weight type (int) and S-expressions, compare weights, and perform addition. Works with edge data structures and their associated weights. Used to serialize and manipulate edge weights in graph processing tasks.",
      "description_length": 251,
      "index": 256,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.EdgeSet",
      "description": "handles conversion between custom edge representations and S-expressions, with support for ordered operations and validation of named entities. It includes functions to compare, check subset relationships, and convert S-expressions into typed domain objects like `Elt.t`, enabling tasks such as configuration validation and data parsing. Binary serialization via Bin_prot and hash folding for structured types allow efficient storage and unique identification of complex data. Examples include serializing edge data for storage, verifying schema consistency, and generating hashes for list-based configurations.",
      "description_length": 611,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexSet",
      "description": "Converts between custom vertex types and S-expressions, enabling serialization, comparison, and structured data manipulation. Supports subset checks, equality validation, and deserialization of named entities and custom types, with binary serialization and hash folding for persistence and integrity. Operations include verifying configuration consistency, transforming textual data into typed representations, and generating unique hashes for complex structures. Examples include validating hierarchical relationships, parsing S-expressions into domain-specific types, and persisting data in binary format.",
      "description_length": 607,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.VertexHash",
      "description": "Converts S-expressions into keyed values using a custom parser, enabling structured data to be indexed or looked up by a specific key type. Supports binary serialization and deserialization of custom types with Bin_prot, including size estimation and variant-aware reading. Operations include parsing S-expressions, writing binary data, and reading from binary streams. Examples include converting configuration data into a lookup table and persisting complex data structures to disk efficiently.",
      "description_length": 496,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Topology.PortSet",
      "description": "Converts port values to and from S-expressions with ordered comparison, validates hierarchical relationships between named entities, and ensures data consistency through subset and equality checks. Parses S-expressions into custom types using conversion functions and supports binary serialization for parameterized types. Generates collision-resistant hashes for structured data by incorporating size and element-wise folding. For example, it can verify configuration validity, transform parsed data into domain-specific models, and persist complex structures efficiently.",
      "description_length": 573,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexHash.Provide_of_sexp",
      "description": "Converts an S-expression into a key using a custom type transformation. Works with S-expression data structures and the key type defined in the module. Used to parse and validate structured data from S-expressions into a specific key format.",
      "description_length": 241,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexHash.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing a specific type using Bin_prot, including size calculation, writing, reading, and shape information. Works with custom types that require binary I/O support, particularly those involving polymorphic variants. Used to enable efficient binary persistence of data structures in applications like network protocols or file storage.",
      "description_length": 380,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.EdgeSet.Elt",
      "description": "Converts between a custom edge type and S-expression representations, and provides a comparator for ordered operations. Works with the `edge` data type and comparator witness for type-safe comparisons. Used to serialize and deserialize edge structures and enable sorted collections.",
      "description_length": 282,
      "index": 263,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Topology.EdgeSet.Tree",
      "description": "Provides operations to validate hierarchical relationships between structured named entities and convert S-expressions into domain-specific types. Supports subset checks, equality verification, and custom deserialization. Named entities are represented as structured data, and S-expressions are transformed using user-defined conversion functions. Examples include ensuring configuration consistency and parsing textual data into typed representations.",
      "description_length": 452,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.EdgeSet.Named",
      "description": "Checks whether one named entity is a subset of another and verifies equality between two named entities, using custom data types that represent named objects. The operations return error-tolerant results, ensuring validation during comparisons. Used to enforce constraints in configuration validation and data consistency checks.",
      "description_length": 329,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.EdgeSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expression data structures generated by the ppx_sexp_conv library. This is used to deserialize structured data from S-expressions into domain-specific types during parsing.",
      "description_length": 279,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.EdgeSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based decoding. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 343,
      "index": 267,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Topology.EdgeSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a data structure into a hash state, ensuring collision resistance and consistency with comparison. Operates on custom data types through a dedicated hash_fold_t function, which incorporates the structure's size and elements in a way that prevents prefix-based collisions. Used to generate reliable hash values for complex types in scenarios requiring deterministic and collision-free hashing.",
      "description_length": 458,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.PortSet.Elt",
      "description": "Provides serialization and deserialization between a port type and S-expressions, along with a comparator for ordered operations. Works with the `port` data type and its associated comparator witness. Used to enable persistent storage and ordered comparisons of port values.",
      "description_length": 274,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.PortSet.Tree",
      "description": "Provides operations to validate hierarchical relationships between structured named entities and convert S-expressions into domain-specific types. It includes checks for subset and equality relations on entities with identifiers and metadata, and supports deserialization of S-expressions into custom types using a conversion function. Users can ensure data consistency in configurations and parse structured data into typed representations. For example, it can verify that a child entity is a subset of a parent or transform an S-expression into a custom `Elt.t` value.",
      "description_length": 570,
      "index": 270,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Topology.PortSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 271,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Topology.PortSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided constructor. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to deserialize structured data from S-expressions into domain-specific values.",
      "description_length": 246,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.PortSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based reading. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 342,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.PortSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance and consistency with comparison. Works with custom data types and collections, incorporating size information to prevent prefix-based collisions. Used to generate reliable hash values for complex structures in hashing and equality checks.",
      "description_length": 369,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexSet.Elt",
      "description": "Provides serialization and deserialization between S-expressions and a vertex type, along with a comparator for ordered operations. Works with the `t` type, which represents a vertex, and its associated comparator witness. Used to enable persistent storage and ordered comparisons of vertex data in graph-related computations.",
      "description_length": 326,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexSet.Tree",
      "description": "Validates relationships between named entities through subset and equality checks, using structured data with unique identifiers and hierarchies. Parses S-expressions into custom types using a provided constructor, enabling conversion from symbolic expressions to domain-specific representations. Supports configuration validation and data transformation tasks. Can verify that a configuration subset matches a parent structure or convert parsed S-expressions into typed objects for further processing.",
      "description_length": 502,
      "index": 276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration models.",
      "description_length": 284,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text input. Used to deserialize structured data from S-expression format into application-specific types.",
      "description_length": 233,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based decoding. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 343,
      "index": 279,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance and consistency with comparison. Works with custom data types through a fold-based approach that includes size information to prevent prefix collisions. Used to generate reliable hash values for complex structures like lists and variants during serialization or equality checks.",
      "description_length": 409,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.Vertex",
      "description": "Handles conversion of node representations between S-expressions, strings, and graph formats like DOT and GML. Processes attributes from DOT and GML files to construct node objects. Generates string outputs for visualization and configuration in network simulation tools.",
      "description_length": 271,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.Edge",
      "description": "Handles graph edges by converting them to and from S-expressions, comparing them, and generating string representations for visualization. Works with link data structures parsed from DOT and GML formats. Used to serialize edges for graph file output and to standardize edge comparisons in graph algorithms.",
      "description_length": 306,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.UnitWeight",
      "description": "Provides operations to convert between a weight type (int) and S-expressions, compare weights, add them, and retrieve weights from edges. Works with integers as weights and a custom edge type representing graph edges. Used to serialize and manipulate edge weights in graph processing tasks.",
      "description_length": 290,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.EdgeSet",
      "description": "Converts and validates structured named entities between S-expressions and custom types, enabling serialization, comparison, and subset checks. Supports binary serialization, hashing, and equality verification for complex data models. Performs deserialization of hierarchical data, ensuring validated relationships and consistent type representation. Examples include parsing configuration files, checking entity hierarchies, and generating collision-resistant hashes for data integrity.",
      "description_length": 487,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexSet",
      "description": "Encapsulates operations for handling named entities through serialization, comparison, and validation, supporting S-expression and binary formats. Manages type-safe comparisons, subset checks, and hash generation for structured data, enabling consistent and reliable data processing. Converts between textual and application-specific representations, allowing validation of hierarchical relationships and efficient storage. Supports tasks like checking entity containment, generating hash values for equality checks, and deserializing configuration data into custom types.",
      "description_length": 572,
      "index": 285,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.VertexHash",
      "description": "Converts S-expressions into a key type through a custom parser, enabling structured data to be indexed or looked up. Supports binary serialization and deserialization of the same key type using Bin_prot, including size estimation and shape inspection. This allows for efficient storage and retrieval of data in applications requiring both textual and binary representations. For example, it can transform a parsed S-expression into a key for a hash table or write a key to a binary file for later reconstruction.",
      "description_length": 512,
      "index": 286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology.PortSet",
      "description": "Converts between custom types and S-expressions, with support for validation, comparison, and hierarchical checks on named entities. Provides deserialization into `Elt.t`, binary serialization via Bin_prot, and hash folding for structured data. Operations include subset verification, equality checks, and transformation of textual configurations into typed representations. Enables efficient data handling, from parsing and validation to persistence and hashing.",
      "description_length": 463,
      "index": 287,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.PortDescription.PortState.StpState",
      "description": "Converts between 32-bit integers and a custom state representation, with string serialization. Operates on Core.Int32.t and a private stpState type. Used to encode and decode state identifiers in protocol interactions.",
      "description_length": 218,
      "index": 288,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.Vertex",
      "description": "Handles conversion of network node representations between S-expressions, strings, and graph formats like DOT and GML. Processes node attributes from DOT and GML files to construct node objects. Generates string representations suitable for visualization and configuration output.",
      "description_length": 280,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.Edge",
      "description": "Provides operations to convert between a link representation and S-expressions, compare links, and generate string representations for visualization. Works with link data structures derived from Frenetic_kernel.Net.Link.t. Used to parse graph descriptions in DOT and GML formats into link objects and serialize links for debugging or analysis.",
      "description_length": 343,
      "index": 290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.UnitWeight",
      "description": "Provides operations to convert between a weight type (int) and S-expressions, compare weights, add weights, and retrieve weights from edges. Works with integers as weights and edge structures from the Edge module. Used to serialize and deserialize edge weights, perform arithmetic on weights during graph processing, and ensure consistent ordering in sorted data structures.",
      "description_length": 374,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.EdgeSet",
      "description": "Converts between custom edge types and S-expressions, enabling serialization, comparison, and ordered operations on edges. Validates hierarchical relationships between named entities, checks subset and equality conditions, and deserializes structured data into domain-specific types. Supports binary serialization with Bin_prot for efficient persistence and reconstruction of parameterized data types. Enables tasks like verifying configuration consistency, parsing complex data, and generating collision-resistant hashes for structured data.",
      "description_length": 542,
      "index": 292,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexSet",
      "description": "Combines S-expression and binary serialization, validation, and hashing for structured data, enabling storage, comparison, and transformation of named entities. It supports operations like subset checks, equality verification, and conversion between raw S-expressions and typed representations such as Elt.t. Functions include deserializing configuration data, validating hierarchical relationships, and generating collision-resistant hashes for complex structures. Examples include checking role access consistency or converting S-expressions into application-specific types for processing.",
      "description_length": 591,
      "index": 293,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.VertexHash",
      "description": "Parses and validates S-expressions into keys, enabling structured configuration deserialization, and supports binary serialization and deserialization of custom types with size tracking, writing, and reading functions. It handles polymorphic variants via constructor tags and ensures type-safe data conversion. Users can convert OCaml values to and from binary formats, and extract validated keys from textual configurations. This enables efficient data persistence and pipeline integration with both text and binary formats.",
      "description_length": 525,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology.PortSet",
      "description": "manages structured named entities with validation, conversion, and serialization capabilities. it handles operations like subset checks, equality verification, and S-expression to custom type conversion, using `Elt.t` and `t` types for typed data manipulation. it supports binary and s-expression serialization, along with hash generation for data integrity. examples include validating configuration hierarchies, parsing structured data, and ensuring consistent data representation across storage and computation.",
      "description_length": 514,
      "index": 295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.Hello.Element.VersionBitMap",
      "description": "Provides operations to calculate the size of a version bitmap, convert it to a string representation, and serialize/deserialize it from a Cstruct buffer. Works with a custom type `t` representing a list of supported OpenFlow versions. Used to encode and decode version information in network protocol messages according to OpenFlow 1.3.4.",
      "description_length": 338,
      "index": 296,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.PacketSet.Elt",
      "description": "Converts between a custom packet type and S-expression representations, and provides a comparator for ordered operations. Works with the `packet` type and its associated comparator witness. Used to serialize and deserialize packet data and enable sorted comparisons in data structures.",
      "description_length": 285,
      "index": 297,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.PacketSet.Tree",
      "description": "Provides operations to check subset and equality relationships between named entities and to convert S-expressions into domain-specific types. Works with named entities represented as identifiers or labeled values and with S-expressions parsed via ppx_sexp_conv. Enables validation of hierarchical structures and deserialization of structured data. For example, it can verify that a configuration subset adheres to a schema or transform an S-expression into a custom `Elt.t` for further processing.",
      "description_length": 498,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.PacketSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types containing identifiers and attributes. Used in validation workflows to ensure consistency between configuration objects and data models.",
      "description_length": 328,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.PacketSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. It operates on S-expressions parsed from text and transforms them into structured data. This is used to deserialize configuration data from a textual format into in-memory representations.",
      "description_length": 278,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.PacketSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting polymorphic variants through a tag-based reader. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 352,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.PacketSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a data structure into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Works with custom data types defined using the `Elt` module, supporting recursive and nested structures. Used to generate consistent, collision-resistant hash values for complex types in serialization and equality checks.",
      "description_length": 420,
      "index": 302,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.HeadersValues.Fields",
      "description": "manages packet data through field-specific operations, enabling iteration, transformation, and modification of network elements like Ethernet addresses and IP headers. It supports list conversion, condition checks, and folding over mutable fields within a packet structure. Operations include updating port numbers, extracting VLAN tags, and traversing metadata. Examples include filtering packets by IP address or rewriting Ethernet headers.",
      "description_length": 442,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Global_compiler.FDD.Tbl",
      "description": "Parses and validates S-expressions into a structured key type for efficient lookup, while also enabling binary serialization and deserialization of a custom data type with size tracking and format preservation. Operations include converting between S-expressions and keys, and encoding/decoding binary data. This supports data persistence, network transmission, and structured data comparison. For example, it can transform a serialized S-expression into a key for fast lookups or save a custom record to a binary file for later reconstruction.",
      "description_length": 544,
      "index": 304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Global_compiler.FDD.BinTbl",
      "description": "Converts S-expressions into a key type using a custom parser, enabling structured data to be indexed or looked up. Provides binary serialization and deserialization for the same key type, supporting efficient storage and transmission. Operations include size calculation, writing, reading, and shape inspection. This allows for seamless conversion between human-readable S-expressions and compact binary representations of the key type.",
      "description_length": 436,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Local_compiler.FDD.Tbl",
      "description": "Converts S-expressions into keyed structures using a custom parser, enabling structured data lookup, and supports binary serialization and deserialization of a `key` type with precise format handling, allowing for efficient storage and transmission. Operations include parsing, writing, reading, and determining size and shape of `key` values. This enables seamless data conversion between textual and binary formats for indexed data. For example, it can transform an S-expression representing a configuration into a lookup table and later save and reload that configuration in binary form.",
      "description_length": 590,
      "index": 306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Local_compiler.FDD.BinTbl",
      "description": "Converts S-expressions into keyed structures using a custom parser and supports binary serialization and deserialization of key types with Bin_prot, enabling efficient storage and retrieval. Operates on Sexp.t and custom key types, providing methods to calculate size, write, read, and describe data shapes. Allows for converting structured data into lookup-friendly formats and persisting key values in binary form. Examples include deserializing configuration data from S-expressions and storing keys in binary files for fast access.",
      "description_length": 535,
      "index": 307,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.FDD.Tbl",
      "description": "Encodes and decodes a custom `key` type using binary protocols, supporting size calculation, serialization, and deserialization. Parses S-expressions into `key` values using a dedicated conversion function, enabling structured data to be indexed or looked up. Operations include reading from and writing to binary streams, as well as converting between S-expressions and binary formats. This allows for efficient data storage, transmission, and structured data manipulation.",
      "description_length": 474,
      "index": 308,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.FDD.BinTbl",
      "description": "parses and validates S-expressions into typed key representations, then serializes and deserializes these keys using Bin_prot, ensuring strict binary compatibility. It supports operations like size calculation, writing to, and reading from binary buffers, as well as retrieving shape information. This enables efficient storage and transmission of structured data, such as converting an S-expression like `(A 1)` into a key and then encoding it as a binary blob. The module allows for round-trip conversion between S-expressions and binary formats while maintaining type safety and data integrity.",
      "description_length": 597,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Seq",
      "description": "Encapsulates S-expression parsing, serialization, and comparison for structured data, using a core type `t` that represents fields or continuations. Supports key-based operations through custom parsing and binary serialization, enabling efficient lookups, storage, and hashing of complex data. For example, it can convert a nested S-expression into a comparable key, serialize it to binary, and generate a hash for use in a hash table. Operations include parsing, comparison, binary I/O, and hash folding, all tailored for structured, typed data.",
      "description_length": 546,
      "index": 310,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action.Par",
      "description": "Encapsulates serialization, validation, and transformation of structured data between S-expressions and custom types, along with binary and hash-based operations. It handles sequences, hierarchical entities, and domain-specific conversions, supporting subset checks, equality, and deserialization into `Elt.t`. Operations include validating configuration schemas, converting S-expressions to typed representations, and generating hash values for complex data. Binary serialization enables efficient storage and transmission of parameterized types.",
      "description_length": 547,
      "index": 311,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Field.Env",
      "description": "Provides operations to create and manage a mapping between string identifiers and static FDD fields, including adding entries with initialization values and mutability flags, and looking up entries by key. Works with a custom type `t` representing the environment state. Used to track and retrieve meta field configurations during network policy construction.",
      "description_length": 359,
      "index": 312,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Vlr.Make.Tbl",
      "description": "Converts S-expressions into key-value pairs using a custom parser, enabling structured data to be indexed or looked up by specific keys. Supports binary serialization and deserialization of custom types, including size computation and shape inspection, for efficient data handling. Operations include parsing S-expressions, writing binary data, and reading binary structures back into values. Examples include converting configuration data from S-expressions into a searchable format and storing polymorphic variant types in binary for fast retrieval.",
      "description_length": 551,
      "index": 313,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Vlr.Make.BinTbl",
      "description": "parses S-expressions into key values for efficient lookups and serializes custom types into binary format for storage or transmission. It handles `Ppx_sexp_conv_lib.Sexp.t` for key extraction and supports Bin_prot operations like writing, reading, and size calculation. This enables converting structured data into searchable keys and binary-compatible representations. For example, it can transform a serialized configuration into a lookup key or encode a custom record for network transmission.",
      "description_length": 496,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Vlr.IntPairTbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Works with the Sexp.t type from the Ppx_sexp_conv_lib library. Used to deserialize structured data from S-expressions into a specific key format for lookup or indexing.",
      "description_length": 243,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Vlr.IntPairTbl.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing values of a specific type using the Bin_prot library, including size calculation, writing, reading, and shape information. Works with custom types that require binary I/O support, particularly those involving polymorphic variants. Used to enable efficient binary persistence of data structures in applications requiring fast serialization.",
      "description_length": 392,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.Vertex",
      "description": "Provides serialization and deserialization between a node type and S-expressions, along with comparison, string conversion, and graph format output. Works with node data structures used in graph representations. Used to convert node identifiers into formats suitable for visualization, configuration, and parsing from graph description languages.",
      "description_length": 346,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.Edge",
      "description": "Handles graph edges by converting them to and from S-expressions, comparing them, and generating string representations for visualization. Works with link data structures derived from graph formats like DOT and GML. Parses attributes from DOT syntax and GML values to construct edge representations.",
      "description_length": 299,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.UnitWeight",
      "description": "Provides operations to convert between a weight type (int) and S-expressions, compare weights, add them, and retrieve weights from edges. Works with integers as weights and edge structures from the Edge module. Used to serialize and deserialize edge weights, perform arithmetic in graph algorithms, and ensure consistent weight comparisons.",
      "description_length": 340,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.EdgeSet",
      "description": "Converts between custom edge and S-expression formats, enabling serialization, deserialization, and ordered comparisons. Validates hierarchical relationships between named entities, checks subset and equality conditions, and deserializes structured data into application-specific types. Supports binary serialization with Bin_prot and hash folding for robust data persistence and comparison. These capabilities allow for efficient data transformation, validation, and storage, such as ensuring configuration consistency or reconstructing complex structures from binary streams.",
      "description_length": 577,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexSet",
      "description": "Converts and validates structured named entities between S-expressions and custom types, supporting comparison, subset checks, and error reporting. Handles serialization to and from binary formats and provides hash folding for consistent hashing of complex data. Operations include parsing, equality verification, and transformation of entities with identifiers. Enables reliable data validation, configuration parsing, and efficient storage or transmission of structured information.",
      "description_length": 484,
      "index": 321,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.VertexHash",
      "description": "Converts S-expressions into keys for efficient lookups and compares serialized data, while enabling binary I/O for custom types through Bin_prot. It handles `Ppx_sexp_conv_lib.Sexp.t` for parsing and provides serialization routines like size, write, and read for polymorphic variants. Users can transform structured data into hashable keys and persist complex types in binary format. This allows for both symbolic data manipulation and high-performance storage solutions.",
      "description_length": 471,
      "index": 322,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology.PortSet",
      "description": "Combines serialization, validation, and transformation capabilities for structured data, supporting S-expression and binary formats. Core types include `Elt.t` and named entities, with operations for conversion, validation, subset checks, and hashing. It enables deserialization of configuration data, ensures hierarchical consistency, and generates collision-resistant hashes. Examples include parsing S-expressions into typed structures, verifying configuration subtrees, and serializing data for storage.",
      "description_length": 507,
      "index": 323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Semantics.PacketSet.Tree.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 324,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Semantics.PacketSet.Tree.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided constructor. Operates on S-expressions parsed from text input. Used to deserialize structured data in parsing workflows.",
      "description_length": 189,
      "index": 325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Semantics.HeadersValues.Fields.Direct",
      "description": "Provides operations to iterate over, fold, check conditions, collect elements, transform, and update specific fields of a network packet structure. Works with packet metadata including Ethernet addresses, VLAN tags, IP information, and port numbers. Used to process and modify packet headers in network filtering and forwarding logic.",
      "description_length": 334,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Global_compiler.FDD.BinTbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Operates on S-expression data structures generated by ppx_sexp_conv. Used to deserialize structured data from S-expressions into a specific key type for lookup or indexing purposes.",
      "description_length": 256,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Global_compiler.FDD.BinTbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific type using Bin_prot, providing size calculation, writing, reading, and shape information. Operates on a custom type defined as `key` with strict binary format requirements. Used to persist and reconstruct instances of `key` in binary files or over networks.",
      "description_length": 313,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Global_compiler.FDD.Tbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Works with the Sexp.t type and a key type defined elsewhere. Used to deserialize structured data from S-expressions into a specific key format for lookup or comparison.",
      "description_length": 243,
      "index": 329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Global_compiler.FDD.Tbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific key type using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a custom key type defined elsewhere in the codebase. Used to persist and reconstruct key values in binary format for storage or communication.",
      "description_length": 304,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Local_compiler.FDD.BinTbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key by parsing and extracting the underlying value. Works with S-expression data structures generated by ppx_sexp_conv. Used to deserialize structured data from S-expressions into a specific key type for lookup or comparison.",
      "description_length": 257,
      "index": 331,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Local_compiler.FDD.BinTbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific key type using Bin_prot, including size calculation, writing, reading, and shape information. Operates on custom data types defined with Bin_prot's type class system. Used to persist and reconstruct key values in binary format for storage or communication.",
      "description_length": 312,
      "index": 332,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Local_compiler.FDD.Tbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Operates on S-expression data structures generated by ppx_sexp_conv. Used to deserialize structured data from S-expressions into a specific key type for lookup or indexing purposes.",
      "description_length": 256,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Local_compiler.FDD.Tbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific type using Bin_prot, providing size calculation, writing, reading, and shape information. Operates on a custom type defined as `key` with strict binary format adherence. Used to persist and reconstruct data structures efficiently in binary form for storage or communication.",
      "description_length": 330,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.FDD.BinTbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Works with S-expression data structures generated by ppx_sexp_conv. Used to deserialize structured data from S-expressions into a specific key type for lookup or indexing purposes.",
      "description_length": 255,
      "index": 335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.FDD.BinTbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific key type using Bin_prot, including size calculation, writing, reading, and shape information. Operates on custom data types defined with Bin_prot's type class system. Used to persist and reconstruct key values in binary format for storage or communication.",
      "description_length": 312,
      "index": 336,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Fdd.FDD.Tbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Works with the Sexp.t type and a specific key type defined elsewhere. Used to deserialize structured data from S-expressions into a keyed representation for lookup or indexing.",
      "description_length": 251,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.FDD.Tbl.Provide_bin_io",
      "description": "Handles serialization and deserialization of a specific key type using Bin_prot, including size calculation, writing, reading, and shape definition. Operates on custom data types that implement the Bin_prot interface. Used to persist and reconstruct key values in binary format for efficient storage or communication.",
      "description_length": 317,
      "index": 338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Seq.Key",
      "description": "Converts between a custom type and S-expression representations, and provides a comparator for ordered operations. Works with the `t` type, which represents either a field or a continuation. Used to serialize and compare internal state representations in parsing or transformation workflows.",
      "description_length": 291,
      "index": 339,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Seq.Tree",
      "description": "Transforms S-expressions into a structured key type through a dedicated parser, enabling configuration loading from text. The key type serves as the primary data structure, supporting operations like lookup and comparison. Functions include parsing, validation, and conversion between S-expressions and keys. For example, it can read a configuration file's S-expression and map it to a key for programmatic access.",
      "description_length": 414,
      "index": 340,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Seq.Provide_of_sexp",
      "description": "Converts an S-expression into a key type using a custom parsing function. Operates on S-expression data and the Key module's type. Used to deserialize structured data from S-expressions into key representations for lookup or comparison.",
      "description_length": 236,
      "index": 341,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Seq.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing values of type Key.t using Bin_prot, including size calculation, writing, reading, and shape information. Works with binary I/O operations and polymorphic variants when necessary. Used to persist and reconstruct Key.t values in binary format for storage or communication.",
      "description_length": 324,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Seq.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Operates on custom data types with defined hash_fold_t functions, particularly useful for consistent hashing of complex or nested structures. Ensures that equivalent values produce identical hash states, critical for reliable use in hash tables and related data structures.",
      "description_length": 471,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Par.Elt",
      "description": "Converts between a sequence of `Value.t` values and S-expressions, enabling serialization and deserialization. Provides a comparator for ordered operations on sequences of values. Used to ensure consistent ordering and interchangeability in data processing pipelines.",
      "description_length": 267,
      "index": 344,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Par.Tree",
      "description": "Provides operations to compare and validate named entities based on their structure and content, and to convert S-expressions into structured custom types. Supports checking subset relationships, equality, and deserialization of hierarchical data. Named entities are represented with custom types that track names and values, enabling precise validation. For example, it can verify that a configuration subtree matches an expected structure or transform a textual S-expression into a typed data model.",
      "description_length": 501,
      "index": 345,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Par.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, both returning error results on failure. Works with named entities represented as structured data types containing identifiers and attributes. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 342,
      "index": 346,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Par.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expression data structures generated by the ppx_sexp_conv library. Used to deserialize structured data from S-expressions into domain-specific types during parsing.",
      "description_length": 268,
      "index": 347,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Par.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and polymorphic variant representations. Used to persist and reconstruct instances of `t` in binary format, such as storing structured data in files or over networks.",
      "description_length": 396,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Par.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a data structure into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Works with custom data types defined using the `Elt` module, enabling consistent hashing across complex structures. Used to generate reliable hash values for persistent collections, ensuring that different but structurally similar data instances produce distinct hashes.",
      "description_length": 469,
      "index": 349,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Vlr.Make.BinTbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Operates on S-expression data structures generated by ppx_sexp_conv. Used to deserialize structured data from S-expressions into a specific key type for lookup or indexing purposes.",
      "description_length": 256,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Vlr.Make.BinTbl.Provide_bin_io",
      "description": "Provides functions to serialize and deserialize values of a specific type using Bin_prot, including size calculation, writing, reading, and shape information. Works with custom types that require binary encoding and decoding, particularly those involving polymorphic variants. Enables efficient storage and transmission of structured data in binary format.",
      "description_length": 356,
      "index": 351,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Vlr.Make.Tbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key by parsing and validating its structure. Works with S-expression data generated from OCaml values using ppx_sexp_conv. Used to deserialize structured data from external sources into typed keys for lookup or processing.",
      "description_length": 254,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Vlr.Make.Tbl.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing a specific type using Bin_prot, including size calculation, writing, reading, and shape information. Works with custom types that require binary I/O support, including polymorphic variants. Used to enable efficient binary persistence of data structures in applications needing fast serialization.",
      "description_length": 349,
      "index": 353,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.UnitWeight",
      "description": "Provides operations to convert between a weight type (int) and S-expressions, compare weights, add them, and retrieve weights from edges. Works with integer-based weights and edge structures from the Edge module. Used to serialize and manipulate edge weights in parsing and graph processing tasks.",
      "description_length": 297,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.EdgeSet",
      "description": "Converts between custom edge and S-expression formats, supports ordered operations via comparator, and enables validation of hierarchical relationships through subset and equality checks. Handles deserialization of structured data into typed representations, supports binary serialization for efficient storage, and provides secure hash folding for consistent data integrity. Operations include validating configuration compliance, converting textual data to domain objects, and generating collision-resistant hashes. Examples include ensuring schema consistency, parsing configuration files, and serializing complex data structures.",
      "description_length": 633,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexSet",
      "description": "Combines S-expression and binary serialization with validation, comparison, and hashing for structured data. It supports operations on named entities, including subset checks, equality verification, and deserialization into custom types like `Elt.t`. Binary serialization enables efficient storage and retrieval of complex structures, while hash folding ensures consistent and collision-resistant hashing. Examples include validating hierarchical configurations, parsing textual data, and persisting graph vertices in binary format.",
      "description_length": 532,
      "index": 356,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.VertexHash",
      "description": "Parses and validates S-expressions into a key type for efficient lookup, while supporting binary serialization and deserialization of custom types with Bin_prot for fast I/O. It handles structured data conversion and binary persistence, enabling operations like storing complex data in binary format or comparing parsed S-expression keys. Functions include parsing, validation, size calculation, writing, and reading of data. Examples include converting a nested S-expression into a hashable key or serializing a polymorphic variant for storage.",
      "description_length": 545,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology.PortSet",
      "description": "Encapsulates port data, validation, and serialization across multiple formats, enabling structured data handling and comparison. It supports converting between S-expressions and custom types, validating hierarchical relationships, and performing binary and hash-based operations on complex data. Operations include checking subset relationships, deserializing configuration data, and generating collision-resistant hashes. Examples include verifying configuration consistency, persisting data in binary form, and ensuring type-safe comparisons.",
      "description_length": 544,
      "index": 358,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexHash.Provide_of_sexp",
      "description": "Converts an S-expression into a key by parsing and validating its structure. Works with S-expression data generated from OCaml values using ppx_sexp_conv. Used to deserialize structured data from external sources into a typed key representation.",
      "description_length": 245,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexHash.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing values of a specific type using Bin_prot, including size calculation, writing to binary, reading from binary, and shape information. Works with custom types that require binary I/O support, including polymorphic variants. Used to enable efficient binary persistence of data structures in applications needing fast serialization.",
      "description_length": 381,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.EdgeSet.Elt",
      "description": "Converts between a custom edge type and S-expression representations, and provides a comparator for ordered operations. Works with the `edge` type and comparator witness to enable structured data serialization and ordering. Used to serialize edge data for logging and compare edges in sorted collections.",
      "description_length": 304,
      "index": 361,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.EdgeSet.Tree",
      "description": "Checks if one named entity is a subset of another or if they are equal, and converts S-expressions into a domain-specific type `Elt.t` using a custom conversion function. Operates on named entity representations and S-expressions, enabling validation of hierarchical data and deserialization of structured inputs. Supports tasks like verifying configuration consistency or parsing input formats into typed values. For example, it can confirm that a child entity is fully contained within a parent or transform a serialized data structure into an internal representation.",
      "description_length": 570,
      "index": 362,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.EdgeSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on data structures representing named entities, such as identifiers or labeled values. Used to validate hierarchical relationships and ensure consistency in named data during configuration checks or data validation workflows.",
      "description_length": 334,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.EdgeSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text and transforms them into structured data. Used to deserialize configuration data from S-expressions into application-specific types.",
      "description_length": 265,
      "index": 364,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.EdgeSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and polymorphic variant representations. Used to persist and reconstruct values of `t` in binary format, such as storing structured data in files or over networks.",
      "description_length": 393,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.EdgeSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Operates on custom data types defined with `Elt.t`, supporting recursive and composite structures. Used to generate consistent, collision-resistant hash values for serialization, equality checks, and deterministic data processing.",
      "description_length": 430,
      "index": 366,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.PortSet.Elt",
      "description": "Converts between a custom type representing a port and S-expression format, and provides a comparator for ordered operations. Works with the `t` type, which is an alias for `port`, and the associated `comparator_witness` for type-safe comparisons. Used to serialize and deserialize port data and enable sorted collections of ports.",
      "description_length": 331,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.PortSet.Tree",
      "description": "Validates relationships between named entities by checking subset and equality conditions, while also converting S-expression data into a domain-specific type. It handles structured data with unique identifiers and hierarchical structures, supporting operations like validation and deserialization. Users can ensure configuration consistency and transform external data formats into internal representations. For example, it can verify that a configuration subset matches a parent model or parse an S-expression into a custom object for further processing.",
      "description_length": 556,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.PortSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types containing identifiers and metadata. Used in validation workflows to ensure consistency between configuration sets and entity definitions.",
      "description_length": 330,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.PortSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on `Ppx_sexp_conv_lib.Sexp.t` values to produce instances of `Elt.t`. Used to deserialize structured data from S-expression format into a domain-specific type.",
      "description_length": 258,
      "index": 370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.PortSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based reading. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 342,
      "index": 371,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.PortSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a data structure into a hash state, ensuring collision resistance and consistency with comparison. Works with custom data types through a structured folding process that includes size information to prevent prefix-based collisions. Used to generate reliable hash values for complex types in hashing and equality checks.",
      "description_length": 385,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexSet.Elt",
      "description": "Provides serialization and deserialization between `t` and S-expressions, along with a comparator for ordered operations. Works with the `t` type, which represents a vertex, and the `comparator_witness` type for type-safe comparisons. Used to enable persistent storage and ordered data handling in graph-related computations.",
      "description_length": 325,
      "index": 373,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexSet.Tree",
      "description": "Provides operations to validate hierarchical relationships between structured named entities and convert S-expressions into domain-specific types. Supports subset checks, equality verification, and deserialization using custom conversion functions. Enables consistent data validation and parsing in applications handling complex data models. For example, it can ensure a configuration subtree adheres to a defined schema or transform serialized data into typed representations for further processing.",
      "description_length": 500,
      "index": 374,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities, returning errors on failure. Works with named entities represented as structured data types. Used to validate hierarchical relationships and ensure consistency in configuration or data models.",
      "description_length": 292,
      "index": 375,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type `Elt.t` using a provided conversion function. Operates on S-expressions parsed from text input. Used to deserialize structured data from S-expression format into application-specific types.",
      "description_length": 233,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape definition. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based reading. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 341,
      "index": 377,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a data structure into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Operates on custom data types defined with `Elt.t`, supporting recursive and composite structures. Used to generate consistent, collision-resistant hash values for serialization, equality checks, and deterministic data processing.",
      "description_length": 429,
      "index": 378,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.Vertex",
      "description": "Handles node serialization and comparison, converting between S-expressions, strings, and graph formats like DOT and Mininet. Processes node attributes from DOT and GML files to construct node representations. Supports string-based identification and graph visualization output.",
      "description_length": 278,
      "index": 379,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.Edge",
      "description": "Handles graph edges with serialization to and from S-expressions, string representation, and DOT format. Parses edge attributes from Graphviz DOT and GML formats, and provides comparison and default edge values. Works with link data structures to represent connections in graph models.",
      "description_length": 285,
      "index": 380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.UnitWeight",
      "description": "Provides operations to convert between a weight type (int) and S-expressions, compare weights, and perform addition. Works with edge data structures and their associated weights. Used to serialize and manipulate edge weights in graph-related computations.",
      "description_length": 255,
      "index": 381,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.EdgeSet",
      "description": "Converts between custom edge types and S-expressions, enabling serialization, deserialization, and ordered operations through a comparator. Supports subset and equality checks on named entities, allowing validation of hierarchical data and transformation of parsed inputs into typed representations. Provides binary serialization via Bin_prot for parameterized types, ensuring efficient persistence and reconstruction of complex structures. Enables hash folding for custom types, generating collision-resistant hashes for use in hash tables and data validation.",
      "description_length": 561,
      "index": 382,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexSet",
      "description": "combines serialization, validation, and comparison capabilities for structured data, enabling conversion between S-expressions and custom types, subset and equality checks, and binary and hash-based representations. It supports operations like deserializing configuration data, validating hierarchical consistency, and generating collision-resistant hashes for complex objects. Key types include `t` for vertices, `Elt.t` for structured entities, and custom data types for hierarchical validation. Examples include transforming serialized data into executable models, ensuring configuration consistency, and efficiently storing structured data in binary format.",
      "description_length": 661,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.VertexHash",
      "description": "Converts S-expressions into key types for efficient lookup and comparison, and supports binary serialization and deserialization of custom types with Bin_prot, including size calculation and shape inspection. It handles structured data from ppx_sexp_conv and enables efficient binary encoding for persistence or transmission. Users can extract values from S-expressions and encode complex types into binary formats. Examples include deserializing configuration data and transmitting polymorphic variant types over a network.",
      "description_length": 524,
      "index": 384,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology.PortSet",
      "description": "Converts and validates port and named entity data between custom types and S-expressions, enabling serialization, comparison, and subset checks. Supports operations on `t`, `named`, and `Elt.t` types, including binary serialization, hash folding, and structured parsing. Examples include validating hierarchical entity relationships, serializing ports for storage, and generating consistent hashes for complex data. Provides tools for type-safe comparisons, error-aware validation, and efficient data transformation across formats.",
      "description_length": 531,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.PortDescription.PortState.StpState",
      "description": "Converts between 32-bit integers and a custom state representation, with string serialization. Operates on Core.Int32.t and a private stpState type. Used to encode and decode state identifiers in low-level system interactions.",
      "description_length": 226,
      "index": 386,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.Vertex",
      "description": "Handles node representation in network graphs, converting between internal structures and formats like DOT, Mininet, and S-expressions. Processes attributes from DOT and GML files to construct node objects. Supports string serialization and comparison for network node data.",
      "description_length": 274,
      "index": 387,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.Edge",
      "description": "Handles graph edges by converting them to and from S-expressions, comparing them, and generating string representations for visualization. Works with `Net.Link.t` to represent connections between nodes in graph structures. Parses edge definitions from DOT and GML formats and provides a default edge configuration.",
      "description_length": 314,
      "index": 388,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.UnitWeight",
      "description": "Provides operations to convert between a weight type (int) and S-expressions, compare weights, add them, and retrieve weights from edges. Works with integer-based weights and edge structures from the Edge module. Used to serialize and manipulate edge weights in parsing and graph processing tasks.",
      "description_length": 297,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.EdgeSet",
      "description": "Converts and validates named entities between S-expressions and custom types, enabling structured data handling and consistency checks. Supports serialization, comparison, subset validation, and hashing of entities, with operations like parsing, equality checks, and binary persistence. Examples include validating configuration hierarchies, converting data formats, and generating unique hashes for complex structures. Works with types such as `Elt.t` and custom edge representations, integrating with sexp and bin_prot libraries for flexible data manipulation.",
      "description_length": 562,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexSet",
      "description": "Converts, validates, and serializes structured named entities between S-expressions and custom types, supporting hierarchical checks, binary persistence, and hash generation. Operates on `vertex`, `Elt.t`, and parameterized `t` types, with functions for comparison, subset validation, deserialization, and binary encoding. Examples include ensuring configuration consistency, parsing external data, and generating reliable hashes for complex structures. Supports error reporting, polymorphic variant handling, and integration with serialization libraries like ppx_sexp_conv and Bin_prot.",
      "description_length": 587,
      "index": 391,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.VertexHash",
      "description": "Converts S-expressions into key values for efficient lookup and indexes, and supports binary serialization and deserialization of custom types with size calculation, writing, and reading operations. Key types include parsed S-expression keys and binary-serializable data structures. Examples include converting structured data into hashable keys and persisting complex types in binary format for quick access. Operations enable both data transformation and efficient storage mechanisms.",
      "description_length": 486,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology.PortSet",
      "description": "Converts and compares port values, serializes and deserializes structured data from S-expressions, and supports binary persistence and hashing. Operates on custom types, named entities, and hierarchical structures, enabling validation, transformation, and efficient storage. Functions include subset checks, equality verification, and data conversion between formats. Examples include validating configuration hierarchies, converting raw input to typed representations, and generating consistent hash values for complex data.",
      "description_length": 525,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.Hello.Element.VersionBitMap",
      "description": "Provides operations to calculate the size of a version bitmap, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `supportedList` type, which represents a set of supported OpenFlow versions. Used to encode and decode version information in OpenFlow protocol messages.",
      "description_length": 325,
      "index": 394,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.Vertex",
      "description": "Provides serialization and deserialization between vertex representations and S-expressions, along with comparison, string conversion, and graph format output. Operates on node identifiers used in graph structures, supporting DOT, Mininet, and GML formats. Parses attributes from DOT and GML files to construct vertex instances.",
      "description_length": 328,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.Edge",
      "description": "Handles graph edges by converting them to and from S-expressions, strings, and DOT format. Parses edges from GML and DOT attributes, and provides comparison and default edge values. Used for serializing, deserializing, and manipulating graph edge representations in specific formats.",
      "description_length": 283,
      "index": 396,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.UnitWeight",
      "description": "Provides operations to convert between a weight type (int) and S-expressions, compare weights, and perform addition. Works with edge data structures and their associated weights. Used to serialize and manipulate edge weights in graph-related computations.",
      "description_length": 255,
      "index": 397,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.EdgeSet",
      "description": "manages structured data validation, conversion, and serialization, offering operations to check subset relationships, compare entities, and convert between S-expressions and custom types. It supports ordered processing via comparators, binary serialization with Bin_prot, and hash folding for reliable data representation. Functions include validating configuration hierarchies, parsing serialized data, and generating collision-resistant hashes. Examples include ensuring schema compliance, converting edge data for storage, and enabling efficient data retrieval.",
      "description_length": 564,
      "index": 398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexSet",
      "description": "Combines serialization, validation, and comparison capabilities for structured data, enabling conversion between S-expressions and custom types, checking subset and equality relationships, and generating reliable hash values. Supports operations like deserializing graph nodes, validating configuration hierarchies, and ensuring data consistency through ordered comparisons and binary persistence. Processes `Elt.t` and structured named entities, with functions for error reporting and data transformation. Examples include converting serialized data into application-specific types, verifying configuration compliance, and generating hash values for complex structures.",
      "description_length": 670,
      "index": 399,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.VertexHash",
      "description": "Converts S-expressions into validated keys for structured data lookup and processes custom types with binary serialization and deserialization using Bin_prot. Supports size estimation, writing, reading, and shape analysis for efficient data persistence and transmission. Handles polymorphic variants via constructor tags and ensures type-safe deserialization from external sources. Enables efficient data handling by transforming OCaml values into compact binary formats or parseable keys.",
      "description_length": 489,
      "index": 400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology.PortSet",
      "description": "Converts between custom types and S-expressions, enabling serialization and ordered operations through a type alias and comparator. Validates hierarchical relationships, checks subset and equality, and parses structured data into domain-specific types. Supports binary serialization with Bin_prot and hash folding for collision-resistant representations. Can ensure configuration consistency, parse complex data models, and generate reliable hash values for structured data.",
      "description_length": 474,
      "index": 401,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Topology",
      "description": "provides serialization, comparison, and manipulation capabilities for graph-related data structures, including weights, edges, vertices, and ports. it supports conversion between custom types and S-expressions, along with binary serialization via Bin_prot, enabling efficient storage and data integrity checks. operations include validating configurations, converting structured data into typed representations, and generating unique hashes for complex objects. examples include serializing edge weights, parsing vertex data, and ensuring consistency in hierarchical configurations.",
      "description_length": 582,
      "index": 402,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Traverse",
      "description": "Performs breadth-first and depth-first traversal of a graph structure, applying a given function to each vertex. Operates on a topology data type representing nodes and connections. Used to process all nodes in a graph in a specific order, such as exploring all reachable nodes from a starting point.",
      "description_length": 300,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Path",
      "description": "Handles path operations using a custom type `t` and edges from the Topology module. Provides conversion between `t` and S-expressions, edge serialization, and arithmetic operations like addition and comparison. Used to construct and manipulate path weights in graph-based algorithms.",
      "description_length": 283,
      "index": 404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.UnitPath",
      "description": "Computes shortest paths between vertices in a graph using edge lists, with support for single-path, all-shortest-paths, and custom-filtered all-pairs results. Operates on graph topologies and vertex identifiers, returning path data with integer weights. Used for route optimization in network simulations and dependency analysis in directed graphs.",
      "description_length": 348,
      "index": 405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make.Parse",
      "description": "Loads graph data from DOT and GML files into a topology structure, supporting network analysis and visualization workflows. Processes structured text representations of graphs, extracting node and edge relationships. Used to initialize graph models from external configuration files in simulation and modeling applications.",
      "description_length": 323,
      "index": 406,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Make.Pretty",
      "description": "Generates string representations of network topologies, including a human-readable format, a DOT language format for visualization, and a Mininet configuration script with optional prologue and epilogue files. Operates on the Topology.t data structure, which models network node and link relationships. Used to export topology data for visualization tools, network simulation setups, and configuration generation.",
      "description_length": 413,
      "index": 407,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Topology",
      "description": "Converts and manipulates graph nodes, edges, and weights between S-expressions, string formats, and binary representations, while supporting attribute parsing, comparison, and serialization. Handles structured named entities with validation, hashing, and hierarchical checks, enabling reliable data processing and storage. Performs key conversions for efficient lookup and binary persistence, and supports graph operations like weight addition and edge comparison. Examples include generating DOT output from graph data, validating configuration files, and serializing edges for network simulations.",
      "description_length": 599,
      "index": 408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.Traverse",
      "description": "Performs breadth-first and depth-first traversal of graph structures, applying a given function to each vertex. Operates on graph topologies represented by the Topology.t type. Used to process nodes in a structured order for analysis or visualization tasks.",
      "description_length": 257,
      "index": 409,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Path",
      "description": "Handles path data with operations for arithmetic and comparison, including addition, zero value, and weight extraction from edges. Works with custom path types and edge structures from the Topology module. Serializes and deserializes path and edge data using S-expressions for interoperability.",
      "description_length": 294,
      "index": 410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net.UnitPath",
      "description": "Calculates shortest paths between vertices in a graph using edge lists, with support for single-path, all-shortest-paths, and custom-filtered all-pairs paths. Operates on graph topologies, vertices, and edges, returning path data with associated weights. Used for network routing optimization and dependency analysis in structured graphs.",
      "description_length": 338,
      "index": 411,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Parse",
      "description": "Loads graph data from DOT and GML files into a topology structure, supporting network analysis and visualization workflows. Processes file contents to construct directed and undirected graph representations. Used to initialize simulation environments from external configuration files.",
      "description_length": 285,
      "index": 412,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Net.Pretty",
      "description": "Generates string representations of network topologies in multiple formats. Produces human-readable output, DOT language for graph visualization, and Mininet configuration scripts. Accepts optional files to prepend and append custom content to the Mininet output.",
      "description_length": 263,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.Vertex",
      "description": "Provides serialization and deserialization between a vertex type and S-expressions, along with comparison, string conversion, and graph format output. Works with a custom vertex type representing nodes in graph structures. Used to convert vertex data for visualization in DOT format, Mininet integration, and parsing from DOT and GML graph files.",
      "description_length": 346,
      "index": 414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.Edge",
      "description": "Handles edge representation in graph structures, offering parsing from DOT and GML formats, string serialization, and comparison. Works with custom edge type `t` and S-expressions for serialization. Used to construct and manipulate graph edges in visualization and data processing pipelines.",
      "description_length": 291,
      "index": 415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.UnitWeight",
      "description": "Provides operations to convert between a weight type (int) and S-expressions, compare weights, add them, and retrieve weights from edges. Works with integer-based weights and edge structures from the Edge module. Used to serialize/deserialize weights in data formats and perform arithmetic in graph-related computations.",
      "description_length": 320,
      "index": 416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.EdgeSet",
      "description": "Converts between custom edge types and S-expressions, enabling serialization, deserialization, and ordered operations through a comparator. Validates hierarchical relationships between named entities, checks subset and equality conditions, and supports custom deserialization of structured data. Deserializes S-expressions into domain-specific types using conversion functions and provides binary serialization for parameterized types. Generates collision-resistant hashes for complex data structures, ensuring consistency with comparison logic and supporting efficient data persistence.",
      "description_length": 587,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexSet",
      "description": "Encapsulates vertex data with serialization, validation, and hashing capabilities. Supports S-expression and binary conversion for `t` and `Elt.t`, enables subset and equality checks on structured entities, and integrates hash folding for consistent data representation. Allows deserialization of symbolic expressions into typed objects, validation of hierarchical configurations, and efficient binary persistence of complex structures. Can verify configuration consistency, convert parsed data into domain models, and generate reliable hashes for comparison and storage.",
      "description_length": 571,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.VertexHash",
      "description": "Converts S-expressions into a key type through custom transformation, enabling structured data validation and parsing. Supports binary serialization and deserialization of custom types, including size computation and shape inspection, with focus on polymorphic variants. Operations include parsing, validation, writing, and reading binary data. Examples include converting configuration data from S-expressions to keys and persisting complex data structures in binary format for network transmission.",
      "description_length": 500,
      "index": 419,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology.PortSet",
      "description": "Encapsulates operations for serializing, validating, and converting structured data, including ports, named entities, and custom types like `Elt.t`. Supports ordered comparisons, subset checks, and binary persistence, with mechanisms for deserialization from S-expressions and hash generation for complex structures. It enables validation of hierarchical relationships, transformation of configuration data, and efficient storage of typed values. For example, it can verify that one entity is a subset of another, convert an S-expression into an `Elt.t` value, or serialize a parameterized type to binary format.",
      "description_length": 612,
      "index": 420,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Ip.Flags",
      "description": "Encodes and decodes values between the `t` type and S-expression format using `t_of_sexp` and `sexp_of_t`. The `t` type represents a structured data format used for configuration flags. This enables serialization and deserialization of flag configurations in a compact, human-readable format.",
      "description_length": 292,
      "index": 421,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Tcp.Flags",
      "description": "Represents TCP header flags with operations to convert between the flag structure and S-expression format. Works with a record type containing boolean fields for each flag. Used to serialize and deserialize TCP flag states in network protocol implementations.",
      "description_length": 259,
      "index": 422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Igmp3.GroupRec",
      "description": "Represents a multicast group with a list of source addresses, supporting serialization and deserialization via S-expressions. Operates on a record type containing group and source information. Used to encode and decode group configurations in network protocols.",
      "description_length": 261,
      "index": 423,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Dns.Qd",
      "description": "Provides serialization and deserialization between a custom type and S-expressions using `t_of_sexp` and `sexp_of_t`. Works with a record type containing fields defined in the module's signature. Used to convert internal representations to and from S-expressions for configuration or data interchange.",
      "description_length": 301,
      "index": 424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Dns.Rr",
      "description": "Provides serialization and deserialization between a custom type and S-expressions using `t_of_sexp` and `sexp_of_t`. Works with a record type containing fields defined in the module's signature. Used to convert internal data structures to and from S-expression representations for logging or configuration parsing.",
      "description_length": 315,
      "index": 425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.NetKAT_Controller.Make",
      "description": "Initiates a network controller process, handles OpenFlow event streams, and retrieves switch feature information. It manages flow and port statistics, and executes policy updates or packet outputs to specific switches. Supports asynchronous operations for dynamic network configuration and monitoring.",
      "description_length": 301,
      "index": 426,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Async.OpenFlow0x01_Plugin.LowLevel",
      "description": "provides a foundational structure for low-level operations through a set of specialized components. it includes basic types such as buffers and pointers, along with direct memory manipulation functions. users can perform raw data access, memory allocation, and system-level interactions. examples include reading from unmanaged memory and handling binary data formats.",
      "description_length": 368,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.Ox.DefaultHandlers",
      "description": "Handles OpenFlow protocol events by ignoring incoming messages, including switch connections, disconnections, barrier replies, and statistics replies. Operates on switch identifiers, transaction IDs, and OpenFlow message types. Used to suppress unnecessary processing in controller logic where event responses are not required.",
      "description_length": 327,
      "index": 428,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.Ox.Platform",
      "description": "Sends OpenFlow messages such as packet_out, flow_mod, stats_request, and barrier_request to switches, each requiring a switch ID, transaction ID, and message-specific data. Executes thunks with a specified timeout, ensuring operations terminate after a defined duration. Operates with OpenFlow0x01 data types including switchId, xid, packetOut, flowMod, request, and barrier_request.",
      "description_length": 383,
      "index": 429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.Ox.Make",
      "description": "Handles connection and disconnection events for OpenFlow switches, processes incoming packets with transaction IDs, and manages barrier and statistics replies. Operates on switch identifiers, transaction IDs, and packet/information structures from the OpenFlow 0x01 protocol. Used to monitor switch activity, respond to packet events, and ensure proper state management during controller execution.",
      "description_length": 398,
      "index": 430,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Error.HelloFailed",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a pretty-printing function for converting instances to strings. Works with a private type `t` that is not exposed outside the module. Used to encode and decode structured data in a human-readable format for logging or configuration purposes.",
      "description_length": 336,
      "index": 431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Error.BadRequest",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a pretty-printing function for converting instances to strings. Works with a private type representing invalid request data. Used to handle malformed input in parsing workflows by converting errors into human-readable formats.",
      "description_length": 321,
      "index": 432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Error.BadAction",
      "description": "Handles conversion between a custom type and S-expressions, as well as string representation. Works with an opaque type `t` that encapsulates specific error or exceptional states. Used to serialize and deserialize error conditions in a structured, human-readable format.",
      "description_length": 270,
      "index": 433,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Error.FlowModFailed",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a pretty-printing function for human-readable output. Works with an opaque type representing flow modification failures. Used to convert failure data for logging, debugging, or inter-process communication.",
      "description_length": 300,
      "index": 434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Error.PortModFailed",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a pretty-printing function for human-readable output. Works with an opaque type representing port modification failures. Used to encode and decode error states in network configuration systems.",
      "description_length": 288,
      "index": 435,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Error.QueueOpFailed",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a pretty-printing function for human-readable output. Works with an opaque type representing queue operation failure states. Used to encode and decode error information in a structured, portable format.",
      "description_length": 297,
      "index": 436,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.FlowRemoved.Reason",
      "description": "Converts a flow removal reason to its string representation and integer code, and maps integer codes back to the corresponding reason. Works with the `flowRemovedReason` type and 16-bit integers. Used to serialize and deserialize flow removal events in network control protocols.",
      "description_length": 279,
      "index": 437,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.FlowMod.Command",
      "description": "Converts between a flow modification command type and its string or 16-bit integer representation. Operates on the `flowModCommand` type, which encodes specific actions for modifying network flows. Used to serialize commands for logging or transmission and to parse incoming command values from network protocols.",
      "description_length": 313,
      "index": 438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.SwitchFeatures.Capabilities",
      "description": "Provides operations to convert between a capability representation and S-expressions, as well as a string representation that pretty-prints the value. Works with a record type containing fields for individual capability flags. Used to serialize and deserialize OpenFlow 1.0 capability sets during protocol communication.",
      "description_length": 320,
      "index": 439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.SwitchFeatures.SupportedActions",
      "description": "Provides operations to convert between a custom action set type and S-expressions, along with a string representation function. Works with a record type containing action-specific data. Used to serialize and deserialize supported actions for configuration or logging purposes.",
      "description_length": 276,
      "index": 440,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.SwitchConfig.FragFlags",
      "description": "Provides serialization and string conversion for flag sets, supporting S-expressions and human-readable representations. Operates on an opaque type representing a collection of flags. Used to encode and decode flag states in configuration parsing and logging.",
      "description_length": 259,
      "index": 441,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.PortStatus.ChangeReason",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a string representation. Works with an opaque type representing change reasons in a system. Used to encode and decode change reasons in persistent data stores and logs.",
      "description_length": 263,
      "index": 442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.PortDescription.PortConfig",
      "description": "Converts a port configuration value to a string representation and to a 32-bit integer, and constructs a port configuration from a 32-bit integer. Works with the `portConfig` data type, which encapsulates port settings. Used to serialize and deserialize port identifiers in network communication protocols.",
      "description_length": 306,
      "index": 443,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.PortDescription.PortState",
      "description": "Encodes and decodes 32-bit integers into a custom state representation, supporting string serialization for protocol use. Provides conversion functions between Core.Int32.t and a private stpState type. Allows safe manipulation and transmission of state identifiers through standardized encoding and decoding. Example uses include serializing state values for network communication or storing them in a human-readable format.",
      "description_length": 424,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.PortDescription.PortFeatures",
      "description": "Converts a port features value to and from a 32-bit integer, and generates a string representation for debugging or logging. Works with the `portFeatures` type, which encodes specific network port configuration flags. Used to serialize and deserialize port settings in low-level network protocol implementations.",
      "description_length": 312,
      "index": 445,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Topology",
      "description": "Handles conversion and manipulation of network structures, including nodes, links, and edges, with support for S-expressions, DOT, GML, and binary formats. It provides operations to compare, serialize, and deserialize data, manage weights as integers, and validate hierarchical relationships between entities. Functions include generating string representations for visualization, performing arithmetic on edge weights, and ensuring data consistency through hashing and subset checks. Examples include parsing graph configurations, validating role access, and converting structured data into application-specific types.",
      "description_length": 619,
      "index": 446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Traverse",
      "description": "Performs breadth-first and depth-first traversal of graph structures, applying a given function to each vertex. Operates on graph topologies represented by the Topology module. Used to process nodes in a structured order for analysis or visualization tasks.",
      "description_length": 257,
      "index": 447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Path",
      "description": "Handles path data with operations for arithmetic addition and comparison, using a custom type `t` and edges from the Topology module. Converts between path representations and S-expressions for serialization and parsing. Supports weighted path calculations in graph-related algorithms.",
      "description_length": 285,
      "index": 448,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.UnitPath",
      "description": "Computes shortest paths between vertices in a graph, returning edge lists representing the path or a list of all shortest paths between pairs. Operates on graph topologies, vertices, and edges, using integer weights for path evaluation. Used to determine optimal routing in network simulations or to analyze connectivity constraints in structured layouts.",
      "description_length": 355,
      "index": 449,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Parse",
      "description": "Loads graph data from DOT and GML files into a topology structure, supporting network analysis and visualization workflows. Processes structured text formats to construct graph representations used in simulation and graph theory applications. Accepts file paths and returns fully initialized topological models for further processing.",
      "description_length": 334,
      "index": 450,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net.Pretty",
      "description": "Generates string representations of network topologies in multiple formats, including a human-readable form, Graphviz DOT language, and Mininet configuration syntax. Operates on the `Topology.t` type, which models network node and link relationships. Used to visualize topologies for debugging, documentation, or integration with network simulation tools.",
      "description_length": 355,
      "index": 451,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.GroupStats.BucketStats",
      "description": "Provides operations to calculate the size of a bucket statistics structure, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents OpenFlow 1.3.4 bucket statistics. Used to process and inspect flow statistics in network protocol implementations.",
      "description_length": 326,
      "index": 452,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.QueueDesc.QueueProp",
      "description": "Provides operations to calculate the size of a queue property, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a queue property as defined in OpenFlow 1.3.4. Used to handle queue configuration data during packet processing and network protocol interactions.",
      "description_length": 345,
      "index": 453,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.Hello.Element",
      "description": "Encodes and decodes version information using a custom type `t` representing supported OpenFlow versions. Offers size calculation, string conversion, and serialization/deserialization from a Cstruct buffer. Allows manipulation of version bitmaps for network protocol messages. Examples include converting a version list to a string or extracting versions from a binary buffer.",
      "description_length": 376,
      "index": 454,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.HeadersValues",
      "description": "manages packet data through field-specific operations, enabling iteration, transformation, and modification of network elements like Ethernet addresses and IP headers. It provides operations for updating port numbers, extracting VLAN tags, and traversing metadata, with support for list conversion and folding over mutable fields. Data types include packet structures, header fields, and metadata maps. Examples include filtering packets by IP address or rewriting Ethernet headers.",
      "description_length": 482,
      "index": 455,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Semantics.PacketSet",
      "description": "converts between custom packet types and S-expressions, enabling serialization, deserialization, and ordered operations through a comparator. It supports subset and equality checks on named entities, validates hierarchical structures, and transforms S-expressions into domain-specific types like `Elt.t`. Binary serialization via Bin_prot and hash folding for complex types ensure efficient persistence and consistent hashing. Examples include verifying configuration consistency, deserializing structured data, and generating collision-resistant hashes for nested objects.",
      "description_length": 573,
      "index": 456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.FabricGen.FabricGen",
      "description": "Generates a network fabric by combining virtual and physical topology and predicate constraints, using specified policies for ingress and egress traffic. Operates on Frenetic NetKAT predicates and policies to construct structured network configurations. Used to model and synthesize adversarial network scenarios with precise control over data flow and access rules.",
      "description_length": 366,
      "index": 457,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Virtual_Compiler.Make",
      "description": "Generates a network fabric by combining forwarding and filtering policies derived from predicate expressions. It processes virtual and physical network topologies along with ingress and egress rules to construct a structured policy list. The output is used to configure network behavior in software-defined networking environments.",
      "description_length": 331,
      "index": 458,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Global_compiler.FDD",
      "description": "Transforms S-expressions into a structured key type for efficient lookup, with support for binary serialization and deserialization that tracks size and preserves format. It enables operations such as converting between S-expressions and keys, encoding binary data, and inspecting the shape of serialized structures. This facilitates data persistence, network transmission, and structured comparisons, allowing for tasks like saving a custom record to a file or converting a serialized S-expression into a key for fast access. Examples include optimizing data storage with compact binary formats or enabling indexed lookups from human-readable input.",
      "description_length": 650,
      "index": 459,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Global_compiler.Automaton",
      "description": "Provides operations to manipulate NetKAT automata, including adding transitions, folding over reachable states, converting policies to automata, and rendering automata as DOT strings. Works with FDD-based predicates and state identifiers, and supports transformations for visualization and analysis. Used to generate and analyze network policy automata for verification and optimization.",
      "description_length": 387,
      "index": 460,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Packet.Field",
      "description": "Compares field values using a lexicographical ordering defined by the underlying FDD representation. Operates on the internal field type derived from Frenetic_netkat.Fdd.Field, enabling precise equality and ordering checks. Used to sort and compare network flow fields in protocol-specific contexts.",
      "description_length": 299,
      "index": 461,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Packet.T",
      "description": "Provides serialization and comparison operations for a map type based on int64 keys, including S-expression conversion, hashing, and ordering. Works with Core.Map.M(Field).t instances, enabling efficient key-value storage and retrieval. Used to serialize and compare structured data in systems requiring deterministic ordering and efficient hashing.",
      "description_length": 349,
      "index": 462,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Local_compiler.FDD",
      "description": "Converts S-expressions into structured, keyed formats using a custom parser, enabling efficient data lookup and binary serialization of key types. It supports operations like parsing, writing, reading, and determining the size and shape of key values, allowing seamless transitions between textual and binary representations. This enables tasks such as transforming configuration data into a lookup table and persisting keys in binary files for rapid access. It handles Sexp.t and custom key types, ensuring precise format control during conversion and storage.",
      "description_length": 561,
      "index": 463,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Field",
      "description": "Manages a mapping of string keys to static FDD field configurations, supporting addition, lookup, and modification of entries with specified initial values and mutability. The core data type `t` represents the environment state, enabling structured access to field metadata. Operations include inserting fields with defined properties and retrieving them by key for policy construction. This allows precise control over field definitions during network policy setup.",
      "description_length": 466,
      "index": 464,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Value",
      "description": "Provides operations for comparing, serializing, and converting values used in network flow definitions, including lattice subset checks and integer conversions. Works with types representing constants, masks, and symbolic values like \"Pipe\" and \"Query\". Used to enforce valid field-value pairings and manage bit-width conversions in flow table generation.",
      "description_length": 355,
      "index": 465,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Pattern",
      "description": "Compares and checks equality of patterns based on field and value ordering, using integer natural order for identical fields. Converts between NetKAT header values and patterns, and transforms patterns into NetKAT predicates or OpenFlow match patterns. Designed for precise manipulation of network header fields in packet processing workflows.",
      "description_length": 343,
      "index": 466,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.Action",
      "description": "Provides unified parsing, serialization, and comparison of structured data using a core type `t`, supporting key-based operations, binary I/O, and hash folding for efficient data handling. It enables conversion between S-expressions and custom types, with validation, transformation, and subset checks for hierarchical and domain-specific data. Operations include generating hash values for complex structures, validating schemas, and converting between serialized formats. For example, it can serialize a configuration tree into binary, validate its structure, and compute a hash for quick comparisons.",
      "description_length": 603,
      "index": 467,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd.FDD",
      "description": "Encodes and decodes a custom `key` type using binary protocols, with support for size calculation, serialization, and deserialization. It converts S-expressions into `key` values and back, enabling structured data manipulation and efficient storage. Operations include reading from and writing to binary streams, as well as validating and transforming S-expressions into typed representations. For example, it can encode `(A 1)` as a binary blob and decode it back into the original structure.",
      "description_length": 493,
      "index": 468,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Domain.Field",
      "description": "Compares field values using a lexicographical ordering function, returning an integer result. It operates on field representations derived from Frenetic_netkat.Fdd.Field, enabling precise ordering in network packet processing contexts. The comparator is designed for use in sorted data structures requiring stable field comparisons.",
      "description_length": 332,
      "index": 469,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Vlr.IntPairTbl",
      "description": "Parses S-expressions into key-value pairs using a custom function, enabling structured data to be indexed or looked up by specific keys. Supports binary serialization and deserialization of custom types, including size computation and shape inspection, for efficient data persistence. Operations include converting between S-expressions and binary formats, as well as handling polymorphic variants. Example tasks include loading configuration data from a file and storing complex data structures in a binary format for quick access.",
      "description_length": 532,
      "index": 470,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Vlr.Make",
      "description": "Provides operations for comparing, serializing, and hashing values of type t, along with algebraic operations including sum, prod, one, and zero, which define a structure similar to a semiring. Works with the type t, supporting conversions to and from Sexp and string representations. Used for implementing algebraic structures where elements can be combined using associative and distributive operations, such as boolean logic with && and ||.",
      "description_length": 443,
      "index": 471,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Parser.Portless",
      "description": "Converts string representations of network policies and predicates into abstract syntax tree nodes, preserving position information for error reporting. Processes policy and predicate definitions from files, mapping them directly to internal representation types. Designed for parsing and validating NetKAT policy and predicate expressions during runtime analysis.",
      "description_length": 364,
      "index": 472,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow.Pattern.Ip",
      "description": "Provides operations to serialize and deserialize IP address patterns, compare them for equivalence and ordering, compute joins and intersections, and check compatibility. Works with a tuple type representing an IP address and a mask. Used to manipulate and analyze network address patterns in packet filtering and routing logic.",
      "description_length": 328,
      "index": 473,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Topology",
      "description": "Converts and validates structured data between S-expressions, binary formats, and custom types, supporting comparison, serialization, and transformation. Core types include nodes, edges, weights, and named entities, with operations for parsing, arithmetic, subset checks, and hashing. Enables tasks like converting graph structures for visualization, validating configuration hierarchies, and serializing edge weights for algorithmic processing. Supports efficient data persistence, error reporting, and binary I/O for complex, typed data.",
      "description_length": 539,
      "index": 474,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Traverse",
      "description": "Performs breadth-first and depth-first traversal of a graph structure, applying a given function to each vertex. Operates on a topology representation that includes vertices and their connections. Used to process nodes in a graph for analysis or visualization tasks.",
      "description_length": 266,
      "index": 475,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.Path",
      "description": "Provides operations to convert between path representations and S-expressions, compare paths, and perform arithmetic on path weights. Works with a custom path type and associated edge types from the Topology module. Used to serialize paths for configuration, compute path sums in graph algorithms, and ensure consistent ordering in sorted data structures.",
      "description_length": 355,
      "index": 476,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net.UnitPath",
      "description": "Calculates shortest paths between vertices in a graph using edge lists, with support for single-path, all-shortest-paths, and custom-filtered all-pairs computations. Operates on graph topologies, vertices, and weighted edges, returning path data or boolean conditions. Used for network routing optimization and dependency analysis in structured graphs.",
      "description_length": 352,
      "index": 477,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Parse",
      "description": "Loads network topology from a DOT file or a GML file, returning a structured representation of the network. Processes graph data in specific formats to construct a directed or undirected graph model. Used to initialize network simulations or analysis tools with predefined layouts.",
      "description_length": 281,
      "index": 478,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Net.Pretty",
      "description": "Generates string representations of network topologies in multiple formats, including a human-readable form, a DOT language format for visualization, and a Mininet script with optional prologue and epilogue files. Operates on the Topology.t data structure, which models network node and link relationships. Used to produce visualizable graphs and executable network simulations.",
      "description_length": 378,
      "index": 479,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Semantics.PacketSet.Elt",
      "description": "Provides serialization and deserialization between a packet type and S-expressions, along with a comparator for ordered operations. Works with the `packet` data type and its associated comparator witness. Used to enable persistent storage and ordered comparisons of packet data.",
      "description_length": 278,
      "index": 480,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Semantics.PacketSet.Tree",
      "description": "Verifies subset and equality relationships between structured named entities, and converts S-expressions into a custom `Elt.t` type for data deserialization. Operations include validation of hierarchical consistency and parsing of text-based structured data. Checks can detect mismatches in entity hierarchies, while conversions enable flexible data handling. For example, it ensures a configuration tree adheres to defined constraints or transforms input text into an internal representation for processing.",
      "description_length": 508,
      "index": 481,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Semantics.PacketSet.Named",
      "description": "Checks if one named entity is a subset of another and verifies equality between two named entities. Operates on data structures representing named entities, such as identifiers or labeled values. Used to validate hierarchical relationships and ensure consistency in named data during configuration checks or data validation workflows.",
      "description_length": 334,
      "index": 482,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Semantics.PacketSet.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type using a provided constructor. Operates on Sexp.t and a specific Elt.t type defined elsewhere. Used to deserialize structured data from S-expressions into a domain-specific representation.",
      "description_length": 231,
      "index": 483,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Semantics.PacketSet.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based decoding. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 343,
      "index": 484,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Semantics.PacketSet.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of a structured type into a hash state, ensuring collision resistance by incorporating the structure's size before element-wise folding. Works with custom data types defined using the `Elt` module, supporting recursive and nested structures. Used to generate consistent and unique hash values for complex types in hashing-based data structures like hash tables.",
      "description_length": 424,
      "index": 485,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Semantics.HeadersValues.Fields",
      "description": "Processes and modifies network packet headers by allowing iteration, folding, condition checking, element collection, transformation, and field updates. Supports packet metadata such as Ethernet addresses, VLAN tags, IP data, and port numbers. Enables precise manipulation of header fields for tasks like packet filtering, rewriting, or analysis. Examples include extracting source IP addresses, modifying VLAN tags, or updating port numbers in a packet stream.",
      "description_length": 461,
      "index": 486,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Global_compiler.FDD.Tbl",
      "description": "Converts S-expressions into structured key values using a custom parser, enabling data lookup and comparison. Provides binary serialization and deserialization for the same key type, supporting efficient storage and transmission. Operations include size estimation, writing, reading, and shape inspection. This enables seamless data conversion between textual and binary formats for a specific key type.",
      "description_length": 403,
      "index": 487,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Global_compiler.FDD.BinTbl",
      "description": "Converts S-expressions into a key type using a custom parser, enabling structured data to be indexed or looked up. Provides binary serialization and deserialization for the same key type, supporting efficient storage and transmission. Operations include size calculation, writing, reading, and shape inspection. This allows for seamless conversion between human-readable S-expressions and compact binary formats for the key type.",
      "description_length": 429,
      "index": 488,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Local_compiler.FDD.Tbl",
      "description": "Converts S-expressions into key-value pairs using a custom parser, enabling structured data to be indexed by specific keys. Supports binary serialization and deserialization of the same key type, allowing efficient storage and transmission. Operations include size calculation, writing, reading, and shape inspection. This enables data to be both parsed from textual S-expressions and stored in compact binary form for fast access.",
      "description_length": 431,
      "index": 489,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Local_compiler.FDD.BinTbl",
      "description": "Encodes and decodes key values between S-expressions and binary formats, enabling data persistence and transmission. Supports custom data types through Bin_prot, offering operations for size, writing, reading, and shape inspection. Parses S-expressions to extract structured keys for efficient lookup. Example: deserialize a key from an S-expression, serialize it to binary, and later reconstruct it for comparison or storage.",
      "description_length": 426,
      "index": 490,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.FDD.Tbl",
      "description": "Converts S-expressions into keyed structures using a custom parser, enabling structured data to be accessed via specific keys. Supports binary serialization and deserialization of the same key type, allowing efficient storage and retrieval. Operations include parsing, writing, reading, and determining size of key values. This enables seamless data conversion between textual and binary formats for indexed data.",
      "description_length": 413,
      "index": 491,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Fdd.FDD.BinTbl",
      "description": "Encodes and decodes key-value pairs using S-expressions and Bin_prot, enabling structured data to be transformed into and from binary formats. Supports custom key types with operations for parsing, serializing, and reconstructing data. Examples include converting S-expressions to keys for fast lookups and saving keys in binary for efficient storage. Provides low-level control over data representation and conversion processes.",
      "description_length": 429,
      "index": 492,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Seq",
      "description": "Encodes and decodes custom data between S-expressions and a key type, supporting parsing, validation, and comparison. Serializes and deserializes key values in binary format, enabling efficient storage and transmission. Incorporates structured data into hash states, ensuring consistent hashing for complex types. Enables configuration loading, state serialization, and reliable hashing for key-based operations.",
      "description_length": 412,
      "index": 493,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action.Par",
      "description": "Converts and validates sequences of values and S-expressions, supporting ordered operations, subset checks, and structured data transformations. It handles custom types for named entities, enabling precise validation and deserialization from S-expressions. Binary serialization with Bin_prot and hash folding for structured data ensure efficient storage and consistent hashing. For example, it can verify configuration consistency, convert textual data into typed models, and serialize domain-specific structures for storage or transmission.",
      "description_length": 541,
      "index": 494,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Field.Env",
      "description": "Provides operations to create and manage a mapping of string identifiers to static FDD fields, including adding entries with initialization values and mutability flags, and looking up entries by key. Works with a custom type `t` representing the environment state. Used to track and retrieve metadata during FDD construction and validation.",
      "description_length": 340,
      "index": 495,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Vlr.Make.Tbl",
      "description": "Parses and validates S-expressions into typed keys for structured data lookup, and supports binary serialization and deserialization of custom types with size, write, read, and shape operations. It enables conversion of external data into usable key formats and efficient binary storage of complex data structures. Users can deserialize S-expressions into typed keys and persist custom types in binary form. Examples include loading configuration data from S-expressions and saving polymorphic variant data to disk.",
      "description_length": 515,
      "index": 496,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Vlr.Make.BinTbl",
      "description": "Encodes and decodes structured data between S-expressions and binary formats, using custom parsing and serialization routines. Supports key-value lookups with user-defined key types and handles complex data structures through Bin_prot's efficient binary encoding. Operations include deserializing S-expressions into indexed keys and serializing custom types into binary streams. Examples include converting configuration data from S-expressions to a searchable format and storing polymorphic variant data in a compact binary representation.",
      "description_length": 540,
      "index": 497,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Vlr.IntPairTbl.Provide_of_sexp",
      "description": "Converts an S-expression into a key value using a custom parsing function. Works with the `Ppx_sexp_conv_lib.Sexp.t` type and a specific key type. Used to deserialize structured data from S-expressions into a keyed representation for lookup or mapping.",
      "description_length": 252,
      "index": 498,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Vlr.IntPairTbl.Provide_bin_io",
      "description": "Provides functions for serializing and deserializing values of a specific type using the Bin_prot library, including size calculation, writing, reading, and shape information. Works with custom types that require binary I/O support, particularly those involving polymorphic variants. Used to enable efficient binary persistence of data structures in applications requiring fast serialization.",
      "description_length": 392,
      "index": 499,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Topology",
      "description": "provides serialization, validation, and manipulation of structured data through S-expressions, binary formats, and custom types. it supports operations like weight conversion, edge validation, subset checks, equality verification, and hash folding, working with integers, edges, and hierarchical configurations. it enables tasks such as parsing configuration files, serializing graph vertices, and ensuring data consistency across formats. examples include converting edge weights to S-expressions, validating hierarchical relationships, and generating secure hashes for data integrity.",
      "description_length": 586,
      "index": 500,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Traverse",
      "description": "Performs breadth-first and depth-first traversal of graph structures, applying a given function to each vertex. Operates on graph topologies represented by the Topology module. Used to process nodes in a structured order for analysis or visualization tasks.",
      "description_length": 257,
      "index": 501,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Path",
      "description": "Handles path data with operations for arithmetic addition and comparison. Works with custom path types and edge representations from the Topology module. Supports serialization and deserialization of paths and edges using S-expressions.",
      "description_length": 236,
      "index": 502,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.UnitPath",
      "description": "Calculates shortest paths between vertices in a graph using edge lists, with support for individual, pairwise, and filtered all-pairs computations. Operates on graph topologies, vertices, and weighted edges. Used to determine optimal routing in network simulations and to analyze connectivity constraints in structured layouts.",
      "description_length": 327,
      "index": 503,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Parse",
      "description": "Loads graph data from DOT and GML files into a topology structure, supporting network analysis and visualization workflows. Processes structured text formats to construct graph representations used in simulation and graph theory applications. Accepts file paths and returns fully initialized graph models for further processing.",
      "description_length": 328,
      "index": 504,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make.Pretty",
      "description": "Generates string representations of network topologies, including a human-readable format, a DOT language format for visualization, and a Mininet configuration script with optional header and footer files. Operates on the Topology.t data structure, which models network node and link relationships. Used to produce visual diagrams and executable network simulations.",
      "description_length": 366,
      "index": 505,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Topology",
      "description": "manages graph structures by handling node and edge serialization, comparison, and conversion across multiple formats, including S-expressions, DOT, and binary. it supports operations on weights, custom edge types, and structured entities, enabling tasks like validating hierarchical data, generating hashes, and converting between string and binary representations. key types include vertices, edge weights, and custom data structures, with functions for deserialization, comparison, and transformation. examples include converting graph configurations to visualizations, validating port relationships, and serializing edge weights for storage.",
      "description_length": 644,
      "index": 506,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Traverse",
      "description": "Performs breadth-first and depth-first traversal of a graph structure, applying a given function to each vertex. Operates on a graph represented by the Topology.t type, which includes nodes and connections. Used to process all nodes in a graph in a systematic order, such as for network exploration or dependency resolution.",
      "description_length": 324,
      "index": 507,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Path",
      "description": "Handles path data with operations for arithmetic addition and comparison. Works with custom types representing paths and edges from a topology module. Used to construct and compare path weights in graph traversal algorithms.",
      "description_length": 224,
      "index": 508,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.UnitPath",
      "description": "Computes shortest paths between vertices in a graph using edge lists, with support for single-path, all-shortest-paths, and custom-filtered all-pairs paths. Operates on graph topologies, vertices, and weighted edges. Used to determine optimal routing in network simulations and analyze connectivity constraints in structured layouts.",
      "description_length": 333,
      "index": 509,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Parse",
      "description": "Loads graph data from DOT and GML files into a topology structure, supporting network analysis and visualization workflows. Processes file contents to construct directed and undirected graph representations. Used to initialize graph models from external configuration files.",
      "description_length": 274,
      "index": 510,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Net.Pretty",
      "description": "Generates string representations of network topologies in multiple formats. Produces human-readable output, DOT language for graph visualization, and Mininet configuration scripts. Accepts optional configuration files to customize generated output.",
      "description_length": 248,
      "index": 511,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.Vertex",
      "description": "Provides serialization and deserialization between internal vertex representations and S-expressions, along with comparison, string conversion, and graph format output. Operates on a custom type `t` representing graph vertices. Used to convert vertex data for graph visualization in DOT format, Mininet integration, and parsing from DOT and GML file structures.",
      "description_length": 361,
      "index": 512,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.Edge",
      "description": "Handles edge representation in graph structures, offering parsing from DOT and GML formats, string serialization, and comparison. Works with a custom `t` type representing graph edges. Used to convert edges to visualizable formats like DOT and to extract edge properties from graph description languages.",
      "description_length": 304,
      "index": 513,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.UnitWeight",
      "description": "Provides operations to convert between a weight type (int) and S-expressions, compare weights, add them, and retrieve weights from edges. Works with integer-based weights and edge structures from the Edge module. Used to serialize and manipulate edge weights in graph processing tasks.",
      "description_length": 285,
      "index": 514,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.EdgeSet",
      "description": "Converts between custom edge and S-expression formats, supports ordered operations via comparator, and enables structured data validation, deserialization, and binary persistence. Provides subset and equality checks for named entities, along with hash folding for collision-resistant representation of complex types. Transforms S-expressions into typed values, allowing configuration validation and data parsing. Serializes and deserializes data in binary format, enabling efficient storage and transmission of structured information.",
      "description_length": 534,
      "index": 515,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexSet",
      "description": "offers serialization, validation, and comparison capabilities for structured data, with support for S-expressions, binary formats, and hash folding. It handles operations like subset checks, equality verification, and type conversion, working with custom types derived from `Elt.t` and named entities. For example, it can validate a configuration tree against a schema, convert serialized data into typed representations, or generate collision-resistant hashes for data structures. It enables efficient storage, consistent parsing, and reliable comparison in applications requiring structured data handling.",
      "description_length": 607,
      "index": 516,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.VertexHash",
      "description": "Parses and validates S-expressions into typed keys, enabling structured data deserialization from external sources. Supports binary serialization and deserialization of custom types with Bin_prot, including size computation and shape inspection. Converts OCaml values into compact binary formats for efficient storage or transmission. Allows handling of polymorphic variants and structured data through typed, validated representations.",
      "description_length": 436,
      "index": 517,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology.PortSet",
      "description": "Converts, validates, and serializes port and entity data between S-expression and custom types, with support for ordered operations, subset checks, and binary persistence. It handles structured data through `t`, `Elt.t`, and parameterized types, enabling deserialization, validation, and efficient storage. Operations include checking entity relationships, generating hashes, and converting between formats for configuration consistency. For example, it can verify that a configuration subset matches a model or serialize a port set for binary storage.",
      "description_length": 552,
      "index": 518,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Frenetic_kernel.Packet.Ip.Flags",
      "description": "Encodes and decodes flag configurations between OCaml values and S-expression representations. Works with a structured type containing flag definitions and their associated values. Used to serialize and deserialize command-line or configuration flags for storage or transmission.",
      "description_length": 279,
      "index": 519,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Packet.Tcp.Flags",
      "description": "Represents TCP header flags with operations to convert between the flag structure and S-expression format. Works with a record type containing boolean fields for each flag. Used to serialize and deserialize TCP flag states in network protocol implementations.",
      "description_length": 259,
      "index": 520,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Packet.Igmp3.GroupRec",
      "description": "Represents a multicast group with a list of source addresses, supporting serialization and deserialization via S-expressions. Operates on a record type containing group and source information. Used to encode and decode network group configurations in protocol data structures.",
      "description_length": 276,
      "index": 521,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Packet.Dns.Qd",
      "description": "Provides serialization and deserialization between a custom type and S-expressions using `t_of_sexp` and `sexp_of_t`. Works with a record type containing fields for financial data such as price and quantity. Used to convert internal representations to and from S-expressed data in parsing and communication protocols.",
      "description_length": 317,
      "index": 522,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Packet.Dns.Rr",
      "description": "Provides serialization and deserialization between a custom type and S-expressions using `t_of_sexp` and `sexp_of_t`. Works with a record type containing fields defined in the module's signature. Used to convert instances of the type to and from S-expression representations for configuration or data interchange.",
      "description_length": 313,
      "index": 523,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Error.HelloFailed",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a pretty-printing function for converting instances to strings. Works with a private type `t` defined within the module. Used to encode and decode structured data for logging, configuration, or inter-process communication.",
      "description_length": 317,
      "index": 524,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Error.BadRequest",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a pretty-printing function for converting instances to strings. Works with an opaque type representing invalid request data. Used to handle malformed HTTP requests by converting them into a structured format for error reporting.",
      "description_length": 323,
      "index": 525,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Error.BadAction",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a pretty-printing function for converting instances to strings. Works with an opaque type representing invalid or erroneous actions. Used to encode and decode action data in a structured, human-readable format for logging or configuration.",
      "description_length": 334,
      "index": 526,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Error.FlowModFailed",
      "description": "Handles serialization and deserialization of flow failure data using S-expressions. Converts between the internal representation and string format for logging or debugging. Works with the opaque type `t` that encapsulates flow failure details.",
      "description_length": 243,
      "index": 527,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Error.PortModFailed",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a pretty-printing function for human-readable output. Works with an opaque type representing port modification failure states. Used to encode and decode error details in a structured, readable format for logging or communication.",
      "description_length": 324,
      "index": 528,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Error.QueueOpFailed",
      "description": "Handles serialization and deserialization of error states using S-expressions. Operates on an abstract type representing queue operation failures. Converts error values to and from string representations for logging or debugging purposes.",
      "description_length": 238,
      "index": 529,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.FlowRemoved.Reason",
      "description": "Converts a flow removal reason to a string representation and an 16-bit integer, and maps an 16-bit integer back to the corresponding flow removal reason. Works with the `flowRemovedReason` data type and `Packet.int16` for numeric encoding. Used to serialize and deserialize flow removal reasons in network protocol interactions.",
      "description_length": 329,
      "index": 530,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.FlowMod.Command",
      "description": "Converts a flow modification command to a string representation, maps it to a 16-bit integer, and reconstructs the command from a 16-bit integer. Works with the `flowModCommand` type, which represents specific actions in flow management. Used to serialize and deserialize command values in network protocol interactions.",
      "description_length": 320,
      "index": 531,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.SwitchFeatures.Capabilities",
      "description": "Provides operations to convert between a capability representation and S-expressions, as well as a string representation that pretty-prints the value. Works with a record type containing fields for each capability flag. Used to serialize and deserialize OpenFlow 1.0 capability sets during protocol communication.",
      "description_length": 313,
      "index": 532,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.SwitchFeatures.SupportedActions",
      "description": "Provides operations to convert between a custom action set type and S-expressions, along with a string representation function. Works with a record type containing action-specific data. Used to serialize and deserialize supported actions for configuration or logging purposes.",
      "description_length": 276,
      "index": 533,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.SwitchConfig.FragFlags",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a string representation. Works with an opaque type encapsulating flag states. Used to convert flag configurations for logging and persistent storage.",
      "description_length": 244,
      "index": 534,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.PortStatus.ChangeReason",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a string representation. Works with an opaque type representing change reasons in a system. Used to encode and decode change reasons in persistent data stores and logs.",
      "description_length": 263,
      "index": 535,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.PortDescription.PortConfig",
      "description": "Converts a port configuration value to a string representation and to a 32-bit integer, and reconstructs the value from a 32-bit integer. Works with a custom portConfig type representing network port settings. Used to serialize and deserialize port numbers in network communication protocols.",
      "description_length": 292,
      "index": 536,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.PortDescription.PortState",
      "description": "Encodes and decodes 32-bit integers into a custom state representation, supporting string serialization for system-level communication. It handles conversions between Core.Int32.t and a private stpState type. Operations include serializing state values for transmission and parsing incoming strings into numeric identifiers. This enables precise manipulation of state data in low-level interactions.",
      "description_length": 399,
      "index": 537,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.PortDescription.PortFeatures",
      "description": "Converts a port features value to and from a 32-bit integer, with a string representation for debugging. Operates on a custom type representing network port configuration flags. Used to serialize and deserialize port settings in low-level network protocol implementations.",
      "description_length": 272,
      "index": 538,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Topology",
      "description": "Manages network graph structures by handling node and edge representations, weight conversions, and entity serialization. Provides operations for parsing and generating DOT, GML, and S-expression formats, with support for comparing, adding, and serializing data. Enables structured data handling through custom types, binary persistence, and key-based lookups, facilitating tasks like configuration validation and graph visualization. Examples include converting edge weights to integers, generating unique hashes for entities, and serializing port values for efficient storage.",
      "description_length": 578,
      "index": 539,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Traverse",
      "description": "Performs breadth-first and depth-first traversal of a graph structure, applying a given function to each vertex. Operates on a topology data type representing graph nodes and connections. Used to process all nodes in a graph in a specific order, such as exploring all reachable nodes from a starting point.",
      "description_length": 306,
      "index": 540,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Path",
      "description": "Handles path data with operations for combining paths, comparing their weights, and converting between path representations and S-expressions. Works with a custom `t` type representing paths and an `edge` type derived from Topology. Used to construct and manipulate weighted path structures in graph-based algorithms.",
      "description_length": 317,
      "index": 541,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.UnitPath",
      "description": "Calculates shortest paths between vertices in a graph using edge lists, with options to retrieve a single path, all shortest paths from a vertex, or all pairs satisfying a condition. Operates on graph topologies, vertices, and edges, returning paths as lists of edges or weighted path information. Used for network routing optimization and graph traversal analysis.",
      "description_length": 365,
      "index": 542,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Parse",
      "description": "Loads graph data from DOT and GML files into a topology structure, supporting network analysis and visualization workflows. Processes structured text formats to construct graph representations used in simulation and graph theory applications. Accepts file paths and returns fully initialized graph models for further processing.",
      "description_length": 328,
      "index": 543,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net.Pretty",
      "description": "Generates string representations of network topologies in multiple formats, including human-readable, DOT graph, and Mininet configuration styles. Operates on the `Topology.t` type, which models network node and link relationships. Used to visualize topologies for debugging, documentation, or integration with network simulation tools.",
      "description_length": 336,
      "index": 544,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.GroupStats.BucketStats",
      "description": "Provides operations to calculate the size of a bucket statistics structure, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents OpenFlow bucket statistics as defined in section 7.3.5.9. Used to process and inspect flow statistics data in network protocol implementations.",
      "description_length": 355,
      "index": 545,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.QueueDesc.QueueProp",
      "description": "Provides operations to calculate the size of a queue property, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `queueProp` data type, which represents properties of a queue as defined in OpenFlow 1.3.4. Used to handle queue configuration data during packet processing and network protocol interactions.",
      "description_length": 363,
      "index": 546,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.Hello.Element",
      "description": "Calculates, converts, and serializes/deserializes version bitmaps using the `supportedList` type, which represents supported OpenFlow versions. Operations include determining the size of the bitmap, converting it to a string, and reading/writing it from a Cstruct buffer. This enables efficient handling of version information in OpenFlow protocol messages. For example, it can encode a list of supported versions into a compact binary format or parse such data from a network packet.",
      "description_length": 484,
      "index": 547,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow.Pattern.Ip",
      "description": "Provides operations to serialize and deserialize IP address patterns, compare them for equivalence and ordering, compute joins and intersections, and check compatibility. Works with a tuple type representing an IP address and a mask. Used to manipulate and analyze network address patterns in packet filtering or routing logic.",
      "description_length": 327,
      "index": 548,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Topology",
      "description": "Combines serialization, validation, and comparison for graph and structured data, supporting S-expressions, Bin_prot, and format-specific conversions. Handles vertex and edge representations, weights, and custom types with operations for parsing, validation, and ordered processing. Enables tasks like converting DOT files to graph structures, validating configuration hierarchies, and generating hash-based identifiers. Provides tools for efficient data manipulation, including weight arithmetic, subset checks, and binary serialization.",
      "description_length": 538,
      "index": 549,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Traverse",
      "description": "Performs breadth-first and depth-first traversal of a graph structure, applying a given function to each vertex. Operates on a topology representation that includes vertices and their connections. Used to explore all nodes in a graph for analysis or processing tasks.",
      "description_length": 267,
      "index": 550,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Path",
      "description": "Handles path operations with weighted edges, supporting addition, comparison, and conversion to/from S-expressions. Works with a custom `t` type representing paths and an `edge` type derived from Topology. Used for constructing and manipulating weighted path structures in graph algorithms.",
      "description_length": 290,
      "index": 551,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.UnitPath",
      "description": "Calculates shortest paths between vertices in a graph using edge lists, with options to retrieve a single path, all shortest paths from a source, or all pairs satisfying a condition. Operates on graph topologies, vertices, and edges, returning paths as lists of edges or weighted path information. Used for network routing optimization and graph traversal analysis.",
      "description_length": 365,
      "index": 552,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Parse",
      "description": "Loads graph data from DOT and GML files into a topology structure, supporting network analysis and visualization workflows. Processes file contents to construct directed and undirected graph representations. Used to initialize graph models from external configuration files.",
      "description_length": 274,
      "index": 553,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net.Pretty",
      "description": "Generates string representations of network topologies, including a human-readable format, a DOT language format for visualization, and a Mininet configuration script with optional header and footer files. Operates on the Topology.t data structure, which models network nodes and connections. Used to create visual diagrams and configure Mininet simulations directly from topology data.",
      "description_length": 386,
      "index": 554,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Make",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with comparison, string conversion, and graph format parsing from DOT and GML. Works with a polymorphic type `t` that represents graph configurations. Used to convert graph data between file formats and in-memory representations for analysis or visualization.",
      "description_length": 349,
      "index": 555,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Node",
      "description": "Provides operations to convert between a node structure and S-expressions, compare nodes, and generate string representations for visualization (DOT, Mininet) and parsing from DOT and GML formats. Works with a node type containing a name, unique ID, device information, MAC address, and IP address. Used to construct and serialize network node data for graph rendering and configuration generation.",
      "description_length": 398,
      "index": 556,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Link",
      "description": "Provides serialization and deserialization between a graph link representation and S-expressions, along with comparison, string conversion, and DOT format generation. Works with a custom type `t` that encapsulates numeric attributes such as cost, capacity, and weight. Used to construct and manipulate graph links from DOT and GML formats, and to adjust link properties dynamically.",
      "description_length": 382,
      "index": 557,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Net",
      "description": "Computes shortest paths between vertices using a graph topology, returning edge lists representing the optimal routes. It handles weighted graphs and provides path data for individual pairs or all pairs of vertices. The module supports custom filtering for path selection based on vertex relationships.",
      "description_length": 302,
      "index": 558,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.NetPath",
      "description": "Calculates shortest paths between vertices in a network topology, returning edge lists representing the optimal routes. It supports finding single shortest paths, all shortest paths from a source, and all pairs of vertices meeting a custom criterion. Operates on graph structures defined by Net.Topology, using floating-point weights to model path costs.",
      "description_length": 354,
      "index": 559,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Tcp",
      "description": "Encapsulates TCP header flag operations, enabling conversion between structured boolean records and S-expression representations. Provides functions to manipulate and inspect individual flags such as SYN, ACK, and FIN. Allows for precise control over TCP state serialization in protocol handling. Example uses include parsing incoming packets and generating custom TCP headers for network communication.",
      "description_length": 403,
      "index": 560,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Udp",
      "description": "Encodes and decodes UDP packet data using S-expressions. Works with a structured type containing fields specific to UDP frames. Used to serialize and deserialize network packet metadata in a format suitable for parsing and transmission.",
      "description_length": 236,
      "index": 561,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Icmp",
      "description": "Handles parsing and serialization of ICMP protocol data. Works with a structured type representing ICMP headers and payloads. Used to convert ICMP data between S-expression format and native OCaml representation for processing network packets.",
      "description_length": 243,
      "index": 562,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Packet.Dns",
      "description": "Encapsulates DNS packet structures with S-expression serialization and deserialization capabilities. Defines record types for DNS headers, questions, and answers, supporting conversion between in-memory representations and S-expressions. Enables parsing and generation of DNS data for configuration, logging, and network communication. Examples include converting a DNS query to an S-expression for storage or reconstructing a response from a serialized format.",
      "description_length": 461,
      "index": 563,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Igmp1and2",
      "description": "Encodes and decodes IGMP version 1 and 2 message structures from and to S-expressions. Processes raw message data including group addresses, multicast group memberships, and query parameters. Supports parsing and serialization for network protocol interactions.",
      "description_length": 261,
      "index": 564,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Igmp3",
      "description": "Encapsulates multicast group configurations with associated source addresses, enabling structured representation and conversion to and from S-expressions. The core data type is a record containing group and source address lists, supporting operations for encoding and decoding. It allows precise manipulation of group membership details in network protocol interactions. For example, it can serialize a group with multiple sources into a compact S-expression format for transmission.",
      "description_length": 483,
      "index": 565,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Packet.Igmp",
      "description": "Converts IGMP message data between OCaml values and S-expression representations. Works with message and packet data types derived from network frame structures. Enables serialization and deserialization of IGMP frames for logging or protocol analysis.",
      "description_length": 252,
      "index": 566,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Ip",
      "description": "Encodes and decodes structured data between a custom type `t` and S-expressions, enabling efficient storage and retrieval of configuration flags. The `t` type encapsulates packet-related settings, supporting operations like parsing and generating S-expressions. This allows for easy manipulation of flag configurations in both human-readable and machine-processable forms. For example, a flag set can be serialized to an S-expression string or parsed back into a `t` value for use in packet processing.",
      "description_length": 502,
      "index": 567,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet.Arp",
      "description": "Handles parsing and serialization of ARP packet payloads using S-expressions. Operates on the `t` type, which represents the structure of an ARP message. Converts between the internal representation and S-expression format for data interchange.",
      "description_length": 244,
      "index": 568,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.Common",
      "description": "Measures execution time of a function and returns the result, formats log messages with severity levels, extracts path components from HTTP requests, handles parsing errors in request bodies, and parses policy and configuration data from JSON payloads. Operates on functions, HTTP requests, body streams, and policy/configuration data structures. Used to time critical operations, log structured messages, process URL paths, recover from malformed inputs, and deserialize network control plane data.",
      "description_length": 499,
      "index": 569,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.Compile_Server",
      "description": "Handles the initialization and execution of a compilation server process, accepting command-line arguments to configure its behavior. Operates with integer-based exit codes and unit-returning callbacks to manage server lifecycle events. Used to start a persistent compilation service that processes build requests asynchronously.",
      "description_length": 329,
      "index": 570,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.DynGraph",
      "description": "Provides functions to construct and manage dataflow graphs where values propagate between nodes. Operates on node types that can either receive or cannot receive values, enabling controlled data flow. Used to push updates to nodes, attach sources to sinks, and integrate with asynchronous pipes for real-time data processing.",
      "description_length": 325,
      "index": 571,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Async.Http_Controller",
      "description": "Handles HTTP request routing and response generation using custom handlers. Operates on request and response records with defined headers and body formats. Processes incoming connections on specified ports and executes associated action functions.",
      "description_length": 247,
      "index": 572,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.Logging",
      "description": "The module provides configurable logging operations to manage global log settings such as severity levels, output destinations, and message formatting, alongside methods to emit structured data (Core.Sexp.t) and strings with timestamps, tags, and context-aware logging. It supports use cases like application monitoring, debugging, and event tracking by enabling both direct logging and deferred action wrapping.",
      "description_length": 412,
      "index": 573,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.NetKAT_Controller",
      "description": "Initiates a controller instance on a specified port and processes OpenFlow events, switch features, and statistics. It manages flow and port statistics, sends packet-out messages, and applies policy updates to switches using a local compiler. Supports dynamic network policy enforcement and monitoring through asynchronous interactions with OpenFlow-enabled devices.",
      "description_length": 366,
      "index": 574,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.OpenFlow0x01_Plugin",
      "description": "provides low-level access to memory and binary data through specialized types like buffers and pointers, enabling direct manipulation and system-level operations. it supports raw data reading, memory allocation, and binary format handling. users can interact with unmanaged memory and process structured data at the byte level. examples include parsing network packets and managing custom binary protocols.",
      "description_length": 406,
      "index": 575,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.OpenFlow0x04_Plugin",
      "description": "Handles message transmission and flow/table management for OpenFlow 1.0 protocols, including group table implementation, flow entry installation, and metadata masking. Operates on OpenFlow messages, group tables, and flow layouts, interacting with switch identifiers and network topologies. Processes incoming messages, manages client communication, and supports fault-tolerant flow deployment in network control applications.",
      "description_length": 426,
      "index": 576,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.Ox",
      "description": "Handles connection and disconnection events for OpenFlow switches, processes incoming packets with transaction IDs, and manages barrier and statistics replies from switches. Operates on switch identifiers, transaction IDs, and OpenFlow packet and reply structures. Used to implement custom logic for switch interactions and cleanup after errors in a network controller.",
      "description_length": 369,
      "index": 577,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Async.Shell",
      "description": "Handles command-line argument parsing and execution of shell commands, accepting an integer exit code and a function to execute. Operates with system-level input and output streams, integrating with process management. Used to launch and manage external programs from within OCaml applications.",
      "description_length": 294,
      "index": 578,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Wildcards",
      "description": "Converts wildcard patterns between string and integer representations, enabling efficient storage and comparison. Operates on the `wildcards` type, which encodes pattern matching rules. Used to serialize and deserialize patterns in network communication or persistent storage.",
      "description_length": 276,
      "index": 579,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Match",
      "description": "Converts a pattern to its string representation, serializes a pattern into a byte buffer, parses a byte buffer into a pattern, and returns the size of a pattern in bytes. Works with custom pattern data types used for network protocol matching. Used to generate human-readable logs, transmit patterns over networks, and validate packet structures during parsing.",
      "description_length": 361,
      "index": 580,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.PseudoPort",
      "description": "Converts a pseudo-port representation to a string, encodes it as an integer, and constructs a pseudo-port from two integer parameters. Works with a custom type representing network port-like values. Used to generate consistent identifiers for network services in distributed systems.",
      "description_length": 283,
      "index": 581,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Timeout",
      "description": "Handles conversion between timeout values and their string or integer representations. Operates on a custom timeout type encapsulating duration data. Used to serialize timeout settings for logging or configuration output.",
      "description_length": 221,
      "index": 582,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Action",
      "description": "Moves actions that send packets to the controller to the end of a sequence to work around an OpenFlow switch bug. Converts actions and action sequences to strings, serializes actions into byte buffers, parses byte buffers into actions, and calculates the size of actions. Works with action lists and individual action records.",
      "description_length": 326,
      "index": 583,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.FlowMod",
      "description": "Encodes and decodes network flow modification commands using the `flowModCommand` type, supporting conversion to and from string and 16-bit integer formats. Provides functions to serialize commands for logging or transmission and to parse command values from network data. Allows precise manipulation of flow control actions such as add, delete, or modify. Examples include converting \"add\" to its integer equivalent or parsing a received command byte into a structured type.",
      "description_length": 475,
      "index": 584,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.FlowRemoved",
      "description": "Encodes and decodes flow removal reasons between string, integer, and enumerated representations using a 16-bit integer mapping. Supports bidirectional conversion for the `flowRemovedReason` type. Allows serialization of events like \"timeout\" or \"admin-down\" into numeric codes and reconstruction from received values. Enables consistent handling of flow removal semantics across protocol interactions.",
      "description_length": 402,
      "index": 585,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.PacketOut",
      "description": "Converts a packetOut value to its string representation, enabling human-readable logging or debugging. Operates on a custom data type representing network packets. Used to serialize packet data for transmission logs or error reporting.",
      "description_length": 235,
      "index": 586,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.PortDescription",
      "description": "Converts port configuration, state, and features between string, integer, and structured representations using specialized data types. Provides serialization and deserialization functions for network protocol interactions, including `portConfig`, `stpState`, and `portFeatures` types. Enables precise manipulation of port identifiers, state values, and feature flags in both network communication and logging scenarios. Examples include encoding port settings for transmission, decoding state values from received data, and generating debug logs with human-readable port feature descriptions.",
      "description_length": 592,
      "index": 587,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.PortStatus",
      "description": "Encodes and decodes an opaque type representing system change reasons using S-expressions and string formats. Supports persistent storage and logging by converting between internal representations and serialized forms. Allows parsing of human-readable strings into structured change reason data. Enables consistent handling of change metadata across system components.",
      "description_length": 368,
      "index": 588,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.SwitchFeatures",
      "description": "Encapsulates OpenFlow 1.0 capability and action sets, enabling serialization and deserialization to and from S-expressions and human-readable strings. Supports a record type for capability flags and another for action-specific data, allowing precise manipulation of protocol elements. Converts between internal representations and external formats for communication, configuration, or logging. Examples include printing a capability set as a string or parsing an action set from an S-expression.",
      "description_length": 495,
      "index": 589,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.SwitchConfig",
      "description": "Encodes and decodes flag sets using S-expressions and textual formats, working with an opaque flag collection type. Supports converting flag states to and from strings for configuration and logging. Allows parsing of flag configurations from text and generating human-readable outputs. Enables precise manipulation and representation of boolean flag combinations in system settings.",
      "description_length": 382,
      "index": 590,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.StatsRequest",
      "description": "Handles serialization and deserialization of request data using Sexp format, and converts request instances to human-readable strings. Operates on a custom type representing a request. Used to encode and decode request structures in data interchange scenarios.",
      "description_length": 260,
      "index": 591,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.StatsReply",
      "description": "Provides serialization and deserialization functions for network reply data, including S-expression and byte buffer conversions. Works with a custom `t` type representing structured network responses. Parses binary data into structured replies and generates string representations for logging or transmission.",
      "description_length": 309,
      "index": 592,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Error",
      "description": "Encapsulates error-related data through private or opaque types, enabling serialization and deserialization to and from S-expressions and generating human-readable string representations. Each module handles distinct error conditions, such as invalid requests, flow modifications, port changes, and queue operations. Operations include converting error states to structured formats for logging, debugging, or communication. Examples include encoding a malformed request, serializing a flow update failure, or converting a port configuration error to a readable string.",
      "description_length": 568,
      "index": 593,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Vendor",
      "description": "Handles conversion between a vendor message representation and S-expressions, as well as parsing and marshaling vendor messages from and to Cstruct buffers. Operates on a tuple type containing an int32 vendor ID and a Cstruct.t payload. Used to serialize and deserialize OpenFlow vendor messages in network protocol implementations.",
      "description_length": 332,
      "index": 594,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01.Message",
      "description": "Provides functions to serialize, parse, and manipulate OpenFlow 1.0 messages, including converting between S-expressions and message structures, calculating serialized sizes, and extracting headers. Works with message bodies, transaction IDs, and OpenFlow headers to handle network protocol data. Used to process incoming message buffers, generate serialized outputs, and inspect message contents during protocol communication.",
      "description_length": 427,
      "index": 595,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Hashcons.Make",
      "description": "Provides operations to convert between a type `t` and S-expressions, compare instances of `t`, and compute hash values for use in hash tables. Works with the abstract type `t` and relies on Sexp serialization for interoperability. Used to enable persistent storage, equality checks, and efficient lookups in data structures.",
      "description_length": 324,
      "index": 596,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology.Net",
      "description": "Computes shortest paths between vertices using a graph topology, returning edge lists representing the optimal routes. It handles weighted graphs and provides individual, pairwise, and all-pairs path computations. Used for network routing optimization and graph traversal analysis.",
      "description_length": 281,
      "index": 597,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Topology.Mininet",
      "description": "Constructs a network topology from a named configuration, using a custom type to represent topology identifiers. Operates on Frenetic_kernel.Network.Net.Topology.t to define network layouts. Used to initialize specific network topologies for testing and simulation scenarios.",
      "description_length": 275,
      "index": 598,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.PortConfig",
      "description": "Encodes and decodes port configuration values between an integer representation and a typed value. Processes OpenFlow port configuration flags using bitwise operations. Converts configuration values to human-readable strings for logging or debugging purposes.",
      "description_length": 259,
      "index": 599,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.PortFeatures",
      "description": "Encodes and decodes port feature flags using 32-bit integers, mapping between the OpenFlow port features enumeration and an opaque type. Provides string representation for debugging and logging purposes. Used to interpret and generate port feature values in OpenFlow protocol messages.",
      "description_length": 285,
      "index": 600,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.Oxm",
      "description": "Handles OpenFlow 1.3.4 OXM fields, providing serialization, parsing, and conversion functions for network match data. Operates on the `t` type, representing OXM fields with methods to extract names, compute sizes, and convert to strings. Used to process and generate OpenFlow match fields from pattern representations in network control applications.",
      "description_length": 350,
      "index": 601,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.PseudoPort",
      "description": "Provides operations to determine the size of a pseudoPort, convert it to a string representation, and marshal it into an int32. Works with the `t` type, which represents a pseudoPort. Used to serialize and inspect pseudoPort values in network packet processing.",
      "description_length": 261,
      "index": 602,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.QueueDesc",
      "description": "Handles queue property data using the `t` type, enabling size calculation, string conversion, and serialization/deserialization from Cstruct buffers. Supports manipulation of queue configuration details essential for network protocol interactions. Examples include converting a queue property to a string for logging or parsing incoming queue data from a network buffer. Facilitates efficient data handling during packet processing workflows.",
      "description_length": 442,
      "index": 603,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.SwitchConfig",
      "description": "Provides operations to calculate the size of a switch configuration, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `switchConfig` data type, which represents OpenFlow switch settings. Used to handle protocol-specific data during network communication and configuration management.",
      "description_length": 343,
      "index": 604,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.OfpMatch",
      "description": "Provides functions to calculate the size of a flow match, marshal it into a Cstruct, parse it from a Cstruct, and generate a string representation. Works with the oxmMatch type, which represents OpenFlow 1.3.4 flow match entries. Used to serialize and deserialize match structures during packet processing in network protocols.",
      "description_length": 327,
      "index": 605,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.Action",
      "description": "Provides functions to serialize, parse, and inspect OpenFlow action structures, including size calculation, string representation, and conversion from OpenFlow action types. Operates on custom types representing individual actions and action sequences. Used to process and manipulate OpenFlow messages in network control protocols.",
      "description_length": 331,
      "index": 606,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.Bucket",
      "description": "Provides operations to calculate the size of a bucket, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a bucket structure as defined in OpenFlow 1.3.4. Used to handle bucket data during protocol message encoding and decoding in network switching implementations.",
      "description_length": 350,
      "index": 607,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.FlowModCommand",
      "description": "Handles serialization and deserialization of flow modification commands in OpenFlow 1.3.4, including calculating size, converting to and from byte representations, and generating human-readable strings. Operates on the `t` type, which encapsulates specific flow modification command values. Used to process and inspect flow entry updates in network control protocols.",
      "description_length": 367,
      "index": 608,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.GroupType",
      "description": "Converts group type values to and from integers, and provides a string representation for debugging. Works with the `t` type, which corresponds to OpenFlow group type identifiers. Used to serialize and deserialize group type information in network protocol implementations.",
      "description_length": 273,
      "index": 609,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.GroupMod",
      "description": "Provides functions to calculate the size of a group modification message, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `groupMod` data type, which represents OpenFlow group modification messages. Used to encode and decode group modification commands in network protocol implementations.",
      "description_length": 350,
      "index": 610,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.PortMod",
      "description": "Provides functions to calculate the size of a port modification message, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `portMod` data type, which represents OpenFlow port modification messages. Used to encode and decode port configuration updates in network control protocols.",
      "description_length": 339,
      "index": 611,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.MeterMod",
      "description": "Provides functions to calculate the size of a meter modification structure, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `meterMod` data type defined in the OpenFlow 1.3.4 specification. Used to encode and decode meter configuration updates in network protocol implementations.",
      "description_length": 341,
      "index": 612,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.Instruction",
      "description": "Provides functions to calculate the size of an instruction, marshal it into a Cstruct, parse it from a Cstruct, and generate a string representation. Works with the `t` type, which represents an OpenFlow instruction. Used to process and serialize OpenFlow protocol instructions during network packet handling.",
      "description_length": 309,
      "index": 613,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.Instructions",
      "description": "Provides operations to determine the size of an instruction list, marshal instructions into a buffer, parse instructions from a buffer, and convert instructions to a human-readable string. Works with OpenFlow instructions represented as a list of instruction types. Used to serialize and deserialize OpenFlow group instructions during network protocol handling.",
      "description_length": 361,
      "index": 614,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.FlowMod",
      "description": "Provides functions to calculate the size of a flow modification message, marshal it into a Cstruct, parse it from a Cstruct, and generate a string representation. Works with the `t` type, which represents a flowMod structure as defined in OpenFlow 1.3.4. Used to serialize and deserialize flow modification commands in network protocol implementations.",
      "description_length": 352,
      "index": 615,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.Capabilities",
      "description": "Converts between an integer representation and a capabilities type, with support for string formatting. Operates on an opaque type representing OpenFlow capabilities flags. Used to interpret and display protocol-specific feature flags from network switches.",
      "description_length": 257,
      "index": 616,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.SwitchFeatures",
      "description": "Provides operations to calculate the size of a switch features structure, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents OpenFlow switch features data. Used to handle protocol-specific encoding and decoding during network communication.",
      "description_length": 325,
      "index": 617,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.PortState",
      "description": "Encodes and decodes port state values between their integer representation and an enumerated type. Processes values corresponding to OpenFlow port states such as up, down, or error. Converts port state values to human-readable string representations.",
      "description_length": 250,
      "index": 618,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.PortDesc",
      "description": "Provides functions to calculate the size of a port description, marshal it into a Cstruct, parse it from a Cstruct, and generate a string representation. Works with the `t` type, which represents a port description as defined in OpenFlow 1.3.4. Used to serialize and deserialize port metadata in network protocol implementations.",
      "description_length": 329,
      "index": 619,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.PortStatus",
      "description": "Provides functions to calculate the size of a port status structure, marshal it into a Cstruct, parse it from a Cstruct, and generate a string representation. Works with the `t` type, which represents OpenFlow port status information. Used to serialize and deserialize port status messages in network protocol implementations.",
      "description_length": 326,
      "index": 620,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.PacketIn",
      "description": "Provides functions to calculate the size of a packet, convert it to a string representation, and marshal or parse it from a Cstruct buffer. Works with the `packetIn` data type, which represents a packet received by the datapath. Used to process incoming packets for controller communication in network protocols.",
      "description_length": 312,
      "index": 621,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.PacketOut",
      "description": "Handles serialization and inspection of packet-out messages in OpenFlow 1.3.4. Provides size calculation, string representation, and conversion between raw buffer structures and structured packet-out objects. Used to encode and decode packet-out actions for communication with network switches.",
      "description_length": 294,
      "index": 622,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.MeterBand",
      "description": "Provides operations to calculate the size of a meter band, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents meter band structures as defined in OpenFlow 1.3.4. Used to encode and decode meter band data during protocol communication.",
      "description_length": 319,
      "index": 623,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.FlowRemoved",
      "description": "Provides operations to calculate the size of a flow removal message, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a flow removal event as defined in OpenFlow 1.3.4. Used to handle communication with switches during flow deletion events.",
      "description_length": 327,
      "index": 624,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.FlowRequest",
      "description": "Handles serialization and parsing of flow statistics request structures as defined in OpenFlow 1.3.4. Provides size calculation, string representation, and binary marshaling/parsing operations for flowRequest type. Used to generate and interpret network flow query messages in protocol implementations.",
      "description_length": 302,
      "index": 625,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.QueueRequest",
      "description": "Encodes and decodes queue request messages using Cstruct buffers, with functions to calculate size and convert to string. Operates on the `t` type representing OpenFlow queue request structures. Used to process queue statistics requests in network protocol implementations.",
      "description_length": 273,
      "index": 626,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.TableFeatureProp",
      "description": "Provides functions to serialize, parse, and determine the size of table feature properties. Operates on the `t` type, which represents OpenFlow table feature properties. Used to encode and decode specific table feature data structures in network protocol implementations.",
      "description_length": 271,
      "index": 627,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.TableFeature",
      "description": "Provides operations to compute the size of table feature structures, marshal them into Cstruct buffers, parse them from Cstruct buffers, and generate human-readable representations. Works with the `t` type, which represents OpenFlow table features as defined in section 7.3.5.5.1. Used to serialize and deserialize table feature data during protocol message handling.",
      "description_length": 367,
      "index": 628,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.MultipartReq",
      "description": "Handles parsing and serialization of OpenFlow multipart request messages. Operates on the `multipartRequest` type, providing size calculation, string representation, and binary marshaling. Used to encode and decode specific OpenFlow protocol messages such as barrier requests or table features queries.",
      "description_length": 302,
      "index": 629,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.GroupStats",
      "description": "Calculates, converts, and serializes OpenFlow 1.3.4 bucket statistics using the `t` type. Supports operations to determine structure size, generate string representations, and read/write from Cstruct buffers. Enables inspection and manipulation of flow statistics in network protocol processing. Example tasks include logging bucket details or transmitting structured data over a network.",
      "description_length": 388,
      "index": 630,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.SwitchDescriptionReply",
      "description": "Provides operations to calculate the size of a switch description, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `switchDesc` data type, which encapsulates details about an OpenFlow switch. Used to handle protocol messages in network control plane implementations.",
      "description_length": 327,
      "index": 631,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.FlowStats",
      "description": "Calculates the size of a flow statistics object, converts it to a string representation, and serializes/deserializes it into a Cstruct buffer. Works with the `flowStats` data structure defined in the OpenFlow 1.3.4 specification. Used to process and inspect individual flow entries in network monitoring and packet analysis workflows.",
      "description_length": 334,
      "index": 632,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.AggregateStats",
      "description": "Calculates the size of an aggregate statistics structure, converts it to a string representation, and marshals or parses it from a Cstruct buffer. Works with the `t` type, which represents OpenFlow aggregate flow statistics. Used to serialize and deserialize flow statistics data during network protocol interactions.",
      "description_length": 317,
      "index": 633,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.TableStats",
      "description": "Calculates the size of a table statistics structure, converts it to a string representation, and marshals or parses it from a Cstruct buffer. Works with the `tableStats` type defined in the OpenFlow 1.3.4 specification. Used to serialize and deserialize table statistics data during protocol communication.",
      "description_length": 306,
      "index": 634,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.PortStats",
      "description": "Provides operations to calculate the size of port statistics data, convert them to string representations, and serialize or deserialize them from Cstruct buffers. Works with the `portStats` data type, which encapsulates network port performance metrics. Used to process OpenFlow protocol messages that require encoding or decoding of port-level statistics.",
      "description_length": 356,
      "index": 635,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.QueueStats",
      "description": "Calculates the size of a queue statistics structure, converts it to a string representation, and serializes/deserializes it into a Cstruct buffer. It operates on the `t` type, which represents OpenFlow queue statistics as defined in section 7.3.5.8. Used for handling network traffic statistics in protocol parsing and logging scenarios.",
      "description_length": 337,
      "index": 636,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.GroupDesc",
      "description": "Provides operations to calculate the size of a group description, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `groupDesc` data type, which represents group metadata in OpenFlow 1.3.4. Used to encode and decode group information during message processing in network protocols.",
      "description_length": 340,
      "index": 637,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.GroupFeatures",
      "description": "Provides operations to calculate the size of group features data, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents group features as defined in OpenFlow 1.3.4. Used to handle protocol-specific data during message encoding and decoding in network control plane implementations.",
      "description_length": 363,
      "index": 638,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.MeterStats",
      "description": "Provides functions to calculate the size of a meter statistics object, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `meterStats` data type defined in the OpenFlow 1.3.4 specification. Used to handle meter statistics messages in network protocol implementations.",
      "description_length": 325,
      "index": 639,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.MeterConfig",
      "description": "Provides functions to calculate the size of a meter configuration, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `meterConfig` data type defined in the OpenFlow 1.3.4 specification. Used to encode and decode meter configuration messages in network protocol implementations.",
      "description_length": 336,
      "index": 640,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.MeterFeatures",
      "description": "Provides operations to calculate the size of a meter features structure, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents OpenFlow meter features as defined in section 7.3.5.14. Used to handle network device capabilities in protocol communication and debugging.",
      "description_length": 348,
      "index": 641,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.MultipartReply",
      "description": "Handles parsing and serialization of OpenFlow multipart reply messages. Operates on the `t` type, which represents structured multipart reply data. Converts messages to and from Cstruct buffers, and computes their size for network transmission.",
      "description_length": 244,
      "index": 642,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.TableMod",
      "description": "Provides functions to calculate the size of a table modification message, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a table modification structure as defined in OpenFlow 1.3.4. Used to process and generate messages for modifying flow tables in network switches.",
      "description_length": 355,
      "index": 643,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.QueueConfReq",
      "description": "Provides functions to calculate the size of a queue configuration request, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a queue configuration request as defined in OpenFlow 1.3.4. Used to handle message encoding and decoding in network protocol implementations.",
      "description_length": 352,
      "index": 644,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.QueueConfReply",
      "description": "Provides functions to calculate the size of a queue configuration response, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents the OpenFlow 1.3.4 queue configuration respond message. Used to handle network protocol messages in low-level packet processing workflows.",
      "description_length": 350,
      "index": 645,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.Error",
      "description": "Handles serialization and parsing of error messages according to OpenFlow 1.3.4. Provides methods to convert error structures to and from byte buffers, determine their size, and generate human-readable representations. Operates on the `t` type, which represents structured error data.",
      "description_length": 284,
      "index": 646,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.RoleRequest",
      "description": "Provides operations to calculate the size of a role request, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a role request message as defined in OpenFlow 1.3.4. Used to handle role request messages in network protocol implementations, such as when exchanging role negotiation details between a controller and a switch.",
      "description_length": 407,
      "index": 647,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.Hello",
      "description": "Handles OpenFlow version data through a custom type `t`, supporting encoding, decoding, and manipulation of version bitmaps. Provides operations for size calculation, string conversion, and serialization/deserialization from Cstruct buffers. Users can convert version lists to strings or extract versions from binary data. Enables precise control over protocol version representation in network messages.",
      "description_length": 404,
      "index": 648,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.AsyncConfig",
      "description": "Provides operations to calculate the size of an asynchronous configuration, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents OpenFlow asynchronous configuration data. Used to handle message formatting and parsing in network protocol implementations.",
      "description_length": 336,
      "index": 649,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04.Message",
      "description": "Provides serialization and deserialization functions for message structures using S-expressions and binary formats. Works with message payloads and OpenFlow headers, supporting operations like size calculation, string conversion, and buffer copying. Used to encode and decode messages with specific transaction IDs in network protocol implementations.",
      "description_length": 351,
      "index": 650,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Bisim",
      "description": "Checks if two automata are bisimilar by implementing the Hopcroft-Karp algorithm for efficient equivalence verification. Operates on automaton structures representing network state transitions. Used to validate behavioral equivalence in network policy implementations.",
      "description_length": 268,
      "index": 651,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Domain",
      "description": "provides a structured way to compare and order field values within network automata, using lexicographical rules applied to Frenetic_netkat.Fdd.Field representations. It supports operations that return integer-based comparisons, facilitating sorted data management and efficient packet processing. Users can define stable orderings for fields, enabling consistent sorting and lookup in network state transitions. For example, it allows determining the relative order of IP addresses or port numbers during rule evaluation.",
      "description_length": 522,
      "index": 652,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.FabricGen",
      "description": "Generates a network fabric by combining forwarding and filtering policies based on specified predicates and topologies. It processes logical and physical network constraints represented as policies and predicates, producing a structured fabric composed of policy lists. This is used to construct network configurations that enforce specific traffic control rules and path definitions.",
      "description_length": 384,
      "index": 653,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Fdd",
      "description": "Encapsulates network policy data through structured field management, value comparison, and pattern manipulation, enabling efficient flow table generation from NetKAT expressions. It handles custom types, including keys, headers, and actions, with operations for parsing, serialization, and conversion between symbolic and binary representations. Core functions include validating field-value pairs, transforming patterns into predicates, and generating hashable representations for efficient processing. Examples include encoding a header field as a binary value, comparing flow patterns for equality, and converting S-expressions into structured data for policy enforcement.",
      "description_length": 676,
      "index": 654,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Generated_Parser",
      "description": "Parses end-of-file conditions into predicate and policy structures using a provided lexer function. Accepts a lexing buffer and token generator to construct NetKAT syntax elements. Used to validate input termination in network policy and predicate analysis.",
      "description_length": 257,
      "index": 655,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Global_compiler",
      "description": "Encodes and decodes S-expressions into structured keys with binary serialization, enabling efficient data storage and lookup, while also supporting operations like converting between formats and inspecting serialized structures. It also handles NetKAT automata, allowing manipulation of transitions, state folding, policy conversion, and DOT rendering for visualization and analysis. Users can optimize data persistence by storing records in compact binary form or analyze network policies through automata transformations. Examples include saving custom data structures to disk or generating visual representations of network policies for verification.",
      "description_length": 653,
      "index": 656,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Json",
      "description": "Converts NetKAT policies and OpenFlow events between JSON and internal representations, handling header values, port statistics, and flow tables. Works with Yojson.Basic.t and NetKAT's policy, header_val, and OpenFlow-specific types. Serializes switch-to-controller messages and deserializes policies from input channels or strings.",
      "description_length": 332,
      "index": 657,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.LexBuffer",
      "description": "Provides functions to create and manipulate a lexing buffer that tracks source locations, including conversion from Sedlex buffers, ASCII strings, and files. Works with OCaml's `Lexing.position` and UChar-based character handling. Used for precise error reporting and token tracking during lexical analysis.",
      "description_length": 307,
      "index": 658,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Lexer",
      "description": "Processes input streams to generate tokens using lexical analysis, supporting parsing from strings, files, and custom buffers. Operates on lexing buffers and returns parsed results based on provided token parsers. Enables structured extraction of syntax elements from source code or configuration data.",
      "description_length": 302,
      "index": 659,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Local_compiler",
      "description": "Provides structured conversion between S-expressions and keyed formats, with support for parsing, serializing, and inspecting key values. It handles Sexp.t and custom key types, enabling efficient data manipulation and storage. Operations include writing to binary files, reading from them, and determining the size and shape of key values. Examples include converting configuration data into a lookup table and persisting keys for fast access.",
      "description_length": 444,
      "index": 660,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Optimize",
      "description": "Constructs and manipulates logical predicates and policies using conjunction, disjunction, negation, and sequence operations. Processes switch-specific predicates and policies, enabling the creation of complex network control plane logic. Supports aggregation of multiple predicates or policies into unified structures and simplifies policy expressions for consistent evaluation.",
      "description_length": 379,
      "index": 661,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Packet",
      "description": "Encapsulates network flow data as a structured map, supporting field comparisons via lexicographical ordering and efficient key-value operations using int64 keys. Enables sorting, serialization, and deterministic comparisons of flow records for protocol-aware processing. Operations include S-expression conversion, hashing, and ordering of map entries. Can be used to compare flow tables, serialize network state, or enforce consistent data representation across systems.",
      "description_length": 472,
      "index": 662,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Parser",
      "description": "Transforms string-based NetKAT policies and predicates into structured abstract syntax trees, retaining positional data for precise error tracking. Supports file-based loading of policy and predicate definitions, converting them into internal representation types for further processing. Enables runtime analysis by validating and parsing expressions, allowing operations like syntax checking and semantic evaluation. Examples include parsing a policy string into a tree, extracting position data for error messages, and loading predicate definitions from a file.",
      "description_length": 563,
      "index": 663,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Portless_Compiler",
      "description": "Processes a policy and topology to generate a portful policy version. Operates on Frenetic_netkat.Syntax.policy and Frenetic_kernel.Network.Net.Topology.t. Used to adapt policies for networks with specific physical port configurations.",
      "description_length": 235,
      "index": 664,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Portless_Generated_Parser",
      "description": "Parses input streams into abstract syntax representations of predicates and policies using a provided lexer. Accepts a lexer function and a lexing buffer to generate structured NetKAT constructs. Processes tokens defined by the `token` type to build policy and predicate objects for network logic evaluation.",
      "description_length": 308,
      "index": 665,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Pretty",
      "description": "Formats NetKAT predicates and policies into human-readable output using OCaml's Format module. Operates on NetKAT syntax types such as `pred` and `policy`, generating strings or writing directly to a formatter. Used to visualize network policies and conditions during debugging or logging.",
      "description_length": 289,
      "index": 666,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Semantics",
      "description": "manages packet data and S-expression conversion, enabling low-level header manipulation and high-level data serialization. It handles packet structures, header fields, and metadata maps, along with S-expressions and their transformations. Users can filter packets by IP, rewrite Ethernet headers, or validate configuration consistency. It supports binary serialization, hash folding, and ordered comparisons for complex data types.",
      "description_length": 431,
      "index": 667,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Syntax",
      "description": "This module provides serialization, deserialization, and comparison operations for NetKAT data structures, including network identifiers, policies, predicates, and headers, with a focus on S-expression conversions. It enables parsing of NetKAT strings into structured representations and supports compiling policies into flow tables, facilitating tasks like network configuration validation and packet processing logic translation. Specific use cases include converting between OCaml types and JSON/sexp formats, as well as handling abstract network locations and metadata in policy definitions.",
      "description_length": 595,
      "index": 668,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Tokens",
      "description": "Provides functions to parse, compare, and transform tokens representing lexical elements such as identifiers, keywords, and operators. Works with the `token` type, which encapsulates structured information about each lexical unit. Used to analyze and process source code during compilation or interpretation.",
      "description_length": 308,
      "index": 669,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat.Virtual_Compiler",
      "description": "Constructs network policies by combining forwarding and filtering rules derived from logical expressions, integrating both virtual and physical topologies. It handles ingress and egress rules to produce a policy list that defines network behavior. Key data types include predicate expressions, topologies, and policy lists, with operations for merging, evaluating, and applying rules. This enables precise control over packet flow in software-defined networks, such as enforcing access control or routing based on dynamic conditions.",
      "description_length": 533,
      "index": 670,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Netkat.Vlr",
      "description": "Provides equality checks, S-expression serialization, and comparison for a custom type. Supports hashing operations and string conversion for efficient storage and representation. Used to enable consistent handling of data in serialized formats and hash-based collections.",
      "description_length": 272,
      "index": 671,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow.Pattern",
      "description": "Encodes and decodes IP address patterns using a tuple of address and mask, enabling precise network filtering and routing decisions. Supports equivalence checks, ordering, and set operations like joins and intersections to manage complex pattern relationships. Allows verification of compatibility between patterns to ensure correct rule application. Examples include merging subnets, determining overlap between ranges, and validating rule sets against known address structures.",
      "description_length": 479,
      "index": 672,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow.To0x01",
      "description": "Converts OpenFlow 1.0 message components from internal representations, including patterns, actions, flows, switch features, payloads, packet-in reasons, and packet-out data. Operates on types such as `Pattern.t`, `action`, `flow`, `switchFeatures`, `payload`, `packetInReason`, and `pktOut`. Used to translate event data into structured OpenFlow 1.0 messages for network controller communication.",
      "description_length": 397,
      "index": 673,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow.From0x01",
      "description": "Converts OpenFlow 1.0 action, switch features, port statistics, and flow statistics into internal representations. Processes switch messages into events tied to specific switch identifiers. Handles message parsing and data transformation for network monitoring and control systems.",
      "description_length": 281,
      "index": 674,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Node",
      "description": "Handles serialization and deserialization of node structures using Sexp format. Operates on the `t` type, which represents a node. Used to convert node data for storage or transmission in a structured text format.",
      "description_length": 213,
      "index": 675,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Net.Link",
      "description": "Provides serialization and deserialization between a graph link representation and S-expressions, as well as comparison, string conversion, and DOT format generation. Works with a custom type `t` representing graph links and parses attributes from DOT and GML formats. Used to convert graph link data between different textual representations for analysis or visualization.",
      "description_length": 373,
      "index": 676,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net.Net",
      "description": "Computes shortest paths between vertices using Dijkstra's algorithm, returning edge lists representing the optimal routes. Handles weighted graphs by processing vertex pairs and generating path data based on custom filtering criteria. Supports bulk computation of all pairs' shortest paths with user-defined constraints on edge inclusion.",
      "description_length": 338,
      "index": 677,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Topology",
      "description": "Encapsulates vertex and edge data with serialization, deserialization, and comparison capabilities, supporting S-expressions and binary formats. Provides operations to convert between custom types, manage weights, validate hierarchical relationships, and generate hashes for consistent data representation. Enables graph construction, configuration validation, and data persistence, such as converting vertices to DOT format or serializing edges to binary. Supports structured data manipulation, including subset checks, arithmetic on weights, and deserialization of complex types from symbolic expressions.",
      "description_length": 607,
      "index": 678,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Traverse",
      "description": "Performs breadth-first and depth-first traversal of a graph structure, applying a given function to each vertex. Operates on a topology data type representing nodes and connections. Used to process all nodes in a graph in a specific order, such as exploring all reachable nodes from a starting point.",
      "description_length": 300,
      "index": 679,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.Path",
      "description": "Handles path operations using a custom type `t` representing paths, with support for arithmetic addition and comparison. Works with `edge` types from the Topology module to construct and manipulate path structures. Serializes and deserializes path and edge data using S-expressions for interoperability.",
      "description_length": 303,
      "index": 680,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Network.UnitPath",
      "description": "Calculates shortest paths between vertices in a graph using edge lists, with support for single-path, all-shortest-paths, and custom-filtered all-pairs computations. Operates on graph topologies, vertices, and weighted edges, returning path data or boolean conditions. Used for route optimization, network analysis, and dependency tracking in structured graphs.",
      "description_length": 361,
      "index": 681,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Parse",
      "description": "Loads graph data from DOT and GML files into a topology structure, supporting network analysis and visualization workflows. Processes structured text representations of graphs, extracting node and edge relationships. Used to initialize graph models from external configuration files in simulation and modeling applications.",
      "description_length": 323,
      "index": 682,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network.Pretty",
      "description": "Generates string representations of network topologies, including a human-readable format, a DOT language format for visualization, and a Mininet script with optional prologue and epilogue files. Operates on the Topology.t data type, which models network node and link relationships. Used to export topology data for debugging, graph rendering, and network simulation setup.",
      "description_length": 374,
      "index": 683,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_async.NetKAT_Controller.Make",
      "description": "Initiates a network controller process, handles OpenFlow event streams, and manages switch configurations and statistics. It interacts with OpenFlow switch identifiers, port identifiers, and flow patterns to query and update network state. Performs actions like sending packet-out messages, retrieving flow and port statistics, and applying policy updates to switches.",
      "description_length": 368,
      "index": 684,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_async.Ox.DefaultHandlers",
      "description": "Handles OpenFlow protocol events by ignoring incoming messages, including switch connection status changes, barrier replies, and statistics responses. Operates on switch identifiers, transaction IDs, and reply structures from the OpenFlow 0x01 protocol. Used to suppress unnecessary logging or processing in controller logic where event handling is not required.",
      "description_length": 362,
      "index": 685,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_async.Ox.Platform",
      "description": "Sends OpenFlow messages such as packet_out, flow_mod, stats_request, and barrier_request to switches, each requiring a switch ID, transaction ID, and message-specific data. Executes thunks with a specified timeout, ensuring operations terminate after a defined duration. Operates with OpenFlow0x01 types including switchId, xid, packetOut, flowMod, request, and barrier.",
      "description_length": 370,
      "index": 686,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_async.Ox.Make",
      "description": "Handles connection and disconnection events for OpenFlow switches, processes incoming packets with transaction IDs, and manages barrier and statistics replies. Operates on switch identifiers, transaction IDs, and OpenFlow message types. Used to monitor switch activity, respond to packet events, and track control plane interactions during network controller operation.",
      "description_length": 369,
      "index": 687,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Semantics.HeadersValues",
      "description": "Maps header names to values, enabling iteration, transformation, and condition-based operations on network packet data. Supports Ethernet, VLAN, IP, and port fields, allowing direct modification or extraction of specific elements. Operations include filtering packets by source IP, rewriting VLAN tags, or updating port numbers. Provides structured access to metadata for detailed packet analysis and processing.",
      "description_length": 412,
      "index": 688,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Semantics.PacketSet",
      "description": "Encapsulates packet data with serialization to and from S-expressions, binary persistence via Bin_prot, and hash generation for structured types. Supports operations on named entities, including subset checks, equality validation, and hierarchical consistency verification. Converts S-expressions to custom types and enables ordered comparisons through a comparator. For example, it can validate a configuration tree's structure, deserialize text into internal representations, and generate unique hashes for complex data.",
      "description_length": 522,
      "index": 689,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.FabricGen.FabricGen",
      "description": "Generates a structured policy fabric from input predicates and policies, combining topological constraints with edge conditions. Operates on syntax-level predicates and policies, producing a tuple of policy lists representing strategic configurations. Used to model adversarial interactions in two-player game scenarios with defined rules and outcomes.",
      "description_length": 352,
      "index": 690,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Virtual_Compiler.Make",
      "description": "Generates a fabric structure from a set of policy and predicate inputs, combining topological and edge constraints. It processes syntax-based policies and predicates to construct a layered network representation. The output is used to model complex system configurations for validation or simulation.",
      "description_length": 300,
      "index": 691,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Global_compiler.FDD",
      "description": "Converts S-expressions to and from a structured key type with custom parsing, enabling efficient data handling and comparison. Supports binary serialization and deserialization for the key type, allowing compact storage and transmission. Operations include size estimation, reading, writing, and shape inspection. Examples include converting configuration data to binary for network transfer or comparing key structures for consistency checks.",
      "description_length": 443,
      "index": 692,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Global_compiler.Automaton",
      "description": "Provides operations to manipulate NetKAT automata, including adding transitions, folding over reachable states, converting from policies, and generating visualizations. Works with FDD-based state transitions and automaton structures. Used to compile and analyze network policies, generate DOT representations, and perform topological state analysis.",
      "description_length": 349,
      "index": 693,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Packet.Field",
      "description": "Compares field values using a lexicographical ordering function. Operates on field representations derived from Fdd.Field.t, enabling ordered comparisons. Used to sort and order field instances in structured data processing pipelines.",
      "description_length": 234,
      "index": 694,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Packet.T",
      "description": "Provides serialization and comparison operations for a map type based on int64 keys, including S-expression conversion, hashing, and a comparator for ordered operations. Works with Core.Map.M(Field).t, enabling efficient key-value storage and retrieval. Used for representing structured data with numeric keys in contexts requiring persistence or ordered processing.",
      "description_length": 366,
      "index": 695,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Local_compiler.FDD",
      "description": "Converts S-expressions into structured key-value pairs with support for binary serialization, enabling efficient storage and retrieval. Provides operations to calculate size, write, read, and inspect data shapes, while allowing custom data types to be encoded and decoded. It facilitates data persistence by transforming textual representations into compact binary formats and reconstructing them for comparison or use. For example, a key can be parsed from an S-expression, serialized to binary, and later deserialized for accurate data reconstruction.",
      "description_length": 553,
      "index": 696,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Field",
      "description": "manages a collection of named FDD fields with customizable initialization and mutability, using a stateful `t` type to track metadata. It supports adding fields with specific values and flags, and retrieving them by key. Operations include insertion, lookup, and state management for FDD validation. This enables dynamic configuration and verification of field properties during FDD processing.",
      "description_length": 394,
      "index": 697,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Value",
      "description": "Provides operations for comparing, serializing, and converting values used in network predicate expressions, including lattice subset checks and integer conversions. Works with types representing constants, masks, and symbolic values like \"Pipe\" and \"Query\". Used to encode field tests and modifications in flow table translations, such as matching Ethernet addresses or setting port values.",
      "description_length": 391,
      "index": 698,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Pattern",
      "description": "Compares patterns based on field ordering and integer values, and checks for equality. Converts between NetKAT header_value pairs and patterns, and transforms patterns into predicates or SDN flow match patterns. Operates on tuples of field and value pairs representing network packet attributes.",
      "description_length": 295,
      "index": 699,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.Action",
      "description": "Manages custom data through S-expression and binary serialization, with support for key-based operations, validation, and hashing. It handles structured data transformations, ordered sequences, and entity validation, enabling efficient storage, configuration loading, and consistent hashing. Operations include parsing, comparison, subset checks, and deserialization of complex types. Examples include verifying configuration integrity, converting textual data to typed models, and serializing domain-specific structures for transmission.",
      "description_length": 538,
      "index": 700,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Fdd.FDD",
      "description": "Converts S-expressions into structured, keyed data with support for binary serialization and deserialization, enabling efficient storage and retrieval. Key types are parsed, serialized, and reconstructed using Bin_prot, allowing for fast lookups and compact storage. Operations include parsing, writing, reading, and size determination, with examples such as transforming S-expressions into keys or saving data in binary format. This facilitates structured data handling with low-level control over representation and conversion.",
      "description_length": 529,
      "index": 701,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Domain.Field",
      "description": "Compares field values using a lexicographical ordering defined by the underlying Fdd.Field implementation. Operates on the abstract type t, which represents field identifiers in a finite domain. Used to establish consistent ordering for fields in constraint satisfaction and symbolic reasoning tasks.",
      "description_length": 300,
      "index": 702,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Vlr.IntPairTbl",
      "description": "Converts S-expressions into key-value pairs using a custom parser, enabling structured data to be stored and accessed via a key. Supports binary serialization and deserialization of custom types, including size computation and shape inspection, for efficient data persistence. Operations include parsing, writing, reading, and determining the binary layout of values. This allows for both human-readable data loading and high-performance binary storage of complex, polymorphic data structures.",
      "description_length": 493,
      "index": 703,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Vlr.Make",
      "description": "Provides operations for comparing, serializing, and hashing values of type t, along with algebraic operations including sum, prod, one, and zero, which define a structure similar to a semiring. Works with arbitrary data types that support these operations, enabling algebraic manipulations and transformations. Used for implementing custom algebraic structures, such as boolean logic with && and ||, or numerical types with addition and multiplication.",
      "description_length": 452,
      "index": 704,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Parser.Portless",
      "description": "Parses policy and predicate expressions from strings or files, constructing abstract syntax tree nodes for policy and predicate types. Accepts optional position information for error reporting during parsing. Used to load configuration rules and constraints from textual sources into structured representations.",
      "description_length": 311,
      "index": 705,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Make",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with comparison, string conversion, and graph format parsing from DOT and GML. Works with a polymorphic type `t` that represents graph configurations. Used to convert graph data between textual formats and internal representations for analysis or visualization.",
      "description_length": 351,
      "index": 706,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Node",
      "description": "Provides operations to convert between node representations and S-expressions, compare nodes, and generate string representations for visualization (DOT, Mininet). Works with node identifiers, device metadata, and numeric attributes like MAC and IP addresses. Used to parse graph descriptions from DOT and GML formats and construct node objects with specific network properties.",
      "description_length": 378,
      "index": 707,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Link",
      "description": "Provides serialization and deserialization between a graph link representation and S-expressions, along with comparison, string conversion, and DOT format generation. Works with a custom type `t` that encapsulates numeric attributes like cost, capacity, and weight. Parses graph descriptions from DOT and GML formats and supports modifying link weights dynamically.",
      "description_length": 365,
      "index": 708,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Net",
      "description": "Computes shortest paths between vertices using a graph topology, returning edge lists representing the optimal routes. It handles weighted graphs and provides individual, pairwise, and all-pairs path computations. Used for network routing optimization and graph-based path analysis.",
      "description_length": 282,
      "index": 709,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.NetPath",
      "description": "Calculates shortest paths between vertices in a network topology, returning edge lists representing the optimal routes. It supports finding single shortest paths, all shortest paths from a source, and all pairs of shortest paths with custom filtering. Operates on graph structures defined by Net.Topology, using floating-point weights to represent path costs.",
      "description_length": 359,
      "index": 710,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Packet.Tcp",
      "description": "Encapsulates TCP header flag operations, enabling conversion between structured boolean records and S-expression representations. Provides functions to manipulate and inspect individual flags such as SYN, ACK, and FIN. Allows for precise control over TCP state serialization in protocol handling. Example uses include parsing incoming packets and generating custom TCP headers for network communication.",
      "description_length": 403,
      "index": 711,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Packet.Udp",
      "description": "Handles serialization and deserialization of UDP packet frames using S-expressions. Operates on a structured type containing UDP header fields. Used to parse and generate UDP data in applications requiring network protocol encoding.",
      "description_length": 232,
      "index": 712,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Packet.Icmp",
      "description": "Encodes and decodes ICMP headers using S-expressions, working with a structured type that represents the fields of an ICMP packet. It converts between the internal representation and S-expression format for serialization and deserialization. This supports parsing and generating ICMP data in network protocol handling.",
      "description_length": 318,
      "index": 713,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Packet.Dns",
      "description": "Encapsulates DNS packet structures with methods for converting between internal representations and S-expressions. Supports record types with fields for financial data and configurable parameters, enabling data parsing, configuration loading, and protocol communication. Operations include `t_of_sexp` and `sexp_of_t` for bidirectional conversion. Examples include parsing DNS packets from text configurations and serializing transaction data for network transmission.",
      "description_length": 468,
      "index": 714,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Packet.Igmp1and2",
      "description": "Encodes and decodes IGMP version 1 and 2 messages using S-expression serialization. Works with a structured type representing message headers and fields. Parses and generates messages for network protocol analysis and packet handling.",
      "description_length": 234,
      "index": 715,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Packet.Igmp3",
      "description": "Encapsulates multicast group configurations with associated source addresses, enabling structured representation and conversion to and from S-expressions. It supports operations to create, manipulate, and serialize group records containing both group and source data. Examples include parsing network group settings from a serialized format and generating structured data for protocol messages. The core data type is a record that combines group and source address lists.",
      "description_length": 471,
      "index": 716,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Packet.Igmp",
      "description": "Provides serialization and deserialization functions for IGMP message structures, converting between internal representations and S-expression formats. Works with custom types representing IGMP messages and their components. Used to encode and decode IGMP frames during network packet processing.",
      "description_length": 296,
      "index": 717,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Packet.Ip",
      "description": "Handles the serialization and deserialization of flag configurations using S-expressions, enabling structured data exchange. It operates on a type that encapsulates flag definitions and their values, supporting operations like encoding and decoding. This allows for persistent storage or network transmission of configuration settings. For example, it can convert a list of command-line flags into an S-expression for logging or send parsed flags over a network.",
      "description_length": 462,
      "index": 718,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Packet.Arp",
      "description": "Handles parsing and serialization of ARP packet payloads using S-expressions. Operates on the `t` type, which represents the structure of an ARP message. Converts between the internal representation and S-expression format for interoperability.",
      "description_length": 244,
      "index": 719,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Wildcards",
      "description": "Converts wildcard patterns to strings, serializes them into 32-bit integers, and reconstructs the original patterns from serialized values. Operates on a custom type representing wildcard expressions, such as those used in file path matching. Used to persist or transmit wildcard rules in a compact form, like in configuration storage or network protocols.",
      "description_length": 356,
      "index": 720,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Match",
      "description": "Converts a pattern to its string representation, serializes a pattern into a byte buffer, parses a byte buffer into a pattern, and calculates the size of a pattern in bytes. Works with the `pattern` type, which represents structured data for matching. Used to generate human-readable logs, transmit patterns over networks, and validate data formats during parsing.",
      "description_length": 364,
      "index": 721,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.PseudoPort",
      "description": "Converts a pseudo-port representation to a string, encodes it as an integer, and constructs a pseudo-port from two integer parameters. Works with a custom type representing network-like port identifiers. Used to generate consistent numeric identifiers for network services in distributed systems.",
      "description_length": 296,
      "index": 722,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Timeout",
      "description": "Handles conversion between timeout values and their string or integer representations. Operates on a custom timeout type encapsulating duration data. Used to serialize timeout configurations for logging or configuration files.",
      "description_length": 226,
      "index": 723,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Action",
      "description": "Moves actions that send packets to the controller to the end of a list, ensuring correct behavior in OpenFlow environments. Converts actions and action sequences to strings, and serializes/deserializes actions from binary buffers. Handles packet processing workflows where action order affects protocol compliance.",
      "description_length": 314,
      "index": 724,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.FlowMod",
      "description": "Encodes and decodes flow management commands between string, 16-bit integer, and internal representations. Supports operations on the `flowModCommand` type to manipulate actions like add, delete, or modify flows. Allows conversion of command values for network communication and parsing incoming data. Enables precise control over flow operations through standardized encoding and decoding.",
      "description_length": 390,
      "index": 725,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.FlowRemoved",
      "description": "Encodes and decodes flow removal reasons between string, 16-bit integer, and enumerated forms using `flowRemovedReason` and `Packet.int16`. Supports bidirectional mapping for protocol serialization and parsing. Converts `NoReason` to \"NoReason\" and 0, and maps 42 back to `Timeout`. Enables consistent handling of flow control signals in networked systems.",
      "description_length": 356,
      "index": 726,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.PacketOut",
      "description": "Converts a packetOut value to its string representation, enabling human-readable logging or debugging. Operates on a custom packetOut type that encapsulates network packet data. Used to generate log entries when sending packets through a network interface.",
      "description_length": 256,
      "index": 727,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.PortDescription",
      "description": "Converts port configuration, state, and feature values between 32-bit integers, strings, and custom types, enabling serialization and deserialization for network protocols. Core operations include encoding and decoding portConfig, stpState, and portFeatures types, with support for string representation and integer reconstruction. These functions allow precise handling of network port settings, state identifiers, and configuration flags in low-level communication. Examples include serializing port numbers for transmission, parsing state strings into numeric values, and reconstructing feature flags from integer representations.",
      "description_length": 633,
      "index": 728,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.PortStatus",
      "description": "Encodes and decodes an opaque type representing system change reasons using S-expressions and string formats. Supports persistent storage and logging by converting between internal representations and serialized forms. Allows parsing of string inputs into change reason values and generating human-readable outputs. Enables consistent handling of change reason data across different system components.",
      "description_length": 401,
      "index": 729,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.SwitchFeatures",
      "description": "Converts capability and action sets between structured records, S-expressions, and pretty-printed strings, enabling protocol serialization and deserialization. The record types encapsulate flag-based capabilities and action-specific data, supporting operations for encoding and decoding. Examples include converting a capability set to a human-readable format or serializing an action set for network configuration. These operations facilitate efficient data handling in OpenFlow 1.0 implementations.",
      "description_length": 500,
      "index": 730,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.SwitchConfig",
      "description": "Encapsulates flag states in an opaque type and supports conversion to and from S-expressions and strings for logging and storage. Provides functions to parse, generate, and manipulate configurations in a structured format. Allows for easy integration with systems requiring textual or serialized representations of flag settings. Examples include saving current flag states to a file or parsing a configuration string to update settings.",
      "description_length": 437,
      "index": 731,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.StatsRequest",
      "description": "Encodes and decodes request data using Sexp format, and converts request instances to string representations. Works with the `t` type, which represents a request. Used to serialize and deserialize request objects in a structured, human-readable format.",
      "description_length": 252,
      "index": 732,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.StatsReply",
      "description": "Provides serialization and deserialization functions for network reply data, including S-expression and byte buffer conversions. Works with a custom `t` type representing structured network responses. Parses binary data into structured replies and generates string representations for logging or transmission.",
      "description_length": 309,
      "index": 733,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Error",
      "description": "Encapsulates various error-related data types and their S-expression-based serialization and pretty-printing capabilities. Each module handles a distinct error category, such as malformed requests, invalid actions, flow failures, port modifications, and queue operations, using opaque or abstract types to represent error states. Functions allow converting these error instances to and from structured string formats for logging, debugging, or communication. Examples include encoding a malformed HTTP request, decoding a flow failure message, or printing a port modification error.",
      "description_length": 582,
      "index": 734,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Vendor",
      "description": "Handles conversion between a vendor message representation and S-expressions, as well as parsing and marshaling vendor messages from and to Cstruct buffers. Operates on a tuple type containing an int32 vendor ID and a Cstruct.t payload. Used to process OpenFlow vendor messages in network protocol implementations.",
      "description_length": 314,
      "index": 735,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01.Message",
      "description": "Provides functions to serialize, parse, and manipulate OpenFlow 1.0 message structures, including converting between S-expressions and message types, calculating serialized sizes, and extracting headers. Works with message bodies and OpenFlow headers, handling transaction IDs during serialization. Used to process incoming message data from network buffers and generate properly formatted message strings for transmission.",
      "description_length": 423,
      "index": 736,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Hashcons.Make",
      "description": "Provides operations to convert between a type `t` and S-expressions, compare instances of `t`, and compute hash values for use in hash tables. Works with the abstract type `t` and S-expression representations. Used to serialize and deserialize data structures, enable ordered comparisons, and support efficient lookups in hash-based collections.",
      "description_length": 345,
      "index": 737,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Topology.Net",
      "description": "Computes shortest paths between vertices using a graph topology, returning edge lists representing the optimal routes. Handles single-source shortest paths, all pairs of shortest paths, and custom filtering of path results. Operates on graph vertices, edges, and weighted path data.",
      "description_length": 282,
      "index": 738,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology.Mininet",
      "description": "Constructs network topologies from named configurations, mapping strings to structured network layouts. Operates on custom topology names and returns fully defined network topology objects. Used to generate specific network setups for testing and simulation scenarios.",
      "description_length": 268,
      "index": 739,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.PortConfig",
      "description": "Encodes and decodes port configuration values between an integer representation and a typed value. Processes OpenFlow port configuration flags using bitwise operations. Converts configuration values to human-readable strings for logging or debugging purposes.",
      "description_length": 259,
      "index": 740,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.PortFeatures",
      "description": "Encodes and decodes port feature flags using 32-bit integers, mapping between the OpenFlow port features enumeration and an opaque type. Provides string representation of port feature values for debugging or logging. Used to interpret and generate port feature fields in OpenFlow protocol messages.",
      "description_length": 298,
      "index": 741,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.Oxm",
      "description": "Handles OpenFlow 1.3.4 oxm field operations, including serialization, parsing, and string representation. Works with the `t` type, representing oxm fields and match patterns. Used to convert OpenFlow patterns to oxm fields and to serialize or deserialize oxm data into Cstruct buffers.",
      "description_length": 285,
      "index": 742,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.PseudoPort",
      "description": "Provides operations to create, inspect, and convert pseudoPort values, including calculating their size, generating string representations, and serializing to an int32. Works with the opaque type t, which encapsulates port information. Used to prepare and inspect pseudo-ports for network packet handling.",
      "description_length": 305,
      "index": 743,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.QueueDesc",
      "description": "Handles queue property operations including size calculation, string conversion, and serialization/deserialization from Cstruct buffers. Operates on the `queueProp` data type, enabling manipulation of queue configuration data as specified in OpenFlow 1.3.4. Supports tasks like parsing incoming queue configurations or generating output for network protocol interactions. Examples include converting a queue property to a string for logging or reconstructing a property from a received packet buffer.",
      "description_length": 500,
      "index": 744,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.SwitchConfig",
      "description": "Provides operations to calculate the size of a switch configuration, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `switchConfig` data type defined in the OpenFlow 1.3.4 specification. Used to handle protocol-specific data during network switch communication.",
      "description_length": 322,
      "index": 745,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.OfpMatch",
      "description": "Provides functions to compute the size of a flow match, marshal it into a Cstruct, parse it from a Cstruct, and generate a string representation. Works with the oxmMatch type, which represents OpenFlow 1.3.4 flow match entries. Used to serialize and deserialize match structures in network packet processing pipelines.",
      "description_length": 318,
      "index": 746,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.Action",
      "description": "Provides functions to calculate the size of an action, marshal and parse actions from and into Cstruct buffers, and convert between action representations. Works with action and actionSequence data types defined in the OpenFlow 1.3.4 specification. Used to serialize and deserialize OpenFlow actions in network protocol implementations.",
      "description_length": 336,
      "index": 747,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.Bucket",
      "description": "Provides operations to calculate the size of a bucket, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a bucket structure as defined in OpenFlow 1.3.4. Used to handle bucket data during protocol message encoding and decoding in network switching implementations.",
      "description_length": 350,
      "index": 748,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.FlowModCommand",
      "description": "Handles serialization and parsing of flow modification commands in OpenFlow 1.3.4, providing size calculation, byte-level marshaling, and deserialization from integers. Operates on the `t` type, which represents specific flow control actions. Used to encode and decode command structures during network protocol interactions.",
      "description_length": 325,
      "index": 749,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.GroupType",
      "description": "Converts group type values to and from integers, and provides a string representation for debugging. Works with the `t` type, which corresponds to OpenFlow group type identifiers. Used to serialize and deserialize group type information in network protocol implementations.",
      "description_length": 273,
      "index": 750,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.GroupMod",
      "description": "Provides functions to calculate the size of a group modification message, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `groupMod` data type, which represents OpenFlow group modification messages. Used to encode and decode group modification commands in network protocol implementations.",
      "description_length": 350,
      "index": 751,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.PortMod",
      "description": "Provides functions to calculate the size of a port modification message, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a port modification structure as defined in OpenFlow 1.3.4. Used to encode and decode port configuration updates in network protocol implementations.",
      "description_length": 358,
      "index": 752,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.MeterMod",
      "description": "Provides functions to calculate the size of a meter modification structure, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `meterMod` data type defined in the OpenFlow 1.3.4 specification. Used to encode and decode meter modification messages in network protocol implementations.",
      "description_length": 341,
      "index": 753,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.Instruction",
      "description": "Provides operations to calculate the size of an instruction, marshal it into a Cstruct, parse it from a Cstruct, and generate a string representation. Works with the `t` type, which represents OpenFlow instructions. Used to serialize and deserialize instruction data during protocol communication.",
      "description_length": 297,
      "index": 754,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.Instructions",
      "description": "Provides operations to determine the size of an instruction list, marshal it into a buffer, parse from a buffer, and convert to a string representation. Works with OpenFlow instructions encoded as lists and Cstruct buffers. Used to serialize and deserialize OpenFlow group instructions during protocol communication.",
      "description_length": 316,
      "index": 755,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.FlowMod",
      "description": "Provides functions to calculate the size of a flow modification message, marshal it into a Cstruct, parse it from a Cstruct, and generate a string representation. Works with the `t` type, which represents a flowMod structure as defined in OpenFlow 1.3.4. Used to serialize and deserialize flow modification commands in network protocol implementations.",
      "description_length": 352,
      "index": 756,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.Capabilities",
      "description": "Converts between an integer representation and a capabilities type, with support for string formatting. Operates on an opaque type representing OpenFlow capabilities flags. Used to interpret and display capability bits from OpenFlow protocol messages.",
      "description_length": 251,
      "index": 757,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.SwitchFeatures",
      "description": "Provides operations to calculate the size of a switch features structure, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents OpenFlow switch features. Used to handle protocol-specific data during network switch communication.",
      "description_length": 310,
      "index": 758,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.PortState",
      "description": "Encodes and decodes port state values between an integer representation and a typed enumeration. Processes values corresponding to OpenFlow port states such as link down, learning, and forwarding. Converts port state values to human-readable strings for logging or display.",
      "description_length": 273,
      "index": 759,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.PortDesc",
      "description": "Provides functions to calculate the size of a port description, marshal it into a Cstruct, parse it from a Cstruct, and generate a string representation. Works with the `t` type, which represents a port description as defined in OpenFlow 1.3.4. Used to serialize and deserialize port information in network protocol implementations.",
      "description_length": 332,
      "index": 760,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.PortStatus",
      "description": "Provides functions to calculate the size of a port status structure, marshal it into a Cstruct, parse it from a Cstruct, and generate a string representation. Works with the `t` type, which represents a port status as defined in OpenFlow 1.3.4. Used to serialize and deserialize port status messages in network protocol implementations.",
      "description_length": 336,
      "index": 761,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.PacketIn",
      "description": "Provides functions to calculate the size of a packet, convert it to a string representation, and marshal or parse it from a Cstruct buffer. Works with the `packetIn` data structure, which represents a packet received by the datapath and sent to the controller. Used to process incoming network packets in a structured format for further analysis or forwarding decisions.",
      "description_length": 370,
      "index": 762,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.PacketOut",
      "description": "Provides operations to calculate the size of a packet, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `packetOut` data structure, which represents packets sent out of a network datapath. Used to handle packet transmission in OpenFlow protocol implementations, such as when sending packets through a switch.",
      "description_length": 368,
      "index": 763,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.MeterBand",
      "description": "Provides operations to calculate the size of a meter band, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a meter band as defined in OpenFlow 1.3.4. Used to handle protocol-specific data during network packet processing and communication with OpenFlow controllers.",
      "description_length": 353,
      "index": 764,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.FlowRemoved",
      "description": "Provides operations to calculate the size of a flow removal message, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a flow removal event as defined in OpenFlow 1.3.4. Used to handle communication with switches during flow deletion events.",
      "description_length": 327,
      "index": 765,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.FlowRequest",
      "description": "Provides functions to calculate the size of a flow request, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `flowRequest` data type, which represents OpenFlow 1.3.4 flow statistics request structures. Used to encode and decode flow requests during network protocol interactions.",
      "description_length": 339,
      "index": 766,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.QueueRequest",
      "description": "Encodes and decodes queue request messages using Cstruct buffers, with functions to calculate size and convert to string. Operates on the `t` type representing OpenFlow queue request structures. Used to process and serialize queue statistics requests in network protocol implementations.",
      "description_length": 287,
      "index": 767,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.TableFeatureProp",
      "description": "Provides functions to serialize, parse, determine size, and generate string representations of table feature properties. Operates on the `t` type, which represents OpenFlow table feature properties as defined in section 7.3.5.5.2. Used to encode and decode table feature data within OpenFlow protocol messages.",
      "description_length": 310,
      "index": 768,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.TableFeature",
      "description": "Provides operations to calculate the size of table feature structures, marshal them into a Cstruct, parse them from a Cstruct, and generate a string representation. Works with the `t` type, which represents OpenFlow table features as defined in section 7.3.5.5.1. Used to serialize and deserialize table feature data during protocol message handling.",
      "description_length": 350,
      "index": 769,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.MultipartReq",
      "description": "Handles parsing and serialization of OpenFlow multipart request messages. Operates on the `t` type representing multipart request structures, providing size calculation, string representation, and binary marshaling. Used to encode and decode specific OpenFlow protocol messages like table features and description requests.",
      "description_length": 323,
      "index": 770,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.GroupStats",
      "description": "Handles the serialization, deserialization, and representation of OpenFlow bucket statistics data. Operates on the `t` type, enabling size calculation, string conversion, and buffer manipulation. Allows for efficient processing of flow statistics in network protocol implementations. Examples include converting a statistics record to a string for logging or parsing a buffer to extract bucket data.",
      "description_length": 399,
      "index": 771,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.SwitchDescriptionReply",
      "description": "Provides operations to calculate the size of a switch description, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `switchDesc` data type, which encapsulates details about an OpenFlow switch. Used to handle switch description messages in network protocol implementations.",
      "description_length": 332,
      "index": 772,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.FlowStats",
      "description": "Calculates the size of a flow statistics object, converts it to a string representation, and serializes/deserializes it from a Cstruct buffer. It operates on the `flowStats` data structure defined in the OpenFlow 1.3.4 specification. Used to handle flow statistics messages in network protocol implementations.",
      "description_length": 310,
      "index": 773,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.AggregateStats",
      "description": "Calculates the size of an aggregate flow statistics structure, converts it to a string representation, and marshals or parses it from a Cstruct buffer. Works with the `t` type, which represents aggregated flow statistics as defined in OpenFlow 1.3.4. Used to serialize and deserialize flow statistics data during network protocol interactions.",
      "description_length": 343,
      "index": 774,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.TableStats",
      "description": "Calculates the size of a table statistics structure, converts it to a string representation, and serializes/deserializes it from a Cstruct buffer. Works with the `tableStats` type defined in the OpenFlow 1.3.4 specification. Used to handle table statistics messages in network protocol implementations.",
      "description_length": 302,
      "index": 775,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.PortStats",
      "description": "Calculates the size of a port statistics structure, converts it to a string representation, and serializes/deserializes it from a Cstruct buffer. Works with the `portStats` data type defined in the OpenFlow 1.3.4 specification. Used to handle network port performance metrics in protocol message processing.",
      "description_length": 307,
      "index": 776,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.QueueStats",
      "description": "Calculates the size of a queue statistics structure, converts it to a string representation, and serializes/deserializes it to and from a Cstruct buffer. It operates on the `t` type, which represents OpenFlow queue statistics. Used for handling network queue metrics in protocol implementations.",
      "description_length": 295,
      "index": 777,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.GroupDesc",
      "description": "Provides operations to calculate the size of a group description, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `groupDesc` data type, which represents group metadata in OpenFlow 1.3.4. Used to encode and decode group information during network protocol interactions.",
      "description_length": 330,
      "index": 778,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.GroupFeatures",
      "description": "Provides operations to calculate the size of group features data, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents group features as defined in OpenFlow 1.3.4. Used to handle protocol-specific data during message encoding and decoding in network control plane implementations.",
      "description_length": 363,
      "index": 779,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.MeterStats",
      "description": "Provides operations to calculate the size of a meter statistics object, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `meterStats` data type defined in the OpenFlow 1.3.4 specification. Used to handle meter statistics messages in network protocol implementations.",
      "description_length": 326,
      "index": 780,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.MeterConfig",
      "description": "Provides functions to calculate the size of a meter configuration, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `meterConfig` data type defined in the OpenFlow 1.3.4 specification. Used to encode and decode meter configuration messages in network protocol implementations.",
      "description_length": 336,
      "index": 781,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.MeterFeatures",
      "description": "Provides operations to calculate the size of a meter features structure, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents OpenFlow meter features as defined in section 7.3.5.14. Used to handle network device capabilities in protocol messaging and debugging.",
      "description_length": 344,
      "index": 782,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.MultipartReply",
      "description": "Handles parsing and serialization of OpenFlow multipart reply messages. Operates on the `t` type, which represents structured multipart replies, and provides methods to calculate size, generate string representations, and encode/decode messages into Cstruct buffers. Used to process and construct OpenFlow protocol messages in network control applications.",
      "description_length": 356,
      "index": 783,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.TableMod",
      "description": "Provides functions to calculate the size of a table modification message, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a table modification message as defined in OpenFlow 1.3.4. Used to process and generate messages for modifying table configurations in network switches.",
      "description_length": 362,
      "index": 784,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.QueueConfReq",
      "description": "Provides functions to calculate the size of a queue configuration request, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a queue configuration request as defined in OpenFlow 1.3.4. Used to handle message encoding and decoding in network protocol implementations.",
      "description_length": 352,
      "index": 785,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.QueueConfReply",
      "description": "Provides functions to calculate the size of a queue configuration reply, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents the structure defined in OpenFlow 1.3.4 section 7.3.6. Used to handle communication between a controller and a switch when configuring queue parameters.",
      "description_length": 361,
      "index": 786,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.Error",
      "description": "Handles serialization and parsing of error messages according to OpenFlow 1.3.4. Provides methods to convert error structures to and from byte buffers, calculate their size, and generate human-readable representations. Operates on the `t` type, which represents structured error data.",
      "description_length": 284,
      "index": 787,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.RoleRequest",
      "description": "Provides operations to calculate the size of a role request, convert it to a string representation, and serialize or deserialize it from a Cstruct buffer. Works with the `t` type, which represents a role request message as defined in OpenFlow 1.3.4. Used to handle role request messages in network protocol implementations, such as when processing controller role changes.",
      "description_length": 372,
      "index": 788,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.Hello",
      "description": "Handles OpenFlow version information through a compact bitmap representation. Supports operations like size calculation, string conversion, and Cstruct-based serialization/deserialization of version lists. Enables encoding and decoding of supported versions in protocol messages. For instance, it can transform a list of versions into a binary format for transmission or extract version data from incoming packets.",
      "description_length": 414,
      "index": 789,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.AsyncConfig",
      "description": "Provides functions to calculate the size of an asynchronous configuration, convert it to a string representation, and serialize/deserialize it from a Cstruct buffer. Works with the `t` type, which represents OpenFlow asynchronous configuration data. Used to handle message formatting and parsing in network protocol implementations.",
      "description_length": 332,
      "index": 790,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04.Message",
      "description": "Provides serialization and deserialization between a message type and S-expressions, as well as conversion to and from Cstruct buffers. Works with a custom message type and OpenFlow headers, enabling low-level network protocol interactions. Supports marshaling and parsing of messages with transaction IDs, and efficiently copies message data into buffer structures.",
      "description_length": 366,
      "index": 791,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow.Pattern",
      "description": "Encodes and decodes IP address patterns using a tuple of address and mask, enabling precise network filtering and routing decisions. Supports equivalence checks, ordering, and set operations like joins and intersections to manage complex pattern relationships. Operations include validating compatibility between patterns and combining them for broader coverage. Examples include filtering traffic based on subnet ranges or merging multiple patterns into a single rule.",
      "description_length": 469,
      "index": 792,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow.To0x01",
      "description": "Converts OpenFlow 1.0 message components from internal representations, including patterns, actions, flows, switch features, payloads, packet-in reasons, and packet-out messages. Operates on types such as `Pattern.t`, `action`, `flow`, `switchFeatures`, `payload`, `packetInReason`, and `pktOut`. Used to translate event data into structured OpenFlow 1.0 messages for network controller communication.",
      "description_length": 401,
      "index": 793,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow.From0x01",
      "description": "Converts OpenFlow 1.0 action types to internal action representations. Processes switch features, port statistics, and flow statistics from OpenFlow messages, and maps incoming messages to event structures based on switch identifiers. Used to translate low-level OpenFlow data into structured event and statistic objects for further processing.",
      "description_length": 344,
      "index": 794,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Node",
      "description": "Handles serialization and deserialization of node structures using S-expressions. Works with the `t` type, representing a node in a graph or tree. Used to convert node data for storage or communication protocols.",
      "description_length": 212,
      "index": 795,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Link",
      "description": "Provides serialization and deserialization between a graph link representation and S-expressions, along with comparison, string conversion, and DOT format generation. Works with a custom type `t` representing graph links and processes attributes from DOT and GML formats. Used to parse and render graph links in visualization tools and data exchange formats.",
      "description_length": 358,
      "index": 796,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net.Net",
      "description": "Computes shortest paths between vertices using a graph topology, returning edge lists representing the optimal routes. It handles weighted graphs and provides path data for individual pairs or all pairs of vertices. The module supports custom filtering for path selection based on vertex relationships.",
      "description_length": 302,
      "index": 797,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Topology",
      "description": "manages graph vertices and edges with custom types, supporting serialization, deserialization, and format conversion for DOT, GML, and S-expressions. It handles weight manipulation, structured data validation, and binary persistence, enabling tasks like graph visualization, configuration validation, and efficient data storage. Operations include comparing, converting, and checking relationships between entities, with examples like serializing edge weights or validating a configuration tree. It integrates with OCaml's Bin_prot for compact binary representations and supports ordered, hash-based, and subset operations on complex data structures.",
      "description_length": 650,
      "index": 798,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Traverse",
      "description": "Performs breadth-first and depth-first traversal of a graph structure, applying a given function to each vertex. Operates on a topology representation that includes vertices and their connections. Used to explore all nodes in a graph for analysis or processing tasks.",
      "description_length": 267,
      "index": 799,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Path",
      "description": "Provides operations to convert between path representations and S-expressions, compare paths, and perform arithmetic operations like addition and zero initialization. Works with path types and edge types derived from a topology module. Used to serialize and manipulate path data in graph-based algorithms.",
      "description_length": 305,
      "index": 800,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.UnitPath",
      "description": "Calculates shortest paths between vertices in a graph using edge lists, with support for single-path, all-shortest-paths, and custom-filtered all-pairs results. Operates on graph topologies and vertex identifiers, returning path data structured as lists of edges. Used for route optimization and network analysis where minimal-cost paths are required.",
      "description_length": 351,
      "index": 801,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Network.Parse",
      "description": "Loads graph data from DOT and GML files into a topology structure, supporting network analysis and visualization. Processes structured text formats to construct graph representations with nodes and edges. Used to initialize graph models from external configuration files.",
      "description_length": 271,
      "index": 802,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network.Pretty",
      "description": "Generates string representations of network topologies in multiple formats. Produces human-readable output, DOT language for graph visualization, and Mininet configuration scripts. Accepts optional configuration files to customize generated output.",
      "description_length": 248,
      "index": 803,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Bits",
      "description": "Provides operations to manipulate individual bits and extract bytes from 32-bit and 64-bit integers. Includes setting, clearing, and testing specific bits, as well as retrieving bytes at specified positions. Used for low-level data processing and network protocol handling where precise bit control is required.",
      "description_length": 311,
      "index": 804,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.GroupTable0x04",
      "description": "Manages group tables for OpenFlow 1.3 switches by creating and modifying groups that define action buckets for packet forwarding. It works with group types, port lists, and unique group identifiers to construct failover or round-robin forwarding policies. Operations include adding groups, clearing all groups, and generating OpenFlow messages to apply changes.",
      "description_length": 361,
      "index": 805,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Hashcons",
      "description": "Provides operations to retrieve and release integer identifiers from a hashconsing structure, and to clear associated set data. Works with integer identifiers and a custom type `t` representing hashconsed values. Used to manage unique representations of data during parsing or symbolic computation.",
      "description_length": 298,
      "index": 806,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Net",
      "description": "manages node and graph link data through serialization, conversion, and path computation. it handles `t` types for nodes and graph links, enabling structured data exchange and format conversion. it supports Dijkstra's algorithm for finding shortest paths and facilitates analysis by translating between textual representations like S-expressions, DOT, and GML. examples include converting node data for storage, generating DOT files for visualization, and computing optimal routes in weighted graphs.",
      "description_length": 500,
      "index": 807,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.Network",
      "description": "Calculates shortest paths between vertices using a given topology, returning edge lists representing the optimal routes. It supports individual path queries, all-pairs path generation with a custom filter, and handles weighted graph structures. The module processes topological data to compute efficient routing information.",
      "description_length": 324,
      "index": 808,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow",
      "description": "Provides a unified interface for handling OpenFlow 1.0 and 1.3 by translating high-level actions into appropriate low-level constructs. Manages IP address patterns as tuples with mask, supporting set operations and compatibility checks for network rule management. Translates internal data structures like `Pattern.t`, `action`, and `flow` into OpenFlow messages and vice versa, enabling communication with network switches. Examples include merging subnets, generating group tables for efficient parallel actions, and parsing switch statistics for monitoring.",
      "description_length": 560,
      "index": 809,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow0x01",
      "description": "Provides serialization, deserialization, and string conversion for OpenFlow 1.0 message components, including wildcards, patterns, timeouts, actions, flow commands, port configurations, and errors. Operates on custom types like `wildcards`, `flowModCommand`, `portConfig`, and `flowRemovedReason`, supporting operations such as encoding to byte buffers, parsing from binary data, and generating human-readable representations. Examples include converting a \"timeout\" reason to its numeric code, serializing a packetOut structure for logging, or parsing an action sequence from a byte buffer. Enables consistent handling of protocol elements across network communication, logging, and debugging.",
      "description_length": 694,
      "index": 810,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic.OpenFlow0x04",
      "description": "Provides serialization, parsing, and conversion functions for OpenFlow 1.3.4 protocol elements, including port configurations, flow matches, actions, meters, groups, and statistics. Operates on data types such as `t`, `switchConfig`, `oxmMatch`, `flowMod`, and `packetIn`, enabling manipulation of network control messages and metadata. Examples include encoding flow modification commands, parsing port status updates, and generating human-readable representations of switch features. Supports efficient data handling for packet processing, flow table management, and network monitoring.",
      "description_length": 588,
      "index": 811,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.OpenFlow_Header",
      "description": "Provides functions to serialize, deserialize, and manipulate OpenFlow headers, including converting between xid values and S-expressions, parsing and marshaling headers from and into Cstruct buffers, and generating human-readable representations. Operates on xid (32-bit integers) and a structured header type containing standard OpenFlow message fields. Used to process raw network packets, extract header information, and prepare headers for transmission in network communication protocols.",
      "description_length": 492,
      "index": 812,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Packet",
      "description": "Provides structured handling of various network protocol data through S-expression serialization and deserialization. Core data types include TCP flags, UDP headers, ICMP structures, DNS records, IGMP messages, multicast groups, and ARP payloads, each with operations for encoding, decoding, and manipulation. Functions enable tasks like parsing incoming packets, generating custom headers, and converting protocol data for storage or transmission. Examples include serializing a DNS query, reconstructing an ICMP payload, or managing multicast group memberships.",
      "description_length": 563,
      "index": 813,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Topology",
      "description": "Computes shortest paths in weighted graphs, supporting individual, pairwise, and all-pairs calculations, and returns edge lists for optimal routes; constructs network topologies from named configurations using a custom identifier type, enabling layout definition for testing and simulation. Operations include path computation and topology initialization, with input and output types such as edge lists and topology identifiers. Can optimize network routing by finding minimal paths or set up specific network configurations for analysis.",
      "description_length": 538,
      "index": 814,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Util",
      "description": "Provides functions to generate strings from formatted values, manipulate pairs in lists, and handle DOT language output for graph visualization. Works with custom formatters, tuples, and string-based graph descriptions. Used to create readable exception messages, transform list elements, and render graph structures in various formats.",
      "description_length": 336,
      "index": 815,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic.Netkat",
      "description": "Encapsulates network policy and automata operations through structured data manipulation, equivalence checking, and transformation. It handles automata bisimulation, field comparisons, policy construction, and S-expression conversion, with core types including policies, predicates, automata, and field values. Operations enable policy validation, flow table generation, and network configuration synthesis, such as comparing IP addresses, generating portful policies, or serializing policies to binary. It supports both low-level packet processing and high-level policy analysis through integrated parsing, serialization, and transformation functions.",
      "description_length": 652,
      "index": 816,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Frenetic.Async",
      "description": "provides timing, logging, and data processing capabilities, along with network control and compilation services. It includes operations for measuring function execution, formatting structured logs, parsing HTTP requests, managing dataflow graphs, routing HTTP traffic, handling OpenFlow events, manipulating binary data, and executing shell commands. Key data types include functions, HTTP request/response records, OpenFlow messages, dataflow nodes, and binary buffers. It enables real-time data processing, network policy enforcement, asynchronous server management, and low-level system interaction.",
      "description_length": 602,
      "index": 817,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_async.Common",
      "description": "Measures execution time of a function and returns the result, logs messages with severity levels, extracts path components from HTTP requests, handles parsing errors in request bodies, and parses policy and configuration data from JSON-formatted HTTP bodies. Operates with timing, logging, HTTP request and response objects, and policy and configuration data structures. Used to time critical code sections, implement structured logging, process HTTP routes, and validate incoming JSON data for network policy updates and configurations.",
      "description_length": 537,
      "index": 818,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_async.Compile_Server",
      "description": "Handles server initialization and request processing for compiling code, accepting a port number and starting a listening service. Operates with socket connections and request parsing structures. Used to deploy a standalone compilation service accessible over a network.",
      "description_length": 270,
      "index": 819,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_async.DynGraph",
      "description": "Provides operations to manage a dataflow graph where nodes compute values based on inputs. It works with nodes that hold values of type 'a and receive inputs of type 'b, supporting source nodes that can be manually updated and sink nodes that emit values to pipes. Use cases include propagating changes through a network of dependent values and integrating with asynchronous data streams.",
      "description_length": 388,
      "index": 820,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_async.Http_Controller",
      "description": "Handles HTTP request routing and response generation using custom handlers. Operates on request and response records, parsing and serializing HTTP headers and bodies. Used to launch a server instance with specified port and timeout, directing incoming requests to predefined handler functions.",
      "description_length": 293,
      "index": 821,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_async.Logging",
      "description": "The module provides configuration and message emission operations for a global logging system, enabling control over log levels, output destinations, time sources, and message formatting. It works with structured data formats like S-expressions and strings, supporting deferred execution and contextual tagging for flexible logging workflows. Use cases include application monitoring, debugging, and system logging where structured, time-stamped messages are required.",
      "description_length": 468,
      "index": 822,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_async.NetKAT_Controller",
      "description": "Initiates a controller instance on a specified port and processes OpenFlow events, switch features, and statistics. It manages flow and port statistics, sends packet-out messages, and updates switch configurations using compiled policies. Operates with OpenFlow switch identifiers, port identifiers, and compiled NetKAT policies.",
      "description_length": 329,
      "index": 823,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_async.OpenFlow0x04_Plugin",
      "description": "Handles message transmission and flow table updates for OpenFlow 1.0 protocols, processes incoming messages with custom handlers, and manages group tables. Operates on OpenFlow messages, group tables, and flow layouts, using switch identifiers for target operations. Executes client-server communication loops, flow installations, and fault-tolerant control plane initialization.",
      "description_length": 379,
      "index": 824,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_async.Ox",
      "description": "Handles connection events for network switches, processing packet arrivals, barrier replies, and statistics responses with precise transaction tracking. Operates on switch identifiers, transaction IDs, and OpenFlow packet and reply structures. Used to manage real-time interactions in a software-defined networking controller.",
      "description_length": 326,
      "index": 825,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_async.Shell",
      "description": "Handles command-line argument parsing and execution of shell commands, accepting an integer exit code and a function to execute. Operates with system-level input and output streams, managing process control and signal handling. Used to launch and manage external programs from within OCaml applications.",
      "description_length": 303,
      "index": 826,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Bisim",
      "description": "Checks if two automata are bisimilar by implementing the Hopcroft-Karp algorithm for efficient equivalence verification. Operates on automaton structures containing states, transitions, and labels. Used to validate behavioral equivalence in formal verification tasks.",
      "description_length": 267,
      "index": 827,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Domain",
      "description": "defines operations for comparing field values within a finite domain, enabling ordered reasoning over symbolic states. It works with the abstract type t, representing field identifiers, and provides lexicographical comparison functions. This allows for consistent ordering in constraint solving, such as determining the relative values of field pairs or sorting field combinations. It supports tasks like generating ordered tuples or validating field relationships in automata.",
      "description_length": 477,
      "index": 828,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.FabricGen",
      "description": "Generates a fabric structure from a set of policy and predicate inputs, combining topological and ingress/egress constraints. It processes syntax-based policies and predicates to construct two lists of policies representing network fabric configurations. This is used to model network topologies with specific traffic control rules and path restrictions.",
      "description_length": 354,
      "index": 829,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Fdd",
      "description": "manages network header fields and their properties, enabling dynamic configuration and validation through a stateful type. It supports operations on network predicates, including comparisons, conversions, and pattern matching, with support for constants, masks, and symbolic values. It facilitates the translation of network headers into flow table entries and handles structured data serialization, deserialization, and validation for efficient storage and transmission. Examples include matching Ethernet addresses, converting header_value pairs to flow patterns, and serializing configurations for network processing.",
      "description_length": 620,
      "index": 830,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Generated_Parser",
      "description": "Parses input streams into abstract syntax structures using lexer-generated tokens. Processes end-of-file conditions to construct predicate and policy objects. Accepts a lexer function and lexing buffer to drive the parsing process.",
      "description_length": 231,
      "index": 831,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Global_compiler",
      "description": "Encapsulates functionality for handling structured keys and NetKAT automata, enabling efficient data manipulation and network policy analysis. Supports key serialization, comparison, and automaton transformation, along with operations for state exploration and visualization. It allows converting configuration data to binary format for transmission and generating DOT outputs from network policies. Examples include optimizing data storage through binary encoding and analyzing automaton reachability for policy validation.",
      "description_length": 524,
      "index": 832,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Json",
      "description": "Converts between NetKAT policies and Yojson representations, handling both standard policies and OpenFlow events, port statistics, and pseudoports. Processes input from channels or strings and outputs JSON-compatible strings for network applications. Translates OpenFlow flow tables and packet-out messages into structured JSON formats.",
      "description_length": 336,
      "index": 833,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.LexBuffer",
      "description": "Provides functions to create and manipulate a lexing buffer that tracks source locations, including conversion from Sedlex buffers, ASCII strings, and files. Works with OCaml's Lexing.position and Uchar.t types, and supports low-level operations like backtracking and character retrieval. Used in custom lexical analysis workflows where precise location tracking is required during parsing.",
      "description_length": 390,
      "index": 834,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Lexer",
      "description": "Processes input streams to generate and format tokens, supporting parsing from strings, files, or lex buffers using custom token parsers. Operates on lexing buffers and token structures representing lexical elements. Enables structured extraction of parsed data from source code or text inputs.",
      "description_length": 294,
      "index": 835,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Local_compiler",
      "description": "Provides a mechanism for converting S-expressions into structured key-value pairs with binary serialization support, enabling efficient data storage and retrieval. It includes operations to calculate size, write, read, and inspect data structures, while allowing custom types to be encoded and decoded. A key can be parsed from an S-expressions, serialized to binary, and later deserialized for accurate reconstruction. This module supports data persistence and efficient data comparison through binary representation.",
      "description_length": 518,
      "index": 836,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Optimize",
      "description": "Constructs and manipulates logical predicates and policies using conjunction, disjunction, negation, and sequence operations. Processes lists of predicates and policies to create aggregated expressions and normalize policy structures. Simplifies complex policy combinations and reorders union elements for consistent evaluation.",
      "description_length": 328,
      "index": 837,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Packet",
      "description": "encapsulates a structured data representation using a map with int64 keys, supporting ordered operations, serialization, and comparison. it enables sorting and ordering of field instances through lexicographical comparisons and provides efficient key-value storage with Core.Map.M(Field).t. operations include S-expression conversion, hashing, and ordered traversal. examples include sorting structured data, persisting maps to disk, and comparing field values for consistency checks.",
      "description_length": 484,
      "index": 838,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Parser",
      "description": "Converts textual representations of NetKAT policies and predicates into structured abstract syntax trees, supporting error tracking through position data. Provides types for policies and predicates, along with parsing functions that read from strings or files. Enables loading configuration rules and constraints into a form suitable for further processing or evaluation. Example uses include parsing a policy string to validate syntax or extracting predicate logic for analysis.",
      "description_length": 479,
      "index": 839,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Portless_Compiler",
      "description": "Compiles a portless policy into a portful policy by applying a given network topology. It operates on a policy structure and a network topology representation. This is used to transform high-level policies into executable network configurations.",
      "description_length": 245,
      "index": 840,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Portless_Generated_Parser",
      "description": "Processes lexing input to extract specific syntax constructs, converting token streams into predicate and policy structures. Operates on lexing buffers and custom token types defined by the lexer. Used to analyze and validate input streams for policy and condition evaluation.",
      "description_length": 276,
      "index": 841,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Pretty",
      "description": "Formats predicate and policy structures into human-readable output, converting them to strings or printing directly to a formatter. Operates on custom types `Syntax.pred` and `Syntax.policy` used for representing logical conditions and access control rules. Used to generate debug information or user-facing representations of policy configurations.",
      "description_length": 349,
      "index": 842,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Semantics",
      "description": "Manages network packet data by combining header manipulation with structured serialization and validation. It supports direct modification of Ethernet, IP, and port fields, while also enabling packet persistence, hash generation, and configuration validation. Operations include filtering by IP, rewriting VLAN tags, and converting S-expressions to typed data. It ensures consistent data handling through equality checks, ordered comparisons, and hierarchical integrity verification.",
      "description_length": 483,
      "index": 843,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_netkat.Syntax",
      "description": "This module provides operations for equality checks, S-expression serialization/deserialization, and comparisons across network-related data types like switch identifiers, ports, and policies, working with structures such as `switchId`, `policy`, `header_val`, and `abstract_location`. It supports use cases including parsing textual NetKAT expressions into abstract syntax, converting policies between OCaml and JSON formats, and enabling low-level network entity manipulation for compiler and parser workflows.",
      "description_length": 512,
      "index": 844,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Tokens",
      "description": "Provides functions to parse, compare, and transform tokens representing lexical elements in a language. Works with a discriminated union type that encodes different token kinds, such as keywords, identifiers, and operators. Used to analyze input streams during compiler or interpreter preprocessing stages.",
      "description_length": 306,
      "index": 845,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Virtual_Compiler",
      "description": "Constructs a network fabric by integrating policy and predicate inputs, producing a structured representation for validation. It handles layered network models, incorporating topological and edge constraints. Key data types include policy rules, predicates, and fabric configurations, with operations for merging, validating, and simulating network setups. Examples include generating a fabric from a set of access control policies or modeling a network with specified routing constraints.",
      "description_length": 489,
      "index": 846,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat.Vlr",
      "description": "Provides equality checks, S-expression serialization, and comparison for a custom type. Supports hashing and string conversion for efficient storage and debugging. Designed for use with data that needs to be compared, stored, or transmitted as text.",
      "description_length": 249,
      "index": 847,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Bits",
      "description": "Provides bit-level manipulation for 32-bit and 64-bit integers, including setting, clearing, and testing individual bits. Extracts specific bytes from 32-bit and 64-bit values using direct indexing. Used for low-level data processing and network protocol parsing where precise bit and byte control is required.",
      "description_length": 310,
      "index": 848,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.GroupTable0x04",
      "description": "Creates and manages group tables for OpenFlow 1.1/1.3 switches, allowing the addition of action buckets and fast failover groups. Operates on group types, port lists, and group IDs to construct mutable group configurations. Generates message lists to apply group table changes to a switch.",
      "description_length": 289,
      "index": 849,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Hashcons",
      "description": "Provides operations to retrieve and release integer identifiers from a hashconsing structure, managing a set of unique integers. Works with the `t` type for tracking consed values and `Core.Int.Set.t` for managing invalidated identifiers. Used to efficiently manage and reuse integer keys in symbolic computation or memoization contexts.",
      "description_length": 337,
      "index": 850,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Net",
      "description": "manages graph structures through serialization, path computation, and link manipulation. it handles node and link data via S-expressions, supports DOT and GML attribute processing, and computes shortest paths with weighted edge lists. it enables converting graph elements for storage, visualization, and analysis. examples include parsing graph links from DOT files, generating path routes between nodes, and serializing node data for network transmission.",
      "description_length": 456,
      "index": 851,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Frenetic_kernel.Network",
      "description": "Calculates shortest paths between vertices using a topology, returning edge lists representing the paths. It handles weighted graphs and vertex pairs, supporting both single and all-pair path computations. The module processes topological data structures and produces path representations for network analysis tasks.",
      "description_length": 316,
      "index": 852,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow",
      "description": "Provides a unified interface for handling OpenFlow 1.0 and 1.3 by translating high-level actions into appropriate low-level constructs. Manages IP address patterns as tuples with mask, supporting set operations and validation for precise network control. Converts internal representations of messages, actions, and statistics into structured OpenFlow 1.0 formats for communication with network controllers. Enables efficient parallel action execution and failover using group tables in 1.3, while maintaining compatibility with 1.0 through controller interactions.",
      "description_length": 564,
      "index": 853,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x01",
      "description": "Converts and serializes various OpenFlow data types, including wildcards, patterns, pseudo-ports, timeouts, actions, flow commands, removal reasons, packetOut data, port configurations, opaque change reasons, capability sets, flag states, requests, replies, errors, and vendor messages. Operates on custom types like `pattern`, `pseudoPort`, `timeout`, `flowModCommand`, `flowRemovedReason`, `packetOut`, `portConfig`, `t`, and `vendorMessage`, enabling encoding to and from strings, integers, S-expressions, and binary buffers. Examples include serializing a wildcard pattern for storage, converting a flow command to a 16-bit integer for network transmission, or generating a human-readable log entry for a packetOut event. Supports protocol compliance, data validation, and efficient data exchange in OpenFlow 1.0 implementations.",
      "description_length": 833,
      "index": 854,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow0x04",
      "description": "The module provides low-level encoding and decoding capabilities for OpenFlow 1.3.4 protocol elements, including port configurations, flow matches, actions, packets, and statistics. It supports operations on data types such as `oxmMatch`, `action`, `packetIn`, `flowMod`, and `switchConfig`, enabling serialization, parsing, and string conversion. Functions allow handling of packet transmission, flow table modifications, and network statistics, such as converting a flow match to a Cstruct or serializing a packet-out message for transmission.",
      "description_length": 545,
      "index": 855,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.OpenFlow_Header",
      "description": "Provides functions to serialize, deserialize, and manipulate OpenFlow headers, including parsing from and marshaling to Cstruct buffers, converting to and from S-expressions, and generating human-readable representations. Works with xid (32-bit integers) and a structured header type containing version, type, length, and transaction ID. Used to process raw OpenFlow messages from network traffic, extract header information, and prepare headers for transmission.",
      "description_length": 463,
      "index": 856,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Packet",
      "description": "Provides a comprehensive set of tools for handling various network protocol headers, including TCP, UDP, ICMP, DNS, IGMP, and ARP, through S-expression serialization. Each module defines structured types for protocol-specific data, with functions to convert between these types and S-expressions, enabling parsing, generation, and manipulation of packet contents. Operations include flag manipulation, header encoding, and configuration serialization, supporting tasks like generating custom TCP headers, parsing DNS records, and handling IGMP group memberships. Examples include converting ARP payloads to S-expressions for logging and serializing ICMP headers for network transmission.",
      "description_length": 687,
      "index": 857,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Topology",
      "description": "Computes and constructs graph-based network structures, enabling pathfinding and topology generation. It processes weighted graphs to find optimal routes and builds predefined network layouts from string identifiers. Operations include shortest path calculations and topology instantiation. Users can retrieve edge lists for efficient routing or generate testable network configurations.",
      "description_length": 387,
      "index": 858,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel.Util",
      "description": "Provides functions to generate strings from formatted values, manipulate pairs in lists, and handle DOT language output for graph visualization. Works with custom formatters, tuples, and string-based graph descriptions. Used to create readable exception messages, transform list elements, and render graph structures in various formats.",
      "description_length": 336,
      "index": 859,
      "embedding_norm": 1.0
    },
    {
      "module_path": "frenetic",
      "description": "Provides high-level abstractions for defining network policies, pattern matching on packet headers, and composing network behaviors through modular rules. Operates on structured data types such as packet metadata, flow tables, and rule sets. Used to implement dynamic traffic management, access control, and network-wide policy enforcement in SDN environments.",
      "description_length": 360,
      "index": 860,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic",
      "description": "manages low-level bit manipulation, network protocol translation, and graph-based path computation through a suite of specialized operations. it handles 32- and 64-bit integers, OpenFlow group tables, hashconsed identifiers, and graph structures, enabling tasks like extracting bytes from integers, defining packet forwarding policies, and computing shortest paths. it supports serialization of protocol elements, conversion between data formats, and generation of visualizations, while also facilitating network policy validation and timing-based data processing. examples include parsing OpenFlow messages, generating DOT files for graph visualization, and computing optimal routes in weighted topologies.",
      "description_length": 707,
      "index": 861,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_async",
      "description": "Combines timing, logging, HTTP processing, and dataflow management to support network policy enforcement and service deployment. It handles structured logging, HTTP request routing, and asynchronous data propagation, along with OpenFlow message handling and switch interaction. Operations include parsing JSON configurations, compiling code over a network, and managing flow tables. It enables real-time policy updates, network monitoring, and integration with external processes.",
      "description_length": 480,
      "index": 862,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_netkat",
      "description": "Provides tools for network policy analysis, verification, and transformation by integrating automata equivalence checks, header manipulation, predicate parsing, and data serialization. Key data types include automata, network headers, policies, and structured maps, with operations for bisimulation, field comparison, fabric generation, and JSON conversion. It enables tasks such as validating network behavior, generating flow tables, and converting policies between formats. Examples include checking automata equivalence, parsing policy strings, and serializing header data for transmission.",
      "description_length": 594,
      "index": 863,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Frenetic_kernel",
      "description": "Manages low-level bit and byte operations, group table configurations, and identifier management for network protocol processing. Handles graph serialization, path computation, and OpenFlow message translation, with support for S-expressions, binary encoding, and protocol-specific data structures. Enables tasks such as parsing DOT files, generating shortest paths, and serializing flow matches for transmission. Provides tools for header manipulation, packet parsing, and graph visualization through custom formatters and structured data conversions.",
      "description_length": 552,
      "index": 864,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 885,
    "meaningful_modules": 865,
    "filtered_empty_modules": 20,
    "retention_rate": 0.9774011299435028
  },
  "statistics": {
    "max_description_length": 833,
    "min_description_length": 189,
    "avg_description_length": 360.6947976878613,
    "embedding_file_size_mb": 3.060256004333496
  }
}