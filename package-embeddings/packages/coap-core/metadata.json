{
  "package": "coap-core",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:37.649910",
  "modules": [
    {
      "module_path": "Coap_core.Response",
      "library": "coap-core",
      "description": "This module provides functions to construct CoAP response messages with specific payloads and metadata. It operates on buffer data containing message content and allows setting optional parameters like version, message ID, token, kind, and options. Concrete use cases include generating \"Not Found\" error responses or \"Content\" success responses in CoAP servers handling resource requests.",
      "description_length": 389,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Coap_core.Message",
      "library": "coap-core",
      "description": "This module enables the creation, parsing, and manipulation of CoAP messages, focusing on header components such as version, method/response codes, tokens, and options, alongside buffer-backed payload management. It includes utilities for serializing messages to byte buffers, decoding raw data into structured messages, and inspecting properties like confirmability or content format, which are critical for tasks such as network transmission, protocol validation, and handling constrained device communication.",
      "description_length": 512,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Coap_core",
      "library": "coap-core",
      "description": "This module establishes the foundation for CoAP protocol handling by defining core error types and validation logic, while organizing message, request, and response operations into focused submodules. It provides data types for errors related to token length, option encoding, and message structure, along with functions to generate, parse, and manipulate CoAP messages using buffer-backed payloads. Submodules support concrete tasks such as constructing error or success responses with custom metadata, serializing messages for network transmission, and inspecting header fields like method codes and content formats. Together, these components enable robust handling of CoAP communication in constrained environments.",
      "description_length": 719,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 3,
    "filtered_empty_modules": 1,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 719,
    "min_description_length": 389,
    "avg_description_length": 540.0,
    "embedding_file_size_mb": 0.011310577392578125
  }
}