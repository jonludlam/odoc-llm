{
  "package": "linol",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 459,
  "creation_timestamp": "2025-08-14T20:38:14.647865",
  "modules": [
    {
      "module_path": "Linol.Jsonrpc2.Make.Req_id",
      "library": "linol",
      "description": "This module defines a type `t` for representing request IDs in a JSON-RPC 2.0 implementation, based on the `Linol_jsonrpc.Jsonrpc.Id.t` type. It provides the `to_string` function to convert request IDs to their string representation, enabling consistent handling and debugging of RPC requests. This is essential for correlating requests with their corresponding responses in a server or client implementation.",
      "description_length": 409,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Server.Req_id",
      "library": "linol",
      "description": "Handles unique request identifiers for mapping JSON-RPC requests to responses. Works with string-based IDs from the JSON-RPC library. Used to track and correlate incoming requests with their corresponding replies in an LSP server.",
      "description_length": 230,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol.Jsonrpc2.Make",
      "library": "linol",
      "description": "This module implements a JSON-RPC 2.0 server for LSP communication, handling request/response cycles, notifications, and document state management. It works with LSP-specific data types like `Server_request.t`, `Server_notification.t`, and structured document state including URIs, versions, and content. Concrete use cases include sending server-originated requests with async callbacks, handling incoming messages via `run`, and managing document state changes during editing sessions.",
      "description_length": 487,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Server.Make",
      "library": "linol",
      "description": "This module pairs LSP server requests with handlers and manages asynchronous operations for a given IO substrate. It works with document state records containing URI, language ID, version, and content, and supports concrete use cases like handling text document synchronization and custom server requests. The module enables sending requests with typed responses and error handling, tailored for building language servers with precise document management.",
      "description_length": 455,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Blocking_IO",
      "library": "linol",
      "description": "This module implements blocking IO operations using threads, providing functions for reading from and writing to channels, handling exceptions, and tracking byte counts. It works directly with standard input/output channels and bytes, enabling precise control over IO execution. Concrete use cases include reading lines or raw bytes from stdin, writing responses to stdout, and managing concurrent IO tasks in LSP server implementations.",
      "description_length": 437,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Server",
      "library": "linol",
      "description": "Handles unique request identifiers and pairs LSP server requests with handlers, supporting asynchronous operations over a document state type that includes URI, language ID, version, and content. Works directly with JSON-RPC strings for request tracking and maps server requests to typed responses with error handling. Enables concrete use cases such as text document synchronization and custom language server functionality.",
      "description_length": 425,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Jsonrpc2",
      "library": "linol",
      "description": "Implements a JSON-RPC 2.0 server for LSP communication, handling request/response cycles, notifications, and document state management. Works with LSP-specific data types like `Server_request.t`, `Server_notification.t`, and structured document state including URIs, versions, and content. Concrete use cases include sending server-originated requests with async callbacks, handling incoming messages via `run`, and managing document state changes during editing sessions.",
      "description_length": 472,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol",
      "library": "linol",
      "description": "This module simplifies building LSP servers in OCaml by abstracting over the LSP library. It provides a JSON-RPC 2.0 server implementation, request/response handling with async support, and blocking IO operations for LSP communication. Key data types include server requests, notifications, document state with URIs and versions, and JSON-RPC strings. Concrete use cases include implementing text document synchronization, handling LSP requests with async callbacks, and managing IO for LSP servers using stdin/stdout.",
      "description_length": 518,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Response.Error.Code",
      "library": "linol.jsonrpc",
      "description": "This module defines a polymorphic variant type representing standardized JSON-RPC error codes, including both protocol-defined constants and arbitrary integer values. It supports operations for matching and constructing error codes, enabling precise error handling in JSON-RPC communication. Concrete use cases include validating method requests, signaling server initialization failures, and handling canceled or failed operations in language server implementations.",
      "description_length": 467,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Response.Error",
      "library": "linol.jsonrpc",
      "description": "This module defines a structured representation of JSON-RPC error responses, including standardized error codes, descriptive messages, and optional additional data. It provides functions to construct error values, convert them to JSON, and raise them as exceptions. Concrete use cases include signaling invalid requests, handling internal server errors, and returning structured diagnostics in language server implementations.",
      "description_length": 426,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_jsonrpc.Import.Json.Jsonable",
      "library": "linol.jsonrpc",
      "description": "This module defines a set of functions for converting OCaml values to and from JSON representations. It works with standard OCaml data types such as integers, strings, lists, and records, enabling precise serialization and deserialization. Concrete use cases include parsing JSON payloads from network requests and generating JSON output for APIs.",
      "description_length": 347,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Json.Jsonable",
      "library": "linol.jsonrpc",
      "description": "This module defines data structures and functions for encoding and decoding JSON values, primarily working with types like `json` and supporting conversions to and from OCaml values. It includes operations for constructing JSON objects, arrays, and primitives, as well as extracting values with type-safe accessors. Concrete use cases include serializing OCaml data for JSON-RPC communication and parsing incoming JSON payloads into typed values.",
      "description_length": 446,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Import.Json.Conv",
      "library": "linol.jsonrpc",
      "description": "Converts a JSON value to its string representation. Works with the `Linol_jsonrpc.Import.Json.t` type. Useful for serializing JSON data for transmission or logging.",
      "description_length": 164,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Notification",
      "library": "linol.jsonrpc",
      "description": "Handles JSON-RPC notification messages by constructing and serializing them. Works with JSON-RPC method names and structured data parameters. Used to generate valid JSON-RPC notification payloads for sending requests without expecting a response.",
      "description_length": 246,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Json",
      "library": "linol.jsonrpc",
      "description": "This module provides functions for constructing and manipulating JSON values using the `json` type, including creating objects, arrays, and primitive values. It supports operations like `assoc`, `list`, and `string` to build structured JSON data, and includes type-safe accessors such as `to_string`, `to_int`, and `to_list` for extracting values. Concrete use cases include assembling JSON payloads for API requests and decoding JSON responses into specific OCaml data structures.",
      "description_length": 481,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Import.Option",
      "library": "linol.jsonrpc",
      "description": "Maps over an option value, applying a function if the value is present. Works with `'a option` types. Useful for transforming optional data like JSON fields without unwrapping them.",
      "description_length": 181,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Structured",
      "library": "linol.jsonrpc",
      "description": "This module defines structured JSON-RPC data representations using polymorphic variants, supporting direct conversion to and from JSON values. It provides bidirectional transformations between structured data and JSON through `yojson_of_t` and `t_of_yojson` functions. Concrete use cases include serializing and deserializing JSON-RPC messages for network transmission or storage.",
      "description_length": 380,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Request",
      "library": "linol.jsonrpc",
      "description": "Handles creation and serialization of JSON-RPC request objects. Works with JSON-RPC request structures, including method names, optional parameters, and request IDs. Used to construct valid JSON-RPC requests and convert them to Yojson-compatible representations for transmission.",
      "description_length": 279,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Response",
      "library": "linol.jsonrpc",
      "description": "This module represents JSON-RPC responses, encapsulating either a successful result or an error. It provides functions to construct responses with an identifier and a result or error, along with serialization and deserialization to and from JSON. Concrete use cases include sending method call results or errors in a language server protocol implementation.",
      "description_length": 357,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Id",
      "library": "linol.jsonrpc",
      "description": "This module defines a polymorphic type `t` that represents JSON-RPC request identifiers, supporting both string and integer values. It provides serialization and deserialization to and from JSON using `yojson_of_t` and `t_of_yojson`, along with hashing and equality checks. Concrete use cases include managing request IDs in JSON-RPC clients and servers to correlate responses with their corresponding requests.",
      "description_length": 411,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Import.Json",
      "library": "linol.jsonrpc",
      "description": "This module provides functions for constructing, querying, and converting JSON values represented by the `t` type, which includes standard JSON constructs like objects, arrays, and primitives. It supports operations such as extracting and validating fields from JSON objects using `field` and `field_exn`, and includes submodules for serialization and deserialization of OCaml values to JSON. Concrete use cases include processing JSON-based API requests and responses, and converting internal data structures for transmission over network protocols.",
      "description_length": 550,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Packet",
      "library": "linol.jsonrpc",
      "description": "This module serializes and deserializes JSON-RPC packets to and from Yojson representations. It handles individual and batch requests, responses, and notifications, converting them to and from the corresponding JSON structures. Use it to encode or decode JSON-RPC messages for transmission over a network or storage in a file.",
      "description_length": 326,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Import",
      "library": "linol.jsonrpc",
      "description": "This module combines functionality for working with optional values and JSON data. It provides operations to map over `'a option` types and manipulate JSON values with a focus on extraction, validation, and conversion. Use cases include handling optional JSON fields and processing API payloads with strong typing.",
      "description_length": 314,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc",
      "library": "linol.jsonrpc",
      "description": "This module implements JSON-RPC 2.0 message handling, providing structured data representations for requests, responses, notifications, and batch operations. It supports serialization and deserialization of JSON-RPC packets to and from Yojson values, with dedicated components for managing request IDs, method calls, and error reporting. Concrete use cases include building JSON-RPC clients and servers, such as language servers or remote procedure call systems, where structured communication over JSON is required.",
      "description_length": 516,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc",
      "library": "linol.jsonrpc",
      "description": "This module provides operations for working with optional values and JSON data, including mapping over `'a option` types and extracting, validating, and converting JSON values. It supports handling optional JSON fields and processing API payloads with strong typing, alongside implementing JSON-RPC 2.0 message handling with structured representations for requests, responses, notifications, and batch operations. Use cases include building JSON-RPC clients and servers, such as language servers, and processing JSON payloads with optional fields and strict validation.",
      "description_length": 569,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension.DebugTextDocumentGet.Params",
      "library": "linol.lsp",
      "description": "This module defines parameters for a custom LSP request to retrieve text document content at a specific position. It includes functions to construct parameter values and convert them to and from JSON format. The module is used to support editor features like inline debugging or contextual information retrieval during development.",
      "description_length": 331,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension.DebugEcho.Params",
      "library": "linol.lsp",
      "description": "Handles parsing and serialization of debug echo messages using Yojson. Works with the `t` record type containing a `message` string. Used to transmit custom debug information in LSP protocol extensions.",
      "description_length": 202,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Int.Map",
      "library": "linol.lsp",
      "description": "This module offers operations for integer-keyed maps, including insertions, deletions, value updates, and merging, alongside transformations like mapping, filtering, and folding over key-value pairs. It works with maps (`'a t`) that associate integers to arbitrary values, as well as sequences and lists of bindings for ordered traversal or bulk conversion. It is suited for managing sparse data structures, processing ordered key-value pairs (e.g., numeric IDs mapping to settings), or efficiently converting between maps and sequential representations.",
      "description_length": 554,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json.Void",
      "library": "linol.lsp",
      "description": "This module defines a type `t` intended to represent JSON values that carry no meaningful data. It includes functions `t_of_yojson` and `yojson_of_t` for converting between this empty type and `Yojson.Safe.t`. It is used when handling JSON payloads where certain fields or values are placeholders and do not contain actual content.",
      "description_length": 331,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json.Of",
      "library": "linol.lsp",
      "description": "This module provides functions to decode JSON values into OCaml types, specifically handling lists, pairs, integer pairs, untagged unions, and literal fields. It operates on `Yojson.Safe.t` and custom JSON types, enabling precise parsing of structured data. Concrete use cases include extracting configuration values, deserializing API responses, and validating JSON payloads with specific schemas.",
      "description_length": 398,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.String.Map",
      "library": "linol.lsp",
      "description": "This module provides operations for creating and manipulating ordered associative arrays with string keys, supporting insertion, deletion, and lookup alongside higher-order transformations like merging, filtering, and mapping with custom logic. It works with polymorphic maps (`String.Map.t`) that associate strings to arbitrary values, emphasizing ordered key traversal and conversion to and from sequences and lists. Typical applications include managing hierarchical data structures, combining dictionaries with conflict-resolution strategies, or processing key-value pairs from serialized formats like JSON.",
      "description_length": 611,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.Json.Nullable_option",
      "library": "linol.lsp",
      "description": "Converts between JSON values and OCaml option types, handling null values explicitly. It provides functions to decode JSON into an option type and encode an option type into JSON. Useful when parsing or generating JSON data where fields may be optional or explicitly null.",
      "description_length": 272,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Header.Private.Key",
      "library": "linol.lsp",
      "description": "This module defines constants for HTTP header fields used in LSP (Language Server Protocol) communication. It provides the `content_length` and `content_type` string values, which are essential for formatting and parsing LSP messages over standard input/output. These values ensure correct message framing and interpretation in LSP server-client interactions.",
      "description_length": 359,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json.To",
      "library": "linol.lsp",
      "description": "This module provides functions for converting OCaml values into a specific JSON representation used in the Linol_lsp project. It includes operations for wrapping lists, serializing fields with string keys, and encoding integer pairs into JSON structures. These functions are used to construct JSON payloads for language server protocol messages, such as responses containing positions or ranges.",
      "description_length": 395,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentUri.Private",
      "library": "linol.lsp",
      "description": "This module defines a single mutable value `win32` that indicates whether the system uses Windows-style file paths. It is used to control path formatting logic in document URI handling, particularly when converting between file system paths and URIs. This value is typically set based on the host operating system to ensure correct path representation in LSP communication.",
      "description_length": 373,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension.DebugEcho.Result",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling debug echo responses in a JSON-compatible format. It includes functions to serialize and deserialize the structure using Yojson. A typical use case involves transmitting diagnostic messages between a language server and client during development.",
      "description_length": 296,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension.DebugTextDocumentGet.Result",
      "library": "linol.lsp",
      "description": "This module defines the result type for a debug text document request, which is a string option. It includes functions to convert the type to and from Yojson for serialization and deserialization. This module is used to handle optional string responses in custom LSP debug extensions.",
      "description_length": 284,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json.Conv",
      "library": "linol.lsp",
      "description": "This module enables bidirectional conversion between OCaml values and JSON representations, supporting primitives (booleans, numbers, strings), containers (options, lists, arrays, hash tables), and structured types (tuples, references, lazy values) through customizable recursive conversions. It handles deserialization with error resilience and strictness control for record fields, while opaque or function types are managed via abstract conversion logic. Use cases include serializing complex application data for storage or APIs, and mapping JSON payloads into typed OCaml models with nested or domain-specific structures.",
      "description_length": 626,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Result.O",
      "library": "linol.lsp",
      "description": "This module provides a single operation, `(let+)`, which maps a function over the successful case of a result value, preserving the error case. It works with the standard `result` type, which represents computations that may fail. Use this to chain operations that depend on the success of prior steps while handling potential errors.",
      "description_length": 334,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json.Object",
      "library": "linol.lsp",
      "description": "This module provides functions to convert between a list of key-value pairs and a JSON object representation. It works with associative lists where keys are strings and values are JSON values. Concrete use cases include serializing and deserializing JSON objects during language server protocol communication.",
      "description_length": 309,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json.Option",
      "library": "linol.lsp",
      "description": "Converts between JSON values and OCaml option types, handling `null` as `None`. Uses Yojson for serialization and deserialization. Useful when parsing JSON data where fields may be optional or missing.",
      "description_length": 201,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.Json.Assoc",
      "library": "linol.lsp",
      "description": "This module serializes and deserializes association lists to and from JSON objects. It transforms key-value pairs where keys are strings and values can be arbitrary types, producing or consuming a JSON object with string keys and values of a specified type. Use it when converting between JSON representations of dictionaries and native OCaml association lists in LSP-related data structures.",
      "description_length": 392,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.Json.O",
      "library": "linol.lsp",
      "description": "This module provides a function `<|>` that combines two functions, returning the result of the first if it succeeds, or the second if the first raises an exception. It works with functions of the same input and output types, allowing fallback behavior in parsing or transformation pipelines. A concrete use case is handling JSON parsing attempts where one function may fail and another provides a default interpretation.",
      "description_length": 420,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ImplementationRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type for implementation registration options in the context of a language server protocol. It includes fields for document selector, identifier, and work done progress flag, all optional. The module provides functions to create instances, and to convert to and from JSON format using Yojson.",
      "description_length": 320,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.FileEvent",
      "library": "linol.lsp",
      "description": "This module defines a file event structure with a change type and URI, along with functions to create instances and convert to and from JSON. It works with file change types and document URIs. It is used to represent and serialize events such as file creation, modification, or deletion in a language server protocol context.",
      "description_length": 325,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeConfigurationRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing options for registering configuration change notifications, with an optional `section` field that can be a single string or a list of strings. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to specify which configuration sections a language server should monitor for changes.",
      "description_length": 368,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentSaveRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines options for registering text document save events, including an optional document selector and a flag to include text content. It provides functions to create these options, convert them to and from JSON format. It is used to configure how and when text document saves are handled in an LSP server.",
      "description_length": 318,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSymbolRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for document symbol registration, including optional document selector, label, and work done progress flag. It provides functions to create instances and convert to and from JSON format. Used to specify how document symbols should be registered in an LSP server, particularly for handling symbol hierarchies and progress reporting during symbol parsing.",
      "description_length": 395,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.LogMessageParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for log message parameters, including a message string and a message type. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to represent log messages in the context of the LSP (Language Server Protocol) communication.",
      "description_length": 301,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ColorPresentation",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing color presentation information in the context of language server protocol interactions. It includes fields for optional text edits and a required label, used to convey how a color should be displayed or modified in a code editor. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for communication over LSP.",
      "description_length": 406,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSymbol",
      "library": "linol.lsp",
      "description": "This module defines a record type representing symbols within a document, such as functions or variables, with fields including name, kind, range, and optional metadata like deprecation status or tags. It provides a `create` function to construct symbol instances and functions to serialize and deserialize them using Yojson. It is used to model hierarchical code structure in language server protocol responses, enabling features like outline views in editors.",
      "description_length": 461,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.PreviousResultId",
      "library": "linol.lsp",
      "description": "This module defines a type for associating a document URI with a previous result identifier string. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to track result identifiers for documents in language server protocol operations.",
      "description_length": 277,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationPattern",
      "library": "linol.lsp",
      "description": "This module defines a file operation pattern with a glob string, optional match kind, and optional pattern options. It provides functions to construct the pattern, convert it to and from JSON. It is used to specify file operations in JSON-RPC communication, particularly for matching and handling file events in an LSP server.",
      "description_length": 326,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.LinkedEditingRangeOptions",
      "library": "linol.lsp",
      "description": "This module defines options for linked editing range functionality, specifically supporting the `workDoneProgress` flag to indicate progress reporting. It provides constructors and JSON serialization/deserialization for its type. Used to configure linked editing range requests in language server protocol implementations.",
      "description_length": 322,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for inlay hints in a language server protocol implementation. It includes fields to enable a resolve provider and work done progress tracking, both optional boolean values. The module provides functions to construct these configurations, along with serialization and deserialization to and from JSON using Yojson.",
      "description_length": 355,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in signature help requests, including position, text document identifier, optional context, and progress token. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to handle signature help in language server protocol interactions, specifically for retrieving function signature information at specific positions in a document.",
      "description_length": 427,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRange",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing a folding range in a text document, with fields for start and end positions, optional collapsed text, and a kind. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to describe regions of code that can be folded in an editor, such as functions, blocks, or comments.",
      "description_length": 360,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.LogTraceParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for log trace parameters with a message and optional verbose detail. It provides functions to create instances, convert to and from JSON format using Yojson. It is used to handle logging information in a structured way during language server protocol interactions.",
      "description_length": 301,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeDefinitionClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines client capabilities for type definition features in a language server, specifically supporting dynamic registration and link navigation. It works with boolean options to indicate feature support and uses Yojson for serialization and deserialization. Concrete use cases include configuring and exchanging client capabilities during language server initialization.",
      "description_length": 382,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and serialization functions for inlay hint client capabilities in a language server protocol. It includes types for `resolveSupport` with property lists and a main `t` type supporting dynamic registration and resolve capabilities. Use cases include parsing and generating JSON representations of client capabilities during LSP initialization.",
      "description_length": 378,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressCreateParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for creating a work done progress in the LSP protocol, containing a single `token` field. It provides functions to construct a `t` value, convert it to and from JSON format using `Yojson.Safe.t`. This module is used to handle progress reporting in language server operations, such as tracking the status of long-running tasks like code indexing or compilation.",
      "description_length": 415,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionResult",
      "library": "linol.lsp",
      "description": "This module represents a result that can either be a list of commands or code actions, specifically handling their serialization and deserialization to and from JSON. It works with variant types that wrap either `Command.t` or `CodeAction.t` values in an optional list structure. It is used to encode possible responses from code action requests in a language server, enabling structured interaction with editors that support the LSP protocol.",
      "description_length": 443,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Int",
      "library": "linol.lsp",
      "description": "This module provides arithmetic operations, bitwise manipulations, and numeric conversions for integers, alongside utilities for comparison, hashing, and string representation. It primarily works with the built-in `int` type and includes an integer-keyed map implementation for efficient associative operations. Specific use cases include low-level bit-level control (e.g., masks, shifts), numeric computations requiring precise overflow handling, and managing mappings where integer keys dominate, such as in compiler intermediate representations or performance-critical data structures.",
      "description_length": 588,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceFoldersChangeEvent",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing changes to workspace folders, with fields for added and removed folders. It provides functions to construct instances of this structure and to serialize and deserialize them using Yojson. It is used to communicate updates to workspace folder configurations in an LSP server.",
      "description_length": 324,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensOptions",
      "library": "linol.lsp",
      "description": "This module defines and constructs configuration options for semantic token handling in a language server. It supports creating structured representations of token legends, full token data, and optional features like range-based updates and progress tracking. These configurations are used to enable precise syntax highlighting and semantic analysis in text editors via the LSP protocol.",
      "description_length": 387,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensRangeParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling semantic token range parameters in the context of a language server protocol. It includes fields for specifying a text document, a range within that document, and optional progress tokens for partial and work-done tracking. The module provides functions to construct instances of this structure, convert it to and from JSON format using Yojson.",
      "description_length": 394,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RenameClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for rename operations in a language server, including optional fields for dynamic registration, change annotations, prepare support, and default behavior settings. It provides functions to construct instances of this type and to serialize and deserialize them using Yojson. This module is used to configure and communicate client-side rename capabilities within a language server protocol implementation.",
      "description_length": 468,
      "index": 66,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TypeDefinitionParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in type definition requests, including position, text document identifier, and optional progress tokens. It provides functions to construct instances, and serialize or deserialize them using Yojson. Concrete use cases include handling type definition queries in an LSP server, where precise source location and document context are required.",
      "description_length": 398,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CancelParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing cancellation parameters for an LSP (Language Server Protocol) request, containing a single field `id` that identifies the request to cancel. It provides functions to construct a cancellation parameter instance, convert it to and from JSON format using Yojson. This module is used to handle request cancellation in an LSP server by associating a cancellation with a specific request identifier.",
      "description_length": 437,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CompletionItemKind",
      "library": "linol.lsp",
      "description": "This module defines an enumeration type `t` representing various kinds of completion items used in language server protocol responses. It includes functions `t_of_yojson` and `yojson_of_t` for converting between the enumeration and Yojson representation. This module is used to serialize and deserialize completion item kinds when communicating with LSP clients, such as editors like VS Code, during auto-completion requests.",
      "description_length": 425,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceSymbolClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines and constructs data structures representing client capabilities for workspace symbol features in a language server protocol. It includes types for symbol kinds, tag support, and resolve properties, enabling precise configuration of symbol handling. Use cases include initializing and serializing client capability configurations for LSP communication.",
      "description_length": 371,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentSyncOptions",
      "library": "linol.lsp",
      "description": "This module defines serialization and deserialization functions for unit-type notebook document sync options. It converts between a unit value and its JSON representation using Yojson. Useful for handling empty notebook sync configurations in LSP communication.",
      "description_length": 261,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.Command",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a command with optional JSON arguments, a command string, and a title. It provides functions to construct a command, and to serialize and deserialize it using Yojson. It is used to model executable actions in an LSP (Language Server Protocol) context, such as code edits or refactoring operations triggered by a client.",
      "description_length": 363,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for work done progress in the context of the Language Server Protocol. It includes a function to create instances with an optional progress token and functions to serialize and deserialize the type to and from JSON. It is used to track progress of long-running operations in LSP clients and servers.",
      "description_length": 354,
      "index": 73,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DeleteFileOptions",
      "library": "linol.lsp",
      "description": "This module defines options for file deletion operations, specifically handling whether to ignore non-existent files and enabling recursive deletion. It works with boolean options to configure deletion behavior. Concrete use cases include safely removing files or directories in a language server protocol context, where missing files shouldn't cause errors and directories need full removal.",
      "description_length": 392,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlightParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for document highlight requests in the LSP protocol, including position, text document identifier, and optional progress tokens. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to handle requests for highlighting specific elements within a text document during language server operations.",
      "description_length": 398,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InsertTextMode",
      "library": "linol.lsp",
      "description": "This module defines an enumeration type with two values, `AsIs` and `AdjustIndentation`, representing modes for handling insert text operations. It provides functions to convert this type to and from Yojson format for serialization and deserialization. This module is used to specify how inserted text should be adjusted in the context of language server protocol operations.",
      "description_length": 375,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.VersionedTextDocumentIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type for versioned text document identifiers, combining a document URI with an integer version. It provides functions to construct these identifiers, convert them to and from JSON format using Yojson. This is used to track specific versions of text documents in language server protocol interactions, such as when sending document changes or diagnostics.",
      "description_length": 376,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentLinkClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to document links in a language server protocol. It includes functions to construct instances with optional dynamic registration and tooltip support, and to serialize or deserialize these instances using Yojson. Concrete use cases include configuring and exchanging document link capabilities between a language server and client during protocol initialization.",
      "description_length": 443,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileCreate",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a file creation event with a URI. It provides functions to construct a value from a URI, and to serialize and deserialize values using Yojson. It is used to handle file creation notifications in the context of the LSP protocol.",
      "description_length": 271,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceFolder",
      "library": "linol.lsp",
      "description": "This module defines a workspace folder structure with a name and URI, providing functions to create instances and convert to and from JSON. It works with strings and document URIs to represent workspace folders in a language server protocol context. Concrete use cases include managing project root directories and serializing folder data for communication with LSP clients.",
      "description_length": 374,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentRangeFormattingParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in document range formatting requests, including formatting options, a text document identifier, a range to format, and an optional progress token. It provides functions to construct instances of this record and to serialize and deserialize them using Yojson. This module is used to handle formatting requests in a language server, where a specific portion of a document needs to be reformatted according to given settings.",
      "description_length": 477,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionKind",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic variant type for representing different kinds of code actions, such as quick fixes, refactoring operations, and source organization. It includes functions for converting between the type and Yojson representations, enabling serialization and deserialization. Concrete use cases include handling code action requests in a language server, categorizing user-triggered edits, and integrating with LSP clients that rely on specific action kinds like `RefactorExtract` or `SourceOrganizeImports`.",
      "description_length": 525,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to inline value handling in a language server protocol. It includes functions to construct the structure, serialize it to JSON, and deserialize it from JSON. A concrete use case is configuring and exchanging inline value support settings between a language server and client during protocol initialization.",
      "description_length": 388,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchySubtypesParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in type hierarchy subtype requests, including a type hierarchy item and optional progress tokens. It provides functions to create instances and serialize/deserialize them using Yojson. Concrete use cases include handling LSP (Language Server Protocol) messages for type hierarchy navigation in an IDE or code analysis tool.",
      "description_length": 380,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchyRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type hierarchy registration options structure used to configure type hierarchy-related features in a language server. It supports creating, serializing, and deserializing configuration data including document selectors, registration IDs, and progress tracking flags. Concrete use cases include setting up type hierarchy providers and managing registration metadata during language server initialization.",
      "description_length": 425,
      "index": 85,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ExecuteCommandOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for specifying options related to command execution in a language server protocol implementation. It includes fields for a list of command names and an optional flag indicating whether work done progress is supported. The module provides functions to construct instances, and to convert to and from JSON representations, specifically using the Yojson library.",
      "description_length": 396,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Position",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing positions in a text document using line and character offsets. It includes functions to construct position values and to serialize and deserialize them using Yojson. Concrete use cases include tracking cursor locations or text ranges in an editor integration.",
      "description_length": 313,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Io.Make",
      "library": "linol.lsp",
      "description": "Implements reading and writing JSON-RPC packets over input/output channels. Uses `Linol_jsonrpc.Jsonrpc.Packet.t` for packet parsing and serialization. Enables bidirectional communication for language server protocol implementations using custom channel types.",
      "description_length": 260,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileRename",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing a file rename operation with `oldUri` and `newUri` fields. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to represent file renaming events in the context of a language server handling document changes.",
      "description_length": 307,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ReferenceOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring reference-related options in a language server protocol implementation. It includes a field to enable or disable work done progress tracking, with functions to construct the structure and serialize or deserialize it using Yojson. It is used to manage client-specific settings when handling reference resolution requests in an LSP server.",
      "description_length": 390,
      "index": 90,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchyPrepareParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used to prepare type hierarchy information at a specific position in a text document. It includes fields for the position, text document identifier, and an optional progress token, with functions to create instances and serialize to or from JSON. It is used to request type hierarchy data in a language server protocol implementation.",
      "description_length": 386,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeLensParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling code lens parameters in the context of the Language Server Protocol. It includes fields for tracking progress tokens and identifying text documents, along with functions to construct instances and serialize or deserialize them using Yojson. It is used to support features like displaying actionable information in an editor, such as finding references or executing commands on specific code elements.",
      "description_length": 450,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ResourceOperationKind",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing resource operation kinds, including creation, renaming, and deletion. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This module is used to handle resource operation kind data in JSON format, particularly in LSP-related communication.",
      "description_length": 365,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeNotebookDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing parameters for a notebook document change event, containing a change description and a versioned notebook document identifier. It provides functions to construct instances, convert from JSON, and serialize to JSON. This is used to handle updates to notebook documents in a language server protocol implementation.",
      "description_length": 363,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookCellKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing the kind of a notebook cell, with variants `Markup` and `Code`. It provides functions to convert between this type and Yojson for serialization and deserialization. Useful for handling notebook cell metadata in JSON format during communication with a language server.",
      "description_length": 311,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileDelete",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a file deletion operation with a URI. It provides functions to create a `t` value, and to convert between `t` and Yojson.Safe.t for serialization and deserialization. It is used to handle file delete events in the context of a language server protocol implementation.",
      "description_length": 311,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticTag",
      "library": "linol.lsp",
      "description": "This module defines a variant type `t` with two constructors, `Unnecessary` and `Deprecated`, representing diagnostic tags for code analysis. It includes functions to convert values of this type to and from Yojson format. These tags are used to classify diagnostic messages in a language server, indicating issues like unused code or outdated constructs.",
      "description_length": 354,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing registration options for folding range features in a language server, including optional document selector, identifier, and work done progress flag. It provides functions to construct instances, convert to and from JSON using Yojson. Used to configure folding range capabilities in LSP servers, particularly for structured document navigation.",
      "description_length": 387,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ImplementationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for implementation options in the context of a language server protocol. It includes a field to indicate whether work done progress is supported, along with functions to construct the structure, and serialize or deserialize it using Yojson. It is used to configure and exchange implementation-specific capabilities between a language server and client.",
      "description_length": 389,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in inline completion requests, including context, position, text document identifier, and an optional progress token. It provides functions to construct instances, convert from JSON, and serialize to JSON. It is used to handle inline completion in text editors by capturing the necessary request metadata.",
      "description_length": 362,
      "index": 100,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentDiagnosticReportKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` with two variants, `Full` and `Unchanged`, representing the possible kinds of document diagnostic reports. It provides functions to convert values of this type to and from Yojson representations. This module is used to serialize and deserialize diagnostic report kind data when communicating with a language server.",
      "description_length": 346,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceFoldersServerCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing workspace folder capabilities in a language server, specifically supporting fields for change notifications and capability support status. It provides functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include configuring and serializing server capabilities for workspace folder management in LSP (Language Server Protocol) implementations.",
      "description_length": 442,
      "index": 102,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationPatternKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing file operation pattern kinds, with variants for files and folders. It provides functions to convert between this type and Yojson for serialization and deserialization. Useful for handling file system events in language server protocol implementations where precise file or directory operations need to be communicated in JSON format.",
      "description_length": 377,
      "index": 103,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.PrepareRenameParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in preparing a rename operation within a text document. It includes fields for the position of the rename target, the document identifier, and an optional progress token. The module provides functions to construct the parameter object, and to convert it to and from JSON format for serialization and deserialization.",
      "description_length": 373,
      "index": 104,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CodeLens",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing code lenses in a language server protocol implementation. It includes functions to create code lens objects with optional commands and data, and to serialize or deserialize them using Yojson. The module is used to enable features like inline code navigation and quick actions within a text editor.",
      "description_length": 351,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities related to inline value workspace features, specifically supporting an optional refresh flag. It provides functions to construct instances, convert to and from JSON format using Yojson, and manage the presence of refresh support. Concrete use cases include configuring and serializing client capabilities for inline value evaluation in a language server protocol context.",
      "description_length": 441,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSelector",
      "library": "linol.lsp",
      "description": "This module defines a document selector as a list of document filters, enabling the matching of text documents based on criteria like language, scheme, or pattern. It provides JSON serialization and deserialization functions to convert between the document selector type and Yojson representations. It is used to process language server protocol configuration sections that specify which documents a feature applies to, such as when filtering files for diagnostics or completions.",
      "description_length": 480,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensPartialResult",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a partial result of semantic token processing, encapsulating an integer array that encodes token metadata. It provides functions to construct instances of this type, and to convert to and from JSON using the Yojson library. This module is used to efficiently transmit encoded semantic token data in responses within a language server protocol implementation.",
      "description_length": 402,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlightKind",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing different kinds of document highlights, such as text occurrences, read accesses, and write accesses. It includes functions to convert values of type `t` to and from Yojson for serialization and deserialization. This module is used to communicate semantic highlighting information in a language server protocol context, specifically for marking variable usage in source code.",
      "description_length": 430,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.LinkedEditingRangeRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type for linked editing range registration options, including optional document selector, identifier, and work done progress flag. It provides functions to create instances with optional fields and to serialize/deserialize values to and from JSON. This module is used to configure linked editing range capabilities in a language server, specifying how and when linked editing ranges should be handled for specific documents.",
      "description_length": 453,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeConfigurationParams",
      "library": "linol.lsp",
      "description": "This module defines a record type `t` with a single field `settings` of type `Json.t` and provides functions to create instances, convert to and from JSON using Yojson. It handles the data structure for representing configuration change parameters in a language server protocol context. Use this module when processing configuration updates sent from a client to a language server, such as user preference changes.",
      "description_length": 414,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension.DebugTextDocumentGet",
      "library": "linol.lsp",
      "description": "Implements a custom LSP extension for retrieving text document content at specific positions. It operates on text document identifiers and positional parameters, returning optional string content. Used to support inline debugging and contextual data inspection in editors.",
      "description_length": 272,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentColorParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in a document color request, including tokens for progress tracking and a text document identifier. It provides functions to construct instances, and to convert to and from JSON format. It is used to support features like color highlighting in a text editor by associating color information with specific documents.",
      "description_length": 372,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RenameFile",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a file rename operation in the context of a language server protocol, capturing the old and new URIs, optional annotation identifier, and rename options. It provides functions to construct instances, convert to and from JSON using `Yojson.Safe`, ensuring proper serialization and deserialization. It is used to handle file renaming requests and responses in an LSP implementation.",
      "description_length": 424,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ShowMessageParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing message parameters in a language server protocol, specifically for displaying messages with a specified type. It includes functions to construct instances and convert to and from JSON format. It is used to send user-facing messages with severity levels like error or warning in an LSP implementation.",
      "description_length": 354,
      "index": 115,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.Range",
      "library": "linol.lsp",
      "description": "This module defines a `t` record type representing a text range with `start` and `end_` positions. It provides functions to construct a range, and to convert to and from JSON using the Yojson library. It is used to model spans of text in a document, such as selections or edits, for communication in the Language Server Protocol.",
      "description_length": 329,
      "index": 116,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ColorInformation",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that pairs a color with a range, representing a segment of text associated with a specific color. It includes functions to construct instances of this type and to serialize and deserialize them using Yojson. This is useful for encoding color annotations in a text editor, such as highlighting specific regions with defined colors.",
      "description_length": 361,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextEdit",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing text edits in a document, consisting of a range and the new text to apply. It provides functions to construct text edit values, along with serialization and deserialization to and from JSON. It is used to communicate changes to document content in the context of a language server protocol implementation.",
      "description_length": 359,
      "index": 118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentOnTypeFormattingParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in document formatting triggered by typing. It includes fields for the typed character, formatting options, cursor position, and the text document identifier. The module supports creating instances, and serializing or deserializing them using Yojson, specifically for handling formatting requests in an LSP server.",
      "description_length": 368,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.String",
      "library": "linol.lsp",
      "description": "This module offers text processing capabilities ranging from character-level transformations and indexed searches to binary data decoding, with functions for case manipulation, UTF encoding validation, and endianness-aware numeric extraction from byte sequences. It primarily operates on OCaml's native `string` type while also providing a dedicated `Map` submodule for ordered associative storage using string keys. Typical applications include parsing structured binary formats, implementing text analysis pipelines, and managing string-keyed data dictionaries with custom comparison logic.",
      "description_length": 592,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeWatchedFilesRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for managing file system watchers in the context of language server protocol interactions. It provides functions to create an instance with a list of watchers and to serialize or deserialize the structure using Yojson. Concrete use cases include registering and tracking file changes for real-time code analysis and updates.",
      "description_length": 361,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MonikerClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities related to moniker support in a language server, specifically including an optional `dynamicRegistration` boolean. It provides functions to create instances of this type and to serialize and deserialize them using Yojson. This module is used to communicate client capabilities for moniker handling to a language server during initialization.",
      "description_length": 405,
      "index": 122,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.Location",
      "library": "linol.lsp",
      "description": "This module defines a location type that pairs a document URI with a range, representing a specific segment within a file. It includes functions to construct locations and serialize them to and from JSON. It is used to identify positions in source files, such as for reporting errors or navigating to definitions.",
      "description_length": 313,
      "index": 123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SelectionRangeParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling selection range parameters in a language server protocol. It includes fields for tracking progress tokens, positions, and text document identifiers, along with functions to construct and serialize the structure. It is used to manage hierarchical selection ranges in text documents during language server operations.",
      "description_length": 365,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing registration options for inline value functionality in a language server, including optional document selector, identifier, and work done progress flag. It provides functions to create instances with optional fields and to serialize/deserialize values to and from JSON using Yojson. This module is used to configure inline value support in the language server protocol, specifically for debugging scenarios where inline values are displayed during execution.",
      "description_length": 502,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceSymbol",
      "library": "linol.lsp",
      "description": "This module defines a workspace symbol type with fields for name, kind, location, container, data, and tags, supporting structured representation of symbols in a codebase. It provides functions to construct symbols, convert them to and from JSON, and manage optional metadata like tags and container names. Concrete use cases include handling symbol search results and cross-referencing in language server operations.",
      "description_length": 417,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueEvaluatableExpression",
      "library": "linol.lsp",
      "description": "This module defines a type for representing inline value evaluatable expressions, including an optional expression string and a range. It provides functions to construct instances, and to convert to and from JSON using Yojson. It is used to serialize and deserialize inline evaluation data in language server protocol implementations.",
      "description_length": 334,
      "index": 127,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ExecuteCommandParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling execute command parameters in an LSP server. It includes fields for command arguments as optional JSON values, the command identifier, and an optional progress token. The module provides functions to construct instances, and serialize/deserialize them using Yojson for communication over LSP.",
      "description_length": 342,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ChangeAnnotation",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing change annotations with optional description and confirmation requirements. It provides functions to construct instances, convert to and from JSON format using Yojson. Useful for handling labeled changes in a document, such as tracking edits or modifications in a text editor context.",
      "description_length": 338,
      "index": 129,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentLinkRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type for document link registration options, including fields for document selector, resolve provider, and work done progress. It provides functions to create instances and convert to and from JSON format. It is used to configure document link capabilities in an LSP server, specifically determining how document links are resolved and reported.",
      "description_length": 367,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.VersionedNotebookDocumentIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a versioned notebook document identifier, consisting of a document URI and an integer version. It provides functions to construct such identifiers, convert them to and from JSON format using `Yojson.Safe.t`. This module is used to uniquely identify specific versions of notebook documents in the context of the LSP (Language Server Protocol) communication.",
      "description_length": 400,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Locations",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` that represents either a list of locations or a list of location links, using the `Location` and `LocationLink` variants. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. It is used to handle structured location data in the context of language server protocol responses.",
      "description_length": 386,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlightRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for document highlight registration in an LSP server. It includes fields for specifying which documents to observe and whether to track progress, with support for JSON serialization and deserialization. It is used to configure document highlight capabilities during LSP initialization.",
      "description_length": 327,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MarkdownClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for specifying client capabilities related to Markdown rendering in a language server protocol. It includes fields for allowed HTML tags, the Markdown parser name, and its version, with support for JSON serialization and deserialization. It is used to configure how Markdown content is processed and displayed in client applications.",
      "description_length": 370,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.AnnotatedTextEdit",
      "library": "linol.lsp",
      "description": "This module defines a record type representing a text edit with an associated annotation identifier, including the new text and the range to which it applies. It provides functions to construct such records and to serialize and deserialize them using Yojson. This module is used to manage annotated text modifications in the context of a language server protocol implementation.",
      "description_length": 378,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticSeverity",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing diagnostic severity levels, including error, warning, information, and hint. It provides functions to convert these severity values to and from Yojson representations. This enables seamless serialization and deserialization of diagnostic severity data when working with JSON-based communication, such as in language server protocol implementations.",
      "description_length": 396,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyOutgoingCallsParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in handling outgoing call hierarchy requests in a language server. It includes fields for a call hierarchy item and optional tokens for tracking progress and work done, facilitating efficient client-server communication. The module provides functions to construct instances, convert to and from JSON, enabling seamless integration with LSP protocols and tools like Yojson for data serialization.",
      "description_length": 452,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.GlobPattern",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents either a glob pattern or a relative glob pattern, using variants from the `Pattern` and `RelativePattern` modules. It provides JSON serialization and deserialization functions for converting values of type `t` to and from `Yojson.Safe.t`. It is used to handle file matching patterns in language server protocol requests that involve file watching or path filtering.",
      "description_length": 412,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing either a full or unchanged document diagnostic report, using variant constructors. It provides bidirectional serialization functions between this type and Yojson.Safe.t for parsing and generating JSON data. The module is used to handle diagnostic reports in a language server protocol context, specifically for distinguishing between changed and unchanged document states.",
      "description_length": 428,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DefinitionOptions",
      "library": "linol.lsp",
      "description": "This module defines a configuration structure for handling definition requests in a language server, specifically supporting an optional `workDoneProgress` flag. It provides functions to create instances, serialize to JSON, and deserialize from JSON using the Yojson library. It is used to configure how definition operations report progress in language server protocol implementations.",
      "description_length": 386,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ApplyWorkspaceEditParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for applying workspace edits with an optional label, used primarily in handling language server protocol requests. It includes functions to construct the structure, convert it to and from JSON format using Yojson. The main use case involves packaging a workspace edit along with a user-facing label for actions like refactoring or code transformation.",
      "description_length": 388,
      "index": 141,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CodeLensOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for code lens features in a language server, specifically controlling whether a resolve provider is used and if work done progress is reported. It works with boolean values wrapped in options to represent optional settings. The module is used to serialize and deserialize these settings to and from JSON, enabling storage or transmission of code lens configuration.",
      "description_length": 407,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentSaveReason",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing the possible reasons a text document was saved, including manual user action, automatic save after a delay, and saving when focus is lost. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This module is used to handle and transmit text document save reasons in LSP (Language Server Protocol) communications.",
      "description_length": 436,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DefinitionClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to definition features in a language server. It includes fields for dynamic registration and link support, both optional boolean values. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 325,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InitializeResult",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for handling the result of a language server initialization. It includes types for server capabilities and metadata like name and version, along with functions to construct and serialize these types. It is used to configure and report the features supported by a language server during the LSP handshake.",
      "description_length": 354,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentSyncRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing notebook document synchronization registration options, specifically used for enabling notebook support in language server protocol implementations. It includes functions to convert between JSON values and the `t` type, facilitating serialization and deserialization during server initialization. The module is used to configure how notebook documents are synchronized between the client and the language server.",
      "description_length": 456,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DeclarationClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for declaration operations in a language server, specifically supporting dynamic registration and link features. It provides functions to create instances of these capabilities and to serialize or deserialize them using Yojson. Use cases include configuring and exchanging client capability settings during language server initialization.",
      "description_length": 402,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SelectionRangeOptions",
      "library": "linol.lsp",
      "description": "This module defines a single data type `t` that represents selection range options in the context of language server protocol communication. It includes a field `workDoneProgress` which indicates whether progress reporting is supported for selection range requests. The module provides functions to create instances of this type, and to convert to and from JSON representations using the Yojson library.",
      "description_length": 403,
      "index": 148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentFilter",
      "library": "linol.lsp",
      "description": "This module defines a notebook document filter type and provides functions to convert it to and from Yojson.Safe.t format. It works with the `Yojson.Safe.t` data type for serialization and deserialization. A concrete use case is handling notebook document filters in a language server protocol implementation where JSON communication is required.",
      "description_length": 346,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for file operations in a language server protocol, with boolean options indicating support for specific events like file creation, deletion, and renaming. It provides functions to construct instances with optional fields, and to convert to and from JSON format using Yojson. It is used to configure and communicate client capabilities during language server initialization.",
      "description_length": 437,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentOnTypeFormattingClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a single type `t` with an optional `dynamicRegistration` boolean field. It provides functions to create instances of this type, convert to and from JSON using Yojson, and is used to represent client capabilities for document on-type formatting in the context of a language server protocol. The module is specifically used to configure and communicate formatting support features between a language client and server.",
      "description_length": 436,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentLinkParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in document link requests, including tokens for progress tracking and a text document identifier. It provides functions to construct instances, convert to and from JSON format. It is used to handle document link operations in an LSP server, where document links need to be resolved and progress reported.",
      "description_length": 358,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionList",
      "library": "linol.lsp",
      "description": "This module defines data structures and creation functions for completion lists in a language server protocol implementation. It includes types for edit ranges, item defaults with optional commit characters and text formatting, and a top-level completion list type that holds a list of completion items along with metadata like `isIncomplete`. These structures are used to represent and customize code completion responses sent from an LSP server to a client.",
      "description_length": 459,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for signature help in a language server, including characters that trigger or retrigger signature assistance and whether work done progress is enabled. It provides functions to create these options and convert them to and from JSON format. It is used to customize how signature information is displayed and updated in an editor during code completion.",
      "description_length": 393,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionOptions",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for configuring language server protocol (LSP) completion features. It includes types for completion item options and global completion settings, supporting fields like trigger characters, commit characters, and progress handling. It is used to serialize and deserialize LSP completion configurations to and from JSON, specifically integrating with the Yojson library for parsing and generation.",
      "description_length": 445,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in inline value requests, including context, range, text document identifier, and an optional progress token. It provides functions to construct instances, convert to and from JSON format. Used to handle inline value queries in a language server protocol implementation, specifically for debugging variable values within specified code ranges.",
      "description_length": 400,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DeclarationRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing options for registering declaration capabilities in a language server, including optional document selector, registration ID, and work done progress flag. It provides functions to construct instances, convert to and from JSON, enabling configuration of declaration-related features in LSP-compliant editors. Use cases include setting up language server extensions that handle symbol declarations with custom identifiers and progress tracking.",
      "description_length": 486,
      "index": 157,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CodeAction",
      "library": "linol.lsp",
      "description": "This module defines and constructs code actions for use in language server protocol implementations. It supports optional fields like commands, diagnostics, workspace edits, and metadata such as title and kind. It is used to represent actions that can be triggered in an editor, such as quick fixes or refactorings, with support for serialization to and from JSON.",
      "description_length": 364,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentRangesFormattingParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in document range formatting operations, including formatting options, target ranges, text document identifiers, and optional progress tokens. It provides functions to construct instances, convert to and from JSON, and is used to specify multi-range formatting requests in language server protocols. Concrete use cases include handling batched code formatting across specific sections of a document during editor interactions.",
      "description_length": 480,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookCellTextDocumentFilter",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents a filter for notebook cell text documents, optionally specifying a language and a notebook identifier either as a string or another notebook document filter. It provides functions to construct instances, convert to and from JSON, enabling precise filtering of notebook cells based on document attributes. Concrete use cases include configuring language server features that apply selectively to specific notebooks or languages within a notebook environment.",
      "description_length": 504,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokens",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing semantic token data in a format compatible with the Language Server Protocol (LSP). It includes functions for constructing the structure, serializing to and from JSON using Yojson. Concrete use cases include encoding and decoding semantic token responses in an LSP server implementation.",
      "description_length": 341,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionContext",
      "library": "linol.lsp",
      "description": "This module defines a data structure for inline completion context, capturing information about selected completions and trigger kinds. It provides functions to construct instances, and serialize or deserialize them using Yojson. It is used to manage contextual data during inline code completion in an LSP server.",
      "description_length": 314,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WillSaveTextDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing parameters for a will-save text document event, including the save reason and document identifier. It provides functions to construct instances, convert to and from JSON format. Used to handle pre-save operations in a language server, such as formatting or validation triggers.",
      "description_length": 327,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintKind",
      "library": "linol.lsp",
      "description": "This module defines an enumeration type `t` with two variants, `Type` and `Parameter`, representing categories of inlay hints in a language server protocol. It includes functions `t_of_yojson` and `yojson_of_t` for converting values between the `t` type and Yojson.Safe.t for JSON serialization and deserialization. This module is used to distinguish and process different kinds of inlay hints generated during code analysis or editing.",
      "description_length": 436,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for representing client capabilities related to signature help in a language server. It includes types for parameter information, signature information, and top-level capabilities, supporting features like label offsets, documentation formats, and dynamic registration. These capabilities are used to configure how a language server provides signature assistance during code editing.",
      "description_length": 433,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentFilter",
      "library": "linol.lsp",
      "description": "This module defines a text document filter with optional fields for language, URI scheme, and file path pattern. It supports creating filters to match specific document types based on these criteria. Used to configure language server capabilities for document synchronization and diagnostics.",
      "description_length": 292,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.HoverClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines client capabilities related to hover functionality in a language server, specifically supporting optional dynamic registration and markup format preferences. It works with boolean and markup kind list types to configure hover behavior. Concrete use cases include parsing and constructing hover capability configurations during language server initialization.",
      "description_length": 378,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ReferenceParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in handling reference requests within a language server protocol implementation. It includes fields for contextual information, position, text document identifier, and optional progress tokens. The module provides functions to construct instances, and serialize or deserialize them using Yojson for communication over the protocol.",
      "description_length": 385,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeLensRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring code lens registration options in the context of a language server. It includes fields for specifying document selectors, enabling resolution providers, and controlling work done progress. The module provides functions to create instances and serialize/deserialize them using Yojson.",
      "description_length": 336,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RegistrationParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for managing a list of registration entries, along with functions to construct and serialize the structure. It works with `Registration.t` values, grouping them into a single list within a `t` record. It is used to handle batch registration requests in a language server protocol implementation, converting between JSON representations and internal data structures for communication.",
      "description_length": 420,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ConfigurationParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing configuration parameters as a list of configuration items. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to handle configuration requests in the context of a language server protocol implementation.",
      "description_length": 309,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a workspace diagnostic report structure containing a list of document-specific diagnostic reports. It provides functions to construct the report, convert it to and from JSON format using Yojson. It is used to aggregate and serialize diagnostic data across multiple files in a workspace.",
      "description_length": 306,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SetTraceParams",
      "library": "linol.lsp",
      "description": "This module defines a record type `t` with a single field `value` of type `Linol_lsp.Types.TraceValues.t`, representing parameters for setting trace values. It provides functions to create instances of this type and to serialize/deserialize them using Yojson. A concrete use case is handling trace configuration parameters in an LSP server, where trace settings need to be parsed from or converted to JSON format for communication with the client.",
      "description_length": 447,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a record type for representing client capabilities related to diagnostics in a language server protocol. It includes fields for dynamic registration, markup message support, and related document support, all optional boolean values. The module provides functions to construct the record, and to convert it to and from JSON format using Yojson.",
      "description_length": 363,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValue",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing different kinds of inline values, including text, variable lookups, and evaluatable expressions, using discriminated unions. It provides bidirectional JSON serialization and deserialization for these inline value types using the Yojson library. This module is useful for handling inline value data in language server protocol implementations where precise value representation and JSON interchange are required.",
      "description_length": 467,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentEdit",
      "library": "linol.lsp",
      "description": "This module represents a set of edits to be applied to a specific text document in the context of the Language Server Protocol. It includes functions to construct a document edit from a list of text or annotated text edits and to serialize/deserialize the edit structure to and from JSON. It is used to bundle changes with the target document identifier for precise code modifications during editing sessions.",
      "description_length": 409,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionItem",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing inline completion items for the LSP protocol, including optional command, filter text, insert text (as a string or string value), and range. It provides functions to create instances of this type and to serialize/deserialize them to and from Yojson. It is used to generate and process inline code suggestions in an LSP-compliant editor integration.",
      "description_length": 392,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json",
      "library": "linol.lsp",
      "description": "This module enables bidirectional transformations between JSON (using `Yojson.Safe.t`) and OCaml types, handling primitives, structured data, lists, and options through dedicated conversion combinators. It provides robust validation and extraction mechanisms for optional JSON parameters in LSP messages, including error propagation for missing or malformed data. These capabilities are used to parse and construct protocol-compliant JSON payloads for language server operations like configuration requests and diagnostic reporting.",
      "description_length": 532,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentSyncClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for text document synchronization, including optional flags for save events and dynamic registration. It provides functions to construct instances of `t`, and to convert to and from JSON using the `Yojson` library. This module is used to configure and communicate client-side text document sync behavior in an LSP (Language Server Protocol) implementation.",
      "description_length": 420,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FormattingOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type for formatting options used in text document formatting, including settings like newline insertion, spacing, and trimming. It provides functions to construct instances with optional fields and to serialize/deserialize them using Yojson. Concrete use cases include configuring code formatters and managing document layout preferences in an LSP server.",
      "description_length": 384,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a record type for client capabilities in an LSP (Language Server Protocol) implementation, with optional fields for different capability categories like text document handling, workspace features, and window interactions. It provides functions to construct instances with optional parameters and to serialize/deserialize values to and from JSON using Yojson. It is used to communicate supported features from an LSP client to a language server during initialization.",
      "description_length": 486,
      "index": 181,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.Color",
      "library": "linol.lsp",
      "description": "This module defines a color representation with red, green, blue, and alpha components, each as integers. It provides functions to construct color values and to convert between color values and Yojson.Safe.t for JSON serialization and parsing. Use this module when handling color data in JSON-based protocols or configurations requiring RGBA values.",
      "description_length": 349,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Substring.Map",
      "library": "linol.lsp",
      "description": "This module implements ordered associative maps keyed by `Substring.t`, supporting insertion, deletion, ordered traversal, and transformation operations with functional semantics. It handles key-value pairs using balanced trees to maintain order, enabling efficient membership checks, range queries, and conversions to/from sequences and lists. Typical use cases include managing hierarchical or text-based key-value associations where ordered access, incremental updates, or sequence-driven construction are critical, such as parsing workflows or structured data transformations.",
      "description_length": 580,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Pattern",
      "library": "linol.lsp",
      "description": "This module defines a type alias `t` for `string` and provides functions to convert values between `t` and `Yojson.Safe.t`. It supports serialization and deserialization of pattern data to and from JSON, enabling use in JSON-based communication such as LSP (Language Server Protocol) messages.",
      "description_length": 293,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and creation functions for representing client capabilities related to code completion in a language server protocol. It includes types for completion items, item kinds, tag support, insert text modes, and resolution support, each allowing optional or configurable fields. These structures are used to specify client-side features such as snippet support, documentation format, and insert text behavior during code completion.",
      "description_length": 462,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MessageActionItem",
      "library": "linol.lsp",
      "description": "This module defines a simple data structure for representing message action items, primarily used in LSP (Language Server Protocol) communications. It includes functions to create instances and convert to and from Yojson representations. A typical use case is encoding or decoding LSP messages that require structured actions with titles, such as user prompts or notifications.",
      "description_length": 377,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for registering code actions in a language server. It includes fields to specify supported code action kinds, document selectors, and optional capabilities like resolution and progress reporting. It works with lists of code action kinds, document selectors, and boolean flags, and is used to configure code action behavior in LSP clients or servers.",
      "description_length": 391,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensDelta",
      "library": "linol.lsp",
      "description": "This module represents semantic token updates in a text document, primarily used to send incremental changes to a language client. It includes operations to construct a token delta with a list of edits and an optional result identifier, along with serialization and deserialization functions for JSON communication. The module is used during semantic highlighting to efficiently update token information without resending the entire set.",
      "description_length": 437,
      "index": 188,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.RenameRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring rename operations in a language server, including options for document selection, preparation, and progress tracking. It provides functions to create instances and convert to and from JSON format. It is used to specify how and when renaming should be performed in an LSP-compliant editor integration.",
      "description_length": 353,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.PositionEncodingKind",
      "library": "linol.lsp",
      "description": "This module defines an enumerated type representing different character encodings for text positions, including UTF8, UTF16, UTF32, and a catch-all for other encodings. It provides functions to convert this type to and from JSON representations using the Yojson library. This is used to handle text encoding metadata in language server protocol communications where precise character indexing is required.",
      "description_length": 405,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MarkedString",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a string with an optional associated language, commonly used for formatted code snippets or documentation. It includes functions to convert values between this type and Yojson representations, enabling JSON serialization and deserialization. These operations are essential for integrating with language server protocol (LSP) features that require structured string data, such as hover documentation or embedded code examples.",
      "description_length": 469,
      "index": 191,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a variant type for representing different kinds of document diagnostic reports in a workspace, specifically full and unchanged document diagnostics. It provides serialization and deserialization functions to and from Yojson for these report types. It is used to handle diagnostic data sent between a language server and a client, enabling precise error tracking and status updates for documents in an IDE or editor.",
      "description_length": 435,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Snippet.Var",
      "library": "linol.lsp",
      "description": "Represents text document editing variables for snippet expansion. Works with string and integer values to capture context like selected text, line numbers, and file paths. Used to dynamically insert editor state into code templates during autocompletion.",
      "description_length": 254,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TraceValues",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic variant type representing trace levels for logging, including `Compact`, `Off`, `Messages`, and `Verbose`. It provides bidirectional conversion functions between this type and Yojson for serialization and deserialization. This is used to configure and persist logging verbosity settings in LSP (Language Server Protocol) implementations.",
      "description_length": 371,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DefinitionRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for specifying options when registering a definition provider in a language server. It includes fields for selecting documents and enabling progress reporting. The module provides functions to create instances, convert to and from JSON, and works with document selectors and boolean flags. Use this module to configure definition request handling in LSP servers.",
      "description_length": 399,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WatchKind",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing file system event kinds such as creation, modification, deletion, or other custom events. It includes functions to convert these event types to and from JSON format using Yojson. This is used to handle file system watch events in a language server protocol implementation.",
      "description_length": 320,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.HoverOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring hover behavior in a language server, specifically supporting an optional `workDoneProgress` flag. It provides functions to create instances, serialize to JSON, and deserialize from JSON using the Yojson library. This structure is used to communicate client capabilities related to progress tracking during hover operations in the Language Server Protocol (LSP).",
      "description_length": 414,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ShowDocumentResult",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing the result of a document display operation, specifically tracking whether the operation was successful. It includes functions to construct the result, convert it to and from JSON format using Yojson, and works directly with boolean values. Concrete use cases include handling responses in a language server protocol where document visibility outcomes need to be serialized or deserialized.",
      "description_length": 443,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InsertTextFormat",
      "library": "linol.lsp",
      "description": "This module defines an enumerated type with two variants, `PlainText` and `Snippet`, representing formats for insertion text in language server protocol operations. It includes functions to convert this type to and from Yojson representations, enabling serialization and deserialization for communication over JSON-based protocols. This is specifically used when handling text insertion behavior in LSP requests and responses, such as auto-completion or code editing features.",
      "description_length": 476,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidOpenNotebookDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a type for parameters used when opening a notebook document, containing a list of cell text documents and the notebook document itself. It includes functions to construct this type and convert it to and from JSON format. This is useful for handling notebook document events in a language server protocol implementation.",
      "description_length": 339,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticRelatedInformation",
      "library": "linol.lsp",
      "description": "This module defines a type for diagnostic-related information, combining a location and a message. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to attach additional context to diagnostics, such as pointing to related code locations with explanatory messages.",
      "description_length": 309,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Substring.Uutf",
      "library": "linol.lsp",
      "description": "Handles UTF-8 decoding from a substring source, providing a function to feed a Uutf decoder with bytes starting at a specified position. Works with `Linol_lsp.Substring.t` and `Uutf.decoder` types. Useful for incrementally decoding UTF-8 text from a substring buffer into Unicode code points.",
      "description_length": 292,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceUnchangedDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a data structure for reporting diagnostics of unchanged documents in a workspace. It includes functions to create and serialize diagnostic reports with fields for result ID, document URI, and optional version. Concrete use cases include caching diagnostic results and tracking document state across analysis sessions.",
      "description_length": 337,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type for configuring file operation notifications in an LSP server, with optional fields for handling file creation, deletion, and renaming events. It provides functions to construct instances with specific event handlers and serialize or deserialize them using Yojson. Concrete use cases include setting up file event monitoring in an LSP extension or integrating file system changes into a language server.",
      "description_length": 437,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ExecuteCommandRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for specifying command execution registration options in a language server protocol implementation. It includes fields for a list of command names and an optional flag indicating whether work done progress is supported. It provides functions to construct instances, convert to and from JSON format.",
      "description_length": 335,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities related to diagnostic workspace features, specifically supporting an optional `refreshSupport` boolean. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This structure is used to communicate client capabilities during the initialization phase of a language server protocol session.",
      "description_length": 401,
      "index": 206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for signature help features in a language server, including document selectors, trigger characters, and progress reporting. It supports data types like optional document selectors, string lists for triggers, and boolean flags. Concrete use cases include setting up signature help in an LSP server and serializing or deserializing these settings using JSON.",
      "description_length": 398,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueContext",
      "library": "linol.lsp",
      "description": "This module defines a record type with `frameId` and `stoppedLocation` fields, representing contextual information for inline value evaluation during debugging. It provides functions to construct instances, and serialize/deserialize them using Yojson. This type is used to pass inline value context data between a debugger and an editor in an LSP (Language Server Protocol) implementation.",
      "description_length": 389,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RenameFileOptions",
      "library": "linol.lsp",
      "description": "This module defines options for controlling file renaming behavior, specifically whether to ignore the operation if the target exists or to overwrite existing files. It works with JSON data through serialization and deserialization functions, enabling configuration handling in language server protocols. Use cases include managing file operations during refactoring or workspace updates where safe renaming is required.",
      "description_length": 420,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeKind",
      "library": "linol.lsp",
      "description": "This module defines a variant type `t` representing different kinds of folding ranges in source code, such as `Comment`, `Imports`, `Region`, and `Other` with a custom string. It includes functions to convert between this type and Yojson for serialization and deserialization. This is used to communicate folding range categories to an LSP client, enabling structured code folding in editors.",
      "description_length": 392,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.PrepareSupportDefaultBehavior",
      "library": "linol.lsp",
      "description": "This module defines a single type `t` representing the default behavior for prepare support in the LSP protocol, specifically the `Identifier` variant. It provides functions to convert between this type and Yojson for serialization and deserialization. This type is used to indicate that the client should use identifier-based prepare support when handling features like renaming or code actions.",
      "description_length": 396,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensDeltaPartialResult",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing partial results for semantic token deltas, containing a list of edits. It provides functions to construct instances of this type and to serialize/deserialize them using Yojson. It is used to efficiently transmit incremental updates to semantic token data in a language server protocol implementation.",
      "description_length": 344,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MonikerKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` with three variants (`Import`, `Export`, `Local`) to represent identifier binding kinds. It provides bidirectional conversion functions between this type and Yojson for use in JSON-based communication, such as in language server protocol messages. The module is used to distinguish how identifiers are introduced or referenced in source code during analysis or tooling operations.",
      "description_length": 411,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentColorOptions",
      "library": "linol.lsp",
      "description": "This module defines a configuration type for document color operations, specifically supporting optional progress reporting via the `workDoneProgress` boolean field. It provides functions to create instances, convert to and from JSON format using Yojson. This module is used to configure how document color requests are handled in the language server, particularly for tracking progress during color resolution tasks.",
      "description_length": 417,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CreateFileOptions",
      "library": "linol.lsp",
      "description": "This module defines options for file creation operations, specifically handling flags to control behavior when a file already exists. It provides a `create` function to construct these options with optional `ignoreIfExists` and `overwrite` parameters, and supports JSON serialization and deserialization via `t_of_yojson` and `yojson_of_t`. It is used to configure file creation requests in language server protocol interactions, ensuring correct handling of existing files.",
      "description_length": 474,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSymbolClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for representing client capabilities related to document symbols in a language server protocol. It includes types for symbol kind, tag support, and hierarchical symbol display, along with functions to construct and serialize these capabilities. It is used to configure how a language server should report symbol information based on client support.",
      "description_length": 398,
      "index": 216,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ResourceOperation",
      "library": "linol.lsp",
      "description": "This module defines a resource operation with an optional annotation identifier and a kind string. It provides functions to construct the type, and serialize/deserialize it to and from JSON using Yojson. It is used to represent operations on resources, such as file changes, in the context of the LSP (Language Server Protocol).",
      "description_length": 328,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookCell",
      "library": "linol.lsp",
      "description": "This module defines a notebook cell structure with fields for document URI, execution summary, cell kind, and optional metadata. It provides functions to construct a cell, convert it to and from JSON format. Used to represent individual cells in a notebook document with their associated state and execution data.",
      "description_length": 313,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelp",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing signature help information in a language server, specifically tracking active parameters and signatures. It provides functions to construct signature help instances and serialize/deserialize them using Yojson. Concrete use cases include handling signature assistance in code editors, such as displaying function parameter hints during development.",
      "description_length": 401,
      "index": 219,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlight",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing document highlights in a text editor, including a range and an optional highlight kind. It provides functions to construct highlights, convert them to and from JSON format using Yojson. It is used to serialize and deserialize highlight information for features like symbol occurrences or read/write references in code editors.",
      "description_length": 380,
      "index": 220,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.Result",
      "library": "linol.lsp",
      "description": "This module provides operations for working with the standard `result` type, including creating, transforming, and inspecting results. It supports concrete use cases such as error handling in parsing or computation pipelines, where success and failure cases must be explicitly managed. Functions like `map`, `bind`, and `fold` enable composing operations that depend on result values, while utilities like `to_option` and `to_list` convert results into other standard types.",
      "description_length": 474,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSymbolOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for document symbol requests, including an optional label and a flag for work done progress tracking. It provides functions to create instances and convert to and from JSON format using Yojson. Concrete use cases include setting up parameters for language server protocol interactions and serializing these parameters for transmission or storage.",
      "description_length": 388,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentColorRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing options for registering document color capabilities in a language server, including optional document selectors, an identifier, and progress tracking. It provides functions to create instances of this type and to serialize/deserialize them using Yojson. This is used when configuring language server features that require document-specific color information handling.",
      "description_length": 411,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceFoldersInitializeParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents workspace folder initialization parameters, with an optional list of workspace folders. It includes functions to create instances, convert to and from JSON using Yojson. It is used to handle workspace folder configurations during the initialization phase of a language server.",
      "description_length": 323,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension.DebugEcho",
      "library": "linol.lsp",
      "description": "Implements custom debug echo functionality for LSP protocol extensions using Yojson serialization. Works with `Params.t` records containing `message` strings and `Result` structures for response handling. Used to send diagnostic messages between language servers and clients during development.",
      "description_length": 294,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.HoverParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling hover request parameters in a language server protocol implementation. It includes functions to construct the structure with required and optional fields, and to serialize or deserialize it using Yojson. Concrete use cases include processing user hover interactions over text documents, such as retrieving documentation or type information at specific positions.",
      "description_length": 412,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InitializedParams_",
      "library": "linol.lsp",
      "description": "This module defines data structures and serialization functions for handling initialization parameters in an LSP server. It includes types for client information and top-level initialization data, supporting optional fields like capabilities, root URI, and trace settings. The module is used to parse and construct initialization requests during the setup of a language server, enabling configuration based on client-provided JSON.",
      "description_length": 431,
      "index": 227,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensEdit",
      "library": "linol.lsp",
      "description": "This module defines a record type for representing semantic token edits in a text document, including the start position, number of tokens to delete, and optional replacement data. It provides functions to construct these records and serialize them to and from JSON using the Yojson library. This is used to efficiently communicate syntax highlighting updates between a language server and a client.",
      "description_length": 399,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for completion parameters used in language server protocol requests, including position, text document identifier, and optional context and progress tokens. It provides functions to construct instances, convert to and from JSON format. It is used to handle code completion requests in an LSP server, enabling features like auto-suggesting function names or variables at specific positions in a document.",
      "description_length": 437,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentOnTypeFormattingRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type and associated functions for specifying document formatting registration options in an LSP server. It includes a document selector, a first trigger character, and an optional list of additional trigger characters. It is used to configure when and how automatic document formatting should be triggered during typing in a language server.",
      "description_length": 363,
      "index": 230,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchyItem",
      "library": "linol.lsp",
      "description": "This module defines a record type representing an item in a type hierarchy, with fields for metadata like name, kind, and location ranges. It provides a constructor function to build these records and functions to serialize and deserialize them using Yojson. The module is used to represent type hierarchy information in a language server, enabling features like type navigation and code analysis.",
      "description_length": 397,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileSystemWatcher",
      "library": "linol.lsp",
      "description": "This module defines a file system watcher configuration with a glob pattern and an optional watch kind. It provides functions to create a watcher, serialize it to JSON, and deserialize it from JSON. Use this to specify which files to monitor in a language server, such as tracking changes to source files matching a specific pattern.",
      "description_length": 333,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for code actions in the LSP protocol, including supported action kinds, resolution capability, and progress reporting. It provides functions to construct and serialize these options, enabling clients to specify how code actions should be handled during editing sessions. Use cases include setting up LSP server capabilities and managing code action responses in editors.",
      "description_length": 412,
      "index": 233,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentLink",
      "library": "linol.lsp",
      "description": "This module defines a structured type for representing document links in a text editor, including their range, optional target URI, tooltip, and associated JSON data. It provides functions to construct these link objects and serialize or deserialize them using Yojson. Concrete use cases include handling clickable links in code editors, such as hyperlinked references or jump-to-definition targets.",
      "description_length": 399,
      "index": 234,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ProgressToken",
      "library": "linol.lsp",
      "description": "This module defines a type for representing progress tokens, which can be either integers or strings. It includes functions to convert these tokens to and from JSON format using the Yojson library. This is useful for handling progress reporting in language server protocol implementations where token-based tracking is required.",
      "description_length": 328,
      "index": 235,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeWorkspaceFoldersParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that wraps a `WorkspaceFoldersChangeEvent.t` to represent changes to workspace folders in the LSP protocol. It provides functions to construct instances of this type and to serialize/deserialize them using Yojson. It is used specifically to handle notifications when workspace folders are added or removed during an LSP session.",
      "description_length": 359,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for representing and manipulating semantic token capabilities in a language server protocol. It includes types for full and range-based token requests, token formats, and client-specific features like dynamic registration and token modifiers. These capabilities are used to configure how semantic tokens are requested and processed by a language server, such as supporting multiline or overlapping tokens.",
      "description_length": 455,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentFormattingRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines options for registering document formatting capabilities in a language server. It includes fields for specifying which documents to format and whether to track progress. The module supports serialization to and from JSON for communication with the client.",
      "description_length": 275,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Cli.Arg",
      "library": "linol.lsp",
      "description": "This module parses standard LSP server command-line arguments using `Stdlib.Arg`. It defines a record type `t` to hold parsed arguments and provides functions to retrieve the argument specification, extract the communication channel, and obtain the client process ID. Concrete use cases include initializing an LSP server with correct CLI parameters and validating channel input from the command line.",
      "description_length": 401,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionTriggerKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing the trigger kind for code actions, with variants `Invoked` and `Automatic`. It provides functions to convert values of this type to and from Yojson for serialization and deserialization. This type is used to distinguish between user-triggered and automatically executed code actions in the context of a language server.",
      "description_length": 363,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RegularExpressionsClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to regular expressions, specifically capturing the engine name and an optional version. It provides functions to construct instances, convert to and from JSON, and specify the exact fields required for serialization. This is used to communicate supported regex features between a language server and client during protocol negotiation.",
      "description_length": 417,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Header.Private",
      "library": "linol.lsp",
      "description": "This module provides constants for HTTP header fields used in LSP communication, specifically `content_length` and `content_type`. It works with string data types to represent header field values. These constants are used to format and parse LSP messages correctly during server-client interactions over standard input/output.",
      "description_length": 326,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentFormattingOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for document formatting options with a single field indicating whether work done progress is supported. It provides functions to create instances, serialize to, and deserialize from JSON. It is used to configure formatting behavior in language server protocol implementations.",
      "description_length": 313,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchyClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type hierarchy client capabilities structure with an optional dynamic registration flag. It provides functions to create instances, serialize to and from JSON using Yojson. This module is used to communicate client support for type hierarchy features in a language server protocol implementation.",
      "description_length": 318,
      "index": 244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DeleteFile",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing file deletion operations in the context of a language server protocol. It includes fields for an optional annotation identifier, deletion options, and a document URI. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for communication over JSON-based protocols.",
      "description_length": 370,
      "index": 245,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpTriggerKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing the possible triggers for signature help in a language server, including invocation by user action, trigger character, or content change. It provides functions to convert values of type `t` to and from Yojson for serialization and deserialization. This is used to handle signature help requests in the context of language server protocol communication.",
      "description_length": 396,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyItem",
      "library": "linol.lsp",
      "description": "This module defines a record type representing an item in a call hierarchy, including fields such as name, kind, range, and URI, and provides functions to construct and serialize these items. It works with structured data types like JSON, ranges, document URIs, and symbol kinds, primarily used in language server protocol implementations. Concrete use cases include building and transmitting call hierarchy information during code navigation in IDEs.",
      "description_length": 451,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Moniker",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a moniker with fields for an identifier, kind, scheme, and uniqueness level. It provides functions to construct a moniker, and to serialize and deserialize it using Yojson. It is used to uniquely identify symbols in a codebase, particularly in contexts like cross-referencing and symbol resolution.",
      "description_length": 342,
      "index": 248,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.FileChangeType",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing file change events, with constructors for file creation, modification, and deletion. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This module is used to handle file change notifications in JSON-RPC communication, particularly in the context of the Language Server Protocol.",
      "description_length": 406,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in requesting folding ranges within a text document, including optional tokens for progress tracking. It provides functions to construct instances of this type and to serialize or deserialize them using Yojson. Concrete use cases include handling LSP (Language Server Protocol) requests where a client asks for folding range information in a source file.",
      "description_length": 408,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceFullDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a workspace diagnostic report structure containing a list of diagnostics, a document URI, and optional result ID and version. It provides functions to construct the structure, convert it to and from JSON format. It is used to represent and serialize full-document diagnostic results for a specific file in a workspace.",
      "description_length": 338,
      "index": 251,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionList",
      "library": "linol.lsp",
      "description": "This module defines a structure for managing a list of inline completion items, primarily used in language server protocol implementations. It supports creating instances from lists of completion items and serializing or deserializing these instances using Yojson. Concrete use cases include handling and transmitting inline code suggestions in a text editor or IDE.",
      "description_length": 366,
      "index": 252,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ImplementationParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in handling implementation requests within a language server protocol. It includes fields for tracking progress and identifying the document and position of interest. The module supports creating instances with optional progress tokens and serializing to and from JSON format.",
      "description_length": 330,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines options for registering file operations, primarily working with a list of file operation filters. It provides functions to construct these options and serialize or deserialize them using Yojson. Concrete use cases include configuring file event handlers in an LSP server, such as tracking file creations, deletions, or changes.",
      "description_length": 347,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Declaration",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` that represents either a single location or a list of locations, using the `Location.t` type. It provides bidirectional conversion between this type and Yojson for serialization and deserialization. This is used to handle structured data in language server protocol messages where declarations can be singular or multiple.",
      "description_length": 365,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.OptionalVersionedTextDocumentIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type for representing a text document identifier with an optional version number. It includes functions to create such identifiers, convert them to and from JSON format. This is used when tracking document changes in a language server where clients may optionally specify document versions.",
      "description_length": 312,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensLegend",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing semantic token legends, specifically capturing token modifiers and types as string lists. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to serialize and deserialize token legend data for communication in a language server protocol.",
      "description_length": 342,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ProgressParams",
      "library": "linol.lsp",
      "description": "This module defines a parameter structure for progress reporting, consisting of a token and a value. It provides functions to create instances, convert from JSON using a custom decoder, and serialize to JSON using a custom encoder. Concrete use cases include handling progress updates in language server protocol interactions where structured data needs to be passed alongside a progress token.",
      "description_length": 394,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSymbolParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in document symbol requests, including optional progress tokens and a text document identifier. It provides functions to construct instances, convert to and from JSON format. It is used to handle symbol information retrieval for a specific document in the context of language server protocol operations.",
      "description_length": 360,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ReferenceContext",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents context information for references, specifically whether a reference includes a declaration. It provides functions to create instances of this type and to serialize and deserialize them using Yojson. This is used to manage reference context during language server protocol operations, such as handling symbol references in a codebase.",
      "description_length": 381,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for call hierarchy in a language server, specifically supporting optional dynamic registration. It provides functions to create instances, convert to and from JSON using Yojson, and manage the `dynamicRegistration` field. Use this module to handle client-side configuration of call hierarchy features in a language server protocol implementation.",
      "description_length": 410,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchyOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring type hierarchy operations in the context of a language server. It includes a single field `workDoneProgress` to indicate whether progress reporting is enabled. The module provides functions to create instances, and to serialize and deserialize them using Yojson.",
      "description_length": 315,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents text document registration options, primarily containing an optional document selector. It provides functions to create instances, convert to and from JSON using Yojson, and specify which documents to register for language server features. Concrete use cases include configuring document-specific capabilities in a language server, such as enabling diagnostics or code completion for certain file types or projects.",
      "description_length": 462,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities for text document features in a language server protocol. It includes fields for optional capabilities like code actions, completions, hover information, and document synchronization, each tied to specific feature modules. The module provides functions to construct instances with optional parameters and to serialize/deserialize instances using Yojson for communication over JSON-based protocols.",
      "description_length": 467,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ConfigurationItem",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing configuration items with optional scope and section fields. It provides functions to create instances and convert to and from JSON format using Yojson. Concrete use cases include handling configuration requests in a language server protocol implementation, where structured data needs to be exchanged between client and server.",
      "description_length": 381,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FullDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a full document diagnostic report, containing a list of diagnostics and an optional result identifier. It provides functions to create a report, convert it to and from JSON format using Yojson. This module is used to structure diagnostic data sent from a language server to a client, such as in responses to document diagnostic requests in an LSP (Language Server Protocol) implementation.",
      "description_length": 433,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for semantic token registration in a language server. It includes data structures to specify token legends, document selectors, and synchronization settings like full or delta updates. These types are used to configure how semantic tokens are provided and updated in an LSP (Language Server Protocol) implementation.",
      "description_length": 358,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeDefinitionOptions",
      "library": "linol.lsp",
      "description": "This module defines options for type definition requests, specifically supporting the `workDoneProgress` flag to indicate client support for progress reporting. It works with boolean values wrapped in an option type to represent optional configuration. Concrete use cases include configuring language server responses to handle type definitions with or without progress tracking.",
      "description_length": 379,
      "index": 268,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.LinkedEditingRanges",
      "library": "linol.lsp",
      "description": "This module defines a data structure for managing linked editing ranges in a text editor, including an optional word pattern for matching identifiers. It provides functions to construct instances, serialize to and from JSON, and works with lists of range objects. Concrete use cases include synchronizing edits across multiple locations in a document, such as renaming variables or updating function parameters.",
      "description_length": 411,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FailureHandlingKind",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing different strategies for handling failures in language server operations, such as aborting, applying transactional changes, or undoing previous actions. It includes functions to convert between the type and Yojson representations, enabling serialization and deserialization for communication with the language server protocol. The type is used to specify how edits or operations should behave when errors occur during processing.",
      "description_length": 477,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ExecutionSummary",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing the outcome of an execution step, with fields tracking the order and success status. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for serializing execution results to disk or transmitting them over a network.",
      "description_length": 305,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionItemTag",
      "library": "linol.lsp",
      "description": "This module defines a single type `t` representing tags for completion items, specifically the `Deprecated` tag. It provides functions to convert this type to and from Yojson for serialization and deserialization. This module is used to annotate code completion suggestions with metadata in a language server protocol implementation.",
      "description_length": 333,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Unregistration",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing unregistration requests in a language server protocol. It includes functions to create an unregistration record with an identifier and method name, and to serialize or deserialize these records using Yojson. Concrete use cases include managing client unregistrations during LSP session teardown or dynamic capability management.",
      "description_length": 382,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RenameOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for rename options with two optional boolean fields: `prepareProvider` and `workDoneProgress`. It includes functions to create instances, and to convert to and from JSON format using Yojson. It is used to configure rename operations in a language server, specifically controlling whether to prepare a provider and track progress during renaming.",
      "description_length": 382,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in code action requests, including context, range, and document identifiers. It provides functions to construct instances, convert to and from JSON format. Used to handle code actions in a language server, such as generating quick fixes or refactorings based on a specific document and user context.",
      "description_length": 356,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ImplementationClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities related to implementation support in a language server. It includes fields for dynamic registration and link support, both optional boolean values. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 324,
      "index": 276,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SaveOptions",
      "library": "linol.lsp",
      "description": "This module defines a configuration type for save operations, specifically whether to include text content during saving. It provides functions to construct the configuration, convert it to and from JSON format. It is used to handle save options in a language server protocol implementation, where clients specify if text should be included when saving a document.",
      "description_length": 364,
      "index": 277,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SymbolInformation",
      "library": "linol.lsp",
      "description": "This module defines a record type representing symbol information in a codebase, including metadata like name, kind, location, and deprecation status. It provides functions to construct symbol records, and to serialize and deserialize them using Yojson. It is used to represent and exchange symbol data in language server protocol interactions, such as during code navigation or symbol listing operations.",
      "description_length": 405,
      "index": 278,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for inline completion in a language server protocol. It includes functions to create a capability record, and to convert to and from JSON format using Yojson. It is used to configure whether dynamic registration of inline completion capabilities is supported by the client.",
      "description_length": 337,
      "index": 279,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CreateFile",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing file creation operations in the context of a language server protocol. It includes fields for an optional annotation identifier, creation options, and a document URI. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for communication over JSON-based protocols.",
      "description_length": 370,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeWatchedFilesParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents parameters for handling file change events in a language server protocol. It includes a list of file events and provides functions to construct instances and convert to and from JSON format. It is used to process notifications about changes to watched files in an LSP server implementation.",
      "description_length": 337,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentUri",
      "library": "linol.lsp",
      "description": "This module represents and manipulates document URIs in the context of the Language Server Protocol (LSP). It provides functions to convert URIs to and from strings and file paths, extract components like query and fragment, and supports comparison, equality checks, and hashing. Concrete use cases include normalizing file paths for cross-platform LSP communication and parsing URI components for document identification and handling.",
      "description_length": 435,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.LocationLink",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing a link between two locations in a document, including ranges and the target URI. It provides functions to construct the structure, convert it to and from JSON format. It is used to implement features like \"Go to Definition\" where precise location mapping across files is required.",
      "description_length": 330,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentFormattingClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for document formatting in the context of the Language Server Protocol (LSP). It includes a function `create` to construct instances with optional dynamic registration support, along with serialization and deserialization functions for JSON communication. It is used to configure and exchange document formatting capabilities between a language client and server.",
      "description_length": 427,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeDefinitionRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type for registration options used in type definition requests within a language server protocol. It includes fields for document selection, request ID, and progress tracking, and provides functions to create instances and serialize them to and from JSON. It is used to configure how type definition information is retrieved and processed in an LSP-compliant editor integration.",
      "description_length": 400,
      "index": 285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensDeltaParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling semantic token delta parameters in the context of the Language Server Protocol. It includes fields for tracking progress tokens, referencing prior results, and identifying text documents, along with functions to construct instances and serialize to and from JSON. It is used to efficiently update semantic token data in an LSP server without reprocessing the entire document.",
      "description_length": 425,
      "index": 286,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DeclarationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling declaration options in a language server protocol implementation. It includes a single field `workDoneProgress` to indicate whether progress reporting is enabled for declaration operations. The module provides functions to create instances, and to serialize and deserialize them using Yojson for communication over JSON-based protocols.",
      "description_length": 386,
      "index": 287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring diagnostic behavior in a language server. It includes fields to control inter-file dependency tracking, workspace-level diagnostics, and progress reporting, along with optional identifiers. The module supports creating, serializing, and deserializing these configurations using JSON.",
      "description_length": 336,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.GeneralClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for handling client capabilities in a language server protocol implementation. It includes types for optional features like markdown support, position encodings, regular expressions, and stale request handling, with constructors and converters for JSON serialization. It is used to configure and communicate client-specific capabilities during LSP handshake and operation.",
      "description_length": 422,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionItem",
      "library": "linol.lsp",
      "description": "This module defines a completion item structure used to represent suggestions in a language server protocol context. It includes fields for text edits, commands, documentation, and metadata, supporting precise control over code completion behavior. The module provides functions to construct completion items and serialize them to and from JSON format.",
      "description_length": 352,
      "index": 290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SelectedCompletionInfo",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing a selected completion in the context of a text editor, specifically capturing the range of the completion and the associated text. It provides functions to construct instances, convert to and from JSON using Yojson, and ensures structured handling of completion data. Concrete use cases include managing auto-completion selections in an LSP server, where precise range and text information are required for client communication.",
      "description_length": 478,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ReferenceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to reference handling in a language server protocol. It includes functions to construct the structure, serialize it to JSON, and deserialize it from JSON. A concrete use case is configuring the server's behavior based on whether the client supports dynamic registration of reference-related features.",
      "description_length": 382,
      "index": 292,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.Hover",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing hover information in an LSP server, with support for different content formats and an optional range. It provides functions to construct hover values, and to serialize and deserialize them using Yojson. Concrete use cases include formatting documentation or type information shown on hover in an editor, handling both plain text and structured markup content.",
      "description_length": 403,
      "index": 293,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InitializeError",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing errors during initialization, with a single field indicating whether the operation should be retried. It provides functions to create instances, convert to and from JSON using Yojson. This is used to handle and communicate initialization failures in a language server protocol implementation.",
      "description_length": 336,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents client capabilities for notebook document synchronization, containing a single field for synchronization settings. It provides functions to create instances of this type, and to convert to and from JSON using the Yojson library. This module is used to configure how notebook documents are synchronized between a client and a language server, specifically detailing the synchronization capabilities supported by the client.",
      "description_length": 469,
      "index": 295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeLensWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing workspace client capabilities related to code lens refresh support. It provides functions to create instances, serialize to, and deserialize from JSON format using Yojson. It is used to communicate client-specific capabilities in a language server protocol context, specifically for handling code lens features.",
      "description_length": 361,
      "index": 296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ShowMessageRequestClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and serialization functions for handling client capabilities related to message request responses in a language server protocol. It includes types for `messageActionItem` with optional support flags and a top-level type `t` that wraps these capabilities. The module is used to serialize and deserialize capability data during LSP handshake or configuration exchanges.",
      "description_length": 403,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceDiagnosticParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for workspace diagnostic parameters used in the LSP protocol. It includes fields for tracking progress tokens, previous result identifiers, and optional workspace identifiers. The module provides functions to construct instances, and serialize or deserialize them using Yojson for communication between the language server and client.",
      "description_length": 371,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.LinkedEditingRangeParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in linked editing range requests, including position, text document identifier, and an optional progress token. It provides functions to construct instances, and to convert to and from JSON format. It is used to support features like synchronized editing across multiple locations in a document.",
      "description_length": 352,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DeclarationLink",
      "library": "linol.lsp",
      "description": "This module defines a type alias for `LocationLink.t` and provides bidirectional conversion functions between this type and Yojson.Safe.t. It facilitates the serialization and deserialization of location link data, typically used to represent cross-references or navigation targets in source code. Direct use cases include handling declaration links in language server protocol responses, such as mapping identifiers to their definitions.",
      "description_length": 438,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing workspace-related client capabilities in an LSP (Language Server Protocol) implementation. It includes fields for optional features such as applying edits, code lens, diagnostics, configuration changes, file watching, command execution, and more, each potentially containing further nested capability details. The module provides functions to construct instances, and to convert to and from JSON format, facilitating serialization and deserialization for communication purposes.",
      "description_length": 528,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DeclarationParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for handling declaration parameters in an LSP server, including position, text document identifier, and optional progress tokens. It provides functions to construct instances, convert to and from JSON using Yojson. Concrete use cases include parsing and serializing LSP declaration requests for handling in editor integrations.",
      "description_length": 361,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeWatchedFilesClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for handling changes to watched files in a language server protocol. It includes fields for optional dynamic registration and relative pattern support, both boolean values. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 343,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ReferenceRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring reference registration in a language server, specifically handling document selectors and progress reporting. It provides functions to create instances and convert to and from JSON format. It is used to specify which documents the server should track for references and whether to report progress during processing.",
      "description_length": 368,
      "index": 304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokenModifiers",
      "library": "linol.lsp",
      "description": "This module defines a set of semantic token modifiers used to annotate symbols in source code with specific attributes such as `Readonly`, `Static`, or `Deprecated`. It provides bidirectional conversion between these modifiers and Yojson representations for serialization and deserialization. These annotations are used in language server protocols to convey symbol properties to editors for improved code navigation and highlighting.",
      "description_length": 434,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ServerCapabilities",
      "library": "linol.lsp",
      "description": "This module defines and constructs server capabilities for an LSP server, including support for features like code actions, diagnostics, document formatting, and workspace management. It works with nested records and polymorphic variants to represent optional and varied capability configurations. Concrete use cases include specifying whether the server supports hover information, code completion, semantic tokens, and workspace folder operations.",
      "description_length": 449,
      "index": 306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.StaticRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for static registration options with an optional string identifier. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for managing registration configurations in language server protocols where optional identifiers are needed.",
      "description_length": 309,
      "index": 307,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ApplyWorkspaceEditResult",
      "library": "linol.lsp",
      "description": "This module defines a record type representing the result of applying a workspace edit, including whether the edit was applied successfully, the index of a failed change if applicable, and an optional failure reason. It provides functions to construct instances of this type and to serialize and deserialize them using Yojson. Concrete use cases include reporting the outcome of batch file modifications in a language server, such as tracking partial failures during refactoring operations.",
      "description_length": 490,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidCloseNotebookDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a type for handling notebook document close events, containing identifiers for both the notebook and its associated text documents. It provides functions to construct instances, convert to and from JSON, and manage event data. It is used to notify the language server when a notebook document is closed in the client, ensuring proper resource cleanup.",
      "description_length": 371,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Uri0.Private",
      "library": "linol.lsp",
      "description": "Controls whether URIs are processed using Windows-style paths. This affects how file paths are normalized and compared in URI operations. Useful when handling cross-platform file URIs in LSP implementations.",
      "description_length": 207,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring call hierarchy registration options in a language server. It includes fields for specifying document selectors, a registration ID, and whether work done progress is supported. The module provides functions to create instances and serialize/deserialize them to and from JSON.",
      "description_length": 327,
      "index": 311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.PublishDiagnosticsParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for publishing diagnostic information in a language server protocol context. It includes fields for a list of diagnostics, a document URI, and an optional version number. The module provides functions to construct the data structure, along with serialization and deserialization to and from JSON format.",
      "description_length": 340,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InitializeParams",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for handling initialization parameters in an LSP server. It includes types for client information and initialization settings, along with constructors and JSON serialization/deserialization functions. It is used to configure server behavior based on client capabilities, workspace settings, and runtime options during LSP initialization.",
      "description_length": 387,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ShowMessageRequestParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling message request parameters in an LSP (Language Server Protocol) server. It includes fields for a message string, message type, and optional actionable items, along with functions to construct instances and serialize/deserialize to and from JSON. It is used to display user prompts with selectable actions in language tools like IDEs or editors.",
      "description_length": 394,
      "index": 314,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentContentChangeEvent",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing text document content change events, with optional `range` and `rangeLength` fields and a required `text` field. It provides functions to construct instances, and to convert to and from JSON using the `Yojson.Safe` format. It is used to model incremental text changes in a document, such as those sent by a language client in the context of the Language Server Protocol.",
      "description_length": 414,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceSymbolOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for workspace symbol handling in the LSP (Language Server Protocol). It includes fields to enable symbol resolution and progress reporting during symbol queries. The module provides functions to construct these options, and serialize/deserialize them to and from JSON format using Yojson.",
      "description_length": 330,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.BaseSymbolInformation",
      "library": "linol.lsp",
      "description": "This module defines a record type for symbol information with optional container name, symbol kind, name, and tags. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to represent symbols like variables or functions in code analysis tools.",
      "description_length": 284,
      "index": 317,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentSyncOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for text document synchronization in an LSP server. It includes fields to specify change notification behavior, document open/close tracking, save handling with optional save options, and support for will-save and will-save-wait-until events. It is used to configure how text document events are communicated between the client and server during editing sessions.",
      "description_length": 405,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SymbolTag",
      "library": "linol.lsp",
      "description": "This module defines a single type `t` representing symbol tags, currently only `Deprecated`. It provides functions to convert this type to and from Yojson for serialization and deserialization. This is used to handle symbol metadata in a language server protocol implementation, specifically for marking symbols as deprecated in tooling responses.",
      "description_length": 347,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ParameterInformation",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing parameter information in a language server protocol, including optional documentation and a label that can be a string or an offset range. It provides functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include sending parameter details in LSP responses like `textDocument/signatureHelp`.",
      "description_length": 389,
      "index": 320,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentRangeFormattingOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for document range formatting options in the context of a language server protocol. It includes fields to indicate support for formatting ranges and progress reporting, with functions to create instances and serialize to or from JSON. It is used to configure formatting capabilities in a language server implementation.",
      "description_length": 356,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities related to folding range refresh support in a language server protocol. It includes functions to create instances, serialize to JSON, and deserialize from JSON. It is used to configure and communicate client-specific features during language server initialization.",
      "description_length": 334,
      "index": 322,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TokenFormat",
      "library": "linol.lsp",
      "description": "This module defines a single type `t` representing token formatting options, specifically supporting relative formatting. It includes functions to convert values of this type to and from JSON using the Yojson library. This is used to serialize and deserialize token format settings when communicating with language servers.",
      "description_length": 323,
      "index": 323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.UniquenessLevel",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing levels of uniqueness scope, including document, project, group, scheme, and global. It provides bidirectional conversion functions between `t` and Yojson.Safe.t for serialization and deserialization. This type is used to specify the scope at which identifiers or configurations must remain unique within a language server protocol implementation.",
      "description_length": 402,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticServerCancellationData",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling diagnostic server cancellation events in a language server protocol implementation. It includes functions to create and serialize a cancellation data record that indicates whether a retrigger request should be sent. The module works with boolean values to represent the retrigger flag and supports JSON serialization and deserialization via Yojson.",
      "description_length": 398,
      "index": 325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring folding range options in a language server, specifically supporting optional work done progress tracking. It provides functions to create instances, convert to and from JSON format using Yojson, and manage the `workDoneProgress` field. Concrete use cases include handling client requests for code folding ranges with progress reporting in language server implementations.",
      "description_length": 424,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueVariableLookup",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing inline value variable lookups, including whether the lookup is case-sensitive, the associated range, and an optional variable name. It provides functions to construct instances, serialize to and from JSON. It is used to convey contextual variable information within an editor, such as during inline value evaluation in a debugger.",
      "description_length": 384,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentRangeFormattingRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for document range formatting in a language server. It includes fields for specifying which documents to format, whether range formatting is supported, and progress reporting. The module provides functions to create and serialize these options using Yojson.",
      "description_length": 299,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeLensClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to code lens features in a language server protocol. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. Concrete use cases include configuring and exchanging client capability settings during the initialization of a language server.",
      "description_length": 410,
      "index": 329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationFilter",
      "library": "linol.lsp",
      "description": "This module defines a filter for file operations based on a pattern and an optional URI scheme. It includes functions to construct a filter, and to convert to and from JSON representations. It is used to specify which file operations should be monitored based on file paths and protocol schemes.",
      "description_length": 295,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ShowDocumentClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` with a single boolean field `support` and provides functions to create instances, convert to and from JSON using Yojson. It is used to represent client capabilities related to showing documents in a language server protocol implementation. The module directly supports serialization and deserialization of capability data for communication between client and server.",
      "description_length": 397,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidSaveTextDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a type and conversion functions for handling text document save events in an LSP server. It includes a type `t` that holds an optional text string and a text document identifier, along with functions to construct instances and convert to and from JSON. It is used to capture and serialize the parameters sent when a text document is saved, enabling persistence or logging of document content and identity.",
      "description_length": 425,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CreateFilesParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing parameters used to create multiple files, consisting of a list of file creation operations. It provides functions to construct the structure, convert it to and from JSON format using Yojson. The module is used to handle batch file creation requests in a language server protocol implementation.",
      "description_length": 348,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SymbolKind",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing different kinds of symbols in a programming context, such as `Class`, `Function`, `Variable`, and `Enum`. It includes functions to convert values between the variant type and Yojson representations, enabling JSON serialization and deserialization. These operations are used when exchanging symbol information between a language server and a client, such as in a code editor or IDE.",
      "description_length": 429,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ChangeAnnotationIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type `t` as a string alias for change annotation identifiers and includes functions to convert values to and from Yojson format. It primarily supports serialization and deserialization of change annotation identifiers for use in language server protocol messages. A concrete use case is handling document change annotations in LSP requests and responses where JSON encoding is required.",
      "description_length": 408,
      "index": 335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookCellArrayChange",
      "library": "linol.lsp",
      "description": "This module represents changes to an array of notebook cells in a language server protocol, specifically tracking modifications with start index, number of deletions, and optional new cell content. It provides functions to construct these change records, along with JSON serialization and deserialization for communication between the client and server. It is used when applying edits to notebook documents, such as inserting, replacing, or removing cells during interactive development sessions.",
      "description_length": 496,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceSymbolParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for workspace symbol parameters, including optional progress tokens and a query string. It provides functions to construct instances, convert to and from JSON, and handle symbol search requests. Concrete use cases include processing workspace symbol queries in an LSP server with support for incremental results and progress reporting.",
      "description_length": 369,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Snippet.O",
      "library": "linol.lsp",
      "description": "This module provides operators for concatenating and transforming snippet values. It works with the `t` type representing structured code snippets, combining them using specialized infix operators. Concrete use cases include building complex code templates by joining static strings and dynamic snippet fragments in a readable, compositional manner.",
      "description_length": 349,
      "index": 338,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for tracking work progress options with a single boolean field. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Useful for configuring progress reporting in language server protocol implementations.",
      "description_length": 276,
      "index": 339,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.RenameFilesParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing parameters used during file renaming operations in a language server protocol. It includes functions to construct the structure from a list of file rename operations and to serialize or deserialize the structure using Yojson. A concrete use case is handling batch file rename requests in an LSP-compliant editor integration.",
      "description_length": 378,
      "index": 340,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.PartialResultParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for partial result handling in LSP (Language Server Protocol) communications, specifically including an optional `partialResultToken`. It provides functions to construct instances, convert to and from JSON format using Yojson, enabling seamless integration with LSP message serialization. Use cases include managing incremental updates in language server responses, such as partial diagnostics or code completions.",
      "description_length": 469,
      "index": 341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Cli.Channel",
      "library": "linol.lsp",
      "description": "This module defines the communication channels an LSP server can use to listen for incoming connections. It supports standard input/output, Unix domain sockets or Windows pipes via a file path, and TCP connections on localhost with a specified port. Concrete use cases include configuring the server to listen on a specific port for TCP clients or using a named pipe for inter-process communication.",
      "description_length": 399,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentLinkOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for document link features in a language server, specifically controlling whether link resolution is supported and if progress reporting is enabled. It works with boolean values wrapped in options to represent optional settings. The module is used to serialize and deserialize these settings to and from JSON, following the Language Server Protocol specifications.",
      "description_length": 406,
      "index": 343,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CompletionTriggerKind",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing the reason a code completion was triggered, with three specific cases: `Invoked` when manually triggered, `TriggerCharacter` when activated by a specific character, and `TriggerForIncompleteCompletions` for continuing an incomplete suggestion. It includes functions to convert values of type `t` to and from Yojson format for serialization and deserialization. This module is used to communicate the exact trigger context in language server protocol interactions, ensuring precise handling of completion requests.",
      "description_length": 569,
      "index": 344,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used to request inlay hints in a text document, including the range, document identifier, and optional progress token. It provides functions to construct instances, convert to and from JSON format. It is used to pass contextual information when fetching inlay hints during code editing.",
      "description_length": 335,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MessageType",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing different levels of log messages, including error, warning, info, log, and debug. It provides functions to convert between this type and Yojson.Safe.t for serialization and deserialization. This type is used to categorize and handle log messages within the LSP server implementation.",
      "description_length": 331,
      "index": 346,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyIncomingCallsParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used to request incoming calls in a call hierarchy, including a call hierarchy item and optional progress tokens. It provides functions to construct instances and convert to and from JSON representations. This supports features like code navigation and analysis tools that require tracking function call relationships.",
      "description_length": 367,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentRangeFormattingClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities for document range formatting in a language server protocol. It includes functions to construct the structure, convert it to and from JSON, and supports optional fields for dynamic registration and range support. Concrete use cases include configuring and serializing client capabilities during LSP initialization or feature negotiation.",
      "description_length": 407,
      "index": 348,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WindowClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines client capabilities related to window operations in the LSP protocol, including support for showing documents, displaying messages, and progress tracking. It works with optional nested capability structures and a boolean flag for work-done progress. Concrete use cases include configuring and serializing client-specific window behavior during LSP initialization.",
      "description_length": 383,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.UnregistrationParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling a list of unregistration requests in the context of the Language Server Protocol. It includes functions to construct the structure, serialize it to JSON, and deserialize it from JSON. It is used to manage the removal of registered capabilities or handlers during LSP communication.",
      "description_length": 331,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Definition",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing possible definition results in a language server, either a single location or a list of locations. It includes functions to convert between this type and Yojson for serialization and deserialization. It is used to handle definition responses in LSP (Language Server Protocol) communication.",
      "description_length": 334,
      "index": 351,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DeleteFilesParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing parameters used in file deletion operations within a language server protocol. It includes functions to construct the structure from a list of file deletions and to serialize/deserialize the structure using Yojson. A concrete use case is handling batch file deletion requests sent by a language server client.",
      "description_length": 363,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for configuring completion features in a language server. It includes types for completion options such as commit characters, trigger characters, and document selectors, along with functions to construct and serialize these configurations. It is used to specify how and when code completion should be triggered and processed in an LSP-based editor integration.",
      "description_length": 410,
      "index": 353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SelectionRangeClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for selection range features in a language server protocol. It includes functions to construct instances with optional dynamic registration support, and to serialize and deserialize instances using Yojson. It is used to configure and communicate client capabilities during language server initialization.",
      "description_length": 368,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Registration",
      "library": "linol.lsp",
      "description": "This module defines a registration structure with an identifier, method name, and optional JSON registration options. It provides functions to create instances and serialize/deserialize them using Yojson. It is used to manage registration data for language server protocol extensions.",
      "description_length": 284,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RenameParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used during symbol renaming in a language server, including the new name, position, text document identifier, and optional progress token. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to handle rename requests in LSP-compliant editors, enabling precise symbol renaming across files.",
      "description_length": 382,
      "index": 356,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for inlay hint registration in an LSP server. It includes fields to specify document selectors, hint resolution support, progress reporting, and unique registration IDs. It directly supports setting up and serializing inlay hint capabilities using Yojson for LSP communication.",
      "description_length": 319,
      "index": 357,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentItem",
      "library": "linol.lsp",
      "description": "This module defines a record type representing a text document with fields for language identifier, content, document URI, and version. It provides functions to construct instances, and to serialize and deserialize them using Yojson. It is used to manage document metadata and content versions in a language server protocol implementation.",
      "description_length": 339,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentDiagnosticParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for requesting document diagnostics in a language server protocol. It includes fields for text document identifiers, progress tokens, and optional diagnostic state identifiers. The module provides functions to construct instances, convert to and from JSON, enabling efficient communication of diagnostic requests with precise contextual data.",
      "description_length": 397,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentPositionParams",
      "library": "linol.lsp",
      "description": "This module defines a type for parameters specifying a text document and a position within it, used primarily in language server protocol requests like hover or completion. It includes functions to construct the type and convert it to and from JSON format using Yojson. Concrete use cases include handling editor requests that require both a document identifier and a cursor position.",
      "description_length": 384,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for configuring folding range capabilities in a language server. It includes types for specifying supported folding range kinds, options for collapsed text display, and parameters like dynamic registration and range limits. These structures are used to serialize and deserialize configuration data to and from JSON, specifically tailored for managing code folding features in an LSP (Language Server Protocol) implementation.",
      "description_length": 475,
      "index": 361,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SignatureInformation",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing signature information for language server protocol responses, including fields like label, documentation, parameters, and active parameter hints. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to convey function or method signature details during code completion or hover interactions in an LSP server.",
      "description_length": 395,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MonikerRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for moniker registration in the context of language server protocol (LSP) implementations. It includes a type `t` that holds an optional document selector and a boolean flag for work done progress, enabling precise control over moniker handling per document. The module supports JSON serialization and deserialization, making it suitable for use in LSP communication where registration parameters need to be exchanged between client and server.",
      "description_length": 486,
      "index": 363,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentSyncKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing the synchronization kind for text documents in the LSP protocol, with variants `None`, `Full`, and `Incremental`. It provides functions to convert between this type and Yojson for serialization and deserialization. This is used to specify how text document changes are communicated between the client and server in an LSP implementation.",
      "description_length": 381,
      "index": 364,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressCancelParams",
      "library": "linol.lsp",
      "description": "This module defines a type and serialization functions for handling work done progress cancellation parameters in the context of the LSP (Language Server Protocol). It includes a single field `token` that identifies the progress being canceled, along with functions to construct instances and convert to and from JSON format. It is used specifically for managing cancellation requests related to long-running operations in an LSP server.",
      "description_length": 437,
      "index": 365,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ColorPresentationParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in color presentation requests, including fields for color, document range, and progress tokens. It provides functions to construct instances, convert to and from JSON, and works with types like `Color.t`, `Range.t`, and `ProgressToken.t`. Concrete use cases include handling color formatting in text editors and integrating with language server protocol extensions.",
      "description_length": 423,
      "index": 366,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing workspace client capabilities related to semantic tokens, specifically supporting an optional `refreshSupport` flag. It provides functions to construct instances, convert to and from JSON using Yojson, and manage the presence of refresh support. It is used to configure and communicate semantic token capabilities between a language server and client during protocol negotiation.",
      "description_length": 429,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlightOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for document highlight operations, specifically supporting the `workDoneProgress` flag to indicate progress reporting. It works with boolean values wrapped in an option type to allow optional configuration. Concrete use cases include enabling or disabling progress notifications during document highlighting in language server protocol implementations.",
      "description_length": 394,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MarkupKind",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` with two variants, `PlainText` and `Markdown`, representing supported markup formats. It includes functions to convert values of this type to and from Yojson.Safe.t, enabling JSON serialization and deserialization. This is used to handle markup kind data in LSP (Language Server Protocol) messages, specifically when exchanging content formats between a language server and client.",
      "description_length": 424,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentFilter",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing either a text document filter or a notebook cell text document filter. It provides bidirectional JSON serialization and deserialization for this type using the `t_of_yojson` and `yojson_of_t` functions. Concrete use cases include filtering documents based on language, type, or notebook cell criteria in LSP (Language Server Protocol) implementations.",
      "description_length": 407,
      "index": 370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionContext",
      "library": "linol.lsp",
      "description": "This module defines a completion context for handling code completion events, capturing the trigger character and kind that initiated the completion. It provides functions to construct a context, convert it to and from JSON format using Yojson. It is used to pass contextual information during language server protocol interactions, such as determining whether a completion was triggered by a specific character or automatically.",
      "description_length": 429,
      "index": 371,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpContext",
      "library": "linol.lsp",
      "description": "This module defines a data structure for managing context during signature help in a language server. It includes fields to track the current signature help state, retrigger status, trigger character, and trigger kind. The module provides functions to construct instances, and serialize or deserialize them using Yojson for communication in LSP protocols.",
      "description_length": 355,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionTriggerKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` with two variants, `Invoked` and `Automatic`, representing the possible trigger kinds for inline completions. It provides functions `t_of_yojson` and `yojson_of_t` to convert between the type and Yojson.Safe.t for JSON serialization and deserialization. This module is used to determine the source of an inline completion request in an LSP server implementation.",
      "description_length": 393,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.HoverRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring hover registration options in an LSP server. It includes fields for specifying which documents to apply the hover feature to and whether to enable progress reporting. The module provides functions to construct instances, convert to and from JSON, and work with optional fields.",
      "description_length": 330,
      "index": 374,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type for identifying notebook documents using a URI. It provides functions to construct an identifier, and to serialize and deserialize it using Yojson. It is used to uniquely reference notebook documents in the context of the LSP (Language Server Protocol) by their URIs.",
      "description_length": 294,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintLabelPart",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing parts of an inlay hint label in a language server protocol implementation. It includes fields for an optional command, location, tooltip (as either a string or markup content), and a required string value. The module provides functions to construct instances, and to convert to and from JSON format for serialization and deserialization.",
      "description_length": 391,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentOnTypeFormattingOptions",
      "library": "linol.lsp",
      "description": "This module defines document formatting options triggered by specific characters during typing. It includes operations to create and serialize a configuration with a primary and optional additional trigger characters. It is used to specify when and how code formatting should automatically apply in text editors.",
      "description_length": 312,
      "index": 377,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring diagnostic registration options in an LSP server. It includes fields for specifying document selectors, diagnostic identifiers, dependency tracking, and workspace-wide diagnostics, along with functions to construct and serialize these configurations. It is used to set up and manage diagnostic capabilities in the context of language server protocol implementations.",
      "description_length": 419,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InsertReplaceEdit",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing text edits that combine insertion and replacement operations. It includes functions to construct such edits and serialize them to and from JSON. It is used to precisely describe changes to source code in language server protocol implementations.",
      "description_length": 299,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentSyncClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities for notebook document synchronization, including dynamic registration and execution summary support. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to configure language server protocol interactions for notebook documents in a development environment.",
      "description_length": 377,
      "index": 380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.LinkedEditingRangeClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to linked editing ranges in a language server. It includes functions to create instances, serialize to and from JSON, and supports optional dynamic registration. It is used to configure and communicate editing range features between a language server and client.",
      "description_length": 344,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueText",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing inline value text annotations in source code, consisting of a text range and associated string content. It provides functions to construct these annotations, along with serialization and deserialization to and from JSON format using Yojson. This module is used to convey textual inline values within a language server protocol implementation, particularly for debugging or code analysis features.",
      "description_length": 446,
      "index": 382,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.MarkupContent",
      "library": "linol.lsp",
      "description": "This module defines a structured format for representing markup content with a specified kind and string value. It includes functions to serialize and deserialize instances to and from JSON, using the Yojson library. It is used to handle formatted content like documentation or annotations in a language server protocol context.",
      "description_length": 328,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocument",
      "library": "linol.lsp",
      "description": "This module defines a notebook document structure with operations to create and serialize notebook documents. It works with lists of notebook cells, optional JSON metadata, document URIs, and version numbers. Use this module to construct notebook documents from cells, convert them to and from JSON, and manage document state in a language server context.",
      "description_length": 355,
      "index": 384,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.String_zipper.Private",
      "library": "linol.lsp",
      "description": "This module implements a zipper structure for navigating and modifying lists of substrings with positional tracking. It provides a `reflect` function to convert a zipper into a record containing left and right contexts, current position, line number, and focused substring. Use this for efficient text editing operations like cursor movement, insertions, or deletions within a structured document.",
      "description_length": 397,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionOptions",
      "library": "linol.lsp",
      "description": "This module defines inline completion options for tracking work progress in JSON format. It supports creating and serializing a configuration with an optional `workDoneProgress` boolean field. It is used to manage progress reporting during language server operations like code completion.",
      "description_length": 288,
      "index": 386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceSymbolRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines workspace symbol registration options with optional `resolveProvider` and `workDoneProgress` boolean fields. It provides functions to create instances and convert to and from JSON using Yojson. Used to configure workspace symbol capabilities in an LSP server.",
      "description_length": 279,
      "index": 387,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressEnd",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing the end of a work done progress notification, containing an optional message. It provides functions to create instances, convert to and from JSON using Yojson, and is used to signal completion of long-running operations with an optional status message. Concrete use cases include ending progress tracking in language server protocol interactions, such as signaling the end of a document analysis or build task.",
      "description_length": 454,
      "index": 388,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchySupertypesParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in type hierarchy queries, specifically for retrieving supertypes. It includes fields for a type hierarchy item and optional tokens for tracking progress and work done. The module provides functions to construct instances, and to convert to and from JSON representations.",
      "description_length": 328,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring call hierarchy operations in a language server, specifically supporting optional work done progress tracking. It provides functions to create instances and serialize or deserialize them using Yojson. Concrete use cases include managing client requests for call hierarchy information with progress reporting capabilities.",
      "description_length": 373,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Diagnostic",
      "library": "linol.lsp",
      "description": "This module defines a diagnostic type for representing code analysis results, including structured error messages, severity levels, source references, and related information. It provides functions to construct diagnostics with optional metadata like error codes, ranges, and tags, and supports serialization to and from JSON. Concrete use cases include reporting syntax errors, type-checking issues, or linting results in a language server.",
      "description_length": 441,
      "index": 391,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ExecuteCommandClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities for executing commands in a language server protocol. It includes functions to construct the structure, serialize it to JSON, and deserialize it from JSON. It is used to communicate whether the client supports dynamic registration of commands during language server initialization.",
      "description_length": 351,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DefinitionParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in a language server protocol request, specifically for definition queries. It includes fields for position, text document identifier, and optional progress tokens, with functions to construct instances and serialize to or from JSON. It is used to handle and transmit requests for symbol definitions in a text document within an LSP server implementation.",
      "description_length": 409,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyPrepareParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used to prepare a call hierarchy request in a language server. It includes the position in the document, the text document identifier, and an optional progress token. The module provides functions to construct the parameters, and to convert to and from JSON format for serialization and deserialization.",
      "description_length": 355,
      "index": 394,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressReport",
      "library": "linol.lsp",
      "description": "This module defines a data structure for tracking progress reports in a language server protocol, specifically supporting optional fields like cancellable status, message, and percentage completion. It includes functions to create instances with optional parameters and to serialize/deserialize to and from JSON using Yojson. Concrete use cases include reporting compilation progress or long-running task status in an LSP server.",
      "description_length": 429,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlayHint",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing inlay hints in a language server protocol, including fields for labels, positioning, optional padding, tooltips, and text edits. It provides functions to construct inlay hints with customizable properties and serialize/deserialize them using Yojson. Concrete use cases include generating inline code annotations and type hints in an editor based on LSP diagnostics.",
      "description_length": 409,
      "index": 396,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.RelativePattern",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a relative pattern with a base URI and a pattern. It provides functions to construct a relative pattern, convert it to and from JSON format using Yojson. It is used to handle file pattern matching relative to a specific base directory in language server protocol implementations.",
      "description_length": 323,
      "index": 397,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RelatedFullDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a type for diagnostic reports associated with a document, including a list of diagnostics and optional related documents with their diagnostic states. It provides functions to construct these reports, along with serialization and deserialization to JSON. It is used to communicate detailed diagnostic information in an LSP server, particularly for tracking diagnostics across related files.",
      "description_length": 410,
      "index": 398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentChangeEvent",
      "library": "linol.lsp",
      "description": "This module defines data structures and constructors for representing changes to notebook documents in a language server protocol. It includes types for tracking text content updates, structural changes to cell arrays, and associated metadata. These constructs are used to model events like cell edits, document openings, and content synchronization in notebook-based development environments.",
      "description_length": 393,
      "index": 399,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyOutgoingCall",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing outgoing calls in a call hierarchy, containing a list of source ranges and a target call hierarchy item. It provides functions to construct instances, convert to and from JSON using Yojson. Used to track and serialize function call relationships in language server protocol implementations.",
      "description_length": 340,
      "index": 400,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationPatternOptions",
      "library": "linol.lsp",
      "description": "This module defines options for file operation patterns, specifically supporting case-insensitive matching through the `ignoreCase` field. It provides functions to create an option record, and to serialize and deserialize it using Yojson. A concrete use case is configuring file pattern matching in a language server to handle case-insensitive file searches.",
      "description_length": 358,
      "index": 401,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionContext",
      "library": "linol.lsp",
      "description": "This module defines a data structure for capturing the context in which code actions are requested, including diagnostics, optional filtering by action kind, and the trigger mechanism. It provides functions to construct instances, and serialize/deserialize to and from JSON. It is used to pass contextual information to code action handlers in an LSP server, enabling precise and context-aware code modifications.",
      "description_length": 413,
      "index": 402,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.RelatedUnchangedDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a type and functions for handling diagnostic reports related to unchanged documents in a language server protocol context. It works with document URIs and diagnostic report variants, supporting serialization to and from JSON. It is used to manage diagnostic data for files that have not changed since the last analysis, optimizing performance in language server implementations.",
      "description_length": 398,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeConfigurationClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for dynamic registration of configuration change notifications in the LSP (Language Server Protocol). It includes functions to construct a value with an optional `dynamicRegistration` flag, and to serialize/deserialize it to and from JSON using Yojson. It is used to communicate client support for reconfiguring the language server during runtime without restarting it.",
      "description_length": 433,
      "index": 404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentFormattingParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for document formatting parameters, including formatting options, a text document identifier, and an optional progress token. It provides functions to construct instances, convert to and from JSON, and handle serialization. It is used to pass formatting configurations and document context in language server protocol interactions.",
      "description_length": 368,
      "index": 405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MonikerOptions",
      "library": "linol.lsp",
      "description": "This module defines a single data type `t` representing options for moniker operations, specifically supporting optional work done progress tracking. It provides functions to create instances, convert to and from JSON format using Yojson. This structure is used to configure behavior when handling moniker-related requests in a language server protocol implementation.",
      "description_length": 368,
      "index": 406,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyIncomingCall",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing incoming calls in a call hierarchy, containing a reference to the caller (`from`) and a list of ranges (`fromRanges`) indicating where the call originates. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to track and serialize call relationships between functions or methods in a codebase.",
      "description_length": 381,
      "index": 407,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentDiagnosticReportPartialResult",
      "library": "linol.lsp",
      "description": "This module defines a type and conversion functions for handling partial diagnostic results in a language server protocol. It works with document diagnostics, specifically full or unchanged diagnostic reports, indexed by document URI. It supports creating and serializing diagnostic data structures for efficient transmission and processing.",
      "description_length": 341,
      "index": 408,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceDiagnosticReportPartialResult",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a partial result of workspace diagnostic reports, containing a list of workspace document diagnostic reports. It provides functions to create instances of this type, convert from and to JSON using Yojson. This module is used to handle intermediate diagnostic data during workspace analysis in an LSP server.",
      "description_length": 351,
      "index": 409,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DidOpenTextDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for a text document open event, containing a `textDocument` field of type `TextDocumentItem.t`. It provides functions to construct instances, convert to and from JSON using Yojson. Used to handle document open notifications in an LSP server, enabling initialization of document-specific state upon client requests.",
      "description_length": 369,
      "index": 410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentChangeRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type for registration options related to text document change events, including a document selector and synchronization kind. It provides functions to create instances and serialize/deserialize them to and from JSON. It is used to configure how text document changes are registered and synchronized in an LSP server.",
      "description_length": 338,
      "index": 411,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SelectionRangeRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for registering selection range capabilities in a language server. It includes fields for specifying document selectors, registration IDs, and progress reporting. These options are used to customize how selection range requests are handled in the context of the Language Server Protocol (LSP).",
      "description_length": 335,
      "index": 412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.StringValue",
      "library": "linol.lsp",
      "description": "This module defines a wrapper type for string values with functions to create instances and serialize to and from JSON using Yojson. It works with the `Yojson.Safe.t` type for JSON representation and the `t` record type containing a single string field. Concrete use cases include handling string-based JSON values in LSP (Language Server Protocol) messages where structured string data needs to be safely constructed and serialized.",
      "description_length": 433,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.UnchangedDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a diagnostic report for an unchanged document, containing a `resultId` string. It provides functions to create instances of this type, convert to and from JSON using `Yojson.Safe`. This module is used to handle diagnostic data in the context of language server protocol interactions, specifically for documents that have not changed since the last analysis.",
      "description_length": 401,
      "index": 414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceEditClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for representing workspace edit capabilities in a language server protocol. It includes types for optional features like change annotations, document changes, failure handling, and resource operations, along with constructors and JSON serialization/deserialization functions. It is used to communicate client capabilities related to workspace edits during language server initialization.",
      "description_length": 437,
      "index": 415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ShowDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used to display a document, including options for focus, selection range, and external display. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. Concrete use cases include passing document display instructions between an editor and a language server.",
      "description_length": 345,
      "index": 416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeTextDocumentParams",
      "library": "linol.lsp",
      "description": "Handles text document change events by encapsulating content modifications and document identifiers. It works with lists of content change events and versioned document identifiers, enabling updates to be processed in a structured format. This is used when implementing LSP servers to track and apply incremental changes to open documents.",
      "description_length": 339,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokenTypes",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic variant type `t` representing semantic token categories used in language server protocol implementations. It includes functions `t_of_yojson` and `yojson_of_t` for converting between the type and Yojson representations. This module is used to serialize and deserialize semantic token types for communication between a language server and a client, such as editors or IDEs.",
      "description_length": 406,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlightClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for document highlighting in a language server, specifically supporting optional dynamic registration. It provides functions to create instances, convert to and from JSON using Yojson, and manage the `dynamicRegistration` field. Use this module to configure and serialize document highlight capabilities in LSP (Language Server Protocol) implementations.",
      "description_length": 418,
      "index": 419,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DefinitionLink",
      "library": "linol.lsp",
      "description": "This module defines a type alias for `LocationLink.t` and provides bidirectional conversion functions between this type and `Yojson.Safe.t`. It facilitates handling definition links in JSON format, commonly used in language server protocol implementations. The module is useful for serializing and deserializing location data during definition resolution in IDE features like \"Go to Definition\".",
      "description_length": 395,
      "index": 420,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceEdit",
      "library": "linol.lsp",
      "description": "This module defines a workspace edit structure that supports batched document modifications, including text edits, file creation, renaming, and deletion. It provides functions to construct workspace edits with optional change annotations, document changes, or direct text edits grouped by document URI. The module also includes serialization and deserialization functions for converting workspace edits to and from JSON format.",
      "description_length": 427,
      "index": 421,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidCloseTextDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a type and conversion functions for handling text document close events in an LSP server. It works with `TextDocumentIdentifier` to represent the document being closed and supports JSON serialization and deserialization via `Yojson`. It is used to process `textDocument/didClose` notifications in LSP communication.",
      "description_length": 335,
      "index": 422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in semantic token requests, including optional progress tokens and a text document identifier. It provides functions to construct instances, convert to and from JSON format. This module is used to request semantic highlighting data for a specific document in an editor integration.",
      "description_length": 338,
      "index": 423,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CodeDescription",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing code descriptions with a document URI. It provides functions to create instances, convert to and from JSON format using Yojson. Useful for handling code description data in language server protocol implementations where document references are required.",
      "description_length": 307,
      "index": 424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities related to inlay hints in a workspace, specifically supporting an optional refresh flag. It provides functions to construct the structure, convert it to and from JSON format. This is used to communicate workspace-specific inlay hint capabilities between a language server and client.",
      "description_length": 353,
      "index": 425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and capabilities related to code actions in a language server protocol. It includes types for resolve support, code action kinds, and literal support, along with functions to construct and serialize these structures. It is used to specify client capabilities for handling code actions, such as supporting dynamic registration or resolving additional action details.",
      "description_length": 401,
      "index": 426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type for inline completion registration options, including optional document selector, identifier, and work-done progress flag. It provides functions to create instances, convert to and from JSON format. Used to configure inline completion features in language server protocol implementations.",
      "description_length": 322,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type for identifying text documents using a URI. It provides functions to create an identifier, convert it to and from JSON format. It is used to uniquely reference documents in operations like opening, saving, or modifying files in an editor.",
      "description_length": 265,
      "index": 428,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for inline value options with a single field indicating whether work done progress is enabled. It provides functions to create instances, serialize to, and deserialize from JSON. Used to configure inline value reporting behavior in language server protocol implementations.",
      "description_length": 310,
      "index": 429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MonikerParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in moniker-related operations within a language server protocol. It includes fields for tracking progress tokens, position, and text document identifiers, supporting precise code navigation and symbol resolution. The module provides functions to construct instances, and serialize or deserialize them using JSON.",
      "description_length": 366,
      "index": 430,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressBegin",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing the beginning of a work done progress notification, typically used in language server protocol (LSP) implementations. It includes fields for whether the operation is cancellable, an optional message, a percentage indicator, and a required title. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 406,
      "index": 431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SelectionRange",
      "library": "linol.lsp",
      "description": "This module defines a selection range structure with a parent reference and a range, supporting hierarchical selection data. It provides functions to create instances, and serialize or deserialize them using Yojson. It is used to represent nested or layered text selection information in an editor.",
      "description_length": 298,
      "index": 432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentColorClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for document color features, specifically supporting dynamic registration. It provides functions to create instances, convert to and from JSON using Yojson. This module is used to configure language server protocol clients for handling document color requests.",
      "description_length": 324,
      "index": 433,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CompletionItemLabelDetails",
      "library": "linol.lsp",
      "description": "This module defines a type `t` for holding optional description and detail strings, primarily used in completion items. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for enriching code completion suggestions with additional metadata in an LSP server.",
      "description_length": 296,
      "index": 434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidSaveNotebookDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for a notebook document save event, containing a `notebookDocument` field of type `NotebookDocumentIdentifier.t`. It provides functions to construct instances, and serialize/deserialize them to and from JSON using the Yojson library. This is used to handle \"didSaveNotebookDocument\" notifications in a language server protocol implementation, specifically for tracking saved notebook documents.",
      "description_length": 449,
      "index": 435,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.PublishDiagnosticsClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for specifying client capabilities related to diagnostic publishing in a language server protocol. It includes a `tagSupport` type for listing supported diagnostic tags and a `t` type that represents optional capabilities like code descriptions, data support, and versioning. Functions allow creating and serializing these capability structures for use in LSP initialization and communication.",
      "description_length": 443,
      "index": 436,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Uri_lexer",
      "library": "linol.lsp",
      "description": "Parses URIs into structured components like scheme, authority, path, query, and fragment. Converts strings or file paths into URI objects for handling locations in documents. Useful for processing file references or network addresses in language server protocols.",
      "description_length": 263,
      "index": 437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Snippet",
      "library": "linol.lsp",
      "description": "This module builds and manipulates structured code snippets for autocompletion, supporting dynamic insertion of editor state such as selected text, line numbers, and file paths. It handles tabstops, placeholders, and variable transformations using regular expressions and format strings, working directly with string and integer values. Concrete use cases include generating code templates with selectable fields, inserting transformed variables from the editor context, and composing complex snippets using infix operators for readability.",
      "description_length": 540,
      "index": 438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Server_request",
      "library": "linol.lsp",
      "description": "This module defines a GADT for representing LSP server requests, each tied to specific protocol parameters and results, such as applying workspace edits, showing messages, or refreshing semantic tokens. It supports operations for encoding and decoding requests to and from JSON-RPC, enabling communication between the server and client. Use cases include handling configuration queries, progress reporting, and dynamic UI updates like code lenses or inlay hints in an LSP-compliant editor.",
      "description_length": 489,
      "index": 439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.String_zipper",
      "library": "linol.lsp",
      "description": "This module implements a zipper structure for navigating and modifying lists of substrings with positional tracking. It supports operations like insertion, cursor movement to specific lines or positions, text squashing, and applying range-based replacements, while handling UTF-8 or UTF-16 encoding. Use it for efficient text editing tasks such as cursor navigation, incremental updates, or precise range manipulations in structured documents.",
      "description_length": 443,
      "index": 440,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types",
      "library": "linol.lsp",
      "description": "This module provides **serialization and deserialization operations** for converting OCaml types to JSON (via Yojson), specifically tailored for the **Language Server Protocol (LSP)**. It works with **structured data types** such as document URIs, progress tokens, capability flags, diagnostic metadata, and notebook/document synchronization settings, often represented as polymorphic variants or records. These utilities enable precise handling of LSP features like **code navigation, diagnostics, client capability negotiation, and document state management** during editor-server interactions.",
      "description_length": 596,
      "index": 441,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Header",
      "library": "linol.lsp",
      "description": "This module handles the parsing and construction of LSP message headers, focusing on the `content-length` and `content-type` fields. It operates on a custom `t` type representing a header, allowing creation, access, and conversion to string format. It is used to ensure correct message framing during LSP communication over stdin/stdout.",
      "description_length": 337,
      "index": 442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Text_document",
      "library": "linol.lsp",
      "description": "This module manages text documents in a language server context, handling operations like creating documents from open events, applying content changes, and converting positions and ranges to absolute offsets. It works with UTF8 or UTF16 encoded documents and supports applying text edits, tracking versions, and retrieving document metadata such as language ID and URI. Concrete use cases include processing document updates from clients, synchronizing edits, and mapping cursor positions to byte offsets for efficient text manipulation.",
      "description_length": 538,
      "index": 443,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import",
      "library": "linol.lsp",
      "description": "This module provides formatted string generation through the `sprintf` function, alongside submodules that handle results, strings, integers, and JSON data. It supports operations such as error propagation with `Result`, text and binary processing with `String`, integer arithmetic and bit manipulation with `Int`, and JSON serialization/deserialization with `Json`. Concrete applications include building LSP message payloads, parsing binary data, handling numeric representations, and managing structured text processing pipelines.",
      "description_length": 533,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Diff",
      "library": "linol.lsp",
      "description": "Computes the differences between two string versions of a document, generating a list of text edit operations needed to transform the original into the updated version. Works directly with string inputs and produces structured `TextEdit` records that specify ranges and replacements. Useful for implementing version control or collaborative editing features where precise document changes must be tracked and applied.",
      "description_length": 417,
      "index": 445,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Array_view",
      "library": "linol.lsp",
      "description": "This module provides operations to create and manipulate array views, which are lightweight, non-copying references to segments of existing arrays. It supports indexed access, slicing, iteration, and folding over array views, as well as computing shared suffix lengths between views and copying view contents to new arrays. Concrete use cases include efficient text processing in an LSP server, where views into buffer arrays enable fast substring operations and reduce memory overhead during edits.",
      "description_length": 499,
      "index": 446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension",
      "library": "linol.lsp",
      "description": "This module implements custom LSP protocol extensions for debugging purposes. It includes functionality for sending diagnostic messages via JSON serialization and retrieving text document content at specific positions. These extensions are used to enhance development workflows by enabling inline diagnostics and contextual data inspection in editors.",
      "description_length": 351,
      "index": 447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Lsp",
      "library": "linol.lsp",
      "description": "This module implements language server protocol (LSP) handling for the Linol_lsp project, providing functions to process LSP requests, notifications, and responses. It works with LSP-specific data structures such as `request`, `notification`, and `response` types, along with associated JSON representations. Concrete use cases include parsing incoming LSP messages, routing them to appropriate handlers, and generating correct LSP-compliant output for features like auto-completion, diagnostics, and code navigation.",
      "description_length": 517,
      "index": 448,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Cli",
      "library": "linol.lsp",
      "description": "This module handles command-line argument parsing and communication channel configuration for an LSP server. It supports standard input/output, TCP on localhost, and Unix domain sockets or Windows pipes, enabling concrete use cases like launching a server on a specific port or connecting via a named pipe. The module also includes utilities to construct client-spawning command lines based on configured channels and process IDs.",
      "description_length": 430,
      "index": 449,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Position",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing positions in a text document using line and character offsets. It provides functions to construct position values, compare them, check if they are at the origin, and serialize or deserialize them using JSON. Concrete use cases include tracking cursor locations or text ranges in an editor integration.",
      "description_length": 355,
      "index": 450,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Uri0",
      "library": "linol.lsp",
      "description": "This module provides functions for converting URIs to and from strings, paths, and Yojson representations, along with comparison, equality, and hashing operations. It works with a concrete type `t` representing URIs, extracting components like query and fragment, and supports both Windows and POSIX-style path handling through its `Private` submodule. It is used in LSP implementations to manage file paths and URIs across different operating systems.",
      "description_length": 452,
      "index": 451,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Server_notification",
      "library": "linol.lsp",
      "description": "This module defines notifications sent from the language server to the client, including diagnostics, progress updates, logging, and telemetry. It supports operations to convert between internal notification types and JSON-RPC representations. Concrete use cases include publishing syntax errors, reporting background task progress, and logging server-side events.",
      "description_length": 364,
      "index": 452,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Cancel_request",
      "library": "linol.lsp",
      "description": "This module handles the deserialization and serialization of JSON-RPC request cancellation messages using Yojson. It defines a method identifier and functions to convert between JSON values and request IDs. Useful for managing cancellation signals in a language server protocol implementation.",
      "description_length": 293,
      "index": 453,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Client_request",
      "library": "linol.lsp",
      "description": "This module defines a GADT for representing LSP client requests and their expected responses, including operations like text document hover, definition lookup, code completion, formatting, and workspace diagnostics. It works with LSP-specific data types such as `InitializeParams`, `HoverParams`, `CompletionItem`, `TextEdit`, and various structured identifiers and locations. Concrete use cases include handling incoming JSON-RPC requests from an LSP client, dispatching them to appropriate handlers, and serializing/deserializing request/response data for communication over a JSON-RPC channel.",
      "description_length": 596,
      "index": 454,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Progress",
      "library": "linol.lsp",
      "description": "This module defines a variant type `t` representing different stages of progress notifications in the LSP protocol, including begin, report, and end events. It provides functions to serialize and deserialize these progress events to and from JSON format. It is used to communicate task progress updates between a language server and client during operations like code analysis or build processes.",
      "description_length": 396,
      "index": 455,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Io",
      "library": "linol.lsp",
      "description": "Handles reading and writing JSON-RPC messages over input/output channels. Works with `in_channel` and `out_channel` for communication, parsing and serializing RPC packets. Used to implement language server protocol interactions in a language server.",
      "description_length": 249,
      "index": 456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Client_notification",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing all possible client-to-server notifications in the LSP protocol, including document lifecycle events, file operations, workspace changes, and progress tracking. It provides serialization and deserialization functions to convert between these notification variants and their JSON-RPC representations. Concrete use cases include handling text document opens, saves, and changes, responding to file system events like deletions or renames, and managing notebook document state.",
      "description_length": 522,
      "index": 457,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp",
      "library": "linol.lsp",
      "description": "This module provides core components for implementing a Language Server Protocol (LSP) server, focusing on structured text document manipulation, efficient array slicing, JSON-RPC communication, and LSP message handling. It operates on text documents, arrays, URI strings, and file paths, offering structured access to URI components (scheme, authority, path, etc.) and cross-platform path normalization. Key use cases include document synchronization in code editors, diff generation for text changes, LSP request/notification handling, and platform-agnostic file location management.",
      "description_length": 585,
      "index": 458,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 467,
    "meaningful_modules": 459,
    "filtered_empty_modules": 8,
    "retention_rate": 0.9828693790149893
  },
  "statistics": {
    "max_description_length": 626,
    "min_description_length": 164,
    "avg_description_length": 385.47058823529414,
    "embedding_file_size_mb": 6.64993953704834
  }
}