{
  "package": "linol",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 466,
  "creation_timestamp": "2025-07-16T00:31:52.595224",
  "modules": [
    {
      "module_path": "Linol_lsp.Import.Json.Nullable_option",
      "library": "linol.lsp",
      "description": "Converts between JSON values and OCaml option types, handling null values explicitly. It provides functions to parse JSON into an option type and to serialize an option type into JSON. Useful when mapping JSON objects with optional fields to OCaml records.",
      "description_length": 256,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json.Option",
      "library": "linol.lsp",
      "description": "Converts between JSON values and OCaml option types, handling `null` as `None`. Uses Yojson-compatible representations for serialization and deserialization. Useful when parsing or generating JSON data where optional fields may be present as `null` or absent.",
      "description_length": 259,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.String.Map",
      "library": "linol.lsp",
      "description": "This module provides operations for creating, querying, and transforming maps with string keys, including insertion, deletion, lookup, and ordered traversal (e.g., `min_binding`, `max_binding`), as well as higher-order functions like `map`, `fold`, `filter`, and `merge`. It works with immutable `String.Map.t` structures, supporting conversions to and from lists and sequences, and emphasizes functional manipulation for tasks like processing configuration data, aggregating key-value pairs, or implementing routing logic with efficient key-based searches.",
      "description_length": 557,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Result.O",
      "library": "linol.lsp",
      "description": "This module provides a single operation, `(let+)`, which maps a function over the success case of a result value, preserving the error case. It works with the standard `result` type, where values are either `Ok` of a value or `Error` of an error. A concrete use case is transforming the output of a successful computation while propagating errors unchanged, such as processing parsed data without handling the error case explicitly.",
      "description_length": 432,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension.DebugEcho.Params",
      "library": "linol.lsp",
      "description": "Handles parsing and serialization of debug echo messages using Yojson. Works with the `t` record type containing a `message` string. Used to transmit custom debug information in LSP protocol extensions.",
      "description_length": 202,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.Json.Of",
      "library": "linol.lsp",
      "description": "This module provides functions to decode JSON values into OCaml types, specifically handling lists, pairs, integer pairs, untagged unions, and literal fields. It operates on `Yojson.Safe.t` and custom JSON types, enabling precise parsing of structured data. Concrete use cases include extracting configuration values, deserializing API responses, and validating JSON payloads with specific schemas.",
      "description_length": 398,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Header.Private.Key",
      "library": "linol.lsp",
      "description": "This module defines constants for HTTP header fields used in LSP (Language Server Protocol) communication. It provides the `content_length` and `content_type` string values, which are essential for properly formatting and parsing LSP messages over standard input/output. These values ensure correct message framing and interpretation in LSP server implementations.",
      "description_length": 364,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json.O",
      "library": "linol.lsp",
      "description": "This module provides a function `<|>` that combines two functions, returning the result of the first if it succeeds, or the second if the first raises an exception. It works with any functions that take the same input type and return the same output type. A concrete use case is handling fallback parsing logic, where one function attempts to decode a JSON field in a primary way and the other provides an alternative interpretation if the first fails.",
      "description_length": 452,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.Json.Assoc",
      "library": "linol.lsp",
      "description": "This module serializes and deserializes association lists to and from JSON objects. It converts each key-value pair in a list into a JSON key-value pair, using provided functions to handle the value types. Useful for converting OCaml configuration or settings stored in associative lists to JSON format for external consumption or storage.",
      "description_length": 339,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.Int.Map",
      "library": "linol.lsp",
      "description": "This module implements an immutable map data structure optimized for integer keys, supporting operations like insertion, deletion, merging, and range queries, with values of arbitrary types. It provides functional transformations (map, fold, filter), structural manipulations (split, partition), and conversions to ordered sequences and lists. Common use cases include sparse array implementations, integer-keyed configuration management, and processing sequences of key-value pairs where keys represent numeric identifiers or indices.",
      "description_length": 535,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.Json.Void",
      "library": "linol.lsp",
      "description": "This module defines a type `t` intended to represent JSON values that are expected to be empty or ignored. It includes functions `t_of_yojson` and `yojson_of_t` for converting between this type and `Yojson.Safe.t`. It is used in LSP (Language Server Protocol) implementations where certain JSON fields must be present but carry no meaningful data.",
      "description_length": 347,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.Json.Object",
      "library": "linol.lsp",
      "description": "This module handles JSON object conversions between custom types and Yojson representations. It works with associative lists of strings and JSON values, transforming them into Yojson-compatible structures and vice versa. Concrete use cases include serializing and deserializing JSON objects for communication in language server protocols.",
      "description_length": 338,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json.Conv",
      "library": "linol.lsp",
      "description": "This module provides bidirectional conversion between OCaml values and JSON representations, focusing on primitive types (booleans, numbers, strings), container structures (options, lists, arrays, hash tables), and composite types (pairs, triples, records). It supports deserialization with error handling and field validation, enabling robust parsing of JSON data into typed OCaml structures while accommodating polymorphic or nested data through customizable conversion functions. Specific utilities include hash table construction from JSON key-value pairs and handling abstract or function types during deserialization.",
      "description_length": 623,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentUri.Private",
      "library": "linol.lsp",
      "description": "Controls path formatting for document URIs based on the operating system. It uses a mutable reference `win32` to determine whether to apply Windows-style path separators. This module is used internally to ensure correct URI path handling during cross-platform operations in the LSP (Language Server Protocol) implementation.",
      "description_length": 324,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json.To",
      "library": "linol.lsp",
      "description": "This module serializes OCaml values into JSON structures for language server protocol communication. It provides functions to convert lists, construct JSON objects with string keys and typed values, and encode integer pairs into JSON arrays. Concrete use cases include transforming LSP request parameters and responses into JSON for transmission over a communication channel.",
      "description_length": 375,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension.DebugTextDocumentGet.Result",
      "library": "linol.lsp",
      "description": "This module defines a result type for a custom LSP extension that handles text document debugging. It includes serialization and deserialization functions for converting between JSON and an optional string result. It is used to return debug information about text documents in an LSP server implementation.",
      "description_length": 306,
      "index": 15,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_lsp.Extension.DebugEcho.Result",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling debug echo responses in a JSON-compatible format. It includes functions to serialize and deserialize the structure using Yojson. A typical use case is sending diagnostic messages between a language server and client during development.",
      "description_length": 285,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension.DebugTextDocumentGet.Params",
      "library": "linol.lsp",
      "description": "This module defines parameters for a debug operation that retrieves text document content at a specific position. It works with text document identifiers and position data to enable precise content fetching. Useful for implementing custom debug endpoints in language server extensions.",
      "description_length": 285,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Snippet.O",
      "library": "linol.lsp",
      "description": "This module defines operators for combining and extending snippets using string concatenation. It works with the `Linol_lsp.Snippet.t` type, representing structured code snippets. Use cases include building complex snippets incrementally by appending or prepending strings or other snippets.",
      "description_length": 291,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DeleteFilesParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling file deletion requests in a language server protocol. It includes operations to create instances and serialize/deserialize them using JSON. A concrete use case is processing batch file deletion commands sent from a client to a language server.",
      "description_length": 293,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InitializeParams",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for handling initialization parameters in an LSP server. It includes types for client information, capabilities, and various optional initialization settings, along with functions to construct and serialize these structures. It is used to process the initial handshake message sent by an LSP client when connecting to a server.",
      "description_length": 377,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RelatedUnchangedDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a diagnostic report structure that includes a result ID and an optional map of related documents, each associated with either a full or unchanged diagnostic report. It provides functions to create instances, convert to and from JSON, and works with document URIs and diagnostic report types. It is used to represent and serialize diagnostic results for documents in a language server protocol context.",
      "description_length": 421,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RenameFilesParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling multiple file rename operations in the context of language server protocol requests. It includes functions to construct the structure from a list of file rename operations and to serialize or deserialize the structure using Yojson. A concrete use case is processing batch file rename requests sent by an LSP client during project refactoring.",
      "description_length": 392,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.LinkedEditingRangeOptions",
      "library": "linol.lsp",
      "description": "This module defines a single data type `t` that represents options for linked editing range functionality, specifically including an optional boolean flag for work done progress. It provides functions to create instances of this type, convert to and from JSON format using Yojson. This module is used to configure and exchange linked editing range settings in a language server protocol context.",
      "description_length": 395,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentFilter",
      "library": "linol.lsp",
      "description": "This module defines a filter for text documents based on optional language, URI scheme, or file pattern. It includes a function to construct filters with specified criteria. Use it to match documents in language server protocol requests, such as determining which files a language server should handle.",
      "description_length": 302,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceEditClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and serialization functions for workspace edit client capabilities in a language server protocol. It includes types for optional features like document changes, resource operations, and failure handling, along with annotations for change groups. Use this module to configure and exchange client-side workspace editing capabilities during LSP initialization.",
      "description_length": 393,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelp",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing signature help information in a language server, specifically tracking active parameters and signatures. It provides functions to construct signature help instances and serialize or deserialize them using Yojson. Concrete use cases include handling user requests for function signature details during code editing.",
      "description_length": 368,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.MonikerRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for moniker registration in the context of language server protocol (LSP) implementations. It includes fields for specifying document selectors and enabling work done progress tracking, both used to control registration behavior during LSP session setup. The module supports serialization and deserialization of these options via Yojson for use in dynamic configuration and communication scenarios.",
      "description_length": 440,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.HoverOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring hover behavior in a language server, specifically supporting an optional `workDoneProgress` flag. It provides functions to create instances, serialize to JSON, and deserialize from JSON using the Yojson library. A concrete use case is enabling or disabling progress reporting during hover operations in an LSP-compliant editor integration.",
      "description_length": 392,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CompletionList",
      "library": "linol.lsp",
      "description": "This module defines data structures and creation functions for managing completion lists in a language server protocol implementation. It handles completion items with associated ranges, text formatting, and commit characters, supporting features like partial results and default settings for batched completions. It integrates JSON serialization for transport, enabling precise client-server communication during code completion requests.",
      "description_length": 439,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionContext",
      "library": "linol.lsp",
      "description": "This module defines a data structure for code action contexts, including diagnostics, optional action kinds, and optional trigger kind. It provides functions to construct instances, and serialize/deserialize to and from JSON. It is used to pass contextual information when requesting code actions in an editor, such as quick fixes or refactorings.",
      "description_length": 347,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokenTypes",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing semantic token categories for source code elements such as types, variables, functions, and keywords. It includes serialization and deserialization functions for converting between these token types and Yojson representations. This is used to communicate syntax and semantic highlighting information in a language server protocol implementation.",
      "description_length": 393,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ShowMessageRequestParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling message request parameters in an LSP (Language Server Protocol) server. It includes fields for a message string, message type, and optional actionable items presented to the user. The module supports creating instances, and serializing/deserializing to and from JSON, making it suitable for use in LSP communication where user prompts with actions are needed.",
      "description_length": 409,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationPatternKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` with two variants, `File` and `Folder`, representing kinds of file operations. It provides functions to convert values of this type to and from Yojson format. This is used to serialize and deserialize file operation kinds, typically for communication in a language server protocol context.",
      "description_length": 320,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ServerCapabilities",
      "library": "linol.lsp",
      "description": "This module defines and constructs server capabilities for an LSP (Language Server Protocol) server, including support for features like code actions, diagnostics, document formatting, and workspace management. It works with nested records and polymorphic variants to represent optional capabilities and their configurations. Concrete use cases include specifying which LSP features a server supports during initialization, such as whether it provides hover information, code completion, or semantic token highlighting.",
      "description_length": 519,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.Pattern",
      "library": "linol.lsp",
      "description": "This module defines a type alias for string patterns used in language server protocol communications. It includes functions to convert these patterns to and from Yojson representations. These conversions are essential for serializing and deserializing pattern data during LSP message exchanges.",
      "description_length": 294,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionContext",
      "library": "linol.lsp",
      "description": "This module defines a data structure for inline completion context, capturing the selected completion info and trigger kind during code editing. It provides functions to construct instances, convert to and from JSON using Yojson. Useful for handling inline code completions in language server protocol implementations.",
      "description_length": 318,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InsertReplaceEdit",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing an edit operation that combines both insertion and replacement ranges with new text. It provides functions to construct such edits and to serialize and deserialize them using Yojson. This is used to model precise text modifications in a document, such as when applying code fixes or refactorings in an editor.",
      "description_length": 353,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a notebook document identifier, containing a single field `uri` of type `DocumentUri.t`. It provides functions to construct a notebook document identifier, and to convert it to and from JSON format using the Yojson library. This module is used to uniquely identify notebook documents in the context of the LSP (Language Server Protocol) by their URIs.",
      "description_length": 395,
      "index": 38,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Linol_lsp.Types.InsertTextMode",
      "library": "linol.lsp",
      "description": "This module defines an enumeration type `t` with two variants, `AsIs` and `AdjustIndentation`, representing modes for handling insert text operations. It provides functions to serialize and deserialize values of this type using Yojson. This module is used to control whether inserted text should preserve its original form or have its indentation adjusted based on the context in which it is inserted.",
      "description_length": 401,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentFilter",
      "library": "linol.lsp",
      "description": "This module defines a notebook document filter type and functions for converting it to and from JSON. It works with the `unit` type and JSON values using the Yojson library. It is used to represent and serialize notebook document filters in the context of a language server protocol implementation.",
      "description_length": 298,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type for inlay hint registration options, including fields for document selector, ID, resolve provider, and work done progress. It provides functions to create instances and convert to and from JSON. It is used to configure inlay hint behavior in an LSP server, such as specifying which documents to target and whether to support resolving hints on demand.",
      "description_length": 385,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileChangeType",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing file change events, with constructors for file creation, modification, and deletion. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This module is used to handle file change notifications in a language server protocol implementation.",
      "description_length": 364,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type and conversion functions for text document registration options in an LSP server. It supports creating and serializing a configuration that optionally includes a document selector. Concrete use cases include configuring which text documents an LSP feature should apply to, such as for diagnostics or code completion.",
      "description_length": 343,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressCancelParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling work done progress cancellation parameters in the context of the LSP protocol. It includes functions to create and serialize/deserialize instances of this structure, which contains a single progress token. It is used to manage cancellation requests for long-running operations during language server interactions.",
      "description_length": 363,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities for call hierarchy in a language server. It includes functions to create and serialize the structure, supporting integration with JSON-based communication. It is used to negotiate dynamic registration support during language server initialization.",
      "description_length": 317,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceFoldersInitializeParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling workspace folder initialization parameters in a language server protocol implementation. It includes functions to construct the structure, serialize it to JSON, and deserialize JSON into the structure. It is used to manage optional lists of workspace folders during server initialization.",
      "description_length": 338,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for inline completion in a language server protocol. It includes functions to create instances, convert to and from JSON using Yojson. It is used to configure whether dynamic registration of inline completion capabilities is supported by the client.",
      "description_length": 313,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` for inline value registration options in the context of a language server protocol. It includes fields for document selection, an identifier, and progress tracking, and provides functions to create instances and convert to and from JSON. It is used to configure inline value registration with specific document targeting and progress reporting capabilities.",
      "description_length": 388,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentSyncOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for text document synchronization in an LSP server. It includes fields to specify change notification behavior, document open/close tracking, save handling with optional save delay, and pre-save hooks. The type works with JSON serialization and is used to configure how the server tracks and responds to document edits and lifecycle events.",
      "description_length": 382,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationFilter",
      "library": "linol.lsp",
      "description": "This module defines a filter for file operations based on a pattern and an optional URI scheme. It includes functions to construct a filter, and to serialize and deserialize filters using Yojson. It is used to specify which file operations should be monitored based on file paths and protocol schemes.",
      "description_length": 301,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring call hierarchy operations in a language server, specifically supporting optional work done progress tracking. It provides functions to create instances and serialize or deserialize them using Yojson. Concrete use cases include enabling or disabling progress reporting during call hierarchy resolution in an LSP-compliant editor integration.",
      "description_length": 393,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DeclarationClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to declaration features in a language server. It includes functions to construct the structure, convert it to and from JSON format using Yojson. Concrete use cases include configuring and serializing client-side declaration support settings during language server initialization.",
      "description_length": 361,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionResult",
      "library": "linol.lsp",
      "description": "This module represents the result of a code action request, either as a list of commands or code actions, with serialization and deserialization to and from JSON. It works with lists of `Command.t` and `CodeAction.t` types, wrapped in an option to handle absence of results. It is used to send code action responses in an LSP server, enabling features like quick fixes or refactorings.",
      "description_length": 385,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MarkedString",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a string with an optional associated language, commonly used for formatted code snippets or documentation. It includes functions to convert values between this type and Yojson representations, enabling JSON serialization and deserialization. These operations are essential for integrating with language server protocol (LSP) features like hover documentation or code lens.",
      "description_length": 416,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionTriggerKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` with two variants, `Invoked` and `Automatic`, representing the trigger kinds for code actions. It provides functions `t_of_yojson` and `yojson_of_t` for converting between the type and Yojson.Safe.t values. This module is used to serialize and deserialize code action trigger kind data when handling language server protocol requests.",
      "description_length": 365,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressEnd",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing the end of a work done progress notification, containing an optional message. It provides functions to create instances, serialize to and from JSON using Yojson. Used to signal completion of long-running operations in LSP servers with optional status messages.",
      "description_length": 304,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextEdit",
      "library": "linol.lsp",
      "description": "This module defines a text edit operation with a `newText` string and a `range` specifying the location to apply the change. It provides functions to construct text edits, and serialize or deserialize them using Yojson. Concrete use cases include representing code modifications in a language server, such as auto-fixes or refactoring changes.",
      "description_length": 343,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RelatedFullDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a type for diagnostic reports associated with a document, including a list of diagnostics and optional related documents with their diagnostic states. It provides functions to construct these reports, along with serialization and deserialization for JSON communication. It is used to convey detailed diagnostic information in a language server protocol context, specifically handling full or unchanged document diagnostic reports.",
      "description_length": 450,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CreateFileOptions",
      "library": "linol.lsp",
      "description": "This module defines options for file creation operations, specifically handling flags to control behavior when a file already exists. It provides functions to construct these options with `ignoreIfExists` and `overwrite` parameters, and supports JSON serialization and deserialization. It is used to configure file creation requests in language server protocol interactions, ensuring correct handling of existing files.",
      "description_length": 419,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.LinkedEditingRanges",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing linked editing ranges in a text document, including an optional word pattern. It provides functions to construct instances, serialize to, and deserialize from JSON. It is used to enable synchronized editing of multiple text ranges that share the same pattern, such as renaming variables across a file.",
      "description_length": 355,
      "index": 60,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceSymbolOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for workspace symbol handling in a language server. It includes fields to enable symbol resolution and progress reporting, with functions to create and serialize these options. It is used to configure symbol request behavior in LSP (Language Server Protocol) implementations.",
      "description_length": 317,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentSyncClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities for notebook document synchronization, including optional support for dynamic registration and execution summaries. It provides functions to create instances, serialize to JSON, and deserialize from JSON using the Yojson library. This module is used to configure and communicate notebook-related features supported by a language client in a language server protocol implementation.",
      "description_length": 451,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidCloseNotebookDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing parameters for closing a notebook document, including a list of associated text document identifiers and a notebook document identifier. It provides functions to construct instances, convert to and from JSON format. Used to handle notebook document closure events in a language server protocol implementation.",
      "description_length": 359,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentFormattingParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for document formatting parameters, including formatting options, a text document identifier, and an optional progress token. It provides functions to construct instances, convert to and from JSON, and is used to configure document formatting requests in a language server protocol context. Concrete use cases include handling formatting requests in an LSP server, where a client specifies how a document should be formatted.",
      "description_length": 462,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressCreateParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for creating a work done progress token, containing a single `token` field. It provides functions to construct a `t` value, convert it to and from JSON format using Yojson. This module is used to handle progress reporting in language server protocol interactions, specifically for initializing progress tracking with a provided token.",
      "description_length": 389,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ProgressToken",
      "library": "linol.lsp",
      "description": "This module defines a type for progress tokens used in the LSP protocol, supporting both integer and string identifiers. It provides functions to convert these tokens to and from JSON format using the Yojson library. This is essential for tracking progress in long-running operations like code analysis or file indexing.",
      "description_length": 320,
      "index": 66,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.GlobPattern",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents either a glob pattern or a relative glob pattern, using variants from `Linol_lsp.Types.Pattern` and `Linol_lsp.Types.RelativePattern`. It includes functions to convert between this type and Yojson for serialization and deserialization. It is used to handle file pattern matching and path-based filtering in the context of language server protocol requests.",
      "description_length": 403,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ApplyWorkspaceEditParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for applying workspace edits with an optional label, used to group or describe related changes. It includes functions to construct the structure, specifying the edit and an optional label, and supports JSON serialization and deserialization. Concrete use cases include sending batched file modifications to an editor or managing labeled refactorings across multiple files.",
      "description_length": 409,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DefinitionLink",
      "library": "linol.lsp",
      "description": "This module defines a type alias for `LocationLink.t` and provides bidirectional conversion functions between this type and `Yojson.Safe.t`. It facilitates handling definition links in JSON format, particularly for use in language server protocol implementations. The module is useful when processing or transmitting definition locations in a JSON-based LSP communication layer.",
      "description_length": 378,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceSymbolClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines and constructs data structures representing client capabilities for workspace symbol handling in the context of the Language Server Protocol (LSP). It includes types for tag support, symbol kind filtering, and resolve capabilities, all used to communicate client features to an LSP server. These types are directly used to configure symbol-related behavior in an LSP client, such as specifying supported symbol tags or indicating resolve support for extended symbol information.",
      "description_length": 498,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeDefinitionOptions",
      "library": "linol.lsp",
      "description": "This module defines a single type `t` with an optional `workDoneProgress` boolean field. It provides functions to create instances of this type, as well as serialize and deserialize them using Yojson. It is used to configure type definition request options in an LSP server, specifically controlling whether work done progress is reported.",
      "description_length": 339,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentLinkOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for document link features in a language server, specifically controlling whether link resolution is supported and if work progress notifications are enabled. It works with boolean values wrapped in options to represent optional settings. The module is used to serialize and deserialize these settings to and from JSON, typically for communication between a language server and a client like an editor.",
      "description_length": 444,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MonikerClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for moniker support in a language server, specifically including an optional `dynamicRegistration` boolean. It provides functions to create instances of this type, and to serialize and deserialize them using Yojson. This module is used to configure whether a client supports dynamic registration of moniker-related features in a language server protocol implementation.",
      "description_length": 433,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ResourceOperationKind",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing resource operation kinds, including creation, renaming, and deletion. It provides bidirectional conversion functions between this type and Yojson.Safe.t for serialization and deserialization. This module is used to handle resource operation events in a language server protocol implementation, ensuring correct JSON encoding and decoding during client-server communication.",
      "description_length": 429,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileCreate",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a file creation event with a URI. It provides functions to construct a value from a URI, and to serialize and deserialize values using Yojson. It is used to handle file creation notifications in the context of the LSP (Language Server Protocol).",
      "description_length": 289,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RelativePattern",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that pairs a unit value with a pattern, enabling structured data matching. It includes functions to construct instances, convert to and from JSON using Yojson. Useful for representing patterns relative to a base URI in a type-safe manner.",
      "description_length": 269,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ExecuteCommandRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for specifying command registration options in a language server protocol implementation. It includes functions to create and serialize the structure, which holds a list of command names and an optional flag for progress reporting. It is used to configure executable commands in an LSP server during initialization.",
      "description_length": 352,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentLinkParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in document link requests, including optional progress tokens and a text document identifier. It provides functions to construct instances, convert to and from JSON format. It is used to handle document link operations in an LSP server, specifically for tracking progress and identifying documents during link resolution.",
      "description_length": 375,
      "index": 78,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.FileRename",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing a file rename operation with `oldUri` and `newUri` fields. It provides functions to construct such a structure, and to convert it to and from JSON format using Yojson. It is used to model file renaming events in a language server protocol context, specifically for handling workspace edit operations involving file moves.",
      "description_length": 371,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceDiagnosticParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for workspace diagnostic parameters used in the LSP protocol. It includes fields for tracking progress tokens, previous result identifiers, and optional workspace identifiers. The module provides functions to construct instances, convert to and from JSON, and manage diagnostic state in language server operations.",
      "description_length": 351,
      "index": 80,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentDiagnosticParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in document diagnostic requests, including optional fields for progress tracking and result identifiers. It works with text document identifiers and progress tokens to manage diagnostic data retrieval. Concrete use cases include handling incremental diagnostic updates and associating diagnostic results with specific document versions in an LSP server.",
      "description_length": 410,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionItemTag",
      "library": "linol.lsp",
      "description": "This module defines a single type `t` representing tags for completion items, specifically the `Deprecated` tag. It provides functions to convert values of this type to and from Yojson for serialization and deserialization. This is used to annotate code completion suggestions in a language server protocol implementation.",
      "description_length": 322,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in inline completion requests, including context, position, text document identifier, and an optional progress token. It provides functions to construct instances, convert to and from JSON format. It is used to handle inline code completion in text editors supporting the LSP protocol, specifically for structuring and parsing request data.",
      "description_length": 397,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlayHint",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing inlay hints in a code editor, including fields for label content, positioning, optional padding, tooltips, and text edits. It provides functions to construct inlay hints with customizable properties and serialize or deserialize them using Yojson. Concrete use cases include displaying inline type annotations, parameter hints, or code actions directly within the editor view.",
      "description_length": 419,
      "index": 84,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.String",
      "library": "linol.lsp",
      "description": "This module combines core string manipulation with structured key-based data processing. It supports text operations like case conversion, substring analysis, and UTF encoding, while its map submodule enables functional manipulation of key-value pairs using immutable `t` structures. You can sanitize text input, parse binary protocols, or build routing tables with efficient lookups and ordered traversals. Operations like `map`, `fold`, and `merge` on both strings and maps allow for complex data transformations in text processing and configuration workflows.",
      "description_length": 562,
      "index": 85,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in inline value requests, including context, range, text document identifier, and an optional progress token. It provides functions to construct instances, convert to and from JSON format. Used to handle inline value queries in a language server, enabling efficient retrieval and processing of variable values within specified ranges of a document.",
      "description_length": 402,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensDelta",
      "library": "linol.lsp",
      "description": "This module represents semantic token updates in a document, primarily used to send incremental changes to a language client. It includes operations to construct a token delta with a list of edits and an optional result ID, and to serialize or deserialize the data using Yojson. A concrete use case is efficiently updating syntax highlighting in an editor without re-sending all tokens.",
      "description_length": 386,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeLens",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing code lenses in the context of language server protocol interactions. It includes operations to construct code lens instances with optional command and data fields, and to serialize or deserialize them using Yojson. Concrete use cases include enabling inline code actions or displaying hidden information in an editor based on source code ranges.",
      "description_length": 399,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.LocationLink",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing a link between two locations in a document, including ranges and the target document URI. It provides functions to construct a location link with optional origin selection range and to serialize or deserialize the structure using Yojson. Concrete use cases include implementing \"go to definition\" or \"find references\" features in an LSP server by capturing source and target positions across files.",
      "description_length": 448,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for signature help in a language server, including characters that trigger or retrigger help and whether work progress is reported. It provides functions to create and serialize these options, specifically supporting integration with JSON via Yojson. Use cases include setting up signature help behavior in a language server and converting between JSON representations and internal structures.",
      "description_length": 435,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RenameFileOptions",
      "library": "linol.lsp",
      "description": "This module defines options for controlling file renaming behavior, specifically whether to ignore if the target exists or to overwrite it. It provides functions to construct these options and convert them to and from JSON format. It is used when configuring file operations that require explicit handling of existing files during renaming.",
      "description_length": 340,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentColorClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for document color features in a language server protocol. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize instances using Yojson. It is used to configure and exchange document color-related capabilities between a language client and server.",
      "description_length": 374,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CodeLensClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to code lens features in a language server protocol. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. Concrete use cases include configuring and exchanging code lens capabilities between a language client and server during protocol initialization.",
      "description_length": 427,
      "index": 93,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for inlay hints in a language server protocol implementation. It includes fields to enable a resolve provider and work done progress tracking, both optional boolean values. The module provides functions to construct these configurations, convert them to and from JSON format using Yojson.",
      "description_length": 330,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.VersionedNotebookDocumentIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a versioned notebook document identifier, consisting of a document URI and an integer version. It provides functions to construct such identifiers, convert them to and from JSON format using Yojson. This module is used to uniquely identify specific versions of notebook documents in the context of the LSP (Language Server Protocol) communication.",
      "description_length": 391,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.LogTraceParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for log trace parameters with a message and optional verbose detail. It provides functions to construct instances, convert to and from JSON format. It is used to handle logging information in a structured way during language server protocol interactions.",
      "description_length": 291,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for code actions in a language server, including supported action kinds, resolution capability, and progress reporting. It works with lists of code action kinds, boolean flags, and JSON values for serialization. It is used to configure code action behavior in LSP servers and to serialize or deserialize these settings to and from JSON.",
      "description_length": 378,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentFilter",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing either a text document filter or a notebook cell text document filter. It provides serialization and deserialization functions to and from Yojson for these filter types. Concrete use cases include filtering documents based on language, type, or notebook cell criteria in LSP (Language Server Protocol) implementations.",
      "description_length": 374,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeConfigurationRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing options for registering configuration change notifications, with an optional `section` field that can be a single string or a list of strings. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to specify which configuration sections a language server should monitor for changes.",
      "description_length": 368,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationPattern",
      "library": "linol.lsp",
      "description": "This module defines a file operation pattern with a glob string, optional match kind, and optional pattern options. It provides functions to construct the pattern, convert it to and from JSON. Useful for specifying file operations in a structured format compatible with JSON serialization.",
      "description_length": 289,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for handling client capabilities related to signature help in a language server protocol. It includes types for parameter and signature information, supporting features like documentation formats, parameter labels, and active parameter tracking. These capabilities are used to configure and exchange metadata during language server initialization.",
      "description_length": 397,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressReport",
      "library": "linol.lsp",
      "description": "This module defines a data structure for tracking progress reports in a language server protocol, specifically supporting optional fields like cancellable status, progress message, and percentage completion. It includes functions to construct progress reports and to serialize/deserialize them using Yojson. This module is used to report intermediate progress updates during long-running operations such as code indexing or compilation.",
      "description_length": 436,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeWatchedFilesClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities for handling changes to watched files in a language server protocol. It includes fields for dynamic registration and relative pattern support, both optional boolean values. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for use in LSP communication.",
      "description_length": 377,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentColorParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in a document color request, including tokens for progress tracking and a text document identifier. It provides functions to construct instances, convert to and from JSON format. It is used to handle color-related queries in a text document within a language server protocol implementation.",
      "description_length": 347,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensDeltaPartialResult",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing partial results of semantic token delta updates, specifically through a list of edits. It provides functions to construct instances of this structure and to serialize or deserialize them using Yojson. It is used to efficiently transmit incremental changes to semantic token data in a language server protocol context.",
      "description_length": 371,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.VersionedTextDocumentIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type for identifying text documents with a version number and URI. It provides functions to construct these identifiers, convert them to and from JSON, and manage document state in the context of a language server. It is used to track changes to specific files during editing sessions.",
      "description_length": 307,
      "index": 106,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TraceValues",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic variant type for trace levels with four options: `Compact`, `Off`, `Messages`, and `Verbose`. It includes functions to convert between this type and Yojson representations, enabling JSON serialization and deserialization. These conversions are used to handle trace configuration in LSP (Language Server Protocol) communication, particularly when parsing or generating JSON-based LSP messages.",
      "description_length": 426,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.PrepareRenameParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in preparing a rename operation within a text document. It includes fields for the position of the rename target, the document identifier, and an optional progress token. The module provides functions to construct the parameter object, and to serialize and deserialize it using Yojson for communication in a language server protocol context.",
      "description_length": 398,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WatchKind",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing file system event kinds such as creation, modification, deletion, or other events. It includes functions to convert these event types to and from JSON format using Yojson. This is used to handle file system watch events in a language server protocol implementation.",
      "description_length": 313,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentDiagnosticReportPartialResult",
      "library": "linol.lsp",
      "description": "This module defines a type and conversion functions for handling partial diagnostic results in a language server protocol. It works with document diagnostics structured as either full or unchanged reports, stored in a JSON associative container indexed by document URI. It supports creating and serializing diagnostic data for specific documents during incremental analysis.",
      "description_length": 374,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in signature help requests within a language server protocol implementation. It includes fields for the current context, position in the document, text document identifier, and an optional progress token, supporting precise function signature assistance. The module provides functions to construct instances, and serialize or deserialize them using Yojson for communication over the protocol.",
      "description_length": 449,
      "index": 111,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities related to inline value workspace features in a language server protocol. It includes functions to create instances, serialize to JSON, and deserialize from JSON, specifically supporting an optional `refreshSupport` boolean field. It is used to communicate whether the client supports refreshing inline values during debugging sessions.",
      "description_length": 406,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RegistrationParams",
      "library": "linol.lsp",
      "description": "Handles the creation and JSON serialization of registration parameters for language server capabilities. Works with lists of registration objects to batch multiple capability registrations in a single request. Used during server initialization to register text document synchronization, hover, and other features with the client.",
      "description_length": 329,
      "index": 113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.Range",
      "library": "linol.lsp",
      "description": "This module defines a `t` record type representing a text range with `start` and `end_` positions. It provides functions to construct a range, and to convert it to and from Yojson format. It is used to model spans of text in a document, such as selections or highlighted regions, for LSP communication.",
      "description_length": 302,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeTextDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a type for handling text document change events, specifically tracking content modifications and document versions. It includes functions to construct instances, convert to and from JSON, and works with lists of content change events and versioned document identifiers. It is used to represent updates to a text document in an LSP server, enabling precise tracking of changes and document state.",
      "description_length": 415,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidSaveNotebookDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for a notebook document save event, containing a `notebookDocument` field of type `NotebookDocumentIdentifier.t`. It provides functions to construct instances, and convert to and from JSON using Yojson. It is used to handle notifications when a notebook document is saved in an LSP server.",
      "description_length": 344,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentFormattingOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for document formatting options, specifically supporting a `workDoneProgress` field to indicate progress reporting capabilities. It provides functions to create instances, and to convert to and from JSON format using Yojson. This structure is used to configure formatting behavior in language server protocol implementations, particularly for handling document formatting requests with progress tracking.",
      "description_length": 441,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.LogMessageParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for log message parameters, including a message string and a message type. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to represent log messages in a structured format for transmission or storage.",
      "description_length": 292,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DefinitionOptions",
      "library": "linol.lsp",
      "description": "This module defines a configuration type for handling work progress options in language server protocol interactions. It includes a function to create configuration instances with an optional work progress flag and functions to serialize and deserialize these configurations using Yojson. It is used to manage progress reporting settings during definition lookups in an LSP server.",
      "description_length": 381,
      "index": 119,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_lsp.Types.RenameRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring rename operations in a language server, including options for document selection, preparation, and progress tracking. It provides functions to create instances and convert to and from JSON format. It is used to specify how and when renaming should be performed during code refactoring in an editor or IDE.",
      "description_length": 358,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.BaseSymbolInformation",
      "library": "linol.lsp",
      "description": "This module defines a record type for symbol information with optional container name, symbol kind, name, and tags. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to represent symbols like variables or functions in a codebase for features like navigation or documentation lookup.",
      "description_length": 328,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSymbolClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for representing client capabilities related to document symbols in a language server protocol. It includes types for symbol kind and tag support, along with optional features like dynamic registration and hierarchical symbol support. The module is used to configure how a language server handles symbol information requests based on client capabilities.",
      "description_length": 404,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionTriggerKind",
      "library": "linol.lsp",
      "description": "This module defines an inline completion trigger kind with two variants: `Invoked` and `Automatic`. It provides functions to convert between these values and Yojson representations for serialization and deserialization. This type is used to indicate whether an inline completion was triggered manually by the user or automatically by the system.",
      "description_length": 345,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchySupertypesParams",
      "library": "linol.lsp",
      "description": "This module defines parameters for requesting type hierarchy supertypes in an LSP server. It includes a type hierarchy item and optional progress tokens for partial results and work tracking. The module provides functions to construct these parameters and serialize/deserialize them using Yojson.",
      "description_length": 296,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSymbol",
      "library": "linol.lsp",
      "description": "This module defines a record type representing symbols within a document, such as functions, variables, or classes, with fields including name, kind, range, and optional metadata like deprecation status or tags. It provides a `create` function to construct symbol instances and functions to serialize and deserialize symbols to and from JSON. It is used to model hierarchical code structure information for features like outline views or symbol navigation in an LSP server.",
      "description_length": 473,
      "index": 125,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CompletionRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for configuring language server protocol (LSP) completion features. It includes types for completion options such as trigger characters, commit characters, and document selectors, along with functions to construct and serialize these configurations. It is used to specify how code completion should behave in an LSP server, enabling features like auto-suggestions and detailed label support in editors.",
      "description_length": 452,
      "index": 126,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRange",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing a range of text that can be folded in a code editor, including optional metadata like the collapsed text and range boundaries. It provides functions to construct instances with customizable start and end positions, and to serialize or deserialize them using Yojson. Concrete use cases include managing code folding in an LSP server by capturing regions of source code that can be toggled between expanded and collapsed states.",
      "description_length": 476,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocument",
      "library": "linol.lsp",
      "description": "This module defines a notebook document structure with operations to create and serialize notebook documents. It works with lists of notebook cells, JSON metadata objects, document URIs, and version numbers. It is used to represent and manipulate notebook-based documents in a language server protocol context, supporting serialization to and from JSON for transmission or storage.",
      "description_length": 381,
      "index": 128,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeWatchedFilesRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for specifying file system watchers in the context of the Language Server Protocol. It includes functions to create an instance with a list of file system watchers and to serialize or deserialize the structure using Yojson. A concrete use case is configuring file change notifications in an LSP server by registering specific file system watchers.",
      "description_length": 384,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ImplementationRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type for implementation registration options in the context of a language server protocol. It includes fields for document selector, an optional identifier, and a flag for work done progress, supporting configuration of implementation-related features. The module provides functions to construct instances, and to convert to and from JSON format for serialization and deserialization.",
      "description_length": 413,
      "index": 130,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.FileEvent",
      "library": "linol.lsp",
      "description": "This module defines a file event structure with a change type and URI, offering functions to create instances and serialize or deserialize them using Yojson. It works with file change types and document URIs to represent events like file creation, modification, or deletion. Concrete use cases include tracking and transmitting file system changes in an LSP server.",
      "description_length": 365,
      "index": 131,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.RenameClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for rename operations in a language server, including optional fields for dynamic registration, change annotations, prepare support, and default behavior settings. It provides functions to construct instances of this type and to serialize and deserialize them using Yojson. The module is used to configure how a language server client handles rename requests, particularly in specifying supported features and behaviors during code refactoring.",
      "description_length": 508,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SelectedCompletionInfo",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing information about a selected text completion, including the range of the completion and the inserted text. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. It is used to communicate completion details between a language server and a client during code editing.",
      "description_length": 353,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSelector",
      "library": "linol.lsp",
      "description": "This module defines a list of document filters used to match specific documents in a language server protocol context. It provides functions to convert the list to and from Yojson representations for serialization and parsing. Concrete use cases include filtering which documents should trigger language server features based on their language, URI, or other attributes.",
      "description_length": 370,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.Locations",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` that represents either a list of `Location` or `LocationLink` values, enabling structured handling of source code references. It includes functions to convert between this type and Yojson representations, ensuring seamless JSON serialization and deserialization. It is used to manage and transfer code navigation data, such as definition or reference locations, in a language server protocol context.",
      "description_length": 443,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ParameterInformation",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing parameter information in a language server protocol, including optional documentation and a label that can be a string or an offset range. It provides functions to construct instances, convert to and from JSON using Yojson. Concrete use cases include storing and serializing parameter metadata for function signatures in an LSP implementation.",
      "description_length": 397,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SetTraceParams",
      "library": "linol.lsp",
      "description": "This module defines a record type `t` with a single field `value` of type `Linol_lsp.Types.TraceValues.t`, representing parameters for setting trace values. It provides functions to create instances of this type and to convert between JSON and the `t` type using Yojson. It is used to handle trace configuration data in JSON format, particularly during LSP communication.",
      "description_length": 371,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceSymbol",
      "library": "linol.lsp",
      "description": "This module defines a workspace symbol type with fields for name, kind, location, container name, data, and tags. It provides functions to construct symbols, convert them to and from JSON using Yojson. It is used to represent and manipulate symbols in a codebase, such as functions, variables, or types, during language server operations.",
      "description_length": 338,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ReferenceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for dynamic reference registration, with an optional boolean field. It provides functions to create instances, convert to and from JSON using Yojson. Used to configure whether a client supports dynamic registration of reference providers in a language server protocol.",
      "description_length": 332,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceEdit",
      "library": "linol.lsp",
      "description": "This module defines a workspace edit structure that supports batched document modifications, including text edits, file creation, renaming, and deletion. It handles data types like document URIs, text edit lists, and change annotations, organized through JSON associations. Concrete use cases include applying multiple code changes across files in a single operation, such as refactoring or bulk fixes in an editor.",
      "description_length": 415,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentRangeFormattingParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in document range formatting requests, including formatting options, a text range, a text document identifier, and an optional progress token. It provides functions to construct instances, convert from JSON, and serialize to JSON. It is used to specify how a particular range in a document should be formatted during language server operations.",
      "description_length": 401,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Command",
      "library": "linol.lsp",
      "description": "This module defines a record type for representing commands with a title, command identifier, and optional JSON arguments. It includes functions to construct command values, and to serialize and deserialize them using Yojson. It is used to model actions sent between a language server and an editor, such as code refactoring or execution commands.",
      "description_length": 347,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.PartialResultParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for partial result handling in the LSP protocol, specifically including an optional `partialResultToken`. It provides functions to create instances, convert to and from JSON using Yojson, enabling efficient serialization and deserialization of partial result metadata. This is used to manage incremental updates in language server responses, such as streaming diagnostics or completions.",
      "description_length": 442,
      "index": 143,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.NotebookCellTextDocumentFilter",
      "library": "linol.lsp",
      "description": "This module defines a type and functions for filtering notebook cell text documents based on language and notebook criteria. It supports operations to create filters with optional language specification and either a notebook identifier string or a nested notebook document filter. The module includes serialization and deserialization functions for working with JSON representations of these filters.",
      "description_length": 400,
      "index": 144,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.Declaration",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents either a single location or a list of locations, using the `Location.t` type from the same namespace. It provides functions to convert this type to and from Yojson representations, enabling serialization and deserialization for use in LSP (Language Server Protocol) communication. These capabilities are specifically used when handling declaration responses in an LSP server implementation.",
      "description_length": 437,
      "index": 145,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentSyncClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities for text document synchronization in an LSP (Language Server Protocol) implementation. It includes fields to indicate support for save events, dynamic registration, and pre-save hooks. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for communication over the LSP protocol.",
      "description_length": 400,
      "index": 146,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentPositionParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing parameters that combine a text document identifier and a specific position within that document. It provides functions to construct instances, convert to and from JSON format using Yojson. Used primarily in language server protocol implementations to handle requests like code completion or hover information at specific document positions.",
      "description_length": 394,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentSyncKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing the synchronization kind for text documents in the LSP protocol, with variants `None`, `Full`, and `Incremental`. It provides functions to convert between this type and Yojson for serialization and deserialization. This module is used to specify how text document changes are communicated between the client and server in an LSP implementation.",
      "description_length": 388,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentOnTypeFormattingClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a single data type `t` representing client capabilities for document on-type formatting in a language server protocol. It includes functions to construct instances, and to convert to and from JSON format using Yojson. It is used to configure and communicate formatting support in language server client implementations.",
      "description_length": 339,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentRangeFormattingClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities for document range formatting in a language server protocol. It includes functions to create instances and convert to and from JSON format using Yojson. It is used to configure and communicate formatting support features between a language client and server.",
      "description_length": 328,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSymbolOptions",
      "library": "linol.lsp",
      "description": "This module defines options for document symbol requests, including an optional label and a flag for work done progress. It provides functions to create instances and convert to and from JSON format. Use cases include configuring symbol request parameters in language server protocol implementations.",
      "description_length": 300,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SelectionRange",
      "library": "linol.lsp",
      "description": "This module defines a selection range structure with a parent reference and a range, supporting hierarchical selection data. It includes functions to create instances, and serialize/deserialize to and from JSON using Yojson. It is used to represent nested or layered text selections in an editor, such as when handling multiple levels of code folding or structured editing operations.",
      "description_length": 384,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceFoldersChangeEvent",
      "library": "linol.lsp",
      "description": "This module defines a workspace folder change event with added and removed folder lists. It provides functions to construct such events and serialize or deserialize them using Yojson. It is used to track dynamic updates to workspace folders in an LSP server.",
      "description_length": 258,
      "index": 153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Header.Private",
      "library": "linol.lsp",
      "description": "This module provides essential constants for HTTP headers used in LSP communication. It includes `content_length` and `content_type`, which are critical for formatting and parsing LSP messages over standard input/output. These values ensure correct message framing and interpretation in LSP server implementations. For example, `content_type` is used to specify the media type of LSP payloads, while `content_length` ensures proper message boundary handling during transmission.",
      "description_length": 478,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensRangeParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in semantic token range requests, including optional progress tokens, a range, and a text document identifier. It provides functions to construct instances, convert to and from JSON, and specifies the data structure for exchanging semantic token request details. Concrete use cases include handling requests for semantic highlighting in a text document within a language server.",
      "description_length": 432,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WindowClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines client capabilities related to window operations in an LSP (Language Server Protocol) implementation. It includes functions to create and serialize capability structures that specify support for showing documents, displaying messages, and tracking work progress. These capabilities are used to negotiate optional UI-related features between the language server and client during protocol handshake.",
      "description_length": 418,
      "index": 156,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.StringValue",
      "library": "linol.lsp",
      "description": "This module defines a wrapper type for string values with functions to create instances and serialize to or from JSON using Yojson. It works with string data encapsulated in the `t` record type. Concrete use cases include handling string-based JSON payloads in an LSP (Language Server Protocol) implementation, ensuring type-safe conversions between OCaml and JSON representations.",
      "description_length": 381,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DefinitionRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for specifying options when registering a definition provider in a language server. It includes fields for selecting documents and enabling progress reporting. The module provides functions to create instances, convert to and from JSON, and works with document selectors and boolean flags. Use this to configure definition request handling in an LSP-compliant editor integration.",
      "description_length": 416,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InsertTextFormat",
      "library": "linol.lsp",
      "description": "This module defines an enumerated type with two variants, `PlainText` and `Snippet`, representing formats for insertion text in language server protocol operations. It includes functions to convert values between this type and Yojson.Safe.t for serialization and deserialization. This is used to handle how text is inserted during auto-completion or code editing features in an LSP server.",
      "description_length": 389,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CreateFilesParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing parameters used to create multiple files, consisting of a list of file creation operations. It provides functions to construct the structure, convert it to and from JSON format using Yojson. The module is used to handle batch file creation requests in a language server protocol implementation.",
      "description_length": 348,
      "index": 160,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentItem",
      "library": "linol.lsp",
      "description": "This module defines a record type representing a text document in the context of the Language Server Protocol, including its language identifier, content, document URI, and version number. It provides functions to construct instances of this type, as well as serialization and deserialization to and from JSON using the Yojson library. This module is used to manage and exchange document metadata and content between a language server and a client, such as an editor or IDE.",
      "description_length": 474,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MonikerOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring moniker-related operations in an LSP (Language Server Protocol) implementation. It includes functions to create an options record with an optional work-done progress flag, and to serialize and deserialize this record using Yojson. A concrete use case is managing client capabilities for moniker resolution during language server initialization.",
      "description_length": 397,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension.DebugEcho",
      "library": "linol.lsp",
      "description": "This module provides utilities for encoding and decoding debug echo messages in JSON format using Yojson. It centers around the `t` record type with a `message` field, supporting serialization and deserialization for LSP protocol extensions. Functions allow constructing, sending, and interpreting debug messages between a language server and client. For example, a server can encode a diagnostic message like `{ message = \"variable not used\" }` and send it to the client for display.",
      "description_length": 484,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for registering code action capabilities in a language server. It includes fields to specify supported code action kinds, document selectors, and optional providers for resolution and progress reporting. It is used to configure how code actions are advertised and handled in the context of the Language Server Protocol (LSP).",
      "description_length": 367,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Json",
      "library": "linol.lsp",
      "description": "This module enables bidirectional conversion between OCaml values and JSON structures using `Yojson.Safe.t`, with combinators for parsing, validating, and manipulating JSON data. It supports handling optional fields, nested structures, and LSP message parameters through operations like `field`, `field_exn`, and result-returning decoders. Submodules handle option types with explicit null handling, decode lists and pairs, provide fallback combinators, serialize association lists, and support custom type conversions for LSP communication. Examples include decoding LSP requests with optional fields, validating JSON payloads, and transforming configuration data between OCaml and JSON formats.",
      "description_length": 696,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and capabilities related to code actions in a language server protocol implementation. It includes types for resolve support, code action kinds, and literal support, along with functions to construct and serialize these structures. It is used to specify client capabilities for handling code actions, such as supporting dynamic registration, data payloads, and annotation handling.",
      "description_length": 417,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TokenFormat",
      "library": "linol.lsp",
      "description": "This module defines a single type `t` representing token formatting options, specifically the `Relative` variant. It provides functions to convert values of this type to and from Yojson for serialization and deserialization. This module is used to handle token format representations in JSON-based communication, such as in language server protocol messages.",
      "description_length": 358,
      "index": 167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DeclarationLink",
      "library": "linol.lsp",
      "description": "This module defines a type alias for `LocationLink.t` and provides bidirectional conversion functions between this type and `Yojson.Safe.t`. It facilitates handling declaration links in JSON format, commonly used for communication in language server protocols. Use this module when serializing or deserializing declaration link data during LSP request handling.",
      "description_length": 361,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring call hierarchy registration in a language server. It includes fields for specifying document selectors, a registration ID, and whether work done progress is supported. The module provides functions to create instances and serialize/deserialize them to and from JSON.",
      "description_length": 319,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Location",
      "library": "linol.lsp",
      "description": "This module defines a location type that pairs a document URI with a range, representing a specific segment within a file. It includes functions to construct locations and serialize them to and from JSON. This is used to identify positions in source files, such as for reporting errors or navigating to definitions.",
      "description_length": 315,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyIncomingCall",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing incoming calls in a call hierarchy, containing a reference to the caller (`from`) and a list of ranges (`fromRanges`) indicating where the call originates. It provides functions to construct instances, convert to and from JSON using Yojson. This is used to model and serialize call relationships between functions or methods in a codebase, specifically tracking where each call originates in the source code.",
      "description_length": 452,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentLink",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing document links in a text editor, including their range, optional target URI, tooltip, and additional metadata. It provides functions to construct link instances and serialize them to and from JSON format. Concrete use cases include handling clickable links in code editors, such as navigating to definitions or displaying documentation tooltips.",
      "description_length": 399,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyIncomingCallsParams",
      "library": "linol.lsp",
      "description": "This module defines a type for parameters used to request incoming calls in a call hierarchy, including a call hierarchy item and optional progress tokens. It provides functions to create instances of this type and to serialize and deserialize them using Yojson. This is used to support features like code navigation and analysis in language servers by tracking function call relationships.",
      "description_length": 390,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchyItem",
      "library": "linol.lsp",
      "description": "This module defines a record type representing an item in a type hierarchy, including fields like name, kind, range, and document URI. It provides a constructor function to build these records and functions to serialize and deserialize them using Yojson. Concrete use cases include representing type hierarchy data in a language server for features like navigation and code analysis.",
      "description_length": 383,
      "index": 174,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeDefinitionClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines client capabilities for type definition features in a language server. It includes fields to indicate support for dynamic registration and linking type definitions. The module provides functions to construct capability instances, convert to and from JSON, and is used to configure type definition handling in language server protocol implementations.",
      "description_length": 370,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a variant type for representing workspace document diagnostic reports, supporting two forms: full and unchanged. It provides serialization and deserialization functions to and from Yojson for these diagnostic report types. It is used to handle diagnostic data in a language server protocol context, specifically for reporting document diagnostics in a workspace.",
      "description_length": 382,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MarkupKind",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` with two variants, `PlainText` and `Markdown`, representing supported markup formats. It includes functions to convert values of this type to and from Yojson representations, enabling serialization and deserialization for JSON-based communication. These conversions are essential for integrating with language server protocol messages that require structured markup kind data.",
      "description_length": 419,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SelectionRangeOptions",
      "library": "linol.lsp",
      "description": "This module defines a single data type `t` that represents selection range options in the context of language server protocol communication. It includes a field `workDoneProgress` which indicates whether progress reporting is supported for selection range requests. The module provides functions to create instances of this type, and to convert to and from JSON representations using the Yojson library.",
      "description_length": 403,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MessageType",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing different levels of log messages, including error, warning, info, log, and debug. It provides functions to convert these message types to and from Yojson representations. This enables structured logging and communication in JSON-based systems like language servers.",
      "description_length": 313,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidOpenNotebookDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a type for parameters used when opening a notebook document, containing a list of cell text documents and the notebook document itself. It provides functions to create instances of this type and to convert to and from JSON format using Yojson. This is specifically used in handling notebook document events in a language server protocol implementation.",
      "description_length": 372,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing workspace client capabilities related to semantic tokens, specifically supporting an optional refresh flag. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. This is used to communicate client support for semantic token refreshing in a language server protocol implementation.",
      "description_length": 368,
      "index": 181,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionItem",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing inline completion items for a language server protocol, including optional command, filter text, insert text (as a string or string value), and range. It provides functions to create instances of this type and to serialize/deserialize them using Yojson. Concrete use cases include generating and processing inline code suggestions in an LSP-compliant editor integration.",
      "description_length": 414,
      "index": 182,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities in a language server protocol implementation. It includes functions to construct the structure with optional fields for notebook documents, text documents, workspace features, and other client-specific settings. The module also provides serialization and deserialization to and from JSON using Yojson for use in LSP initialization and capability negotiation.",
      "description_length": 428,
      "index": 183,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ExecuteCommandOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for specifying options related to command execution in a language server protocol implementation. It includes fields for a list of command names and an optional flag indicating whether work done progress is supported. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 361,
      "index": 184,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceFolder",
      "library": "linol.lsp",
      "description": "This module defines a workspace folder structure with a name and URI, providing functions to create instances and convert to and from JSON. It works with strings and document URIs to represent workspace folders in an editor or IDE environment. It is used to serialize and deserialize workspace folder data when communicating with a language server via JSON.",
      "description_length": 357,
      "index": 185,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring diagnostic registration options in an LSP server. It includes fields for document selection, dependency tracking, progress reporting, and workspace diagnostics, along with functions to construct and serialize the structure. It is used to specify how and when diagnostics should be generated across files in a language server implementation.",
      "description_length": 393,
      "index": 186,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.FormattingOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type for formatting options used in text document formatting, including settings like newline insertion, spacing, and trimming. It provides functions to construct instances with optional fields and to serialize/deserialize them using Yojson. Concrete use cases include configuring code formatters and handling formatting settings in language server protocol (LSP) requests.",
      "description_length": 402,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ShowDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used to display a document in an editor, including options like focus behavior, selection range, and visibility. It supports serialization and deserialization to and from JSON using Yojson, enabling seamless integration with LSP communication protocols. The module is used to construct and manipulate document display requests sent from language servers to clients.",
      "description_length": 417,
      "index": 188,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.LinkedEditingRangeClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to linked editing ranges in a language server. It includes functions to create instances, serialize to and from JSON, and supports optional dynamic registration. It is used to configure and communicate editing range features between a language server and client.",
      "description_length": 344,
      "index": 189,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for inline value options with a single field indicating whether work done progress is enabled. It provides functions to create instances, serialize to, and deserialize from JSON. It is used to configure inline value reporting in language server protocol implementations.",
      "description_length": 307,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookCell",
      "library": "linol.lsp",
      "description": "This module defines a notebook cell structure with fields for document URI, execution summary, cell kind, and metadata. It provides functions to construct a cell, convert it to and from JSON format. It is used to represent individual cells in a notebook document, supporting serialization for communication in a language server protocol.",
      "description_length": 337,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines options for registering file operations, centered around a list of file operation filters. It provides functions to construct these options and serialize or deserialize them using Yojson. Concrete use cases include configuring file event monitoring in an LSP server, such as tracking file creation, modification, or deletion events based on specific filter criteria.",
      "description_length": 386,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing workspace client capabilities related to folding range refresh support in a language server. It provides functions to create an instance with an optional refresh support flag, and to serialize and deserialize the structure to and from JSON. It is used to configure and communicate client capabilities for handling document folding ranges in an LSP (Language Server Protocol) implementation.",
      "description_length": 440,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeDefinitionRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type and associated functions for handling type definition registration options in a language server protocol implementation. It includes fields for specifying document selectors, an identifier, and whether work done progress is supported. The module provides functions to create instances, and serialize/deserialize them using Yojson.",
      "description_length": 357,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ChangeAnnotationIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type `t` as a string alias for change annotation identifiers and provides serialization and deserialization functions to and from Yojson. It supports working with JSON representations of change annotations, typically used in language server protocol implementations. The module is useful for handling annotated text changes in code editing scenarios where tracking changes is required.",
      "description_length": 407,
      "index": 195,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ChangeAnnotation",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing change annotations with fields for description, label, and confirmation requirements. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to manage user-facing labels and metadata for code changes in a language server protocol implementation.",
      "description_length": 346,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ShowDocumentClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities for showing documents in an LSP (Language Server Protocol) implementation. It includes functions to create instances, serialize to and from JSON using Yojson, and is used to communicate document display support in LSP handshake and configuration exchanges. A concrete use case is enabling a language server to determine whether a client can display documents on demand during editing sessions.",
      "description_length": 463,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeDefinitionParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in type definition requests, including position, text document identifier, and optional progress tokens. It provides functions to construct instances, convert to and from JSON format. It is used to handle type definition queries in a language server, enabling precise navigation to type definitions within source code.",
      "description_length": 375,
      "index": 198,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CodeLensOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for code lens features in a language server, specifically controlling whether a resolve provider is used and if work done progress is reported. It works with boolean values wrapped in options to represent optional settings. The module is used to serialize and deserialize these settings to and from JSON, and to create instances with optional parameters.",
      "description_length": 396,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ResourceOperation",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing resource operations with an optional annotation identifier and a kind string. It includes functions to construct instances, convert to and from JSON using Yojson. This module is used to serialize and deserialize resource operation data for communication in a language server protocol.",
      "description_length": 338,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for completion parameters used in language server protocol requests, including position, text document identifier, and optional context and progress tokens. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to handle code completion requests in an LSP server by capturing the necessary contextual and positional information.",
      "description_length": 411,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.UnchangedDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a diagnostic report for an unchanged document, containing a `resultId` string. It provides functions to create instances of this type, and to convert to and from JSON using the Yojson library. This module is used to handle diagnostic data in the context of language server protocol interactions, specifically for tracking diagnostic results across document versions.",
      "description_length": 410,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Substring.Map",
      "library": "linol.lsp",
      "description": "This module implements associative maps with substring keys, supporting insertion, deletion, lookup, and aggregation alongside ordered key traversal for consistent iteration and comparison. It provides transformations, structural queries, and conversions to sequences/lists, enabling efficient bulk processing and ordered data manipulation. Such functionality is ideal for text analysis, lexicon management, or scenarios requiring precise handling of substring-based keys with ordered access patterns.",
      "description_length": 501,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ConfigurationParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for holding a list of configuration items, typically used to represent settings or options in a language server protocol context. It provides functions to construct instances, convert to and from JSON format using Yojson, and ensures structured handling of configuration data. Concrete use cases include parsing and serializing configuration parameters for communication between a language server and client.",
      "description_length": 445,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentSyncOptions",
      "library": "linol.lsp",
      "description": "This module defines serialization and deserialization functions for unit-type notebook document sync options. It converts between a unit value and its JSON representation using Yojson. This supports LSP protocol communication where notebook sync settings are represented as empty objects.",
      "description_length": 288,
      "index": 205,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ReferenceParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in handling reference requests within a language server protocol implementation. It includes fields for contextual information, progress tokens, source position, and text document identifiers. The module provides functions to construct instances, and serialize or deserialize them using Yojson for communication over the protocol.",
      "description_length": 384,
      "index": 206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlightParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in document highlight requests, including position, text document identifier, and optional progress tokens. It provides functions to construct instances, convert to and from JSON format. It is used to handle requests for highlighting specific elements within a text document in an LSP server.",
      "description_length": 349,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.UniquenessLevel",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing levels of uniqueness for identifiers in a programming context, including document, project, group, scheme, and global scopes. It provides functions to convert values of this type to and from JSON format using the Yojson library. This is useful for serializing and deserializing configuration or state data that depends on identifier scope distinctions.",
      "description_length": 396,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressBegin",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing the beginning of a work done progress notification, typically used in language server protocol (LSP) communications. It includes fields for title, message, percentage completion, and cancellability, with functions to create instances and serialize to and from JSON. It is used to report the start of long-running operations in an LSP client or server.",
      "description_length": 405,
      "index": 209,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlineValue",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing different kinds of inline values, including text, variable lookups, and evaluatable expressions, using variants. It provides bidirectional JSON serialization and deserialization for this type via `t_of_yojson` and `yojson_of_t`. These functions are used to convert inline value data to and from JSON format, typically for communication in a language server protocol context.",
      "description_length": 430,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookCellKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing the kind of a notebook cell, with variants `Markup` and `Code`. It provides functions to convert between this type and Yojson for serialization and deserialization. Useful for handling notebook cell metadata in JSON-based communication, such as with language servers.",
      "description_length": 311,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ImplementationParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in handling implementation requests within a language server. It includes fields for tracking progress, identifying the document and position of interest, and provides functions to construct instances and serialize/deserialize them using Yojson. It is used to pass contextual information when resolving implementation locations in source code, such as when a user requests to navigate to an implementation.",
      "description_length": 460,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FullDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a full document diagnostic report, containing a list of diagnostics and an optional result identifier. It provides functions to construct a report, convert it to and from JSON format using Yojson. This module is used to serialize and deserialize diagnostic data for transmission in language server protocol interactions.",
      "description_length": 364,
      "index": 213,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceUnchangedDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a type and operations for representing diagnostic reports for unchanged documents in a workspace. It includes functions to construct the type with optional versioning, and to serialize and deserialize it using Yojson. It is used to report diagnostics for specific document URIs without requiring document changes, such as during incremental analysis or background linting.",
      "description_length": 392,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchyClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for type hierarchy in a language server, specifically supporting optional dynamic registration. It provides functions to create instances, convert to and from JSON using Yojson, and manage the `dynamicRegistration` field. Use this when implementing or configuring a language server that supports type hierarchy features with dynamic capability registration.",
      "description_length": 421,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeAction",
      "library": "linol.lsp",
      "description": "This module defines and constructs code actions for use in language server protocol interactions. It supports structured data handling with optional fields for commands, diagnostics, workspace edits, and metadata like titles and kinds. It serializes and deserializes code actions to and from JSON for transmission between the language server and client.",
      "description_length": 353,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationPatternOptions",
      "library": "linol.lsp",
      "description": "This module defines options for file operation patterns, specifically supporting case-insensitive matching through the `ignoreCase` field. It provides functions to create an option record, and to serialize and deserialize it using Yojson. A concrete use case is configuring file pattern matching in a language server to handle case-insensitive file searches.",
      "description_length": 358,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpTriggerKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing the possible trigger kinds for signature help in a language server protocol, including invocation, trigger characters, and content changes. It provides functions to convert between JSON values and the `t` type. These conversions are used to serialize and deserialize trigger events when handling signature help requests in an LSP implementation.",
      "description_length": 389,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.HoverRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring hover registration options in an LSP server. It includes fields for specifying which documents to apply the hover feature to and whether to report progress. The module provides functions to create instances, and serialize/deserialize them to and from JSON.",
      "description_length": 309,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in inlay hint requests, including the document range, text document identifier, and an optional progress token. It provides functions to construct instances, convert to and from JSON format using Yojson. This module is used to pass contextual information when requesting inlay hints in a language server protocol implementation.",
      "description_length": 385,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ImplementationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for implementation options in a language server protocol, specifically supporting work done progress tracking. It provides functions to create instances, serialize to JSON, and deserialize from JSON using the Yojson library. Concrete use cases include configuring and exchanging implementation request settings between a language server and client.",
      "description_length": 385,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ReferenceContext",
      "library": "linol.lsp",
      "description": "This module defines a reference context type with a single boolean field indicating whether to include declarations. It provides functions to construct the type, and to convert to and from JSON using the Yojson library. It is used to configure reference resolution behavior in a language server, particularly for filtering references to include or exclude declarations.",
      "description_length": 369,
      "index": 222,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionKind",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic variant type for representing different kinds of code actions, such as quick fixes, refactoring operations, and source organization. It includes functions for converting between the type and Yojson representations, enabling serialization and deserialization for use in JSON-based communication. Concrete use cases include categorizing and transmitting code action requests and responses in a language server protocol implementation.",
      "description_length": 466,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ExecutionSummary",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing the outcome of an execution step, with fields for order and success status. It provides functions to construct instances, convert to and from JSON using Yojson. Used to serialize and deserialize execution metadata for communication in a language server protocol.",
      "description_length": 312,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensEdit",
      "library": "linol.lsp",
      "description": "This module defines a record type for representing semantic token edits in a text document, with fields for the token data array, number of tokens to delete, and the starting position. It includes functions to create instances of this type and to serialize/deserialize them using Yojson. This module is used to efficiently update semantic token information in an LSP (Language Server Protocol) server without resending the entire token list.",
      "description_length": 441,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentChangeRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type for registration options related to text document change events, including a document selector and synchronization kind. It provides functions to create instances and serialize/deserialize them using Yojson. This is used to configure how text document changes are registered and synchronized in an LSP server.",
      "description_length": 336,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for configuring folding range capabilities in a language server. It includes types for specifying supported folding range kinds, collapsed text behavior, and server-side limitations. These capabilities are used to communicate client preferences for code folding features during language server initialization.",
      "description_length": 359,
      "index": 227,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyOutgoingCallsParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in handling outgoing call hierarchy requests in a language server. It includes fields for a call hierarchy item and optional tokens for tracking progress and work done, facilitating efficient client-server communication. The module provides functions to construct instances and serialize/deserialize them using Yojson for integration with JSON-based protocols.",
      "description_length": 417,
      "index": 228,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.PositionEncodingKind",
      "library": "linol.lsp",
      "description": "This module defines an enumerated type representing different character encodings for text positions, including UTF8, UTF16, UTF32, and a catch-all for other encodings. It provides functions to convert between this type and Yojson.Safe.t for serialization and deserialization. This is used to handle text encoding information in language server protocol messages, particularly when exchanging position data between client and server.",
      "description_length": 433,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentSyncRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing notebook document synchronization registration options, specifically used for enabling notebook support in language server protocol implementations. It provides functions to convert between JSON and the `t` type, facilitating communication between the client and server during notebook document setup. The module is used to register capabilities for handling notebook documents in an LSP-compliant editor.",
      "description_length": 449,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InitializeResult",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for handling the result of a language server initialization. It includes types for server capabilities and metadata like name and version, along with functions to construct and serialize these types. It is used to configure and report the features supported by a language server during the LSP handshake.",
      "description_length": 354,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchyRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring type hierarchy registration in a language server. It includes fields for specifying document selectors, a registration ID, and whether work done progress is supported. The module provides functions to create instances and serialize/deserialize them to and from JSON.",
      "description_length": 319,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentRangeFormattingRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type for document range formatting registration options in the context of the Language Server Protocol. It includes fields for specifying document selectors, range support, and work done progress. The module provides functions to create instances and convert to and from JSON representations, specifically using `Yojson.Safe.t`.",
      "description_length": 350,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for signature help features in a language server, including document selectors, trigger characters, and progress reporting. It supports data types like document selectors, string lists, and boolean flags. Concrete use cases include setting up signature help behavior for specific file types or languages in an IDE.",
      "description_length": 356,
      "index": 234,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DeleteFile",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing file deletion operations in the context of a language server protocol. It includes fields for a document URI, optional change annotation identifier, and deletion options, along with functions to construct and serialize/deserialize the structure. It is used to handle file deletion requests and responses in LSP communication.",
      "description_length": 379,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in semantic token requests, including optional progress tracking tokens and a text document identifier. It provides functions to construct instances, convert to and from JSON format. This module is used to handle requests for semantic token data in a language server, specifically associating requests with a specific text document and managing progress reporting.",
      "description_length": 421,
      "index": 236,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeKind",
      "library": "linol.lsp",
      "description": "This module defines a variant type `t` representing different kinds of folding ranges in source code, such as `Comment`, `Imports`, `Region`, and `Other` with a custom string. It includes functions to convert between this type and Yojson for serialization and deserialization. Use this type to categorize and transmit folding range information in a language server protocol implementation.",
      "description_length": 389,
      "index": 237,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CompletionContext",
      "library": "linol.lsp",
      "description": "This module defines a completion context with optional trigger character and trigger kind, used to convey how a completion request was initiated. It provides functions to construct the context, convert it to and from JSON, and works directly with `CompletionTriggerKind` and `Yojson.Safe.t` types. A concrete use case includes handling LSP completion requests triggered by specific characters like `.` or `(` in an editor.",
      "description_length": 422,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MonikerKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` with three variants (`Import`, `Export`, `Local`) to represent the kind of monikers in a codebase. It provides functions to convert between this type and Yojson for serialization and deserialization. This is used to handle moniker metadata in language server protocol communications.",
      "description_length": 314,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionOptions",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for configuring language server protocol (LSP) completion features. It includes types for completion options such as trigger characters, commit characters, and support for detailed completion labels. These structures are used to define how code completion behaves in an LSP server, such as specifying which characters trigger auto-completion or whether the server supports resolving additional item details.",
      "description_length": 457,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Substring.Uutf",
      "library": "linol.lsp",
      "description": "Handles UTF-8 decoding from a substring source, advancing a position offset. Works with `Linol_lsp.Substring.t` and `Uutf.decoder`, pushing decoded UTF-8 content into the decoder. Useful for incremental parsing of UTF-8 encoded text from a substring buffer, such as during language server protocol message processing.",
      "description_length": 317,
      "index": 241,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import.Int",
      "library": "linol.lsp",
      "description": "This module combines core integer operations\u2014such as arithmetic, bitwise manipulation, and comparison\u2014with an efficient integer-keyed map structure to support both low-level numeric processing and high-level associative data handling. It provides direct access to integer functions like division, shifts, and logical operations, while the map submodule enables immutable, performance-optimized storage and retrieval of values indexed by integers. Use cases span bitflag management, numeric range analysis, sparse arrays, and configuration systems where integers serve as compact, efficient keys. Together, the module and its child structure allow tasks such as transforming bit patterns, evaluating integer expressions, and maintaining dictionaries of integer-indexed data.",
      "description_length": 773,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents client capabilities for notebook document synchronization, including a field for synchronization settings. It provides functions to create instances of this type and to serialize/deserialize them using Yojson. This module is used to communicate notebook document capability information between a language server and client in the context of the LSP (Language Server Protocol).",
      "description_length": 423,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.HoverParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling hover request parameters in a language server protocol implementation. It includes fields for the cursor position, the text document identifier, and an optional progress token. The module provides functions to construct the hover parameters, and to serialize and deserialize them using Yojson for communication over JSON-based protocols.",
      "description_length": 387,
      "index": 244,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ApplyWorkspaceEditResult",
      "library": "linol.lsp",
      "description": "This module defines a result type for workspace edit operations, capturing whether the edit was applied, the index of a failed change if applicable, and an optional failure reason. It provides functions to construct instances and serialize/deserialize them using Yojson. Concrete use cases include reporting the outcome of batch file modifications in a language server.",
      "description_length": 369,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ShowMessageRequestClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and serialization functions for handling client capabilities related to message request responses in a language server protocol. It includes types for `messageActionItem` with an optional `additionalPropertiesSupport` flag, and a top-level type `t` that wraps an optional `messageActionItem`. The module is used to configure and exchange capability information between a language server and a client, specifically regarding support for message action items in show message requests.",
      "description_length": 518,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Definition",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents either a single location or a list of locations, using the `Location.t` type from the same namespace. It provides serialization and deserialization functions to and from Yojson for this type. This is used to handle definition responses in an LSP server, where a symbol may have a single definition or multiple definitions.",
      "description_length": 369,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensPartialResult",
      "library": "linol.lsp",
      "description": "This module defines a single data type `t` representing a partial result of semantic token processing, consisting of an integer array. It provides functions to construct instances, and to convert to and from JSON using the Yojson library. This type is used to efficiently transmit encoded semantic token data during language server protocol interactions.",
      "description_length": 354,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.LinkedEditingRangeRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring linked editing range registration in a language server. It includes fields for specifying the document selector, registration ID, and whether work done progress is supported. The module provides functions to create instances and serialize/deserialize them to and from JSON.",
      "description_length": 326,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentFormattingRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines options for registering document formatting capabilities in a language server. It includes fields for specifying which documents to format and whether to track progress. The module supports serialization to and from JSON for communication with the client.",
      "description_length": 275,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WillSaveTextDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing parameters for a will-save text document event, including the save reason and document identifier. It provides functions to construct instances, convert to and from JSON format using Yojson. This is used to handle pre-save notifications in a language server protocol implementation, where the client signals intent to save a document.",
      "description_length": 384,
      "index": 251,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Cli.Channel",
      "library": "linol.lsp",
      "description": "This module defines the communication channels used by the LSP server to accept client connections, supporting standard input/output, Unix domain sockets/Windows pipes, and TCP sockets. It provides constructors to specify the channel type and associated connection parameters. Concrete use cases include configuring the server to listen on a specific TCP port or connect via a named pipe for inter-process communication.",
      "description_length": 420,
      "index": 252,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchyOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring type hierarchy requests in a language server, specifically supporting an optional `workDoneProgress` flag. It provides functions to create instances, convert to and from JSON format using Yojson. It is used to specify whether progress reporting should be enabled during type hierarchy resolution in language server protocol interactions.",
      "description_length": 390,
      "index": 253,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentColorRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing options for registering document color providers in a language server, including optional document selectors, registration IDs, and progress tracking. It provides functions to construct instances, convert to and from JSON, enabling configuration and communication with client tools. Use cases include setting up color-related features in editors that support language server protocol extensions for dynamic color rendering.",
      "description_length": 467,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SymbolInformation",
      "library": "linol.lsp",
      "description": "This module defines a record type representing symbol information in a codebase, including name, kind, location, and optional metadata like container name, deprecation status, and tags. It provides a `create` function for constructing instances with optional fields and functions for converting to and from JSON using Yojson. It is used to represent symbols such as variables, functions, or types in language server protocol responses.",
      "description_length": 435,
      "index": 255,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentEdit",
      "library": "linol.lsp",
      "description": "This module represents a set of edits applied to a specific text document in the context of the Language Server Protocol. It includes operations to create a document edit structure with either plain or annotated text edits and supports serialization to and from JSON using Yojson. It is used to bundle changes with document identifiers for precise code modifications during editing sessions.",
      "description_length": 391,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentColorOptions",
      "library": "linol.lsp",
      "description": "This module defines a configuration type for document color operations with an optional `workDoneProgress` flag. It provides functions to create instances and convert to and from JSON format using Yojson. It is used to configure how document color requests report progress in a language server.",
      "description_length": 294,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type for inline completion registration options, including document selector, identifier, and work-done progress flag. It provides functions to create instances and convert to and from JSON format. Used to configure inline completion features in language server protocol implementations.",
      "description_length": 316,
      "index": 258,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a record type `t` that captures client capabilities for text document features in an LSP (Language Server Protocol) implementation. It includes boolean flags and configuration options for features like code actions, completion, hover, diagnostics, and document synchronization, each represented as optional sub-structures. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for use in LSP communication.",
      "description_length": 477,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Color",
      "library": "linol.lsp",
      "description": "This module defines a color representation with red, green, blue, and alpha components, each as integers. It provides functions to construct a color from component values and to serialize/deserialize colors using Yojson. It is used to handle color data in JSON-based communication, such as in language server protocol extensions requiring color values.",
      "description_length": 352,
      "index": 260,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentSaveRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines options for registering text document save events, including an optional document selector and a flag to include text content. It provides functions to create instances and convert to and from JSON format. Use this module to configure save event registration with specific document filtering and content inclusion preferences.",
      "description_length": 346,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Hover",
      "library": "linol.lsp",
      "description": "This module defines a type `t` for representing hover information in a language server protocol, including contents that can be markup, a marked string, or a list of marked strings, along with an optional range. It provides functions to construct a hover value, and to serialize and deserialize it using Yojson. It is used to generate rich hover content in IDEs, such as displaying documentation or type information at a specific location in the source code.",
      "description_length": 458,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.AnnotatedTextEdit",
      "library": "linol.lsp",
      "description": "This module defines a structured format for representing text edits with associated annotations, including the identifier for the annotation, the new text to insert, and the range in the document where the change applies. It provides functions to construct these edit records and serialize or deserialize them using Yojson. This is used to track and apply document modifications in an LSP server while associating changes with specific annotations.",
      "description_length": 448,
      "index": 263,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.PrepareSupportDefaultBehavior",
      "library": "linol.lsp",
      "description": "This module defines a single enumerated type `t` with a constructor `Identifier`, representing the default behavior for prepare support in a language server. It includes functions to convert values between the `t` type and Yojson.Safe.t for serialization and deserialization. This module is used to specify how identifiers should be handled during preparation steps in a language server protocol implementation.",
      "description_length": 411,
      "index": 264,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSymbolParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in document symbol requests, including optional progress tokens and a text document identifier. It provides functions to construct instances, convert to and from JSON, and handles data required for symbol processing in a text document. Concrete use cases include handling symbol requests in an LSP server, where document context and progress tracking are needed.",
      "description_length": 416,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensLegend",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing semantic token legends, specifically capturing token modifiers and types as string lists. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to serialize and deserialize token legend data for language server protocol interactions.",
      "description_length": 336,
      "index": 266,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.PublishDiagnosticsParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for publishing diagnostic information in a language server protocol context. It includes fields for a list of diagnostics, a document URI, and an optional version number. The module provides functions to construct the data structure, along with serialization and deserialization to and from JSON.",
      "description_length": 333,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a structure for aggregating diagnostic reports across multiple documents in a workspace. It includes functions to construct the report from a list of document-specific diagnostics and to serialize or deserialize the report using JSON. It is used to communicate batched diagnostic results in a language server protocol context.",
      "description_length": 346,
      "index": 268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentUri",
      "library": "linol.lsp",
      "description": "This module represents and manipulates document URIs in the context of the Language Server Protocol, handling conversions to and from JSON, path and string representations, and access to URI components such as query and fragment. It supports comparison, equality checks, and hashing for use in data structures requiring unique keys or ordering. The child module controls path formatting based on the operating system, using a mutable reference `win32` to determine whether to apply Windows-style path separators, ensuring correct URI path handling during cross-platform LSP operations. Together, they enable robust URI management across different environments, such as parsing a URI string into its components, normalizing paths for a specific OS, or embedding URIs in JSON messages for LSP communication.",
      "description_length": 805,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Uri0.Private",
      "library": "linol.lsp",
      "description": "Controls whether URIs are processed using Windows-style paths. It works with string-based URIs and path representations. This module is used to handle cross-platform URI conversions in LSP (Language Server Protocol) implementations.",
      "description_length": 232,
      "index": 270,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentDiagnosticReportKind",
      "library": "linol.lsp",
      "description": "This module defines a type `t` with two variants, `Full` and `Unchanged`, representing possible diagnostic report kinds for a document. It includes functions to convert values of this type to and from Yojson representations, enabling JSON serialization and deserialization. This module is used when handling document diagnostics in a language server, specifically to indicate whether a full report is needed or if the diagnostics remain unchanged.",
      "description_length": 447,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ReferenceRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring reference registration in a language server. It includes fields for specifying document selectors and enabling work-done progress tracking. The module provides functions to create instances and serialize or deserialize them using Yojson.",
      "description_length": 290,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlightClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for document highlighting in a language server protocol. It includes functions to create instances, serialize to and from JSON using Yojson. It is used to configure whether dynamic registration of document highlight capabilities is supported by the client.",
      "description_length": 320,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Unregistration",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing unregistration requests in a language server protocol. It includes functions to create an unregistration record with a unique identifier and method name, and to serialize or deserialize these records using Yojson. Concrete use cases include managing client unregistrations during LSP session teardown or dynamic capability updates.",
      "description_length": 385,
      "index": 274,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type for configuring diagnostic behavior in a language server, including options for dependency tracking, progress reporting, and workspace diagnostics. It provides functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include initializing server diagnostics settings and serializing them for transport or storage.",
      "description_length": 388,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension.DebugTextDocumentGet",
      "library": "linol.lsp",
      "description": "This module handles text document debugging in an LSP server by retrieving content based on document identifiers and positions. It defines parameter types for specifying documents and locations, and a result type that wraps optional string debug output with JSON serialization. Operations allow precise fetching of document content at given positions, enabling custom debug endpoints that return contextual information. For example, it can retrieve a document's content at a specific line and column to assist in debugging language server extensions.",
      "description_length": 550,
      "index": 276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlightOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for document highlight operations, specifically supporting progress reporting through the `workDoneProgress` flag. It works with boolean values to control optional behavior in document highlight requests. Concrete use cases include enabling or disabling progress tracking during document analysis in language server implementations.",
      "description_length": 374,
      "index": 277,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ExecuteCommandClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for executing commands in a language server, specifically including an optional `dynamicRegistration` boolean. It provides functions to create instances of this type, and to convert to and from JSON using the Yojson library. This is used to configure and communicate command execution capabilities between a language server and its client.",
      "description_length": 403,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CancelParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for a cancellation request, containing a single identifier field. It provides functions to construct a cancellation parameter instance, convert it to and from JSON format using Yojson. It is used to handle cancellation requests in a language server protocol implementation, where a client sends a cancellation request for a previously initiated operation.",
      "description_length": 410,
      "index": 279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for inline completion options with a single field indicating whether work done progress is enabled. It provides functions to create instances, serialize to, and deserialize from JSON. It is used to configure inline completion behavior in language server protocol implementations.",
      "description_length": 316,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InitializedParams_",
      "library": "linol.lsp",
      "description": "This module defines data structures and serialization functions for handling initialization parameters in an LSP server. It includes types for client information and top-level initialization data, supporting optional fields like capabilities, root URI, and trace settings. The module is used to parse and construct initialization requests during the LSP handshake, enabling configuration based on client-provided JSON.",
      "description_length": 418,
      "index": 281,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Linol_lsp.Types.ColorPresentationParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in color presentation requests, including color, document identifier, range, and optional progress tokens. It provides functions to construct instances, convert to and from JSON using Yojson. This module is used to handle color formatting and presentation in a text document within an LSP server.",
      "description_length": 350,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ColorPresentation",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing color presentation information, including optional text edits and a label. It provides functions to construct instances, convert to and from JSON, and manage additional text edits. It is used to specify how colors should be displayed and modified in code editors supporting the LSP protocol.",
      "description_length": 335,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeDescription",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing code descriptions with a document URI. It includes functions to create instances and convert to and from JSON format using Yojson. It is used to associate code references with their source locations in language server protocol implementations.",
      "description_length": 297,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for semantic token registration in a language server. It includes functions to create and manipulate registration settings such as full token reporting, document selector, token legend, and range support. It is used to specify how semantic tokens should be provided and formatted during language server initialization.",
      "description_length": 360,
      "index": 285,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DidOpenTextDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that wraps a `TextDocumentItem` to represent parameters for a text document open event. It includes functions to construct the type, and to convert it to and from JSON using the `Yojson` library. It is used to handle document open notifications in a language server protocol implementation.",
      "description_length": 321,
      "index": 286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing workspace-related client capabilities in an LSP (Language Server Protocol) implementation. It includes boolean flags and nested capability structures for features like code lens, diagnostics, configuration changes, file operations, and workspace edits. The module provides functions to construct instances and convert to and from JSON format, enabling serialization and deserialization for communication between client and server.",
      "description_length": 480,
      "index": 287,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SymbolKind",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing different kinds of symbols in a programming context, such as `Class`, `Function`, `Variable`, and `Enum`. It includes functions to convert between the symbol kind type and Yojson representations for serialization and deserialization. It is used to communicate symbol information in language server protocol implementations, particularly for representing the type of symbols in code analysis and navigation features.",
      "description_length": 463,
      "index": 288,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.MonikerParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in moniker-related operations within a language server protocol. It includes fields for tracking progress and identifying text documents and positions. The module supports creating instances with optional progress tokens and converting to and from JSON representations.",
      "description_length": 323,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeLensRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring code lens registration options in the context of the Language Server Protocol. It includes fields for specifying document selectors, enabling resolution of code lenses, and supporting work done progress notifications. The module provides functions to construct instances of this configuration and to serialize or deserialize them using Yojson for use in LSP communication.",
      "description_length": 425,
      "index": 290,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentOnTypeFormattingRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type and operations for specifying document formatting registration options in an LSP server. It includes fields for document selection, a primary trigger character, and optional additional trigger characters, supporting dynamic formatting based on user input. The module provides functions to construct instances, and serialize/deserialize them to and from JSON, enabling integration with LSP protocol messages.",
      "description_length": 441,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing parameters for work done progress in the LSP protocol, specifically containing an optional `ProgressToken`. It provides functions to create instances, convert to and from JSON using Yojson, enabling seamless integration with LSP client-server communication. Use cases include tracking progress of long-running operations like code analysis or file indexing in language servers.",
      "description_length": 421,
      "index": 292,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DeclarationRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing options for registering declaration capabilities in a language server, including optional document selector, registration ID, and work done progress flag. It provides functions to construct instances, convert to and from JSON, enabling configuration of declaration-related features in LSP clients or servers. Use cases include setting up language server extensions that support declaration navigation with customizable document filtering and progress reporting.",
      "description_length": 505,
      "index": 293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyPrepareParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used to prepare a call hierarchy request in a language server. It includes the position in a text document and an optional progress token for tracking work. The structure is used to serialize and deserialize JSON data for communication between a client and a language server during call hierarchy operations.",
      "description_length": 360,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineCompletionList",
      "library": "linol.lsp",
      "description": "This module defines a structure for managing a list of inline completion items, primarily used in language server protocol implementations. It supports creating lists from item collections and serializing or deserializing these lists using Yojson. A typical use case involves handling code completion suggestions sent from a language server to a client editor.",
      "description_length": 360,
      "index": 295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentContentChangeEvent",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing text document content change events, with optional `range` and `rangeLength` fields and a required `text` field. It provides functions to construct instances, and to convert to and from JSON using the `Yojson` library. It is used to model incremental text changes in a document, such as those sent by an LSP client during editing.",
      "description_length": 374,
      "index": 296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensOptions",
      "library": "linol.lsp",
      "description": "This module defines and constructs semantic token options for configuring how token information is provided in a language server. It supports creating configurations with optional full, range, and work progress flags, along with a required token legend that defines token types and modifiers. It is used to specify how semantic highlighting data should be generated and delivered to clients in an LSP-compliant language server.",
      "description_length": 427,
      "index": 297,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CompletionClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and creation functions for specifying client capabilities related to code completion in a language server protocol. It handles nested types like `completionItem`, `completionItemKind`, and `completionList`, each capturing specific feature support such as snippet insertion, documentation formatting, and dynamic registration. These types are used to configure and negotiate completion features between a language client and server during protocol handshake.",
      "description_length": 493,
      "index": 298,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlightKind",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing different kinds of document highlights, such as text, read, and write occurrences. It includes functions to convert values of type `t` to and from Yojson for serialization and deserialization. This module is used to communicate document highlight kinds between the language server and clients in a JSON-based protocol.",
      "description_length": 374,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FailureHandlingKind",
      "library": "linol.lsp",
      "description": "This module defines a variant type `t` representing different strategies for handling failures in language server operations, such as aborting, applying transactional changes, or undoing previous actions. It includes functions to convert values of this type to and from Yojson for serialization and deserialization. These capabilities are essential for communicating failure handling preferences between a language server and a client, such as an editor or IDE, during operations like code edits or refactorings.",
      "description_length": 512,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.String_zipper.Private",
      "library": "linol.lsp",
      "description": "This module implements a zipper structure for navigating and modifying lists of substrings, maintaining positional context within a line. It provides operations to move the focus left or right through substring segments, tracking absolute and relative positions. Useful for text editing operations where localized changes are made within a structured document representation.",
      "description_length": 375,
      "index": 301,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintLabelPart",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing parts of an inlay hint label in a language server protocol implementation. It includes fields for an optional command, location, tooltip (as either a string or markup content), and a required string value. The module provides functions to construct instances, and to convert to and from JSON format for serialization and deserialization.",
      "description_length": 391,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MarkdownClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for specifying client capabilities related to Markdown rendering in a language server protocol. It includes fields for allowed HTML tags, the Markdown parser name, and the parser version, with functions to construct instances and serialize them to and from JSON. It is used to configure how Markdown content is processed and displayed in client applications.",
      "description_length": 395,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MarkupContent",
      "library": "linol.lsp",
      "description": "This module defines a structured type for representing markup content with a specified kind and string value. It provides functions to construct instances, convert to and from JSON using Yojson, and supports working with formatted documentation or rich text in language server protocol interactions. Concrete use cases include handling hover documentation, completion item details, and diagnostic messages in an LSP server.",
      "description_length": 423,
      "index": 304,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkDoneProgressOptions",
      "library": "linol.lsp",
      "description": "This module defines a configuration type for enabling work done progress tracking in LSP (Language Server Protocol) communications. It includes functions to create an options record with an optional boolean flag and to serialize or deserialize the configuration to and from JSON format using Yojson. It is used to manage progress reporting in LSP server responses.",
      "description_length": 364,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.PreviousResultId",
      "library": "linol.lsp",
      "description": "This module defines a data structure for tracking previous result identifiers associated with documents. It includes functions to construct instances, and serialize or deserialize them using JSON. It is used to maintain and transfer result state between document versions in language server operations.",
      "description_length": 302,
      "index": 306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ShowDocumentResult",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing the result of a document display operation, specifically tracking whether the operation succeeded. It includes functions to construct the result, convert it to and from JSON format using Yojson, and ensures compatibility with external systems expecting boolean success indicators. Concrete use cases include reporting the outcome of document rendering in an LSP server or handling responses in automated testing frameworks.",
      "description_length": 477,
      "index": 307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InitializeError",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing errors during initialization, with a single field indicating whether the client should retry. It provides functions to construct values of this type and to serialize and deserialize them using Yojson. This is used to handle and communicate initialization failures in a language server protocol implementation.",
      "description_length": 353,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchyPrepareParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used to prepare type hierarchy requests in a language server protocol. It includes fields for the cursor position, text document identifier, and an optional progress token, with functions to construct and serialize the structure. It is used to initiate type hierarchy operations in LSP clients or servers, such as handling \"Go to Type Hierarchy\" user actions.",
      "description_length": 411,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DeclarationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling declaration options in a language server protocol implementation. It includes a field to indicate whether work done progress is supported, along with functions to construct the structure and serialize or deserialize it using Yojson. It is used to configure and communicate capabilities related to symbol declarations between a language server and client.",
      "description_length": 404,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationOptions",
      "library": "linol.lsp",
      "description": "This module defines a record type for configuring file operation notifications in an LSP server, with optional fields for handling file creation, deletion, and renaming events. It provides functions to construct instances with specific event handlers and to serialize/deserialize the configuration to and from JSON. Concrete use cases include setting up file event monitoring in an editor or IDE, such as triggering actions when files are renamed or deleted.",
      "description_length": 458,
      "index": 311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueContext",
      "library": "linol.lsp",
      "description": "This module defines a record type for capturing the context of inline value evaluation during debugging, specifically associating a stack frame ID with a source code range where execution is paused. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to pass inline value evaluation contexts between a debugger and an editor in an LSP (Language Server Protocol) implementation.",
      "description_length": 427,
      "index": 312,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentSaveReason",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing the possible reasons a text document was saved, including manual user action, automatic saving after a delay, and saving when the editor loses focus. It provides bidirectional conversion functions between this type and `Yojson.Safe.t` for serialization and deserialization. This module is used to handle and transmit text document save events in a language server protocol context.",
      "description_length": 437,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ConfigurationItem",
      "library": "linol.lsp",
      "description": "This module defines a configuration item structure with optional scope URI and section fields, primarily used for representing configuration requests in a language server protocol. It provides functions to create instances and serialize or deserialize them using Yojson. A typical use case involves parsing or generating JSON messages for configuration queries tied to specific documents or sections.",
      "description_length": 400,
      "index": 314,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeWorkspaceFoldersParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that wraps a `WorkspaceFoldersChangeEvent.t` to represent changes to workspace folders in the language server protocol. It provides functions to construct instances, convert to and from JSON using Yojson, and manage folder change events. It is used to handle dynamic updates to workspace folder configurations during LSP session.",
      "description_length": 360,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticSeverity",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing diagnostic severity levels, including error, warning, information, and hint. It provides functions to convert between the variant type and Yojson.Safe.t for serialization and deserialization. This is used to handle diagnostic messages in a language server protocol implementation, where severity levels must be communicated in JSON format.",
      "description_length": 387,
      "index": 316,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.HoverClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines client capabilities for hover features in the LSP protocol, specifically supporting content formatting with markup kinds and dynamic registration. It works with optional lists of markup kinds and boolean flags. Use cases include configuring hover behavior in language servers and serializing capabilities to and from JSON for communication.",
      "description_length": 360,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionTriggerKind",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing the different kinds of triggers for completion requests in a language server protocol. It includes three variants: `Invoked` for manual triggers, `TriggerCharacter` for automatic triggers via specific characters, and `TriggerForIncompleteCompletions` for resuming partial completions. The module provides bidirectional conversion functions between this type and Yojson for serialization and deserialization during LSP communication.",
      "description_length": 488,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RenameParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for holding parameters required to perform a rename operation in a text document. It includes fields for the new name, position of the rename, document identifier, and an optional progress token. The module provides functions to construct the structure, and serialize/deserialize it to and from JSON format.",
      "description_length": 344,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionItemLabelDetails",
      "library": "linol.lsp",
      "description": "This module defines a type `t` for holding optional description and detail strings associated with a completion item label. It provides functions to construct instances of this type and to serialize and deserialize them using Yojson. It is used to enrich code completion suggestions in an LSP server with additional contextual information.",
      "description_length": 339,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyOutgoingCall",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing outgoing calls in a call hierarchy, containing a list of source ranges and a target call hierarchy item. It provides functions to construct instances, convert to and from JSON using Yojson. Used to serialize and deserialize call hierarchy data for language server protocol interactions.",
      "description_length": 330,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ImplementationClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for capturing client capabilities related to implementation support in a language server. It includes fields for dynamic registration and link support, both optional boolean values. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 325,
      "index": 322,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentSymbolRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for registering document symbol capabilities in a language server. It includes fields for specifying which documents to apply the capability to, an optional label for the capability, and whether to support progress reporting. The module provides functions to construct these options and serialize or deserialize them using Yojson.",
      "description_length": 372,
      "index": 323,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeConfigurationParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents the parameters for a configuration change event, containing a single field `settings` of type `Json.t`. It provides functions to construct a `t` value, convert it to and from Yojson format. This module is used to handle dynamic configuration updates in a language server, where client-provided JSON settings are parsed and stored in a structured form for runtime use.",
      "description_length": 414,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.OptionalVersionedTextDocumentIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a text document identifier with an optional version number, used to track documents in a language server protocol context. It provides functions to construct instances, convert to and from JSON using Yojson, and handle document identifiers with or without versioning. Concrete use cases include managing document state in a language server where clients may or may not provide version numbers.",
      "description_length": 437,
      "index": 325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Import.Result",
      "library": "linol.lsp",
      "description": "This module provides tools for working with result values, which represent either success (`Ok`) or failure (`Error`). It supports transformations, error handling, and conversion to other types, with functions like `map`, `bind`, `default`, and `to_option`. The included `Let` submodule adds syntactic convenience for chaining operations using `(let+)`, allowing direct manipulation of successful values while automatically propagating errors. For example, you can parse a file's contents into a value, transform it with `(let+)`, and handle missing files or invalid data without explicit match expressions.",
      "description_length": 607,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SymbolTag",
      "library": "linol.lsp",
      "description": "This module defines a single type `t` representing symbol tags, currently only `Deprecated`. It includes functions to convert values between this type and Yojson for serialization and deserialization. This is used to handle metadata about symbols in the context of language server protocol messages, specifically indicating deprecated symbols.",
      "description_length": 343,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeLensWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing workspace client capabilities related to code lens refresh support. It provides functions to create instances, serialize to and from JSON, and manage optional `refreshSupport` configuration. It is used to communicate client-side code lens capabilities in a language server protocol implementation.",
      "description_length": 347,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.StaticRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for static registration options with an optional string identifier. It provides functions to create instances, serialize to, and deserialize from JSON format. It is used to manage registration metadata in language server protocol implementations where optional identifiers are needed for tracking or configuration purposes.",
      "description_length": 360,
      "index": 329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Io.Make",
      "library": "linol.lsp",
      "description": "Implements reading and writing JSON-RPC packets over input/output channels. Uses `Chan.input` and `Chan.output` to handle packet transmission and reception. Enables communication with language servers using the JSON-RPC protocol over standard IO streams.",
      "description_length": 254,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticServerCancellationData",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling diagnostic server cancellation requests in the context of the LSP (Language Server Protocol). It includes functions to construct the data, convert to and from JSON, and manage the `retriggerRequest` flag. It is used to communicate whether a diagnostic request should be retriggered after cancellation.",
      "description_length": 351,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and functions for representing and manipulating semantic token capabilities in a language server protocol. It includes types for full and range-based token requests, token formats, and modifiers, along with creation functions to build these structures. It is used to specify client support for semantic token features such as dynamic registration, multiline tokens, and server-side cancellation.",
      "description_length": 431,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentLinkClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to document links in a language server protocol. It includes functions to construct instances with optional dynamic registration and tooltip support, and to serialize or deserialize these instances using Yojson. Concrete use cases include configuring and exchanging client capabilities during language server initialization.",
      "description_length": 406,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing client capabilities related to diagnostic workspace features, specifically supporting an optional `refreshSupport` boolean. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This structure is used to communicate client capabilities during the initialization phase of a language server protocol session.",
      "description_length": 401,
      "index": 334,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.RenameFile",
      "library": "linol.lsp",
      "description": "This module defines a record type for representing file rename operations in the context of language server protocol messaging. It includes functions to construct instances with optional annotations and conversion to and from JSON format. It is used to encapsulate the details of a file rename event, such as the old and new URIs and rename options, for transmission or processing.",
      "description_length": 381,
      "index": 335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidCloseTextDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a type and conversion functions for handling text document close events in an LSP server. It works with the `TextDocumentIdentifier` type to represent the document being closed and supports JSON serialization and deserialization via `Yojson`. It is used to process `textDocument/didClose` notifications in LSP communication.",
      "description_length": 344,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.PublishDiagnosticsClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and serialization functions for representing client capabilities related to diagnostic publishing in a language server protocol. It includes a `tagSupport` type for specifying supported diagnostic tags and a `t` type that captures optional capabilities like code descriptions, data support, and versioning. These types are used to configure how diagnostic information is handled and communicated between the client and server.",
      "description_length": 462,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SignatureInformation",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing signature information in a language server protocol, including fields for the active parameter index, documentation, label, and parameters. It provides functions to construct instances, convert to and from JSON using Yojson. Used to represent function or method signatures in code completion and hover documentation features.",
      "description_length": 369,
      "index": 338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticRelatedInformation",
      "library": "linol.lsp",
      "description": "This module defines a type for diagnostic-related information, including a location and a message. It provides functions to create instances, convert from JSON, and serialize to JSON. It is used to associate diagnostic messages with specific source code locations during language server operations.",
      "description_length": 298,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines data structures and serialization functions for inlay hint client capabilities in a language server protocol. It includes types for resolution support with property lists and a main type supporting dynamic registration and resolution features. Use these types to configure and exchange inlay hint capabilities between a language client and server.",
      "description_length": 367,
      "index": 340,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokens",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing semantic token data in a text document, including an array of integer-encoded token information and an optional result identifier. It provides functions to construct instances, convert to and from JSON format using Yojson, and is used to encode syntax highlighting or semantic analysis results for transmission in a language server protocol. The module directly supports efficient serialization and deserialization of token data for use in LSP responses.",
      "description_length": 508,
      "index": 341,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentRangesFormattingParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in document range formatting operations, including formatting options, target ranges, text document identifier, and an optional progress token. It provides functions to construct instances, convert from JSON, and serialize to JSON. This module is used to handle batched code formatting requests across specific ranges in a text document during language server interactions.",
      "description_length": 427,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.UnregistrationParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling a list of unregistration requests in the context of the Language Server Protocol (LSP). It includes functions to construct the structure, serialize it to JSON, and deserialize it from JSON. It is used to manage multiple unregistration operations when a client unsubscribes from LSP notifications.",
      "description_length": 346,
      "index": 343,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceSymbolRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines workspace symbol registration options for LSP (Language Server Protocol) servers. It includes fields to enable symbol resolution and progress reporting during workspace symbol requests. It is used to configure how a language server handles symbol queries and background processing in IDEs like VS Code.",
      "description_length": 322,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SelectionRangeRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines a type and functions for configuring selection range registration options in a language server. It includes fields for specifying a document selector, an identifier, and whether work done progress is supported. The module provides functions to create instances and convert to and from JSON format.",
      "description_length": 317,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CallHierarchyItem",
      "library": "linol.lsp",
      "description": "This module defines a record type representing an item in a call hierarchy, including fields such as name, kind, range, and URI, and provides functions to construct and serialize these items. It works with structured data types like JSON, ranges, document URIs, and symbol kinds, primarily used in language server protocol implementations. The module is useful for building and manipulating call hierarchy responses in an LSP server, enabling features like \"Find All References\" or \"Call Hierarchy\" in editors.",
      "description_length": 510,
      "index": 346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DefinitionParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for parameters used in a language server protocol request, specifically for definition queries. It includes fields for tracking progress and identifying the document and position being queried. The module provides functions to construct instances, and serialize or deserialize them using Yojson.",
      "description_length": 329,
      "index": 347,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for diagnostics in a language server protocol, with optional fields for dynamic registration, markup message support, and related document support. It provides functions to construct values of this type and to serialize and deserialize them using Yojson. Concrete use cases include configuring diagnostic behavior in a language server client and exchanging capability information during protocol initialization.",
      "description_length": 475,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceFullDocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a workspace diagnostic report structure containing a list of diagnostics, a document URI, and optional result ID and version. It provides functions to construct the report, convert it to and from JSON format. It is used to represent and serialize full-document diagnostic results for a specific file in a workspace.",
      "description_length": 335,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlightRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for document highlight registration in a language server. It includes fields for specifying which documents to target and whether to enable progress reporting. The module provides functions to construct these options and serialize or deserialize them using Yojson.",
      "description_length": 306,
      "index": 350,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SaveOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for save options in a language server protocol implementation. It includes a field to specify whether text content should be included during save operations. The module provides functions to construct the structure, and to convert it to and from JSON format for serialization and deserialization.",
      "description_length": 333,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Cli.Arg",
      "library": "linol.lsp",
      "description": "This module parses standard LSP server command line arguments into a structured format using `Stdlib.Arg`. It supports retrieving the communication channel and client process ID from the parsed arguments. The primary data type is a record (`t`) that holds the parsed values, and it provides functions to extract specific fields like the channel and client PID. Use cases include initializing an LSP server with command line parameters and validating required arguments before server startup.",
      "description_length": 491,
      "index": 352,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SelectionRangeClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for selection range features, specifically supporting dynamic registration. It provides functions to create instances, and to convert to and from JSON using Yojson. This module is used to configure language server protocol clients by specifying whether they can dynamically register selection range capabilities during initialization.",
      "description_length": 398,
      "index": 353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Position",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing positions in a text document using line and character offsets. It provides functions to construct position values and to serialize and deserialize them using Yojson. Concrete use cases include tracking cursor locations or text ranges in an editor implementing language server protocol features.",
      "description_length": 348,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentDiagnosticReport",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic type `t` representing either a full or unchanged document diagnostic report, using variant constructors. It provides bidirectional serialization functions between this type and Yojson.Safe.t for parsing and generating JSON data. This module is used to handle diagnostic reporting in a language server protocol context, specifically for distinguishing between changed and unchanged document states.",
      "description_length": 431,
      "index": 355,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DeleteFileOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for specifying options when deleting files, including whether to ignore non-existent files and whether to delete recursively. It provides functions to create instances of these options and to serialize and deserialize them using Yojson. Concrete use cases include configuring file deletion behavior in a language server or handling file operations in a JSON-based configuration system.",
      "description_length": 422,
      "index": 356,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Registration",
      "library": "linol.lsp",
      "description": "This module defines a registration structure with an identifier, method name, and optional JSON registration options. It provides functions to create instances and serialize/deserialize them using Yojson. It is used to manage registration data for language server protocol extensions.",
      "description_length": 284,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidSaveTextDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling text document save events in an LSP server. It includes fields for the saved text content and the associated document identifier, along with functions to construct the structure, and serialize/deserialize it to and from JSON. It is used to capture and transmit document state changes during editing sessions in an IDE or code editor.",
      "description_length": 383,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.LinkedEditingRangeParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in linked editing range requests, including position, text document identifier, and an optional progress token. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to support features like synchronized editing across multiple locations in a document.",
      "description_length": 357,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceFoldersServerCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing server capabilities related to workspace folders in a language server protocol. It includes fields for indicating whether workspace folder changes are supported and how change notifications are configured, either as a boolean or a string identifier. The module provides functions to construct instances, and serialize or deserialize them using Yojson for use in LSP communication.",
      "description_length": 434,
      "index": 360,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SelectionRangeParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling parameters related to selection range requests in a language server. It includes fields for tracking progress, specifying positions in a text document, and identifying the document itself. It is used to serialize and deserialize selection range data to and from JSON, facilitating communication between the language server and client.",
      "description_length": 384,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in requesting folding ranges within a text document. It includes fields for progress tracking and document identification, supporting efficient handling of large documents. The module provides functions to construct instances and serialize/deserialize them to and from JSON.",
      "description_length": 331,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeNotebookDocumentParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing parameters for a notebook document change event, containing a change description and a versioned notebook document identifier. It provides functions to construct instances, convert from JSON, and serialize to JSON. This module is used to handle updates to notebook documents in an LSP server, ensuring changes are correctly associated with the document's version.",
      "description_length": 413,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FileDelete",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing file deletion operations in the context of the Language Server Protocol (LSP). It includes functions to construct a deletion record from a URI, and to serialize and deserialize these records using Yojson. It is used to handle file deletion events during LSP communication, such as when a file is removed from a project.",
      "description_length": 373,
      "index": 364,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.ExecuteCommandParams",
      "library": "linol.lsp",
      "description": "This module defines a type for parameters used to execute a command, including optional arguments, a command string, and an optional progress token. It provides functions to construct these parameters, convert them to and from JSON format. It is used to handle command execution requests in a language server protocol implementation.",
      "description_length": 333,
      "index": 365,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceSymbolParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling workspace symbol parameters in an LSP (Language Server Protocol) implementation. It includes fields for a query string and optional progress tokens, with functions to construct the structure and serialize/deserialize it using Yojson. It is used to support workspace symbol requests that include progress tracking.",
      "description_length": 363,
      "index": 366,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintKind",
      "library": "linol.lsp",
      "description": "This module defines an enumeration type `t` with two variants, `Type` and `Parameter`, representing categories of inlay hints in a language server protocol. It provides functions `t_of_yojson` and `yojson_of_t` for converting values of this type to and from Yojson representations. This enables serialization and deserialization of inlay hint kinds for use in LSP communication.",
      "description_length": 378,
      "index": 367,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.WorkspaceDiagnosticReportPartialResult",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents a partial result of workspace diagnostic reports, containing a list of workspace document diagnostic reports. It provides functions to create instances of this type, convert from and to JSON using Yojson. This module is used to handle incremental diagnostic updates in a language server protocol implementation, where diagnostics are reported per document as part of workspace-wide analysis.",
      "description_length": 438,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueEvaluatableExpression",
      "library": "linol.lsp",
      "description": "This module defines a type for representing inline value evaluatable expressions, including an optional expression string and a range. It provides functions to create instances, convert from JSON, and serialize to JSON. Useful for handling inline evaluation data in language server protocol responses, particularly during debugging scenarios.",
      "description_length": 342,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.TypeHierarchySubtypesParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in type hierarchy subtype queries, including a type hierarchy item and optional progress tokens. It provides functions to construct instances and serialize/deserialize them using Yojson. This structure is used to track partial results and work progress during type hierarchy resolution in language server protocol implementations.",
      "description_length": 387,
      "index": 370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionItem",
      "library": "linol.lsp",
      "description": "This module defines a `CompletionItem` record with optional fields for rich auto-completion features in an LSP server, including text edits, documentation, and metadata. It provides functions to construct completion items and serialize them to and from JSON. Concrete use cases include generating suggestions in code editors with support for insert modes, deprecation flags, and formatted documentation.",
      "description_length": 403,
      "index": 371,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.NotebookCellArrayChange",
      "library": "linol.lsp",
      "description": "This module represents changes to a notebook cell array, capturing the cells affected, the number of deletions, and the starting index. It provides functions to construct such change records, and to serialize and deserialize them using Yojson. It is used to track incremental modifications to notebook content in a structured format.",
      "description_length": 333,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueVariableLookup",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing inline value variable lookups, including whether the lookup is case-sensitive, the range of the lookup, and an optional variable name. It provides functions to create instances of this structure, along with serialization and deserialization to and from JSON using Yojson. It is used to convey variable lookup information in language server protocol responses, specifically for inline value evaluation features in an editor or IDE.",
      "description_length": 484,
      "index": 373,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.InlayHintWorkspaceClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing workspace client capabilities related to inlay hints in an LSP (Language Server Protocol) implementation. It includes a single field `refreshSupport` indicating whether the client supports refreshing inlay hints, and provides functions to construct, serialize, and deserialize this structure. It is used to configure and communicate client capabilities during LSP initialization.",
      "description_length": 429,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ColorInformation",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing color information with an associated range in text. It provides functions to construct instances, serialize to, and deserialize from JSON. It is used to convey details about colors in a document, such as their position and value, for features like color highlighting in editors.",
      "description_length": 328,
      "index": 375,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DiagnosticTag",
      "library": "linol.lsp",
      "description": "This module defines a variant type `t` with two constructors, `Unnecessary` and `Deprecated`, representing diagnostic tags for code analysis. It includes functions to convert values of type `t` to and from Yojson.Safe.t, enabling JSON serialization and deserialization. These tags are used to annotate diagnostics in a language server protocol implementation, indicating issues like unused code or outdated constructs.",
      "description_length": 418,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ProgressParams",
      "library": "linol.lsp",
      "description": "This module defines a parameter structure for progress reporting, consisting of a token and a value. It provides functions to create instances, convert from JSON using a custom parser, and serialize to JSON using a provided formatter. It is used to handle progress updates in JSON-RPC communication where structured progress tokens and associated values must be exchanged.",
      "description_length": 372,
      "index": 377,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.CodeLensParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in code lens requests, including tokens for progress tracking and a text document identifier. It provides functions to construct instances, convert to and from JSON format. It is used to manage contextual information during code lens operations in a language server.",
      "description_length": 323,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueText",
      "library": "linol.lsp",
      "description": "This module defines a data structure representing inline value text annotations in source code, consisting of a text range and associated string content. It provides functions to construct these annotations, along with serialization and deserialization to and from JSON format using Yojson. Concrete use cases include attaching inline values to expressions in a language server for debugging or evaluation display.",
      "description_length": 414,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.GeneralClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines client capabilities for a language server, including support for stale requests with cancellation and retry policies, optional markdown rendering, position encodings, and regular expression handling. It works with optional and list-wrapped types to represent configurable features. Concrete use cases include parsing and serializing client capability settings from JSON during LSP initialization and managing request retry behavior based on content modification.",
      "description_length": 482,
      "index": 380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DefinitionClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to definition handling in a language server protocol. It includes fields for dynamic registration and link support, both optional boolean values. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 334,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokensDeltaParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for handling semantic token delta parameters in the context of the Language Server Protocol. It includes fields for tracking progress tokens, referencing previous results by ID, and identifying text documents. The module supports serialization to and from JSON, enabling efficient communication between client and server during incremental updates of semantic tokens.",
      "description_length": 404,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DeclarationParams",
      "library": "linol.lsp",
      "description": "This module defines a record type for handling declaration parameters in an LSP (Language Server Protocol) context, including position, text document identifier, and optional progress tokens. It provides functions to construct instances, convert to and from JSON using Yojson. Concrete use cases include parsing and serializing LSP requests for features like \"Go to Declaration\" in IDEs.",
      "description_length": 387,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentFormattingClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for document formatting in the context of the Language Server Protocol (LSP). It includes a function `create` to construct instances with optional dynamic registration support, along with serialization and deserialization functions for JSON communication. It is used to configure and exchange document formatting capabilities between a language client and server.",
      "description_length": 427,
      "index": 384,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.FileOperationClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for file operations in a language server protocol, with boolean options indicating support for specific events like file creation, deletion, and renaming. It provides functions to construct instances of this type and to serialize and deserialize them using Yojson. The module is used to configure and communicate client-side file operation event handling capabilities during language server initialization.",
      "description_length": 470,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentHighlight",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing document highlights in a text editor, including a range and an optional highlight kind. It provides functions to construct highlights, convert them to and from JSON format using Yojson. It is used to serialize and deserialize highlight information for features like symbol highlighting in an LSP server.",
      "description_length": 357,
      "index": 386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.SemanticTokenModifiers",
      "library": "linol.lsp",
      "description": "This module defines a set of semantic token modifiers used to annotate symbols in source code with specific attributes such as `Declaration`, `Definition`, `Readonly`, and `Deprecated`. It provides bidirectional conversion between these modifiers and Yojson representations for serialization and deserialization. These annotations are used in language server implementations to convey symbol properties to editors supporting semantic highlighting.",
      "description_length": 447,
      "index": 387,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.Moniker",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing a moniker with fields for an identifier, kind, scheme, and uniqueness level. It provides functions to create monikers, and to convert them to and from JSON format using Yojson. It is used to uniquely identify symbols or entities within a programming context, particularly when handling cross-references or symbol resolution in a language server.",
      "description_length": 389,
      "index": 388,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.FileSystemWatcher",
      "library": "linol.lsp",
      "description": "This module defines a file system watcher configuration with a glob pattern and an optional watch kind. It provides functions to create a watcher and serialize or deserialize it using Yojson. Concrete use cases include setting up file monitoring rules for an LSP server based on pattern matching and event types.",
      "description_length": 312,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CodeActionParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in code action requests, including context, range, text document identifier, and optional progress tokens. It provides functions to construct instances, convert to and from JSON format. It is used to request code actions like quick fixes or refactoring options within a specific document and range.",
      "description_length": 355,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.NotebookDocumentChangeEvent",
      "library": "linol.lsp",
      "description": "This module defines data structures and constructors for representing changes to notebook documents in a language server protocol. It includes types for tracking text content changes, structural changes to notebook cells, and metadata updates, along with functions to create these change objects. It is used to model and serialize notebook document modifications for communication between a language server and a client.",
      "description_length": 420,
      "index": 391,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Snippet.Var",
      "library": "linol.lsp",
      "description": "This module defines a set of variables representing text editor context values such as selected text, current line, filename, and directory. It provides direct access to these values for use in snippet expansion and templating. These variables are used to dynamically insert editor state into code templates or automated text generation workflows.",
      "description_length": 347,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentLinkRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for document link registration in an LSP server. It includes fields to specify which documents to target, whether to enable link resolution, and whether to track progress. It is used to configure document link capabilities during LSP initialization.",
      "description_length": 291,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentOnTypeFormattingParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for parameters used in document formatting triggered by typing. It includes the character typed, formatting options, cursor position, and text document identifier. It supports parsing from and converting to JSON, enabling integration with language server protocol clients.",
      "description_length": 309,
      "index": 394,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeRegistrationOptions",
      "library": "linol.lsp",
      "description": "This module defines configuration options for registering folding range capabilities in a language server. It includes fields for specifying the document selector, registration ID, and whether work done progress is supported. The module provides functions to create instances and convert to and from JSON representations.",
      "description_length": 321,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ShowMessageParams",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing parameters of a show message request, including a message string and a message type. It provides functions to construct instances, convert to and from JSON format using Yojson. It is used to serialize and deserialize message parameters for communication in a language server protocol.",
      "description_length": 338,
      "index": 396,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol_lsp.Types.InlineValueClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to inline value handling in a language server protocol. It includes functions to construct the structure, serialize it to JSON, and deserialize it from JSON. A concrete use case is configuring and exchanging inline value feature support between a language server and client during protocol initialization.",
      "description_length": 387,
      "index": 397,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.MessageActionItem",
      "library": "linol.lsp",
      "description": "This module defines a simple data structure for representing message action items, primarily used in LSP (Language Server Protocol) communications. It includes functions to create an action item with a title and to serialize or deserialize the structure using Yojson. A typical use case involves handling user prompts or notifications in an LSP server where actions need to be sent to or received from a client in JSON format.",
      "description_length": 426,
      "index": 398,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.RenameOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for rename options with two optional boolean fields: `prepareProvider` and `workDoneProgress`. It provides functions to create instances and convert to and from JSON using Yojson. It is used to configure rename behavior in language server protocol implementations.",
      "description_length": 301,
      "index": 399,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.SignatureHelpContext",
      "library": "linol.lsp",
      "description": "This module defines a data structure for managing context during signature help in a language server. It includes fields to track the current signature help state, trigger details, and retrigger status. It supports serialization to and from JSON for communication between the server and client.",
      "description_length": 294,
      "index": 400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DocumentRangeFormattingOptions",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing formatting options for document ranges, including support for range formatting and progress tracking. It provides functions to create instances, convert to and from JSON using Yojson. It is used to configure formatting behavior in language server protocol implementations.",
      "description_length": 316,
      "index": 401,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.ReferenceOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring reference-related behavior in an LSP (Language Server Protocol) implementation. It includes a single field `workDoneProgress` to indicate whether progress reporting is enabled for reference operations. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for communication over the protocol.",
      "description_length": 396,
      "index": 402,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CompletionItemKind",
      "library": "linol.lsp",
      "description": "This module defines a polymorphic variant type representing kinds of completion items in a language server protocol, such as `Function`, `Variable`, or `Enum`. It includes functions to convert between this type and Yojson representations for serialization and deserialization. These conversions enable the type to be used in JSON-based communication with language clients, such as editors or IDEs, during autocompletion requests.",
      "description_length": 429,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.CreateFile",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing file creation operations in the context of a language server protocol. It includes functions to construct instances with optional annotations and settings, and to serialize or deserialize them using Yojson. It is used to handle file creation requests that include metadata such as document URIs and associated options.",
      "description_length": 372,
      "index": 404,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.TextDocumentIdentifier",
      "library": "linol.lsp",
      "description": "This module defines a type representing a text document identifier, consisting of a URI. It provides functions to construct an identifier, convert it to and from JSON format. It is used to uniquely reference text documents in the context of language server protocol operations.",
      "description_length": 277,
      "index": 405,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Types.DocumentOnTypeFormattingOptions",
      "library": "linol.lsp",
      "description": "This module defines document formatting options triggered by specific characters during typing. It includes operations to create and serialize formatting configurations with a primary trigger character and optional additional triggers. It works with strings and string lists to represent formatting events, and is used to configure automatic document formatting in response to user input in an editor.",
      "description_length": 401,
      "index": 406,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.Diagnostic",
      "library": "linol.lsp",
      "description": "This module defines a diagnostic type for representing code analysis results, including structured data like severity, source, and related information. It provides functions to construct diagnostics with customizable fields and convert them to and from JSON format. Concrete use cases include reporting syntax errors, type mismatches, and linting issues in a language server.",
      "description_length": 375,
      "index": 407,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeWatchedFilesParams",
      "library": "linol.lsp",
      "description": "This module defines a type `t` that represents parameters for handling file change events in a language server protocol. It includes a list of file events and provides functions to construct instances and convert to and from JSON format. It is used to process notifications about changes to watched files during language server operation.",
      "description_length": 338,
      "index": 408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.FoldingRangeOptions",
      "library": "linol.lsp",
      "description": "This module defines a data structure for configuring folding range options in a language server, specifically supporting optional work done progress tracking. It provides functions to create instances, serialize to JSON, and deserialize from JSON using the Yojson library. A concrete use case includes configuring and exchanging folding range settings between a language server and a client during initialization.",
      "description_length": 413,
      "index": 409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.DidChangeConfigurationClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a type `t` representing client capabilities for dynamic registration of configuration changes in a language server protocol. It includes functions to construct a capability instance, and to convert to and from JSON format using Yojson. It is used to enable or disable dynamic registration support in LSP clients during configuration updates.",
      "description_length": 361,
      "index": 410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types.RegularExpressionsClientCapabilities",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing client capabilities related to regular expressions, specifically capturing the engine name and an optional version. It provides functions to construct instances, convert to and from JSON using Yojson, and ensures compatibility with LSP (Language Server Protocol) specifications. Use this module when handling language server client capabilities in LSP-based editors or tools that require precise regex engine information.",
      "description_length": 475,
      "index": 411,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Import",
      "library": "linol.lsp",
      "description": "This module integrates parsing, formatting, and manipulation capabilities across strings, integers, JSON, and result types, enabling robust data transformation and structured computation. It provides core operations like `sprintf`, integer arithmetic with bit-level control, JSON serialization with validation combinators, and result-aware error handling with syntactic support for chaining. You can decode and validate JSON payloads, sanitize and analyze text, manage integer-based configurations or bitflags, and compose error-resilient pipelines using `map`, `bind`, and applicative syntax. Submodules enhance these capabilities with immutable maps for strings and integers, structured key-value processing, and safe, optional-aware JSON decoding tailored for protocols like LSP.",
      "description_length": 782,
      "index": 412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Header",
      "library": "linol.lsp",
      "description": "This module handles the construction, manipulation, and serialization of HTTP-like headers used in the Language Server Protocol. It provides direct functions to set and retrieve content length and type, and includes a submodule that defines standard header keys such as `content_length` and `content_type`. These components work together to format and parse LSP messages correctly, ensuring precise message framing and media type specification during server-client communication. For example, a header can be created with a specified content length, then converted to a string for transmission over standard input/output.",
      "description_length": 621,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Server_notification",
      "library": "linol.lsp",
      "description": "This module defines notifications sent from an LSP server to a client, including diagnostics, progress updates, logging, and telemetry. It supports serialization and deserialization of these notifications to and from JSON-RPC format. Concrete use cases include reporting syntax errors, logging server activity, and tracking long-running operations during language processing.",
      "description_length": 375,
      "index": 414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Client_request",
      "library": "linol.lsp",
      "description": "This module defines a GADT for representing LSP client requests and their associated result types, including operations like text document hover, definition lookup, code completion, and semantic token retrieval. It works with LSP-specific data structures such as `InitializeParams`, `HoverParams`, `CompletionItem`, `TextEdit`, and various structured identifiers and locations. Concrete use cases include handling incoming JSON-RPC requests from an LSP client, converting them into typed OCaml values, and serializing responses back to JSON for transmission.",
      "description_length": 558,
      "index": 415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Client_notification",
      "library": "linol.lsp",
      "description": "This module defines a variant type representing client notifications in the LSP protocol, including actions like opening, closing, changing, and saving text and notebook documents, as well as handling configuration changes, file operations, and progress updates. It provides functions to convert between these notification variants and JSON-RPC messages. Use cases include processing incoming client events and serializing notifications for transmission.",
      "description_length": 454,
      "index": 416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Cancel_request",
      "library": "linol.lsp",
      "description": "This module handles the deserialization and serialization of JSON-RPC request cancellation messages. It defines the method identifier and converts between JSON values and request IDs using Yojson. Concrete use cases include parsing incoming cancellation requests and generating responses in a language server protocol implementation.",
      "description_length": 333,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Diff",
      "library": "linol.lsp",
      "description": "Computes the differences between two string versions of a document, generating a list of text edit operations needed to transform the original into the updated version. Works directly with strings and produces structured text edit commands suitable for applying changes to a document in an editor. Useful for implementing version control, document synchronization, or live editing features where precise changes between text states are required.",
      "description_length": 445,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Types",
      "library": "linol.lsp",
      "description": "This collection of modules provides structured data types and serialization functions for implementing Language Server Protocol (LSP) features. Key data types include file operation requests, diagnostic reports, workspace edits, initialization parameters, document synchronization events, and code navigation structures. Operations include creating, serializing, and deserializing these structures using Yojson for JSON-based communication between LSP clients and servers. Examples include processing batch file deletions, configuring hover and completion behavior, managing document diagnostics, handling code actions, and tracking file changes during editing sessions.",
      "description_length": 670,
      "index": 419,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.String_zipper",
      "library": "linol.lsp",
      "description": "This module provides a zipper-based structure for efficient string manipulation with UTF-encoding awareness, enabling precise navigation, insertion, line-based movement, and range replacements. It supports operations like inserting text at the current position, moving to specific lines or offsets, and extracting content in standard or debug formats. The child module extends this functionality to handle navigation and modification of lists of substrings, allowing focused movement through segmented lines while tracking absolute and relative positions. Together, they enable use cases such as text editing in language servers, incremental parsing, and handling document changes in LSP implementations.",
      "description_length": 704,
      "index": 420,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Progress",
      "library": "linol.lsp",
      "description": "This module defines a variant type `t` representing progress events in the context of the Language Server Protocol, specifically for handling work done progress with begin, report, and end states. It provides serialization and deserialization functions to and from JSON using the Yojson format, enabling communication with LSP clients. It is used to track and report the status of long-running operations such as file indexing or code analysis.",
      "description_length": 444,
      "index": 421,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Substring",
      "library": "linol.lsp",
      "description": "This library provides efficient manipulation of immutable string slices through operations like slicing, concatenation, and indexing, while supporting UTF-8 decoding and cursor-based text navigation. It includes a map module for associative storage and retrieval using substring keys, enabling ordered traversal and bulk transformations ideal for lexicon management and symbol resolution. The UTF-8 decoder interface enables incremental parsing from substring sources, integrating with external decoders for language server protocols and text processing pipelines. Together, these components allow precise and high-performance handling of textual data in applications ranging from editors to language tools.",
      "description_length": 707,
      "index": 422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Io",
      "library": "linol.lsp",
      "description": "This module enables bidirectional JSON-RPC communication over input/output channels, facilitating interaction with language servers via standard IO streams. It provides core operations for sending and receiving JSON-RPC packets using `Chan.input` and `Chan.output`. Key data types include JSON-RPC request, response, and notification structures. Example usage includes dispatching a JSON-RPC method call or reading a response from a language server over a channel.",
      "description_length": 464,
      "index": 423,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Extension",
      "library": "linol.lsp",
      "description": "This module implements LSP protocol extensions for debugging by encoding custom messages and retrieving document content at specific positions. It centers on the `t` record with a `message` field for JSON-serialized debug output, along with document and position types for precise content retrieval. Functions support constructing and sending diagnostic messages, and fetching document content to generate contextual debug information. For example, a server can encode a diagnostic like `{ message = \"variable not used\" }` or retrieve a document's content at a given line and column for inspection.",
      "description_length": 598,
      "index": 424,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Uri0",
      "library": "linol.lsp",
      "description": "This module represents and manipulates URIs, enabling conversions to and from strings, paths, and Yojson values. It supports equality checks, comparison, and hashing for use in data structures, and allows extraction of query and fragment components. The child module controls URI processing with Windows-style paths, facilitating cross-platform conversions in LSP implementations. Examples include handling file paths as URIs, serializing URIs for language server communication, and parsing components for routing or configuration.",
      "description_length": 531,
      "index": 425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Array_view",
      "library": "linol.lsp",
      "description": "This module provides operations to create and manipulate array views, which are lightweight, non-copying references to subarrays. It supports slicing, element access, iteration, and comparison of array segments, along with extracting or copying the underlying data. Use cases include efficient text processing, zero-copy data parsing, and optimizing memory usage when working with large arrays.",
      "description_length": 394,
      "index": 426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Cli",
      "library": "linol.lsp",
      "description": "This module handles command line argument parsing and communication channel configuration for LSP servers, supporting input sources like string lists and process IDs. It provides direct access to structured argument parsing through a record type `t` and integrates with submodules that define communication channels for standard I/O, Unix domain sockets, Windows pipes, and TCP sockets. Users can configure servers to listen on specific ports, connect via named pipes, or spawn clients with custom runtime parameters. Key operations include parsing command line arguments, extracting communication channels, and validating configurations before server initialization.",
      "description_length": 667,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Server_request",
      "library": "linol.lsp",
      "description": "This module defines a GADT for handling incoming JSON-RPC requests in an LSP server, mapping each request method to its corresponding parameter type and result type. It includes variants for workspace edits, configuration queries, capability registration, progress tracking, and various refresh commands for editor features like code lenses and semantic tokens. The module supports serialization to and from JSON-RPC, enabling direct handling of LSP protocol messages.",
      "description_length": 468,
      "index": 428,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Snippet",
      "library": "linol.lsp",
      "description": "This module constructs and manipulates LSP snippets with support for tabstops, placeholders, choices, and variable substitutions, enabling dynamic code template generation and auto-completion in an LSP server. It provides operations to combine and extend structured snippets using string concatenation, allowing incremental assembly of complex templates from simpler components. It also incorporates editor context variables\u2014such as selected text, filename, and line number\u2014into snippets, enabling dynamic insertion of runtime environment data during expansion. Example uses include generating function stubs with placeholders, creating context-aware code completions, and building multi-part templates with nested variables and transformations.",
      "description_length": 745,
      "index": 429,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Uri_lexer",
      "library": "linol.lsp",
      "description": "Parses URIs into structured components like scheme, authority, path, query, and fragment. Converts strings or file paths into URI objects, handling standard formats used in language server protocols. Useful for extracting specific parts of URIs in editor integrations or tooling that requires precise URI handling.",
      "description_length": 314,
      "index": 430,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp.Text_document",
      "library": "linol.lsp",
      "description": "This module manages text documents in a format compatible with the Language Server Protocol (LSP). It supports operations to create, update, and query text documents, including handling content changes, versioning, and position calculations using UTF-8 or UTF-16 encoding. It is used to maintain the state of open text documents during LSP sessions, enabling precise text manipulation and synchronization between client and server.",
      "description_length": 431,
      "index": 431,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_lsp.Position",
      "library": "linol.lsp",
      "description": "This module defines a data structure for representing positions in a text document using line and character offsets. It provides functions to construct position values, compare them, check if they are at the origin, and serialize or deserialize them using JSON. Concrete use cases include tracking cursor locations, managing text edits, and synchronizing document state in a language server.",
      "description_length": 391,
      "index": 432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_lsp",
      "library": "linol.lsp",
      "description": "This module implements the core infrastructure for building and interacting with Language Server Protocol (LSP) services. It provides structured representations of LSP requests, notifications, and responses, along with robust JSON-RPC serialization and deserialization for reliable client-server communication. Key data types include typed representations of LSP methods, document positions, progress events, and text edits, enabling precise handling of code navigation, diagnostics, document synchronization, and snippet generation. You can build LSP-compliant servers that process hover requests, track document changes, report progress on long-running tasks, and apply text edits incrementally, all while managing URIs, command line arguments, and communication channels for deployment across different environments.",
      "description_length": 819,
      "index": 433,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Response.Error.Code",
      "library": "linol.jsonrpc",
      "description": "This module defines a polymorphic variant type representing standardized JSON-RPC error codes, including both generic and server-specific errors. It provides constructors for common JSON-RPC error conditions such as `ParseError`, `InvalidRequest`, and `MethodNotFound`, along with a catch-all `Other` constructor for unrecognized codes. The type is used to represent and handle error conditions in JSON-RPC requests and responses, particularly in server implementations requiring precise error signaling.",
      "description_length": 504,
      "index": 434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Json.Jsonable.S",
      "library": "linol.jsonrpc",
      "description": "This module defines conversion functions between a custom type `t` and the `Linol_jsonrpc.Jsonrpc.Json.t` type, enabling serialization and deserialization for use in JSON-RPC communication. It works directly with the `t` type and the JSON representation used by the JSON-RPC implementation. Concrete use cases include encoding values of type `t` into JSON for transmission over a network or decoding incoming JSON payloads into `t` for processing.",
      "description_length": 447,
      "index": 435,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_jsonrpc.Import.Json.Jsonable.S",
      "library": "linol.jsonrpc",
      "description": "This module defines a type `t` and provides bidirectional conversion functions between `t` and JSON values. It enables serializing and deserializing values of type `t` using the `yojson_of_t` and `t_of_yojson` functions. Concrete use cases include converting custom data structures to and from JSON for transmission over a network or storage in configuration files.",
      "description_length": 365,
      "index": 436,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Import.Json.Conv",
      "library": "linol.jsonrpc",
      "description": "Converts a JSON value to its string representation. Works with the `Linol_jsonrpc.Import.Json.t` type. Useful for serializing JSON data for transmission or logging.",
      "description_length": 164,
      "index": 437,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Import.Json.Jsonable",
      "library": "linol.jsonrpc",
      "description": "This module provides functions to serialize and deserialize OCaml values to JSON, supporting standard types like integers, strings, lists, and records. It includes a core type `t` with `yojson_of_t` and `t_of_yojson` for converting custom data structures to and from JSON. Use it to parse JSON from network requests or generate API responses, and leverage its child module to handle custom types with the same bidirectional conversion pattern. Examples include encoding user data into JSON for HTTP responses or decoding JSON payloads into typed OCaml values for processing.",
      "description_length": 574,
      "index": 438,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Json.Jsonable",
      "library": "linol.jsonrpc",
      "description": "This module enables JSON serialization and deserialization for custom data types, converting between OCaml values and JSON representations for data transmission or structured decoding. It defines `to_json` and `of_json` operations for types implementing the `S` module type, while its child module specializes these conversions for interaction with `Linol_jsonrpc.Jsonrpc.Json.t`, facilitating JSON-RPC communication. Use it to encode domain-specific values into JSON for network transmission or decode JSON payloads into typed structures. Specific examples include serializing a custom type `t` into a JSON object for sending over a connection or reconstructing `t` from an incoming JSON response.",
      "description_length": 698,
      "index": 439,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Response.Error",
      "library": "linol.jsonrpc",
      "description": "This module handles the creation and manipulation of JSON-RPC error responses, supporting standardized error codes, descriptive messages, and optional data payloads. It provides a polymorphic variant type for representing both generic and server-specific JSON-RPC errors, such as `ParseError`, `InvalidRequest`, and `MethodNotFound`, along with functions to construct, serialize, and raise these errors as exceptions. You can use it to generate properly formatted JSON-RPC error responses for invalid requests or server failures, or to handle and inspect errors programmatically during RPC execution.",
      "description_length": 600,
      "index": 440,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Json",
      "library": "linol.jsonrpc",
      "description": "This module provides a JSON data type and core operations for parsing, constructing, and serializing JSON values, supporting standard structures like objects, arrays, and primitives. It enables encoding and decoding of custom data types through conversion functions, allowing seamless transformation between OCaml values and JSON representations. Child modules extend this capability to specialized contexts, such as JSON-RPC communication, by defining type-specific serialization and deserialization logic. Examples include converting a custom type to JSON for network transmission or reconstructing it from a JSON payload.",
      "description_length": 624,
      "index": 441,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Import.Json",
      "library": "linol.jsonrpc",
      "description": "This module represents and manipulates JSON data using an abstract syntax tree built from standard JSON types and recursive structures. It provides core operations for parsing JSON, extracting typed values, and accessing fields within JSON objects, primarily working with the `t` type for representing JSON values. The module supports both direct manipulation of JSON structures and bidirectional conversion of OCaml values to and from JSON, enabling tasks like decoding network requests into typed values or encoding user data for API responses. Submodules handle serialization to string format and automated conversion of custom OCaml types using `yojson_of_t` and `t_of_yojson` patterns.",
      "description_length": 690,
      "index": 442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Notification",
      "library": "linol.jsonrpc",
      "description": "Handles JSON-RPC notification messages by constructing and serializing them into JSON format. Works with JSON-RPC method names and structured data parameters. Used to generate valid JSON-RPC notifications for communication between clients and servers.",
      "description_length": 251,
      "index": 443,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_jsonrpc.Import.Option",
      "library": "linol.jsonrpc",
      "description": "Maps an option value by applying a function if it is present, preserving the optional structure. Works with `'a option` types, transforming them into `'b option` based on the provided function. Useful for safely applying transformations to values that may be absent, such as parsing or converting optional JSON fields.",
      "description_length": 318,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Structured",
      "library": "linol.jsonrpc",
      "description": "This module defines structured JSON-RPC data representations using polymorphic variants, supporting direct conversion to and from Yojson-compatible types. It provides `yojson_of_t` and `t_of_yojson` for serializing and deserializing structured data such as method calls, responses, and error objects. Concrete use cases include encoding and decoding JSON-RPC messages for transport over network protocols or storage in persistent formats.",
      "description_length": 438,
      "index": 445,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Packet",
      "library": "linol.jsonrpc",
      "description": "This module serializes and deserializes JSON-RPC packets to and from JSON values. It supports the full range of JSON-RPC message types, including single requests, notifications, responses, and batch operations. Use this module when converting between in-memory packet representations and their JSON wire format for transmission or parsing.",
      "description_length": 339,
      "index": 446,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Id",
      "library": "linol.jsonrpc",
      "description": "This module defines a polymorphic variant type for JSON-RPC request identifiers, supporting string and integer values. It provides serialization and deserialization to and from JSON using Yojson, along with hash and equality functions. This enables efficient handling of JSON-RPC message routing and response correlation in networked services.",
      "description_length": 343,
      "index": 447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Request",
      "library": "linol.jsonrpc",
      "description": "Handles the construction and serialization of JSON-RPC request objects. It provides functions to create requests with method names, optional parameters, and unique identifiers, and to convert these requests into JSON format. Useful for generating properly formatted JSON-RPC messages to send over a network or to a server.",
      "description_length": 322,
      "index": 448,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc.Response",
      "library": "linol.jsonrpc",
      "description": "This module represents JSON-RPC responses, handling both successful results and errors through constructors like `ok` and `error`. It supports serialization to and from JSON using `yojson_of_t` and `t_of_yojson`, enabling seamless integration with transport layers for sending or parsing JSON-RPC 2.0 messages. The error submodule defines a polymorphic variant type for standard and custom JSON-RPC errors such as `ParseError` and `MethodNotFound`, along with utilities to construct, serialize, and raise them as exceptions. You can use this module to build valid JSON-RPC responses for remote procedure calls or generate and inspect error responses for invalid requests and server-side failures.",
      "description_length": 696,
      "index": 449,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol_jsonrpc.Jsonrpc",
      "library": "linol.jsonrpc",
      "description": "This module implements a comprehensive JSON-RPC framework with core support for JSON data manipulation, including parsing, serialization, and custom type conversion. It defines key data types for JSON-RPC components such as requests, responses, errors, and notifications, along with operations to construct, serialize, and deserialize them using Yojson-compatible representations. The framework supports method calls with structured parameters, unique request identifiers, and batch operations, enabling robust client-server communication. Examples include converting custom OCaml types to JSON for transmission, building and sending JSON-RPC requests with optional parameters, and handling response results or errors like `MethodNotFound` during remote procedure execution.",
      "description_length": 774,
      "index": 450,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc.Import",
      "library": "linol.jsonrpc",
      "description": "This module handles JSON data representation and manipulation through an abstract syntax tree, using the `t` type to model JSON values and support parsing, field access, and typed extraction. It enables bidirectional conversion between OCaml values and JSON, with submodules managing string serialization and custom type conversion via `yojson_of_t` and `t_of_yojson`. Additionally, it includes utilities for transforming optional values, applying functions to `('a option)` types to yield `('b option)` results, particularly useful when processing optional JSON fields. Examples include decoding JSON HTTP requests into typed OCaml structures, encoding user data for API transmission, and safely transforming optional values without unwrapping them.",
      "description_length": 750,
      "index": 451,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol_jsonrpc",
      "library": "linol.jsonrpc",
      "description": "This module provides a complete JSON-RPC framework for building, serializing, and handling remote procedure calls with structured data. It defines core types like requests, responses, and errors, and supports operations such as parsing, converting, and batch processing JSON data using Yojson-compatible representations. Key examples include transforming custom OCaml types to and from JSON, constructing method calls with optional parameters, and safely handling optional JSON fields during data decoding.",
      "description_length": 506,
      "index": 452,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Linol.Jsonrpc2.Make.Req_id",
      "library": "linol",
      "description": "Handles request identifiers for JSON-RPC 2.0 messaging, mapping requests to responses. Works with string-based IDs, providing conversion to string for serialization and tracking. Used to correlate incoming requests with their corresponding replies in an LSP server.",
      "description_length": 265,
      "index": 453,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Jsonrpc2.S-Req_id",
      "library": "linol",
      "description": "Handles request identifiers for mapping JSON-RPC requests to responses. Works with string-based IDs defined in the JSON-RPC specification. Used to ensure correct association between incoming requests and their corresponding replies in an LSP server.",
      "description_length": 249,
      "index": 454,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Server.Req_id",
      "library": "linol",
      "description": "This module defines a type `t` for representing request IDs in a JSON-RPC server, based on the `Linol_jsonrpc.Jsonrpc.Id.t` type. It provides the `to_string` function to convert a request ID to its string representation, which is essential for tracking and correlating requests and responses. This is used internally during LSP server operation to ensure replies are correctly matched to incoming requests.",
      "description_length": 406,
      "index": 455,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Jsonrpc2.IO",
      "library": "linol",
      "description": "Handles input/output operations for JSON-RPC2 communication, including reading from and writing to channels. Works with `in_channel` and `out_channel` types, using `env` to access standard input/output. Concrete use cases include reading raw bytes, writing strings, and handling exceptions during I/O operations.",
      "description_length": 312,
      "index": 456,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol.Jsonrpc2.S",
      "library": "linol",
      "description": "Handles bidirectional JSON-RPC2 communication for LSP servers, sending and receiving requests and notifications over input/output channels. Works with LSP server requests, responses, and document state, using `IO` for asynchronous operations and `Req_id` for tracking request identifiers. Used to implement custom LSP servers that communicate over stdio or network sockets, handling document synchronization, method calls, and error responses.",
      "description_length": 443,
      "index": 457,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Jsonrpc2.S-IO",
      "library": "linol",
      "description": "This module defines input/output operations for handling JSON-RPC2 communication, including reading from and writing to channels, managing asynchronous values with `let*` and `let+`, and handling errors with `catch` and `fail`. It works with `env`, `in_channel`, and `out_channel` types to abstract over standard input and output, using `bytes` and `string` for data transfer. Concrete use cases include reading JSON-RPC2 messages from stdin, writing responses to stdout, and sequencing asynchronous I/O actions in a server loop.",
      "description_length": 529,
      "index": 458,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Server.Make",
      "library": "linol",
      "description": "Implements a server interface for handling LSP requests over an IO substrate, pairing requests with result handlers. Works with document state records tracking URI, language ID, version, and content, alongside request-response handlers tied to standard LSP server operations. Used to build asynchronous LSP servers that process document updates and language-specific queries like completions or diagnostics.",
      "description_length": 407,
      "index": 459,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Jsonrpc2.Make",
      "library": "linol",
      "description": "This module implements a JSON-RPC 2.0 server for LSP communication, managing requests, notifications, and responses over input/output channels. It processes LSP messages, maintains document state, and uses an IO module for transport, enabling language servers to handle editor interactions like code completion and diagnostics over stdio or custom channels. The request identifier system maps incoming requests to responses using string-based IDs, ensuring correct correlation during message serialization and reply tracking. Together, these components support building robust language servers that manage document updates, editor queries, and asynchronous notifications in a structured, transport-agnostic way.",
      "description_length": 711,
      "index": 460,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Blocking_IO",
      "library": "linol",
      "description": "This module implements blocking IO operations using a new thread for each spawned task, providing direct access to standard input/output channels. It supports reading from and writing to channels with precise byte control, including line-based reading and string-based writing. Concrete use cases include handling LSP protocol message framing, managing bidirectional communication with external processes, and tracking IO byte statistics for diagnostics or rate limiting.",
      "description_length": 471,
      "index": 461,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Server",
      "library": "linol",
      "description": "This module manages document state and request handling for LSP servers, tracking metadata such as URI, language ID, version, and content. It uses the `Make` functor to structure incoming LSP requests and pairs them with result handlers, enabling precise synchronization and versioning. The module includes a request ID type for JSON-RPC correlation and an interface for handling LSP operations over IO, supporting asynchronous servers that process document changes and language queries like diagnostics or completions. Example usage includes building a custom language server that tracks document versions and responds to completion or hover requests.",
      "description_length": 652,
      "index": 462,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.IO",
      "library": "linol",
      "description": "Handles input/output operations for LSP servers using channels and environment contexts. Provides functions for reading from and writing to input/output channels, with support for handling exceptions and backtraces. Useful for implementing custom LSP server logic that interacts with standard input/output streams.",
      "description_length": 314,
      "index": 463,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Jsonrpc2",
      "library": "linol",
      "description": "This module implements JSON-RPC 2.0 message handling for remote procedure calls, using `Yojson.Safe.t` for JSON representation and supporting request parsing, response generation, and method dispatching. It includes submodules for managing request identifiers, bidirectional I/O communication, and LSP-specific server logic, enabling services to process document synchronization, method calls, and notifications over stdio or sockets. The I/O submodule reads and writes messages using `in_channel` and `out_channel`, while the server module coordinates message handling with asynchronous operations and request tracking. Example use cases include implementing a language server that receives code completion requests, sends diagnostics, and maintains document state across edits using JSON-RPC 2.0 over standard input/output.",
      "description_length": 825,
      "index": 464,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol",
      "library": "linol",
      "description": "This module simplifies building LSP servers in OCaml by abstracting over the \"Lsp\" library, handling JSON-RPC 2.0 messages, and providing blocking IO utilities for communication over sockets or standard input/output. It works with LSP messages, JSON payloads, and connection streams, offering data types like request IDs, document metadata (URI, version, content), and JSON-RPC structures via `Yojson.Safe.t`. Operations include reading and writing framed LSP messages, handling document synchronization, and dispatching language-specific queries such as code completion or hover requests. Example use cases include implementing a language server that tracks document versions, responds to editor requests over stdio, and manages bidirectional communication with precise byte control and error handling.",
      "description_length": 803,
      "index": 465,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 477,
    "meaningful_modules": 466,
    "filtered_empty_modules": 11,
    "retention_rate": 0.9769392033542977
  },
  "statistics": {
    "max_description_length": 825,
    "min_description_length": 164,
    "avg_description_length": 399.8218884120172,
    "embedding_file_size_mb": 1.6930475234985352
  }
}