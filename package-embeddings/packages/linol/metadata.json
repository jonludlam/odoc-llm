{
  "package": "linol",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 11,
  "creation_timestamp": "2025-06-18T16:33:28.341517",
  "modules": [
    {
      "module_path": "Linol.Jsonrpc2.Make.Req_id",
      "description": "Generates and converts request identifiers to string format for JSON-RPC communication. Operates on a type wrapped around JSON-RPC ID structures. Used to track and correlate client requests with server responses in distributed systems.",
      "description_length": 235,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol.Server.Req_id",
      "description": "Generates and converts request identifiers to string format for JSON-RPC communication. Operates on values of type Jsonrpc.Id.t to ensure unique mapping between requests and responses. Used to track and correlate client requests with server replies in distributed systems.",
      "description_length": 272,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Server.Make",
      "description": "Provides asynchronous-like sequencing and error handling for I/O operations, supporting monadic binds and lifts. Works with channel inputs/outputs, exceptions, and custom environments. Enables structured reading from and writing to standard streams, with error recovery and exception catching.",
      "description_length": 293,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Jsonrpc2.Make",
      "description": "Provides monadic operations for sequencing and combining asynchronous or effectful computations, including binding, lifting, and error handling. Works with channel I/O operations, exceptions, and custom environments. Enables structured handling of input/output and error recovery in event-driven or concurrent workflows.",
      "description_length": 320,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol.Jsonrpc2.IO",
      "description": "Provides asynchronous I/O operations using a monadic interface, including reading from and writing to standard input/output channels, handling errors, and sequencing computations. Works with channel types for input and output, and a context type for environment configuration. Enables non-blocking reading of lines and bytes, structured error recovery, and composition of I/O actions in a sequential flow.",
      "description_length": 405,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Jsonrpc2.Req_id",
      "description": "Generates and manipulates unique request identifiers used in JSONRPC communication. Operates on the `Jsonrpc.Id.t` type, providing a string representation for tracking and logging. Used to ensure proper correlation between requests and their corresponding responses in distributed systems.",
      "description_length": 289,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Server",
      "description": "Manages request tracking and I/O operations through unique identifier generation and asynchronous sequencing. Handles Jsonrpc.Id.t for request-response correlation and supports channel-based I/O with error recovery. Enables structured stream handling and exception management in distributed workflows. Processes JSON-RPC requests, tracks their lifecycle, and ensures reliable communication through error-resistant I/O operations.",
      "description_length": 429,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol.Blocking_IO",
      "description": "Provides asynchronous I/O operations using a dedicated thread per task, including reading from and writing to standard input/output, handling exceptions, and tracking byte counts. Works with in_channel, out_channel, and atomic integers to track I/O statistics. Enables structured concurrency for blocking operations like reading lines or bytes, and supports error handling and thread spawning.",
      "description_length": 393,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Linol.Log",
      "description": "Provides logging operations for emitting messages at different severity levels, including error, warning, info, and debug. Works with log messages formatted as polymorphic variants and handles error recovery with custom pretty-printing. Enables structured error handling by wrapping results and applying custom error message formatting.",
      "description_length": 336,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "linol",
      "description": "Provides methods for handling JSON-RPC communication using Lwt or Eio, with support for overriding specific protocol behaviors. Works with LSP base types and object abstractions for protocol interactions. Enables custom protocol implementations in language server scenarios.",
      "description_length": 274,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Linol",
      "description": "Provides monadic operations for sequencing I/O actions and handling errors, including binding, lifting, and combining computations. Works with channel I/O, exceptions, and custom environments to manage input and output streams. Enables structured reading from and writing to standard input/output with error recovery.",
      "description_length": 317,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 27,
    "meaningful_modules": 11,
    "filtered_empty_modules": 16,
    "retention_rate": 0.4074074074074074
  },
  "statistics": {
    "max_description_length": 429,
    "min_description_length": 235,
    "avg_description_length": 323.90909090909093,
    "embedding_file_size_mb": 0.04039478302001953
  }
}