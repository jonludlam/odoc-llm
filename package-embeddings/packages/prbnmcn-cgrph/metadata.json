{
  "package": "prbnmcn-cgrph",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:59:31.684042",
  "modules": [
    {
      "module_path": "Cgraph.Var",
      "library": "prbnmcn-cgrph",
      "description": "This module implements variables that hold values and support tracked dependencies within an incremental computation graph. It provides operations to create variables, set their values, and peek at current values, while automatically managing invalidation of dependent nodes. Variables can also be created to track other nodes, enabling dynamic updates and use cases like reactive UI components or incremental data processing pipelines.",
      "description_length": 436,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cgraph.Infix",
      "library": "prbnmcn-cgrph",
      "description": "This module defines infix operators for working with values in the `Cgraph.t` monadic context. It provides `let*`, `let+`, `and+`, `>>=`, and `>|=` for chaining computations using bind and map operations. These operators simplify composing incremental computations, such as sequencing dependent computations or combining independent results.",
      "description_length": 341,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cgraph.Gen",
      "library": "prbnmcn-cgrph",
      "description": "Generators produce streams of values through a user-provided function. They support creation via `create` and value refresh via `touch`, which triggers recomputation in dependent nodes. Use generators to model dynamic inputs like sensor data or user events.",
      "description_length": 257,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cgraph.Internal",
      "library": "prbnmcn-cgrph",
      "description": "This module provides debugging utilities for tracking dependencies, validating expressions, and visualizing computation graphs. It operates on expression (`Cgraph.ex`) and graph (`Cgraph.t`) types, offering functions to inspect upstream nodes, export graphs to Graphviz format, and compare or copy graph structures. Concrete use cases include diagnosing dependency issues, visualizing graph state during development, and ensuring correctness during incremental computation updates.",
      "description_length": 481,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cgraph",
      "library": "prbnmcn-cgrph",
      "description": "This module implements an incremental computation graph that supports dynamic dependency tracking and minimal recomputation on input changes. It provides operations to create and compose nodes holding values, functions, and conditional logic, with support for variables, generators, and callbacks to handle updates. Concrete use cases include reactive UI components, incremental data processing pipelines, and systems requiring efficient recomputation such as spreadsheet engines or live code evaluation.",
      "description_length": 504,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 5,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8333333333333334
  },
  "statistics": {
    "max_description_length": 504,
    "min_description_length": 257,
    "avg_description_length": 403.8,
    "embedding_file_size_mb": 0.07287311553955078
  }
}