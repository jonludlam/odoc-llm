{
  "package": "dkml-dune-dsl",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:03:40.114605",
  "modules": [
    {
      "module_path": "DkmlDuneDsl.Dune",
      "library": "dkml-dune-dsl",
      "description": "This module provides tools to construct and manipulate Dune's build configuration language using symbolic syntax trees. It supports key types like `S` for atomic strings and `Split` for space-separated values, enabling precise assembly of Dune expressions for libraries, executables, and tests. Submodules extend this functionality with specialized operations for handling complex Dune structures, such as conditional expressions and scoped values. You can use it to generate Dune files dynamically or inject runtime parameters into build configurations.",
      "description_length": 554,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "DkmlDuneDsl",
      "library": "dkml-dune-dsl",
      "description": "This module enables the construction and manipulation of Dune build configurations using symbolic syntax trees. It defines core types like `S` for atomic strings and `Split` for space-separated values, supporting precise assembly of Dune expressions for libraries, executables, and tests. It includes operations for handling conditionals, scoped values, and runtime parameter injection. Example uses include dynamically generating Dune files or customizing build configurations based on external inputs.",
      "description_length": 503,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 2,
    "filtered_empty_modules": 1,
    "retention_rate": 0.6666666666666666
  },
  "statistics": {
    "max_description_length": 554,
    "min_description_length": 503,
    "avg_description_length": 528.5,
    "embedding_file_size_mb": 0.0076808929443359375
  }
}