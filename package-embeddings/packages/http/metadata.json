{
  "package": "http",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 12,
  "creation_timestamp": "2025-08-14T23:12:17.985738",
  "modules": [
    {
      "module_path": "Http.Transfer.Private",
      "library": "http",
      "description": "Handles internal parsing and serialization of HTTP/1.1 message bodies for transfer encodings like `chunked` and `content-length`. Works directly with `encoding` values to determine body presence and format. Used to implement body streaming and header processing in HTTP servers and clients.",
      "description_length": 290,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Http.Header.Private",
      "library": "http",
      "description": "Implements case-insensitive string comparison for HTTP header keys. Uses ASCII lowercase conversion to normalize strings before equality checks. Ensures consistent header key matching regardless of input casing.",
      "description_length": 211,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Http.Private.Parser",
      "library": "http",
      "description": "This module parses HTTP requests and chunk lengths from string buffers. It provides `parse_request` to convert a buffer into an HTTP request and `parse_chunk_length` to extract chunk sizes from chunked encoding. These functions return the parsed value and the offset of remaining data, or an error if parsing fails.",
      "description_length": 315,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Http.Response",
      "library": "http",
      "description": "This module defines a type `t` representing HTTP responses, with fields for headers, version, and status code. It provides functions to access these fields, compare responses, and determine connection reuse or content length requirements. Use cases include constructing and inspecting HTTP responses, checking if a content length is required, and formatting responses for debugging or logging.",
      "description_length": 393,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Http.Status",
      "library": "http",
      "description": "This module defines polymorphic variant types representing HTTP status code categories and individual status codes, along with conversions between integer codes and their string descriptions. It provides functions to convert status codes to strings or integers, compare them, and format them for display. Concrete use cases include handling HTTP responses in a type-safe way, validating status codes from network requests, and generating appropriate error messages based on standard HTTP status semantics.",
      "description_length": 505,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Http.Version",
      "library": "http",
      "description": "This module defines an enumerated type for HTTP versions, including `HTTP_1_0`, `HTTP_1_1`, and a catch-all `Other` variant for unrecognized versions. It provides functions to convert between string representations and the enumerated type, compare versions, and pretty-print them. This is useful when parsing or generating HTTP headers to ensure correct version handling in network communication.",
      "description_length": 396,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Http.Method",
      "library": "http",
      "description": "This module defines an enumerated type representing HTTP methods, including standard and custom variants. It provides functions to convert between strings and method values, compare methods, and determine if a method allows a request body. Use cases include parsing and validating HTTP method strings in web servers or clients, and controlling request/response handling based on method semantics.",
      "description_length": 396,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Http.Request",
      "library": "http",
      "description": "This module defines a data structure for HTTP requests, including methods to access and manipulate request components like headers, HTTP method, resource path, and version. It provides functions to check properties of the request such as whether a body is expected, if the connection should be kept alive, or if a content length is required. Use cases include building, inspecting, and modifying HTTP requests in a server or client context, such as determining if a request supports chunked trailers or adding trailer support to a request.",
      "description_length": 539,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Http.Header",
      "library": "http",
      "description": "This module supports creating, modifying, and querying HTTP headers stored as key-value lists, enabling case-insensitive key comparisons and duplicate handling. It facilitates tasks like serializing headers into string formats, inspecting specific fields (e.g., content range or transfer encoding), and iterating over header values, making it suitable for HTTP server or client implementations requiring precise header manipulation.",
      "description_length": 432,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Http.Transfer",
      "library": "http",
      "description": "Handles parsing and serialization of HTTP/1.1 message bodies using `chunked` and `content-length` transfer encodings. Works directly with the `encoding` type to manage body streaming and header processing in HTTP servers and clients. Used to determine body presence and format during HTTP communication.",
      "description_length": 303,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Http.Private",
      "library": "http",
      "description": "Parses HTTP requests and chunk lengths from string buffers. Uses `parse_request` to convert a buffer into an HTTP request and `parse_chunk_length` to extract chunk sizes from chunked encoding, returning parsed values with remaining data offsets or errors. Works directly with string buffers and HTTP request structures.",
      "description_length": 319,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Http",
      "library": "http",
      "description": "This module implements core HTTP protocol handling for building and parsing HTTP requests and responses. It works with custom algebraic data types representing HTTP versions, methods, status codes, headers, and message bodies, providing precise control over HTTP semantics. Concrete use cases include parsing raw HTTP messages in network servers, constructing valid HTTP requests with correct transfer encoding, and inspecting or modifying headers and status codes in web clients or proxies.",
      "description_length": 491,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 539,
    "min_description_length": 211,
    "avg_description_length": 382.5,
    "embedding_file_size_mb": 0.1742849349975586
  }
}