{
  "package": "flowcaml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:43.957125",
  "modules": [
    {
      "module_path": "flowcaml",
      "description": "Provides functions for parsing and analyzing control flow graphs, including path enumeration and cycle detection. Operates on graph representations composed of nodes with labeled edges and annotated metadata. Used to optimize code execution paths in static analysis tools and compiler transformations.",
      "description_length": 301,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fmarshal",
      "description": "Serializes OCaml values to a string representation and reconstructs them back into their original type. Works with arbitrary OCaml types, including nested structures and polymorphic variants. Used to persist complex data structures in a compact format or transmit them over a network.",
      "description_length": 284,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Flowperv",
      "description": "Performs string concatenation with custom operator `^^`, extracts characters from strings using `$$`, and converts between strings and `charray` type. Handles exception propagation and cleanup with `_propagate_` and `_try_finally_`, and checks if an exception is catchable with `_catchable_`. Used for low-level string manipulation and error handling in text processing pipelines.",
      "description_length": 380,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Charray",
      "description": "This module offers low-level manipulation of mutable character arrays, including element access, modification, and chunked array operations like blitting and filling. It supports text processing tasks such as case conversion, string concatenation, and searching, enabling efficient transformations and iterations over character data. Use cases include dynamic string building, text normalization, and performance-critical array manipulations.",
      "description_length": 442,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 442,
    "min_description_length": 284,
    "avg_description_length": 351.75,
    "embedding_file_size_mb": 0.014947891235351562
  }
}