{
  "package": "websocket-lwt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:30:43.493897",
  "modules": [
    {
      "module_path": "Websocket_cohttp_lwt.Frame.Opcode",
      "description": "Converts opcode values to human-readable string representations and pretty-prints them for output. Works with an opaque type representing low-level instruction codes used in bytecode execution. Used to generate debug logs and error messages during virtual machine operation.",
      "description_length": 274,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket_cohttp_lwt.Frame",
      "description": "Encodes and decodes low-level instruction codes into readable formats, enabling clear representation of bytecode operations. It supports operations on an opaque type that models virtual machine instructions, allowing for debugging and error reporting. Users can generate detailed logs, inspect execution flow, and analyze runtime behavior. Examples include printing instruction sequences, formatting error messages, and tracing execution steps.",
      "description_length": 444,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt.Connected_client",
      "description": "Sends and receives Websocket frames, and retrieves the HTTP request and source address associated with a connection. Operates on Websocket.Frame.t and Cohttp.Request.t types. Used to manage real-time communication and inspect connection metadata during server-side interactions.",
      "description_length": 278,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "websocket-lwt",
      "description": "Handles WebSocket handshake negotiation and message framing over TCP, including parsing and constructing protocol-specific headers and control frames. Operates on byte sequences, strings, and custom message types representing text, binary, and control data. Used to establish real-time communication channels in web applications, enabling efficient data exchange without repeated HTTP requests.",
      "description_length": 394,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_cohttp_lwt",
      "description": "Encodes and decodes low-level instruction codes into human-readable formats, working with an opaque type representing virtual machine instructions. It provides operations for logging, inspecting execution flow, and formatting error messages. Users can print instruction sequences, trace execution steps, and generate detailed runtime diagnostics. This enables deep analysis and debugging of bytecode execution.",
      "description_length": 410,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt",
      "description": "Handles bidirectional Websocket communication by sending and receiving frames, while extracting HTTP request details and connection source addresses. Processes data through Websocket.Frame.t and Cohttp.Request.t structures to enable real-time data exchange and metadata inspection. Allows server-side applications to track client connections and manage streaming data efficiently. Example tasks include logging client IP addresses, forwarding messages between clients, and maintaining persistent connections.",
      "description_length": 508,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 508,
    "min_description_length": 274,
    "avg_description_length": 384.6666666666667,
    "embedding_file_size_mb": 0.022214889526367188
  }
}