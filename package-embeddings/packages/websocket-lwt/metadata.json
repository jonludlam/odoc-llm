{
  "package": "websocket-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:00:51.150663",
  "modules": [
    {
      "module_path": "Websocket_cohttp_lwt.Frame.Opcode",
      "library": "websocket-lwt.cohttp",
      "description": "This module defines the set of WebSocket frame opcodes used to indicate the type of data being transmitted over a WebSocket connection. It includes standard opcodes like `Text`, `Binary`, `Close`, `Ping`, and `Pong`, as well as constructors for control and non-control frames with custom integer values. The module provides functions to convert opcode values to human-readable strings and to format them for debugging or logging purposes.",
      "description_length": 438,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket_cohttp_lwt.Frame",
      "library": "websocket-lwt.cohttp",
      "description": "This module handles WebSocket frame construction and serialization, working with a record type that includes opcode, extension, final flag, and content. It provides functions to create frames with customizable fields and to generate close frames with status codes. Direct use cases include building and sending WebSocket messages with specific control flags, and generating human-readable representations of frames for debugging or logging.",
      "description_length": 440,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_cohttp_lwt",
      "library": "websocket-lwt.cohttp",
      "description": "This module facilitates WebSocket communication over HTTP by upgrading connections and handling message frames. It works with Cohttp requests and responses, Conduit flows, and frame records containing opcode, content, and control flags. Concrete use cases include establishing WebSocket handshakes, sending and receiving framed messages with custom opcodes, and handling connection closure with specific status codes.",
      "description_length": 417,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt.Connected_client",
      "library": "websocket-lwt",
      "description": "This module provides functions to send and receive WebSocket frames over established connections, including handling multiple frames in sequence. It works with connection objects derived from TCP, domain sockets, or vchan flows, and exposes the original HTTP request and source address. Concrete use cases include implementing WebSocket-based messaging protocols, managing bidirectional communication with clients, and inspecting connection metadata for routing or authentication.",
      "description_length": 480,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket_lwt",
      "library": "websocket-lwt",
      "description": "This module provides functions to establish and manage WebSocket connections, including sending and receiving framed messages, handling connection upgrades, and validating origins. It works with HTTP requests, TCP connections, and custom streams, supporting both client and server implementations. Concrete use cases include real-time messaging services, bidirectional communication between web clients and servers, and secure WebSocket endpoint validation using origin checks.",
      "description_length": 477,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 480,
    "min_description_length": 417,
    "avg_description_length": 450.4,
    "embedding_file_size_mb": 0.07282829284667969
  }
}