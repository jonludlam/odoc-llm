{
  "package": "websocket-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:06:16.676184",
  "modules": [
    {
      "module_path": "Websocket_cohttp_lwt.Frame.Opcode",
      "library": "websocket-lwt.cohttp",
      "description": "This module defines the set of valid opcodes for WebSocket frames, including both control and data frame types. It provides functions to convert opcode values to human-readable strings and to format them for debugging purposes. Concrete use cases include inspecting or logging the type of data being sent or received over a WebSocket connection, such as distinguishing between text, binary, ping, or close frames.",
      "description_length": 413,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket_cohttp_lwt.Frame",
      "library": "websocket-lwt.cohttp",
      "description": "This module handles the construction, representation, and display of WebSocket frames, supporting customizable fields such as opcode, extension, and final flag, along with utilities to generate close frames using status codes. Its core data types include frame configurations and binary payloads, while operations allow for frame assembly and disassembly during WebSocket communication. The opcode submodule defines standard frame types\u2014like text, binary, ping, and close\u2014and provides conversion functions for logging and debugging. Together, they enable precise control over WebSocket message formatting, inspection, and transmission in networked applications.",
      "description_length": 661,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_cohttp_lwt",
      "library": "websocket-lwt.cohttp",
      "description": "This module integrates WebSocket frame handling with CoHTTP and LWT to manage connection upgrades and bidirectional messaging. It provides `upgrade_connection` to initiate WebSocket handshakes, returning response metadata and a send function, while the `Frame` submodule supports frame construction, disassembly, and customization with opcodes like text, binary, ping, and close. The opcode submodule defines standard message types and conversion utilities for inspection. Together, they enable building WebSocket servers that handle framed messages and connection states over LWT-driven HTTP services.",
      "description_length": 602,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket_lwt.Connected_client",
      "library": "websocket-lwt",
      "description": "This module handles communication over established WebSocket connections, providing functions to send and receive WebSocket frames asynchronously. It works with connection objects that encapsulate the underlying transport, such as TCP or domain sockets, and exposes the original HTTP request and source address of the connection. Concrete use cases include implementing real-time messaging clients, handling bidirectional data exchange in web applications, and managing persistent network connections for streaming data.",
      "description_length": 520,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket_lwt",
      "library": "websocket-lwt",
      "description": "This module implements WebSocket communication over Lwt, handling protocol upgrades from HTTP and managing bidirectional message streams. It provides functions to establish connections using Cohttp and Conduit, validate origins, and stream frames asynchronously, supporting both client and server roles. The child module extends this by offering fine-grained control over message framing, allowing applications to send and receive text or binary payloads over persistent connections. Use cases include real-time chat services, live data\u63a8\u9001, and networked game backends where low-latency, message-based communication is essential.",
      "description_length": 628,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 661,
    "min_description_length": 413,
    "avg_description_length": 564.8,
    "embedding_file_size_mb": 0.018599510192871094
  }
}