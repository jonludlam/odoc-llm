{
  "package": "bloomf",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:49:35.721494",
  "modules": [
    {
      "module_path": "Bloomf.Make",
      "library": "bloomf",
      "description": "This module implements a probabilistic set data structure using Bloom filters, supporting operations to add elements, check membership, and estimate the number of elements stored. It works with elements of type `H.t`, where `H` is a hashable type, and internally manages a bit array to represent the filter. Concrete use cases include efficiently checking presence in large datasets with limited memory, such as caching systems or spell checkers where false positives are tolerable.",
      "description_length": 482,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bloomf",
      "library": "bloomf",
      "description": "This module implements a probabilistic set data structure using Bloom filters, supporting operations to add elements, check membership, and estimate the number of elements stored. It works with elements of type `H.t`, where `H` is a hashable type, and internally manages a bit array to represent the filter. Concrete use cases include efficiently checking presence in large datasets with limited memory, such as caching systems or spell checkers where false positives are tolerable.",
      "description_length": 482,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 482,
    "min_description_length": 482,
    "avg_description_length": 482.0,
    "embedding_file_size_mb": 0.015064239501953125
  }
}