{
  "package": "tdigest",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:06:12.927216",
  "modules": [
    {
      "module_path": "Tdigest.M.Private",
      "library": "tdigest",
      "description": "This module provides direct access to internal components of a t-digest structure, including the list of centroids and optional minimum and maximum value pairs. It works with t-digest data structures that model distributions using weighted centroids. These functions are used for low-level analysis or debugging of t-digest state, such as inspecting distribution bounds or centroid composition.",
      "description_length": 394,
      "index": 0,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Tdigest.Marshallable.Private",
      "library": "tdigest",
      "description": "This module provides direct access to internal components of a marshallable Tdigest structure, exposing centroids as a list of float pairs and optional min/max values. It supports inspection of the digest's internal state for serialization or debugging purposes. Use cases include extracting statistical summaries or persisting the digest's state to disk.",
      "description_length": 355,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tdigest.M",
      "library": "tdigest",
      "description": "This module implements a T-Digest data structure for efficient quantile estimation on large datasets, supporting operations like adding values, merging digests, computing percentiles, and estimating rank percentages with configurable accuracy. It includes a submodule that exposes internal components such as centroids and boundary values, enabling low-level inspection and analysis of the digest's state. The main API allows real-time analytics and statistical monitoring, while the submodule facilitates debugging or detailed distribution examination, such as analyzing centroid distribution or checking min/max bounds. Together, they enable both high-level statistical queries and fine-grained structural manipulation of t-digests.",
      "description_length": 734,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tdigest.Marshallable",
      "library": "tdigest",
      "description": "This module implements a serializable T-Digest structure for high-accuracy approximate quantile computation over float values, supporting operations to add data points, merge digests, query percentiles, and estimate rank percentages. It includes internal access to centroids as float pairs and optional min/max values, enabling inspection and serialization of the digest's state. The structure supports S-expression and string-based serialization, making it suitable for distributed analytics, streaming data processing, and persistent statistical summaries. Specific operations include merging multiple digests for aggregated statistics and extracting internal centroid lists for debugging or storage.",
      "description_length": 702,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tdigest.Private",
      "library": "tdigest",
      "description": "This module exposes operations to access internal centroid data, minimum, and maximum values of a digest structure. It works directly with the `Tdigest.t` type, providing list of centroids and optional boundary values. Use cases include inspecting internal state for debugging or implementing custom aggregation logic.",
      "description_length": 318,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tdigest",
      "library": "tdigest",
      "description": "This module manages approximate quantile computation over floating-point data using configurable T-Digest structures, supporting operations to add values, merge and compress digests, and compute percentiles and rank estimates. It provides direct access to core operations on `Tdigest.t` instances, such as merging for aggregated statistics and compressing for efficiency, while exposing internal components like centroids and min/max bounds through submodules for inspection and serialization. The structure supports S-expression encoding and string-based serialization, enabling use in distributed and streaming contexts, and allows detailed analysis of digest state for debugging or custom statistical processing. Example uses include merging multiple digests for real-time analytics, extracting centroids for distribution analysis, and serializing digest state for storage or transmission.",
      "description_length": 892,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 892,
    "min_description_length": 318,
    "avg_description_length": 565.8333333333334,
    "embedding_file_size_mb": 0.02221965789794922
  }
}