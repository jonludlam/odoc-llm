{
  "package": "ezjs_extension",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 45,
  "creation_timestamp": "2025-08-15T16:12:53.789262",
  "modules": [
    {
      "module_path": "Chrome_common.Runtime",
      "library": "ezjs_extension.chrome-common",
      "description": "This module provides operations for interacting with the browser's runtime environment, including managing extensions, handling messages, and responding to lifecycle events. It works with JavaScript-compatible data types like `js_string`, `error`, and custom port and event types for communication. Concrete use cases include connecting to native applications, reloading extensions, handling installation events, and exchanging messages between extension components.",
      "description_length": 466,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_common.I18n",
      "library": "ezjs_extension.chrome-common",
      "description": "Handles internationalization by retrieving localized strings and the current UI language. It provides `getMessage` to fetch translated messages with optional substitutions and `getUILanguage` to obtain the active language. Used for displaying multilingual text in user interfaces.",
      "description_length": 280,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_common.Browser_action",
      "library": "ezjs_extension.chrome-common",
      "description": "This module provides a browser action API for handling user interactions with browser extensions. It includes a function to set an action handler for when a browser action is clicked, operating on tab data to perform per-tab operations. Use it to implement context-aware actions like injecting scripts or modifying tab content on user click.",
      "description_length": 341,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chrome_common.Tabs",
      "library": "ezjs_extension.chrome-common",
      "description": "This module provides functions to create and manipulate browser tabs, including setting properties like URL, index, and window ID. It supports event handlers for tab lifecycle changes such as creation, removal, activation, and updates, as well as actions like injecting CSS or connecting to a tab's runtime. Use cases include building browser extensions that need to control tab behavior, track user activity across tabs, or modify content dynamically.",
      "description_length": 452,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_common.Windows",
      "library": "ezjs_extension.chrome-common",
      "description": "This module provides functions to create and update browser windows with specific dimensions, focus states, and window types. It works with JavaScript objects representing window configurations and event callbacks. Concrete use cases include opening new browser windows with predefined sizes, updating the position and state of existing windows, and handling window lifecycle events such as creation, removal, and focus changes.",
      "description_length": 428,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_common.Storage",
      "library": "ezjs_extension.chrome-common",
      "description": "This module provides direct access to browser storage areas such as `local`, `sync`, and `managed`, allowing data persistence and retrieval across browser sessions. It works with JavaScript-compatible data structures through the `Ezjs_min` bindings, enabling interaction with the Chrome storage API. Concrete use cases include saving user preferences, caching application state, and synchronizing settings across devices using the browser's built-in storage mechanisms.",
      "description_length": 469,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_common",
      "library": "ezjs_extension.chrome-common",
      "description": "This module contains submodules for interacting with browser tabs, windows, runtime, storage, internationalization, and browser actions. It enables tab manipulation, window management, extension messaging, persistent data storage, localization, and user-triggered actions. Use it to build browser extensions that control navigation, manage UI state, and integrate with browser features like sync and i18n.",
      "description_length": 405,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Browser.I18n",
      "library": "ezjs_extension.browser",
      "description": "This module handles internationalization tasks such as retrieving localized messages, detecting UI language, and identifying the language of provided text. It works with strings for message keys and substitutions, and uses callbacks for handling arrays of supported languages. Concrete use cases include displaying translated UI elements, formatting language-specific content, and adapting application behavior based on the user's language preferences.",
      "description_length": 452,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser.Storage",
      "library": "ezjs_extension.browser",
      "description": "This module provides direct access to browser storage areas like `localStorage`, `sessionStorage`, and managed storage through operations such as `get`, `set`, `remove`, and `clear`. It works with key-value pairs where values can be arbitrary serializable data, and supports querying storage usage in bytes. Concrete use cases include persisting user preferences, caching application state, and managing session data across page reloads.",
      "description_length": 437,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser.Browser_action",
      "library": "ezjs_extension.browser",
      "description": "This module controls browser action UI elements like title, icon, popup, and badge properties for tabs or windows. It supports operations to set and retrieve badge text, colors, and images, as well as enable or disable actions based on tab or window context. Use cases include updating a browser extension's toolbar icon dynamically, displaying notification counts via badges, and conditionally enabling features based on tab state.",
      "description_length": 432,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Browser.Windows",
      "library": "ezjs_extension.browser",
      "description": "This module provides functions to create, update, and manage browser windows, including setting window properties like position, size, and focus state. It works with window objects and related data structures to handle window lifecycle events such as creation, removal, and focus changes. Concrete use cases include opening new windows with specific dimensions, updating the position of existing windows, and tracking focus shifts between windows.",
      "description_length": 447,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser.Tabs",
      "library": "ezjs_extension.browser",
      "description": "This module provides functionality for creating and managing browser tabs, including operations to create tabs with custom properties, modify their state (e.g., hide, move, reload), execute scripts, capture screenshots, and adjust zoom settings. It works with tab and window identifiers, tab properties, and event listeners to handle state changes or user interactions. Specific use cases include browser extensions that automate tab workflows, enhance web content dynamically, or generate PDF exports of pages.",
      "description_length": 511,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser.Runtime",
      "library": "ezjs_extension.browser",
      "description": "This module enables browser extension lifecycle management, inter-component messaging, and native communication with external applications using JavaScript objects, strings, and extension-specific types. It supports runtime configuration adjustments, platform information retrieval, package directory access, and cross-process coordination between extensions, browsers, and host systems. Key scenarios include real-time message passing, extension update monitoring, and seamless integration with host operating environments.",
      "description_length": 524,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser",
      "library": "ezjs_extension.browser",
      "description": "This module provides direct access to browser extension APIs for managing runtime lifecycle, tabs, windows, storage, internationalization, and UI actions through typed OCaml bindings. It works with JavaScript objects, strings, key-value pairs, tab and window identifiers, and extension-specific types to enable precise control over browser behavior. Concrete use cases include building extensions that automate tab workflows, persist user settings across sessions, display localized content, and dynamically update browser UI elements like badges and icons.",
      "description_length": 557,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chrome_lwt.Storage",
      "library": "ezjs_extension.chrome-lwt",
      "description": "This module provides Lwt-based asynchronous operations for interacting with browser storage areas, including `local`, `sync`, and `managed` storage. It supports getting, setting, removing, and clearing key-value pairs, as well as querying storage usage in bytes. Concrete use cases include persisting user preferences, caching data across sessions, and managing extension settings in a browser environment.",
      "description_length": 406,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chrome_lwt.I18n",
      "library": "ezjs_extension.chrome-lwt",
      "description": "Handles internationalization tasks such as retrieving localized strings, detecting languages, and fetching UI language settings. Works with strings, lists of strings, and Lwt promises for asynchronous operations. Concrete use cases include displaying translated messages, identifying user interface languages, and determining the language of provided text content.",
      "description_length": 364,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chrome_lwt.Windows",
      "library": "ezjs_extension.chrome-lwt",
      "description": "This module manages browser windows, allowing creation, modification, and querying of window properties such as position, size, and focus state. It supports event handling for window lifecycle events and provides typed access to window metadata. Concrete use cases include opening new windows with specified dimensions, updating the state of existing windows, and tracking focus changes across windows.",
      "description_length": 402,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_lwt.Tabs",
      "library": "ezjs_extension.chrome-lwt",
      "description": "This module enables managing browser tab lifecycles, state, and interactions through operations like creation, navigation, script execution, and event monitoring (e.g., activation, updates, removal). It works with tab identifiers, configuration records, and Lwt promises to handle asynchronous actions, supporting features like CSS injection, zoom control, and cross-script messaging. Typical use cases include automating tab workflows, capturing visual states, and building extensions that react to or manipulate browser tab behavior dynamically.",
      "description_length": 547,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_lwt.Runtime",
      "library": "ezjs_extension.chrome-lwt",
      "description": "This module facilitates managing extension lifecycle events (e.g., reloads, restarts) and establishing inter-process communication channels via message ports and events, operating on JavaScript values and strings using Lwt-based asynchronous patterns. It interacts with browser runtime components such as extension IDs, manifests, platform details, and native applications, supporting use cases like update checks, uninstall URL configuration, and coordinating background page interactions.",
      "description_length": 490,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome_lwt",
      "library": "ezjs_extension.chrome-lwt",
      "description": "This module provides direct access to browser extension APIs for handling runtime lifecycle, tab management, persistent storage, window manipulation, and internationalization. It works with JavaScript values, strings, tab and window identifiers, storage areas, and Lwt promises to enable asynchronous interactions. Concrete use cases include tracking tab updates, persisting user settings across sessions, opening and resizing browser windows, handling extension reloads, and retrieving localized strings for UI elements.",
      "description_length": 521,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Extension_utils.Tabs",
      "library": "ezjs_extension.common",
      "description": "This module creates configuration objects for querying and scripting browser tabs. It provides functions to build detailed query parameters and script injection settings with optional fields. Use it to target specific tabs by properties like URL or window ID, or customize script execution context.",
      "description_length": 298,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Extension_utils.Browser",
      "library": "ezjs_extension.common",
      "description": "This module handles browser-specific error reporting and event listener management. It defines an error type with message, file, and line number fields, and provides conversions to and from JavaScript-compatible representations. It also supports adding, removing, and checking event listeners for browser events with up to three arguments.",
      "description_length": 339,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Extension_utils.Runtime",
      "library": "ezjs_extension.common",
      "description": "This module provides functions to convert between OCaml and JavaScript representations of platform and connection information. It works with records containing OS, architecture, and NaCl architecture strings, as well as opaque types for platform and connection info used in JavaScript interop. Concrete use cases include initializing connection objects for browser extensions and translating runtime environment data between OCaml and JS.",
      "description_length": 438,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Extension_utils",
      "library": "ezjs_extension.common",
      "description": "This module provides operations for handling browser errors with structured error types and JavaScript conversions, managing event listeners for browser events with up to three arguments, creating tab query and script injection configurations, and converting platform/connection data between OCaml and JavaScript. It works with records for error details, tab query parameters, and runtime environment information. Use it to implement browser extension features like error reporting, event handling, tab manipulation, and cross-language data translation.",
      "description_length": 553,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Declarative_content",
      "library": "ezjs_extension.declarative-content",
      "description": "This module creates and manages content-based rules for browser extensions, allowing precise URL and page state matching through declarative conditions. It supports operations like showing actions, setting icons, and injecting scripts based on specified criteria. Concrete use cases include triggering UI elements or content scripts when visiting specific URLs or matching CSS selectors.",
      "description_length": 387,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_lwt.Storage",
      "library": "ezjs_extension.browser-lwt",
      "description": "This module provides Lwt-based asynchronous operations for interacting with browser storage areas, including local, sync, and managed storage. It supports getting, setting, removing, and clearing key-value pairs, as well as querying storage usage in bytes. Use cases include persisting user preferences, caching data across sessions, and managing extension settings in a browser environment.",
      "description_length": 391,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_lwt.Windows",
      "library": "ezjs_extension.browser-lwt",
      "description": "This module manages browser windows by providing functions to create, update, and remove windows with specific configurations such as position, size, and focus state. It supports event handling for window lifecycle events like creation, removal, and focus changes, and allows querying of window information. Concrete use cases include opening new windows with custom dimensions, tracking focus changes across windows, and retrieving metadata about existing windows.",
      "description_length": 465,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_lwt.I18n",
      "library": "ezjs_extension.browser-lwt",
      "description": "This module handles internationalization tasks in a browser environment using Lwt for asynchronous operations. It provides functions to retrieve localized messages, detect UI language, and identify acceptable languages. Concrete use cases include dynamically loading translations, formatting language-specific content, and adapting interfaces based on browser settings.",
      "description_length": 369,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_lwt.Runtime",
      "library": "ezjs_extension.browser-lwt",
      "description": "This module provides operations for managing extension lifecycles, facilitating inter-extension communication through messaging, and controlling browser pages. It works with JavaScript values, Lwt promises, and specialized types for interacting with browser extension APIs. These capabilities support tasks like checking for updates, exchanging data between contexts, and accessing platform-specific information or extension resources.",
      "description_length": 435,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_lwt",
      "library": "ezjs_extension.browser-lwt",
      "description": "This module provides direct access to browser extension APIs for storage, tabs, windows, internationalization, and runtime management using Lwt for asynchronous operations. It works with JavaScript values, Lwt promises, and specialized types to interact with browser APIs for tasks like persisting user settings, manipulating browser windows, exchanging messages between extensions, and handling localization. Concrete use cases include saving extension state across sessions, opening and managing browser windows with specific configurations, and dynamically loading language-specific UI content.",
      "description_length": 597,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Storage_local_lwt",
      "library": "ezjs_extension.local-lwt",
      "description": "This module provides Lwt-based asynchronous operations for interacting with local storage, including retrieving values by key or object, setting and removing key-value pairs, and clearing storage. It works with JavaScript objects and strings, using optional callbacks for side effects. Concrete use cases include persisting user preferences, caching data, and managing state in client-side web applications.",
      "description_length": 407,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_common.I18n",
      "library": "ezjs_extension.browser-common",
      "description": "Handles internationalization by providing functions to retrieve localized messages and the current UI language. Works with strings and language-specific resources. Used to display translated text in the user interface based on the browser's language settings.",
      "description_length": 259,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_common.Storage",
      "library": "ezjs_extension.browser-common",
      "description": "This module provides direct access to browser storage areas such as `localStorage`, `syncStorage`, and `managedStorage` through typed bindings. It allows reading, writing, and observing changes to stored values using the `storageArea` type from `Ezjs_min`. Concrete use cases include persisting user preferences, caching data across sessions, and managing extension-wide settings in a type-safe way.",
      "description_length": 399,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_common.Browser_action",
      "library": "ezjs_extension.browser-common",
      "description": "This module provides functions to manipulate browser action UI elements such as setting the title, icon, popup, and badge text or color. It works with optional tab and window identifiers to target specific contexts, and uses promises for asynchronous operations like setting icons from image data. Concrete use cases include updating the browser action's appearance in response to user interactions or tab changes, and handling click events on the browser action.",
      "description_length": 463,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_common.Windows",
      "library": "ezjs_extension.browser-common",
      "description": "This module handles window creation and management in a browser environment, offering functions to configure window properties like position, size, focus, and URL. It works with window objects and event callbacks, enabling operations such as opening new windows, updating existing ones, and tracking window lifecycle events. Concrete use cases include launching popups with specific dimensions, adjusting window focus, and reacting to window creation or removal.",
      "description_length": 462,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_common.Tabs",
      "library": "ezjs_extension.browser-common",
      "description": "This module manages tab creation, visibility, and content updates through operations like inserting CSS, toggling reader mode, and repositioning tabs, while also handling events for tab activation, removal, and state changes. It works with tab identifiers, window contexts, and state data to enable dynamic interactions such as tracking zoom levels or responding to tab replacements. Use cases include browser extensions that require programmatic tab management, content injection, or lifecycle monitoring for user activity tracking.",
      "description_length": 533,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_common.Runtime",
      "library": "ezjs_extension.browser-common",
      "description": "This module provides operations for interacting with the browser runtime environment, including retrieving runtime information, managing extensions, and handling communication between components. It works with JavaScript-compatible data types through the `Ezjs_min` module and supports concrete use cases like reloading extensions, connecting to ports, and responding to installation or update events. Functions enable event-driven behavior such as handling messages, managing suspend/resume cycles, and reacting to external connections.",
      "description_length": 537,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Browser_common",
      "library": "ezjs_extension.browser-common",
      "description": "This module provides low-level access to browser features including tab management, window control, runtime interaction, storage access, internationalization, and browser action customization. It operates on structured data types like tab and window identifiers, storage areas, and localized strings, enabling direct manipulation of browser state and UI elements. Use cases include building extensions that dynamically manage tabs, persist user settings, respond to browser events, or adapt interface elements based on context.",
      "description_length": 527,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome.I18n",
      "library": "ezjs_extension.chrome",
      "description": "This module handles internationalization tasks such as retrieving localized messages, detecting languages, and accessing UI language settings. It works with strings, arrays of strings, and callback functions for handling asynchronous results. Concrete use cases include displaying translated UI elements, determining user language preferences, and automatically adapting content based on detected language.",
      "description_length": 406,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome.Windows",
      "library": "ezjs_extension.chrome",
      "description": "This module manages browser windows, allowing creation, modification, and retrieval of window properties such as size, position, and focus state. It supports operations like opening new windows with specified dimensions, updating existing window attributes, and querying window information. Concrete use cases include controlling window layout in a multi-window application, tracking focus changes, and restoring window states.",
      "description_length": 427,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome.Tabs",
      "library": "ezjs_extension.chrome",
      "description": "This module provides functions for creating, managing, and interacting with browser tabs, including navigation controls, script execution, and zoom adjustments. It operates on tab identifiers and properties to enable use cases like automating tab workflows, building extensions that respond to tab state changes, or manipulating web content programmatically. Key capabilities include handling tab lifecycle events, querying tab information, and sending messages between scripts and the browser.",
      "description_length": 494,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chrome.Browser_action",
      "library": "ezjs_extension.chrome",
      "description": "This module manages browser action UI elements like icons, badges, and popups for extensions. It provides functions to set and retrieve titles, icons, popups, and badge text or colors, with optional tab-specific targeting. Use cases include updating a browser action's appearance in response to user interaction or tab changes, such as displaying notification counts or enabling/disabling based on context.",
      "description_length": 406,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chrome.Storage",
      "library": "ezjs_extension.chrome",
      "description": "This module provides direct access to browser storage areas like `local`, `sync`, and `managed`, allowing data persistence across sessions. It supports operations to get, set, remove, and clear key-value pairs, as well as retrieve storage usage metrics. Concrete use cases include saving user preferences, caching application state, and synchronizing data across devices using the browser's built-in storage APIs.",
      "description_length": 413,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chrome",
      "library": "ezjs_extension.chrome",
      "description": "This module provides direct access to core browser capabilities through submodules for tabs, storage, windows, internationalization, and browser actions. It enables precise control over tab navigation, window layout, persistent data storage, language adaptation, and extension UI elements. Use cases include automating browser interactions, building cross-device extensions, and creating localized, multi-window applications with dynamic UI updates.",
      "description_length": 449,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Storage_local",
      "library": "ezjs_extension.local",
      "description": "This module provides direct access to client-side storage mechanisms, allowing values to be set, retrieved, and removed using string keys. It supports operations for handling individual items, arrays, and objects, with optional callbacks for asynchronous completion. Concrete use cases include persisting user preferences, caching data across sessions, and managing state in single-page applications.",
      "description_length": 400,
      "index": 44,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 193,
    "meaningful_modules": 45,
    "filtered_empty_modules": 148,
    "retention_rate": 0.23316062176165803
  },
  "statistics": {
    "max_description_length": 597,
    "min_description_length": 259,
    "avg_description_length": 439.6666666666667,
    "embedding_file_size_mb": 0.6525135040283203
  }
}