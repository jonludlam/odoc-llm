{
  "package": "expect_test_helpers_core",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-15T12:16:55.690468",
  "modules": [
    {
      "module_path": "Expect_test_helpers_core.Allocation_limit",
      "library": "expect_test_helpers_core",
      "description": "Sets limits on memory allocation for tests by specifying major or minor heap word counts. Accepts values of type `t`, which represents allocation thresholds in either major or minor garbage collection terms. Use to constrain test memory usage during execution.",
      "description_length": 260,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Expect_test_helpers_core",
      "library": "expect_test_helpers_core",
      "description": "This module offers tools to normalize and stabilize test output by transforming strings and s-expressions to mask non-deterministic data like temporary file paths or memory addresses, while providing assertion helpers for validating options, results, exceptions, and properties of Core containers. It supports operations on data structures such as maps, sets, and hash tables, with utilities for verifying serialization round-trips (bin-io, sexp), enforcing memory allocation constraints, and generating diagnostics for test failures. Specific use cases include stabilizing output in tests involving ephemeral data, ensuring",
      "description_length": 624,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Expect_test_helpers_base.CR",
      "library": "expect_test_helpers_core.expect_test_helpers_base",
      "description": "This module defines a variant type `t` with constructors like `CR`, `CR_soon`, and `Comment` to control output normalization in expectation tests. It includes functions like `sexp_of_t` for S-expression conversion and `hide_unstable_output` to suppress non-deterministic parts of test output. It is used to manage expected test output formatting, particularly in test cases where certain values may vary unpredictably across runs.",
      "description_length": 430,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Expect_test_helpers_base.Sexp_style",
      "library": "expect_test_helpers_core.expect_test_helpers_base",
      "description": "This module defines styles for formatting S-expressions in expectation tests, including `To_string_mach`, `To_string_hum`, and configurable pretty-printing via `Sexp_pretty.Config`. It provides the `sexp_of_t` function to convert these styles into S-expressions and includes predefined configurations like `default_pretty` and `simple_pretty`. Use cases include controlling output formatting in `let%expect_test` blocks for readable and consistent test outputs.",
      "description_length": 461,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Expect_test_helpers_base.Phys_equal",
      "library": "expect_test_helpers_core.expect_test_helpers_base",
      "description": "This module provides a concrete implementation of equality checking and S-expression conversion for values of type `M.t`, using physical equality for comparisons. It is designed for use within expectation tests to produce precise output when values are expected to be physically equal. The module wraps an existing module `M` to expose its type and functions in a test-friendly manner.",
      "description_length": 385,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Expect_test_helpers_base",
      "library": "expect_test_helpers_core.expect_test_helpers_base",
      "description": "This module offers utilities to normalize S-expressions and strings, manage conditional assertions, and validate data transformations in test environments. It operates on structured data like booleans, options, results, sets, and exceptions, while supporting arbitrary types through first-class modules to ensure consistent test output by eliminating non-deterministic elements such as file paths or line numbers. These tools are used to verify correctness",
      "description_length": 456,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 624,
    "min_description_length": 260,
    "avg_description_length": 436.0,
    "embedding_file_size_mb": 0.08734798431396484
  }
}