{
  "package": "starpath",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:14:08.321383",
  "modules": [
    {
      "module_path": "Starpath.FileCombinators",
      "library": "starpath",
      "description": "This module provides monadic parser combinators for processing token streams with positional tracking, enabling operations like chaining parsers, handling errors, and managing optional values. It works with token sequences and file positions to build structured parsers for inputs like configuration files or custom data formats, supporting repetition, recursion, and precise error reporting. Specific functions such as `repeat`, `fix`, and `parse_error` facilitate robust parsing of hierarchical or context-sensitive file structures.",
      "description_length": 534,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Starpath.StringCombinators",
      "library": "starpath",
      "description": "This module offers parser combinator functions for constructing complex string parsers using character tokens and position tracking. It supports operations like sequencing, alternation, repetition, and error handling, working with monadic parsers that consume string input to produce typed results or errors. Typical applications include parsing structured text formats, tokenizing input with precise error reporting, and building recursive-descent parsers for custom grammars.",
      "description_length": 477,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Starpath.Make",
      "library": "starpath",
      "description": "This module provides monadic parsing combinators for constructing composable parsers that process token sequences and track positional information. It includes operations for error handling, alternative parser selection, repetition, token filtering, and position-aware value extraction, enabling use cases like parsing structured text formats, configuration files, or domain-specific languages. The library operates on streams of tokens and positions, producing typed values while supporting end-of-input validation and optional element handling.",
      "description_length": 546,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Starpath.FilePos",
      "library": "starpath",
      "description": "This module represents and manipulates file positions in a structured format. It provides functions to create a position from a string, compare two positions, and convert a position back to a string. It is used to track locations in source files, such as for error reporting or text processing tools.",
      "description_length": 300,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Starpath.CharToken",
      "library": "starpath",
      "description": "This module defines a character token type and provides a function to convert tokens to their string representation. It works directly with individual characters as tokens. Useful for parsing or lexing workflows where characters need to be uniformly handled and displayed.",
      "description_length": 272,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Starpath.MakeChar",
      "library": "starpath",
      "description": "This library provides parser combinators for constructing character-based parsers that process token sequences with positional information. It supports operations like sequencing, choice, repetition, and error handling, while tracking source positions for error reporting, and works with token streams derived from `Starpath.CharToken`. Typical use cases include building custom parsers for textual formats, implementing domain-specific languages with precise error messages, and handling recursive grammars through fixed-point combinators.",
      "description_length": 540,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Starpath.StringPos",
      "library": "starpath",
      "description": "This module defines a type `t` representing positions within a string and provides operations to create, compare, and convert these positions. It includes a function `pos0` to generate an initial position, `compare` to determine the order of positions, and `string_of_pos` to convert a position to a string. It is used for tracking and manipulating indices in string processing tasks, such as parsing or text analysis.",
      "description_length": 418,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Starpath",
      "library": "starpath",
      "description": "This module provides character token handling, position tracking in strings and files, and parser combinators for building structured text parsers with precise error reporting. It works with character tokens, string positions, and file positions to support parsing workflows that require positional context. Concrete use cases include implementing custom language parsers, processing configuration files, and extracting structured data from textual input with detailed error diagnostics.",
      "description_length": 487,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 546,
    "min_description_length": 272,
    "avg_description_length": 446.75,
    "embedding_file_size_mb": 0.11632537841796875
  }
}