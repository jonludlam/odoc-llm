{
  "package": "hardcaml-yosys",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 114,
  "creation_timestamp": "2025-06-18T16:50:50.432801",
  "modules": [
    {
      "module_path": "HardCamlYosys.Techlib.Proof.Make.P",
      "description": "Provides operations to transform and extract values from a container type that holds pairs of strings and integers. Includes mapping functions that apply transformations to elements or combine elements from two containers. Converts the container to a list for direct manipulation or processing.",
      "description_length": 294,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Proof.Make.I",
      "description": "Provides operations to transform and extract values from a container type that holds elements of a single type. Supports mapping over elements, combining two containers with a binary function, and converting the container to a list. Works with any data type wrapped in the container, enabling processing of structured data like pairs of strings and integers.",
      "description_length": 358,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Proof.Make.O",
      "description": "Creates a structure that holds a collection of key-value pairs, where each key is a string and the value is an integer. Applies transformations to elements within the structure, supports combining two structures with a binary function, and converts the structure to a list of values. Used to process and aggregate data from multiple sources into a unified format.",
      "description_length": 363,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Proof.Make.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameter support, returning a string and a cell transformer. It operates on `Cell.t` and signal types from HardCaml, enabling low-level circuit construction. Used to encapsulate logic for generating hardware descriptions from cell-based components.",
      "description_length": 326,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Lut.P",
      "description": "Provides operations to transform and extract values from a container type that holds pairs of strings and integers. Supports mapping over elements, combining elements from two containers, and converting the container to a list. Used to process structured data in workflows involving key-value pairs with integer values.",
      "description_length": 319,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Lut.I",
      "description": "Provides operations to transform and extract values from a container type that holds pairs of strings and integers. Includes mapping functions that apply transformations to elements or combine elements from two containers. Converts the container to a list of values for direct manipulation.",
      "description_length": 290,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Lut.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Works with a polymorphic type that holds a list of tuples, enabling mapping over elements and converting to a list. Used to process and convert data structures in data transformation pipelines.",
      "description_length": 303,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Lut.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized inputs, returning a string and a function that transforms a cell. It operates on `Cell.t` and signal types from the HardCaml library. This is used to encapsulate hardware generation logic for circuit components.",
      "description_length": 302,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dffsr.P",
      "description": "Provides operations to transform and extract values from a container type that holds pairs of strings and integers. Supports mapping over elements, combining two containers with a binary function, and converting the container to a list. Used to process structured data in workflows requiring key-value transformations.",
      "description_length": 318,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dffsr.I",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Includes mapping functions that apply transformations to elements and combine two structured values. Converts the structured data into a list for direct manipulation or processing.",
      "description_length": 304,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dffsr.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Applies functions to individual elements, combines elements from two structures, and converts the structure to a list. Used to process and manipulate collections of string-int pairs in data transformation workflows.",
      "description_length": 325,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dffsr.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameter support, returning a name and a transformation function for cells. It operates on `Cell.t` and signal types from the HardCaml library. Used to encapsulate hardware generation logic for circuit elements with parameterized behavior.",
      "description_length": 317,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Concat.P",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Includes mapping functions that apply transformations to individual elements or combine elements from two structures. Converts the structure into a list for direct manipulation or processing.",
      "description_length": 315,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Concat.I",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Includes mapping functions that apply transformations to elements and combine two structured data types. Converts the structured data into a list for direct manipulation or processing.",
      "description_length": 308,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Concat.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. It supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Used to process and aggregate data from a collection of labeled integers.",
      "description_length": 307,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Concat.W",
      "description": "Wraps a function that takes a cell and generates a signal, returning a string identifier and a transformation function for cells. It operates on custom types including `Cell.t` and signal parameters from the HardCaml library. This is used to encapsulate and label circuit components during hardware description generation.",
      "description_length": 322,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Op1.P",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Works with a polymorphic type that holds a list of tuples, enabling mapping over elements and combining two structures element-wise. Used to process and aggregate data from paired string-int entries into different formats.",
      "description_length": 332,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Op1.I",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Includes mapping functions that apply transformations to elements and combine two structured values. Converts the structured data into a list for direct manipulation or processing.",
      "description_length": 304,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Op1.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Works with a type that encapsulates a list of tuples, enabling processing of paired data.",
      "description_length": 320,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Op1.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized behavior, returning a string identifier and a transformation function for cells. It operates on cell structures and combinational signal types from the HardCaml library. This is used to encapsulate hardware generation logic for circuit elements with dynamic parameterization.",
      "description_length": 366,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Slice.P",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Works with a type that encapsulates a list of tuples, enabling processing of string-int pairs in bulk.",
      "description_length": 333,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Slice.I",
      "description": "Provides operations to transform and extract values from a container type that holds pairs of strings and integers. Includes mapping functions that apply transformations to elements or combine elements from two containers. Converts the container to a list for direct manipulation or processing.",
      "description_length": 294,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Slice.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Works with a type that encapsulates a list of tuples, enabling processing of string-int pairs and similar composite data.",
      "description_length": 352,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Slice.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized behavior, returning a string identifier and a transformation function for cells. It operates on custom cell structures and parameterized signal types from the HardCaml library. This is used to encapsulate hardware generation logic for circuit components with dynamic configurations.",
      "description_length": 373,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Mux.P",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Works with a type that encapsulates a list of tuples, enabling processing of string-int pairs in batch operations.",
      "description_length": 345,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Mux.I",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Includes mapping functions that apply transformations to individual elements or combine elements from two structures. Converts the structure into a list for direct manipulation or processing.",
      "description_length": 315,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Mux.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Works with a type that encapsulates a list of tuples, enabling processing of paired data.",
      "description_length": 320,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Mux.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized behavior, returning a string identifier and a transformation function for cells. It operates on `Cell.t` and signal types from the HardCaml library, enabling low-level circuit construction. This is used to encapsulate custom logic for hardware description, such as implementing specific gate behaviors or data path elements.",
      "description_length": 415,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Memrd.P",
      "description": "Provides operations to transform and extract values from a tagged data structure containing pairs of strings and integers. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Used to process and aggregate key-value data in a functional pipeline.",
      "description_length": 314,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Memrd.I",
      "description": "Provides operations to transform and extract values from a structured data type representing a collection of key-value pairs. Supports mapping over elements, combining two collections element-wise, and converting the structure to a list. Works with a type that encapsulates a list of tuples, enabling processing of string-int pairs and similar heterogeneous data.",
      "description_length": 363,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Memrd.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Works with a polymorphic variant type that holds a string and an integer, enabling mapping over its contents. Used to convert structured data into lists or apply transformations to individual elements.",
      "description_length": 311,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Memrd.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized inputs, returning a string and a function to transform cells. It operates on `Cell.t` and combinational signal types from HardCaml. Used to encapsulate hardware generation logic for circuit elements with dynamic parameters.",
      "description_length": 314,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dffe.P",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Used to process and aggregate key-value data in a functional pipeline.",
      "description_length": 315,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dffe.I",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Supports mapping over elements, combining elements from two structures, and converting the structure to a list. Used to process and aggregate key-value data in a functional pipeline.",
      "description_length": 306,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dffe.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Works with a polymorphic type that holds a list of tuples, enabling mapping over elements and converting to a list. Used to process and convert data structures in scenarios requiring element-wise transformation and extraction.",
      "description_length": 336,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dffe.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized behavior, returning a name and a transformation function for cells. It operates on cell structures and signals defined in HardCaml's signal system. This is used to encapsulate hardware generation logic for reusable circuit components.",
      "description_length": 325,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Mem.P",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Works with a type that encapsulates a list of tuples, enabling processing of string-int pairs and similar composite data.",
      "description_length": 352,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Mem.I",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Includes mapping functions that apply transformations to individual elements or combine elements from two structures. Converts the structure into a list for direct manipulation or processing.",
      "description_length": 315,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Mem.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Works with a polymorphic type that holds a list of tuples, enabling mapping over elements and combining two structures element-wise. Used to process and convert data collections into lists or transformed formats.",
      "description_length": 322,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Mem.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized behavior, returning a name and a transformation function for cells. It operates on cell structures and parameterized signal types from the HardCaml library. This is used to encapsulate hardware generation logic for circuit components.",
      "description_length": 325,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Op2.P",
      "description": "Provides operations to transform and extract values from a tagged data structure, including mapping over elements, combining two structures with a function, and converting to a list. Works with a polymorphic type that wraps values and associates them with a string and integer identifier. Used to process structured data in scenarios requiring element-wise transformation and aggregation.",
      "description_length": 388,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Op2.I",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Includes mapping functions that apply transformations to elements and combine elements from two structures. Converts the structure into a list for direct manipulation or processing.",
      "description_length": 305,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Op2.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Works with a polymorphic type that holds a list of tuples, enabling mapping over elements and combining structures. Used to process and convert data for reporting or data transformation tasks.",
      "description_length": 302,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Op2.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameter and input dependencies, returning a string and a cell transformation. It operates on cell structures and signal types from the HardCaml library. This is used to encapsulate hardware generation logic for circuit elements.",
      "description_length": 307,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Pmux.P",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Works with a polymorphic type that holds a list of tuples, supporting mapping functions over elements and combining two structures element-wise. Used to process and aggregate data from structured records into lists or transformed formats.",
      "description_length": 348,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Pmux.I",
      "description": "Provides operations to transform and extract values from a container type that holds pairs of strings and integers. Includes mapping functions that apply transformations to elements or combine elements from two containers. Converts the container to a list for direct manipulation or processing.",
      "description_length": 294,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Pmux.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. It supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Works with a type that encapsulates a collection of string-int pairs.",
      "description_length": 303,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Pmux.W",
      "description": "Wraps a function that takes a cell and generates a signal, returning a string identifier and a transformation function for cells. It operates on custom cell types and signal parameters defined within the HardCaml framework. This is used to encapsulate and reuse circuit components during hardware design.",
      "description_length": 304,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Fa.P",
      "description": "Provides operations to transform and extract values from a tagged data structure containing pairs of strings and integers. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Used to process and aggregate key-value data in a functional pipeline.",
      "description_length": 314,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Fa.I",
      "description": "Provides operations to transform and extract values from a container type that holds pairs of strings and integers. Includes mapping functions that apply transformations to elements or combine elements from two containers. Converts the container to a list for direct manipulation or processing.",
      "description_length": 294,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Fa.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Works with a polymorphic type that holds a list of tuples, enabling mapping over elements and combining two structures element-wise. Used to process and aggregate data from structured records into lists or transformed formats.",
      "description_length": 336,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Fa.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized behavior, returning a string identifier and a transformation function for cells. It operates on `Cell.t` and combinational signal types from the HardCaml library. This is used to encapsulate hardware generation logic for circuit elements with dynamic parameterization.",
      "description_length": 359,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dff.P",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Works with a type that encapsulates a list of tuples, enabling processing of paired string-int data.",
      "description_length": 331,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dff.I",
      "description": "Provides operations to transform and extract values from a container type that holds pairs of strings and integers. Includes mapping functions that apply transformations to elements or combine elements from two containers. Converts the container to a list for direct manipulation or processing.",
      "description_length": 294,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dff.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Supports mapping over elements, combining two structures element-wise, and converting the structure to a list. Works with a type that encapsulates a collection of (string * int) pairs.",
      "description_length": 294,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dff.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized behavior, returning a string identifier and a transformation function for cells. It operates on `Cell.t` and signal types from the HardCaml library, enabling low-level circuit construction. This is used to encapsulate custom logic for hardware description, allowing integration with existing signal processing pipelines.",
      "description_length": 411,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Memwr.P",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Works with tuples of strings and integers, enabling data processing tasks like aggregating or reshaping tabular information.",
      "description_length": 355,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Memwr.I",
      "description": "Provides operations to transform and extract values from a structured data type representing a collection of key-value pairs. Supports mapping over elements, combining two collections with a binary function, and converting the structure to a list. Works with a polymorphic type that holds a list of tuples.",
      "description_length": 306,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Memwr.O",
      "description": "Processes key-value pairs where each entry is a string and an integer. Applies transformations to elements and combines values from two structures. Converts the structure into a list for direct manipulation or output.",
      "description_length": 217,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Memwr.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized behavior, returning a name and a transformation function for cells. It operates on cell structures and signals with parameterized types from the HardCaml library. This is used to encapsulate hardware generation logic for circuit components.",
      "description_length": 331,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Lcu.P",
      "description": "Provides operations to transform and extract values from a tagged data structure, including mapping over elements, combining two structures with a binary function, and converting to a list. Works with a polymorphic type that wraps a value of any type. Used to process collections of key-value pairs by applying functions to their elements or merging them with related data.",
      "description_length": 373,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Lcu.I",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Includes mapping functions that apply transformations to elements and combine two structured values. Converts the structured data into a list for direct manipulation or processing.",
      "description_length": 304,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Lcu.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Applies functions to individual elements, combines elements from two structures, and converts the structure to a list. Used to process and aggregate data from paired string-int entries.",
      "description_length": 295,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Lcu.W",
      "description": "Wraps a function that takes a cell and generates a signal with parameter and input dependencies, returning a string and a transformed cell. It operates on custom cell types and signal structures from HardCaml. This is used to encapsulate circuit components for synthesis and verification workflows.",
      "description_length": 298,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Adff.P",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Includes mapping functions that apply transformations to individual elements or combine elements from two structures. Converts the structure into a list for direct manipulation or processing.",
      "description_length": 315,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Adff.I",
      "description": "Provides operations to transform and extract values from a structured data type representing a collection of key-value pairs. Supports mapping over elements, combining two collections element-wise, and converting the structure to a list. Works with a polymorphic type that holds pairs of strings and integers.",
      "description_length": 309,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Adff.O",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Works with a polymorphic type that holds a list of tuples, supporting mapping functions over elements and combining two structures element-wise. Used to process and convert data for reporting or data transformation pipelines.",
      "description_length": 335,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Adff.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized behavior, returning a string identifier and a transformation function for cells. It operates on custom cell structures and parameterized signal types from the HardCaml library. This is used to encapsulate hardware generation logic for circuit elements in a structured, type-safe manner.",
      "description_length": 377,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Proof.Make",
      "description": "Combines container transformations, key-value aggregation, and function wrapping to process structured data and hardware descriptions. Supports mapping, combining, and converting containers of pairs, single values, or key-value pairs into lists, and applies functions to cell-based signals. Operations include element-wise transformations, binary combinations, and value extraction for data manipulation. Can aggregate integer counts from multiple sources, process string-int pairs, and generate hardware signals from cell configurations.",
      "description_length": 538,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Wrapper",
      "description": "Provides operations to transform and extract values from a wrapped structure, including mapping over elements, combining two structures with a binary function, and converting to a list. Works with a polymorphic type that encapsulates a value of any type. Used to process collections of key-value pairs by applying functions to their elements or merging multiple structures.",
      "description_length": 373,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Op1",
      "description": "combines operations for processing key-value pair structures and hardware signal generation, offering polymorphic transformations, element-wise combinations, and conversions to lists. it supports mapping, merging with binary functions, and encapsulating cell-based signal logic with dynamic parameters. users can aggregate paired data, manipulate structured values, and generate hardware descriptions with customizable behavior. examples include converting string-int pairs to lists, merging two structures with a custom function, and generating combinational signals from cell definitions.",
      "description_length": 590,
      "index": 70,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Op2",
      "description": "Combines operations for transforming and extracting values from structured data, including tagged values, string-int pairs, and key-value pairs. Supports mapping, combining, and converting structures to lists, with polymorphic types that allow flexible data manipulation. Enables processing of hardware generation logic through cell transformations and signal dependencies. Can be used to aggregate structured data, generate circuit descriptions, or convert complex types into usable formats.",
      "description_length": 492,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Fa",
      "description": "Combines operations for processing key-value data structures, enabling mapping, element-wise combination, and conversion to lists. Works with polymorphic types containing string-int pairs, supporting transformations and aggregation. Can merge two structures using a custom function or extract values for further processing. Also includes a wrapper for hardware signal generation, transforming cells into parameterized combinational signals.",
      "description_length": 440,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Lcu",
      "description": "Encapsulates operations for manipulating structured data, including mapping, combining, and converting to lists. Handles polymorphic wrappers, string-int pairs, and key-value pairs, enabling transformations and aggregations. Supports circuit component abstraction through function wrapping and signal generation. Can process collections, merge data, and generate output for synthesis or analysis.",
      "description_length": 396,
      "index": 73,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Slice",
      "description": "Encapsulates operations for processing structured key-value data, including mapping, combining with binary functions, and converting to lists. Handles types that represent string-int pairs and similar composite data, enabling bulk transformations and element-wise operations. Supports combining two structures and converting them for direct manipulation. Also includes functionality for wrapping hardware generation logic with parameterized signals and cell transformations.",
      "description_length": 474,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Concat",
      "description": "Combines operations for manipulating structured data types containing string-integer pairs and key-value mappings, offering transformations, element-wise combinations, and list conversions. Supports mapping over elements, merging structures with custom functions, and extracting values for further processing. Enables tasks such as aggregating labeled data, transforming paired values, and generating labeled signals for hardware descriptions. Processes data through functions that operate on custom types and integrates with circuit design workflows.",
      "description_length": 551,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Mux",
      "description": "Encapsulates key-value pair processing with operations for mapping, combining, and converting to lists, working with structured data types that hold string-int tuples. Supports batch transformations and element-wise combinations, enabling efficient manipulation of paired data. Also integrates with hardware description through cell-based signal transformations, allowing custom logic implementation via parameterized functions. Examples include merging two data structures, extracting values for processing, and generating circuit elements from cell operations.",
      "description_length": 562,
      "index": 76,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Pmux",
      "description": "combines operations for processing key-value structures and string-int pairs, enabling mapping, combining, and conversion to lists. It supports polymorphic transformations and element-wise operations on nested data, along with signal generation for hardware components. Users can aggregate data from records, merge containers, or generate reusable circuit elements. Examples include converting a key-value list to a transformed format or creating a signal from a cell with a custom function.",
      "description_length": 491,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Lut",
      "description": "Encapsulates operations for processing key-value pairs stored in containers, enabling mapping, combining, and conversion to lists. Supports transformations on string-int pairs and polymorphic tuple lists, allowing flexible data manipulation. Can integrate with hardware description logic by wrapping functions that generate signals from cell structures. Examples include merging two containers, extracting integer values, and generating circuit components from data.",
      "description_length": 466,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dff",
      "description": "Encapsulates key-value pair processing with operations for mapping, combining, and converting to lists, working with structured data types containing (string * int) pairs. Supports element-wise combination of two structures and integrates with signal processing pipelines through cell transformations and combinational logic generation. Enables manipulation of paired data for both software and hardware applications, including circuit construction. Examples include merging two key-value structures, extracting values into a list, and generating custom signal transformations.",
      "description_length": 577,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dffe",
      "description": "Combines operations for processing key-value data structures, enabling mapping, merging, and conversion to lists. Supports polymorphic tuple-based data and includes hardware-related signal transformations. Can aggregate and manipulate structured data or generate reusable circuit components. Examples include transforming key-value pairs, merging two data sets, and encapsulating hardware logic with parameterized signals.",
      "description_length": 422,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Dffsr",
      "description": "Encapsulates operations for manipulating structured data containing string-int pairs, supporting mapping, combination, and conversion to lists. Provides functions to transform individual elements, merge structures, and interface with hardware generation logic through cell-based transformations. Enables data processing workflows by applying custom functions and combining values from multiple sources. Examples include converting a structure to a list of pairs, merging two structures with a custom function, and generating hardware signals from cell configurations.",
      "description_length": 567,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Adff",
      "description": "combines operations for processing structured data types, including pairs of strings and integers, key-value collections, and tuple lists, with support for mapping, combining, and conversion to lists. it enables transformations on elements, element-wise combinations, and integration with hardware signal generation through parameterized functions. examples include converting structured data to lists, merging key-value pairs, and generating combinational signals from cell structures. it supports both data manipulation and hardware description tasks with polymorphic and custom types.",
      "description_length": 587,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Memwr",
      "description": "Processes key-value pairs through transformation, combination, and conversion operations, supporting both fixed-tuple and polymorphic structures. It handles string-int pairs and list-based collections, enabling tasks like data aggregation, reshaping, and signal generation. Operations include mapping, zipping with binary functions, and list conversion for flexible data manipulation. It supports hardware-related transformations by wrapping cell-based combinational signals with parameterized behavior.",
      "description_length": 503,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Memrd",
      "description": "combines operations for processing structured key-value data, including mapping, combining, and converting to lists, with support for string-int pairs and heterogeneous collections. it handles polymorphic variants and nested data structures, enabling transformations and aggregation in functional workflows. it also integrates with hardware description logic through cell-based combinational signals. examples include merging two data structures, extracting values into lists, and generating dynamic circuit elements from parameterized functions.",
      "description_length": 546,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib.Mem",
      "description": "Combines key-value pair processing with functional transformations, allowing mapping, element-wise combination, and list conversion. Operates on polymorphic tuple lists and hardware-related cell structures, supporting both data manipulation and circuit logic encapsulation. Enables tasks like converting string-int pairs to lists, merging two data structures with custom functions, and generating hardware signals with parameterized behavior. Provides direct control over data flow and hardware abstraction through unified operations.",
      "description_length": 534,
      "index": 85,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Proof.P",
      "description": "Provides operations to transform and extract values from a container type that holds pairs of strings and integers. Includes mapping functions that apply transformations to elements or combine elements from two containers. Converts the container to a list for direct manipulation or processing.",
      "description_length": 294,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib.Proof.I",
      "description": "Creates a structure that holds a collection of key-value pairs, where each key is a string and the value is an integer. Applies transformations to elements within the structure, combines elements from two structures, and converts the structure to a list. Used to process and manipulate grouped data in scenarios like configuration settings or tabular data.",
      "description_length": 356,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Proof.O",
      "description": "Creates a structure that holds a collection of key-value pairs where each key is a string and the value is an integer. Applies transformations to elements within the structure, supports combining two structures with a function, and converts the structure to a list of values. Used to process and aggregate data from structured key-value pairs efficiently.",
      "description_length": 355,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Proof.W",
      "description": "Wraps a function that takes a cell and generates a combinational signal with parameterized behavior, returning a string identifier and a transformation function for cells. It operates on `Cell.t` and combinational signal types from the HardCaml library. This is used to encapsulate hardware generation logic for circuit elements with dynamic parameterization.",
      "description_length": 359,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Lvt.Make.Wr",
      "description": "Provides operations to transform and extract values from a tagged structure containing a string and integer. Works with the `t` type, which wraps a value of any type alongside a string and integer. Enables mapping over wrapped values, combining two tagged structures with a function, and converting the structure to a list.",
      "description_length": 323,
      "index": 90,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Lvt.Make.Rd",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Supports mapping over elements, combining two structures element-wise, and converting to a list. Used to process and manipulate collections of (string, int) pairs in data transformation workflows.",
      "description_length": 306,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Lvt.Multiport_regs.Wr",
      "description": "Provides operations to transform and extract values from a tagged data structure, including mapping over elements, combining two structures with a function, and converting to a list. Works with a polymorphic type that wraps values, allowing transformations while preserving the tag. Used to process collections of named values, such as converting key-value pairs into different formats or combining data from multiple sources.",
      "description_length": 426,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Lvt.Multiport_regs.Rd",
      "description": "Provides operations to transform and extract values from a structured data type representing key-value pairs. Supports mapping over elements, combining two structures with a function, and converting to a list. Used to process and manipulate collections of string-int pairs in data processing pipelines.",
      "description_length": 302,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Lvt.Make_wren.Wr",
      "description": "Provides operations to transform and extract values from a tagged structure containing a string and integer. Works with the `t` type, which wraps a value of any type alongside a string and integer. Enables mapping over wrapped values, combining two tagged structures with a function, and converting to a list of unwrapped values.",
      "description_length": 329,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Lvt.Make_wren.Rd",
      "description": "Provides operations to transform and extract values from a structured data type representing pairs of strings and integers. Supports mapping over elements, combining two structures with a binary function, and converting the structure to a list. Used to process and aggregate key-value data in configurations or datasets.",
      "description_length": 320,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Import.I",
      "description": "The module offers functions for manipulating ordered maps through key-value operations such as insertion, deletion, lookup, and transformation, with support for lazy or physical equality checks. It works with sorted structures, enabling tasks like min/max key retrieval, map splitting, and value-based function application. These capabilities are suited for scenarios requiring efficient dynamic data management with ordered access, such as maintaining sorted datasets or performing key-driven data processing.",
      "description_length": 510,
      "index": 96,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Import.S",
      "description": "This module provides operations for managing ordered maps, including creating, modifying, and querying key-value bindings, as well as merging and transforming maps through folds, filters, and iterations. It works with ordered maps featuring specific key types, enabling efficient traversal and manipulation via sequence-based constructs. Use cases include dynamic data structure management, efficient membership checks, and hierarchical data transformations where ordered key access is critical.",
      "description_length": 495,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Simlib",
      "description": "Encapsulates operations for processing key-value pairs, string-int tuples, and structured data, enabling mapping, element-wise combination, and list conversion. Supports polymorphic transformations and integrates with hardware signal generation through cell-based logic and parameterized functions. Users can merge data structures, extract values, and generate circuit descriptions by applying custom functions. Examples include converting key-value pairs to lists, combining two structures with a binary function, and generating combinational signals from cell definitions.",
      "description_length": 574,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Techlib.Proof",
      "description": "Combines container and key-value operations to manipulate structured data, with support for transforming, merging, and converting elements. Key types include containers of string-int pairs, key-value maps, and cell-based combinational signals, each offering mapping, merging, and conversion capabilities. Users can process grouped data, generate hardware descriptions, or combine structured information dynamically. Examples include aggregating configuration values, generating circuit logic, and extracting transformed lists from complex data structures.",
      "description_length": 555,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Lvt.Wr",
      "description": "Provides operations to transform and extract values from a tagged structure containing a string and integer. Works with the polymorphic variant type 'a t, which wraps a value alongside a string identifier. Enables mapping over tagged values, combining two tagged structures, and converting them to lists for processing.",
      "description_length": 319,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Lvt.Rd",
      "description": "Provides operations to transform and extract values from a tagged data structure, including mapping over elements, combining two structures with a function, and converting to a list. Works with a polymorphic type that associates values with string identifiers. Used to process structured data like configuration records or labeled datasets.",
      "description_length": 340,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Lvt.Multiport_regs",
      "description": "Provides access to register configuration parameters, including address bits, data bits, and total register count. Operates on integer values representing hardware-specific register settings. Used to configure memory-mapped I/O interfaces in embedded systems.",
      "description_length": 259,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Lvt.Make",
      "description": "Provides bitwise operations for manipulating and extracting specific bit ranges from integers. Works with integer data types to handle low-level bit manipulation. Used in protocol parsing and hardware interface code to isolate and process individual bits.",
      "description_length": 255,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Lvt.Make_wren",
      "description": "Provides constants for architecture-specific bit widths, including address bits, data bits, and total size. Works with integer values representing hardware or system configuration parameters. Used to configure memory models or interface with low-level system components.",
      "description_length": 270,
      "index": 104,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Yosys_atd_t",
      "description": "Provides functions to parse and manipulate hardware description data, including extracting port directions, handling bit lists, and accessing cell attributes. Works with custom types such as `bits`, `port`, `cell`, and `modl` derived from JSON structures. Used to process and transform Yosys-generated abstract syntax trees for analysis or code generation.",
      "description_length": 356,
      "index": 105,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Yosys_atd_j",
      "description": "This module provides serialization, deserialization, and string conversion operations for hardware design elements like nets, cells, ports, and attributes, along with generic types such as `dyn` and `param_value`, utilizing binary buffers and JSON parsing. It enables structured handling of hierarchical design data in Yosys ATD workflows, supporting tasks like parsing and manipulating low-level representation details in digital circuit descriptions.",
      "description_length": 452,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Io",
      "description": "Reads a Yosys ATD format structure from an input channel and writes a Yosys ATD structure to an output channel, enabling serialization and deserialization of hardware description data. Works with in_channel and out_channel for I/O operations and Yosys_atd_t.t for representing parsed or generated hardware models. Used to load and save circuit descriptions in tools processing digital design data.",
      "description_length": 397,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Lvt",
      "description": "Provides constants for the number of address bits, data bits, and total size in a memory model. Works with integer values representing hardware or system configuration parameters. Used to configure memory interfaces and validate data width constraints.",
      "description_length": 252,
      "index": 108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Cell",
      "description": "Extracts net identifiers from Yosys dynamic data, constructs parameter lists with signal types, partitions input and output ports of Yosys cells, and builds cell representations from Yosys cell structures. Operates on Yosys_atd_t.cell, int lists, and parameter value tuples. Used to translate Yosys cell definitions into internal signal-based representations for circuit synthesis.",
      "description_length": 381,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "HardCamlYosys.Techlib",
      "description": "Processes key-value pairs, string-int tuples, and structured data with mapping, merging, and conversion operations. Supports polymorphic transformations, cell-based signal generation, and dynamic data combination. Users can convert key-value structures to lists, merge data with custom functions, and generate hardware descriptions from cell definitions. Examples include aggregating configuration values, combining structured data with binary functions, and extracting transformed lists from complex nested structures.",
      "description_length": 519,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys.Import",
      "description": "combines key-value operations for ordered maps, supporting insertion, deletion, lookup, and transformation with options for lazy or physical equality. It enables efficient management of sorted data through min/max retrieval, splitting, and value-based function application. Operations include merging, folding, filtering, and iterating over ordered structures, facilitating dynamic data handling and hierarchical transformations. Examples include maintaining sorted datasets, performing key-driven data processing, and efficiently managing membership in ordered collections.",
      "description_length": 574,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "hardcaml-yosys",
      "description": "Reads Verilog files, parses them into a structural netlist, and converts the netlist into a JSON format for further processing. Works with Verilog syntax, structural circuit representations, and JSON data structures. Enables integration of Verilog designs into HardCaml workflows, excluding tri-state buffer support.",
      "description_length": 316,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "HardCamlYosys",
      "description": "Processes Yosys ATD data through parsing, serialization, and transformation, handling hardware elements like cells, ports, and nets with custom types such as `bits`, `port`, `cell`, and `modl`. Supports operations like extracting net identifiers, managing parameter lists, and configuring memory models using integer constants. Enables tasks such as translating cell definitions into signal representations, merging key-value structures, and serializing circuit descriptions to and from input/output channels. Examples include validating data width constraints, generating hardware descriptions from cell definitions, and combining structured data with binary functions.",
      "description_length": 670,
      "index": 113,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 114,
    "meaningful_modules": 114,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 670,
    "min_description_length": 217,
    "avg_description_length": 368.50877192982455,
    "embedding_file_size_mb": 0.4072847366333008
  }
}