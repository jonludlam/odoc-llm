{
  "package": "usb",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:30:39.920124",
  "modules": [
    {
      "module_path": "USB.Class",
      "description": "This module provides operations to represent and convert USB device class codes, including a function to translate numeric identifiers into human-readable strings. It works with integer-based types to encode device classifications, serving as a foundational mechanism for device type identification. Use cases include system-level device management and protocol-specific interactions where numeric class codes need contextual interpretation.",
      "description_length": 441,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "USB.DT",
      "description": "Provides access to predefined constant values representing USB descriptor types, each encoded as an integer. Works with the `t` type, which is an alias for `int`, to uniquely identify different descriptor categories. Used to filter or match specific USB descriptors during device enumeration or data parsing.",
      "description_length": 308,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "USB.Request",
      "description": "Provides operations to manage device requests, including retrieving and modifying status, features, addresses, descriptors, configurations, and interfaces. Works with a request type representing a structured device interaction. Used to configure and control hardware devices during communication sessions.",
      "description_length": 305,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "usb",
      "description": "Provides functions for parsing and serializing USB descriptor structures, including device, configuration, interface, and endpoint descriptors. Operates on byte sequences and custom record types representing USB protocol data. Used to analyze USB device information from raw data streams or generate descriptors for device simulation.",
      "description_length": 334,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "USB",
      "description": "Encapsulates USB device interaction through type-safe representations of class codes, descriptor types, and device requests. It supports converting numeric identifiers to readable formats, filtering descriptors using integer constants, and managing device configurations via structured requests. Operations include translating class codes, identifying descriptor categories, and modifying device settings. Examples include parsing device descriptors, interpreting class-specific behavior, and adjusting device parameters during communication.",
      "description_length": 542,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 542,
    "min_description_length": 305,
    "avg_description_length": 386.0,
    "embedding_file_size_mb": 0.018591880798339844
  }
}