{
  "package": "usb",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:55:09.516689",
  "modules": [
    {
      "module_path": "USB.Request",
      "library": "usb",
      "description": "This module defines standard USB control request operations used to manage device state and configuration. It provides constants for common control transfers like getting/setting device status, features, addresses, descriptors, and interface settings. These operations target standard USB device entities such as endpoints and interfaces, enabling tasks like device enumeration, configuration, and runtime control.",
      "description_length": 414,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "USB.Class",
      "library": "usb",
      "description": "This module defines integer constants for categorizing USB device types, such as audio interfaces, human input devices, and storage peripherals, and provides a function to map these enumerated class codes to descriptive strings. It operates on a single enumerated type representing device classes, enabling straightforward classification and human-readable serialization. Typical applications include identifying device capabilities during USB enumeration or logging device metadata for debugging and user-facing diagnostics.",
      "description_length": 525,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "USB.DT",
      "library": "usb",
      "description": "This module defines descriptor types used in USB communication, such as device, configuration, interface, and endpoint descriptors. It provides specific constants to identify and handle different descriptor types during USB device enumeration and configuration. These values are used directly when parsing or constructing USB descriptor data structures in low-level device interactions.",
      "description_length": 386,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "USB",
      "library": "usb",
      "description": "The module provides low-level operations for USB device initialization, configuration, and communication, including kernel driver attachment, interface claiming, and error handling through exceptions. It manages structured descriptors (device, configuration, endpoint) and supports data transfer via bulk, interrupt, and control transfers, enabling tasks like device enumeration, endpoint management, and USB protocol implementation. Specific functionalities include setting device configurations, clearing endpoint halts, and handling synchronous data exchanges with timeout support.",
      "description_length": 584,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 584,
    "min_description_length": 386,
    "avg_description_length": 477.25,
    "embedding_file_size_mb": 0.05836200714111328
  }
}