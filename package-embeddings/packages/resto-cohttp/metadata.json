{
  "package": "resto-cohttp",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:03.848341",
  "modules": [
    {
      "module_path": "Resto_cohttp.Media_type.Make",
      "library": "resto-cohttp",
      "description": "This module handles media type negotiation and content encoding for HTTP requests and responses. It works with media ranges, quality parameters, and encoding schemes to select and construct appropriate content types based on client preferences. Concrete use cases include parsing and responding to HTTP `Accept` headers, selecting the best matching media type from a list, and encoding or decoding values to and from string or byte sequence representations.",
      "description_length": 457,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Resto_cohttp.Cors",
      "library": "resto-cohttp",
      "description": "This module implements CORS policies for HTTP responses by managing allowed headers and origins. It provides functions to add CORS headers to a response, check if a request's host is permitted, and define which domains and headers are authorized. Concrete use cases include securing API endpoints by restricting cross-origin requests to specific domains and enabling preflight checks for browser-based clients.",
      "description_length": 410,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp.Media_type",
      "library": "resto-cohttp",
      "description": "This module processes media type negotiation and content encoding for HTTP interactions, using media ranges, quality parameters, and encoding schemes. It enables parsing and responding to `Accept` headers, selecting the optimal media type from a set of options, and converting values to and from strings or byte sequences. Operations include matching client preferences against available types, applying quality factors, and handling content encoding transformations. For example, it can determine the best format to serve based on a client's `Accept: application/json;q=0.9,*/*;q=0.8` header or encode a data structure into JSON bytes.",
      "description_length": 636,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp",
      "library": "resto-cohttp",
      "description": "This module handles cross-origin resource sharing and content negotiation for HTTP services, enabling secure and flexible communication. It provides data types for representing CORS policies, media types, and encoding schemes, along with operations to validate origins, select preferred content types, and encode or decode data. Functions allow adding CORS headers to responses, choosing the best media type based on client preferences, and transforming data into byte sequences. For instance, it can restrict API access to specific domains, serve JSON or XML based on an `Accept` header, or compress response bodies according to client capabilities.",
      "description_length": 650,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 650,
    "min_description_length": 410,
    "avg_description_length": 538.25,
    "embedding_file_size_mb": 0.014920234680175781
  }
}