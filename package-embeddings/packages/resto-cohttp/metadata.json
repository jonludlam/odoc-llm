{
  "package": "resto-cohttp",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:30:23.081585",
  "modules": [
    {
      "module_path": "Resto_cohttp.Media_type.Make",
      "description": "Provides functions to create and transform typed values, convert between types with bidirectional mappings, and generate schema definitions from type representations. Works with polymorphic type constructors and schema structures for API description. Used to define request and response encodings for web services with explicit type conversions.",
      "description_length": 345,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Resto_cohttp.Cors",
      "description": "Provides functions to manage CORS headers, including adding allowed origins and headers, and checking if a request's host is permitted. Works with HTTP headers and a configuration type representing CORS policies. Used to enforce origin restrictions and header allowances in web server responses.",
      "description_length": 295,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Resto_cohttp.Media_type",
      "description": "Encodes and decodes values using polymorphic type constructors, supporting bidirectional type conversion and schema generation for API definitions. Key data types include type representations, schema structures, and encoded values, with operations for transformation, conversion, and schema extraction. It enables precise control over data encoding in web services, allowing custom type mappings and automatic schema derivation. For example, it can convert a JSON object to a typed OCaml record or generate a schema from a custom type definition.",
      "description_length": 546,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "resto-cohttp",
      "description": "Provides functions to define and handle HTTP/JSON RPC endpoints with type-safe request and response structures. Works with custom types representing service paths, query parameters, and JSON-encoded payloads. Used to build structured, compile-time-checked API interactions in Tezos-based applications.",
      "description_length": 301,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_cohttp",
      "description": "Manages HTTP request handling and response generation with support for CORS policy enforcement and data serialization. Processes HTTP headers and configuration to validate request origins and set appropriate response headers, while also encoding and decoding values using polymorphic types to ensure consistent data representation. Key operations include checking allowed origins, generating API schemas, and transforming data between OCaml types and external formats. For instance, it can restrict requests to specific domains and convert JSON payloads into typed records for easier processing.",
      "description_length": 595,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 595,
    "min_description_length": 295,
    "avg_description_length": 416.4,
    "embedding_file_size_mb": 0.018613815307617188
  }
}