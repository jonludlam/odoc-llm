{
  "package": "aws-sts",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 43,
  "creation_timestamp": "2025-08-15T12:34:49.475102",
  "modules": [
    {
      "module_path": "Aws_sts.Types.DecodeAuthorizationMessageResponse",
      "library": "aws-sts",
      "description": "This module handles decoding and encoding of STS authorization messages. It provides functions to parse XML responses into a structured format, convert the data to query parameters or JSON, and construct response objects. It works with AWS-specific string types and is used when processing temporary security credentials or federated access scenarios in AWS services.",
      "description_length": 367,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.GetSessionTokenResponse",
      "library": "aws-sts",
      "description": "This module handles responses from AWS STS GetSessionToken requests. It provides functions to construct, parse, and serialize session token responses, which include optional AWS credentials. Use it to process STS response data in XML or JSON format, or to generate query parameters for further requests.",
      "description_length": 303,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.RegionDisabledException",
      "library": "aws-sts",
      "description": "This module defines a type `t` representing an exception indicating a region is disabled, with an optional message field. It provides functions to construct, parse, and convert the exception to various formats like JSON and query parameters. Use this when handling AWS STS errors related to region availability, particularly for serializing and deserializing error responses.",
      "description_length": 375,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.AssumedRoleUser",
      "library": "aws-sts",
      "description": "This module defines a data structure for representing an assumed role user in AWS STS, with fields for the assumed role ID and ARN. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used when handling responses from AWS STS operations that return assumed role user information, such as AssumeRole or GetFederationToken.",
      "description_length": 386,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleRequest",
      "library": "aws-sts",
      "description": "This module defines a data structure for assuming an AWS role with specific fields like role ARN, session name, policies, and tags. It provides operations to create, parse, and serialize role assumption requests in various formats, including JSON and query parameters. Concrete use cases include configuring temporary AWS credentials with custom policies and tagging for federated or cross-account access scenarios.",
      "description_length": 415,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.IDPRejectedClaimException",
      "library": "aws-sts",
      "description": "This module defines a single data type representing an exception with an optional message string. It provides functions to construct, parse, and convert the exception to various formats including JSON, query parameters, and XML nodes. Use this module when handling identity provider claim rejection errors in AWS STS operations, particularly for serializing and deserializing error responses.",
      "description_length": 392,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.PackedPolicyTooLargeException",
      "library": "aws-sts",
      "description": "This module defines a specific error type for handling \"PackedPolicyTooLarge\" exceptions in AWS STS operations. It includes functions to construct, parse, and serialize the error, supporting XML, JSON, and query parameter formats. It is used when handling policy document size limits during AWS STS API calls like `AssumeRole`.",
      "description_length": 327,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.InvalidAuthorizationMessageException",
      "library": "aws-sts",
      "description": "This module defines a type `t` representing an invalid authorization message exception with an optional string message. It provides functions to construct, parse, and convert the exception to query parameters, JSON, or XML. Use this module when handling authorization errors in AWS STS operations that require structured error responses.",
      "description_length": 337,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetAccessKeyInfoRequest",
      "library": "aws-sts",
      "description": "This module defines a single data type `t` containing an `access_key_id` and provides functions to construct, parse, and serialize the structure. It supports converting the access key information to and from JSON and query string formats. It is used to retrieve metadata about an AWS access key, such as the associated account and user.",
      "description_length": 336,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleResponse",
      "library": "aws-sts",
      "description": "This module defines a response structure for an AWS STS assume role operation, containing credentials, an assumed role user, and an optional packed policy size. It provides functions to construct, parse, and serialize the response in various formats including JSON, query parameters, and XML. It is used to handle the output of assuming an IAM role programmatically when interacting with AWS services.",
      "description_length": 401,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.TagListType",
      "library": "aws-sts",
      "description": "This module handles lists of AWS STS tag structures, providing operations to convert tag lists to and from XML, JSON, and query parameters. It supports parsing tag data from XML nodes and constructing JSON or query representations for API requests. Use this module when working with AWS STS operations that require tagging resources, such as assuming roles with custom tags or listing tags for a session.",
      "description_length": 404,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.TagKeyListType",
      "library": "aws-sts",
      "description": "This module handles lists of string-based tag keys for AWS STS operations. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. It is used when managing temporary security credentials with tag-based filtering in AWS services.",
      "description_length": 291,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.IDPCommunicationErrorException",
      "library": "aws-sts",
      "description": "This module defines a type and associated operations for handling identity provider communication errors in AWS STS. It provides functions to create, parse, and serialize error objects that may contain an optional message string. Use cases include error handling during federated identity operations and translating between XML, JSON, and internal error representations.",
      "description_length": 370,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleWithSAMLRequest",
      "library": "aws-sts",
      "description": "This module defines a data structure for handling SAML-based role assumption requests, including fields like role ARN, principal ARN, and SAML assertion. It provides functions to construct, parse, and serialize these requests into formats such as JSON and query parameters. Use this module when integrating SAML authentication with AWS STS to assume roles programmatically.",
      "description_length": 373,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.GetAccessKeyInfoResponse",
      "library": "aws-sts",
      "description": "This module handles responses from retrieving AWS access key information, providing functions to create, parse, and serialize access key data. It works with XML, JSON, and query string formats for data interchange. Use this module to extract and manipulate access key details from AWS STS service responses.",
      "description_length": 307,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetFederationTokenRequest",
      "library": "aws-sts",
      "description": "This module defines a data structure for requesting a federated token in AWS STS, including fields for user name, policy, policy ARNs, duration, and tags. It provides functions to construct, parse, and serialize the request in various formats such as JSON and query parameters. Concrete use cases include generating secure, temporary credentials for federated users with specific permissions and session durations.",
      "description_length": 414,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.ExpiredTokenException",
      "library": "aws-sts",
      "description": "This module defines a type `t` representing an expired token exception with an optional message field. It provides functions to construct, parse, and convert the exception to and from XML, JSON, and query formats. It is used when handling errors related to expired security tokens in AWS STS operations.",
      "description_length": 303,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetCallerIdentityResponse",
      "library": "aws-sts",
      "description": "This module defines a data structure for storing the response from a caller identity request, including user ID, account, and ARN fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. Use this module when handling AWS STS GetCallerIdentity responses to extract and manipulate identity information programmatically.",
      "description_length": 379,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetSessionTokenRequest",
      "library": "aws-sts",
      "description": "This module defines the request structure for obtaining a session token, including optional fields like duration, serial number, and token code. It provides functions to construct, parse, and convert the request to query or JSON formats, and to create a request from JSON input. It is used when authenticating temporary credentials through AWS STS, particularly in scenarios involving multi-factor authentication or federated access.",
      "description_length": 433,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.InvalidIdentityTokenException",
      "library": "aws-sts",
      "description": "This module defines an exception type for handling invalid identity tokens in AWS STS operations. It includes functions to construct, parse, and serialize the exception, supporting XML and JSON formats for communication with AWS services. It is used when handling errors during token validation in federated identity workflows.",
      "description_length": 327,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.MalformedPolicyDocumentException",
      "library": "aws-sts",
      "description": "This module defines a specific error type for handling malformed policy documents in AWS STS operations. It includes functions to construct, parse, and serialize the error from XML, JSON, and query formats. It is used when processing failed STS requests due to invalid IAM policy syntax.",
      "description_length": 287,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.PolicyDescriptorType",
      "library": "aws-sts",
      "description": "This module defines a data structure representing a policy descriptor with an optional Amazon Resource Name (ARN). It includes functions to construct, serialize, and deserialize the structure for use in querying AWS services and processing JSON responses. Use this module when handling IAM policies in AWS STS operations like assuming roles with specific permissions.",
      "description_length": 367,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleWithWebIdentityRequest",
      "library": "aws-sts",
      "description": "This module defines a data structure for assuming an AWS role using a web identity token, including fields like role ARN, session name, and token. It provides functions to construct, parse, and convert the structure to query parameters or JSON for API requests. Use this when authenticating via federated identity providers such as Amazon Cognito or OpenID Connect.",
      "description_length": 365,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.DecodeAuthorizationMessageRequest",
      "library": "aws-sts",
      "description": "This module handles decoding AWS STS authorization messages by providing functions to construct, parse, and serialize requests containing an encoded message. It works with XML, JSON, and query string formats for data interchange, supporting AWS API communication. Use this module when processing temporary security credentials or federated user access scenarios in AWS services.",
      "description_length": 378,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleWithSAMLResponse",
      "library": "aws-sts",
      "description": "This module defines a response structure for SAML-based role assumption, containing credentials, role user info, policy size, and SAML subject details. It provides functions to construct, parse, and serialize the response for use in authentication workflows. Key operations include XML parsing, JSON conversion, and query parameter generation for AWS STS interactions.",
      "description_length": 368,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.PolicyDescriptorListType",
      "library": "aws-sts",
      "description": "This module represents a list of IAM policy descriptors and provides direct operations for converting policy descriptor lists to and from XML, JSON, and query formats. It works with lists of `PolicyDescriptorType.t` values, typically used when specifying managed policies in IAM role or user operations. Concrete use cases include serializing policy descriptor lists for AWS API requests and deserializing responses containing attached policies.",
      "description_length": 445,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleWithWebIdentityResponse",
      "library": "aws-sts",
      "description": "This module defines a data structure for handling responses from assuming an AWS role using a web identity token. It includes fields for credentials, identity token subject, role user info, policy size, provider, and audience. Operations include creating instances, parsing XML responses, converting to query parameters or JSON, and constructing from JSON. Use cases involve securely obtaining temporary AWS credentials for federated users in web applications or services.",
      "description_length": 472,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.FederatedUser",
      "library": "aws-sts",
      "description": "This module defines a federated user with fields for the user ID and ARN, providing functions to construct, parse, and convert the user data to query parameters, JSON, and XML. It works with string types for identity and resource naming, and integrates with AWS STS operations for federated authentication. Use this module to handle federated user credentials and responses in AWS STS workflows.",
      "description_length": 395,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetFederationTokenResponse",
      "library": "aws-sts",
      "description": "This module handles responses from AWS STS GetFederationToken requests. It defines a record type with optional credentials, federated user information, and packed policy size, along with functions to construct, parse, and serialize the response in various formats. It is used to process and transmit federated token data in AWS STS workflows.",
      "description_length": 342,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.Tag",
      "library": "aws-sts",
      "description": "This module defines a data structure for AWS STS tags, consisting of key-value pairs using AWS base string types. It provides functions to construct, parse, and convert tags to and from XML, JSON, and query formats. Use this module when handling tag data in STS operations like assuming roles or federating users with custom tag metadata.",
      "description_length": 338,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.Credentials",
      "library": "aws-sts",
      "description": "This module defines a data structure for AWS credentials, including access key ID, secret key, session token, and expiration. It provides functions to construct, parse, and convert credentials to and from XML, JSON, and query formats. Concrete use cases include handling temporary AWS credentials obtained via STS and serializing them for API requests or storage.",
      "description_length": 363,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetCallerIdentityRequest",
      "library": "aws-sts",
      "description": "This module handles the creation and transformation of a request to retrieve caller identity information from AWS STS. It provides operations to construct an empty request, convert it to query format or JSON, and parse responses. It works with unit type values, representing a request with no parameters, and interacts with AWS query and JSON formats for communication with the STS service.",
      "description_length": 390,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.AssumeRoleWithSAML",
      "library": "aws-sts",
      "description": "This module handles the process of assuming an AWS role using SAML authentication by providing functions to construct and interpret HTTP requests and responses. It works with input and output types specific to the `AssumeRoleWithSAML` operation, along with error handling tailored to this call. Use this module when integrating SAML-based federated identity workflows with AWS services that require temporary credentials.",
      "description_length": 421,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.AssumeRole",
      "library": "aws-sts",
      "description": "This module handles assuming an AWS role by defining the request and response types for the STS service. It provides functions to convert between HTTP requests and responses and their native OCaml representations, ensuring proper encoding and decoding. It is used to programmatically switch roles in AWS environments, handling the necessary request signing and response parsing.",
      "description_length": 378,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.GetAccessKeyInfo",
      "library": "aws-sts",
      "description": "This module handles the conversion of access key information requests to HTTP format and responses back to native types. It works with input and output types specific to retrieving access key metadata, along with internal error types for failure handling. Concrete use cases include making signed HTTP requests to AWS STS to fetch access key details and decoding the XML responses or errors returned by the service.",
      "description_length": 415,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.GetFederationToken",
      "library": "aws-sts",
      "description": "This module handles the conversion of federated token requests to HTTP and parsing of responses, specifically working with `GetFederationTokenRequest` and `GetFederationTokenResponse` types. It encodes input into signed HTTP requests using a specified signature version and service endpoint, and decodes XML responses into structured outputs or errors. It is used to programmatically obtain temporary security credentials for federated users from AWS STS.",
      "description_length": 455,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types",
      "library": "aws-sts",
      "description": "This module provides data structures and conversion utilities for AWS STS operations, focusing on credentials, policies, tags, and federated access. It supports serialization to and from XML, JSON, and query parameters, enabling tasks like assuming roles via SAML or web identity, managing temporary sessions, decoding authorization messages, and handling errors such as expired tokens or invalid access keys. Key structures include AssumedRoleUser, PolicyDescriptors, and TagLists, which are used to model temporary credentials, role assumptions, and metadata tagging workflows.",
      "description_length": 579,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.GetSessionToken",
      "library": "aws-sts",
      "description": "This module handles the retrieval of temporary AWS credentials by making a GetSessionToken request. It encodes input parameters into a properly signed HTTP request and decodes the corresponding response or error. It works directly with GetSessionTokenRequest and GetSessionTokenResponse types, handling errors specific to session token retrieval, such as expired credentials or invalid access.",
      "description_length": 393,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Errors_internal",
      "library": "aws-sts",
      "description": "This module defines error types for handling AWS STS service responses, including specific errors like `AuthFailure`, `ExpiredTokenException`, and `InvalidParameter`. It provides functions to convert errors to HTTP status codes, strings, and back from strings. Useful for parsing and responding to AWS STS API errors in applications that require precise error handling and diagnostics.",
      "description_length": 385,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.AssumeRoleWithWebIdentity",
      "library": "aws-sts",
      "description": "This module handles assuming an AWS role using a web identity provider by sending a signed HTTP request to the STS service. It works with input and output types specific to the `AssumeRoleWithWebIdentity` operation, including encoded query parameters and XML responses. Concrete use cases include federated identity authentication and temporary credential retrieval for web-based applications interacting with AWS services.",
      "description_length": 423,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.DecodeAuthorizationMessage",
      "library": "aws-sts",
      "description": "This module handles decoding AWS STS authorization messages by providing functions to convert input data into HTTP requests and HTTP responses into output or error types. It works with input and output types specific to the `DecodeAuthorizationMessage` operation, along with internal error types for handling failures. Concrete use cases include processing encoded authorization messages returned by AWS for debugging access denials and extracting structured information from them.",
      "description_length": 481,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.GetCallerIdentity",
      "library": "aws-sts",
      "description": "This module handles the retrieval of caller identity information from AWS STS by defining the input and output types for the operation, along with functions to serialize requests to HTTP and deserialize HTTP responses. It works directly with AWS STS response and error types, providing concrete mechanisms to sign and route the request to the appropriate service endpoint. Use this module when needing to programmatically determine the AWS account, user, or role associated with the credentials used to sign the request.",
      "description_length": 520,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts",
      "library": "aws-sts",
      "description": "This module implements AWS Security Token Service (STS) operations for obtaining and managing temporary credentials. It supports role assumption via SAML, web identity, and direct role ARN, along with federated token retrieval, caller identity resolution, and authorization message decoding. It works with structured types like access keys, session tokens, policies, and tags, handling HTTP serialization, request signing, and response parsing for AWS STS interactions.",
      "description_length": 469,
      "index": 42,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 43,
    "meaningful_modules": 43,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 579,
    "min_description_length": 287,
    "avg_description_length": 387.6511627906977,
    "embedding_file_size_mb": 0.6234560012817383
  }
}