{
  "package": "aws-sts",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 43,
  "creation_timestamp": "2025-07-15T23:13:07.966317",
  "modules": [
    {
      "module_path": "Aws_sts.Types.IDPRejectedClaimException",
      "library": "aws-sts",
      "description": "This module defines a type and conversion functions for handling IDP-rejected claim exceptions in AWS STS operations. It works with a single data type `t` that holds an optional string message, representing error details from an identity provider. Use this module to parse, serialize, and construct error responses when handling federated identity authentication failures in AWS STS workflows.",
      "description_length": 393,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.Tag",
      "library": "aws-sts",
      "description": "This module defines a data structure for AWS tags, consisting of key-value pairs of strings. It provides functions to create, parse, and convert tags to and from XML, JSON, and query formats. Use this module when working with AWS STS operations that require tagging resources or handling tag-based metadata.",
      "description_length": 307,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetAccessKeyInfoRequest",
      "library": "aws-sts",
      "description": "This module defines a request structure for retrieving access key information, containing a single access key ID. It provides functions to create, parse, and convert the request to query parameters or JSON format. Use this module when interacting with AWS STS operations that require access key metadata, such as auditing or validating temporary credentials.",
      "description_length": 358,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.PackedPolicyTooLargeException",
      "library": "aws-sts",
      "description": "This module defines a specific error type for handling \"PackedPolicyTooLarge\" exceptions in AWS STS operations. It includes functions to construct, parse, and serialize the error, supporting interaction with XML, JSON, and query string formats. It is used when handling policy size limits during AWS STS API calls like AssumeRole.",
      "description_length": 330,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.InvalidIdentityTokenException",
      "library": "aws-sts",
      "description": "This module defines a type `t` representing an invalid identity token exception with an optional message. It provides functions to construct, parse, and convert the exception to query parameters, JSON, or XML. Use this module when handling errors related to invalid identity tokens in AWS STS operations, such as failed federated identity requests.",
      "description_length": 348,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleResponse",
      "library": "aws-sts",
      "description": "This module defines a response type for assuming an IAM role, containing optional credentials, an assumed role user, and a packed policy size. It provides functions to construct, parse, and serialize the response in various formats including JSON, query parameters, and XML. It is used to handle the output of STS role assumption requests, enabling credential retrieval and role context management in AWS integrations.",
      "description_length": 418,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleWithSAMLRequest",
      "library": "aws-sts",
      "description": "This module defines a request structure for assuming an IAM role using SAML authentication. It includes fields for role and principal ARNs, SAML assertion, optional policies, and duration, with operations to construct, parse, and serialize the request for AWS STS API calls. It is used to programmatically obtain temporary credentials for federated users based on SAML assertions.",
      "description_length": 380,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetFederationTokenRequest",
      "library": "aws-sts",
      "description": "This module defines the request structure for obtaining a federated token, including fields for the user name, optional policy, policy ARNs, duration, and tags. It provides functions to construct, parse, and serialize the request for use with AWS STS operations. The module is used to configure and send GetFederationToken requests in AWS SDK workflows.",
      "description_length": 353,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleWithWebIdentityRequest",
      "library": "aws-sts",
      "description": "This module defines a data structure for making an AssumeRoleWithWebIdentity request, including fields like role ARN, session name, and identity token. It provides functions to construct, parse, and serialize the request for use with AWS STS operations. The module is used to obtain temporary credentials for federated users via web identity federation.",
      "description_length": 353,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetSessionTokenResponse",
      "library": "aws-sts",
      "description": "This module handles the response from an AWS STS get-session-token request. It provides functions to create, parse, and serialize a response containing optional session credentials. Use it when processing STS token responses in XML or JSON format, or when constructing query parameters for subsequent AWS requests.",
      "description_length": 314,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.ExpiredTokenException",
      "library": "aws-sts",
      "description": "This module defines a type `t` representing an expired token exception with an optional message. It provides functions to construct, parse, and convert the exception to and from XML, JSON, and query formats. It is used when handling errors related to expired security tokens in AWS STS operations.",
      "description_length": 297,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.IDPCommunicationErrorException",
      "library": "aws-sts",
      "description": "This module defines a type and associated functions for handling identity provider communication errors in AWS STS operations. It works with XML, JSON, and query string formats to enable error parsing and serialization. Concrete use cases include processing error responses from federated identity provider requests and converting them into structured data for further handling.",
      "description_length": 378,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.Credentials",
      "library": "aws-sts",
      "description": "This module defines a data structure for AWS credentials, including access key ID, secret access key, session token, and expiration. It provides functions to construct, parse, and convert credentials to and from XML, JSON, and query formats. Concrete use cases include handling temporary security credentials obtained from AWS STS and serializing them for API requests or storage.",
      "description_length": 380,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.MalformedPolicyDocumentException",
      "library": "aws-sts",
      "description": "This module defines a specific error type for handling malformed policy documents in AWS STS operations. It includes functions to construct, parse, and serialize the error, supporting interaction with XML, JSON, and query string formats. Use this when processing or responding to policy document validation errors from AWS STS services.",
      "description_length": 336,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleWithSAMLResponse",
      "library": "aws-sts",
      "description": "This module defines a response structure for SAML-based role assumption, containing credentials, role user info, policy size, and SAML subject details. It provides functions to construct, parse, and serialize the response for use in authentication workflows. Operations include converting to and from XML, JSON, and query formats for integration with AWS services.",
      "description_length": 364,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetCallerIdentityResponse",
      "library": "aws-sts",
      "description": "This module defines a data structure for storing the response from a caller identity request, including user ID, account, and ARN fields. It provides functions to construct, parse, and convert the structure to and from XML, JSON, and query formats. It is used to handle identity information returned by AWS STS API calls.",
      "description_length": 321,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleRequest",
      "library": "aws-sts",
      "description": "This module defines a data structure for assuming an AWS role with specific fields like role ARN, session name, policies, and tags. It provides operations to create, parse, and serialize role assumption requests in formats required for AWS API calls. Use this module when programmatically assuming IAM roles with custom policies, temporary credentials, or federated identity scenarios.",
      "description_length": 385,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.RegionDisabledException",
      "library": "aws-sts",
      "description": "This module defines a type `t` representing an error response when a region is disabled, containing an optional message. It provides functions to construct, parse, and serialize this error type to and from XML, JSON, and query formats. Use this module to handle region-disabled errors in AWS STS operations, particularly when interpreting service responses or building error-handling logic for region-specific failures.",
      "description_length": 419,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.TagListType",
      "library": "aws-sts",
      "description": "This module handles lists of AWS STS tag values, providing operations to convert between XML, JSON, and query formats. It supports parsing tag lists from XML nodes and converting them to JSON arrays or query parameters. Use this module when working with AWS STS operations that require tag list serialization or deserialization, such as assuming roles with tags or listing tags for a resource.",
      "description_length": 393,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.PolicyDescriptorListType",
      "library": "aws-sts",
      "description": "This module defines a list of policy descriptors and provides operations to construct, parse, and serialize them for use in AWS STS operations. It supports converting policy descriptor lists to and from XML, JSON, and query parameters, enabling interaction with AWS STS APIs that require policy attachments. Use cases include handling assume role policies and federated user permissions by serializing and deserializing policy references in API requests and responses.",
      "description_length": 468,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.TagKeyListType",
      "library": "aws-sts",
      "description": "This module handles lists of string-based tag keys for AWS STS operations. It provides functions to convert these lists to and from JSON and query parameters, as well as parsing from XML nodes. Use this module when working with AWS STS tag key lists in API requests or responses.",
      "description_length": 279,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.InvalidAuthorizationMessageException",
      "library": "aws-sts",
      "description": "This module defines a type and associated functions for handling invalid authorization message exceptions. It works with XML, JSON, and query string formats to serialize and deserialize exception data. Use this module when processing AWS STS authorization errors that need to be converted between different data representations.",
      "description_length": 328,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetSessionTokenRequest",
      "library": "aws-sts",
      "description": "This module defines a data structure for requesting temporary AWS credentials, specifically for the `GetSessionToken` operation. It includes fields for duration, MFA serial number, and token code, all optional. Operations include creating the request, parsing XML, converting to query parameters, and serializing to and from JSON.",
      "description_length": 330,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.PolicyDescriptorType",
      "library": "aws-sts",
      "description": "This module defines a data structure representing a policy descriptor with an optional Amazon Resource Name (ARN). It provides functions to construct, serialize, and deserialize this structure to and from XML, JSON, and query parameters. Use this module when working with AWS STS operations that require referencing IAM policies by ARN.",
      "description_length": 336,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.FederatedUser",
      "library": "aws-sts",
      "description": "This module defines a federated user with fields for the user ID and ARN, providing functions to construct, parse, and convert the user data to query parameters, JSON, or XML. It works with string types for user identifiers and AWS resource names. Use this module when handling federated user authentication responses from AWS STS, particularly when assuming roles or generating temporary credentials.",
      "description_length": 401,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.DecodeAuthorizationMessageRequest",
      "library": "aws-sts",
      "description": "This module handles decoding AWS STS authorization messages by providing functions to construct, parse, and serialize requests containing an encoded message string. It works with XML nodes, JSON values, and AWS query parameters to facilitate request creation and conversion between formats. Concrete use cases include processing authorization message responses from AWS services and converting them into structured data for further handling.",
      "description_length": 441,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.AssumedRoleUser",
      "library": "aws-sts",
      "description": "This module defines a data structure for representing an assumed role user in AWS STS, with fields for the role ID and ARN. It provides functions to construct, parse, and convert the structure to query parameters, JSON, and from JSON. It is used when handling responses from AWS STS operations that return assumed role user information, such as `AssumeRole`.",
      "description_length": 358,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.GetCallerIdentityRequest",
      "library": "aws-sts",
      "description": "This module handles the creation and transformation of a GetCallerIdentity request in AWS STS. It provides functions to convert the request into query parameters or JSON format, and to parse or construct the request. It works with unit type values, representing an empty request body, and interacts with AWS-specific data structures like `Aws.Query.t` and JSON objects.",
      "description_length": 369,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.AssumeRoleWithWebIdentityResponse",
      "library": "aws-sts",
      "description": "This module defines a response structure for assuming an AWS role using a web identity token. It includes fields for credentials, identity information, and role details, along with functions to construct, parse, and serialize the response for use in authentication workflows. Operations support converting the response to query parameters or JSON, and constructing it from XML or JSON input.",
      "description_length": 391,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetFederationTokenResponse",
      "library": "aws-sts",
      "description": "This module handles responses from AWS STS GetFederationToken requests by defining a record type with optional credentials, federated user details, and packed policy size. It provides functions to construct, parse, and convert the response to query parameters, JSON, or XML. Use this module when working with federated token workflows in AWS STS to manage temporary security credentials and user associations.",
      "description_length": 409,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types.GetAccessKeyInfoResponse",
      "library": "aws-sts",
      "description": "This module handles the response from an AWS STS GetAccessKeyInfo operation, primarily parsing and serializing the account information associated with an access key. It works with a custom type `t` that contains an optional string field for the AWS account ID. Use this module when retrieving and processing access key metadata from AWS STS, particularly for identifying the account owning a key.",
      "description_length": 396,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Types.DecodeAuthorizationMessageResponse",
      "library": "aws-sts",
      "description": "This module handles decoding and encoding of STS authorization message responses. It provides operations to create, parse, and convert the response type to query parameters, JSON, and XML. Use this module when processing AWS STS authorization messages to extract and serialize the decoded message content.",
      "description_length": 305,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.Errors_internal",
      "library": "aws-sts",
      "description": "This module defines a list of error types returned by AWS STS operations, such as `ExpiredTokenException` or `InvalidParameter`, along with utilities to convert errors to HTTP status codes, strings, and back. It works directly with the `t` sum type representing specific AWS STS service errors and strings for serialization and lookup. Concrete use cases include error handling in STS client code, mapping service responses to appropriate error codes, and parsing error strings from API responses.",
      "description_length": 497,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.GetFederationToken",
      "library": "aws-sts",
      "description": "This module handles the conversion and signing of requests to retrieve AWS federated tokens, encoding input parameters into HTTP requests and decoding responses into structured outputs or errors. It works with input and output types specific to the GetFederationToken operation, along with internal error types for precise error handling. It is used when generating temporary credentials for federated users, ensuring proper request signing and response parsing.",
      "description_length": 462,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.GetSessionToken",
      "library": "aws-sts",
      "description": "This module handles the conversion and signing of requests to obtain temporary AWS credentials via the `GetSessionToken` API. It works with input and output types specific to the STS service, encoding requests into HTTP format and decoding responses into structured results or errors. It is used to securely authenticate and authorize temporary access to AWS resources.",
      "description_length": 369,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.AssumeRoleWithSAML",
      "library": "aws-sts",
      "description": "This module handles the process of assuming an AWS role using SAML authentication by providing functions to construct and interpret HTTP requests and responses. It works with input and output types specific to the `AssumeRoleWithSAML` operation, along with error handling tailored to the AWS STS service. It is used when integrating SAML-based identity providers with AWS, allowing federated users to obtain temporary credentials programmatically.",
      "description_length": 447,
      "index": 35,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_sts.AssumeRole",
      "library": "aws-sts",
      "description": "This module handles assuming an AWS role by defining the input and output types for the operation, along with functions to convert between HTTP requests and native types. It works with STS (Security Token Service) role assumption requests and responses, encoded as structured types with fields like role ARN and session name. Concrete use cases include generating properly signed HTTP requests to obtain temporary credentials and parsing the resulting XML responses into typed outcomes.",
      "description_length": 486,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.DecodeAuthorizationMessage",
      "library": "aws-sts",
      "description": "This module handles decoding AWS STS authorization messages by providing functions to convert input data into HTTP requests and parse responses or errors from the service. It works with input and output types specific to the STS `DecodeAuthorizationMessage` operation, along with internal error types. It is used to securely retrieve and process decoded authorization details from AWS STS responses.",
      "description_length": 399,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.GetCallerIdentity",
      "library": "aws-sts",
      "description": "This module handles the retrieval of caller identity information from AWS STS by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with AWS STS response types and internal error representations, enabling precise handling of identity data and service-specific errors. It is used to make authenticated GetCallerIdentity API calls, extracting identity details like account ID, user ID, and ARN from the response.",
      "description_length": 502,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.Types",
      "library": "aws-sts",
      "description": "This module organizes data structures and error types used across AWS STS operations, combining core types with format conversion capabilities. It includes types like `t` for error handling, AWS credentials, tags, and request/response structures for role assumption, federated tokens, and session management. Operations support creating, parsing, and serializing these types to XML, JSON, and query formats, enabling seamless integration with AWS APIs. Examples include constructing SAML-based role assumption requests, handling \"PackedPolicyTooLarge\" errors, serializing tags for API calls, and parsing caller identity responses. Submodules extend functionality with specialized types for policies, tokens, and identity providers, ensuring comprehensive coverage of STS workflows.",
      "description_length": 781,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_sts.AssumeRoleWithWebIdentity",
      "library": "aws-sts",
      "description": "This module handles assuming an AWS role using a web identity provider by sending a signed HTTP request to the STS service. It encodes input parameters into a query string for the request and decodes the response into either a successful output or an error. It works with STS-specific input and output types, handling errors returned from the service.",
      "description_length": 351,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts.GetAccessKeyInfo",
      "library": "aws-sts",
      "description": "This module handles retrieving access key metadata by converting requests to HTTP format and parsing responses. It works with access key identifiers to fetch associated account and user information. Use it to validate access keys or audit key usage in AWS environments.",
      "description_length": 269,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_sts",
      "library": "aws-sts",
      "description": "This module provides functionality for interacting with AWS Security Token Service (STS) to obtain, manage, and decode temporary credentials using various authentication methods such as SAML, web identity providers, and session tokens. It defines core data types including error types like `ExpiredTokenException`, credential structures, and operation-specific inputs and outputs for actions like `GetFederationToken`, `AssumeRoleWithSAML`, and `GetCallerIdentity`. Operations include request signing, response decoding, error mapping to HTTP status codes, and serialization of policies and tags. Specific examples include assuming an IAM role via SAML to retrieve temporary credentials, decoding authorization messages for auditing, and fetching caller identity details for access control decisions.",
      "description_length": 800,
      "index": 42,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 43,
    "meaningful_modules": 43,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 800,
    "min_description_length": 269,
    "avg_description_length": 395.3720930232558,
    "embedding_file_size_mb": 0.15666770935058594
  }
}