{
  "package": "github-data",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 13,
  "creation_timestamp": "2025-06-18T16:33:25.649648",
  "modules": [
    {
      "module_path": "Github_json.Adapter.Ref",
      "description": "Converts JSON trees between a canonical format suitable for ATD serialization and a standard JSON representation. Operates on Yojson.Safe.t values, ensuring structural consistency for schema validation. Used to prepare JSON data for schema-based parsing and to revert processed data to its original form.",
      "description_length": 304,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_json.Adapter.Payload",
      "description": "Converts between real JSON structures and ATD-compliant representations using Yojson.Safe.t. Normalizes input by adjusting key naming and structure to match ATD conventions, then restores it to original formatting. Used to prepare JSON data for serialization and deserialization with ATD compilers.",
      "description_length": 298,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_json.Adapter.Issue_comment_event",
      "description": "Processes JSON data by transforming between real and ATD-compliant representations. Operates on Yojson.Safe.t values, adjusting structure to meet specific serialization requirements. Used to prepare data for parsing with ATD libraries and to revert processed data back to original format.",
      "description_length": 288,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_json.Adapter.Issues_event",
      "description": "Converts between real JSON structures and ATD-compliant representations using normalization and restoration. Operates on Yojson.Safe.t values, ensuring compatibility with ATD schema expectations. Used to prepare JSON data for schema validation and to revert processed data to its original format.",
      "description_length": 296,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_json.Adapter.Pull_request_event",
      "description": "Converts between real JSON structures and ATD-compliant representations using normalization and restoration. Operates on Yojson.Safe.t values, ensuring compatibility with specific schema expectations. Used to prepare and revert GitHub pull request event data for processing and storage.",
      "description_length": 286,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_json.Adapter.Pull_request_review_comment_event",
      "description": "Processes GitHub webhook JSON by normalizing and restoring its structure for consistent handling. Operates on Yojson.Safe.t values representing JSON data from pull request review comments. Used to standardize incoming event data before processing and to prepare output for external systems.",
      "description_length": 290,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_json.Adapter.Event",
      "description": "Converts between real JSON structures and ATD-compliant representations using JSON parsing and serialization. Operates on Yojson.Safe.t values to ensure compatibility with specific schema formats. Used to prepare JSON data for schema validation and to revert processed data back to its original form.",
      "description_length": 300,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github_json.Adapter.Hook",
      "description": "Converts JSON trees between a standard format and an ATD-compliant structure, ensuring compatibility with specific serialization needs. Operates on Yojson.Safe.t values, modifying their representation without altering content. Used to prepare JSON data for schema validation and to revert processed data back to its original form.",
      "description_length": 330,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_json.Adapter",
      "description": "Converts between standard JSON and ATD-compliant formats using Yojson.Safe.t, normalizing structures for schema validation and restoring original forms. Supports transformations that adjust key naming, nesting, and formatting to meet serialization requirements. Processes GitHub event data and general JSON structures, enabling consistent handling and storage. Examples include preparing pull request data for parsing and reverting serialized data to its original representation.",
      "description_length": 479,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "github-data",
      "description": "Provides functions to interact with GitHub's REST API, including fetching repository data, listing commits, and handling authentication tokens. Works with OCaml types defined in `lib/github.atd`, such as repository metadata, commit objects, and user information. Used to build tools for automated code reviews, CI integration, and token-managed Git operations.",
      "description_length": 360,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_t",
      "description": "This module provides structured data modeling for GitHub entities, including issues, pull requests, commits, repositories, and events, with nested and list-based types to represent complex relationships and API responses. It supports use cases like tracking collaboration workflows, managing CI/CD pipeline data, and handling authentication configurations through detailed object representations. The focus is on accurately reflecting GitHub's API outputs, such as commit statuses, check runs, and rate-limiting metrics, for integration and analysis purposes.",
      "description_length": 559,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_json",
      "description": "Converts JSON data to and from ATD-compliant formats using Yojson.Safe.t, adjusting key names, nesting, and structure for consistent processing. Handles GitHub event data and general JSON, enabling schema validation and restoration of original forms. Supports operations like normalizing pull request payloads and reconstructing serialized data. Examples include transforming event payloads for parsing and reverting changes to preserve original formatting.",
      "description_length": 457,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_j",
      "description": "The module provides serialization and deserialization functions for GitHub-related data types, including issues, repositories, users, events, and CI/CD workflows, using JSON as the format. It enables efficient conversion between OCaml values and JSON representations through buffer-based and string-based operations, supporting use cases like parsing webhooks, managing repository updates, and handling status checks.",
      "description_length": 417,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 559,
    "min_description_length": 286,
    "avg_description_length": 358.7692307692308,
    "embedding_file_size_mb": 0.04765605926513672
  }
}