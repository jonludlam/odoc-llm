{
  "package": "ssl",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:54:44.517040",
  "modules": [
    {
      "module_path": "Ssl.Runtime_lock",
      "library": "ssl",
      "description": "This module directly handles SSL communication operations like connecting, accepting, reading, and writing over SSL sockets without releasing the OCaml runtime lock, making it suitable for use with non-blocking sockets. It works with `Ssl.socket`, `Unix.sockaddr`, `Stdlib.Bytes.t`, `string`, and `Ssl.bigarray` types, offering precise control over data transmission and reception. Concrete use cases include implementing custom SSL clients and servers that require non-blocking I/O handling with direct buffer manipulation and efficient data transfer.",
      "description_length": 552,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ssl.Error",
      "library": "ssl",
      "description": "This module provides functions to retrieve and inspect SSL error codes and messages from the OpenSSL error queue. It works with error records containing library identifiers, reason codes, and associated string descriptions. Concrete use cases include diagnosing SSL handshake failures, certificate validation errors, and I/O operation issues by examining detailed error information from OpenSSL.",
      "description_length": 395,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ssl_threads",
      "library": "ssl",
      "description": "This module ensures thread safety for the OpenSSL library by initializing necessary locks and callbacks. It works directly with the internal state of the SSL library to coordinate access across threads. Concrete use cases include setting up secure communication channels in multi-threaded applications using SSL/TLS.",
      "description_length": 316,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ssl",
      "library": "ssl",
      "description": "This module enables secure communication through operations for configuring SSL/TLS contexts, managing certificates, and handling encrypted sockets. It works with SSL contexts, sockets, and certificates in PEM format, supporting protocol negotiation, cipher suites, and certificate verification. Specific use cases include establishing authenticated client-server connections, enforcing encryption policies via ALPN/SNI, and performing non-blocking I/O with direct buffer access through runtime locking.",
      "description_length": 503,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 552,
    "min_description_length": 316,
    "avg_description_length": 441.5,
    "embedding_file_size_mb": 0.05843162536621094
  }
}