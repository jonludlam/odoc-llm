{
  "package": "pp",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:00.556090",
  "modules": [
    {
      "module_path": "Pp.O",
      "library": "pp",
      "description": "This module defines the `++` infix operator for combining `Pp.t` values, allowing the sequential composition of pretty-printing documents. It works directly with the polymorphic `'tag Pp.t` type, enabling the construction of complex output by appending two documents. A concrete use case is formatting structured text where multiple `Pp.t` fragments, such as code blocks or expressions, are joined into a single document for final rendering.",
      "description_length": 441,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pp.Ast",
      "library": "pp",
      "description": "Handles the serialization and deserialization of pretty-printing documents by converting them into a stable, intermediate representation. Works with structured data like lists, variants, and custom abstract syntax trees (ASTs) to enable persistent storage or transmission of formatted documents. Useful for saving rendered configurations, logging structured output, or exchanging formatted data between systems.",
      "description_length": 411,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pp",
      "library": "pp",
      "description": "This module enables structured, layout-aware formatting through combinators that manage line wrapping, indentation, and box-based layouts using operations like concatenation, spacing, and tag-based transformations. It centers around the `'tag Pp.t` type, supporting document composition with infix operators and allowing tag manipulation to control styling or semantic annotations during rendering. Submodules facilitate document serialization into stable representations and provide operators for combining documents sequentially, enabling use cases like code formatting, structured content generation, and persistent storage of formatted output. Example usage includes building and rendering tagged documents with custom layout rules, concatenating fragments like code blocks, and serializing documents for logging or inter-process communication.",
      "description_length": 848,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 848,
    "min_description_length": 411,
    "avg_description_length": 566.6666666666666,
    "embedding_file_size_mb": 0.011297225952148438
  }
}