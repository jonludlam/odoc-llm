{
  "package": "gobba",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 31,
  "creation_timestamp": "2025-07-15T23:12:00.686486",
  "modules": [
    {
      "module_path": "Gobba.Util.Dict",
      "library": "gobba",
      "description": "This module implements a dictionary using a list of key-value pairs, providing operations for insertion, deletion, lookup, and traversal. It supports polymorphic keys and values, with functions to manipulate entries like `insert`, `delete`, `get`, and `exists`, along with bulk operations such as `insertmany`. Additional utilities include extracting keys or values, filtering by key list, and checking for duplicate keys.",
      "description_length": 422,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Parser.Incremental",
      "library": "gobba",
      "description": "This module provides an incremental parser entry point for processing sequences of commands starting at a given lexical position. It works with command lists and lexical positions, producing checkpoints for further parsing steps. A concrete use case is resuming parsing after partial input in interactive environments or error recovery scenarios.",
      "description_length": 346,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Completion.Trie",
      "library": "gobba",
      "description": "This module implements a trie data structure for efficient prefix-based string completion. It supports operations to insert strings, retrieve subtrees matching a prefix, and generate completion suggestions. The trie nodes store boolean flags to mark valid word endings and associate characters with child nodes. Use cases include auto-completing user input in a REPL or validating partial command names.",
      "description_length": 403,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Repl.StringSet",
      "library": "gobba",
      "description": "This module implements a string set data structure with standard operations such as membership testing, insertion, deletion, and set algebra (union, intersection, difference), along with functional transformations like mapping, folding, and predicate checks. It includes utilities for converting between sequences/lists and sets, enabling ordered processing and bulk operations on unique string collections. Use cases include managing dynamic string groups with efficient lookups, transforming data pipelines via sequence interoperability, and aggregating results from filtered or partitioned subsets.",
      "description_length": 601,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Testing",
      "library": "gobba",
      "description": "Implements basic testing primitives for asserting equality and unit testing. Works with `Gobba.Types.evt` arrays and provides a table of test functions. Use to validate program behavior during development and regression testing.",
      "description_length": 228,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Stringp",
      "library": "gobba",
      "description": "This module implements low-level string manipulation operations such as concatenation, case conversion, and string-to-list conversion. It works directly with arrays of `Gobba.Types.evt` values and string constants. These functions are used to build and transform string-based event data within the Gobba runtime system.",
      "description_length": 319,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Typecheck",
      "library": "gobba",
      "description": "This module implements type checking and value extraction operations for a custom type system, handling numeric type promotion, dynamic type verification, and structured value unpacking. It works with event and typeinfo data types representing runtime values and their associated types, including numbers, booleans, strings, lists, dictionaries, and closures. Concrete use cases include determining the most inclusive numeric type from a list, safely casting values between types, and extracting structured data like closure environments or dictionary entries.",
      "description_length": 560,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Expr",
      "library": "gobba",
      "description": "This module provides operations to analyze, transform, and construct lambda and apply expressions, working directly with `Gobba.Types.expr` and related structures like identifier lists and arrays. It supports tasks such as extracting or replacing lambda bodies, building nested lambdas from parameter lists, and generating apply expressions from expression lists. Specific use cases include expression normalization, lambda abstraction manipulation, and preparing expressions for evaluation or debugging.",
      "description_length": 504,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Primitives",
      "library": "gobba",
      "description": "This module defines and manages primitive functions, handling purity checks, function extraction, and environment setup. It operates on primitive types, events, and environments, providing direct access to their properties and transformations. Use cases include evaluating built-in functions, generating lambdas for primitives, and initializing environments with primitive bindings.",
      "description_length": 382,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Estack",
      "library": "gobba",
      "description": "This module implements a stack-based manipulation interface for AST expressions within a stackframe structure. It supports pushing and popping expressions, measuring stack depth, and generating string representations of the stack up to a specified depth. It is used to manage evaluation contexts during expression reduction or debugging in an interpreter or compiler pipeline.",
      "description_length": 376,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Iop",
      "library": "gobba",
      "description": "This module provides functions for pretty-printing event arrays to standard output, with `pprint_endline` adding a newline after output. It includes `exitp` for exiting the program and defines a `table` mapping string names to primitive values. It operates directly on event arrays and is used for output formatting and program termination.",
      "description_length": 340,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Eval",
      "library": "gobba",
      "description": "This module evaluates expressions and commands in a given state, handling operations like binary and unary logic on boolean values, variable lookups, function applications, and assignments. It processes structured data such as expressions, directives, and command lists, producing evaluated values and updated states. Concrete use cases include executing user-defined logic, resolving variable bindings, and applying transformations to program state during interpretation.",
      "description_length": 472,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Numericalp",
      "library": "gobba",
      "description": "This module handles numerical operations on event values, including unpacking lists of integers, floats, and complex numbers, and performing arithmetic operations like addition, multiplication, and modulus. It supports dynamic dispatch between integer, float, and complex number types for binary operations, and provides functions to construct and manipulate complex numbers. Concrete use cases include evaluating mathematical expressions, processing numerical input lists, and supporting calculator-like operations in a scripting environment.",
      "description_length": 543,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gobba.Completion",
      "library": "gobba",
      "description": "This module implements autocompletion and hinting logic for a REPL using a trie data structure to store and efficiently retrieve possible completions based on input prefixes. It provides two main functions: `hints_callback`, which generates colored hint suggestions with match status, and `completion_callback`, which returns a list of possible completions for a given input string. The trie structure supports insertion of strings, traversal to find matching subtrees, and generation of suggestions, enabling efficient command or symbol completion in interactive shells. Example use cases include auto-completing user commands, suggesting variable names, or providing contextual hints during REPL interaction.",
      "description_length": 710,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gobba.Charp",
      "library": "gobba",
      "description": "Converts character events to uppercase or lowercase using `toupper` and `tolower`, which take an array of events and return a single transformed event. Operates on `Gobba.Types.evt` values, typically representing characters or strings. Useful for case normalization in text processing tasks like parsing or input handling.",
      "description_length": 322,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Typep",
      "library": "gobba",
      "description": "This module implements low-level string operations and type introspection for the Gobba runtime. It provides functions to determine the type name of values, format values as strings, and raise errors with custom messages. These operations are essential for debugging and dynamic type inspection within the interpreter.",
      "description_length": 318,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gobba.Listp",
      "library": "gobba",
      "description": "This module implements list processing operations for event arrays, including element access, length calculation, membership checks, and array transformations. It provides functions like `head`, `tail`, `getat`, `length`, and `mem` for direct manipulation of `Gobba.Types.evt` arrays, alongside string constants representing common higher-order operations such as `map`, `filter`, and `fold`. These operations are used to build and evaluate list-processing expressions in a structured manner.",
      "description_length": 492,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Parser",
      "library": "gobba",
      "description": "Parses input into structured tokens like symbols, integers, and operators, enabling interpretation of expressions, control flow, and data types through defined grammatical rules. The incremental entry point processes command sequences from a given lexical position, supporting partial input and error recovery by producing checkpoints for resumed parsing. This allows concrete use cases such as interactive environments where parsing must continue from arbitrary positions. Key data types include tokens, lexical positions, and checkpoints, with operations for parsing expressions, handling control structures, and resuming from saved states.",
      "description_length": 642,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gobba.Optimizer",
      "library": "gobba",
      "description": "Performs normalization and reduction of abstract syntax tree expressions through iterative optimization. It processes expressions by applying transformation rules to simplify structure and resolve assignments. Useful for preparing expressions for evaluation by eliminating redundant constructs and resolving nested let bindings.",
      "description_length": 328,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Lexer",
      "library": "gobba",
      "description": "This module processes character streams into tokens for parsing, handling operations like line tracking, string and character literal parsing, and comment skipping. It operates on `Lexing.lexbuf` input buffers and produces tokens consumed by the parser. Concrete use cases include reading escaped strings, handling nested comments, and decoding character literals with escape sequences.",
      "description_length": 386,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Repl",
      "library": "gobba",
      "description": "This module implements a read-eval-print loop for the Gobba language, parsing and evaluating expressions from strings or files while managing evaluation state and supporting command-line interaction with autocompletion. It works with core data types like `evalstate`, `evt`, and `command`, and includes a trie structure for efficient completion. The string set submodule provides standard set operations and transformations for managing dynamic string groups, enabling efficient lookups and bulk processing in data pipelines. Together, they support use cases like embedding Gobba evaluation in OCaml apps, running scripts, and building an interactive shell with history and autocompletion.",
      "description_length": 689,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gobba.Util",
      "library": "gobba",
      "description": "This module provides foundational utilities for managing key-value associations through a list-based dictionary implementation. It supports polymorphic keys and values with core operations like `insert`, `delete`, `get`, and `exists`, along with bulk manipulation using `insertmany`. Users can extract key or value lists, filter entries by key sets, and ensure uniqueness of keys within a collection. Submodules extend these capabilities with specialized operations for traversal, transformation, and validation of dictionary contents.",
      "description_length": 535,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Errors",
      "library": "gobba",
      "description": "This module defines error types and location tracking for parsing and evaluation errors, including detailed variants for specific failure modes like type errors, unbound variables, and file not found. It provides functions to raise and print errors with optional color and location context, and to format and display stack traces. Concrete use cases include reporting syntax errors during lexing, handling runtime evaluation errors, and displaying type mismatches with precise source locations.",
      "description_length": 494,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Parsedriver",
      "library": "gobba",
      "description": "Parses input from a lexing buffer or string into a list of commands using a checkpoint-based parser. It processes textual input into structured command data, handling both full files and single-line inputs. This module is used to convert source code written in the language into executable command lists for interpretation.",
      "description_length": 323,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gobba.Primutil",
      "library": "gobba",
      "description": "This module provides a lexer and parser for processing input into command lists, along with a function to convert string representations into lambda expressions. It operates on lexical buffers and string inputs, producing abstract syntax trees used in command interpretation. Concrete use cases include parsing user input for a REPL and constructing closures from string literals for standard library functions.",
      "description_length": 411,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gobba.Types",
      "library": "gobba",
      "description": "This component provides foundational operations for type-safe manipulation of language constructs in a functional interpreter or compiler, including equality checks, comparison logic, and structured pretty-printing. It operates on data types such as abstract syntax trees (`expr`), purity environments, evaluation events (`evt`), polymorphic vectors, and interpreter state components like `evalstate` and `stackframe`. These capabilities enable use cases such as REPL output formatting, type checker validation, and compiler pipeline stages requiring precise structural analysis or serialization.",
      "description_length": 596,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Values",
      "library": "gobba",
      "description": "This module handles event value manipulation and parameter extraction for closures. It provides `show_evt_fancy` to convert event values into human-readable strings and `findevtparams` to extract identifier lists from nested lambda parameters in closures. These functions are used in debugging and closure inspection scenarios.",
      "description_length": 327,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Dictp",
      "library": "gobba",
      "description": "This module implements dictionary manipulation operations including insertion, deletion, key lookup, and key-value enumeration. It works with dictionaries represented as associative structures mapping keys to values, where keys and values are of type `Gobba.Types.evt`. Concrete use cases include building dictionaries from paired lists, extracting key or value collections, and filtering entries based on key presence.",
      "description_length": 419,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Complexp",
      "library": "gobba",
      "description": "This module implements complex number operations such as extracting the real and imaginary parts, computing the conjugate, inverse, and converting from polar form. It operates on arrays of `Gobba.Types.evt`, which represent complex numbers in Cartesian form. Use cases include signal processing, physics simulations, and numerical analysis requiring complex arithmetic.",
      "description_length": 369,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba.Puritycheck",
      "library": "gobba",
      "description": "This module implements purity analysis for expressions and commands in a functional language. It provides functions to infer purity levels of expressions, track purity in environments, and analyze sequences of assignments or commands. Key operations include purity inference, environment lookups, and command evaluation state updates, working with expressions, identifiers, purity environments, and evaluation states. It is used to determine side-effect presence in expressions and enforce purity constraints during program analysis.",
      "description_length": 533,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gobba",
      "library": "gobba",
      "description": "This module provides a comprehensive toolkit for building and evaluating functional programs with rich type handling, string manipulation, and structured data operations. Core data types include `evt` arrays for representing events and values, `expr` for abstract syntax trees, and specialized structures for dictionaries, complex numbers, and purity tracking. Key operations enable expression manipulation, type checking, numerical computations, and interactive REPL features like autocompletion and pretty-printing. Examples include evaluating lambda expressions, normalizing strings, performing arithmetic on complex numbers, and managing evaluation state during interpretation.",
      "description_length": 681,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 32,
    "meaningful_modules": 31,
    "filtered_empty_modules": 1,
    "retention_rate": 0.96875
  },
  "statistics": {
    "max_description_length": 710,
    "min_description_length": 228,
    "avg_description_length": 453.9032258064516,
    "embedding_file_size_mb": 0.11307239532470703
  }
}