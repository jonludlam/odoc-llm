{
  "package": "passage",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 18,
  "creation_timestamp": "2025-06-18T16:35:39.994480",
  "modules": [
    {
      "module_path": "Passage.Storage.Secret_name",
      "description": "Encodes and decodes values between a custom type `t` and strings, with list variants for batch processing. Provides comparison and equality checks for `t` values. Normalizes secret values to a consistent representation.",
      "description_length": 219,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Storage.Keys",
      "description": "Provides functions to locate and retrieve public keys, including constructing paths from recipient names, loading keys from specified directories, and listing all known recipient names. Operates on file paths, strings, and lists of Age.Key.t values. Used to fetch recipient-specific keys for encryption workflows and manage key repositories.",
      "description_length": 341,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Storage.Secrets",
      "description": "This module handles cryptographic operations like encrypting, decrypting, and managing secret lifecycles, along with path and secret name manipulation. It works with secret names, file paths, Age keys, and metadata to facilitate secure storage and retrieval. Use cases include securing sensitive data, managing access through recipients, and validating file existence during secret operations.",
      "description_length": 393,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passage.Secret.Validation",
      "description": "Validates a string input, returning a result that indicates success or a structured error containing a kind and message. Parses a string into a specific type, handling multiline and single-line secrets with various comment formats. Converts validation results into human-readable strings by combining error kinds and messages.",
      "description_length": 326,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Age.Key",
      "description": "Converts between string representations and a custom key type, supporting list operations and comparison. Handles cryptographic key data derived from identity files asynchronously. Enables safe storage and comparison of key values in secure contexts.",
      "description_length": 250,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Age",
      "description": "Encodes and decodes custom key types from strings, supporting list operations and cryptographic comparisons. Provides functions for asynchronous key generation and secure storage. Allows safe manipulation of key values in encrypted environments. Examples include parsing identity files into keys, comparing key lists, and generating secure key representations.",
      "description_length": 360,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Config",
      "description": "Provides access to configuration paths and values, including home and base directories, lazy-loaded directories for keys and secrets, an identity file path, X selection string, and a clipboard timeout duration. Works with strings, lazy strings, and integers to manage application-specific settings. Used to locate user-specific data, retrieve cached values on demand, and configure clipboard behavior.",
      "description_length": 401,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passage.Dirtree",
      "description": "Provides operations to construct and pretty-print directory structures from file paths. Works with nested tuples representing directory contents and file paths. Used to generate visual representations of file system hierarchies for logging or debugging purposes.",
      "description_length": 262,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Invariant",
      "description": "Provides functions to check and enforce invariants, including a blocking failure function, a check for user membership in a path, a conditional execution based on recipient status, and a failure handler for invariant violations. Works with `Path.t` and Lwt-based asynchronous operations. Used to prevent unauthorized actions and ensure data consistency in user-path relationships.",
      "description_length": 380,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Path",
      "description": "Provides operations to convert between string paths and a custom path type, including comparison, directory checks, and path manipulation like extracting base and directory names. Works with the `t` type, representing file system paths, and interacts with `Fpath.t` for path conversions. Used to construct, validate, and navigate file system paths in a type-safe manner.",
      "description_length": 370,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Secret",
      "description": "Processes and validates secret strings, handling multiline formats, comments, and structured error reporting. Supports parsing into specific types and converting errors into readable messages. Accepts inputs like \"key=value\" or \"secret: value\" and returns detailed validation outcomes. Examples include checking secret syntax, extracting values, and generating error explanations.",
      "description_length": 380,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Shell",
      "description": "Provides functions to interact with the shell environment, including launching an editor, reading from and writing to the clipboard, managing processes, and handling cryptographic operations with age. Works with strings, Lwt threads, and process redirections. Used to automate clipboard tasks, securely encrypt data, and manage system processes from within an application.",
      "description_length": 372,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Storage",
      "description": "handles encoding/decoding of a custom type `t` to and from strings, supports batch operations, and ensures consistent representation of secrets; provides key lookup and management functions using file paths and recipient names, enabling secure encryption workflows; includes cryptographic operations for secret management, path manipulation, and metadata handling; allows secure storage, retrieval, and validation of sensitive data with recipient-specific key access.",
      "description_length": 467,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passage.Template",
      "description": "Parses template strings and files into an abstract syntax tree (AST) for structured processing. Performs substitutions on AST nodes and generates output text from the transformed AST. Supports in-place or file-based substitution of template content with resolved values.",
      "description_length": 270,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Template_ast",
      "description": "Generates string representations of abstract syntax tree nodes, including expressions and statements. Processes structured data like lists of node types, each representing different language constructs. Used to serialize parsed templates for debugging or output generation.",
      "description_length": 273,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Template_parser",
      "description": "Parses templated input by scanning tokens and constructing an abstract syntax tree based on a provided lexer. It processes character streams and identifies structured elements within templates, such as variables or control flow markers. The output is an AST that represents the parsed template structure for further processing.",
      "description_length": 327,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "passage",
      "description": "Handles secret storage and retrieval with encrypted persistence, supporting key-value pairs and time-based access control. Operates on opaque secret identifiers and cryptographic tokens, ensuring secure handling of sensitive data. Used to manage API keys and authentication tokens with controlled expiration and access policies.",
      "description_length": 328,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage",
      "description": "Combines key management, configuration handling, path manipulation, and template processing into a unified system for secure data handling. It supports custom types for keys, paths, and secrets, along with operations for encoding, validation, and cryptographic processing. Functions include parsing templates into ASTs, generating directory visualizations, and managing clipboard and shell interactions. Examples include securely storing encrypted secrets, validating configuration paths, and generating structured output from template ASTs.",
      "description_length": 541,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 22,
    "meaningful_modules": 18,
    "filtered_empty_modules": 4,
    "retention_rate": 0.8181818181818182
  },
  "statistics": {
    "max_description_length": 541,
    "min_description_length": 219,
    "avg_description_length": 347.77777777777777,
    "embedding_file_size_mb": 0.06585311889648438
  }
}