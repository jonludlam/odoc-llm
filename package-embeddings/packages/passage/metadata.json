{
  "package": "passage",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 18,
  "creation_timestamp": "2025-08-14T23:26:41.615033",
  "modules": [
    {
      "module_path": "Passage.Storage.Keys",
      "library": "passage",
      "description": "This module manages cryptographic key storage and retrieval for recipients. It provides functions to derive key file paths from recipient names, load keys from disk, and list all known recipients. It works with file paths, strings, and cryptographic key types, specifically integrating with the `Passage.Age.Key` module for key handling. Use cases include securely locating and loading public keys for encryption operations.",
      "description_length": 424,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Secret.Validation",
      "library": "passage",
      "description": "This module validates and parses secret strings with specific formatting rules, handling errors like empty secrets or invalid formats. It works with strings representing secrets and returns structured results indicating success or validation errors. A key use case is parsing multiline secrets that include comment blocks followed by a secret value.",
      "description_length": 349,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Storage.Secrets",
      "library": "passage",
      "description": "This module provides secret metadata operations, encryption workflows, and recipient identity handling for a file-based secret storage system. It manages secret paths, encrypted data, and recipient identifiers, enabling secure secret retrieval, access control via recipient verification, and bulk key rotation or refresh operations using temporary files. Use cases include organizing secrets hierarchically, enforcing encryption at rest, and dynamically managing recipient permissions for sensitive data.",
      "description_length": 504,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Age.Key",
      "library": "passage",
      "description": "This module defines a type `t` for representing cryptographic keys and provides direct conversions to and from strings and string lists, with support for comparison and equality checks. It includes an operation to load a key from a file asynchronously. The module is used for handling age encryption keys in string-based workflows and file operations.",
      "description_length": 351,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Storage.Secret_name",
      "library": "passage",
      "description": "This module defines a type `t` for representing secret names and provides functions to inject and project values between `string` and `t`. It includes operations for comparing, checking equality, and normalizing secret names, as well as list versions of injection and projection. It is used to handle secret name data securely and consistently across storage operations.",
      "description_length": 370,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Dirtree",
      "library": "passage",
      "description": "This module recursively explores directory structures, representing them as trees of nodes. It provides functions to build a tree from a file path and pretty-print the resulting structure. It is used to visualize the hierarchy of files and directories, particularly for inspecting secret storage layouts.",
      "description_length": 304,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Template_lexer",
      "library": "passage",
      "description": "This module implements a lexer for parsing template syntax, handling operations like lexeme extraction, tokenization, and identifier recognition. It works with `Sedlexing.lexbuf` input buffers and produces tokens consumed by the `Template_parser` module. Concrete use cases include parsing embedded expressions and identifiers in template strings, such as variable interpolation in markup or configuration templates.",
      "description_length": 416,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Storage",
      "library": "passage",
      "description": "This module handles secure data storage operations using abstracted secret names, cryptographic keys, and encrypted file metadata. It provides direct access to lazy-loaded values, secret name manipulation, key file path derivation, and encryption workflow management. Concrete use cases include secure secret retrieval with recipient verification, hierarchical secret organization, and key management for encryption operations.",
      "description_length": 427,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Shell",
      "library": "passage",
      "description": "This module executes shell commands for text editing, clipboard management, process termination, and age encryption/decryption. It handles strings for clipboard operations, interacts with process redirection for encryption tools, and manages exceptions via a custom exit function. Concrete uses include securely copying sensitive data to the clipboard, killing processes by name, and encrypting or decrypting data streams using age.",
      "description_length": 432,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Template_parser",
      "library": "passage",
      "description": "Parses template files into an abstract syntax tree using a custom lexer. It processes tokens like plain text, identifiers, and end-of-file to build structured template representations. Useful for generating code or documents from structured templates.",
      "description_length": 251,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Secret",
      "library": "passage",
      "description": "Handles creation and formatting of secret values with distinct single-line and multi-line representations. It structures secrets using a custom type that includes the secret text, optional comments, and a specified kind. Useful for parsing and validating secrets from configuration files or user input where format and structure are critical.",
      "description_length": 342,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passage.Path",
      "library": "passage",
      "description": "This module provides operations for constructing, manipulating, and inspecting filesystem paths. It supports path concatenation, normalization, and conversion to and from standard path types, along with checks for existence, directory status, and path components. Concrete use cases include building and validating file paths for reading/writing, ensuring parent directories exist, and handling relative and absolute path conversions.",
      "description_length": 434,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Template_ast",
      "library": "passage",
      "description": "Processes abstract syntax trees for template parsing, handling nodes representing identifiers and text fragments. It works with list-based AST structures composed of `Iden` and `Text` variants. This module converts template nodes into string representations, useful for rendering or debugging parsed templates.",
      "description_length": 310,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Config",
      "library": "passage",
      "description": "This module defines configuration paths and settings for managing cryptographic keys, secrets, and clipboard behavior. It provides direct access to directories and files such as `keys_dir`, `secrets_dir`, `identity_file`, and `clip_time`. These values are used to configure runtime behavior for secure data handling and user interaction with the clipboard.",
      "description_length": 356,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Invariant",
      "library": "passage",
      "description": "This module enforces access control invariants for message handling. It checks whether a user is authorized to receive messages at a given path and aborts operations if invariants fail. Functions support conditional execution based on recipient status and provide clear failure semantics for invariant violations.",
      "description_length": 313,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passage.Age",
      "library": "passage",
      "description": "This module handles cryptographic key management and encryption operations using the age encryption format. It supports loading keys from files, defining recipients with associated keys, and performing encryption and decryption operations asynchronously from standard input or to standard output. It is used for securely managing and processing encrypted data in command-line and file-based workflows.",
      "description_length": 401,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Template",
      "library": "passage",
      "description": "This module parses and processes template files into abstract syntax trees, replacing identifier nodes asynchronously during substitution. It works with strings and file paths to generate transformed text output, either in memory or written to disk. Concrete use cases include rendering configuration files or code templates with dynamic values from external sources.",
      "description_length": 367,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passage",
      "library": "passage",
      "description": "This module provides cryptographic key management, directory tree visualization, path manipulation, secret handling, template processing, and shell interaction capabilities. It works with filesystem paths, cryptographic keys, secret values, abstract syntax trees, and process execution. Concrete use cases include encrypting and decrypting data with age, managing secure storage of secrets, rendering dynamic templates, parsing and validating configuration files, and securely handling clipboard operations.",
      "description_length": 507,
      "index": 17,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 18,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 507,
    "min_description_length": 251,
    "avg_description_length": 381.0,
    "embedding_file_size_mb": 0.26125335693359375
  }
}