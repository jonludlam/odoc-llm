{
  "package": "passage",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 18,
  "creation_timestamp": "2025-07-15T23:09:21.382317",
  "modules": [
    {
      "module_path": "Passage.Secret.Validation",
      "library": "passage",
      "description": "This module validates and parses secret strings with specific formatting rules. It checks for empty or invalid formats, including legacy single-line secrets and multiline secrets with comment blocks. The `validate` function returns a result indicating valid secret kinds or specific errors, while `parse_exn` extracts secrets from properly formatted multiline strings.",
      "description_length": 368,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passage.Storage.Secret_name",
      "library": "passage",
      "description": "This module defines a type `t` for representing secret names and provides functions to inject and project values between `string` and `t`. It includes operations for comparing, checking equality, and normalizing secret names, as well as mapping over lists of secret names. The module is used to handle secret name data in a type-safe manner, ensuring proper abstraction and manipulation of secret identifiers.",
      "description_length": 409,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Storage.Secrets",
      "library": "passage",
      "description": "The module provides operations for managing encrypted secrets, focusing on file path manipulation, recipient handling, and encryption/decryption workflows. It operates on data structures including file paths, cryptographic keys, recipient identifiers, and secret metadata, supporting tasks like secret lookup, recipient validation, and temporary file-based encryption. Specific use cases include secure secret storage, identity-based recipient retrieval, and cryptographic key management for access control.",
      "description_length": 507,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Age.Key",
      "library": "passage",
      "description": "This module defines a type `t` for representing cryptographic keys and provides functions to convert between strings and keys, both individually and in lists. It includes comparison and equality operations for keys, enabling their use in ordered collections. A key can be loaded asynchronously from a file using `from_identity_file`, which is useful for reading age identity files.",
      "description_length": 381,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Storage.Keys",
      "library": "passage",
      "description": "This module manages cryptographic key storage paths and retrieval for recipients. It provides functions to derive key file paths from recipient names, load keys from disk, and list all known recipients. Use it to securely locate and read public keys for encryption operations.",
      "description_length": 276,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passage.Secret",
      "library": "passage",
      "description": "This module manages secret data in both single-line and multi-line formats, supporting optional comments and structured text descriptions. It provides core operations like `create`, `format`, and `validate` to manipulate secrets, while its child module focuses on parsing and validating formatted secret strings, using functions like `parse_exn` and `validate` to handle legacy and multiline formats. You can use it to extract secrets from configuration blocks, ensure proper formatting, or validate secret strings before processing. Together, the module and its child enable robust handling of sensitive data in various textual representations.",
      "description_length": 645,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passage.Template_parser",
      "library": "passage",
      "description": "Parses template files into an abstract syntax tree using a custom lexer. It processes text and identifiers into structured tokens, then builds a template AST for rendering dynamic content. Useful for generating HTML or configuration files from templates with embedded variables.",
      "description_length": 278,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Config",
      "library": "passage",
      "description": "This module defines configuration paths and settings for managing cryptographic keys, secrets, and clipboard behavior. It provides direct access to directories and files such as `keys_dir`, `secrets_dir`, `identity_file`, and `clip_time`. These values are used to configure runtime behavior for secure data handling and user interaction in command-line environments.",
      "description_length": 366,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Invariant",
      "library": "passage",
      "description": "This module enforces invariant checks during message processing, ensuring that operations only proceed when the user is a valid recipient. It works with `Passage.Path.t` to validate message paths and uses `Lwt.t` for asynchronous computations. Functions like `die`, `user_is_listed_as_recipient`, and `run_if_recipient` handle failure propagation and conditional execution based on recipient status.",
      "description_length": 399,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Path",
      "library": "passage",
      "description": "This module provides operations for constructing, manipulating, and inspecting filesystem paths. It wraps string-based paths with a concrete type `t`, supporting conversions to and from standard path types, path component access, directory checks, and file existence verification. Concrete use cases include safely building and normalizing paths, checking if a path refers to a directory, and ensuring parent directories exist.",
      "description_length": 427,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Template_lexer",
      "library": "passage",
      "description": "This module implements a lexer for parsing template syntax, handling operations like lexeme extraction, token identification, and string conversion. It works with lexing buffers and token types defined in the template parser, using Sedlexing for character stream processing. Concrete use cases include parsing template variables, extracting identifier names, and matching delimiters during template compilation.",
      "description_length": 411,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Storage",
      "library": "passage",
      "description": "This module orchestrates secure handling of cryptographic secrets and keys through abstract types and lazy loading, ensuring controlled access to sensitive data. It defines core operations for secret initialization, key derivation, and secure value access, while structuring functionality across submodules for secret naming, encrypted secret management, and key path handling. The first submodule enforces type-safe manipulation of secret names via injection, projection, and normalization functions. The second manages encryption workflows, recipient validation, and file-based operations for secure secret storage, while the third enables key discovery and loading based on recipient identities. Example usage includes deriving keys from secret names, encrypting secrets for specific recipients, and securely loading public keys from standardized file paths.",
      "description_length": 861,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Age",
      "library": "passage",
      "description": "This module manages encryption and decryption workflows using age keys, supporting secure data exchange with multiple recipients and automated decryption from input streams. It defines recipient data structures with names and key lists, and provides operations to encrypt from standard input or a string, and decrypt using identity files. The module's child module handles key management, offering conversions between strings and keys, equality checks, and asynchronous loading from files. Together, they enable workflows like encrypting a file for multiple users or decrypting a stream using a loaded identity.",
      "description_length": 611,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Dirtree",
      "library": "passage",
      "description": "This module recursively explores directory structures to build a tree representation of files and subdirectories. It uses `Fpath.t` to traverse the filesystem and constructs values of type `top`, which encapsulate the hierarchy starting from a given path. The result can be printed using `pp`, which renders the tree structure to the console.",
      "description_length": 342,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Passage.Shell",
      "library": "passage",
      "description": "This module provides functions for interacting with shell utilities, including clipboard management, process termination, and encryption operations. It works with strings, process redirections, and handles cryptographic key generation and file encryption using the age tool. Concrete use cases include securely copying text to the clipboard, killing processes by name, and encrypting or decrypting files using identity keys.",
      "description_length": 424,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Template_ast",
      "library": "passage",
      "description": "This module defines a simple abstract syntax tree (AST) for representing template fragments, consisting of identifier and text nodes. It provides a `to_string` function to convert an AST node back into its string representation. It is used to parse and reconstruct template expressions in a structured format.",
      "description_length": 309,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage.Template",
      "library": "passage",
      "description": "This module parses and processes template files into abstract syntax trees, substitutes identifiers in those trees with values, and generates text output. It operates on strings and files, producing transformed text written to files or returned directly. It is used to generate configuration files, scripts, or documents by replacing placeholders in templates with actual values.",
      "description_length": 379,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Passage",
      "library": "passage",
      "description": "This module handles secure data management and template processing for cryptographic operations and dynamic content generation. It supports secret creation, validation, and encryption workflows using structured types and path abstractions, while providing template parsing and rendering capabilities through lexing and AST manipulation. You can validate and format secret strings, encrypt data for multiple recipients, parse and render templates with embedded variables, or traverse directory structures to build file hierarchies. Specific operations include secure clipboard interaction, path validation, template substitution, and asynchronous message processing based on recipient status.",
      "description_length": 691,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 18,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 861,
    "min_description_length": 276,
    "avg_description_length": 449.1111111111111,
    "embedding_file_size_mb": 0.06583690643310547
  }
}