{
  "package": "odisco",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:30:04.241032",
  "modules": [
    {
      "module_path": "odisco",
      "description": "Provides functions for parsing and validating JSON data, including decoding nested objects and arrays, and extracting values with type-safe accessors. Works with OCaml's native `string`, `list`, and `array` types, as well as custom record types via a schema-based approach. Used to process configuration files and API responses with strict type checking and error reporting.",
      "description_length": 374,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jobpack",
      "description": "Converts strings and JSON to job input structures, serializes job inputs to JSON, and handles error messages. Processes headers and job data to extract environment variables, job dictionaries, and raw data. Constructs jobpacks with customizable parameters for job execution and tracking.",
      "description_length": 287,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pipeline",
      "description": "Handles conversion between string representations and structured data for processing workflows, including mapping pipeline definitions to JSON and generating URIs from task inputs. Operates on stages, labels, groupings, and pipelines represented as tuples and lists. Used to parse and serialize pipeline configurations and generate navigable URLs from task metadata.",
      "description_length": 366,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cfg",
      "description": "Provides functions to safely extract and validate configuration values from an optional config record. Works with the `config` type, which contains structured application settings. Used to ensure default values are applied and invalid configurations are handled gracefully during startup.",
      "description_length": 288,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Worker",
      "description": "Handles the execution of task pipelines by initiating a list of stage-task pairs, where each stage is associated with a specific task implementation. Operates on pipeline stages and task modules that conform to the Task.TASK signature. Used to launch data processing workflows with defined stages and corresponding task logic.",
      "description_length": 326,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Task",
      "description": "Provides functions to initialize, process, and finalize tasks based on a `disco` configuration and input channel. Operates on the `init` type to manage task state and interacts with I/O through `Pervasives.in_channel`. Used to handle structured data processing pipelines with explicit lifecycle control.",
      "description_length": 303,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rest_api",
      "description": "Generates REST API endpoints for job submission, tag retrieval, and tag listing using configuration data. Constructs HTTP request payloads with timeout handling and error recovery. Operates on HTTP method and request tuples, producing results wrapped in a custom error type.",
      "description_length": 274,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 374,
    "min_description_length": 274,
    "avg_description_length": 316.85714285714283,
    "embedding_file_size_mb": 0.02581501007080078
  }
}