{
  "package": "mugen",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 37,
  "creation_timestamp": "2025-06-18T16:40:10.617938",
  "modules": [
    {
      "module_path": "Mugen.Semantics.Endo.Make.Shift",
      "description": "Provides operations to compare and compose elements representing displacements, including strict and non-strict ordering checks, identity detection, and composition. Works with a single type `t` that models a displacement algebra. Used to verify equivalence of transformations, enforce ordering constraints in structured data, and combine operations in a monoidal context.",
      "description_length": 372,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Free.Make.Infix",
      "description": "Provides comparison operations for a `level` type, including equality and ordering checks. Functions like (=), (<), and (>=) enable direct infix comparison between instances of `level`. Used to simplify conditionals and sorting logic involving hierarchical or ranked levels.",
      "description_length": 274,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Free.Make.Shift",
      "description": "Provides operations to compare and combine elements using a strict order and composition, with a unit element. Works with a single type `t` representing displacements, supporting checks for identity and equivalence. Used to model algebraic structures where composition and ordering must adhere to specific invariance properties.",
      "description_length": 328,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Endo.Make",
      "description": "manages displacement-based transformations through a unified type `t`, enabling comparison, ordering, identity checks, and composition. It supports verifying equivalence between sequences of operations and building complex transformations by combining simpler ones. Operations include strict and non-strict ordering, identity detection, and monoidal composition. Examples include validating transformation sequences, enforcing hierarchical constraints, and chaining geometric moves.",
      "description_length": 482,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Semantics.Free.Make",
      "description": "Encapsulates operations for comparing, combining, and analyzing elements under a strict order, with support for composition and identity checks. It defines a type `t` for displacements and provides functions to enforce invariance through ordered composition. Examples include merging sequences with defined precedence or validating transformation chains. Operations enable precise control over how elements interact while preserving structural integrity.",
      "description_length": 454,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Semantics.Endo.Shift",
      "description": "Provides operations to compare and combine elements using a strict order and composition, with a distinguished identity element. Works with a single type `t` representing displacements, supporting checks for equality, order, and identity. Used to model algebraic structures where composition and ordering must adhere to specific invariance properties.",
      "description_length": 351,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Free.Shift",
      "description": "Provides operations to compare and combine elements using a strict order and composition, with a unit element. Works with a single abstract type `t` representing displacements. Used to model transformations where composition and ordering must respect algebraic constraints, such as in formal verification or symbolic computation.",
      "description_length": 329,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Semantics.Free.Infix",
      "description": "Provides comparison operations for a custom level type, including equality and ordering checks. Works with values of the level data type to enable infix syntax for comparisons. Used to simplify conditionals and sorting logic involving hierarchical or ranked levels.",
      "description_length": 265,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.ShiftWithJoin.Nat",
      "description": "Provides operations for comparing and combining natural numbers, including equality checks, ordering, composition, and finding maximums. Works with a custom type `t` representing natural numbers, supporting conversions to and from integers. Used to model sequential operations and determine dominance relationships in structured data.",
      "description_length": 334,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.ShiftWithJoin.Int",
      "description": "Provides operations for comparing integers, including checking equality, less-than, and less-than-or-equal. Supports composition of integer values as operators and computes the maximum of two integers. Converts between OCaml's native int type and the module's t type.",
      "description_length": 267,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.ShiftWithJoin.NonPositive",
      "description": "Provides operations for comparing, composing, and combining non-positive integers, including checking equality, ordering, and finding the maximum. Works with a custom type `t` representing non-positive integers, supporting conversions to and from `int`. Used to model transformations or operations where values are restricted to zero or negative numbers, such as in certain algebraic structures or constrained state transitions.",
      "description_length": 428,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.ShiftWithJoin.Product",
      "description": "Checks equivalence and ordering of elements, and supports composition and join operations for combining them. Works with a custom type `t` representing abstract operations or values. Used to compare, combine, and identify neutral elements in algebraic structures.",
      "description_length": 263,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.ShiftWithJoin.Lexicographic",
      "description": "Provides operations to compare, combine, and inspect elements of a partially ordered structure, including checking equality, ordering, and composition of elements. Works with a single type `t` representing elements of a poset, supporting operations like finding the maximum (join) and minimum (bot). Used to model and manipulate algebraic structures such as monoids or semilattices in formal systems or symbolic computation.",
      "description_length": 424,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.ShiftWithJoin.NearlyConstant",
      "description": "Provides operations to compare, compose, and combine elements of a partially ordered structure, including checking equality, determining order, and computing joins. Works with a single type `t` representing elements of a lattice-like structure. Used for manipulating and reasoning about transformations or operations where composition and ordering are essential.",
      "description_length": 362,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.ShiftWithJoin.FiniteSupport",
      "description": "Provides operations to compare, combine, and identify elements in a partially ordered structure. Works with a generic type `t` representing elements of a finite support, supporting composition, ordering, and join operations. Used to model and manipulate transformations or relations where partial ordering and composition are essential.",
      "description_length": 336,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Endo",
      "description": "Provides operations to manipulate and combine level shifts, including a shifted function that handles displacement collapsing and error checking. Works with custom types `shift` and `level` to represent syntactic contexts. Used to safely adjust binding levels in code transformations, such as when reordering or lifting expressions in a syntax tree.",
      "description_length": 349,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Free",
      "description": "Offers comparison operations for a custom level type, enabling infix syntax for equality and ordering. Supports hierarchical or ranked level evaluations through direct comparison in conditionals and sorting. Key operations include `=`, `<`, `>`, and their variants, applied to level values. Examples include checking if one level is higher than another or sorting a list of levels based on their rank.",
      "description_length": 401,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Shift.Nat",
      "description": "Provides operations for comparing natural numbers (less than, less than or equal, equality) and composing them as operators. Works with the `t` type representing natural numbers, supporting conversions to and from integers. Used to model sequential operations where composition order matters, such as in transformation pipelines or algebraic structures.",
      "description_length": 353,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.Int",
      "description": "Provides operations for comparing integers (less than, less than or equal, equality), composing values as operators, and converting between integers and a custom type. Works with a type `t` representing integers, supporting arithmetic-like composition. Used to model transformations where composition order matters, such as in category theory or symbolic manipulation.",
      "description_length": 368,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.NonPositive",
      "description": "Provides operations for comparing and composing non-positive integers, including equality checks, ordering, and identity validation. Works with a custom type `t` representing non-positive integers, supporting conversions to and from `int`. Used to model transformations where composition follows a specific order and identity elements are critical.",
      "description_length": 348,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Shift.Constant",
      "description": "Provides operations to compare values, including checking equality, strict less-than, and less-than-or-equal, as well as applying actions to values. Works with an abstract type `t` that represents constants. Used to enforce ordering constraints and apply transformations in symbolic execution contexts.",
      "description_length": 302,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Shift.Product",
      "description": "Checks equivalence and order between elements, composes them in a specific order, and identifies the identity element. Works with a custom type `t` representing elements of a displacement algebra. Used to verify algebraic properties and perform structured transformations in formal systems.",
      "description_length": 290,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.Lexicographic",
      "description": "Provides operations to compare and combine elements based on a strict order, including checking equality, less-than, and less-than-or-equal relationships. Works with a custom type `t` representing elements of a displacement algebra, supporting composition of elements and identification of the unit element. Used to enforce algebraic constraints in systems requiring ordered transformations, such as parsing or symbolic manipulation.",
      "description_length": 433,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.NearlyConstant",
      "description": "Provides operations to compare and combine elements representing transformations, including strict and non-strict ordering, identity checks, and composition. Works with a type `t` that models a partial order with a monoid structure. Used to implement displacement algebras where composition and ordering must respect specific algebraic properties.",
      "description_length": 347,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.FiniteSupport",
      "description": "Provides operations to compare and combine elements representing displacements, including strict and non-strict ordering, identity check, and composition. Works with a single type `t` that models a structure satisfying monoid and left-invariant order properties. Used to verify equivalence of displacement steps, enforce ordering constraints, and combine operations in algebraic contexts.",
      "description_length": 388,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.Prefix",
      "description": "Checks for equality between two prefix values and provides a low-level printing function for debugging. Works with the abstract type `t` representing prefix data. Used to compare configurations and output internal state during development.",
      "description_length": 239,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.Fractal",
      "description": "Provides operations to compare and combine elements using a strict order, reflexive order, identity check, and composition. Works with a custom type `t` that supports monoid composition and left-invariant ordering. Used to implement displacement algebras where elements represent transformations or relations with defined composition and comparison rules.",
      "description_length": 355,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.Opposite",
      "description": "Provides operations to compare and combine elements representing displacements, including strict and non-strict ordering, identity check, and composition. Works with a type `t` that models a monoid under composition and supports partial order relations. Used to verify equivalence of transformations, determine ordering in algebraic structures, and compose operations in a structured way.",
      "description_length": 388,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Syntax.Endo",
      "description": "Provides operations to create and manipulate endo values, including `shifted` for wrapping a value and state, and `top` for representing a top element. Works with the polymorphic type `('s, 'a) t` that pairs a state and a value. Used to serialize endo structures with a custom formatter via `dump`.",
      "description_length": 298,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Syntax.Free",
      "description": "Provides operations to construct and manipulate abstract syntax tree nodes representing levels, variables, and shifted expressions. Works with a polymorphic type that encodes either a variable, a top level, or a shifted level. Used to generate and serialize representations of scoped variable references in a type-safe manner.",
      "description_length": 326,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.StructuredType",
      "description": "Provides comparison and equality checks for a custom type, including strict and non-strict ordering. Outputs a verbose representation of the type for debugging purposes. Designed for use with ordered data where partial ordering semantics are relevant.",
      "description_length": 251,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Shift",
      "description": "Provides operations to compare and combine elements using a strict order and composition, with a unit element. Works with a single type `t` representing displacements, supporting checks for identity and equivalence. Used to model transformations where composition and ordering must adhere to specific algebraic properties.",
      "description_length": 322,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.ShiftWithJoin",
      "description": "Provides operations to compare, compose, and join elements of a partial order, including checking equality, ordering, and identifying the unit element. Works with a custom type `t` representing displacements in a structured algebraic system. Used to model and manipulate transformations where composition and supremum operations are required, such as in formal language theory or program analysis.",
      "description_length": 397,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Syntax",
      "description": "Encapsulates operations for handling universe level syntax, including endo values with state and abstract syntax tree nodes for levels, variables, and shifts. It supports a polymorphic type representing variables, top levels, or shifted levels, and another type for endo values paired with state. Functions like `shifted` and `top` allow construction of these elements, while `dump` enables serialization. It facilitates safe manipulation and representation of scoped variables and level displacements in formal systems.",
      "description_length": 520,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Semantics",
      "description": "manages universe level manipulations with shift operations and comparison capabilities. it defines `shift` and `level` types, supporting functions to adjust and combine shifts, along with infix operators for comparing levels. it enables safe level reordering in code transformations and allows sorting or conditional checks based on level rankings. examples include collapsing displacements during substitution and determining hierarchy in typed expressions.",
      "description_length": 458,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "mugen",
      "description": "Provides functions for parsing and validating JSON data, including decoding nested objects and arrays, and extracting values with type checking. Works with OCaml's native `string`, `list`, and `array` types, as well as custom record types. Used to process configuration files and API responses with strict schema enforcement.",
      "description_length": 325,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen",
      "description": "Combines ordered operations, comparisons, and algebraic manipulations for displacement types, supporting strict and partial orderings, composition, and supremum checks. It includes polymorphic handling of variables and levels, with functions for shifting, combining, and serializing structured data. Operations like `shifted`, `top`, and infix level comparisons enable safe manipulation of scoped variables and hierarchical structures. Examples include managing substitution displacements, enforcing algebraic properties in transformations, and analyzing level hierarchies in formal systems.",
      "description_length": 591,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 37,
    "meaningful_modules": 37,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 591,
    "min_description_length": 239,
    "avg_description_length": 359.94594594594594,
    "embedding_file_size_mb": 0.13485145568847656
  }
}