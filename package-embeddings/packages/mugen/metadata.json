{
  "package": "mugen",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 44,
  "creation_timestamp": "2025-07-15T23:14:06.771002",
  "modules": [
    {
      "module_path": "Mugen.Semantics.Free.Make.Infix",
      "library": "mugen",
      "description": "This module provides infix operators for comparing `level` values, including equality and ordering relations. It works directly with the `level` type to enable concise syntax in expressions involving level comparisons. Concrete use cases include writing inline conditions like `a <= b` when validating universe level constraints during type checking.",
      "description_length": 350,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Endo.Param",
      "library": "mugen",
      "description": "This module defines smart constructor parameters for endomorphic operations on universe levels with displacements. It provides functions to embed and extract levels into endo structures, specifically working with `Mugen.Syntax.endo` and a `level` type. It is used to manipulate universe levels in a structured way during semantic transformations.",
      "description_length": 346,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Free.S-Infix",
      "library": "mugen",
      "description": "This module defines infix comparison operators for `level` values, providing direct syntax for equality and ordering checks. It includes `=`, `<`, `<=`, `>`, and `>=`, each corresponding to a specific comparison operation on `level` types. These operators are useful when expressing constraints or relations between universe levels in type-checking or formal verification contexts.",
      "description_length": 381,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Semantics.Endo.Make",
      "library": "mugen",
      "description": "This module implements smart constructors for semantic operations on universe levels with displacements. It provides `shifted` to collapse multiple level displacements into a single normalized displacement, and `top` to represent the highest universe level. It works directly with `P.level` and `P.Shift.t`, enabling precise manipulation of universe hierarchies in type-checking or compilation pipelines.",
      "description_length": 404,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Free.S",
      "library": "mugen",
      "description": "This module defines smart constructors and comparison operations for universe levels represented as free syntax with shifts and variables. It provides functions to create and manipulate levels using `var`, `shifted`, and `top`, along with equality and ordering checks like `equal`, `lt`, `leq`, and their inverses. These operations are used to build and compare universe levels in a semantic context where displacements must be collapsed and ordered correctly.",
      "description_length": 460,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Free.Make",
      "library": "mugen",
      "description": "This module implements smart constructors for handling universe levels with displacements, enabling the creation, comparison, and transformation of levels through operations like shifting, collapsing, and variable binding. It provides a `level` type along with core functions to construct and manipulate levels, while its child module adds infix comparison operators for concise inline validation of level constraints. Specific use cases include managing hierarchical universes in type systems where displacement tracking is necessary, such as ensuring correct level assignments during type checking. Together, the module and its submodules support both low-level construction and high-level relational operations on universe levels.",
      "description_length": 733,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Endo.S",
      "library": "mugen",
      "description": "This module defines smart constructors for manipulating universe levels with displacements. It provides the `shifted` operation to combine a level and a shift into a normalized level, and the `top` value representing the highest level. These are used to construct and simplify universe expressions in type theory implementations.",
      "description_length": 329,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Free.Param",
      "library": "mugen",
      "description": "This module defines the parameter interface for smart constructors in the semantics of free level variables, including a type `var` for representing variables and an equality function `equal_var` to compare them. It includes a `Shift` module for handling displacements. It is used to implement operations that require variable identification and shifting in universe level computations.",
      "description_length": 386,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Semantics.Endo.Param-Shift",
      "library": "mugen",
      "description": "This module implements a displacement algebra for semantic operators, providing monoid operations like `compose` and `id`, along with order comparisons `lt` and `leq`. It works with the abstract type `t` representing shifts, supporting equivalence checks via `equal`, identity verification via `is_id`, and debugging output through `dump`. Concrete use cases include managing and comparing semantic displacements in universe level manipulations, ensuring left-invariant ordering under composition.",
      "description_length": 497,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Semantics.Free.Param-Shift",
      "library": "mugen",
      "description": "This module implements a displacement algebra for universe level shifts, providing equality, ordering, and composition operations over a type `t`. It supports strict and non-strict order checks (`lt`, `leq`), identity management (`id`, `is_id`), and associative composition of shifts. Concrete use cases include managing and comparing universe level displacements in type theory implementations.",
      "description_length": 395,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Shift.FiniteSupport",
      "library": "mugen",
      "description": "Represents infinite products of a base type with finite support, where all but finitely many elements are the identity. Supports composition, comparison, and conversions to and from lists, with trailing identities stripped in list representations. Useful for manipulating sequences of transformations where most elements are neutral, such as in algebraic structures or symbolic computation.",
      "description_length": 390,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.Opposite",
      "library": "mugen",
      "description": "This module implements displacement algebra operations for opposite shifts, providing identity, composition, and ordering checks. It works with a base type `t` derived from the `Base` module, enabling concrete manipulation of shift values in algebraic contexts. Use cases include modeling directional displacements and managing ordered transformations in McBride-style algebraic structures.",
      "description_length": 390,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Shift.Lexicographic",
      "library": "mugen",
      "description": "This module implements lexicographic ordering on binary products of two types, where comparisons prioritize the first component. It supports operations like `pair`, `fst`, `snd`, and ordered composition, working directly with types `X.t` and `Y.t` from its submodules. Use it to represent and manipulate ordered pairs where one component takes precedence in sorting or comparison logic.",
      "description_length": 386,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.ShiftWithJoin.Int",
      "library": "mugen",
      "description": "This module implements displacement algebra with joins for integers under addition, supporting operations like composition (addition), join (maximum), and comparisons. It provides concrete functionality for combining integer displacements, checking equivalence and order, and converting to and from raw integers. Use cases include managing additive offsets in data structures or formalizing shift operations in domain-specific languages.",
      "description_length": 437,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.ShiftWithJoin.FiniteSupport",
      "library": "mugen",
      "description": "This module represents infinite products with finite support, using a base type to define the elements. It supports operations like composition, join, and equality checks, along with list conversions. It is useful for manipulating sequences where only a finite number of elements are non-neutral, such as in symbolic computation or formal language processing.",
      "description_length": 359,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.StructuredType.PartiallyOrderedTypeWithRightAction",
      "library": "mugen",
      "description": "This module defines a partially ordered type equipped with a right action. It provides comparison operations `lt` and `leq` for determining strict and non-strict partial ordering between values of type `t`, along with an equivalence check `equal`. The right action is applied via `act`, transforming a value of type `t` using an action of type `act`. Use cases include modeling ordered algebraic structures with transformation actions, such as timed automata transitions or versioned state updates.",
      "description_length": 498,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Syntax.Free",
      "library": "mugen",
      "description": "This module provides constructors and a printer for values representing syntax with free variables and displacements. It supports creating shifted levels, top-level markers, and variables, while working with user-defined state and variable types. Concrete use cases include building and inspecting terms in a syntax tree that tracks universe levels and free variables.",
      "description_length": 368,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.Prefix",
      "library": "mugen",
      "description": "This module implements operations for prefix-based displacement algebras, supporting composition, ordering checks, and list conversion. It works with a base type `Base.t` and constructs displacements as ordered sequences of base elements. Concrete use cases include representing and manipulating symbolic shifts in McBride's notation, such as composing displacements or checking equivalence and ordering in partial orders.",
      "description_length": 422,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.ShiftWithJoin.Semilattice",
      "library": "mugen",
      "description": "This module defines a semilattice structure with a partial order and displacement operations. It works with an abstract type `t` equipped with equality, comparison relations (`lt`, `leq`), a unit element `id`, and operations to compose and join values. Concrete use cases include modeling hierarchical or scoped transformations where composition is non-commutative and joins represent least upper bounds.",
      "description_length": 404,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Shift.NearlyConstant",
      "library": "mugen",
      "description": "This module represents infinite sequences of displacements where only finitely many elements differ from a fixed base value. It supports composition of sequences, equality checks, and ordering comparisons, with operations optimized to handle the finite variation property. Use cases include modeling incremental changes with a stable background state and manipulating infinite structures in displacement algebra.",
      "description_length": 412,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.Int",
      "library": "mugen",
      "description": "This module implements displacement algebra for integers under addition, supporting operations like composition of shifts, equality checks, ordering comparisons, and integer conversions. It works directly with the abstract type `t` representing integer displacements, where values can be composed incrementally and compared. Concrete use cases include managing positional offsets in sequences or handling additive transformations where overflow is not a concern.",
      "description_length": 462,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Shift.NonPositive",
      "library": "mugen",
      "description": "This module implements non-positive integers with addition as the primary operation, supporting comparisons, identity checks, and composition. It works with a single abstract type `t` representing non-positive integers, and provides concrete conversions to and from `int`. Use cases include displacement calculations in algebraic structures where only non-positive values are valid, such as certain kinds of offset or shift tracking in formal verification or parser combinators.",
      "description_length": 478,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Shift.Constant",
      "library": "mugen",
      "description": "This module implements displacement algebra for constant shifts, combining action and constant values through composition. It supports equality, ordering, and standard algebraic operations like identity and composition, producing either actions or constants as results. It is used to model McBride-style displacement operators with a focus on strict ordering and unit checks.",
      "description_length": 375,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.ShiftWithJoin.Product",
      "library": "mugen",
      "description": "This module implements displacement algebras with joins for binary products, combining values from two underlying structures X and Y. It supports operations like pairing, projection, composition, and join, with distinguished identity and ordering checks. Useful for managing compound displacements in structured data transformations.",
      "description_length": 333,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Semantics.Free",
      "library": "mugen",
      "description": "This module provides semantic operations for managing free variables in syntax trees, with a focus on universe levels and their displacements. It includes core data types like `level` and `var`, along with operations for shifting, collapsing, and comparing levels to ensure correct variable binding and scope tracking. Submodules define infix comparison operators, smart constructors, and displacement algebra, enabling concise expression of level constraints and transformations. Use cases include type checking and normalization in dependently typed languages where precise universe management is required.",
      "description_length": 608,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.StructuredType.EqualityType",
      "library": "mugen",
      "description": "This module defines structural equality and basic serialization for a type `t`. It includes `equal` for comparing values and `dump` for debugging output. It is used to ensure consistent equivalence checks and inspection of complex data structures.",
      "description_length": 247,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.ShiftWithJoin.BoundedSemilattice",
      "library": "mugen",
      "description": "This module defines a bounded semilattice structure with displacement operations, supporting comparisons (equality, strict less-than, less-than-or-equal), composition of displacement operators, and joins to compute maxima. It works with a single abstract type `t` representing displacement values, including distinguished elements `id` (unit) and `bot` (bottom). Concrete use cases include modeling hierarchical transformations or order-preserving modifications where a minimal and maximal combination operation is required.",
      "description_length": 524,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.ShiftWithJoin.NonPositive",
      "library": "mugen",
      "description": "This module implements non-positive integers under addition, supporting operations like equality, ordering, composition, and joining values. It provides concrete functionality for comparing values (lt, leq), checking the identity element (is_id), combining displacements (compose), and selecting maximums (join). Use cases include modeling displacements or offsets where only non-positive integers are valid, such as in certain algebraic structures or domain-specific calculations.",
      "description_length": 481,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Syntax.Endo",
      "library": "mugen",
      "description": "This module defines endomorphisms over syntax structures with universe levels and displacements. It provides constructors `shifted` and `top` to build endo values, along with a `dump` function for low-level debugging output. These are used to represent and inspect transformations within the syntax of a type theory with level arithmetic.",
      "description_length": 338,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.Fractal",
      "library": "mugen",
      "description": "This module implements fractal displacement structures with operations for composing and comparing displacement values. It works with a base displacement type and extends it with hierarchical operations through embedding and pushing. Concrete use cases include managing layered transformations in algebraic structures where displacements must be combined in a non-flat hierarchy.",
      "description_length": 379,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Semantics.Endo",
      "library": "mugen",
      "description": "This module provides semantic operations for endomorphisms over universe levels with displacements, enabling transformations like shifting, substitution, and normalization on `Mugen.Syntax.endo` structures. It includes smart constructors for embedding and manipulating levels through functions like `shifted` and `top`, and defines a displacement algebra with monoid operations `compose` and `id`, supporting comparisons and equivalence checks. Direct use cases include simplifying and analyzing universe-level expressions in type-checking pipelines, while submodules handle structured level embedding, displacement normalization, and semantic operator composition. It works with core types like `P.level`, `P.Shift.t`, and abstract shift representations for precise universe hierarchy manipulation.",
      "description_length": 799,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.ShiftWithJoin.Nat",
      "library": "mugen",
      "description": "This module implements natural numbers with addition as the primary operation, supporting comparisons like equality, less-than, and less-than-or-equal, as well as joining values via maximum. It includes identity handling, composition in McBride's notation, and conversions to and from integers. Use cases include modeling displacements, managing offsets in sequences, and algebraic manipulation where natural numbers represent non-negative quantities.",
      "description_length": 451,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.Product",
      "library": "mugen",
      "description": "This module implements displacement algebra for binary products, combining values from two component algebras. It supports operations like pairing, projection, and composition, along with identity checks and ordering comparisons. It is used to model structured displacements in a product space, such as tracking simultaneous changes in two independent dimensions.",
      "description_length": 363,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift.Nat",
      "library": "mugen",
      "description": "This module implements natural numbers with addition as the primary operation, supporting equality checks, ordering comparisons, and identity verification. It defines a type `t` for natural numbers and provides functions to compose values additively, compare them, and convert to and from integers. Concrete use cases include modeling displacements or offsets in sequences where only non-negative values are valid.",
      "description_length": 414,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.StructuredType.PartiallyOrderedType",
      "library": "mugen",
      "description": "Implements comparisons for partially ordered types with strict and non-strict ordering functions. Works with structured types that support equivalence and ordered relationships where trichotomy may not hold. Useful for implementing lattice operations or dependency resolution where partial orderings are inherent.",
      "description_length": 313,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Shift.S",
      "library": "mugen",
      "description": "Implements a displacement algebra with operations for composing elements, comparing them with strict and non-strict orderings, and checking identity. Works with a single abstract type `t` representing displacement elements. Useful for modeling ordered structures where elements can be combined and compared, such as time intervals, geometric transformations, or version deltas.",
      "description_length": 377,
      "index": 35,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Mugen.ShiftWithJoin.NearlyConstant",
      "library": "mugen",
      "description": "This module represents infinite sequences where only finitely many elements differ from a fixed base displacement. It supports composition of displacements, partial order comparisons, and join operations to find maxima. Use cases include modeling transformations with mostly uniform structure but localized variations, such as in certain algebraic data manipulation or transformation systems.",
      "description_length": 392,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.ShiftWithJoin.Lexicographic",
      "library": "mugen",
      "description": "This module implements displacement operations for lexicographically ordered pairs, combining two ordered components into a composite structure. It supports comparison (lt, leq), composition, and join operations, along with pair construction and projections. It is useful for managing hierarchical displacements where one component takes precedence in ordering, such as in certain program analysis or transformation pipelines.",
      "description_length": 426,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.StructuredType",
      "library": "mugen",
      "description": "This module provides structured types with support for equality, partial ordering, and right action behaviors, enabling the implementation of algebraic structures like ordered monoids and semigroups. It includes operations for comparison (`lt`, `leq`, `equal`), transformation via right action (`act`), and structural inspection (`dump`), facilitating use cases such as timed automata transitions and lattice operations. Submodules refine these behaviors with specific implementations for ordered types with actions, structural equality with serialization, and strict/non-strict comparison logic. Together, they form a cohesive interface for managing complex, ordered, and transformable data structures.",
      "description_length": 703,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.ShiftWithJoin",
      "library": "mugen",
      "description": "This module combines displacement algebras with join operations across various ordered, additive structures, supporting data types such as integers, natural numbers, non-positive values, finite-support functions, and lexicographically ordered pairs. It provides core operations like composition, join (maximum), comparison, and identity checks, enabling precise modeling of resource allocation, temporal shifts, and bounded accumulations. Submodules extend this functionality to binary products, infinite sequences, semilattices, and scoped transformations, allowing compound displacements, localized variations, and hierarchical operations. Examples include managing additive offsets in data structures, formalizing domain-specific shift operations, and modeling scoped transformations with least upper bounds.",
      "description_length": 811,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mugen.Shift",
      "library": "mugen",
      "description": "This module provides displacement algebras for integer-like structures, enabling shifting, offsetting, and bounded displacement over abstract positions or indices. It supports concrete types such as integers, natural numbers, and non-positive integers, each with composition, comparison, and conversion operations\u2014allowing tasks like tracking cursor positions or managing memory offsets. Submodules handle structured displacements including lexicographic ordering, infinite sequences with finite variation, prefix-based sequences, and fractal hierarchies, supporting advanced use cases like symbolic computation and layered transformations. Additional modules for products, constants, and opposite shifts enable modeling multi-dimensional, directional, and McBride-style algebraic displacements.",
      "description_length": 795,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Syntax",
      "library": "mugen",
      "description": "This module handles the representation and manipulation of universe levels with displacements in a syntax tree. It introduces data types for syntax nodes with free variables and endomorphisms that model transformations on these structures. Operations include creating shifted levels, marking top-level constants, and dumping internal representations for debugging. You can use it to build, inspect, and transform terms that track universe levels and free variables during type checking or compilation.",
      "description_length": 501,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen.Semantics",
      "library": "mugen",
      "description": "This module implements semantic operations for manipulating universe levels and displacements, centered around data types like `level`, `var`, and `Shift.t`. It supports key operations such as shifting, collapsing, comparison, and composition to manage variable binding, scope tracking, and normalization in dependently typed languages. Submodules provide infix operators, smart constructors, and displacement algebra for expressing and simplifying level constraints. Example uses include type checking and universe hierarchy analysis through transformations like `shifted`, `top`, and `compose`.",
      "description_length": 596,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mugen",
      "library": "mugen",
      "description": "This collection implements algebraic structures for ordered, transformable data with displacement and universe-level semantics. Core data types include ordered monoids, semigroups, displacement algebras, and syntax-aware universe levels, supporting operations like comparison (`lt`, `leq`, `equal`), transformation (`act`, `shift`), join (`max`), and structural inspection (`dump`). You can model timed automata transitions, manage additive offsets in data structures, track cursor or memory positions, and manipulate universe levels in dependently typed languages. Specific examples include symbolic computation with layered transformations, scoped transformations with least upper bounds, and normalization of terms with free variables during type checking.",
      "description_length": 759,
      "index": 43,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 44,
    "meaningful_modules": 44,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 811,
    "min_description_length": 247,
    "avg_description_length": 460.72727272727275,
    "embedding_file_size_mb": 0.16028881072998047
  }
}