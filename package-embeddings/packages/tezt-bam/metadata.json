{
  "package": "tezt-bam",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:08.435818",
  "modules": [
    {
      "module_path": "Tezt_bam.Test",
      "library": "tezt-bam",
      "description": "This module manages test registration, execution, and lifecycle hooks for writing unit, integration, and regression tests. It supports running asynchronous test implementations, applying tags and titles for selection, and handling setup/cleanup with per-test functions. It works directly with test descriptions, seeds for randomness control, and structured test results, enabling use cases like parallel test execution, deterministic test runs, and detailed error reporting with context-specific logging.",
      "description_length": 504,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tezt_bam.Pbt",
      "library": "tezt-bam",
      "description": "This module registers property-based tests that generate random inputs using a specified generator and validate them against a property function. It works with arbitrary data types through the `Gen.t` monadic generator and supports custom pretty-printing, hashing, and regression testing with captured samples. It is used to define tests that validate invariants over randomly generated data, such as checking that a function's output satisfies certain conditions across a range of inputs.",
      "description_length": 489,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tezt_bam",
      "library": "tezt-bam",
      "description": "This module provides a comprehensive testing framework for unit, integration, and regression testing with support for both synchronous and asynchronous test execution. It centers around test registration, execution control, and result reporting, offering structured data types like test descriptions, tags, and seeds for deterministic runs. Key operations include defining test cases with setup and cleanup hooks, generating and validating random inputs through property-based testing, and capturing and comparing outputs for regression checks. Examples include running tagged tests in parallel, validating JSON API responses, and automatically reproducing failures with detailed logging.",
      "description_length": 688,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 688,
    "min_description_length": 489,
    "avg_description_length": 560.3333333333334,
    "embedding_file_size_mb": 0.011321067810058594
  }
}