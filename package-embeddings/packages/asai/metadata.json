{
  "package": "asai",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 16,
  "creation_timestamp": "2025-08-15T12:16:39.719019",
  "modules": [
    {
      "module_path": "Asai.Tty.Make",
      "library": "asai",
      "description": "This module displays compiler diagnostics in UNIX terminals with customizable formatting. It supports ANSI control codes, color output, backtrace visibility, line breaking strategies, and tab expansion. Use it to render structured diagnostic messages to users with terminal-specific enhancements.",
      "description_length": 296,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai.GitHub.Make",
      "library": "asai",
      "description": "This module provides a `print` function that converts a diagnostic message into a GitHub Actions workflow command, specifically emitting only the main explanation of the diagnostic. It operates on `Message.t` values wrapped in `Asai.Diagnostic.t`, which include structured error or warning information. A concrete use case is reporting compiler diagnostics directly to a CI/CD pipeline in a format that GitHub Actions can parse and display as actionable annotations.",
      "description_length": 466,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai.StructuredReporter.Make",
      "library": "asai",
      "description": "This module generates a reporter for compiler diagnostics using algebraic effects, enabling structured message handling with context such as severity, location, and backtraces. It provides operations to emit or abort computations with diagnostics, manipulate backtraces and locations, and construct diagnostics with automatic context inclusion. Concrete use cases include reporting type-checking errors with source locations, tracing execution frames for debugging, and integrating diagnostics from external libraries into a main application's error-handling pipeline.",
      "description_length": 568,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai.Explicator.Make",
      "library": "asai",
      "description": "Implements a diagnostic explication engine that maps tagged source ranges to formatted output using customizable blending logic. Works with lists of tagged ranges and structured explication output types. Used to generate highlighted diagnostic messages from parsed source code regions with specific tag merging rules.",
      "description_length": 317,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asai.Reporter.Make",
      "library": "asai",
      "description": "This module enables generating, transforming, and handling structured diagnostics with severity levels, source locations, and backtraces, primarily operating on `Diagnostic.t` and `Message.t` types. It supports scoped context manipulation for diagnostics, effect interception, and exception integration, tailored for compiler workflows requiring precise error reporting and user-facing message customization. Key applications include fatal/non-fatal error emission, diagnostic metadata enrichment, and mapping unhandled effects to actionable compiler messages.",
      "description_length": 560,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai.Reporter",
      "library": "asai",
      "description": "This module generates and handles structured diagnostics with severity levels, source locations, and backtraces, primarily operating on `Diagnostic.t` and `Message.t` types. It supports scoped context manipulation, effect interception, and exception integration for compiler workflows. Key uses include emitting fatal and non-fatal errors, enriching diagnostic metadata, and mapping unhandled effects to user-facing compiler messages.",
      "description_length": 434,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai.SourceReader",
      "library": "asai",
      "description": "This module loads source content using memory-mapped I/O and provides direct access to its bytes. It works with source values representing file content and supports operations like length retrieval and unsafe byte access. Use it to efficiently read raw source data when implementing custom diagnostic handlers.",
      "description_length": 310,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai.Range",
      "library": "asai",
      "description": "This module provides utilities for constructing and transforming structured representations of source code locations, including ranges and positions, with support for both file-backed and ephemeral string sources. It enables conversion of raw lexer positions into hierarchical range structures, attachment of diagnostic metadata to specific code spans, and extraction of contextual location information for error reporting. The operations are primarily used in compiler diagnostics pipelines to associate semantic analysis data with precise source locations and to generate human-readable diagnostic messages with positional context.",
      "description_length": 633,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai.Explication",
      "library": "asai",
      "description": "This module defines structures and operations for creating and manipulating highlighted text, primarily used in compiler diagnostics. It works with a custom type `'tag t` representing formatted text with annotations, where `'tag` identifies regions of interest for rendering. The `dump` function prints the structure of an explication for debugging, using a formatter to visualize tags and their positions.",
      "description_length": 406,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai.Diagnostic",
      "library": "asai",
      "description": "This module defines diagnostics for compiler messages with severity levels like Error, Warning, and Bug, and supports rich text formatting with location information. It provides functions to construct and manipulate diagnostics, including formatted messages, backtraces, and contextual remarks tied to source code locations. Concrete use cases include reporting type-checking errors, unused variable warnings, or internal compiler bugs with precise source locations and structured explanations.",
      "description_length": 494,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asai.Tty",
      "library": "asai",
      "description": "This module formats and renders compiler diagnostics for UNIX terminals, supporting ANSI escape codes, color output, backtraces, line wrapping, and tab expansion. It operates on structured diagnostic data, including messages, locations, and severity levels. Use it to produce user-friendly diagnostic output tailored to terminal environments with customizable visual enhancements.",
      "description_length": 380,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai.Explicator",
      "library": "asai",
      "description": "Implements a diagnostic explication engine that maps tagged source ranges to formatted output using customizable blending logic. Works with lists of tagged ranges and structured explication output types. Used to generate highlighted diagnostic messages from parsed source code regions with specific tag merging rules.",
      "description_length": 317,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asai.MinimumSigs",
      "library": "asai",
      "description": "This module defines core interfaces for diagnostic messaging and reporting. It includes `Message` for structured diagnostic data with severity and location, and `Reporter` for handling output of diagnostics to streams or logs. It enables consistent error reporting across compiler components and tools.",
      "description_length": 302,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai.GitHub",
      "library": "asai",
      "description": "This module formats diagnostic messages into GitHub Actions workflow commands, emitting only the main explanation. It works with `Asai.Diagnostic.t` values containing structured compiler diagnostics. Useful for integrating compiler warnings or errors directly into CI/CD pipelines as actionable annotations.",
      "description_length": 307,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai.StructuredReporter",
      "library": "asai",
      "description": "This module implements a structured diagnostic reporting system using algebraic effects, allowing precise control over message emission, context management, and computation abortion. It works with diagnostics that include severity levels, source locations, and backtraces, enabling rich, structured message construction. It is used to report type-checking errors with source positions, trace execution frames, and integrate diagnostics from external components into a unified error-handling flow.",
      "description_length": 496,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asai",
      "library": "asai",
      "description": "This module provides structured compiler diagnostics with precise source location tracking, severity-based message handling, and rich text formatting. It operates on diagnostics tied to source code ranges, positions, and backtraces, supporting use cases like type-checking error reporting, unused variable warnings, and internal compiler bug detection. Concrete outputs include terminal-formatted diagnostics with ANSI colors and GitHub Actions workflow annotations.",
      "description_length": 466,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 633,
    "min_description_length": 296,
    "avg_description_length": 422.0,
    "embedding_file_size_mb": 0.23223876953125
  }
}