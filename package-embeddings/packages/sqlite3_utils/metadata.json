{
  "package": "sqlite3_utils",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:07.061266",
  "modules": [
    {
      "module_path": "Sqlite3_utils.Cursor",
      "library": "sqlite3_utils",
      "description": "This module provides operations to traverse and manipulate database query results through a cursor interface. It supports extracting single values, iterating over rows, mapping transformations, and converting results to sequences or lists. Designed for use after executing SQL queries, it enables efficient access to result sets, such as retrieving counts, processing rows, or building collections from query output.",
      "description_length": 416,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sqlite3_utils.Ty",
      "library": "sqlite3_utils",
      "description": "This module provides functions to define and compose type representations for binding SQL statement arguments and extracting values from query results. It supports primitive types (int, float, text), nullable values, and tuple constructions (pairs, triples, up to six-element tuples) using combinators like `@>` and `@>>` to chain operations. These tools enable type-safe handling of complex parameter lists and structured data mapping in database interactions, such as passing multiple arguments to prepared statements or transforming result rows into typed records.",
      "description_length": 567,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sqlite3_utils",
      "library": "sqlite3_utils",
      "description": "This module enables type-safe SQLite database interactions by combining connection management, transaction control, and structured query execution with compile-time type guarantees. It supports opening connections, running parameterized SQL statements, and managing nested transactions through savepoints, while its cursor module allows traversal of query results via row iteration, value extraction, and transformation into sequences or lists. The type representation submodule defines mappings between SQL and OCaml types using combinators that support primitives, nullable values, and tuples, enabling schema-safe data conversion for both input parameters and result sets. Example uses include executing typed SQL queries that return mapped records, composing complex parameter bindings for prepared statements, and processing result sets with custom transformations and aggregations.",
      "description_length": 887,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 887,
    "min_description_length": 416,
    "avg_description_length": 623.3333333333334,
    "embedding_file_size_mb": 0.011317253112792969
  }
}