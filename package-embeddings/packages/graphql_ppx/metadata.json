{
  "package": "graphql_ppx",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 32,
  "creation_timestamp": "2025-07-15T23:13:12.055649",
  "modules": [
    {
      "module_path": "Graphql_ppx",
      "library": "graphql_ppx",
      "description": "This module provides utilities for parsing and transforming GraphQL configurations within OCaml AST structures, focusing on extracting values, handling module bindings, and validating query semantics. It operates on GraphQL AST definitions, source location data, and configuration lists, with use cases including PPX-driven query rewriting and compile-time validation of GraphQL module structures. Key patterns involve AST traversal, error formatting, and configuration-driven behavior control through typed query settings.",
      "description_length": 523,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Validations.AllRules",
      "library": "graphql_ppx.base",
      "description": "This module implements validation rules for traversing GraphQL AST nodes during schema validation. It provides functions to inspect and validate input values, fields, fragments, directives, and operation definitions as they are entered or exited during traversal. These validations ensure correctness of GraphQL queries against a schema, such as type consistency and proper usage of variables and directives.",
      "description_length": 408,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Traversal_utils.Context",
      "library": "graphql_ppx.base",
      "description": "This module manages context during GraphQL schema traversal, providing operations to track and manipulate type information as the schema is processed. It includes functions to push and retrieve input and parent types, as well as report errors and warnings with source position details. Concrete use cases include validating type references, handling nested input types, and generating precise diagnostic messages during schema parsing.",
      "description_length": 435,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Traversal_utils.VisitorSig",
      "library": "graphql_ppx.base",
      "description": "This module provides a visitor interface for traversing and manipulating GraphQL AST nodes using enter/exit hooks, enabling contextual analysis or transformation of elements like operations, fragments, directives, fields, and scalar values. It operates on typed, source-annotated AST structures from `Graphql_ast`, leveraging visitor state and context to process nodes such as object fields, lists, and input values during traversal. Specific use cases include AST rewriting, schema validation, and generating metadata by inspecting or modifying nodes like field arguments, inline fragments, or directive annotations.",
      "description_length": 617,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Validations.AllRulesImpl",
      "library": "graphql_ppx.base",
      "description": "This module provides validation functions for traversing and checking GraphQL AST nodes during static analysis, with entry and exit hooks for documents, operations, fragments, and other elements. It operates on scalar values, enums, variables, lists, objects, inline fragments, and object fields, ensuring type correctness and required field constraints within a traversal state context. These validations enforce schema rules when processing GraphQL documents, such as verifying variable usage, directive arguments, and selection set integrity.",
      "description_length": 545,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Traversal_utils.Visitor",
      "library": "graphql_ppx.base",
      "description": "This module implements a visitor pattern for traversing GraphQL AST nodes, providing callbacks for entering and exiting input values, visiting fields, selections, directives, and definitions. It works with GraphQL AST structures like `input_value`, `field`, `selection`, `directive`, and `document`, along with contextual information via `ctx`. Concrete use cases include analyzing or transforming GraphQL queries during compilation, such as validating input types or generating OCaml code from the AST.",
      "description_length": 503,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Traversal_utils.AbstractVisitor",
      "library": "graphql_ppx.base",
      "description": "This module implements a visitor pattern for traversing and transforming GraphQL AST nodes and values, providing `enter_*` and `exit_*` hooks for structured manipulation of documents, operations, fragments, directives, fields, selections, and scalar types (int, float, string, etc.). It operates on a triad of generic parameters representing environment, context, and state, enabling use cases like schema validation, query optimization, or AST normalization where contextual tracking and node-level transformations are required.",
      "description_length": 529,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Type_utils.Generic",
      "library": "graphql_ppx.base",
      "description": "This module defines types and operations for representing and comparing GraphQL type structures, including primitives, composites, and modifiers like non-null and list. It provides functions to convert type representations to strings, check equality, validate type compatibility, and generate descriptive errors for type mismatches. It is used to process and validate GraphQL schemas and queries by comparing type trees derived from schema definitions and AST nodes.",
      "description_length": 466,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Extract_type_definitions",
      "library": "graphql_ppx.base",
      "description": "This module processes GraphQL type definitions from AST structures, extracting and categorizing types, fields, and arguments into typed representations. It handles nullable and list types, object fields with locations, and input object definitions, supporting fragment and variable extraction. Concrete use cases include generating OCaml type definitions from GraphQL queries and validating input argument structures during code generation.",
      "description_length": 440,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Log",
      "library": "graphql_ppx.base",
      "description": "This module provides two functions: `log` for printing general messages and `error_log` for printing error messages, both taking a string argument. It works directly with string values to output logs to standard output or error streams. Concrete use cases include debugging during development and reporting runtime errors in GraphQL-related tools.",
      "description_length": 347,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Ppx_config",
      "library": "graphql_ppx.base",
      "description": "This module manages configuration settings for a GraphQL preprocessor, offering operations to define output modes, handle fragments, and globally configure schema paths and verbosity. It centers on a record-based structure to store options, enabling use cases like query processing, code generation, and schema extensions, while supporting variable handling, location-aware error reporting, and execution context determination.",
      "description_length": 427,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Ast_transforms",
      "library": "graphql_ppx.base",
      "description": "This module provides AST transformations for GraphQL documents, specifically handling `__typename` field manipulation. It works with GraphQL AST documents and schema definitions to modify selection sets and union types during preprocessing. Concrete use cases include adding `__typename` to selection sets for Apollo compatibility and removing it from unions to prevent duplication during serialization.",
      "description_length": 403,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Schema",
      "library": "graphql_ppx.base",
      "description": "This module represents GraphQL schemas with detailed type definitions and metadata, enabling field and type lookups, directive and enum value retrieval, and resolution of interface implementations. It operates on schema elements like type metadata, references, and directives, facilitating introspection and structural navigation for tasks such as validation, code generation, and schema analysis.",
      "description_length": 397,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Read_schema",
      "library": "graphql_ppx.base",
      "description": "This module provides functionality for parsing JSON-encoded GraphQL schemas into structured metadata and managing schema representations through file operations. It handles the creation of schema components like fields, enums, and directives from JSON values while working with hashtables, file paths, and serialized schema formats. Key use cases include schema validation, caching preprocessed schemas, and lazy loading of schema definitions to optimize performance in GraphQL tooling pipelines.",
      "description_length": 496,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Graphql_ast",
      "library": "graphql_ppx.base",
      "description": "This module defines the abstract syntax tree (AST) for GraphQL queries, including types like `type_ref`, `input_value`, and `operation`, which represent GraphQL type annotations, input values, and operations such as queries and mutations. It includes functions like `innermost_name` to extract the base name from a type reference, useful for introspection or code generation. The module supports parsing and manipulating GraphQL documents with constructs like variables, directives, and fragments, enabling tasks like schema validation or query transformation.",
      "description_length": 560,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Graphql_printer",
      "library": "graphql_ppx.base",
      "description": "This module provides functions to convert GraphQL AST nodes and type references into string representations. It works with GraphQL AST documents, type references, and schema definitions, producing formatted output for queries and fragments. Concrete use cases include generating valid GraphQL query strings from internal AST representations and resolving fragment references during code generation.",
      "description_length": 398,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Graphql_lexer",
      "library": "graphql_ppx.base",
      "description": "This module processes character streams from GraphQL input into structured tokens like identifiers, literals, and punctuation, while tracking source positions for error reporting. It operates on string sources using a stateful lexer to incrementally produce token sequences or lexing errors, supporting use cases such as parsing GraphQL queries, validating syntax, and generating precise diagnostic messages for malformed inputs.",
      "description_length": 429,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Schema_printer",
      "library": "graphql_ppx.base",
      "description": "This module provides functions to convert various GraphQL schema elements\u2014such as type references, fields, input fields, objects, enums, and scalars\u2014into their string representations. It operates directly on schema metadata types like `type_ref`, `field_meta`, `argument_meta`, and others defined in the `Schema` module. These functions are used to generate readable GraphQL schema definitions from internal schema structures, particularly useful during schema introspection or code generation tasks.",
      "description_length": 500,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Generator_utils",
      "library": "graphql_ppx.base",
      "description": "This module includes functions for error handling with source locations, string manipulation, and option processing. It works with strings, options, lists, and custom types like `error_marker` and `output_config`, which holds configuration for code generation including schema, source positions, and template settings. Concrete uses include raising location-aware errors during parsing, filtering lists with optional transformations, and preparing GraphQL AST data for code generation.",
      "description_length": 485,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Graphql_parser_document",
      "library": "graphql_ppx.base",
      "description": "Implements low-level parsing functions for converting GraphQL documents into structured AST nodes, handling constructs like operations, fragments, directives, and variables. It operates on a parser state to produce results containing typed AST elements or detailed parse errors with source position spans. This enables precise validation of GraphQL queries, transformation of documents, or tooling that requires accurate error reporting tied to specific source locations.",
      "description_length": 471,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Result_structure",
      "library": "graphql_ppx.base",
      "description": "This module defines data structures and types for representing GraphQL query results, including fields, fragments, and operations with detailed source location tracking. It supports exhaustive and non-exhaustive result analysis, handling named fields and fragment spreads with associated types, arguments, and locations. Concrete use cases include processing and validating GraphQL responses during query execution and static analysis.",
      "description_length": 435,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Option",
      "library": "graphql_ppx.base",
      "description": "This module provides functions for working with `option` values, including mapping, flattening nested options, and safely or unsafely extracting values. It supports operations like `map` for transforming contained values, `flat_map` for chaining optional computations, and `get_or_else` for providing defaults. Use cases include handling optional data fields, composing functions that may fail, and asserting presence of values in debug contexts.",
      "description_length": 446,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Source_pos",
      "library": "graphql_ppx.base",
      "description": "This module tracks source code positions and spans during GraphQL parsing, using `source_position` records to represent locations by index, line, and column. It provides functions to create and manipulate spans, such as `advance_line` and `advance_col` for updating positions, and `start_end` to define ranges between two positions. These utilities are used to associate parsed GraphQL AST nodes with their original source locations for error reporting and tooling.",
      "description_length": 465,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Graphql_parser",
      "library": "graphql_ppx.base",
      "description": "This module implements a low-level parser for GraphQL syntax, handling token streams produced by the lexer. It provides operations to consume, inspect, and validate tokens, including functions to parse names, expect specific tokens, skip over sections, and parse lists enclosed by delimiters. Concrete use cases include building AST nodes for GraphQL queries by sequentially parsing tokens and validating structure during query compilation.",
      "description_length": 440,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Type_utils",
      "library": "graphql_ppx.base",
      "description": "This module represents and transforms GraphQL types using a variant-based structure that supports named types, lists, and nullable modifiers. It includes utilities to convert, compare, and validate type trees, enabling operations like unwrapping nested types, checking equality, and generating descriptive type errors. The child module extends this functionality by providing detailed type representations for primitives and composites, along with operations to validate type compatibility between schema and AST-derived structures. Together, they enable precise type analysis and transformation during GraphQL code generation, such as determining nullability or converting type references between internal representations.",
      "description_length": 723,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Compat",
      "library": "graphql_ppx.base",
      "description": "Transforms the first character of a string to uppercase or lowercase, leaving the rest of the string unchanged. Works directly with string values. Useful for normalizing identifiers or formatting text output in GraphQL-related code generation and transformations.",
      "description_length": 263,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Traversal_utils",
      "library": "graphql_ppx.base",
      "description": "This module provides utilities for traversing and transforming GraphQL AST structures during code generation, combining context management, fragment resolution, and schema type conversion with a suite of visitor-based submodules for structured AST manipulation. It centers on data types like GraphQL AST nodes, source positions, schema types, and context structures that track type and input type stacks, offering operations such as `make_context`, `find_fragments`, and `as_schema_type_ref` for initializing state, collecting fragments, and converting type references. The child modules extend this foundation with visitor patterns that enable contextual analysis and transformation of fields, directives, input values, and selections, supporting use cases like schema validation, AST rewriting, and code generation through `enter_*` and `exit_*` hooks. Together, the module and its submodules facilitate tasks such as type validation, error reporting with source positions, and query optimization by combining direct API functions with customizable traversal logic.",
      "description_length": 1067,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Result_decoder",
      "library": "graphql_ppx.base",
      "description": "This module processes GraphQL AST definitions to generate output configurations and result structures used for code generation. It handles operations like merging schema information, resolving fragments, and preparing data for functions such as `parse`, `serialize`, and `makeVariables`. It works with GraphQL AST definitions, source positions, and output configurations, supporting use cases like compiling GraphQL queries into typed Reason code.",
      "description_length": 447,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Ast_serializer_apollo",
      "library": "graphql_ppx.base",
      "description": "This module serializes GraphQL AST nodes into dynamic OCaml values, handling optional values, lists, and structured types like directives, variables, and selections. It works with GraphQL AST types extended with source positions, converting them into polymorphic variants representing JSON-like structures. Concrete use cases include transforming parsed GraphQL queries into a format suitable for runtime processing or code generation.",
      "description_length": 435,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Validations",
      "library": "graphql_ppx.base",
      "description": "This module validates GraphQL AST documents against schema and query correctness rules, producing structured errors and warnings. It processes AST nodes and output configurations to enforce constraints like non-null arguments, directive validity, and fragment type correctness. The traversal-based validation system allows inspecting and validating input values, fields, directives, and operations through entry and exit hooks, ensuring type consistency and required field constraints across documents. Examples include verifying variable usage in queries, validating scalar and enum values, and ensuring fragment spreads reference valid types within a schema.",
      "description_length": 660,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base",
      "library": "graphql_ppx.base",
      "description": "This module processes and transforms GraphQL queries and schemas through a structured pipeline of parsing, validation, and code generation. It centers on GraphQL AST nodes, type definitions, and schema metadata, offering operations to extract, validate, and convert these elements into OCaml representations. Key data types include typed references, input values, schema structures, and source positions, with operations for adding or removing fields like `__typename`, resolving fragments, and handling nullable and list types. Examples include generating OCaml types from GraphQL queries, validating input arguments against a schema, and transforming selection sets for Apollo compatibility.",
      "description_length": 693,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_runtime",
      "library": "graphql_ppx.graphql_ppx_runtime",
      "description": "This module provides functions for manipulating JSON values and key-value pairs during GraphQL query processing. It includes `option_map` for transforming optional values, `merge_pairs` for combining JSON object fields with precedence, and `deepMerge` for recursively merging JSON structures. These operations are used to construct and manipulate GraphQL request payloads and responses.",
      "description_length": 386,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 33,
    "meaningful_modules": 32,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9696969696969697
  },
  "statistics": {
    "max_description_length": 1067,
    "min_description_length": 263,
    "avg_description_length": 494.96875,
    "embedding_file_size_mb": 0.1166839599609375
  }
}