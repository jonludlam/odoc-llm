{
  "package": "graphql_ppx",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 31,
  "creation_timestamp": "2025-08-15T12:29:58.814826",
  "modules": [
    {
      "module_path": "Graphql_ppx_runtime",
      "library": "graphql_ppx.graphql_ppx_runtime",
      "description": "Performs operations on GraphQL-related data structures, including mapping over optional values, merging JSON pairs, and deeply combining JSON objects. Works with `Yojson.Basic.t` values and string-keyed association lists. Used to construct and manipulate GraphQL query responses and input variables.",
      "description_length": 299,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx",
      "library": "graphql_ppx",
      "description": "This module provides operations for extracting and validating GraphQL configuration values from OCaml AST structures, transforming module declarations based on schema definitions, and formatting parsing errors with precise source locations. It works with OCaml abstract syntax trees, module signatures, and GraphQL schema representations to enable use cases like type-safe query generation, schema-driven code transformation, and compile-time validation of GraphQL configurations in PPX extensions.",
      "description_length": 498,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Validations.AllRules",
      "library": "graphql_ppx.base",
      "description": "This module implements validation rules for traversing GraphQL AST nodes during schema validation. It provides functions to inspect and validate input values, fields, fragments, directives, and operation definitions as part of a traversal process. These validations ensure correctness of GraphQL queries and fragments against a given schema.",
      "description_length": 341,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Traversal_utils.AbstractVisitor",
      "library": "graphql_ppx.base",
      "description": "This module provides traversal hooks for visiting and exiting GraphQL AST nodes during abstract syntax tree manipulation, supporting entry and exit actions for structural elements like documents, operations, fragments, directives, fields, and selections. It operates on generic state (`'a`) and context (`'b`) parameters while interacting with abstract GraphQL node types (`'c`), including value nodes such as integers, strings, enums, lists, and objects. It is particularly useful for implementing custom AST transformations, validation logic, or analysis tools that require pre- and post-processing of nodes during traversal.",
      "description_length": 627,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Type_utils.Generic",
      "library": "graphql_ppx.base",
      "description": "This module defines types and operations for representing and comparing GraphQL type structures, including base types like `String`, `Int`, and `Boolean`, as well as complex types such as `Object`, `Enum`, and `Union`. It supports type comparison with functions like `eq` and `eq_tree`, and validation between schema and input values using `can_apply` and `from_graphql_ast_iv`. Concrete use cases include type checking GraphQL queries against a schema and generating descriptive type mismatch errors during compilation.",
      "description_length": 520,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Traversal_utils.Context",
      "library": "graphql_ppx.base",
      "description": "This module manages context manipulation during GraphQL schema traversal, providing operations to track and update type information as the schema is processed. It supports pushing and retrieving input and parent types, as well as reporting errors and warnings with source position metadata. Concrete use cases include validating type references, handling nested input types, and generating precise diagnostic messages during schema parsing or transformation.",
      "description_length": 458,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Validations.AllRulesImpl",
      "library": "graphql_ppx.base",
      "description": "This module provides validation operations for enforcing correctness in GraphQL queries through AST traversal, using entry and exit hooks to apply rules at specific stages of parsing. It works with GraphQL AST structures including documents, operations, fragments, directives, scalar values, lists, objects, and fields, ensuring structural and type validity. The validations are used during static analysis to catch errors in query structure, variable usage, and input value formatting before execution.",
      "description_length": 503,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Traversal_utils.Visitor",
      "library": "graphql_ppx.base",
      "description": "This module implements a visitor pattern for traversing and analyzing GraphQL AST structures during PPX processing. It provides callbacks for entering and exiting input values, visiting fields, fragments, directives, and other GraphQL constructs with contextual information. It is used to implement custom AST transformations or validations by walking the structure of GraphQL queries, fragments, and operations.",
      "description_length": 412,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Result_structure",
      "library": "graphql_ppx.base",
      "description": "This module defines data structures and types for representing GraphQL query results, including fields, fragments, and operations with detailed source location tracking. It supports exhaustive and non-exhaustive result checking, handling of named fields and fragment spreads, and captures type information and variable definitions. It is used to build and analyze GraphQL query responses with precise error tracking and schema alignment.",
      "description_length": 437,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Result_decoder",
      "library": "graphql_ppx.base",
      "description": "This module processes GraphQL AST definitions to generate configuration and result structures used for code generation. It handles operations like merging schema information, resolving fragments, and preparing output configurations for queries. The generated structures are used to build runtime components such as serialization, parsing, and variable creation functions.",
      "description_length": 371,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Graphql_parser_document",
      "library": "graphql_ppx.base",
      "description": "This module offers functions to parse GraphQL documents into typed abstract syntax trees (ASTs), focusing on extracting selections, fields, fragments, directives, and type references while tracking source positions. It processes input streams using a parser state, generating either validated AST definitions or detailed error results with positional context. Its primary use cases include building GraphQL compilers, linters, or IDE tools requiring precise syntax analysis and error reporting.",
      "description_length": 494,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Read_schema",
      "library": "graphql_ppx.base",
      "description": "This module processes JSON data to construct typed OCaml representations of GraphQL schema entities\u2014such as fields, enums, and directives\u2014using hashtables for efficient manipulation and injecting metadata like `__typename`. It also supports schema management via file operations and serialization, enabling use cases like dynamic schema loading, caching, and integration with GraphQL APIs.",
      "description_length": 389,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Schema_printer",
      "library": "graphql_ppx.base",
      "description": "This module converts GraphQL schema definitions into string representations. It provides functions to print individual schema components like types, fields, enums, and scalars, as well as full object and input object definitions. Use it to generate readable GraphQL schema output from internal schema structures for debugging or code generation.",
      "description_length": 345,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Ast_serializer_apollo",
      "library": "graphql_ppx.base",
      "description": "This module serializes GraphQL AST nodes into dynamic OCaml values, primarily handling structures like optional values, lists, and named entities. It supports concrete operations such as converting GraphQL types, values, directives, and variable definitions into polymorphic variant representations. Use cases include generating runtime representations of GraphQL queries and transforming AST nodes for further processing or output.",
      "description_length": 432,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Schema",
      "library": "graphql_ppx.base",
      "description": "This module provides schema definition and introspection capabilities for GraphQL type systems, enabling the construction and analysis of complex type hierarchies including scalars, composite types (objects, interfaces, unions), enums, and directives. It operates on type metadata structures like `type_meta` and `directive_meta` to support use cases such as schema validation, code generation, and runtime type resolution through operations like field lookup, type comparison, and enum value extraction. Key functionalities include resolving schema roots (queries/mutations) and manipulating type references during compilation or tooling workflows.",
      "description_length": 649,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Type_utils",
      "library": "graphql_ppx.base",
      "description": "This module defines recursive type representations for GraphQL types, including named, nullable, and list types. It provides conversions between schema and AST type references, checks for nullability, and works with GraphQL type definitions and values. Concrete use cases include validating GraphQL queries against a schema and generating type mismatch errors during compilation.",
      "description_length": 379,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Ast_transforms",
      "library": "graphql_ppx.base",
      "description": "This module provides AST transformations for GraphQL documents, specifically handling `__typename` field manipulation. It works with GraphQL AST documents and schema definitions to modify selection sets and union types. Concrete use cases include adding `__typename` to selection sets for Apollo compatibility and removing it from unions to prevent duplication during PPX processing.",
      "description_length": 383,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Graphql_parser",
      "library": "graphql_ppx.base",
      "description": "This module implements a low-level parser for GraphQL syntax, operating on a list of lexed tokens with source position information. It provides functions to peek at, consume, and validate tokens, including utilities for parsing names, handling delimited lists, and reporting parse errors with precise source locations. Concrete use cases include building AST nodes during GraphQL schema or query parsing, such as extracting field names, argument lists, and type references.",
      "description_length": 473,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Traversal_utils",
      "library": "graphql_ppx.base",
      "description": "This module provides utilities for traversing and manipulating GraphQL AST nodes during PPX processing, including visitor hooks for entering and exiting nodes, context management for tracking type information, and functions for building and querying fragment definitions. It works with GraphQL AST structures, schema types, source positions, and diagnostic messages. Concrete use cases include validating type references, transforming input values, and generating precise errors or warnings during AST traversal.",
      "description_length": 512,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Graphql_ast",
      "library": "graphql_ppx.base",
      "description": "This module defines the abstract syntax tree (AST) for GraphQL queries, including types like `type_ref`, `input_value`, and `operation`, which represent GraphQL type annotations, input values, and operations such as queries and mutations. It includes functions like `innermost_name` to extract the base name from a type reference, useful for type resolution. Concrete use cases include parsing and manipulating GraphQL query structures, handling variables and directives, and building or analyzing selection sets in GraphQL documents.",
      "description_length": 534,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Graphql_lexer",
      "library": "graphql_ppx.base",
      "description": "This module tokenizes GraphQL input by converting character streams into structured tokens (e.g., identifiers, literals, punctuation) and provides utilities to scan, consume, or validate sequences of tokens. It operates on string sources using a mutable lexer state to track positions, producing results wrapped in error-aware types for robust parsing of queries, fragments, or variables. Key applications include lexing GraphQL documents, handling malformed syntax (e.g., unterminated strings), and enabling incremental token extraction for parser integrations.",
      "description_length": 562,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Extract_type_definitions",
      "library": "graphql_ppx.base",
      "description": "This module processes GraphQL type definitions from AST structures, extracting typed fields, fragments, and input objects with their locations and metadata. It resolves nested types like lists and nullable fields, generating OCaml type names from path identifiers. It is used to map GraphQL query structures to OCaml types during code generation in PPX rewriters.",
      "description_length": 363,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Option",
      "library": "graphql_ppx.base",
      "description": "This module provides operations for transforming, unwrapping, and checking `option` values. It includes functions for mapping over options, chaining optional computations, safely or unsafely extracting values, and providing default values. These functions are useful when handling optional data in GraphQL response parsing or similar contexts where missing values are common.",
      "description_length": 375,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Validations",
      "library": "graphql_ppx.base",
      "description": "This module performs validation of GraphQL queries by traversing the AST and applying correctness checks using entry and exit hooks. It works with GraphQL AST nodes such as documents, operations, fields, fragments, directives, and input values, ensuring structural and type correctness against a schema. It is used during static analysis to catch query errors such as invalid variable usage, incorrect field selections, and malformed input values before execution.",
      "description_length": 464,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Compat",
      "library": "graphql_ppx.base",
      "description": "Transforms string casing with `capitalize_ascii` converting the first character to uppercase and `uncapitalize_ascii` to lowercase. Operates strictly on ASCII characters, ensuring consistent identifier formatting. Useful for normalizing GraphQL field names or enum values during code generation or schema processing.",
      "description_length": 316,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Log",
      "library": "graphql_ppx.base",
      "description": "This module provides two functions for logging: `log` outputs general messages, while `error_log` specifically handles error messages. It works with string inputs and produces no return value, focusing solely on side effects. Concrete use cases include debugging during development and recording runtime errors for analysis.",
      "description_length": 324,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Generator_utils",
      "library": "graphql_ppx.base",
      "description": "This module includes functions for error handling with source location tracking, string manipulation for GraphQL identifiers, and utilities for processing GraphQL documents. It works with abstract syntax trees, source positions, and schema definitions to support code generation tasks. Concrete use cases include raising contextual errors during AST transformation and normalizing GraphQL fragment or query names.",
      "description_length": 413,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Ppx_config",
      "library": "graphql_ppx.base",
      "description": "This module manages configuration settings for a GraphQL preprocessor, handling operations like setting output formats (string or AST), fragment behavior, and schema extensions through string-based options and boolean flags. It works with global configuration records, location data for error context, and conditional logic tied to native compilation flags. Use cases include customizing query/mutation processing, enabling template tag behaviors, and dynamically extending schemas while validating against location-specific constraints.",
      "description_length": 537,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base.Graphql_printer",
      "library": "graphql_ppx.base",
      "description": "This module converts GraphQL AST nodes and type references into string representations, handling fragments and type names. It processes `type_ref` and `document` values to generate readable GraphQL queries or fragment references. Used internally to serialize GraphQL schema and query structures into valid GraphQL syntax for code generation.",
      "description_length": 341,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_ppx_base.Source_pos",
      "library": "graphql_ppx.base",
      "description": "Tracks source code positions and spans for GraphQL parsing with precise line, column, and index information. It supports operations to advance positions, create spans, and map values with positional data. Used to associate GraphQL AST nodes with their source locations for error reporting and tooling.",
      "description_length": 301,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_ppx_base",
      "library": "graphql_ppx.base",
      "description": "This module provides tools for parsing, transforming, and validating GraphQL documents and schemas, focusing on abstract syntax tree (AST) manipulation, type resolution, and code generation. It operates on GraphQL ASTs and schema definitions, converting them into typed OCaml structures while handling features like union types and metadata. Key applications include static analysis of queries, PPX-driven code generation for GraphQL clients, and ensuring correctness during query transformations such as field normalization or schema stitching.",
      "description_length": 545,
      "index": 30,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 32,
    "meaningful_modules": 31,
    "filtered_empty_modules": 1,
    "retention_rate": 0.96875
  },
  "statistics": {
    "max_description_length": 649,
    "min_description_length": 299,
    "avg_description_length": 438.61290322580646,
    "embedding_file_size_mb": 0.44957828521728516
  }
}