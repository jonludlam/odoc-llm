{
  "package": "timmy",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 19,
  "creation_timestamp": "2025-08-15T12:10:08.816010",
  "modules": [
    {
      "module_path": "Timmy.Versions.V1_0.Timezone",
      "library": "timmy",
      "description": "This module represents timezones with a focus on converting between local and UTC time via GMT offset calculations. It provides operations to create timezone values from fixed offsets or dynamic implementations, and to query the current offset at specific dates and times. Concrete use cases include handling daylight saving time transitions and formatting timestamps in localized contexts.",
      "description_length": 390,
      "index": 0,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Timmy.Month.O",
      "library": "timmy",
      "description": "This module defines comparison operators and addition for month values. It supports comparing months using standard relational operators and adding integers to months to shift by a number of months. Concrete use cases include sorting month values and calculating future or past months relative to a given month.",
      "description_length": 311,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Weekday.O",
      "library": "timmy",
      "description": "Implements equality and inequality comparisons for weekday values. Works with `Timmy.Weekday.t` to determine if two weekdays are the same or different. Useful for scheduling logic where exact day matching is required, such as recurring events or weekly reminders.",
      "description_length": 263,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Timmy.Time.O",
      "library": "timmy",
      "description": "This module defines comparison operators and arithmetic operations for time points, enabling direct comparison and manipulation using familiar syntax. It works with `Timmy.Time.t` values, supporting equality checks, ordering, and adding or subtracting time spans. Concrete use cases include comparing timestamps, calculating durations between events, and advancing a time point by a given span.",
      "description_length": 394,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Versions.V1_0",
      "library": "timmy",
      "description": "This module implements timezone conversions using GMT offset calculations, supporting creation of timezone values from fixed or dynamic offsets. It provides functions to query the current offset for a given date and time, with support for daylight saving time transitions. Concrete use cases include localizing timestamps and converting between local and UTC time.",
      "description_length": 364,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Week.O",
      "library": "timmy",
      "description": "This module defines comparison operators and addition for week values, enabling direct comparisons between weeks and advancing a week by a given number of weeks. It operates on `Timmy.Week.t`, representing a specific week in a year. Useful for checking ordering of weeks or computing future weeks by adding an offset.",
      "description_length": 317,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Daytime.O",
      "library": "timmy",
      "description": "This module defines comparison operators and addition for daytimes. It supports comparing two `Timmy.Daytime.t` values for ordering and equality, and adding a time span to a daytime to compute a new daytime, returning an error if out of bounds. Useful for scheduling events, validating time ranges, or calculating deadlines within a day.",
      "description_length": 337,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Date.O",
      "library": "timmy",
      "description": "This module defines comparison and arithmetic operators for date values. It supports equality, ordering, adding days to a date, and computing the time span between two dates. Use it to write concise date comparisons and calculations without calling explicit functions.",
      "description_length": 268,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Span.O",
      "library": "timmy",
      "description": "This module defines arithmetic and comparison operators for manipulating time durations. It supports operations like addition, subtraction, scaling by integers or floats, and division to compute ratios between durations. These functions enable precise time calculations, such as scheduling intervals or measuring performance differences.",
      "description_length": 337,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Timmy.Versions",
      "library": "timmy",
      "description": "This module handles timezone conversions using GMT offset calculations, supporting creation of timezone values from fixed or dynamic offsets. It provides functions to query the current offset for a given date and time, with support for daylight saving time transitions. Concrete use cases include localizing timestamps and converting between local and UTC time.",
      "description_length": 361,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Timezone",
      "library": "timmy",
      "description": "This module represents timezones with support for fixed and dynamic UTC offsets. It provides operations to construct timezones from GMT offsets or custom implementations, and to query the offset at specific dates and times. Use cases include handling local time conversions, daylight saving adjustments, and timezone-aware timestamp calculations.",
      "description_length": 346,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Time",
      "library": "timmy",
      "description": "This module provides precise temporal arithmetic, ordering, and format conversion capabilities for absolute time values. It operates on high-precision time points, supporting operations like duration calculation, temporal comparison chaining, and bidirectional conversion between RFC3339 strings, Ptime representations, and internal time values. Typical applications include event stream synchronization, log timestamp analysis, and calendar system interoperability where exact temporal relationships must be maintained.",
      "description_length": 520,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Month",
      "library": "timmy",
      "description": "The module provides operations for representing months as both enumerated values and integers, enabling addition of month offsets, comparison using standard relational operators, and conversion to strings, integers, or full dates. It works with a dedicated month type (`t`) and interacts with date values through functions like `days` and `to_date`, supporting clamping months within specified ranges and shifting by arbitrary intervals. This facilitates use cases like calendar arithmetic, scheduling logic, and date normalization while ensuring correctness in month-based calculations.",
      "description_length": 587,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Weekday",
      "library": "timmy",
      "description": "This module defines a concrete enumeration of weekdays with operations to convert weekdays to integers, compare them, and format them as strings. It supports scalar conversions, equality checks, and pretty-printing for working with days of the week in scheduling and calendar contexts. Use cases include determining the number of days between two weekdays, checking if two dates fall on the same weekday, and displaying weekday names in user-facing output.",
      "description_length": 456,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Span",
      "library": "timmy",
      "description": "This module provides functions to create, compare, and manipulate time durations in units like days, hours, minutes, and seconds, supporting arithmetic operations, scaling, and clamping. It works with duration values to handle tasks such as scheduling intervals, measuring elapsed time, and converting between different time representations for human-readable formatting or interoperability with systems using `Ptime.Span.t`. Key use cases include adjusting time intervals, calculating ratios, and normalizing durations for calendar or scheduling applications.",
      "description_length": 560,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Week",
      "library": "timmy",
      "description": "This module supports operations for creating, comparing, and manipulating ISO weeks, including validation, retrieval of constituent days, arithmetic with week spans, and conversion to date representations. It works with `Timmy.Week.t` values (year and week number",
      "description_length": 263,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy",
      "library": "timmy",
      "description": "This module provides precise time and calendar operations including date arithmetic, duration manipulation, timezone conversion, and weekday/week handling. It works with dedicated types for months, timepoints, durations, weekdays, and timezones to support tasks like event scheduling, timestamp normalization, and calendar calculations. Concrete use cases include adjusting dates by month intervals, computing daylight saving transitions, formatting timestamps with timezone awareness, and validating ISO week representations.",
      "description_length": 526,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Clock",
      "library": "timmy.clock",
      "description": "This module provides functions to retrieve the current POSIX time, the local timezone, and the current date in the local timezone. It operates on time and date values represented by the `Timmy.Time.t` and `Timmy.Date.t` types, along with timezone information via `Timmy.Timezone.t`. Concrete use cases include logging timestamps, scheduling tasks based on the current date, and displaying time-sensitive information in the local timezone.",
      "description_length": 438,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Clock_virtual",
      "library": "timmy.clock-virtual",
      "description": "This module manages a virtual clock with precise time control. It allows setting a callback to handle time updates, advancing the clock by a specified time span, and retrieving the current virtual time. It works with `Timmy.Time.t` for time values and `Timmy.Span.t` for time intervals, enabling deterministic time simulation in testing and event-driven systems.",
      "description_length": 362,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 22,
    "meaningful_modules": 19,
    "filtered_empty_modules": 3,
    "retention_rate": 0.8636363636363636
  },
  "statistics": {
    "max_description_length": 587,
    "min_description_length": 263,
    "avg_description_length": 389.4736842105263,
    "embedding_file_size_mb": 0.2758808135986328
  }
}