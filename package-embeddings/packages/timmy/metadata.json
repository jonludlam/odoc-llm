{
  "package": "timmy",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 22,
  "creation_timestamp": "2025-06-18T16:37:10.527193",
  "modules": [
    {
      "module_path": "Timmy.Versions.V1_0.Timezone",
      "description": "Provides functions to create and query time zones based on GMT offset, including converting between calendar time and timestamps. Operates on date-time tuples and Ptime values to calculate offset adjustments. Used to determine local time offsets for specific moments in historical or custom time zone definitions.",
      "description_length": 313,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Timmy.Daytime.O",
      "description": "Provides comparison and arithmetic operations for time-based values, including equality checks, ordering, and addition with span durations. Works with custom time types and span structures to compute new time values or error results. Enables precise time manipulation in scheduling and time zone calculations.",
      "description_length": 309,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Month.O",
      "description": "Provides comparison and arithmetic operations for date-like values, including equality checks, ordering, and month addition. Works with a custom type `t` representing dates or time intervals. Enables direct manipulation of dates by allowing expressions like \"month + 3\" to add months.",
      "description_length": 284,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Versions.V1_0",
      "description": "Provides functions for handling time zones using GMT offsets, enabling conversion between calendar time, timestamps, and Ptime values. Supports querying and adjusting time based on date-time tuples and historical or custom time zone definitions. Allows calculation of local time offsets for specific moments. Can be used to convert UTC to local time or compare time zone differences across periods.",
      "description_length": 398,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Time.O",
      "description": "Provides comparison and arithmetic operations for time-based values, including equality, ordering, and span subtraction. Supports time point addition with duration spans and calculates durations between time points. Designed for precise temporal calculations in scheduling and time tracking.",
      "description_length": 291,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Weekday.O",
      "description": "Compares values of type t for equality and inequality. Operates on custom data types defined elsewhere in the codebase. Used to check if two instances of a type represent the same logical value.",
      "description_length": 194,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Timmy.Week.O",
      "description": "Provides comparison and arithmetic operations for time-based values, including equality, ordering, and addition with integer spans. Works with a custom time type that supports temporal calculations. Enables precise manipulation of time points in scheduling and duration tracking scenarios.",
      "description_length": 289,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Timmy.Date.O",
      "description": "Provides comparison and arithmetic operations for date-like values, including relational checks and date addition with integers. Supports subtraction between two values to calculate time spans. Designed for direct manipulation of temporal data in specific contexts.",
      "description_length": 265,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Span.O",
      "description": "Provides comparison and arithmetic operations on time spans, including addition, subtraction, multiplication, and division. Works with a time span type that supports duration-based calculations. Enables precise manipulation of time intervals in scheduling and timing applications.",
      "description_length": 280,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Date",
      "description": "Calculates and compares dates using arithmetic and relational operations, enabling addition of integers to dates and subtraction to determine time intervals. Key data types include date values and time spans, with operations such as date increment, decrement, and difference calculation. Users can compute future or past dates by adding days, or determine the duration between two dates. Examples include finding the date 10 days from today or measuring the gap between two historical events.",
      "description_length": 492,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Daytime",
      "description": "Calculates and compares time values using custom types and span durations, supporting arithmetic operations that return new time instances or errors. Includes equality checks and ordering to manage time-based logic in applications. Adds spans to times to adjust for schedules or time zones, enabling accurate time transformations. Examples include determining if one time precedes another or calculating a future time by adding a duration.",
      "description_length": 439,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Timmy.Month",
      "description": "Offers date and time interval manipulation through a custom type `t`, supporting arithmetic operations such as adding months and comparing dates. Includes equality checks and ordering to facilitate date-based logic. Users can perform operations like \"month + 3\" to adjust dates dynamically. Examples include calculating future dates or determining the difference between two months.",
      "description_length": 382,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Span",
      "description": "Calculates and manipulates time intervals using a dedicated duration type, supporting addition, subtraction, multiplication, and division. Operations enable precise control over time spans in scheduling and timing tasks. For example, adding two spans to determine total duration or dividing a span to calculate intervals. The type ensures accuracy in applications requiring temporal computations.",
      "description_length": 396,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Time",
      "description": "Calculates and compares time points using arithmetic operations, enabling precise duration calculations and temporal ordering. Supports adding durations to time points and subtracting to find spans between events. Key data types include time points and duration spans, with operations like addition, subtraction, and comparison. Examples include determining the time difference between two events or scheduling a future action based on a given duration.",
      "description_length": 453,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Timezone",
      "description": "Provides functions to create timezones based on fixed offsets or custom offset implementations, and to compute the UTC offset for specific dates and timestamps. Works with date and time tuples, Unix timestamps, and IANA timezone names. Used to convert local time to UTC and vice versa, accounting for daylight saving changes.",
      "description_length": 325,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Week",
      "description": "Encapsulates and manipulates time-based values with custom operations for comparison, ordering, and addition. Supports temporal calculations using a specialized time type to handle scheduling and duration tracking. Allows precise adjustments and comparisons, such as adding days to a specific date or determining the difference between two time points. Enables accurate time management in applications requiring temporal logic.",
      "description_length": 427,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Timmy.Weekday",
      "description": "Provides equality and inequality checks for day-of-week values. Operates on a custom type representing weekdays, enabling comparisons between instances. Allows verification of whether two days are logically equivalent or distinct. For example, checks if \"Monday\" equals \"Monday\" or if \"Tuesday\" differs from \"Wednesday.\"",
      "description_length": 320,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy.Versions",
      "description": "Manages time zone conversions and adjustments using GMT offsets, enabling interaction with calendar time, timestamps, and Ptime values. Supports querying local time offsets, converting UTC to local time, and comparing time zone differences. Operations include parsing date-time tuples, applying historical or custom time zone definitions, and calculating time differences. Examples include converting a timestamp to a local time string or determining the offset between two time zones at a specific moment.",
      "description_length": 506,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "timmy",
      "description": "Handles time zone conversions, date arithmetic, and timestamp parsing using UTC and local time representations. Operates on structured data like date records, time zones, and epoch values. Enables precise scheduling and time-based data processing in applications requiring timezone-aware calculations.",
      "description_length": 301,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Clock_virtual",
      "description": "Handles time manipulation and synchronization by advancing time in discrete steps, triggering registered callbacks at each step, and retrieving the current time. Operates with `Timmy.Time.t` for time values and `Timmy.Span.t` for time intervals. Used to simulate real-time progression in event-driven systems or test scenarios requiring controlled time flow.",
      "description_length": 358,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Clock",
      "description": "Provides functions to retrieve the current time, local timezone, and current date. Operates with time and date structures from the Timmy module. Used to fetch real-time data for scheduling or logging events.",
      "description_length": 207,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Timmy",
      "description": "combines date, time, and timezone operations into a unified system for precise temporal calculations. It defines custom types for dates, times, durations, and time zones, supporting arithmetic, comparison, and conversion operations across these types. Users can add or subtract intervals, compare temporal values, and handle timezone conversions with accuracy. Examples include calculating future dates, measuring time spans, and converting local times to UTC.",
      "description_length": 460,
      "index": 21,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 38,
    "meaningful_modules": 22,
    "filtered_empty_modules": 16,
    "retention_rate": 0.5789473684210527
  },
  "statistics": {
    "max_description_length": 506,
    "min_description_length": 194,
    "avg_description_length": 349.5,
    "embedding_file_size_mb": 0.0803537368774414
  }
}