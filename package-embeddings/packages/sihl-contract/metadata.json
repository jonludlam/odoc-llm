{
  "package": "sihl-contract",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 17,
  "creation_timestamp": "2025-06-18T16:34:43.183249",
  "modules": [
    {
      "module_path": "Sihl_contract.Session.Map",
      "description": "The module offers operations for inserting, deleting, and querying key-value pairs, along with traversal, transformation, and filtering capabilities, supporting both single and list-valued entries. It works with associative maps, including those featuring string keys and polymorphic types, enabling sequence-based conversions and custom merging logic. Use cases include managing configuration data, aggregating structured datasets, and processing hierarchical information through flexible key-value manipulations.",
      "description_length": 514,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Cleaner",
      "description": "Provides functions to register and execute asynchronous cleanup tasks for repositories. Works with lists of asynchronous functions and service containers. Used in integration testing to reset state by running all registered cleaners, with caution due to potential data loss.",
      "description_length": 274,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Database",
      "description": "Provides database connection lifecycle management, request preparation, and execution with support for transactions and connection pooling. Operates on SQL request templates, connection pools, and Lwt-based asynchronous operations. Executes queries, handles error propagation, and manages database transactions within a service container.",
      "description_length": 338,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Email",
      "description": "Provides functions to manage email lifecycle, retrieve and clear intercepted emails in a development inbox, and send single or bulk emails asynchronously. Operates with email data structures and Lwt promises for asynchronous operations. Used in testing to verify email delivery and in production to handle email transmission workflows.",
      "description_length": 335,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Email_template",
      "description": "Handles email template retrieval by name or label, and supports creating and updating templates with HTML content and labels. Operates on a template data structure containing identifiers, labels, and HTML bodies. Used to manage transactional email content dynamically during user onboarding and account management workflows.",
      "description_length": 324,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Http",
      "description": "Handles HTTP lifecycle events and service registration. Operates with router lists and service containers. Registers HTTP routes and manages server startup and shutdown processes.",
      "description_length": 179,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Migration",
      "description": "Handles migration lifecycle events and execution, supporting registration of individual or batched migrations. Operates on migration records structured as `t` and interacts with a service container. Executes pending migrations in sequence or triggers full migration runs upon request.",
      "description_length": 284,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Password_reset",
      "description": "Handles password reset workflows by generating and validating reset tokens. Operates on user email addresses and tokens to facilitate password changes. Used to securely update a user's password after email verification.",
      "description_length": 219,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Queue",
      "description": "Provides functions to manage a queue of jobs, including dispatching with optional delays, registering jobs for execution, and initializing the service. Operates with job structures and time durations to schedule and control processing. Used to handle background tasks with controlled execution and timing in a service-oriented context.",
      "description_length": 335,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Random",
      "description": "Generates random byte sequences and base64-encoded strings of specified lengths. Operates on integers and character lists to produce cryptographic-quality random data. Used for creating secure tokens, random identifiers, and temporary credentials.",
      "description_length": 247,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Schedule",
      "description": "Manages scheduled tasks by allowing the registration of recurring or one-time operations, executing them according to defined intervals, and providing a way to stop running schedules. It operates with schedule definitions that include timing configurations and execution logic. Used to automate background processes like data cleanup, periodic data fetching, or event triggering.",
      "description_length": 379,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Session",
      "description": "Manages session data with operations to store, retrieve, and query key-value pairs asynchronously. Works with session identifiers and string-based data structures. Used to persist user-specific information across requests and track session state in web applications.",
      "description_length": 266,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Storage",
      "description": "Provides operations to manage file metadata and content, including retrieving, deleting, uploading, and updating files using base64 encoding. Works with `stored` records that encapsulate file identifiers and metadata. Used to handle file storage workflows such as storing user-uploaded content and retrieving it for processing or display.",
      "description_length": 338,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Token",
      "description": "Provides functions to generate, validate, and manage tokens with expiration, secret signing, and activation status. Operates on strings representing tokens and key-value pairs for associated data. Used to securely store and retrieve user session data, verify token integrity, and control token lifecycle in authentication workflows.",
      "description_length": 332,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.User",
      "description": "Provides asynchronous operations to manage user lifecycle, including searching, finding by ID or email, updating passwords and details, and creating users with admin or regular roles. Works with user records containing email, username, password, and status flags. Used for user authentication, account management, and administrative user creation.",
      "description_length": 347,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "sihl-contract",
      "description": "Processes HTTP requests and generates responses using route matching, middleware chaining, and request parsing. Operates on types such as `request`, `response`, and `route`. Handles form data submission, JSON payload extraction, and dynamic URL routing in web applications.",
      "description_length": 273,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract",
      "description": "Manages asynchronous cleanup, database operations, email handling, HTTP routing, migrations, password resets, job queues, random data generation, scheduled tasks, session storage, file management, token validation, and user lifecycle operations. Key data types include asynchronous functions, SQL templates, email structures, migration records, tokens, job definitions, session keys, stored files, and user records. It enables testing with resettable states, secure email verification, transactional database access, automated background processing, and dynamic content management. Examples include resetting test databases, sending confirmation emails, scheduling data backups, and managing user authentication flows.",
      "description_length": 718,
      "index": 16,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 17,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 718,
    "min_description_length": 179,
    "avg_description_length": 335.4117647058824,
    "embedding_file_size_mb": 0.06223297119140625
  }
}