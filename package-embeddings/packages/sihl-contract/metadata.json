{
  "package": "sihl-contract",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 30,
  "creation_timestamp": "2025-07-15T23:12:31.906422",
  "modules": [
    {
      "module_path": "Sihl_contract.Email_template.Sig",
      "library": "sihl-contract",
      "description": "This module manages email templates with operations to retrieve, create, and update templates by identifier or label. It works with string identifiers, labels, and optional HTML content, returning template data asynchronously. Concrete use cases include storing transactional email templates like password reset or confirmation emails with dynamic content.",
      "description_length": 356,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Session.Sig",
      "library": "sihl-contract",
      "description": "This module manages session data with operations to create, retrieve, and update sessions using key-value pairs. It provides functions to set and find session values, create new sessions from a list of attributes, and register a service for session management. Concrete use cases include handling user authentication sessions, storing temporary user data, and managing session persistence across requests.",
      "description_length": 405,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Email.Sig",
      "library": "sihl-contract",
      "description": "This module handles email operations including sending single or bulk emails, managing an in-memory mailbox for testing, and clearing intercepted emails. It works with `Sihl_contract.Email.t` for individual emails and lists for bulk operations. Concrete use cases include testing email delivery by inspecting the inbox, sending transactional emails, and handling batch email notifications with failure propagation.",
      "description_length": 414,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Cleaner.Sig",
      "library": "sihl-contract",
      "description": "This module manages the registration and execution of asynchronous cleanup tasks for repositories. It provides functions to register individual or multiple cleaner functions, which are later executed collectively to perform repository maintenance. The module integrates with the container lifecycle to ensure cleanup tasks are properly orchestrated during service shutdown.",
      "description_length": 373,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Random.Sig",
      "library": "sihl-contract",
      "description": "This module generates random byte sequences and encodes them in base64. It provides functions to produce random bytes as a character list or a base64 string of a specified length, and includes a function to register the service in a container. It is used to create secure random tokens, identifiers, or keys for authentication, session management, and other security-sensitive contexts.",
      "description_length": 386,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Schedule.Sig",
      "library": "sihl-contract",
      "description": "This module schedules and manages periodic or delayed execution of tasks using `Sihl_core.Schedule.t` values. It provides lifecycle management for scheduled tasks, allowing registration and stopping of schedules. Concrete use cases include running background jobs at fixed intervals or after a delay.",
      "description_length": 300,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Database.Sig",
      "library": "sihl-contract",
      "description": "This module handles database interactions using Caqti, providing functions to prepare and execute SQL queries with connection pooling and transaction support. It works with Caqti requests, Lwt promises, and database connections to perform operations like querying, filtering, and sorting data. Concrete use cases include executing parameterized SQL queries, managing transactions for data consistency, and retrieving connection pools for database access.",
      "description_length": 454,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Queue.Sig",
      "library": "sihl-contract",
      "description": "This module manages job queues with delayed dispatching and lifecycle handling. It provides functions to register jobs, dispatch them immediately or after a specified delay, and integrate them into a service container. Concrete use cases include scheduling background tasks like sending emails or processing uploads at a later time.",
      "description_length": 332,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.User.Sig",
      "library": "sihl-contract",
      "description": "This module manages user authentication, registration, and data manipulation with operations for creating, updating, and retrieving users by ID or email. It works with user data structures and supports password handling, filtering, and sorting. Concrete use cases include user login, admin creation, password updates with policy checks, and paginated user searches.",
      "description_length": 365,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Session.Map",
      "library": "sihl-contract",
      "description": "This module provides operations for managing key-value associations with string-based identifiers, supporting insertion, deletion, merging, and transformation of entries while maintaining ordered traversal capabilities. It operates on polymorphic maps that store arbitrary values, enabling use cases like session state management where structured data manipulation and efficient lookups are required. The module also facilitates conversions between maps and sequences or lists, allowing seamless integration with iterative processing and data serialization workflows.",
      "description_length": 567,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Password_reset.Sig",
      "library": "sihl-contract",
      "description": "This module handles password reset operations by creating and managing reset tokens linked to user emails. It provides functions to generate a reset token and to reset a user's password using a valid token. The module works with email strings, reset tokens, and password fields, ensuring secure password updates through token-based authentication.",
      "description_length": 347,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Migration.Sig",
      "library": "sihl-contract",
      "description": "This module manages the registration and execution of database migrations. It provides functions to register individual or multiple migration scripts, execute them in sequence, and run all registered migrations at once. The module works directly with lists of migration structures, each defining a specific database transformation step.",
      "description_length": 336,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Token.Sig",
      "library": "sihl-contract",
      "description": "This module handles token creation, validation, and lifecycle management using signed strings with optional expiration and blacklisting. It supports reading and verifying key-value data stored within tokens, as well as deactivating and reactivating tokens based on their string identifiers. Concrete use cases include managing authentication tokens, password reset links, and time-limited access tokens with customizable secrets and expiration times.",
      "description_length": 450,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Http.Sig",
      "library": "sihl-contract",
      "description": "This module manages HTTP service registration and lifecycle integration. It allows registering routers to handle incoming HTTP requests and returns a configured service instance. Concrete use cases include setting up web servers with custom routing logic and integrating them into a service container.",
      "description_length": 301,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Storage.Sig",
      "library": "sihl-contract",
      "description": "This module manages file storage operations including uploading, downloading, and deleting files using base64 encoded data. It provides functions to retrieve, update, and store file metadata and content, working with identifiers to reference stored files. Concrete use cases include handling file uploads from base64 strings, retrieving file content for processing, and managing file lifecycles in a storage system.",
      "description_length": 415,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Email_template",
      "library": "sihl-contract",
      "description": "This module represents email templates with structured data including identifiers, labels, text, and optional HTML content, along with timestamps for tracking. It supports creating, retrieving, and updating templates, enabling use cases like storing and dynamically rendering transactional emails such as password resets or confirmations. The child module extends these capabilities by providing identifier and label-based access to templates, allowing asynchronous retrieval and persistence of templates with dynamic content. Together, they facilitate managing a template repository and rendering emails with user-specific data.",
      "description_length": 629,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Cleaner",
      "library": "sihl-contract",
      "description": "This module provides a named identifier for a cleanup service that executes resource deallocation or state reset operations, coordinating with services implementing the `Sig` module type's `clean` function. It supports use cases like resetting database connections and shutting down background processes, while its child module manages asynchronous repository cleanup tasks, allowing registration and collective execution of cleaners during service shutdown. Direct API operations include defining and invoking cleanup logic, while the submodule enables structured management of repository-specific maintenance tasks. Together, they ensure graceful resource handling across different lifecycle stages.",
      "description_length": 701,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Storage",
      "library": "sihl-contract",
      "description": "This module organizes file storage logic around structured data representations, combining in-memory metadata with encoded content for complete file handling. It centers on types like file records with identifiers, sizes, and MIME types, alongside operations to persist, fetch, and remove files using base64 encoding. With its interface, you can upload a base64 string as a file, retrieve its metadata, or delete it by ID, while submodules extend these capabilities for system-wide storage workflows.",
      "description_length": 500,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Session",
      "library": "sihl-contract",
      "description": "This module manages session data and metadata, offering operations to create, retrieve, and update sessions using string keys while enforcing expiration policies. It provides concrete types for session metadata, including keys and timestamps, and supports storage through a polymorphic map structure that allows insertion, deletion, and transformation of session values. The module enables use cases such as user authentication tracking, temporary data storage, and session persistence across web requests, with ordered traversal and conversion capabilities for structured data manipulation. Submodules extend functionality by supporting key-value management, session service registration, and efficient lookups in stateful contexts.",
      "description_length": 733,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Queue",
      "library": "sihl-contract",
      "description": "This module provides a FIFO queue structure for managing elements of any type, with core operations for enqueueing, dequeueing, and inspecting elements. It supports use cases such as task scheduling, background job processing, and data buffering. A child module extends this functionality by adding support for delayed job dispatching, allowing tasks to be scheduled for execution immediately or after a specified delay. Together, they enable building systems that manage job lifecycles and execute tasks asynchronously within a service container.",
      "description_length": 547,
      "index": 19,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Sihl_contract.Schedule",
      "library": "sihl-contract",
      "description": "This module defines and manages named schedules for recurring tasks, using string identifiers and time-based configurations to create, retrieve, and validate schedules. It supports operations such as scheduling periodic or delayed execution of tasks, enabling concrete use cases like running background jobs at fixed intervals or after a delay. The main data type `Sihl_core.Schedule.t` represents schedule configurations, and operations include registering, starting, and stopping scheduled tasks. Together, the module and its submodules provide a cohesive interface for managing timed events and periodic job execution within a system.",
      "description_length": 637,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Http",
      "library": "sihl-contract",
      "description": "This module provides core abstractions for building HTTP-based web applications, allowing developers to define routes, handle requests asynchronously, and structure applications using routers and middleware. It includes data types such as route handlers, HTTP methods, and router configurations, with operations to map URLs to async response logic, group routes, and apply scoped transformations. The child module extends this functionality by enabling registration of HTTP services, supporting server setup with custom routing and integration into service containers. Example uses include implementing REST APIs with method-specific endpoints, organizing routes under versioned paths, and launching HTTP servers that serve these routes as part of a larger application.",
      "description_length": 769,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Password_reset",
      "library": "sihl-contract",
      "description": "This module orchestrates password reset workflows by generating and validating reset tokens tied to user identifiers. It provides core operations to initiate a password reset, verify tokens, and securely update passwords, working with data types like user IDs, token strings, and timestamped token records. Submodules handle email-based token delivery and password update logic, enabling concrete actions such as sending reset instructions and finalizing password changes using valid tokens.",
      "description_length": 491,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.User",
      "library": "sihl-contract",
      "description": "This module defines a user data structure with authentication fields and metadata, supporting operations for user creation, password validation, and status management. It includes functions for handling registration, login, and access control, along with errors for authentication and validation failures. The child module extends this with advanced user management, enabling creation, update, retrieval by ID or email, and password policy enforcement. Together, they support concrete workflows like secure user registration, admin user management, and paginated user searches with filtering and sorting.",
      "description_length": 604,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Random",
      "library": "sihl-contract",
      "description": "This module generates random values like integers, strings, and byte sequences, with utilities for creating secure tokens, identifiers, and nonces. It includes submodules that extend functionality to base64-encoded random byte sequences, allowing generation of random bytes as character lists or fixed-length base64 strings. Operations support direct use through functions like `generate` and integration via service registration. Example uses include session tokens, cryptographic keys, and random identifiers in security-sensitive applications.",
      "description_length": 546,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Email",
      "library": "sihl-contract",
      "description": "This module represents email data with structured fields like sender, recipient, subject, text, HTML content, CC, and BCC, supporting construction, modification, and access of email payloads. Its operations enable building emails for sending services or parsing incoming messages, with direct manipulation of individual fields. The child module extends this functionality by providing email delivery mechanisms, including single and bulk sending, in-memory mailbox management for testing, and inbox inspection. Together, they support concrete workflows such as sending transactional emails, handling batch notifications with failure tracking, and intercepting emails for verification in test environments.",
      "description_length": 705,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Database",
      "library": "sihl-contract",
      "description": "This module provides a unified interface for database operations across MariaDB and PostgreSQL, enabling connections, query execution, and transaction management. It supports the implementation of data access layers and schema migrations through direct APIs that work with Caqti for preparing and executing SQL queries, handling connection pooling, and ensuring transactional consistency. Users can perform operations like parameterized queries, data filtering, and sorting, while leveraging submodules for efficient connection management and transaction control.",
      "description_length": 563,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Token",
      "library": "sihl-contract",
      "description": "This module provides a named signature for token-related operations, focusing on string-based token creation, validation, and parsing, often used in authentication and session management. It supports generating tokens with customizable secrets and expiration times, verifying their integrity, and extracting structured data from them. The child module extends this functionality by adding lifecycle management features such as deactivation and reactivation of tokens based on their identifiers. Together, they enable use cases like managing login sessions, issuing password reset tokens, and handling time-limited access control.",
      "description_length": 629,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Migration",
      "library": "sihl-contract",
      "description": "This module organizes database schema evolution through versioned migration steps, each combining a label, SQL statement, and foreign key enforcement flag. It supports registering, sequencing, and executing migrations, allowing safe and repeatable schema updates. Functions operate on lists of migration steps, enabling batch registration and ordered execution. Specific operations include applying individual migrations, running all registered changes, and managing dependencies between schema transformations.",
      "description_length": 511,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract",
      "library": "sihl-contract",
      "description": "This module provides structured abstractions for managing email templates, sessions, files, and user data with operations for creation, retrieval, and modification. It includes utilities for task scheduling, password resets, and secure token generation, supporting workflows like sending transactional emails, handling background jobs, and managing authentication sessions. Data types include identifiers, timestamps, MIME types, and schedules, with operations for asynchronous persistence, dynamic rendering, and time-based execution. Specific examples include rendering password reset emails with user data, scheduling delayed jobs, and managing session metadata across web requests.",
      "description_length": 685,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 30,
    "meaningful_modules": 30,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 769,
    "min_description_length": 300,
    "avg_description_length": 501.7,
    "embedding_file_size_mb": 0.10947895050048828
  }
}