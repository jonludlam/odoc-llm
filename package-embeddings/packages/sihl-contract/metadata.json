{
  "package": "sihl-contract",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 16,
  "creation_timestamp": "2025-08-15T12:21:40.935091",
  "modules": [
    {
      "module_path": "Sihl_contract.Session.Map",
      "library": "sihl-contract",
      "description": "This module provides a suite of operations for managing key-value maps with string keys, including insertion, deletion, merging, and ordered selection, alongside functional transformations like folding, mapping, and filtering. It operates on polymorphic maps (`'a t`) with string-based keys and supports conversions between maps, lists, and sequences for flexible data manipulation. These capabilities are optimized for scenarios such as session data management, where dynamic updates, complex queries, and ordered traversal over heterogeneous data are required.",
      "description_length": 562,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.User",
      "library": "sihl-contract",
      "description": "This module defines a user data structure with fields for authentication, status, and timestamps, along with associated error types for registration and login workflows. It includes operations for handling user creation, password validation, and status management in the context of web applications. Concrete use cases include implementing user authentication, managing user roles, and tracking user activity in a database-backed system.",
      "description_length": 437,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Storage",
      "library": "sihl-contract",
      "description": "This module defines data structures for handling file metadata and storage, including operations to manage files with attributes like ID, filename, size, and MIME type. It provides typed representations for storing files alongside their binary data. Concrete use cases include handling uploaded files with associated metadata and persisting file content in a structured format.",
      "description_length": 377,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Email",
      "library": "sihl-contract",
      "description": "This module defines an email structure with sender, recipient, subject, text, optional HTML content, and CC/BCC lists. It provides operations to create, manipulate, and serialize email messages for sending. Concrete use cases include building transactional emails, notification templates, and email forwarding logic.",
      "description_length": 316,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Schedule",
      "library": "sihl-contract",
      "description": "This module defines a named schedule for recurring tasks, including operations to create, retrieve, and manage scheduled events. It works with string identifiers and time-based data structures to represent intervals and execution times. Concrete use cases include configuring periodic background jobs, such as daily email reminders or hourly data synchronization tasks.",
      "description_length": 369,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Random",
      "library": "sihl-contract",
      "description": "This module defines an interface for generating random values, including strings, integers, and bytes. It specifies operations for creating random identifiers, tokens, and secure byte sequences suitable for cryptographic use. Concrete use cases include generating session IDs, password reset tokens, and temporary keys.",
      "description_length": 319,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Cleaner",
      "library": "sihl-contract",
      "description": "This module defines a named cleanup operation and a signature for implementing cleanup strategies. It works with string identifiers and abstract data types that require resource management. Concrete use cases include managing temporary file deletion, database connection cleanup, or releasing system resources after task completion.",
      "description_length": 332,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Email_template",
      "library": "sihl-contract",
      "description": "This module defines a data structure for email templates with fields like `id`, `label`, `text`, and optional `html` content, along with timestamps. It includes operations to create, retrieve, and update templates, supporting concrete use cases like managing transactional email content in a database. The module works with string identifiers, time values from `Ptime`, and optional HTML bodies to handle both plain text and rich email formats.",
      "description_length": 444,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Session",
      "library": "sihl-contract",
      "description": "This module defines session data structures and operations for managing session keys, expiration times, and associated string-based key-value data. It includes a polymorphic map submodule for manipulating session data with standard transformations and conversions. Concrete use cases include handling user authentication sessions with time-based expiration and structured metadata.",
      "description_length": 381,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_contract.Http",
      "library": "sihl-contract",
      "description": "This module defines HTTP methods, route handlers, and router structures for building web applications. It supports defining routes with specific HTTP methods, URL paths, and asynchronous handler functions that process requests and return responses. Concrete use cases include setting up RESTful endpoints, applying middleware to routes, and organizing routes under scoped prefixes.",
      "description_length": 381,
      "index": 9,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Sihl_contract.Migration",
      "library": "sihl-contract",
      "description": "This module defines data structures and signatures for managing database migrations. It works with tuples of strings and lists of migration steps, where each step includes a label, SQL statement, and a flag to check foreign keys. It is used to version and apply database schema changes in applications.",
      "description_length": 302,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Database",
      "library": "sihl-contract",
      "description": "This module defines the database types supported by the application, including MariaDb and PostgreSql, and provides a signature interface for implementing database-specific operations. It works with string identifiers and abstract database connection structures to enable consistent interaction across different database backends. Concrete use cases include configuring database connections and defining backend-specific implementations for query execution and transaction management.",
      "description_length": 484,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Password_reset",
      "library": "sihl-contract",
      "description": "This module handles password reset operations, including generating and validating reset tokens. It works with user identifiers and token data structures to manage password recovery workflows. Concrete use cases include initiating a password reset request and verifying tokens during the reset process.",
      "description_length": 302,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Token",
      "library": "sihl-contract",
      "description": "This module defines a named signature for working with tokens, providing operations to generate, validate, and manipulate token values. It centers around a `name` value and a `Sig` module type that enforces a standard interface for token handling. Concrete use cases include implementing JWT token management, API key validation, and session token operations.",
      "description_length": 359,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract.Queue",
      "library": "sihl-contract",
      "description": "This module defines a queue interface with operations to enqueue and dequeue elements, check queue status, and process items asynchronously. It works with generic data types through polymorphic queues and supports persistent storage backends. Concrete use cases include task scheduling, background job processing, and event streaming.",
      "description_length": 334,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_contract",
      "library": "sihl-contract",
      "description": "This module provides interfaces and data structures for managing resources, data persistence, communication, and scheduling in web applications. It handles operations like cleaning up temporary files, executing database migrations, sending emails, handling HTTP routes, and scheduling background jobs. Concrete use cases include configuring database backends, implementing password reset workflows, processing queued tasks, and managing session or user data with structured validation and storage.",
      "description_length": 497,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 562,
    "min_description_length": 302,
    "avg_description_length": 387.25,
    "embedding_file_size_mb": 0.23230743408203125
  }
}