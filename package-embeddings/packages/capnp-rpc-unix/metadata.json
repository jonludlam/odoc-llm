{
  "package": "capnp-rpc-unix",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:06:22.617539",
  "modules": [
    {
      "module_path": "Capnp_rpc_unix.Network.Location",
      "library": "capnp-rpc-unix",
      "description": "This module defines and manipulates network address locations using TCP and Unix-domain sockets. It supports parsing, validation, and formatting of addresses, ensuring Unix paths are absolute and TCP addresses have valid host and port. Use cases include configuring network endpoints for RPC services and validating input addresses in command-line tools.",
      "description_length": 354,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.Network.Address",
      "library": "capnp-rpc-unix",
      "description": "This module handles network addresses combined with authentication digests for secure service identification. It provides functions to parse and construct URIs that encode both an address and service ID, ensuring round-trip consistency. Use cases include securely identifying and connecting to remote services over TCP or Unix-domain sockets.",
      "description_length": 342,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.CapTP",
      "library": "capnp-rpc-unix",
      "description": "This module implements the CapTP protocol for securely sharing capabilities over a network link. It provides functions to connect to a remote endpoint, handle incoming messages, and manage capability bootstrapping and disconnection. The module works with network endpoints and capability objects, enabling direct communication between distributed services. Use cases include establishing secure, bidirectional capability-based RPC connections between processes on different machines.",
      "description_length": 483,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.Vat_config",
      "library": "capnp-rpc-unix",
      "description": "This module configures a Capnp RPC vat for network operation, handling secret key management, service identity derivation, and URI generation. It works with network addresses, secret keys, and cryptographic identifiers to set up secure, persistent services. Concrete use cases include initializing a server vat with a known secret key, deriving stable service IDs for restoration, and constructing sturdy URIs for remote access.",
      "description_length": 428,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.Network",
      "library": "capnp-rpc-unix",
      "description": "This module implements a network layer for TCP and Unix-domain sockets, supporting secure and unencrypted communication through connection setup, authentication with TLS secret keys, and endpoint validation. It provides data types for network endpoints and operations to establish authenticated RPC channels over local or networked connections. The address module handles parsing, validation, and formatting of TCP and Unix socket addresses, ensuring correctness for service configuration and CLI input handling. The authenticated address module extends this with URIs that bind network locations to service identifiers, enabling secure service discovery and remote connections with round-trip consistency.",
      "description_length": 706,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Capnp_rpc_unix.Cap_file",
      "library": "capnp-rpc-unix",
      "description": "This module handles loading and saving capability references to and from files. It supports operations for persisting sturdy capability references, service identifiers, and URIs to disk with restricted permissions. Use it to securely store and retrieve capability URLs for inter-process communication or long-term storage.",
      "description_length": 322,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.File_store",
      "library": "capnp-rpc-unix",
      "description": "Stores and retrieves Cap'n Proto service data on disk using base64-encoded digests as filenames. It supports creating a storage directory, saving service state to files, loading saved state by digest, and removing stored files. This is useful for persisting Cap'n Proto service instances across process lifetimes.",
      "description_length": 313,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.Vat",
      "library": "capnp-rpc-unix",
      "description": "This module manages a Vat in the CapTP network, enabling direct communication between distributed objects across networked applications. It supports creating a Vat with a secret key and network configuration, establishing and managing CapTP connections in client or server mode, and exporting or importing sturdy references as URIs for remote object access. Concrete use cases include building distributed systems where services are securely discovered, connected, and invoked across different nodes.",
      "description_length": 500,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Capnp_rpc_unix",
      "library": "capnp-rpc-unix",
      "description": "This module enables Cap'n Proto RPC communication over traditional OS networking with support for TCP and Unix sockets, including connection progress reporting and CLI parsing for URIs. It provides core operations like `connect_with_progress` and `serve` for building clients and servers that exchange capabilities, leveraging sturdy references and vat configurations. Submodules implement CapTP for secure bidirectional RPC, network layers with TLS authentication, and utilities for persisting capability references and service state to disk. Use cases include secure service networking, capability-based inter-process communication, and durable storage of remote object references.",
      "description_length": 683,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 706,
    "min_description_length": 313,
    "avg_description_length": 459.0,
    "embedding_file_size_mb": 0.03316974639892578
  }
}