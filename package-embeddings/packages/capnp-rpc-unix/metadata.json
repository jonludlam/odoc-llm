{
  "package": "capnp-rpc-unix",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:06:21.224081",
  "modules": [
    {
      "module_path": "Capnp_rpc_unix.Network.Location",
      "library": "capnp-rpc-unix",
      "description": "This module defines and manipulates network address locations using two concrete formats: Unix-domain sockets with absolute paths and TCP addresses with host and port. It provides parsing from strings, validation of public addresses, and utilities for command-line argument parsing. Use cases include specifying server endpoints for inter-process communication over local sockets or remote TCP connections.",
      "description_length": 406,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.Network.Address",
      "library": "capnp-rpc-unix",
      "description": "This module handles network addresses combined with authentication digests for secure communication endpoints. It provides functions to parse and construct URIs that encode both an address and a service identifier, supporting precise routing and validation. Use cases include establishing authenticated connections over TCP or Unix-domain sockets by verifying endpoints match expected addresses and services.",
      "description_length": 408,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.Vat_config",
      "library": "capnp-rpc-unix",
      "description": "This module configures a Cap'n Proto RPC vat for network operation, providing functions to create and manage cryptographic keys, derive service identifiers, and construct sturdy URIs. It works with network addresses, secret keys, and command-line configuration, supporting TLS setup and service restoration. Concrete use cases include initializing server vats with persistent identities, deriving stable service IDs from secret keys, and generating URIs for remote access.",
      "description_length": 472,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.Network",
      "library": "capnp-rpc-unix",
      "description": "This module implements a network layer using TCP and Unix-domain sockets for communication, handling connection setup, authentication, and endpoint management. It works with network addresses combined with authentication keys, supporting both encrypted and unencrypted connections. Concrete use cases include securely connecting to remote services over TCP and accepting local connections via Unix sockets with optional TLS.",
      "description_length": 424,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Capnp_rpc_unix.Cap_file",
      "library": "capnp-rpc-unix",
      "description": "This module provides functions to load and save capability URIs, sturdy references, and service identifiers to and from the filesystem. It operates on paths, strings, and capability-related types such as `Sturdy_ref.t` and `Uri.t`, with specific use cases including persisting capabilities to disk and securely storing service identifiers. Concrete uses include saving a capability to a file for later retrieval or exporting a service reference for inter-process communication.",
      "description_length": 477,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.CapTP",
      "library": "capnp-rpc-unix",
      "description": "This module implements the CapTP protocol for securely sharing capabilities over a network link. It provides functions to connect to a remote endpoint, run the message-handling loop, access remote bootstrap capabilities, and disconnect with a reason. The module works with network endpoints and capability objects, enabling direct communication between distributed services using capability identifiers.",
      "description_length": 403,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.Vat",
      "library": "capnp-rpc-unix",
      "description": "This module manages a Vat in the CapTP network, enabling creation of vats, handling connections between vats, and exporting or importing sturdy references as URIs. It works with network addresses, sturdy references, and CapTP endpoints, supporting operations like restoring services, establishing connections, and converting references to and from URIs. Concrete use cases include setting up a CapTP network node, connecting to remote vats, and securely sharing and retrieving capabilities across networked applications.",
      "description_length": 520,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix.File_store",
      "library": "capnp-rpc-unix",
      "description": "This module implements a persistent storage system for Cap'n Proto structs using the file system. It supports operations to save, load, and remove structured data using a digest-based naming scheme for files. Concrete use cases include caching serialized service data or persisting state across process restarts.",
      "description_length": 312,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Capnp_rpc_unix",
      "library": "capnp-rpc-unix",
      "description": "This module provides network communication, capability transport, and persistent storage features for Cap'n Proto RPC. It handles TCP and Unix-domain socket connections, secure capability exchange via CapTP, vat management with URI-based references, and file-backed storage for capabilities and structured data. Concrete use cases include building networked services that securely share capabilities, persisting service state and references to disk, and managing connections with progress reporting.",
      "description_length": 499,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 520,
    "min_description_length": 312,
    "avg_description_length": 435.6666666666667,
    "embedding_file_size_mb": 0.1307811737060547
  }
}