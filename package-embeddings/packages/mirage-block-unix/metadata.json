{
  "package": "mirage-block-unix",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:03:59.146835",
  "modules": [
    {
      "module_path": "Block.Config",
      "library": "mirage-block-unix",
      "description": "This module defines configuration parameters for block devices, including options for buffering, synchronization behavior, file locking, and sector size. It provides functions to create, serialize, and parse these configurations using paths and query-style string encodings. Use this module to set up and persist block device settings that control disk caching, flush guarantees, and access constraints.",
      "description_length": 403,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Block",
      "library": "mirage-block-unix",
      "description": "This module provides asynchronous access to block devices using low-level operations such as sector-based reads, writes, and flushes, while supporting device lifecycle management like attachment and capacity changes. It works with block device handles and memory buffers (`Cstruct.t`) for efficient data transfer, and uses configuration objects to control behavior including caching, synchronization, and access constraints. Child modules define configuration parameters and utilities to serialize and parse them, enabling persistent device settings that influence buffering, locking, and sector alignment. Example uses include virtual disk management, fault-tolerant storage layers, and disk image manipulation in event-driven applications.",
      "description_length": 741,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 741,
    "min_description_length": 403,
    "avg_description_length": 572.0,
    "embedding_file_size_mb": 0.007687568664550781
  }
}