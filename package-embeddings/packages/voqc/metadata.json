{
  "package": "voqc",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:32:07.222673",
  "modules": [
    {
      "module_path": "Voqc.ConnectivityGraph.LNN",
      "description": "Checks if a node is connected to another within a graph structure using three integer parameters. Performs movement and pathfinding operations, returning lists of integers representing valid moves or paths. Handles graph traversal and ordering tasks with specific node and edge constraints.",
      "description_length": 290,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.ConnectivityGraph.LNNRing",
      "description": "Checks if a node is part of a graph structure defined by a ring topology, generates paths and movement lists in clockwise or counter-clockwise directions, and retrieves nearby nodes or ordered sequences based on a query. Operates on integers representing nodes and uses lists to express paths and neighborhoods. Used to navigate and analyze ring-based network configurations, such as determining connectivity or routing in distributed systems.",
      "description_length": 443,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.ConnectivityGraph.Grid",
      "description": "Checks if a coordinate is within a grid's bounds, calculates row and column indices, and moves in cardinal directions. Operates on integers representing positions and dimensions. Used to validate positions, navigate grids, and generate movement sequences for pathfinding.",
      "description_length": 271,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Voqc.Qasm",
      "description": "Reads OpenQASM files and extracts a circuit structure along with the qubit count. Writes a circuit and qubit count to an OpenQASM file format. Operates on circuit representations and integer qubit values.",
      "description_length": 204,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Voqc.Main",
      "description": "This module provides circuit transformation, optimization, and verification operations, including gate set conversion, decomposition of multi-qubit gates, and semantic-preserving optimizations like gate merging and cancellation. It works with quantum circuit representations (`circ`), layouts, connectivity graphs, and qubit ordering functions to enable tasks such as architecture-specific routing and constraint checking. Key use cases include optimizing circuits for linear nearest-neighbor architectures, reducing gate counts, and ensuring well-typedness during complex transformation pipelines.",
      "description_length": 598,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.UnitaryListRepresentation",
      "description": "Provides operations to analyze and transform gate lists representing quantum circuits, including finding next or last gates, checking references, applying rewrites, and matching patterns. Works with gate lists and gate applications, where each gate is parameterized by an arbitrary type. Used for identifying and modifying specific gate sequences during circuit optimization.",
      "description_length": 375,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.ConnectivityGraph",
      "description": "Checks if nodes are connected or part of a ring-based structure, and validates grid positions while generating movement paths. Operates on integers for nodes, coordinates, and dimensions, with functions to traverse, order, and analyze graph and grid configurations. Returns lists of valid moves, paths, or ordered sequences based on traversal rules. Can determine connectivity between nodes, navigate ring topologies, or validate grid positions for pathfinding.",
      "description_length": 461,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "voqc",
      "description": "Processes quantum circuits by applying optimization rules, rewriting gates, and simplifying expressions. Operates on abstract syntax trees representing quantum operations and transformations. Used to verify and optimize quantum programs before execution on quantum hardware.",
      "description_length": 274,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Voqc",
      "description": "Reads and writes quantum circuits in OpenQASM format, transforming and optimizing them through gate set conversion, decomposition, and semantic-preserving operations. Analyzes gate lists to identify patterns, apply rewrites, and modify sequences, while verifying connectivity and generating movement paths on grid and graph structures. Operates on circuit representations, gate applications, integers, and coordinates to enable tasks like circuit optimization, routing, and validation. Supports reducing gate counts, ensuring well-typedness, and navigating quantum architecture constraints.",
      "description_length": 590,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 9,
    "filtered_empty_modules": 3,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 598,
    "min_description_length": 204,
    "avg_description_length": 389.55555555555554,
    "embedding_file_size_mb": 0.033110618591308594
  }
}