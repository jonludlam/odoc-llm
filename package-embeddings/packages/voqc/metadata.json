{
  "package": "voqc",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:05:17.557854",
  "modules": [
    {
      "module_path": "Voqc.ConnectivityGraph.LNNRing",
      "library": "voqc",
      "description": "This module provides operations for navigating and querying a ring-based connectivity graph. It supports checking node adjacency, generating clockwise and counter-clockwise paths between nodes, and listing nearby nodes within a given distance. These functions operate on integer-labeled nodes arranged in a ring structure, enabling concrete use cases such as routing in circular networks or managing qubit connections in quantum computing topologies.",
      "description_length": 450,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Voqc.ConnectivityGraph.LNN",
      "library": "voqc",
      "description": "This module provides operations to navigate and query linear nearest-neighbor (LNN) connectivity graphs. It supports checking node connectivity, generating paths between nodes, and retrieving neighboring nodes. These functions work with integer-labeled nodes arranged in a linear topology, commonly used in quantum circuit mapping and physical qubit routing.",
      "description_length": 358,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.ConnectivityGraph.Grid",
      "library": "voqc",
      "description": "This module provides functions to navigate and validate positions within a grid-based connectivity graph. It includes operations to check if coordinates are within graph bounds, compute row and column indices, move in cardinal directions, and generate paths between nodes. These functions work with integer coordinates to model grid traversal for structured graph layouts.",
      "description_length": 372,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.Qasm",
      "library": "voqc",
      "description": "This module handles reading from and writing to OpenQASM files, converting between file representations and in-memory circuits. It works with quantum circuits represented as `Voqc.Main.circ` and integer values indicating qubit counts. Use this module to load existing OpenQASM files into circuits for manipulation or to save modified circuits back to disk in OpenQASM format.",
      "description_length": 375,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Voqc.UnitaryListRepresentation",
      "library": "voqc",
      "description": "This module provides functions for analyzing, transforming, and optimizing quantum circuits represented as gate lists. It supports operations such as checking gate typing, extracting single- and two-qubit gates at specific positions, applying rewrites, and comparing or replacing circuit patterns based on custom equality. These functions are used to implement custom circuit optimizations and transformations directly on the gate list structure.",
      "description_length": 446,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Voqc.ConnectivityGraph",
      "library": "voqc",
      "description": "This module implements connectivity graphs for structured topologies including linear, ring, and grid layouts. It provides path generation, adjacency checks, and neighbor traversal operations tailored for integer-labeled nodes arranged in specific physical configurations. These functions directly support tasks like quantum circuit routing and network path planning in constrained geometries.",
      "description_length": 393,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Voqc",
      "library": "voqc",
      "description": "This module provides direct access to quantum circuit manipulation through file I/O operations for OpenQASM, low-level gate list transformations, and structured connectivity modeling. It operates on quantum circuits represented as `Voqc.Main.circ` and integer-based qubit configurations, enabling tasks such as circuit loading, optimization, and routing. Concrete use cases include parsing and serializing quantum circuits, applying custom gate rewrites, and generating physical paths for constrained qubit layouts.",
      "description_length": 515,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 7,
    "filtered_empty_modules": 1,
    "retention_rate": 0.875
  },
  "statistics": {
    "max_description_length": 515,
    "min_description_length": 358,
    "avg_description_length": 415.57142857142856,
    "embedding_file_size_mb": 0.10184383392333984
  }
}