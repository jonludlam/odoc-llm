{
  "package": "voqc",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:06:16.144281",
  "modules": [
    {
      "module_path": "Voqc.ConnectivityGraph.LNNRing",
      "library": "voqc",
      "description": "This module provides operations for navigating and querying a ring-based connectivity graph. It supports checking node adjacency, finding clockwise and counter-clockwise paths between nodes, and retrieving nearby nodes within a specified distance. These functions operate on integer-labeled nodes arranged in a ring structure, used for modeling circular quantum processor topologies.",
      "description_length": 383,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.ConnectivityGraph.Grid",
      "library": "voqc",
      "description": "This module provides functions to navigate and validate positions within a grid-based connectivity graph. It includes operations to check if coordinates are within graph bounds, compute row and column indices, move in cardinal directions, and generate paths between nodes. These functions work with integer coordinates to model grid traversal for structured graph layouts.",
      "description_length": 372,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.ConnectivityGraph.LNN",
      "library": "voqc",
      "description": "This module provides functions to navigate and analyze linear nearest neighbor (LNN) graphs. It supports operations like checking node connectivity, generating paths between nodes, listing adjacent nodes, and determining valid node orderings. These functions work with integer-labeled graphs representing physical qubit layouts in quantum circuit design.",
      "description_length": 354,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.Main",
      "library": "voqc",
      "description": "This module supports operations for quantum circuit validation, transformation, and optimization, including gate set conversion, decomposition of multi-qubit gates, and equivalence checking. It works with quantum circuits represented by the `circ` type, alongside layouts and connectivity graphs to enforce physical constraints like linear nearest-neighbor (LNN) or grid architectures. Specific applications include optimizing circuits for IBM or RzQ gate sets, reducing gate counts through merging/cancellation, and mapping logical qubits to hardware topologies such as rings or grids.",
      "description_length": 586,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.UnitaryListRepresentation",
      "library": "voqc",
      "description": "This module provides functions for analyzing, transforming, and optimizing quantum circuits represented as gate lists. It supports operations such as checking well-typedness, extracting single and two-qubit gates, applying rewrites, and pattern matching on circuit prefixes and suffixes. Concrete use cases include implementing custom circuit optimizations, verifying gate sequences, and manipulating quantum circuit structures for compilation or simulation purposes.",
      "description_length": 467,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.Qasm",
      "library": "voqc",
      "description": "This module handles reading from and writing to OpenQASM files, converting between file format and an internal circuit representation. It operates on circuits and integer qubit counts, producing or consuming string file paths. Use this when importing or exporting quantum circuits to the OpenQASM format for simulation or execution on quantum hardware.",
      "description_length": 352,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc.ConnectivityGraph",
      "library": "voqc",
      "description": "This module manages connectivity graphs using integer lists to represent paths and node connections, with operations for merging paths, interleaving sequences, and generating layouts. It includes submodules for ring, grid, and linear nearest neighbor (LNN) graphs, each supporting topology-specific navigation and validation. The ring submodule finds clockwise and counter-clockwise paths, the grid submodule handles coordinate-based traversal, and the LNN submodule validates linear qubit layouts. Example uses include path planning in circuit design, modeling quantum processor topologies, and enforcing qubit connectivity constraints in quantum computing.",
      "description_length": 658,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Voqc",
      "library": "voqc",
      "description": "This module suite provides tools for quantum circuit manipulation, analysis, and hardware-aware optimization. It centers around the `circ` type for circuit representation, with operations for validation, transformation, and optimization\u2014including gate decomposition, cancellation, and layout-aware mapping to physical topologies like rings and grids. It supports input/output via OpenQASM files and includes utilities for modeling and navigating connectivity constraints in quantum processors. Example uses include optimizing circuits for specific gate sets, verifying circuit equivalence, and mapping logical qubits to hardware topologies.",
      "description_length": 640,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 658,
    "min_description_length": 352,
    "avg_description_length": 476.5,
    "embedding_file_size_mb": 0.029465675354003906
  }
}