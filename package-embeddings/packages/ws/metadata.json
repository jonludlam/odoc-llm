{
  "package": "ws",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:55:30.324460",
  "modules": [
    {
      "module_path": "Ws.Make.M_result.E",
      "library": "ws",
      "description": "Converts exceptions to string representations for error handling. Works with the `exn` type, producing string values. Useful for logging or displaying error messages from caught exceptions.",
      "description_length": 189,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ws.Make.M_result",
      "library": "ws",
      "description": "This module implements monadic operations for handling computations that may fail, providing functions like `return`, `bind`, and `fmap` to chain and transform results. It works with the `M_result.t` type representing values or errors, and includes utilities for sequencing lists of results, converting exceptions to error strings via the `E` submodule, and lifting values from related types. Concrete use cases include composing error-prone operations, handling optional values with `lift_opt`, and converting exceptions into structured errors for logging or user feedback.",
      "description_length": 574,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ws.Make.F",
      "library": "ws",
      "description": "This module handles low-level parsing and serialization of WebSocket frames, including operations to extract frame headers, decode payload data, and apply masking. It works directly with byte buffers, I/O channels, and internal frame representations to process WebSocket protocol messages. Concrete use cases include reading and writing binary and text frames with proper masking and header validation.",
      "description_length": 402,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ws.Make",
      "library": "ws",
      "description": "This module implements WebSocket protocol handling with functions for upgrading HTTP connections, processing frames, and managing bidirectional communication. It works with I/O channels, byte buffers, and result types to handle WebSocket handshakes, frame parsing, and message routing. Concrete use cases include implementing WebSocket servers and clients that exchange text or binary messages with proper masking and protocol compliance.",
      "description_length": 438,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ws",
      "library": "ws",
      "description": "This module implements the WebSocket protocol by handling HTTP upgrades, frame parsing, and message construction. It works with I/O channels, byte buffers, and result types to manage bidirectional communication, including masking and protocol compliance. Concrete use cases include building WebSocket servers and clients that exchange text or binary messages.",
      "description_length": 359,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 574,
    "min_description_length": 189,
    "avg_description_length": 392.4,
    "embedding_file_size_mb": 0.07287883758544922
  }
}