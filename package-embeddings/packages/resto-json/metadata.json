{
  "package": "resto-json",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:04.075885",
  "modules": [
    {
      "module_path": "Resto_json.Ezjsonm",
      "library": "resto-json",
      "description": "This module provides functions for encoding and decoding JSON values using the `Json_repr.Ezjsonm.value` type. It supports converting structured data to and from JSON representations using provided encodings. Use it to serialize and deserialize data for transmission or storage in JSON format.",
      "description_length": 293,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_json.Encoding",
      "library": "resto-json",
      "description": "This module provides functions to construct and manipulate JSON encodings for values used in the description of REST endpoints, including conversions between types, schema extraction, and predefined encodings for unit and string values. It works directly with JSON schemas and encodings, supporting type-safe serialization and deserialization of request and response data. Concrete use cases include encoding endpoint request parameters, generating JSON schemas for API documentation, and converting between internal and external data representations.",
      "description_length": 551,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_json.Bson",
      "library": "resto-json",
      "description": "This module provides functions to convert OCaml values to and from BSON format using encodings. It operates on the `t` type representing BSON values and supports structured data serialization and deserialization. Use it to encode OCaml data structures into BSON for storage or transmission and decode BSON back into OCaml values.",
      "description_length": 329,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_json.VALUE",
      "library": "resto-json",
      "description": "This module converts values between different representations using a universal type `t`. It provides `construct` to encode values into type `t` and `destruct` to decode them back, using a given encoding. It is useful for handling JSON data dynamically, such as when parsing or serializing values in a flexible manner.",
      "description_length": 318,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Resto_json",
      "library": "resto-json",
      "description": "This module enables JSON and BSON serialization and deserialization for Resto-based services, integrating encodings with REST endpoint descriptions and schema handling. It centers around `Ezjsonm.value` and `Bson.t` types, offering `construct` and `destruct` operations to convert OCaml values to and from these formats. Submodules support defining JSON schemas, encoding endpoint data, and converting between internal and external representations, enabling tasks like parsing HTTP payloads or generating API documentation. It can serialize request parameters, validate data against JSON schemas, and encode OCaml structures into BSON for storage or transmission.",
      "description_length": 663,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 663,
    "min_description_length": 293,
    "avg_description_length": 430.8,
    "embedding_file_size_mb": 0.01862335205078125
  }
}