{
  "package": "graphv_font_js",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:02:32.899567",
  "modules": [
    {
      "module_path": "Graphv_font_js.Backend.Impl.Box",
      "library": "graphv_font_js",
      "description": "This module implements a basic box structure with integer coordinates, providing accessors to retrieve the minimum and maximum x and y values. It includes a function to construct a box from four integers representing the top-left and bottom-right corners. The module is useful for defining rectangular regions in a coordinate system, such as bounding boxes for graphical elements or layout calculations.",
      "description_length": 403,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphv_font_js.Backend.Impl.VMetrics",
      "library": "graphv_font_js",
      "description": "This module defines operations to access vertical font metrics, including ascent, descent, and line gap values. It works with the `t` type representing font metric data. Concrete use cases include calculating text layout dimensions and spacing for rendering text in graphical interfaces.",
      "description_length": 287,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphv_font_js.Backend.Impl.Buffer",
      "library": "graphv_font_js",
      "description": "This module provides low-level operations for manipulating byte buffers, including creating buffers of a specified size, setting and getting individual bytes, and slicing buffers into sub-buffers. It works directly with byte buffers represented by the `t` type, which is an alias for an unsigned byte buffer. Concrete use cases include handling binary data for WebGL operations, such as uploading texture data or vertex buffers to the GPU.",
      "description_length": 439,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphv_font_js.Backend.Impl.HMetrics",
      "library": "graphv_font_js",
      "description": "This module defines horizontal metric data for font glyphs, including the advance width and left-side bearing. It provides direct access to these metrics through `advance_width` and `left_side_bearing` functions. Used in font rendering and layout calculations to determine glyph positioning and spacing.",
      "description_length": 303,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphv_font_js.Backend.Impl",
      "library": "graphv_font_js",
      "description": "This module implements low-level font rendering operations for handling glyphs, metrics, and bitmaps using byte buffers and integer boxes. It provides functions to load and create fonts, retrieve vertical and horizontal metrics, compute glyph positions, and generate bitmaps for rendering. Concrete use cases include rendering text in WebGL contexts, calculating glyph spacing with kerning, and extracting bitmap representations of glyphs for display.",
      "description_length": 451,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphv_font_js.Backend",
      "library": "graphv_font_js",
      "description": "This module implements low-level font rendering operations, including glyph loading, metric retrieval, and bitmap generation using byte buffers and integer boxes. It provides functions to create fonts, compute glyph positions with kerning, and extract bitmap representations for display. Concrete use cases include rendering text in WebGL contexts and calculating precise glyph spacing.",
      "description_length": 386,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphv_font_js",
      "library": "graphv_font_js",
      "description": "This module implements low-level font rendering operations such as glyph loading, metric retrieval, and bitmap generation using byte buffers and integer boxes. It provides functions to create fonts, compute glyph positions with kerning, and extract bitmap representations for display. Concrete use cases include rendering text in WebGL contexts and calculating precise glyph spacing.",
      "description_length": 383,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 451,
    "min_description_length": 287,
    "avg_description_length": 378.85714285714283,
    "embedding_file_size_mb": 0.10179615020751953
  }
}