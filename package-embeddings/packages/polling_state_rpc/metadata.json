{
  "package": "polling_state_rpc",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:59:20.669140",
  "modules": [
    {
      "module_path": "Polling_state_rpc.Private_for_testing.Response",
      "library": "polling_state_rpc",
      "description": "Converts a response value to an S-expression using a provided conversion function. Works with generic response types wrapped in a polling state RPC response structure. Useful for serializing test responses into a readable format for debugging or logging.",
      "description_length": 254,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Polling_state_rpc.Client",
      "library": "polling_state_rpc",
      "description": "This module manages stateful RPC interactions with a server, allowing clients to send queries and receive responses either directly or via a subscription bus. It supports operations to create and dispatch queries, reuse previous queries, and explicitly clear server-side state. It works with RPC connections and deferred results, handling query-response pairing and state tracking internally. Use cases include maintaining persistent client sessions with polling behavior, such as monitoring or long-running interactive clients.",
      "description_length": 528,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Polling_state_rpc.Private_for_testing",
      "library": "polling_state_rpc",
      "description": "This module provides a function to create a client for testing polling state RPCs, allowing specification of an initial query and an introspection callback that observes responses, queries, and internal state. It works with generic query and response types wrapped in a polling state RPC structure. Concrete use cases include simulating and verifying client behavior during testing, particularly for debugging response handling and state transitions.",
      "description_length": 450,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Polling_state_rpc",
      "library": "polling_state_rpc",
      "description": "This module implements stateful RPC operations with support for polling and versioned state synchronization between clients and servers. It works with query and response types paired with connection and client state, using deferred results and subscription buses to manage asynchronous updates. Concrete use cases include implementing RPC handlers that track client progress, handle out-of-sync notifications, and support per-client state with shared connections, particularly in long-lived or polling-based client-server interactions.",
      "description_length": 535,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 535,
    "min_description_length": 254,
    "avg_description_length": 441.75,
    "embedding_file_size_mb": 0.058383941650390625
  }
}