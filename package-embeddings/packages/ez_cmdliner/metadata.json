{
  "package": "ez_cmdliner",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 10,
  "creation_timestamp": "2025-08-14T23:11:53.468980",
  "modules": [
    {
      "module_path": "Ezcmd.V1.Ezcmd.TYPES.Arg",
      "library": "ez_cmdliner",
      "description": "This module defines a variety of command-line argument specifications, each mapping input values to actions or storage targets. It supports operations like parsing boolean flags, setting reference values, handling strings, integers, floats, and symbolic arguments with predefined lists. Concrete use cases include defining command-line interfaces where arguments directly update variables or trigger specific functions based on input types.",
      "description_length": 440,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcmd.V2.EZCMD.TYPES.Arg",
      "library": "ez_cmdliner",
      "description": "This module defines the `spec` type and related constructors for specifying command-line arguments, including handling flags, values, and positional arguments. It supports operations like parsing boolean, string, integer, and float values, as well as symbolic and file-based inputs, using standard OCaml types such as `ref`, `string`, `int`, and `float`. Concrete use cases include defining argument specifications for command-line tools, setting up options with callbacks, and capturing positional parameters in standalone executables or subcommand interfaces.",
      "description_length": 561,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezcmd.V2.EZCMD.TYPES",
      "library": "ez_cmdliner",
      "description": "This module defines core data types for constructing command-line interfaces, including structured documentation blocks, argument metadata, and command/subcommand specifications. It supports defining command behaviors with typed arguments, environment variable bindings, and manual pages, using algebraic data types and records. Concrete use cases include modeling command hierarchies, specifying argument parsing rules, and generating help output for CLI tools.",
      "description_length": 462,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezcmd.V1.Ezcmd.TYPES",
      "library": "ez_cmdliner",
      "description": "This module defines core data types for building command-line interfaces, including structured documentation blocks, command metadata, and argument specifications. It works with lists of labeled arguments, parsing rules, and nested documentation elements to construct executable commands with typed inputs and formatted help output. Concrete use cases include defining commands that accept boolean flags, positional arguments, and structured documentation for tools like CLI utilities or interactive shells.",
      "description_length": 507,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcmd.V2.EZCMD.MAKE",
      "library": "ez_cmdliner",
      "description": "This module builds command-line interfaces with subcommands using a functorial interface. It provides the `main` function to parse command-line arguments, handle subcommands, and execute corresponding actions, with support for custom error, exit, and configuration printing hooks. It works with lists of subcommand definitions, each combining command names, argument specifications, and run actions. Use it to create tools like version-controlled CLI apps or multi-command utilities where each subcommand has its own set of options and behavior.",
      "description_length": 545,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezcmd.V2.EZCMD",
      "library": "ez_cmdliner",
      "description": "This module builds command-line interfaces with subcommands using a functorial interface. It provides the `main` function to parse command-line arguments, handle subcommands, and execute corresponding actions, with support for custom error, exit, and configuration printing hooks. It works with lists of subcommand definitions, each combining command names, argument specifications, and run actions. Use it to create tools like version-controlled CLI apps or multi-command utilities where each subcommand has its own set of options and behavior.",
      "description_length": 545,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezcmd.V1.Ezcmd",
      "library": "ez_cmdliner",
      "description": "This module processes command-line arguments and constructs executable commands with typed inputs, formatted help, and structured documentation. It handles lists of labeled arguments, parsing rules, and nested documentation blocks to define CLI behaviors such as boolean flags, positional arguments, and environment variable bindings. Concrete use cases include building CLI utilities that parse user input, display man pages, and execute subcommands based on structured command definitions.",
      "description_length": 491,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezcmd.V1",
      "library": "ez_cmdliner",
      "description": "This module processes command-line arguments into typed values, constructs executable commands with structured help and documentation, and supports boolean flags, positional arguments, and environment variable bindings. It works with lists of labeled arguments and nested documentation blocks to define CLI behaviors. Use it to build CLI utilities that parse user input, display formatted help, and execute subcommands based on declarative command definitions.",
      "description_length": 460,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezcmd.V2",
      "library": "ez_cmdliner",
      "description": "This module builds command-line interfaces with subcommands using a functorial interface. It provides the `main` function to parse command-line arguments, handle subcommands, and execute corresponding actions, with support for custom error, exit, and configuration printing hooks. It works with lists of subcommand definitions, each combining command names, argument specifications, and run actions. Use it to create tools like version-controlled CLI apps or multi-command utilities where each subcommand has its own set of options and behavior.",
      "description_length": 545,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezcmd",
      "library": "ez_cmdliner",
      "description": "This module processes command-line arguments into typed values, constructs executable commands with structured help and documentation, and supports boolean flags, positional arguments, and environment variable bindings. It works with lists of labeled arguments and nested documentation blocks to define CLI behaviors. Use it to build CLI utilities that parse user input, display formatted help, and execute subcommands based on declarative command definitions.",
      "description_length": 460,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 561,
    "min_description_length": 440,
    "avg_description_length": 501.6,
    "embedding_file_size_mb": 0.1309652328491211
  }
}