{
  "package": "ez_cmdliner",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-07-15T23:07:13.349921",
  "modules": [
    {
      "module_path": "Ezcmd.V2.EZCMD.TYPES.Arg",
      "library": "ez_cmdliner",
      "description": "This module defines argument specifications for parsing command-line interfaces. It supports operations like handling flags, setting values, parsing positional arguments, and managing subcommands. Concrete use cases include defining options with `Set_bool`, `Set_string`, or `Anon` to directly map command-line inputs to actions or variable updates.",
      "description_length": 349,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcmd.V1.Ezcmd.TYPES.Arg",
      "library": "ez_cmdliner",
      "description": "This module defines a variety of command-line argument specifications that handle parsing and assignment of different value types. It supports operations like setting boolean flags, capturing strings, integers, floats, and handling positional or anonymous arguments. Concrete use cases include defining command-line interfaces where arguments directly map to function calls or variable updates.",
      "description_length": 394,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezcmd.V1.Ezcmd.TYPES",
      "library": "ez_cmdliner",
      "description": "This module defines the core data types for building structured command-line interfaces, including the `command` type for organizing executable commands with documentation, arguments, and actions. It works with its child module to provide rich argument handling, allowing precise specification of boolean flags, positional arguments, and typed values like strings, integers, and floats. Together, they enable defining complex command hierarchies, generating help output, and mapping command-line input directly to function calls or variable assignments. Example uses include constructing tools with nested subcommands and auto-generating man pages from structured documentation.",
      "description_length": 678,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcmd.V2.EZCMD.TYPES",
      "library": "ez_cmdliner",
      "description": "This module provides the foundational data types for building command-line interfaces, such as `block`, `env`, `info`, `arg_list`, `sub`, and `command`, which represent interface elements like commands, arguments, and documentation. It enables defining structured command hierarchies with associated metadata and actions, while the child module extends this by specifying how command-line arguments are parsed and interpreted, using constructs like `Set_bool`, `Set_string`, and `Anon`. Together, they allow creating rich, typed command-line applications with support for flags, positional arguments, subcommands, and formatted help output. For example, you can define a command with a list of required arguments and subcommands, each tied to specific execution logic and documentation blocks.",
      "description_length": 793,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcmd.V2.EZCMD.MAKE",
      "library": "ez_cmdliner",
      "description": "This module defines the `main` function for executing command-line interfaces with subcommands, handling argument parsing and execution flow. It works with command specifications, subcommand lists, and runtime configuration hooks like error handling and printing. Concrete use cases include building CLI tools with multiple subcommands, shared command-line arguments, and custom behavior on error or exit.",
      "description_length": 405,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcmd.V1.Ezcmd",
      "library": "ez_cmdliner",
      "description": "This module organizes command-line interfaces using structured data types like `command`, enabling precise definition of subcommands, typed arguments, and documentation. It supports boolean flags, positional arguments, and environment variable overrides, while generating help pages and mapping input to function calls. With its child module, it builds hierarchical CLI tools, handles complex argument parsing, and auto-generates documentation from structured blocks. Example uses include creating multi-level command tools and validating command-line input against typed specifications.",
      "description_length": 587,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcmd.V2.EZCMD",
      "library": "ez_cmdliner",
      "description": "This module enables defining and executing command-line interfaces with subcommands, typed arguments, and structured documentation. It provides core data types like `command`, `sub`, and `arg_list` to build hierarchical CLIs, with operations to associate commands with actions, parse arguments, and generate help output. The child module extends this with runtime execution through the `main` function, handling argument parsing, error hooks, and subcommand dispatch. For example, you can define a command with boolean flags and positional arguments, nest subcommands under it, and run the interface with custom error handling.",
      "description_length": 627,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ezcmd.V1",
      "library": "ez_cmdliner",
      "description": "This module organizes command-line interfaces using structured data types like `command`, enabling precise definition of subcommands, typed arguments, and documentation. It supports boolean flags, positional arguments, and environment variable overrides, while generating help pages and mapping input to function calls. You can build hierarchical CLI tools, validate command-line input against typed specifications, and auto-generate documentation from structured blocks. Example uses include creating multi-level command tools and handling complex argument parsing.",
      "description_length": 566,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ezcmd.V2",
      "library": "ez_cmdliner",
      "description": "This module provides a structured way to build command-line interfaces with typed arguments, subcommands, and help generation. It centers around data types like `command`, `sub`, and `arg_list`, enabling hierarchical CLI definitions and associating actions with commands. Operations include parsing command-line arguments, dispatching subcommands, and handling errors during execution. For example, you can define a command that takes boolean flags and positional arguments, organize subcommands under it, and run the interface with custom error handling.",
      "description_length": 555,
      "index": 8,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Ezcmd",
      "library": "ez_cmdliner",
      "description": "This module structures command-line interfaces using data types like `command`, `sub`, and `arg_list`, enabling hierarchical definitions of subcommands, typed arguments, and documentation. It supports parsing command-line inputs, handling environment variables, and mapping structured definitions to function calls, with operations for validation, help generation, and error handling. You can define commands with boolean flags, positional arguments, and nested subcommands, then execute them with typed input and auto-generated documentation. Example uses include building multi-level CLI tools and managing complex argument configurations with custom error handling.",
      "description_length": 668,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 793,
    "min_description_length": 349,
    "avg_description_length": 562.2,
    "embedding_file_size_mb": 0.03675079345703125
  }
}