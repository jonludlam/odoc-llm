{
  "package": "dune-rpc-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:02:18.806593",
  "modules": [
    {
      "module_path": "Dune_rpc_lwt.V1.Client.Stream",
      "library": "dune-rpc-lwt",
      "description": "This module manages a streaming RPC client connection by providing `cancel` to terminate the polling loop and `next` to retrieve the next value from the stream. It works with stream values of type `'a option Lwt.t`, where each call to `next` blocks until a new value is available. Concrete use cases include consuming incremental build results or real-time log updates from a Dune RPC server.",
      "description_length": 392,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_rpc_lwt.V1.Client.Batch",
      "library": "dune-rpc-lwt",
      "description": "This module batches multiple RPC requests and notifications into a single submission, improving efficiency for bulk operations. It works with versioned RPC requests and notifications, handling responses asynchronously using Lwt. Concrete use cases include sending multiple build commands or status queries to a Dune RPC server in one round trip.",
      "description_length": 345,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_rpc_lwt.V1.Client.Versioned",
      "library": "dune-rpc-lwt",
      "description": "This module handles version negotiation for individual RPC procedures after session startup, ensuring the client uses the correct protocol version for each request or notification. It works with versioned RPC requests and notifications, along with negotiated version menus established during session initialization. Concrete use cases include preparing version-specific method calls and validating notifications against agreed-upon protocol versions before transmission.",
      "description_length": 470,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_rpc_lwt.V1.Client.Handler",
      "library": "dune-rpc-lwt",
      "description": "Implements handlers for responding to RPC requests over Lwt-based connections. It works with `Dune_rpc.V1.Message.t` values, managing request-response interactions asynchronously. Use it to define custom logic for handling incoming RPC calls in a client-server communication setup.",
      "description_length": 281,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_rpc_lwt.V1.Where",
      "library": "dune-rpc-lwt",
      "description": "This module resolves and provides configuration paths for Dune RPC services. It works with environment variables and build directory paths to determine where to locate runtime artifacts. Use it to dynamically find socket files or other service-related paths during distributed builds or remote execution.",
      "description_length": 304,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_rpc_lwt.V1.Client",
      "library": "dune-rpc-lwt",
      "description": "This module implements an Lwt-based RPC client for handling asynchronous request-response interactions, version negotiation, and streaming with a Dune RPC server. It works with `Dune_rpc.V1.Message.t`, versioned RPC requests and notifications, and stream values of type `'a option Lwt.t`, supporting concrete use cases such as sending versioned method calls, consuming real-time build updates, and batching multiple RPC operations. Functions include sending requests, handling notifications, managing disconnection, and initializing polling loops for subscriptions.",
      "description_length": 565,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_rpc_lwt.V1",
      "library": "dune-rpc-lwt",
      "description": "This module implements an Lwt-based RPC client for asynchronous communication with a Dune RPC server, handling version negotiation, streaming, and batched operations. It works with versioned RPC messages, stream values, and channel-based I/O for concrete use cases like sending method calls, receiving build updates in real time, and managing persistent connections. The `connect_chan` function establishes a connection using resolved service paths, while the `Where` submodule locates runtime artifacts such as socket files based on environment and build configuration.",
      "description_length": 570,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_rpc_lwt",
      "library": "dune-rpc-lwt",
      "description": "Implements an Lwt-based RPC client for asynchronous communication with a Dune RPC server, supporting version negotiation, streaming, and batched operations. Works with versioned RPC messages, stream values, and channel-based I/O to handle concrete tasks like sending method calls, receiving real-time build updates, and managing persistent connections. Uses the `connect_chan` function to establish connections and the `Where` submodule to locate runtime artifacts such as socket files based on environment and build configuration.",
      "description_length": 531,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 570,
    "min_description_length": 281,
    "avg_description_length": 432.25,
    "embedding_file_size_mb": 0.11634063720703125
  }
}