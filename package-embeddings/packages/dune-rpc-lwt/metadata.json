{
  "package": "dune-rpc-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:06:28.152050",
  "modules": [
    {
      "module_path": "Dune_rpc_lwt.V1.Client.Versioned",
      "library": "dune-rpc-lwt",
      "description": "This module handles version negotiation for individual RPC methods during client-server sessions, ensuring the correct protocol version is used for each request or notification. It works with versioned request and notification types, producing version-specific variants or errors if negotiation fails. Concrete use cases include preparing method calls with `prepare_request` and notifications with `prepare_notification`, which validate against the session's negotiated version menu before transmission.",
      "description_length": 503,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_rpc_lwt.V1.Client.Handler",
      "library": "dune-rpc-lwt",
      "description": "Implements handlers for responding to RPC requests over Lwt-based connections. It manages incoming messages, routes them to appropriate response handlers, and supports asynchronous processing of requests. This module is used to build custom RPC servers that communicate using the Dune RPC protocol over Lwt conduits.",
      "description_length": 316,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_rpc_lwt.V1.Client.Stream",
      "library": "dune-rpc-lwt",
      "description": "This module manages a polling loop for consuming values from an RPC stream. It provides `cancel` to notify the server and stop polling, and `next` to retrieve the next value asynchronously. It works with stream types that produce optional values, supporting use cases like event-driven data retrieval or incremental result processing over a network connection.",
      "description_length": 360,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_rpc_lwt.V1.Client.Batch",
      "library": "dune-rpc-lwt",
      "description": "This module batches multiple RPC requests and notifications into a single submission. It manages a collection of versioned requests and notifications, allowing for efficient batch processing over a single client connection. Use it to reduce network overhead when sending multiple independent RPC calls to a server.",
      "description_length": 314,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_rpc_lwt.V1.Client",
      "library": "dune-rpc-lwt",
      "description": "This module implements an Lwt-based RPC client for sending versioned requests and notifications over a session, supporting individual calls, notifications, streaming, and batching. It provides core operations like `call`, `notify`, `stream`, and `batch`, working with versioned method types to ensure compatibility during session negotiation. Child modules handle version selection, response routing, stream polling, and batch composition, enabling concrete tasks like querying a build server, subscribing to event streams, or sending multiple requests efficiently over a single connection. Specific examples include using `prepare_request` to validate method versions, `next` to consume stream updates asynchronously, and `batch` to group multiple notifications into one transmission.",
      "description_length": 785,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_rpc_lwt.V1.Where",
      "library": "dune-rpc-lwt",
      "description": "This module resolves the location of Dune RPC socket files by determining the appropriate directory based on environment variables and build directory paths. It provides `get` to search for the socket location using environment lookup and `default` to construct a default path when no override is present. The functions work with string paths and environment variable mappings, typically used during client-server communication setup in Dune-based applications.",
      "description_length": 461,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_rpc_lwt.V1",
      "library": "dune-rpc-lwt",
      "description": "This module enables asynchronous communication with Dune RPC services using Lwt channels, offering a `connect_chan` function to establish connections based on target endpoints. It integrates with submodules that handle RPC method execution and socket resolution, supporting operations like versioned requests, notifications, and streaming over established sessions. The first submodule provides methods such as `call`, `notify`, and `stream` for interacting with RPC endpoints, while the second resolves socket locations using environment variables and default paths. Together, they allow tasks like querying a build server, subscribing to event streams, or locating RPC sockets automatically during client setup.",
      "description_length": 713,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_rpc_lwt",
      "library": "dune-rpc-lwt",
      "description": "This module enables asynchronous communication with Dune RPC services using Lwt channels, supporting operations like versioned requests, notifications, and streaming over established sessions. It provides key functions such as `connect_chan`, `call`, `notify`, and `stream`, along with socket resolution based on environment variables and defaults. Users can query a build server, subscribe to event streams, or automatically locate RPC sockets during client setup. Example tasks include sending a notification to trigger a build or streaming log output from a running process.",
      "description_length": 577,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 785,
    "min_description_length": 314,
    "avg_description_length": 503.625,
    "embedding_file_size_mb": 0.029458999633789062
  }
}