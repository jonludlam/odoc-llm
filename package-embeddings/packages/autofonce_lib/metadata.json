{
  "package": "autofonce_lib",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 20,
  "creation_timestamp": "2025-08-14T23:24:48.964780",
  "modules": [
    {
      "module_path": "Autofonce_lib.Terminal",
      "library": "autofonce_lib",
      "description": "This module supports operations for text formatting with ANSI color and style attributes, along with low-level terminal control. It works with strings, cursor coordinates, and screen dimensions to enable use cases like interactive command-line interfaces, colored logging, and dynamic terminal UIs. Key features include styled output, cursor positioning, screen clearing, and terminal state configuration for ANSI-compliant environments.",
      "description_length": 437,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_lib.Command_init",
      "library": "autofonce_lib",
      "description": "This module initializes project configurations by listing known projects, autodetecting project types, and generating default configurations. It operates on project names and configuration structures, producing initialized project settings based on detected or specified types. Use it to set up new projects automatically or from a predefined list.",
      "description_length": 348,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_lib.Command_run",
      "library": "autofonce_lib",
      "description": "Handles the execution of command-line subcommands, providing structured parsing and invocation logic. Works with command definitions and runtime arguments to perform actions like building, testing, or deploying projects. Used to implement CLI tools with multiple operations driven by user input.",
      "description_length": 295,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib.Filter",
      "library": "autofonce_lib",
      "description": "Selects and runs specific tests from a suite based on filtering criteria, using a given execution state and a test-running function. It works with test suites and individual test definitions, allowing filtering by failure status via a mutable flag. Useful for re-running only failed tests or applying custom selection logic during test execution.",
      "description_length": 346,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib.Runner_common",
      "library": "autofonce_lib",
      "description": "This module provides utilities for managing test execution and reporting in testing frameworks, with operations for tracking test statuses (success, failure, skip), handling file paths, performing string substitutions (including environment variables), and creating test states. It works with custom types like `tester`, `state`, `test`, and `check`, supporting use cases such as conditional test execution based on directives like `AT_FAIL_IF` and formatting structured test output with dynamic path or variable replacements.",
      "description_length": 526,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_lib.Testsuite",
      "library": "autofonce_lib",
      "description": "This module defines command-line arguments for test suite management and provides functions to locate, read, execute, and display test suites. It operates on project and test suite configurations, returning structured results from test runs. Concrete use cases include parsing test suite definitions from a project structure, running tests with specific configurations, and outputting test results to the console.",
      "description_length": 413,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib.Version",
      "library": "autofonce_lib",
      "description": "This module defines metadata about a software version, including the version string, commit hash, and commit date. It works with basic types like strings and options to represent versioning information. Concrete use cases include embedding version details in binaries or exposing them through command-line interfaces.",
      "description_length": 317,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib.Command_config",
      "library": "autofonce_lib",
      "description": "Handles command-line interface configuration and parsing for a specific subcommand. Works with `Ezcmd.V2.EZCMD.TYPES.sub` to define and structure command behavior and arguments. Used to configure and execute commands within a larger CLI application, providing direct mappings between command inputs and executable logic.",
      "description_length": 320,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib.Command_new",
      "library": "autofonce_lib",
      "description": "This module defines a command specification for creating new projects or files, including options for templates and output directories. It works with string-based configuration values and command-line arguments parsed via `Ezcmd.V2`. A concrete use case is scaffolding project structures from predefined templates during development setup.",
      "description_length": 339,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_lib.Logging",
      "library": "autofonce_lib",
      "description": "Handles logging of state information to a buffer and manages an optional output string reference. Works with state data structures defined in the Types module. Used to capture and store application state snapshots during execution for debugging or auditing purposes.",
      "description_length": 266,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib.Runner_seq",
      "library": "autofonce_lib",
      "description": "Executes a sequence of tests using a provided initial state, applying each test step to the state and collecting results. Works with state values of type `Autofonce_lib.Types.state`, which encapsulate test configurations and outcomes. Useful for running automated test suites where each test modifies and validates the system state in sequence.",
      "description_length": 344,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_lib.Main",
      "library": "autofonce_lib",
      "description": "Implements the entry point and command-line interface for the application. Defines a list of available subcommands and a main function that initializes and runs the program. Used to launch tools like database migrations, server execution, and configuration checks directly from the command line.",
      "description_length": 295,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib.Call",
      "library": "autofonce_lib",
      "description": "This module executes shell commands and manages process interactions, capturing output or errors. It provides functions to run commands with customizable input/output handling, including writing to files or reading output as strings or lines. Concrete use cases include invoking external tools, scripting command pipelines, and handling subprocesses with precise control over file descriptors and error handling.",
      "description_length": 412,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_lib.Promote",
      "library": "autofonce_lib",
      "description": "Prints a list of actions to a buffer, with options to control whether to include an exit action and whether to retain old entries. It operates on a buffer and a list of action values, which represent executable commands or steps. This function is used to generate structured output for scripting or logging sequences of operations.",
      "description_length": 331,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib.Globals",
      "library": "autofonce_lib",
      "description": "This module defines global configuration flags and settings used to control testing behavior, such as verbosity, failure handling, test cleanup, and parallel execution limits. It works primarily with mutable reference cells (`ref`) holding basic types like integers and booleans. These variables are used to configure test execution dynamically across different parts of a testing framework.",
      "description_length": 391,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib.Command_promote",
      "library": "autofonce_lib",
      "description": "This module implements command-line functionality for promoting test suites, including parsing arguments, handling user prompts, and applying configuration changes. It works with project and test suite configurations, command-line arguments, and patch operations. Concrete use cases include interactive promotion of test suites, generating todo lists, and conditionally applying patches based on user input.",
      "description_length": 407,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib.Types",
      "library": "autofonce_lib",
      "description": "This module defines core data structures and type aliases used throughout the project, including types for test checks, test suites, project configurations, and runtime state. It provides functions to convert these types to string representations for debugging or reporting. Concrete use cases include modeling test execution contexts, storing test metadata, and handling environment and configuration data for test runs.",
      "description_length": 421,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_lib.Runner_par",
      "library": "autofonce_lib",
      "description": "Executes a parallel test suite using a provided initial state, running tests concurrently. Works with state and test suite data structures to manage execution context and results. Useful for running automated tests in parallel while maintaining shared state.",
      "description_length": 258,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib.Command_list",
      "library": "autofonce_lib",
      "description": "Handles command-line interface logic for listing stored values. Works with string lists and command-line argument structures. Used to define and execute the `list` command that displays all key-value pairs saved in the application's storage.",
      "description_length": 241,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_lib",
      "library": "autofonce_lib",
      "description": "This module provides functionality for command-line interface configuration, command execution, and process management. It works with subcommand definitions, shell commands, and process input/output streams. Concrete use cases include defining CLI commands with structured arguments, executing shell operations with custom input/output handling, and managing subprocesses for automation tasks like project initialization, test suite promotion, and scripted command pipelines.",
      "description_length": 475,
      "index": 19,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 20,
    "meaningful_modules": 20,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 526,
    "min_description_length": 241,
    "avg_description_length": 359.1,
    "embedding_file_size_mb": 0.2902698516845703
  }
}