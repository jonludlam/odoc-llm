{
  "package": "current_github",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-06-18T16:33:21.494802",
  "modules": [
    {
      "module_path": "Current_github.Api.Status",
      "description": "Constructs a status object with optional description and URL, using a specific state enumeration. Works with the `state` variant type and `Uri.t` for web references. Used to represent API response statuses with contextual metadata.",
      "description_length": 231,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_github.Api.CheckRunStatus",
      "description": "Provides functions to construct a check run status with a state, optional text, summary, URL, identifier, and up to three actions. Works with types representing the status state, action metadata, and conclusion values. Used to report build status to GitHub with actionable links and job identifiers.",
      "description_length": 299,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_github.Api.Commit",
      "description": "Provides functions to extract commit metadata such as ID, hash, message, and timestamps, and to generate pretty-printed representations. Works with commit objects containing repository identifiers, Git hashes, and pull request or branch information. Used to display commit details in logs, track PR origins, and construct GitHub URLs for specific commits.",
      "description_length": 355,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_github.Api.CheckRun",
      "description": "Sets the status of a check run for a specific commit and context using a commit identifier, check name, and status value. Operates on types including Commit.t, string, and CheckRunStatus.t. Used to update the status of CI checks in real-time during build processes.",
      "description_length": 265,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_github.Api.Repo",
      "description": "Provides operations to extract a repository's identifier, format its representation, and compare repositories. Works with a composite type representing a repository and its ID. Enables retrieval of CI-relevant commits and the head commit of the default branch, filtering by staleness.",
      "description_length": 284,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_github.Api.Ref",
      "description": "Provides operations to format, compare, and convert reference identifiers to Git-compatible strings. Works with custom types representing reference information and unique identifiers. Used to generate Git reference names from pull request data and enable consistent comparison of reference objects.",
      "description_length": 298,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Current_github.Api.Ref_map",
      "description": "This module offers operations for dynamically managing key-value maps with `Ref.t` keys and generic values, including insertion, deletion, updates, and merge strategies that handle list-valued entries. It supports ordered traversal, filtering, and sequence-based construction, enabling efficient processing of structured data. Use cases include configuration management, data aggregation, and scenarios requiring ordered or conditional access to key-value pairs.",
      "description_length": 462,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_github.Api.Monitor",
      "description": "Provides operations to parse and execute monitored GraphQL queries, including a method to convert JSON responses into structured results. Works with repository identifiers and GraphQL query strings, incorporating rate limit tracking. Used to analyze repository data while ensuring compliance with API usage constraints.",
      "description_length": 319,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Current_github.Api.Anonymous",
      "description": "Returns the head commit of a specified Git reference in a public repository. Operates on `Repo_id.t` and `Ref.t` to fetch commit IDs asynchronously. Used to monitor public repository updates via webhooks.",
      "description_length": 204,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_github.Repo_id",
      "description": "Provides functions to format, compare, and parse repository identifiers for use in command-line interfaces. Works with a structured type representing GitHub repository metadata. Used to ensure consistent handling of repository references in CLI tools and output formatting.",
      "description_length": 273,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_github.Api",
      "description": "Provides functions to parse and structure GraphQL query responses, working with strings for queries and a custom result type. Accepts a repository ID and JSON data to convert into a result using a specific parsing function. Designed for monitoring repository-related GraphQL queries with built-in rate limit tracking.",
      "description_length": 317,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_github.Installation",
      "description": "Provides functions to retrieve the GitHub account, access the API, and list repositories associated with an installation, including an option to exclude archived repositories. Works with the `t` type representing an installation and the `Api.t` type for API interactions. Used to fetch configured repositories for a specific GitHub app installation and compare installations by ID.",
      "description_length": 381,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_github.App",
      "description": "Provides functions to handle GitHub app configurations, including retrieving webhook secrets, parsing command-line options, and fetching installation details. Works with the `t` type, representing a GitHub application, and the `Installation.t` type for installation-specific API access. Used to validate incoming webhooks, parse optional CLI arguments, and manage installation-specific API interactions.",
      "description_length": 403,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_github.Auth",
      "description": "Provides functions to create an authentication configuration from GitHub credentials, generate a login URI with CSRF protection, handle login callback routes, and retrieve configuration via command-line arguments. Works with client IDs, secrets, CSRF tokens, and URI structures. Used to integrate GitHub OAuth into web applications, allowing users to authenticate through GitHub and manage session state.",
      "description_length": 404,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "current_github",
      "description": "Provides operations for fetching, building, testing, and deploying code based on version control events. Works with Git repositories, commit hashes, and build artifacts. Used to automate continuous integration workflows and update status reports on pull requests.",
      "description_length": 263,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Current_github",
      "description": "Handles GitHub integration through structured repository identifiers, GraphQL query parsing, installation management, app configuration, and OAuth authentication. Operates on types like installation records, API interfaces, GraphQL results, and authentication parameters. Enables CLI tools to parse repository references, monitor GraphQL responses, fetch app installations, validate webhooks, and manage OAuth flows. Examples include generating login URIs, tracking API rate limits, listing non-archived repositories, and parsing query results into typed data.",
      "description_length": 560,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 560,
    "min_description_length": 204,
    "avg_description_length": 332.375,
    "embedding_file_size_mb": 0.058539390563964844
  }
}