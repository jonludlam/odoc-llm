{
  "package": "multipart_form-cohttp-lwt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:17.088823",
  "modules": [
    {
      "module_path": "Multipart_form_cohttp.Client",
      "description": "Generates HTTP headers and bodies for multipart form data submissions using a `Multipart_form.multipart` structure. It integrates with Cohttp's Lwt-based client to send structured data over HTTP. This is used to upload files or form data with custom boundaries and content types.",
      "description_length": 279,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form_cohttp.Server",
      "description": "Handles multipart form data parsing from HTTP requests, extracting parts with associated headers and bodies. Operates on Cohttp.Request.t, Cohttp.Header.t, and Cohttp_lwt.Body.t to process streamed form data. Used to manage file uploads and form submissions in web servers by separating and processing each part concurrently.",
      "description_length": 325,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "multipart_form-cohttp-lwt",
      "description": "Parses and generates HTTP multipart/form-data bodies using streaming to handle large files without excessive memory use. Works with byte streams and content type headers to process individual parts incrementally. Enables efficient file uploads and form data handling in web applications.",
      "description_length": 287,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multipart_form_cohttp",
      "description": "Encapsulates HTTP multipart form handling for both sending and receiving data, supporting structured uploads and parsing of streamed form submissions. It works with `Multipart_form.multipart` to construct requests and processes `Cohttp.Request.t`, `Cohttp.Header.t`, and `Cohttp_lwt.Body.t` to extract parts from incoming requests. Operations include setting custom boundaries, content types, and concurrently processing file uploads or form fields. Examples include uploading a file with a specified content type or extracting multiple form fields from a single request body.",
      "description_length": 576,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 576,
    "min_description_length": 279,
    "avg_description_length": 366.75,
    "embedding_file_size_mb": 0.014949798583984375
  }
}