{
  "package": "github-unix",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 35,
  "creation_timestamp": "2025-06-18T16:39:38.325804",
  "modules": [
    {
      "module_path": "Github.Endpoint.Version",
      "description": "Provides functions to parse, compare, and format version strings in the form of semantic versions. Works with the `t` type, representing version numbers and their components. Used to validate cache headers and ensure clients receive updated resources when necessary.",
      "description_length": 266,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Repo.Hook",
      "description": "Provides functions to retrieve, create, update, and delete GitHub repository hooks, as well as test hooks and parse webhook event data. Operates on types such as `Github_t.hook`, `Github_t.new_hook`, `Github_t.update_hook`, and `Github_t.event_hook_constr`. Used to manage webhooks for repository events, including triggering test payloads and extracting event metadata from JSON strings.",
      "description_length": 388,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Organization.Hook",
      "description": "Retrieves, creates, updates, and deletes organization-level webhooks for GitHub. Processes event payloads to extract structured hook data and metadata. Accepts parameters like organization names and hook IDs to perform targeted operations on specific hooks.",
      "description_length": 257,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Response",
      "description": "Provides functions to extract the payload and redirect history from API responses, and to determine the final destination of a redirect chain. Operates on a private type representing API responses, including a value of arbitrary type and a list of redirects. Used to handle HTTP redirect sequences and retrieve the ultimate resource URI after processing all redirects.",
      "description_length": 368,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Monad",
      "description": "Encapsulates Lwt threads with state management, enabling sequential API operations where each step can access and modify shared state. Provides binding and mapping operations to chain computations, handle responses, and manage exceptions within the monadic context. Used to execute GitHub API requests with consistent authentication and configuration across asynchronous calls.",
      "description_length": 377,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Endpoint",
      "description": "Handles HTTP requests to specific GitHub API endpoints, using versioned resources to manage cache validity. Operates on versioned data through the `t` type, enabling parsing, comparison, and formatting of semantic versions. Validates cache headers by comparing version strings, ensuring clients receive updated content when required. Supports tasks like checking for API version compatibility or determining if a cached response is stale.",
      "description_length": 438,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Stream",
      "description": "Provides functions to lazily iterate over, transform, and process paginated API results, including fetching the next element, mapping over elements, folding over the stream, and finding specific items. Operates on a stream type that represents sequences of items from GitHub's API, with support for versioning and polling. Used to efficiently handle large datasets, perform conditional updates, and convert streams to lists for further processing.",
      "description_length": 447,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Scope",
      "description": "Converts GitHub scope values to and from strings, serializes lists of scopes for API use, and provides predefined lists of all scopes and minimal privileged sets. Operates on `Github_t.scope` and related list structures. Used to generate valid scope parameters for API requests and validate user-provided scope strings.",
      "description_length": 319,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Token",
      "description": "Provides functions to generate, retrieve, and manage GitHub authorization tokens, including converting between raw strings and token objects. Works with OAuth application tokens and personal tokens, handling two-factor authentication via one-time passwords. Used to exchange OAuth codes for tokens, create new authorizations, list or fetch specific authorizations, and delete them.",
      "description_length": 381,
      "index": 8,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Github.API",
      "description": "Provides HTTP method wrappers for GitHub API interactions, including GET, POST, DELETE, PATCH, and PUT with customizable headers, query parameters, and authentication tokens. Handles response parsing, error management, and rate limit tracking using monadic state for token and user agent configuration. Includes utilities for extracting error messages and cached rate limit data from API responses.",
      "description_length": 398,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.URI",
      "description": "Generates OAuth2 authorization and token endpoints using URI templates. Constructs URLs for user redirection and token exchange with specific parameters like client ID, secret, code, and scopes. Produces valid URI instances for integration with web services and API clients.",
      "description_length": 274,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Filter",
      "description": "Provides functions to construct and manipulate filter parameters for querying GitHub resources, including sorting options, date ranges, and qualifier-based constraints. Works with custom types such as `state`, `milestone`, `user`, and `date` to represent specific filter criteria. Used to refine issue, repository, and user searches with precise sorting and qualification rules.",
      "description_length": 378,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Rate_limit",
      "description": "Provides functions to retrieve rate limit information for different GitHub API regimes, including all regimes, the Core regime, and the Search regime. Operates on a token and returns rate data within a monadic context. Used to monitor API usage limits in real-time during request handling.",
      "description_length": 289,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.User",
      "description": "Provides functions to retrieve user information and repositories from GitHub, using a token for authentication. Operates on user identifiers and returns structured user data and repository streams. Fetches details for the authenticated user or a specified username.",
      "description_length": 265,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Organization",
      "description": "Manages GitHub organization webhooks with operations to retrieve, create, update, and delete. Processes event payloads into structured data, including metadata and hook-specific information. Supports targeted actions using organization names and hook IDs. Enables automation by handling webhook events and modifying configurations programmatically.",
      "description_length": 348,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Team",
      "description": "Provides functions to retrieve team information and associated repositories using a team ID and authentication token. Operates on integers for team identifiers and returns structured data including team details and repository streams. Used to fetch specific team metadata and list all repositories managed by a given team.",
      "description_length": 322,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Event",
      "description": "Provides streams of GitHub events filtered by repository, organization, user, or public activity. Operates on GitHub event data structures and user/repository identifiers. Enables real-time tracking of activity for specific projects, organizations, or users, including both public and private events based on authentication.",
      "description_length": 324,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Repo",
      "description": "Manages GitHub repository hooks with functions to retrieve, create, update, and delete them, along with testing and parsing webhook events. Operates on types like `Github_t.hook`, `Github_t.new_hook`, `Github_t.update_hook`, and `Github_t.event_hook_constr` to handle webhook configurations and event data. Allows extracting event metadata from JSON strings and sending test payloads to verify hook functionality. Enables automated response to repository events through customizable webhook setups.",
      "description_length": 498,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Stats",
      "description": "Provides functions to retrieve contributor statistics, commit activity by week, weekly code frequency, and hourly commit distribution for a GitHub repository. Works with streams of commit data, participation metrics, and time-based aggregates. Used to analyze contribution patterns, track development trends, and identify peak activity periods.",
      "description_length": 344,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Status",
      "description": "Provides operations to retrieve and create status reports for specific Git references in a GitHub repository. Works with Git SHAs, branch names, and tag names, along with status data structures. Used to fetch combined status information for a commit or post a new status update for a specific commit.",
      "description_length": 300,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Pull",
      "description": "Provides functions to retrieve, create, update, and merge pull requests, along with streams of associated commits and files. Operates on GitHub pull request data structures, including new_pull, update_pull, and merge types. Enables programmatic interaction with specific pull requests by repository and number, such as checking merge status or fetching commit history.",
      "description_length": 368,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Issue",
      "description": "Provides functions to retrieve, create, and manage GitHub issues and their associated data, including comments, labels, and events. Operates on issue identifiers, repository names, user accounts, and GitHub-specific types like `Github_t.issue`, `Github_t.issue_comment`, and `Github_t.label`. Enables filtering issues by creator, assignee, labels, and state, and supports fetching detailed information about specific issues or repositories.",
      "description_length": 440,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Label",
      "description": "Provides functions to retrieve, create, update, and delete GitHub repository labels. Operates on GitHub label data structures and repository identifiers. Enables programmatic management of issue labels in specific repositories.",
      "description_length": 227,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Collaborator",
      "description": "Provides functions to retrieve, check, add, and remove GitHub repository collaborators. Operates on strings for user, repo, and collaborator names, and uses a token for authentication. Enables programmatic management of access control for specific repositories.",
      "description_length": 261,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Milestone",
      "description": "Provides functions to retrieve, create, update, and delete GitHub milestones, along with accessing associated labels. Operates on repository-specific milestones identified by user, repo, and milestone number, using streams for listing and responses for individual operations. Enables programmatic management of milestone data and label associations within a repository.",
      "description_length": 369,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Release",
      "description": "Provides functions to retrieve, create, update, and delete GitHub releases and their assets, including fetching by ID, tag name, or latest release. Operates on GitHub release data structures such as `Github_t.release`, `Github_t.new_release`, `Github_t.update_release`, and `Github_t.release_asset`. Enables automation of release management tasks like publishing new versions, managing release assets, and cleaning up old releases.",
      "description_length": 431,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Deploy_key",
      "description": "Provides functions to retrieve, create, and delete deploy keys for specific GitHub repositories. Operates on types such as `Github_t.deploy_key`, `Github_t.new_deploy_key`, and `Token.t` to interact with the GitHub API. Used to manage SSH keys for repository access control and automation workflows.",
      "description_length": 299,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Gist",
      "description": "Provides functions to retrieve, create, update, and manage GitHub gists, including user-specific, public, and starred gists, along with operations on gist commits, stars, forks, and deletions. Works with stream and response types for gists, gist commits, and gist forks. Enables fetching a user's gists since a specific timestamp, creating new gists from structured data, and managing gist visibility and history.",
      "description_length": 413,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Emoji",
      "description": "Provides functions to retrieve GitHub's list of emojis, including a method to fetch all available emojis for use in GitHub-flavored markdown. Operates with token authentication and returns structured emoji data. Used to dynamically populate emoji suggestions or render emojis in user-generated content.",
      "description_length": 302,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Check",
      "description": "Provides functions to interact with GitHub's check API, including creating, updating, and retrieving check runs and suites, listing annotations, and managing check suite preferences. Operates on data types such as check_run, check_runs_list, check_suite, and check_suite_list. Used to automate CI/CD pipeline status tracking and inspection, such as fetching results of a specific check run or retriggering a check suite after a code change.",
      "description_length": 440,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Search",
      "description": "Provides functions to search for GitHub repositories and issues using specified qualifiers and keywords, with options to sort and order results. Works with custom types like `Token.t`, `Filter.repo_sort`, `Filter.direction`, `Filter.qualifier list`, and `string list`. Returns streams of search results for direct integration into data processing pipelines.",
      "description_length": 357,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Git_obj",
      "description": "Provides functions to convert Git object types to strings and split Git reference paths into directory and name components. Works with Git object types and string representations of references. Used to process Git object metadata and parse reference names for repository navigation.",
      "description_length": 282,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "github-unix",
      "description": "Provides functions to interact with GitHub's API, including fetching repository data, listing commits, and handling authentication tokens. Works with data types defined in `lib/github.atd`, such as repositories, commits, and user information. Used to build tools for querying GitHub metadata and managing access tokens in secure environments.",
      "description_length": 342,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github",
      "description": "Provides a comprehensive interface for interacting with the GitHub API, offering data types such as tokens, versioned resources, streams, and structured payloads. It supports HTTP operations, authentication, rate limiting, pagination, and specialized data handling for issues, repositories, users, and more. Functions include fetching user data, managing pull requests, handling webhooks, analyzing commit activity, and generating OAuth URLs. Examples include retrieving a user's repositories, processing paginated issue lists, and managing repository collaborators.",
      "description_length": 566,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github_cookie_jar",
      "description": "Provides functions to initialize, save, delete, and retrieve GitHub authentication credentials from a persistent storage. Operates on a custom type `t` that encapsulates the cookie jar state and works with strings and `Github_t.auth` records. Used to manage multiple GitHub accounts within a single application session, ensuring credentials are stored and accessed securely.",
      "description_length": 374,
      "index": 34,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 35,
    "meaningful_modules": 35,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 566,
    "min_description_length": 227,
    "avg_description_length": 355.77142857142854,
    "embedding_file_size_mb": 0.12754154205322266
  }
}