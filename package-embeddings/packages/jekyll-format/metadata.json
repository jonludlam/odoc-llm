{
  "package": "jekyll-format",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:44.047434",
  "modules": [
    {
      "module_path": "Jekyll_liquid.Tags",
      "description": "Provides functions to construct, format, and parse highlight blocks from tagged content. Works with strings and a custom highlight type containing language, body, and line number information. Used to process code blocks by extracting and validating syntax highlighting tags.",
      "description_length": 274,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "jekyll-format",
      "description": "Parses Jekyll blog posts from markdown files, extracting front matter and content into structured records. Works with strings, files, and custom types representing post metadata and body text. Enables programmatic access to blog data for generating summaries, listings, or transforming content.",
      "description_length": 294,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jekyll_tags",
      "description": "Extracts and manipulates Jekyll-style tags and liquid tags from strings, identifying start and stop boundaries, trimming whitespace, and substituting content. Operates on strings and string subviews, supporting both single and multiple tag extraction. Enables processing of tag bodies with custom functions, including conditional skipping and argument parsing for structured transformations.",
      "description_length": 391,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jekyll_format",
      "description": "The module provides functions for parsing and manipulating Jekyll blog posts, focusing on extracting and formatting YAML front matter fields, processing post content, and generating slugs. It operates on structured data like YAML metadata, date strings, and text bodies, with utilities for date parsing from filenames and pretty-printing metadata. Use cases include automating post metadata extraction, ensuring consistent date formatting, and preparing content for static site generation.",
      "description_length": 489,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jekyll_liquid",
      "description": "parses and processes code blocks with syntax highlighting, extracting language, body, and line number information from tagged content. It supports constructing and formatting highlight blocks using a custom type and string manipulation. Operations include validating tags, isolating code segments, and preparing content for rendering. Example uses include extracting Ruby code blocks and applying syntax highlighting rules during template processing.",
      "description_length": 450,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jekyll_post",
      "description": "Parses blog post content from a string, extracting metadata and body, with optional filename tracking. Works with a structured record type containing date, title, and content fields. Used to process and sort Jekyll posts by date and title for generating chronological blog listings.",
      "description_length": 282,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 489,
    "min_description_length": 274,
    "avg_description_length": 363.3333333333333,
    "embedding_file_size_mb": 0.022231101989746094
  }
}