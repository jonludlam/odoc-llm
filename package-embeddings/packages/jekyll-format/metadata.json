{
  "package": "jekyll-format",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:25.812751",
  "modules": [
    {
      "module_path": "Jekyll_liquid.Tags",
      "library": "jekyll-format",
      "description": "This module parses and represents Liquid template tags for code highlighting in Jekyll. It defines a `highlight` type with fields for language, code body, and line numbers, and includes functions to construct, format, and parse `{% highlight %}` and `{% endhighlight %}` tags from raw string input. It is used to extract and structure code blocks during template processing.",
      "description_length": 374,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jekyll_post",
      "library": "jekyll-format",
      "description": "This module parses and manipulates Jekyll blog posts, extracting structured data such as title, date, slug, and body content. It works with custom types like `t` that include fields for post metadata and body text, along with result-aware parsing functions. Use it to programmatically generate, transform, or analyze blog posts in OCaml before rendering them into static sites.",
      "description_length": 377,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jekyll_liquid",
      "library": "jekyll-format",
      "description": "This module processes Jekyll Liquid templates with a focus on code highlighting, parsing `{% highlight %}` tags into structured data and applying transformations. It defines a `highlight` type representing code blocks with language, content, and line number settings, and supports operations like `highlight_exn` for custom code rendering and `highlight_markdown_code` for Markdown output. The child module handles low-level parsing and construction of highlight tags, enabling precise extraction and formatting of code blocks from template strings. Together, they allow converting Liquid templates containing syntax-highlighted code into plain Markdown for static site generation.",
      "description_length": 681,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jekyll_format",
      "library": "jekyll-format",
      "description": "This module provides functionality for parsing YAML front matter, extracting structured metadata (titles, dates, slugs), and converting date strings into time values, alongside formatting blog posts for output. It operates on string content, file paths, and internal representations of posts to support use cases like static site generation, metadata-driven content organization, and consistent serialization of posts with properly formatted headers and body text.",
      "description_length": 464,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jekyll_tags",
      "library": "jekyll-format",
      "description": "This module provides functions to extract and transform Jekyll-style delimited tags, such as `{% ... %}`, from strings. It supports precise tag extraction with whitespace handling, substitution of tag contents, and mapping over tag bodies with custom logic. Concrete use cases include processing Liquid templates, rewriting embedded directives, and parsing structured annotations in text documents.",
      "description_length": 398,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 681,
    "min_description_length": 374,
    "avg_description_length": 458.8,
    "embedding_file_size_mb": 0.018606185913085938
  }
}