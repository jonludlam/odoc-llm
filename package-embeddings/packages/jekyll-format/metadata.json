{
  "package": "jekyll-format",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:57:54.930320",
  "modules": [
    {
      "module_path": "Jekyll_liquid.Tags",
      "library": "jekyll-format",
      "description": "This module parses and represents Liquid template tags for code highlighting in Jekyll. It defines a `highlight` type with optional language, code body, and line numbers, and provides functions to construct, format, and parse `{% highlight %}` and `{% endhighlight %}` tags from raw string input. It is used to extract and structure code blocks during template processing for eventual rendering with syntax highlighting.",
      "description_length": 420,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jekyll_tags",
      "library": "jekyll-format",
      "description": "This module parses and transforms Jekyll-style liquid tags in text, providing precise extraction and substitution of tag content. It operates on strings and Astring.String.sub values, handling tag delimiters like `{% ... %}` and trimming whitespace around tag contents. Concrete use cases include rewriting liquid tags in Markdown files, extracting tag parameters for processing, and selectively replacing tag bodies based on custom logic.",
      "description_length": 439,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jekyll_post",
      "library": "jekyll-format",
      "description": "This module parses and manipulates Jekyll blog posts, handling the extraction of metadata and body content from strings. It works with structured data types like `t`, which includes fields such as title, date, slug, and body, along with custom metadata. Use cases include programmatically generating, modifying, or analyzing blog posts in OCaml before rendering them into static HTML.",
      "description_length": 384,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jekyll_format",
      "library": "jekyll-format",
      "description": "This module offers functions to parse and extract YAML front matter, metadata (title, date, slug), and body content from Jekyll blog posts. It handles both string and file inputs, providing utilities like slug generation, date parsing, and key-based field access, with fallbacks to filename-derived values. Use cases include processing posts for static site generation, metadata-driven content organization, and date formatting for chronological listings.",
      "description_length": 455,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jekyll_liquid",
      "library": "jekyll-format",
      "description": "This module processes Liquid template tags for code highlighting in Jekyll, specifically handling `{% highlight %}` and `{% endhighlight %}` blocks. It parses raw string input into structured `highlight` values containing optional language and code body data, and supports substitution via custom formatting functions. It is used to transform Liquid templates into Markdown with syntax-highlighted code blocks during site generation.",
      "description_length": 433,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 455,
    "min_description_length": 384,
    "avg_description_length": 426.2,
    "embedding_file_size_mb": 0.07291507720947266
  }
}