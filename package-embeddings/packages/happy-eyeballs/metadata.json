{
  "package": "happy-eyeballs",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:44:42.586256",
  "modules": [
    {
      "module_path": "Happy_eyeballs.Waiter_map",
      "library": "happy-eyeballs",
      "description": "This module implements an ordered finite map structure using `Happy_eyeballs.id` as keys, offering atomic registration and removal of waiter entries alongside ordered iteration. It supports efficient lookups, conditional searches, and bulk transformations like merging, filtering, and sequence conversions while preserving key ordering via `Ord.compare`. Typical use cases include managing asynchronous waiter states with atomic updates, ordered traversal of connections, and synchronizing collections of waiters from event streams or network operations.",
      "description_length": 554,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Happy_eyeballs",
      "library": "happy-eyeballs",
      "description": "This module implements the Happy Eyeballs algorithm for concurrent DNS resolution and connection establishment. It works with domain names, IP addresses, and connection identifiers to manage parallel attempts across IPv4, IPv6, and multiple ports. Concrete use cases include optimizing client connection startup by racing DNS lookups and TCP connections, handling fallback between IPv4 and IPv6, and managing connection timeouts and retries in network clients.",
      "description_length": 460,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 554,
    "min_description_length": 460,
    "avg_description_length": 507.0,
    "embedding_file_size_mb": 0.029392242431640625
  }
}