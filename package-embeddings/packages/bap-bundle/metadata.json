{
  "package": "bap-bundle",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:01:12.197772",
  "modules": [
    {
      "module_path": "Bap_bundle.Std.Manifest.Fields.Direct",
      "library": "bap-bundle",
      "description": "This module provides direct access to individual fields of a manifest structure, enabling operations like iteration, mapping, folding, and validation over specific manifest properties such as name, version, description, and dependencies. It works directly with the `Bap_bundle.Std.Manifest.t` type, handling scalar values like strings and floats, optional fields like URL or license, and collections such as string lists for tags or requirements. Concrete use cases include validating manifest metadata, transforming field values during package processing, and extracting specific information for logging or external output.",
      "description_length": 624,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bundle.Std.Bundle.Builder",
      "library": "bap-bundle",
      "description": "This module provides functions to incrementally construct a program bundle by adding files, raw data, and manifests. It works with builder objects, URIs, and string data to assemble bundle contents without copying until finalized. Concrete use cases include building custom program bundles from multiple sources, modifying manifests during construction, and streaming large files into a bundle efficiently.",
      "description_length": 406,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bundle.Std.Manifest.Fields",
      "library": "bap-bundle",
      "description": "This module enables structured access and transformation of program metadata fields within manifest structures, supporting operations like field retrieval, conditional checks, and polymorphic value mapping. It works with typed manifest fields (strings, floats, optional values, string lists) using `Fieldslib.Field.t` to handle properties such as name, version, dependencies, and custom metadata. It is particularly useful for tasks like validating program manifests, normalizing metadata, or extracting dependency graphs during software analysis or package management workflows.",
      "description_length": 579,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bundle.Std.Manifest",
      "library": "bap-bundle",
      "description": "This module enables creation, serialization, and structured access to program metadata manifests containing fields like name, version, dependencies, and custom tags. It operates on a record type with typed accessors and supports transformations via the Fields module, handling binary serialization with `Bin_prot` and parsing from strings or S-expressions. Typical use cases include software packaging, dependency tracking, and runtime configuration management where structured program metadata needs programmatic manipulation or persistent storage.",
      "description_length": 549,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bundle.Std.Bundle",
      "library": "bap-bundle",
      "description": "This module manages program bundles, which are collections of files and metadata associated with a program. It supports operations like creating or opening bundles, inserting and extracting files or raw data, listing contents, and modifying manifests. Concrete use cases include assembling firmware images from multiple sources, extracting embedded resources from binaries, and modifying program metadata during analysis or packaging workflows.",
      "description_length": 444,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bundle.Std",
      "library": "bap-bundle",
      "description": "Handles program bundles and associated metadata manifests. Provides structured access to bundle contents, including creating, modifying, and extracting files and metadata. Useful for firmware assembly, binary analysis, and runtime configuration workflows.",
      "description_length": 255,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_bundle",
      "library": "bap-bundle",
      "description": "Handles program bundles and metadata manifests with operations to create, modify, and extract files and metadata. Works with binary data, configuration files, and structured manifests. Used in firmware assembly, binary analysis pipelines, and runtime configuration management.",
      "description_length": 276,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 624,
    "min_description_length": 255,
    "avg_description_length": 447.57142857142856,
    "embedding_file_size_mb": 0.10189437866210938
  }
}