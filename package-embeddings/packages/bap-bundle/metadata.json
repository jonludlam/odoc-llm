{
  "package": "bap-bundle",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:44.932314",
  "modules": [
    {
      "module_path": "Bap_bundle.Std.Manifest.Fields.Direct",
      "library": "bap-bundle",
      "description": "This module provides operations to access and manipulate individual fields of a manifest structure, such as name, version, description, and dependencies. It supports data types including strings, floats, lists, and optional values, reflecting the structured metadata of a program. Use cases include validating manifest contents, transforming field values, and iterating over or collecting manifest properties for serialization or analysis.",
      "description_length": 439,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_bundle.Std.Manifest.Fields",
      "library": "bap-bundle",
      "description": "This module enables structured access and manipulation of program metadata fields, including name, version, dependencies, and annotations, with support for transformations, queries, and iteration over optional or list-typed values. It provides direct operations for mapping, folding, and predicate checks on manifest structures, while its child module offers fine-grained access to individual fields and their data types such as strings, floats, and lists. Examples include validating dependency lists, extracting and modifying version numbers, and serializing metadata properties. Together, they support inspection, transformation, and analysis of program attributes in a type-safe and composable way.",
      "description_length": 702,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_bundle.Std.Bundle.Builder",
      "library": "bap-bundle",
      "description": "This module provides functions to incrementally construct a program bundle by adding files, raw data, and manifests. It supports building complex bundles without copying data until the final flush operation writes the bundle to a file. Concrete use cases include assembling program analysis data for later processing or distribution.",
      "description_length": 333,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bundle.Std.Bundle",
      "library": "bap-bundle",
      "description": "This module manages program bundles, which are structured collections of files and data associated with a program. It supports creating, modifying, and querying bundles through operations like inserting and extracting files, listing paths, and manipulating manifests, with support for incremental construction and deferred writing. The child module enables building complex bundles incrementally, adding files or raw data without immediate disk writes, finalizing with a flush operation. Examples include packaging program resources, dynamically updating bundled assets, or assembling analysis data for later processing.",
      "description_length": 620,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_bundle.Std.Manifest",
      "library": "bap-bundle",
      "description": "This module manages program metadata through a structured manifest type, supporting creation, access, and transformation of fields like name, version, dependencies, and entry point. It enables type-safe queries, folds, and mappings over optional and list-valued properties, with utilities for validation and analysis. Serialization to Bin_prot and S-expressions allows persistent storage and exchange in binary or textual formats. Submodules provide fine-grained access to individual fields and typed operations on strings, floats, and lists, enabling tasks such as dependency validation and version manipulation.",
      "description_length": 613,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_bundle.Std",
      "library": "bap-bundle",
      "description": "This module orchestrates application deployment by managing program bundles and their associated metadata. It provides core types like `bundle` and `manifest` to structure resources and metadata, supporting operations to create, modify, and query bundles incrementally, with deferred writes, and to manipulate manifest fields such as name, version, and dependencies in a type-safe way. You can build a bundle by adding files or raw data step-by-step and finalize it later, or parse and update a manifest, validate dependencies, or serialize metadata to binary or S-expression formats. Submodules allow fine-grained access to manifest fields and typed operations on strings, floats, and lists, enabling tasks like version comparison or dependency resolution.",
      "description_length": 757,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bap_bundle",
      "library": "bap-bundle",
      "description": "This module organizes application deployment through structured program bundles and metadata manifests. It offers core types `bundle` and `manifest` with operations to incrementally build, modify, and query resources and metadata, supporting deferred writes and type-safe manipulation of fields like name, version, and dependencies. You can add files or data to a bundle step-by-step, parse and update manifests, validate dependencies, or serialize metadata to binary or S-expression formats. Submodules enable precise access to manifest fields and typed operations for tasks like version comparison or dependency resolution.",
      "description_length": 625,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 757,
    "min_description_length": 333,
    "avg_description_length": 584.1428571428571,
    "embedding_file_size_mb": 0.025854110717773438
  }
}