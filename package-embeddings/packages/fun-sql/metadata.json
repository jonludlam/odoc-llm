{
  "package": "fun-sql",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:23.184997",
  "modules": [
    {
      "module_path": "Fun_sql.S",
      "library": "fun-sql",
      "description": "This module includes operations for executing SQL queries, managing database migrations, and handling transactions. It works with types like `db` for database connections, `arg` for query parameters, and result sequences via `ret`. Concrete use cases include safely running parameterized SQL with `sql`, applying versioned schema updates via `migrate`, and ensuring atomic operations with `transaction`. The helpers `only` and `optional` extract single values from query results, enforcing strict expectations on result cardinality.",
      "description_length": 532,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fun_sql.Sql",
      "library": "fun-sql",
      "description": "This module runs SQL queries and scripts on database connections, binding arguments and decoding result rows into typed OCaml values. It supports operations like preparing statements, executing scripts, and mapping result columns to types such as integers, floats, strings, and optional values. Concrete use cases include querying a database with parameterized inputs and processing result sets as sequences of structured data.",
      "description_length": 427,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fun_sql.Make",
      "library": "fun-sql",
      "description": "This module constructs SQL queries with placeholders, applies migration scripts from a directory to a database, and runs operations within transactions that commit or roll back based on success or failure. It works with database connections and SQL arguments, handling result sequences by extracting single values or optional values. Use it to safely build and execute SQL statements, manage schema migrations, and ensure data consistency during critical operations.",
      "description_length": 466,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fun_sql.Sql-Arg",
      "library": "fun-sql",
      "description": "This module defines functions to convert various data types into a unified `arg` type for representing SQL query parameters. It supports direct conversion of primitives like strings, booleans, integers, and floats, as well as optional values via the `opt` combinator. These conversions are used to safely embed typed values into SQL queries when working with database backends like SQLite or PostgreSQL.",
      "description_length": 403,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fun_sql",
      "library": "fun-sql",
      "description": "This module provides a unified interface for interacting with SQL databases, offering core functionality for query execution, transaction management, and result parsing. It defines key types like `db` for connections, `arg` for typed SQL parameters, and `ret` for handling result sequences, enabling portable code across SQLite and PostgreSQL. Operations include safely running parameterized queries with `sql`, managing schema migrations via `migrate`, and enforcing atomic transactions with `transaction`. Helpers like `only` and `optional` extract single values from results, while utilities in child modules support mapping rows to OCaml types and converting values into SQL parameters using `opt` for optional fields.",
      "description_length": 722,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 722,
    "min_description_length": 403,
    "avg_description_length": 510.0,
    "embedding_file_size_mb": 0.018607139587402344
  }
}