{
  "package": "sel",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:54:25.438148",
  "modules": [
    {
      "module_path": "Sel.Todo",
      "library": "sel",
      "description": "This module manages a collection of events to be processed, maintaining their order and priority. It supports adding events to an existing set while preserving the order of events with the same priority, checking if the set is empty, and inspecting the size of the set for debugging. Use this when organizing and managing a dynamic list of events in a priority-based system, such as scheduling tasks or handling asynchronous I/O operations.",
      "description_length": 440,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sel.On",
      "library": "sel",
      "description": "This module defines event sources for waiting on various kinds of I/O, process state, and queue activity. It supports operations like reading lines, bytes, or HTTP content-length encoded data from file descriptors, waiting for process termination, and synchronizing with queue state changes. Concrete use cases include handling network input, coordinating worker pools with task queues, and waiting for asynchronous process results.",
      "description_length": 432,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sel.Event",
      "library": "sel",
      "description": "Handles event manipulation and cancellation within an event loop. Works with event values and cancellation handles to manage execution flow. Maps event values, prints events for debugging, and cancels pending events using their associated handles. Useful for managing dynamic event lifecycles in real-time systems like network reactors or GUI handlers.",
      "description_length": 352,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sel.Promise",
      "library": "sel",
      "description": "Handles asynchronous synchronization in single-producer, single-consumer scenarios using promises. It provides creation, resolution, and state inspection operations on `t` and `handler` types. Useful for coordinating event-driven workflows where one thread produces a result and another consumes it.",
      "description_length": 299,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sel",
      "library": "sel",
      "description": "This module implements a priority-driven event loop for handling asynchronous I/O, process state changes, and time-bound computations. It supports event values, promises, and todo lists to manage dynamic event lifecycles, with concrete use cases in network reactors, task schedulers, and interactive command-line tools. Key operations include event mapping, cancellation, prioritized event waiting, and time-limited event polling.",
      "description_length": 430,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 440,
    "min_description_length": 299,
    "avg_description_length": 390.6,
    "embedding_file_size_mb": 0.07285404205322266
  }
}