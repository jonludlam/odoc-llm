{
  "package": "xtmpl",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 22,
  "creation_timestamp": "2025-07-15T23:10:56.374532",
  "modules": [
    {
      "module_path": "Xtmpl.Xml.P.Attributes",
      "library": "xtmpl",
      "description": "This module manages ordered attribute maps for XML nodes, supporting key-value operations like search, transformation, and filtering with strict ordering guarantees. It works with maps from XML-qualified names to single or list-valued data, enabling use cases like merging attribute sets from different sources or processing ordered metadata in XML documents. Functions for sequence conversion and ordered iteration allow precise control over attribute serialization and traversal order.",
      "description_length": 487,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xtmpl.Rewrite.P",
      "library": "xtmpl",
      "description": "Implements comparison and serialization operations for XML template data structures, including attribute values and element data. Provides functions to compare and pretty-print attribute keys, attribute values, and data structures used in XML tree rewriting. Used to support templating logic that requires value comparison, default initialization, and formatted output during XML tree transformations.",
      "description_length": 401,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Types.P",
      "library": "xtmpl",
      "description": "This module defines core types and operations for representing and manipulating XML document components, including attributes, attribute values, and raw data. It provides comparison functions for keys and values, default constructors for common XML elements, and formatting utilities for pretty-printing. Concrete use cases include building and serializing XML trees with properly escaped attributes and data content.",
      "description_length": 417,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Types.Make",
      "library": "xtmpl",
      "description": "This module provides operations for constructing, manipulating, and serializing XML document structures, including nodes, attributes, comments, CDATA sections, and prolog elements like processing instructions or doctype declarations. It works with parameterized XML data structures such as trees, attribute maps, and document type definitions, leveraging a module-specific representation for attributes and location metadata. Key use cases include building structured XML/HTML documents, modifying node attributes through lookup or transformation, pretty-printing for readability, and converting hierarchical markup data to string-based formats with precise text content extraction or doctype handling.",
      "description_length": 702,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xtmpl.Xml.P",
      "library": "xtmpl",
      "description": "This module handles XML node attributes and values with support for string-based data and optional location tracking, allowing creation and formatting of attributes with defaults and version handling. It provides core operations for constructing and manipulating attribute lists with source position metadata, while its child module extends this with ordered attribute maps that enforce strict key-value ordering for tasks like merging and sequential traversal. Together, they enable precise attribute management, from basic value formatting to complex ordered transformations and structured data handling. Examples include building XML attributes with debug locations, merging attribute sets from multiple sources, and serializing attributes in a specific order.",
      "description_length": 763,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xtmpl.Types.S",
      "library": "xtmpl",
      "description": "This module enables the construction and manipulation of XML and HTML abstract syntax trees through operations like creating elements, attributes, and document structures (e.g., prologs, CDATA sections, processing instructions). It works with custom types such as `node`, `tree`, and `doc`, providing utilities to query, modify, and fold over attribute maps, extract text content, and serialize structured data into string representations. Specific use cases include generating dynamic XML/HTML documents, transforming templates, and processing document metadata like doctype declarations or XML prologs.",
      "description_length": 604,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Types.Make_map",
      "library": "xtmpl",
      "description": "This module provides a `mapper` function that transforms XML trees and documents from one type to another using a provided mapping function. It operates on XML structures defined by the `X1` and `X2` modules, including their names, attributes, data, and document types. A concrete use case is converting between different XML representations, such as mapping an XML AST with string-based attributes to one with typed attributes.",
      "description_length": 428,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Xml.SSet",
      "library": "xtmpl",
      "description": "This module implements an immutable set data structure for strings, supporting efficient membership checks, ordered traversal, and set algebra operations like union and intersection. It leverages a total ordering for elements to enable ordered iteration, sequence conversions, and transformations through functions like `map` and `filter`. Typical applications include managing XML attribute values, processing ordered string collections, and building pipeline workflows that require set-based data manipulation.",
      "description_length": 512,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Xml.SMap",
      "library": "xtmpl",
      "description": "This module implements ordered maps for XML tree processing, supporting key-value operations like insertion, deletion, list aggregation, and merging of polymorphic value maps. It works with string-keyed maps that maintain ordered bindings, enabling efficient traversal, transformation, and sequence-based construction from key-value pairs. Typical applications include managing XML node attributes, combining hierarchical data with ordered keys, and handling list-valued properties during XML tree manipulation.",
      "description_length": 511,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Xml.Name_set",
      "library": "xtmpl",
      "description": "This module implements a set structure for XML name elements, supporting operations like union, intersection, and ordered traversal while ensuring uniqueness and sorted ordering via a comparator. It provides transformations between sets and sequences or lists, enabling efficient processing of XML identifiers in tasks like tracking unique tags, comparing document structures, or generating sorted name lists for analysis.",
      "description_length": 422,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Types.P-Attributes",
      "library": "xtmpl",
      "description": "This module provides a functional interface for managing ordered key-value maps with support for construction, modification, and traversal operations. It works with immutable attribute maps (represented as `Attributes.t`) where keys maintain a fixed ordering, enabling efficient queries, transformations, and bulk updates from sequences. Typical use cases include XML attribute manipulation, merging hierarchical data, and processing ordered metadata in document workflows.",
      "description_length": 473,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xtmpl.Xml.Name",
      "library": "xtmpl",
      "description": "This module represents XML names as pairs of namespace and local name strings. It provides comparison operations for ordering and equality checks between XML names. Useful for managing and comparing element and attribute identifiers in XML processing tasks.",
      "description_length": 257,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Xml.Name_map",
      "library": "xtmpl",
      "description": "This module implements a specialized ordered map structure for XML name keys, enabling efficient key-based operations like insertion, lookup, and combination while preserving traversal order. It works with key-value pairs where keys are XML names (`Xtmpl.Xml.Name.t`) and values can be arbitrary data, supporting transformations, filtering, and sequence-based construction/modification. Typical use cases include managing XML element attributes, namespace-aware data associations, or ordered key-value collections in XML processing pipelines.",
      "description_length": 542,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Rewrite.X",
      "library": "xtmpl",
      "description": "This module provides operations for constructing XML tree nodes and documents, including elements, attributes, and processing instructions, as well as manipulating attributes and subtrees. It supports comparing XML structures, serializing documents to strings, and extracting text content or metadata like doctype declarations, with use cases in dynamic XML generation and transformation workflows.",
      "description_length": 398,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Types",
      "library": "xtmpl",
      "description": "This module combines XML document construction with source metadata handling, enabling manipulation of structured markup and precise error reporting. It defines core data types like `cdata`, `loc`, and `comment`, and uses module functors such as `Make` to build customizable XML representations. Operations include merging XML fragments with location tracking, pretty-printing structured documents, and converting between typed XML forms using mappers. Submodules support attribute mapping, node transformation, and document serialization, enabling tasks like HTML generation, XML metadata processing, and error-aware source manipulation.",
      "description_length": 638,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Html_ents",
      "library": "xtmpl",
      "description": "This module defines a list of HTML entities as pairs of entity names and their corresponding UTF-8 code points. It provides direct access to the full set of standard HTML entities for encoding and decoding HTML content. Use this module when converting between HTML entity names and their numeric representations during HTML parsing or generation.",
      "description_length": 346,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Xhtml",
      "library": "xtmpl",
      "description": "This module provides functions to construct and manipulate XHTML elements with dynamic attributes, supporting both structural components like headings, paragraphs, and semantic containers, as well as inline formatting tags and embedded content. It operates on specialized types such as `elt` and `Xtmpl.Rewrite.tree` to enable flexible attribute handling and nested node composition, ideal for generating dynamic web content, forms, tables, and interactive elements like media players or data visualizations.",
      "description_length": 508,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xtmpl.Xml",
      "library": "xtmpl",
      "description": "This module provides core XML tree functionality with support for structured node creation, attribute handling, and ordered data manipulation. It includes operations for constructing and formatting XML elements with attributes, managing namespaces via name comparisons, and handling ordered maps and sets for precise key-value and collection processing. Examples include building XML nodes with ordered attributes, merging attribute sets from multiple sources, tracking unique XML tags, and transforming hierarchical data using ordered maps. Submodules enhance this with specialized structures for string sets, name-aware keys, and ordered traversal in XML processing workflows.",
      "description_length": 678,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xtmpl.Rewrite",
      "library": "xtmpl",
      "description": "This module transforms XML trees using callback-driven rewriting rules, supporting bidirectional conversion between XML and internal tree formats. It provides utilities for attribute management, CDATA handling, and error-resilient template serialization, operating on XML nodes, attributes, documents, and processing instructions through typed constructors and environment-driven transformations. The Data submodule enables comparison and formatted output of XML template structures, while the Node submodule supports node construction, attribute manipulation, and document serialization, enabling tasks like dynamic XML generation, template substitution, and data-binding workflows. Examples include merging XML fragments, extracting metadata, and converting between string and tree representations of XML.",
      "description_length": 807,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Misc",
      "library": "xtmpl",
      "description": "This module handles string manipulation, file I/O, and character processing. It provides functions to read and write files as strings, split and strip strings with custom delimiters, escape HTML entities, and apply lexers or pretty-printers to generate transformed string output. Use cases include text preprocessing, HTML sanitization, and embedding lexing or formatting logic directly into string transformations.",
      "description_length": 415,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xtmpl.Log",
      "library": "xtmpl",
      "description": "This module provides functions for logging messages at various severity levels, including debug, info, warning, error, and application-specific logs. It supports logging formatted messages and handling result values by logging errors and applying custom formatting or fallback actions. Concrete use cases include tracking execution flow, reporting errors with context, and emitting structured logs for monitoring and debugging.",
      "description_length": 427,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xtmpl",
      "library": "xtmpl",
      "description": "This module combines XML and XHTML construction with metadata handling, string manipulation, and logging to support structured document processing and transformation. Key data types include `cdata`, `loc`, `elt`, and XML trees with dynamic attributes, operated on through mappers, functors, and serializers for tasks like HTML generation, metadata extraction, and error-aware source manipulation. It enables merging XML fragments with location tracking, converting between HTML entities and UTF-8 code points, applying callback-driven transformations to XML trees, and sanitizing or formatting string content with custom lexers and pretty-printers. Specific examples include generating dynamic web forms, transforming structured XML data using ordered maps, and logging processing steps or errors during document manipulation.",
      "description_length": 826,
      "index": 21,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 22,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9565217391304348
  },
  "statistics": {
    "max_description_length": 826,
    "min_description_length": 257,
    "avg_description_length": 525.5454545454545,
    "embedding_file_size_mb": 0.08038139343261719
  }
}