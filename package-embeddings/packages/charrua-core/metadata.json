{
  "package": "charrua-core",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-06-18T16:30:56.772396",
  "modules": [
    {
      "module_path": "Dhcp_server.Config",
      "description": "Converts between host data and S-expressions, and serializes/deserializes configuration data. Works with IP addresses, MAC addresses, and custom host structures. Parses DHCP configuration files to generate server settings based on specified network and host parameters.",
      "description_length": 269,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dhcp_server.Lease",
      "description": "The module handles DHCP lease lifecycle management, including creating, extending, and checking expiration of lease records. It works with structured data like MAC addresses, IP addresses, durations, and timestamps, alongside a defined `database` type for storage. Use cases include dynamic IP allocation, renewal tracking, and ensuring timely lease expiration in network management systems.",
      "description_length": 391,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dhcp_server.Input",
      "description": "Checks if a DHCP packet is intended for the local system using configuration and packet headers. Processes incoming packets to generate a reply or event, using a lease database and current time in seconds. Handles specific DHCP options and MAC addresses for test scenarios.",
      "description_length": 273,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "charrua-core",
      "description": "Handles parsing and generation of DHCP wire protocol messages, including options and message types. Works with structured data representing DHCP requests, responses, and client state information. Used to build and manage DHCP servers and clients that communicate over network interfaces.",
      "description_length": 287,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dhcp_parser",
      "description": "Parses DHCP protocol messages from a lexing buffer, converting them into an abstract syntax tree (AST) structure. It processes token streams generated by a lexer to construct a typed representation of DHCP options and message fields. This enables detailed analysis and manipulation of DHCP packet data during network configuration tasks.",
      "description_length": 337,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dhcp_wire",
      "description": "The module provides conversion and parsing functions for DHCP protocol elements, including operations, message types, option codes, and client identifiers, operating on data structures like DHCP option lists, Cstruct.t, and symbolic representations. It extracts network configuration parameters such as IP addresses, DNS servers, lease times, and vendor-specific data from DHCP packets, while handling specialized cases like client IDs, flags, and PXE-related options. Use cases include validating DHCP packet fields, serializing/deserializing protocol data, and retrieving structured network settings from raw option lists.",
      "description_length": 624,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ast",
      "description": "Provides functions to construct, inspect, and manipulate network-related data structures, including host and subnet configurations. Works with record types representing network entities and their properties. Used to validate IP address ranges and generate configuration files for network deployment.",
      "description_length": 299,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dhcp_server",
      "description": "handles packet inspection, configuration parsing, and lease management for DHCP operations. it processes IP and MAC addresses, manages lease databases with timestamps and durations, and converts host data to and from S-expressions. it can validate packets for local processing, generate server responses, and manage dynamic IP allocation. examples include parsing configuration files, extending lease durations, and checking packet validity against defined network settings.",
      "description_length": 474,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Util",
      "description": "Provides functions to transform and validate list elements, such as mapping with option results and filtering out None values. Handles string operations like checking for null strings and extending them under length constraints. Includes utilities for conditional list construction and error handling with options and results.",
      "description_length": 326,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dhcp_lexer",
      "description": "Processes DHCP configuration text by tokenizing input, handling comments, and parsing strings. Operates on lexing buffers and strings, returning parsed tokens or void for comment processing. Used to extract and classify elements like options, addresses, and keywords from DHCP configuration files.",
      "description_length": 297,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 624,
    "min_description_length": 269,
    "avg_description_length": 357.7,
    "embedding_file_size_mb": 0.03674888610839844
  }
}