{
  "package": "grpc-async",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:52.957875",
  "modules": [
    {
      "module_path": "Grpc_async.Server.Service",
      "library": "grpc-async",
      "description": "This module manages gRPC service definitions and request routing. It provides operations to create a service, register RPC methods under specific names, and route incoming HTTP/2 requests to the appropriate RPC handler. It works directly with `Grpc_async.Server.Rpc.t` and `H2.Reqd.t` to enable concrete use cases like implementing a gRPC server that responds to specific method calls over HTTP/2.",
      "description_length": 397,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_async.Client.Rpc",
      "library": "grpc-async",
      "description": "This module implements gRPC client RPC handlers for different streaming patterns. It works with `Async.Pipe.Reader` and `Writer` for streaming data, and uses `Async.Deferred` for asynchronous result handling. Concrete use cases include sending unary requests with optional responses, handling server-sent streams, managing client-sent streams, and bidirectional streaming communication with a gRPC server.",
      "description_length": 405,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_async.Server.Rpc",
      "library": "grpc-async",
      "description": "This module defines and handles the four core gRPC request types\u2014unary, client streaming, server streaming, and bidirectional streaming\u2014by processing HTTP/2 requests and managing data exchange through strings and async pipes. It works directly with `H2.Reqd.t` for handling HTTP/2 streams and uses `Async.Deferred.t` for asynchronous response handling. Concrete use cases include implementing gRPC service methods that receive and send serialized messages over HTTP/2, such as handling a stream of incoming requests or sending a sequence of responses to a client.",
      "description_length": 563,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_async.Client",
      "library": "grpc-async",
      "description": "This module implements gRPC client operations over HTTP/2, handling typed remote procedure calls through request/response interactions with remote services. It supports unary method invocations with serialized requests and deserialized responses over persistent connections, while its child module extends this functionality to handle all gRPC streaming patterns using `Async.Pipe.Reader`, `Writer`, and `Async.Deferred`. Together, they enable sending unary requests, consuming server streams, producing client streams, and managing bidirectional streaming communication with a gRPC server. Specific operations include invoking RPC methods like `call` for unary calls and `server_stream` for receiving streamed responses.",
      "description_length": 721,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_async.Server",
      "library": "grpc-async",
      "description": "This module implements a gRPC server for handling asynchronous RPC requests over HTTP/2, allowing creation of server instances and registration of named services that route incoming `H2.Reqd.t` requests to specific RPC handlers. It defines core gRPC request types\u2014unary, client streaming, server streaming, and bidirectional streaming\u2014processing each through async pipes and deferred responses. The server integrates service definitions and method handlers, enabling concrete use cases such as building a high-performance backend that serves multiple streaming RPC endpoints over HTTP/2. Direct API operations include server setup and service registration, while submodules manage RPC method definitions and streaming logic.",
      "description_length": 724,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_async",
      "library": "grpc-async",
      "description": "This module provides asynchronous gRPC communication over HTTP/2 for both clients and servers, supporting unary, server-streaming, client-streaming, and bidirectional streaming RPC patterns. Core data types include `Async.Pipe.Reader` and `Writer` for streaming, `Async.Deferred` for unary responses, and `H2.Reqd.t` for handling HTTP/2 requests on the server. Operations allow clients to invoke RPCs like `call` for unary requests and `server_stream` for receiving multiple responses, while servers can register services and handle incoming streams with typed method handlers. Example uses include building a high-performance streaming API backend or consuming a remote gRPC service with persistent, typed connections.",
      "description_length": 719,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 724,
    "min_description_length": 397,
    "avg_description_length": 588.1666666666666,
    "embedding_file_size_mb": 0.022202491760253906
  }
}