{
  "package": "grpc-async",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T23:02:36.343639",
  "modules": [
    {
      "module_path": "Grpc_async.Server.Service",
      "library": "grpc-async",
      "description": "This module manages the creation and routing of gRPC services and RPC methods. It provides operations to construct a service instance, register RPC handlers by name, and dispatch incoming HTTP/2 requests to the appropriate RPC. It works directly with `H2.Reqd.t` for handling network requests and `Grpc_async.Server.Rpc.t` for individual RPC definitions. A concrete use case is setting up a gRPC server that routes incoming requests to specific RPC implementations based on their registered names.",
      "description_length": 497,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_async.Client.Rpc",
      "library": "grpc-async",
      "description": "This module implements gRPC client RPC handlers for different streaming patterns. It works with `Async.Pipe.Writer.t`, `Async.Pipe.Reader.t`, and `string` values to send and receive payloads over gRPC connections. Use `bidirectional_streaming` for full-duplex communication, `client_streaming` for sending a stream of requests, `server_streaming` for receiving a stream of responses, and `unary` for standard request-response calls.",
      "description_length": 432,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_async.Server.Rpc",
      "library": "grpc-async",
      "description": "This module defines and handles the four core gRPC request types\u2014unary, client streaming, server streaming, and bidirectional streaming\u2014by processing HTTP/2 requests and managing data exchange through strings and async pipes. It works directly with `H2.Reqd.t` to handle incoming HTTP/2 requests, invoking the appropriate function for each RPC type and managing response transmission. Concrete use cases include implementing gRPC service handlers that receive and send serialized messages, such as handling a unary RPC that parses a request string and returns a structured response or managing a bidirectional stream that processes a sequence of client messages and sends incremental server responses.",
      "description_length": 701,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_async.Client",
      "library": "grpc-async",
      "description": "This module implements gRPC client RPC handlers for unary, server-streaming, client-streaming, and bidirectional-streaming communication patterns. It works with `Async.Pipe.Writer.t`, `Async.Pipe.Reader.t`, and `string` values to send and receive payloads over H2 connections. Use `call` to invoke a remote procedure with a specified service, RPC method, and handler, enabling typed, streaming-aware interactions with gRPC services.",
      "description_length": 432,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Grpc_async.Server",
      "library": "grpc-async",
      "description": "This module implements a gRPC server for handling HTTP/2-based remote procedure calls, supporting all four gRPC streaming types (unary, client streaming, server streaming, bidirectional streaming). It works with `H2.Reqd.t` to process incoming HTTP/2 requests and uses async pipes and strings for message exchange. Concrete use cases include defining and routing gRPC services that handle structured data requests and responses, such as implementing a unary RPC that receives a serialized request and sends a computed result, or managing a bidirectional stream that reacts to a sequence of client inputs with incremental server outputs.",
      "description_length": 636,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Grpc_async",
      "library": "grpc-async",
      "description": "Implements gRPC client and server functionality for unary, server-streaming, client-streaming, and bidirectional-streaming RPCs over HTTP/2. Uses `Async.Pipe.Writer.t`, `Async.Pipe.Reader.t`, and `string` values to serialize and exchange payloads. Enables defining typed RPC handlers on the server side and invoking remote procedures on the client side with structured streaming semantics.",
      "description_length": 389,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 701,
    "min_description_length": 389,
    "avg_description_length": 514.5,
    "embedding_file_size_mb": 0.08729934692382812
  }
}