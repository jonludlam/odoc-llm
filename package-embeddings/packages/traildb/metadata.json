{
  "package": "traildb",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:09.069026",
  "modules": [
    {
      "module_path": "TrailDB.Cons",
      "library": "traildb",
      "description": "This module supports constructing and modifying event databases by opening a writeable database, adding events with associated fields, and finalizing or appending to existing databases. It operates on event streams with UUIDs, timestamps, and field-value pairs. Concrete use cases include ingesting log data into a structured database and merging event streams from multiple sources.",
      "description_length": 383,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TrailDB.Filter",
      "library": "traildb",
      "description": "This module evaluates events against boolean combinations of item-based conditions. It supports constructing filters from positive or negative literals combined into disjunctions and conjunctions. Use it to select events matching specific item criteria, such as filtering out unwanted activity or isolating sequences with particular traits.",
      "description_length": 340,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "TrailDB.Cursor",
      "library": "traildb",
      "description": "This module provides functions to iterate over and access events in a trail within a TrailDB database. It supports operations to retrieve the next or peek at the upcoming event in a trail, as well as get the length of the current trail. It works directly with trails identified by `trail_id` and event data through the `tdb_event` type, enabling concrete use cases like sequential event processing or trail analysis.",
      "description_length": 416,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "TrailDB",
      "library": "traildb",
      "description": "This module organizes event data into structured trails identified by UUIDs, enabling ingestion, filtering, and sequential access. It supports creating and merging databases with timestamped events, applying boolean filters to isolate specific activity, and traversing trails event by event. Key data types include `trail_id` for identifying event sequences and `tdb_event` for individual event data, with operations to add, filter, and iterate over events. Use it to process log streams, analyze user sessions, or detect patterns in time-ordered event trails.",
      "description_length": 560,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 560,
    "min_description_length": 340,
    "avg_description_length": 424.75,
    "embedding_file_size_mb": 0.014951705932617188
  }
}