{
  "package": "make-random",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-06-18T16:33:30.923371",
  "modules": [
    {
      "module_path": "MakeRandom.Full30.State",
      "description": "Generates random values of various types using a provided pseudo-random number generator state. Operates on an opaque state type `t` that encapsulates the internal PRNG configuration. Initializes states from arrays or system entropy, and supports generating integers, floats, and booleans while advancing the state.",
      "description_length": 315,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MakeRandom.StdRandom.State",
      "description": "Generates random values of various types using a provided pseudo-random number generator state. Accepts an array of integers to initialize the state or uses a system-provided seed for self-initialization. Copies existing states and extracts bits, integers, 32-bit integers, native integers, 64-bit integers, and floating-point numbers from the state.",
      "description_length": 350,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MakeRandom.Full64.State",
      "description": "Generates random values of various types using a provided pseudo-random number generator (PRNG) state. It supports creating states from arrays or system entropy, copying existing states, and extracting integers, floats, and booleans while advancing the state. Used for deterministic random generation in simulations or cryptographic contexts where state management is critical.",
      "description_length": 377,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MakeRandom.Full30Init64.State",
      "description": "Generates random values of various types using a provided pseudo-random number generator state. Operates on an opaque state type `t` that encapsulates the internal PRNG configuration. Initializes states from arrays or system entropy, and supports generating integers, floats, and booleans while advancing the state.",
      "description_length": 315,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MakeRandom.Sig.State",
      "description": "Generates random values of various types using a provided pseudo-random number generator state. Operates on an opaque state type `t` that encapsulates the internal PRNG configuration. Supports deterministic random generation from a seed array or system entropy, and allows copying and updating of state for controlled randomness.",
      "description_length": 329,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MakeRandom.Bits",
      "description": "Provides functions to manipulate 64-bit random values, initialize states from arrays of 30-bit integers, and copy state data between instances. Operates on a custom `state` type and integer arrays of fixed size. Used to set up and manage random bit sequences for cryptographic or simulation purposes.",
      "description_length": 300,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MakeRandom.Sig",
      "description": "Generates random integers and floats within specified bounds, and returns random boolean values. It handles 32-bit, 64-bit, and native integers, as well as 30-bit unsigned integers. Used for probabilistic simulations, randomized sampling, and generating test data.",
      "description_length": 264,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MakeRandom.Basic30",
      "description": "Generates a 30-bit random integer, returning values in the range [0, 1073741824). Operates on unit type and produces int results. Used to introduce variability in simulations or randomized algorithms requiring a bounded range.",
      "description_length": 226,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MakeRandom.Full30",
      "description": "Generates 30-bit integers from a state, initializes states with an array of 30-bit values, and copies state contents. It operates on a custom `state` type and integer arrays of fixed size. Used to set up and manipulate pseudo-random number generator states with specific seed values.",
      "description_length": 283,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MakeRandom.Full64",
      "description": "Provides functions to generate and manipulate 64-bit random values, including creating new states, assigning state data, and initializing with random bit arrays. Operates on `state` type and `int64` arrays to manage random bit sequences. Used to initialize cryptographic keys or random number generators requiring full 64-bit entropy.",
      "description_length": 334,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MakeRandom.Full30Init64",
      "description": "Generates 30 random bits as an integer and initializes a state with a default seed. Accepts an array of int64 to populate a state with pre-generated random bits. Supports copying state contents and manages internal state data structures.",
      "description_length": 237,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MakeRandom.StdRandom",
      "description": "manages pseudo-random number generation with explicit state control, enabling deterministic and thread-safe random value creation. it supports generating integers, 32-bit integers, native integers, 64-bit integers, and floats, with state initialization from arrays or system seeds. it allows copying states, extracting bits, and generating values in bulk. examples include generating a sequence of random 32-bit integers or extracting a float from a pre-initialized state.",
      "description_length": 472,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "make-random",
      "description": "Generates pseudorandom numbers using Xoshiro256++ and Xoshiro256** algorithms, maintaining a 256-bit state for high-quality output. Provides functions to seed, generate integers, and generate floating-point numbers within specified ranges. Suitable for simulations, games, and non-cryptographic applications requiring fast and reliable randomness.",
      "description_length": 347,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MakeRandom",
      "description": "manages pseudo-random number generation with explicit state control, offering functions to generate integers, 64-bit values, and floats, while initializing and copying states from arrays or seeds. It operates on a custom `state` type and integer arrays, supporting 30-bit, 32-bit, 64-bit, and native integer ranges, as well as float distributions. Examples include generating a sequence of 32-bit integers or extracting a float from a pre-initialized state. It enables deterministic and thread-safe random value creation with full control over entropy sources and state transitions.",
      "description_length": 582,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 582,
    "min_description_length": 226,
    "avg_description_length": 337.92857142857144,
    "embedding_file_size_mb": 0.04772472381591797
  }
}