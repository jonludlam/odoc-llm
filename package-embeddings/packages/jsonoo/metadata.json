{
  "package": "jsonoo",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T23:07:54.399449",
  "modules": [
    {
      "module_path": "Jsonoo.Make.Encode",
      "library": "jsonoo",
      "description": "This module provides functions to encode various OCaml data types into JSON values. It supports encoding of primitives like booleans, numbers, strings, and characters, as well as structured types such as arrays, lists, tuples, hash tables, and key-value pairs into JSON arrays and objects. Use this module to serialize OCaml values into JSON for data interchange, API responses, or configuration output.",
      "description_length": 403,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonoo.Make.Decode",
      "library": "jsonoo",
      "description": "This module provides JSON decoding operations that convert Ojs.t values into OCaml data structures like basic types, lists, arrays, hashtables, and tuples through primitive decoders and combinators. It supports monadic composition with functions like map, bind, and either to chain decoders, handle errors, or merge alternatives, enabling robust parsing of complex or nested JSON structures. Typical use cases include deserializing API responses, processing configuration files with optional fields, and validating hierarchical data with fallback values.",
      "description_length": 554,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonoo.Decode",
      "library": "jsonoo",
      "description": "This component offers operations to decode and transform structured JSON data, supporting primitives like numbers and strings, collections such as arrays and dictionaries, and nested structures through combinators like `map` and `bind`. It works with JSON values represented as `Jsonoo.t` and decoder functions that enable error-resilient parsing, optional field handling, and schema composition. Typical applications include extracting typed data from heterogeneous JSON payloads, validating API responses, and mapping JSON hierarchies to custom data models with fallbacks for missing or malformed fields.",
      "description_length": 606,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonoo.Make",
      "library": "jsonoo",
      "description": "This module converts values of type `T.t` to and from JSON using `Ojs.t` as an intermediate representation. It provides parsing from JSON strings with optional and exception-raising variants, and pretty-printing with configurable indentation. Use it to serialize OCaml data to JSON for API responses or configuration files and deserialize JSON payloads into typed OCaml values.",
      "description_length": 377,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonoo.Encode",
      "library": "jsonoo",
      "description": "This module encodes OCaml values into JSON structures like numbers, strings, arrays, and dictionaries. It supports primitive types (booleans, floats, integers, strings, characters), optional values, tuples up to four elements, lists, arrays, and hash tables. Use it to serialize data for APIs, configuration files, or storage in JSON format.",
      "description_length": 341,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonoo",
      "library": "jsonoo",
      "description": "This module parses and serializes JSON data, converting between JSON strings and structured values. It supports decoding complex JSON hierarchies into typed OCaml values with error handling, and encoding OCaml primitives, collections, and custom data into JSON. Use it to process API responses, read JSON configuration files, or build JSON payloads from application data.",
      "description_length": 371,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 606,
    "min_description_length": 341,
    "avg_description_length": 442.0,
    "embedding_file_size_mb": 0.08732414245605469
  }
}