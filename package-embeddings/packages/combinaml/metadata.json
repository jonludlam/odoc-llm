{
  "package": "combinaml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:03:37.204438",
  "modules": [
    {
      "module_path": "Combinaml.Input",
      "library": "combinaml",
      "description": "This module manages input parsing state with a string and position index. It provides operations to inspect and advance through the input, including checking remaining length, extracting substrings, and testing characters or sequences against conditions. Concrete uses include implementing custom parsers that need efficient, position-based access to string data.",
      "description_length": 363,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Combinaml",
      "library": "combinaml",
      "description": "This module provides a powerful framework for building text parsers using functional, monadic, and applicative combinators, working seamlessly with input streams and strings. It supports error handling, stateful parsing, and transformations, making it ideal for parsing structured data, domain-specific languages, and communication protocols. The core functionality integrates with input state management, allowing parsers to track and advance through string data efficiently, inspect characters, and extract substrings. For example, users can compose high-level parsers for JSON or arithmetic expressions while leveraging low-level input manipulation to handle complex validation or recovery scenarios.",
      "description_length": 703,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 703,
    "min_description_length": 363,
    "avg_description_length": 533.0,
    "embedding_file_size_mb": 0.007693290710449219
  }
}