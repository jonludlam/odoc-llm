{
  "package": "pyast",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 78,
  "creation_timestamp": "2025-07-15T23:19:13.833044",
  "modules": [
    {
      "module_path": "Pyast_utils.Version",
      "library": "pyast.utils",
      "description": "Handles parsing and formatting of version numbers in the form of major.minor.subminor. Works with a record type containing three integers. Useful for converting version strings to structured data and back.",
      "description_length": 205,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast_utils",
      "library": "pyast.utils",
      "description": "This module provides tools for parsing and formatting version numbers as triplets of integers in the form `major.minor.subminor`. It supports converting between string representations and structured data, enabling precise version manipulation. Operations include parsing a version string into a record, formatting a record back into a string, and comparing or incrementing version components. Example: parsing `\"3.4.2\"` into `{ major = 3; minor = 4; subminor = 2 }`, incrementing to `{ major = 3; minor = 4; subminor = 3 }`, and formatting back to `\"3.4.3\"`.",
      "description_length": 558,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_2.Ast",
      "library": "pyast",
      "description": "This module enables the construction and manipulation of Python abstract syntax trees (ASTs) using OCaml types, representing expressions, statements, operators, and module-level structures with optional source location metadata. It supports code generation, parsing, and static analysis for Python 3.2 features like structural pattern matching, async constructs, and type annotations, providing precise AST node creation for control flow, comprehensions, and exception handling.",
      "description_length": 478,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V2_6.To",
      "library": "pyast",
      "description": "This module converts various Python abstract syntax tree (AST) nodes from the V2_6 representation to a target representation using a provided Builder module. It handles conversions for top-level modules, statements, expressions, and supporting structures like comprehensions, exception handlers, and function arguments. Each function maps a specific AST element to its corresponding Builder type, enabling transformation of Python 2.6 syntax trees into alternative representations.",
      "description_length": 481,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_1.Ast",
      "library": "pyast",
      "description": "This module enables constructing and manipulating Python 3.1 abstract syntax tree nodes, covering control structures (e.g., `try-except`, `with`), expressions (arithmetic, boolean, comprehensions), statements (assignments, function definitions), slices, and pattern-matching constructs. It operates on types like `stmt`, `expr`, `slice`, and `excepthandler`, incorporating optional metadata such as source locations and type annotations. This facilitates static code analysis, automated code transformation, and programmatic Python code generation through structured AST manipulation.",
      "description_length": 584,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_5_0.Ast",
      "library": "pyast",
      "description": "This module provides constructors for building and manipulating Python 3.5 AST nodes, covering statements (control flow, function definitions, exceptions), expressions (literals, operators, comprehensions), and structural elements (slices, patterns, imports). It operates on types like `expr`, `stmt`, `mod_`, and `keyword`, with support for optional metadata such as source locations. Designed for tasks like code analysis, transformation, or generation, it enables precise modeling of Python syntax features including async loops, pattern matching, and augmented assignments.",
      "description_length": 577,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_9_0.To",
      "library": "pyast",
      "description": "This module converts various Python abstract syntax tree (AST) nodes from the `Pyast.V3_9_0` module into equivalent structures using the provided `Builder`. It supports translation of AST elements such as modules, statements, expressions, operators, and control structures. Use this module to transform parsed Python code into a different internal representation suitable for analysis or code generation.",
      "description_length": 404,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_0_1.Ast",
      "library": "pyast",
      "description": "This module provides functions to construct and manipulate abstract syntax tree (AST) nodes for Python 3.0.1, covering statements (e.g., `try`, `with`, `match`), expressions (e.g., `lambda`, `subscript`, `comprehension`), slices, patterns, and operators. It operates on types like `expr`, `stmt`, `slice`, `pattern`, and `mod_`, enabling precise representation of Python syntax with optional source location metadata. These tools are suited for code analysis, transformation, or generation workflows, such as building linters, refactoring utilities, or compiler components that require structured manipulation of Python code.",
      "description_length": 625,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_8_0.To",
      "library": "pyast",
      "description": "This module converts various Python abstract syntax tree (AST) nodes from the `Pyast.V3_8_0` module into equivalent structures using the provided `Builder`. It supports direct translation of AST elements such as modules, statements, expressions, operators, and more. Use this module to transform parsed Python code into a different internal representation, such as for analysis, transformation, or code generation tasks.",
      "description_length": 420,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_1.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) nodes into typed OCaml representations using a provided builder. It supports parsing of Python modules, statements, expressions, operators, and other AST elements into corresponding OCaml data structures defined in the Builder module. Use this module to translate Python code into an OCaml-based AST for analysis, transformation, or code generation tasks.",
      "description_length": 410,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_5_0.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) nodes into typed OCaml representations using a provided builder. It supports parsing of Python 3.5 AST structures including modules, statements, expressions, and various syntactic components like operators, comprehensions, and exception handlers. Each function maps a Python AST node to its corresponding strongly-typed OCaml counterpart, enabling safe and structured manipulation of Python code within OCaml.",
      "description_length": 464,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_2.To",
      "library": "pyast",
      "description": "Converts Python abstract syntax trees (AST) from version 3.2 into equivalent structures using a provided builder module. It directly maps AST nodes like modules, statements, expressions, and operators to corresponding types in the Builder module. This module is used when translating Python source code into a custom intermediate representation, such as for analysis, transformation, or code generation tasks.",
      "description_length": 409,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_1.To",
      "library": "pyast",
      "description": "Converts Python abstract syntax trees (ASTs) from version 3.1 to a target AST representation using a provided builder module. It handles direct translation of AST nodes such as modules, statements, expressions, and their associated contexts. This module is useful when transforming or analyzing Python code by mapping standardized AST structures to a custom intermediate representation.",
      "description_length": 386,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_10_2.Ast",
      "library": "pyast",
      "description": "This module provides operations for constructing and transforming Python 3.10.2 abstract syntax trees (ASTs) in OCaml, focusing on nodes like expressions (`expr`), statements (`stmt`), operators, and module structures. It supports precise manipulation of Python-specific constructs such as pattern matching, comprehensions, type ignores, and control flow blocks through dedicated constructors. Use cases include programmatic code generation, static analysis, and syntax tree transformations for Python tooling or compilers.",
      "description_length": 523,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_11_0.Ast",
      "library": "pyast",
      "description": "This module provides operations for constructing and manipulating Python 3.11 abstract syntax trees (ASTs) with a focus on control flow, expression syntax, and code analysis tasks. It works with AST node types like statements (`stmt`), expressions (`expr`), slices (`slice`), and patterns (`pattern`), supporting features such as context managers, exception handling, pattern matching, and comprehension syntax. Specific use cases include building Python modules, transforming code structures, and analyzing syntactic elements like loops, conditionals, and operator precedence.",
      "description_length": 577,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_4_0.Ast",
      "library": "pyast",
      "description": "This module enables the construction and manipulation of Python 3.4 abstract syntax trees (ASTs) by providing typed constructors for nodes representing statements, expressions, and metadata. It supports operations like creating control flow structures (e.g., `try`, `with`, loops), expression patterns (e.g., `yield from`, comprehensions, slices), and language-specific features (e.g., type annotations, async functions) with optional source location tracking. Designed for tasks such as code generation, static analysis, or transformation, it works with structured types like expressions, statements, and pattern-matching constructs to model Python syntax programmatically.",
      "description_length": 674,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_3_1.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax trees (ASTs) into typed OCaml representations using a provided builder. It supports parsing of Python modules, statements, expressions, and various AST nodes like operators, comprehensions, and exception handlers. Each function maps a Python AST node to its corresponding OCaml type, enabling analysis or transformation of Python code within OCaml.",
      "description_length": 392,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V2_6.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) nodes into a typed OCaml representation using the associated Builder module. It provides functions for parsing top-level modules, statements, expressions, and various AST components like operators, comprehensions, and exception handlers. Each function maps a Python AST node to its corresponding strongly-typed OCaml counterpart, enabling safe and structured manipulation of Python code in OCaml.",
      "description_length": 451,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_9_0.Ast",
      "library": "pyast",
      "description": "This module supports creation and manipulation of Python 3.9 abstract syntax tree (AST) nodes for statements, expressions, and patterns, including control flow constructs, exception handling, and pattern matching. It operates on types like `stmt`, `expr`, `slice`, and `pattern`, with uniform handling of optional metadata such as source positions and type annotations. These tools are used in compiler pipelines, code analysis, or transformation systems to programmatically generate, modify, or inspect Python code structures.",
      "description_length": 527,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_6_0.Ast",
      "library": "pyast",
      "description": "This module constructs Python abstract syntax tree (AST) nodes for structural elements like statements, expressions, and operators, enabling precise representation of Python 3.6.0 syntax. It operates on types such as `stmt`, `expr`, `slice`, `pattern`, and `operator`, supporting use cases in code generation, static analysis, and transformation tools that require modeling Python's syntactic constructs. Specific features include control flow statements, exception handling, pattern matching, and literal expressions with optional source location tracking.",
      "description_length": 557,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_6_0.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) nodes from Python objects into strongly-typed OCaml representations defined in the Builder module. It provides direct mappings for AST elements like modules, statements, expressions, operators, and context information, ensuring type-safe construction of OCaml-based ASTs. It is used when embedding or analyzing Python code within OCaml applications, particularly for accurate syntax tree manipulation and transformation.",
      "description_length": 475,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_7_0.Ast",
      "library": "pyast",
      "description": "This module provides operations to construct and manipulate abstract syntax trees (ASTs) for Python 3.7 code, covering control flow statements (try, match, async loops), expressions (arithmetic, bitwise, comprehensions), and structural elements (with statements, function arguments, pattern matching). It operates on AST node types like `stmt`, `expr`, `excepthandler`, and `pattern`, with support for optional source location tracking and variant syntax forms. The module is designed for tools requiring precise Python code analysis, transformation, or generation, such as linters, compilers, or refactoring utilities.",
      "description_length": 619,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_0.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) nodes into typed OCaml representations using a provided builder. It supports parsing of Python modules, statements, expressions, operators, and other AST elements into corresponding OCaml data structures. Concrete use cases include building static analysis tools, code transformers, or linters that operate on Python source code by leveraging the typed AST in OCaml.",
      "description_length": 421,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_8_0.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax trees (ASTs) into typed OCaml data structures using a provided builder. It supports parsing of Python modules, statements, expressions, and various syntactic elements like operators, comprehensions, and type annotations. Each function maps a Python AST node to its corresponding strongly-typed OCaml representation, enabling safe manipulation and analysis of Python code within OCaml.",
      "description_length": 428,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_7_0.To",
      "library": "pyast",
      "description": "This module converts various Python Abstract Syntax Tree (AST) nodes from the `Pyast.V3_7_0` module into equivalent structures using the provided `Builder`. It supports direct translation of AST elements such as modules, statements, expressions, operators, and context information. Use this module to transform parsed Python syntax trees into a custom intermediate representation suitable for analysis or code generation tasks.",
      "description_length": 427,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_11_0.Parse",
      "library": "pyast",
      "description": "Converts Python abstract syntax tree (AST) objects into typed OCaml AST structures. It provides functions to parse AST nodes such as modules, statements, expressions, operators, and patterns, mapping them to corresponding typed representations in the Builder module. This module is used to process Python source code into an OCaml-native AST format for analysis, transformation, or code generation tasks.",
      "description_length": 404,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V2_5.Ast",
      "library": "pyast",
      "description": "This module provides functions to construct and configure abstract syntax tree (AST) nodes for Python code, covering statements (control flow, exception handling, function/class definitions), expressions (binary/unary operations, tuples, subscriptions), and syntactic constructs (imports, pattern matching, comprehensions). It operates on types like `stmt`, `expr`, `excepthandler`, and `alias`, with support for optional source location metadata (line numbers, column offsets) to enable precise code analysis or transformation. These tools are particularly useful for implementing Python parsers, static analyzers, or code generation utilities requiring fine-gr",
      "description_length": 662,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V2_5.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) nodes into a typed OCaml representation using the Builder module. It provides functions to parse various AST elements such as modules, statements, expressions, operators, and control structures, mapping them to corresponding typed values in the Builder module. Use this module to analyze or transform Python code by converting its AST into a more structured and type-safe OCaml format.",
      "description_length": 440,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_10_0.Ast",
      "library": "pyast",
      "description": "This module provides operations for constructing and manipulating Python abstract syntax trees (ASTs), including nodes for control flow (try/except, loops), expressions (literals, operators, comprehensions), and structural elements (with statements, pattern-matching). It works with AST components like `stmt`, `expr`, `slice`, and `pattern` types, supporting optional source location metadata and Python 3.10-specific features such as match cases and async constructs. It is used for programmatic Python code generation, static analysis, or transformation tools.",
      "description_length": 563,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V2_5.To",
      "library": "pyast",
      "description": "Converts Python abstract syntax tree (AST) nodes from version 2.5 of the Pyast module into equivalent structures using a provided builder module. It supports transformation of core AST elements including modules, statements, expressions, operators, and context information. This module is useful when translating or analyzing Python 2.5 code into a different internal representation, such as for code generation or static analysis tools.",
      "description_length": 437,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_9_0.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) objects into typed OCaml structures defined in the Builder module. It provides direct mappings for Python AST nodes such as modules, statements, expressions, and various syntactic constructs to their corresponding Builder types. Use this module when transforming or analyzing Python code represented as AST objects into a more structured and typed OCaml representation.",
      "description_length": 424,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V2_7.Ast",
      "library": "pyast",
      "description": "This module provides functions to construct and manipulate abstract syntax tree (AST) nodes for Python 2.7, covering expressions, statements, and control flow constructs. It operates on types like `expr`, `stmt`, `slice`, and `pattern`, supporting arithmetic operations, function definitions, exception handling, and pattern matching. These tools are used for tasks like parsing Python code, static analysis, or transforming source code programmatically.",
      "description_length": 454,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_10_0.To",
      "library": "pyast",
      "description": "Converts AST nodes from the Pyast.V3_10_0 module to equivalent structures in the Builder module. It handles transformations for Python syntax elements like modules, statements, expressions, operators, and patterns. This module is used when translating parsed Python code into a different AST representation for further processing or analysis.",
      "description_length": 342,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_3_0.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) objects into typed OCaml representations using a provided builder. It supports parsing of Python AST nodes such as modules, statements, expressions, operators, and control structures into corresponding OCaml data types. Use this module to analyze or transform Python code by converting its AST into a structured form suitable for further processing or interpretation.",
      "description_length": 422,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_8_0.Ast",
      "library": "pyast",
      "description": "This module constructs abstract syntax tree (AST) nodes for Python 3.8 syntax, enabling precise modeling of statements (control flow, function definitions, pattern matching), expressions (literals, operators, comprehensions), and structural elements (modules, slices, exception handlers). It operates on types like `stmt`, `expr`, `slice`, `pattern`, and `mod`, with support for optional metadata such as source locations and type annotations. Specific use cases include static analysis tools, code transformation frameworks, and Python compiler utilities that require handling Python 3.8 features like async/await blocks, positional-only arguments, and enhanced pattern matching constructs.",
      "description_length": 691,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_10_2.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax trees (ASTs) into a typed OCaml representation using a provided builder. It includes functions for parsing AST nodes of various kinds, such as modules, statements, expressions, and patterns, each producing a corresponding structured type from the builder. It is used to translate Python code into a form suitable for analysis, transformation, or compilation within OCaml programs.",
      "description_length": 424,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_7_0.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax trees (ASTs) from Python objects into strongly-typed OCaml representations using a provided builder. It supports parsing top-level constructs like modules, statements, and expressions, along with their contexts, operators, and structural components such as comprehensions, exception handlers, and function arguments. Typical use cases include analyzing or transforming Python code by converting its AST into a type-safe OCaml structure for further processing.",
      "description_length": 503,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_3_0.To",
      "library": "pyast",
      "description": "This module converts various Python Abstract Syntax Tree (AST) nodes from the `Pyast.V3_3_0` module into equivalent structures using the provided `Builder`. It supports transformation of AST elements such as modules, statements, expressions, operators, and control structures. Use this module to translate Python ASTs into a custom intermediate representation for analysis, code generation, or transformation tasks.",
      "description_length": 415,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V2_7.Parse",
      "library": "pyast",
      "description": "This module translates Python abstract syntax trees (ASTs) into a typed OCaml representation using a provided builder. It directly converts Python AST nodes\u2014such as modules, statements, expressions, operators, and control structures\u2014into corresponding typed values defined in the Builder module. It is used to process Python code parsed into an AST and map it to a structured OCaml data model for analysis or transformation.",
      "description_length": 424,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_6_0.To",
      "library": "pyast",
      "description": "This module converts various Python Abstract Syntax Tree (AST) nodes from the `Pyast.V3_6_0` module into equivalent structures using a provided `Builder`. It supports transformations for modules, statements, expressions, operators, and other AST components. Use this module to translate Python 3.6 AST elements into a custom intermediate representation built by the `Builder` module.",
      "description_length": 383,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_2.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) nodes into typed OCaml representations using a provided builder. It handles specific AST node types like modules, statements, expressions, operators, and control structures, mapping them to corresponding typed values in the builder module. Use it to parse Python code into a typed OCaml data structure for analysis or transformation.",
      "description_length": 388,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_3_0.Ast",
      "library": "pyast",
      "description": "This module provides functionality for constructing and manipulating Python abstract syntax trees (ASTs) with support for Python 3.3.0 features, including pattern matching structures introduced in Python 3.10. It offers operations to create statement nodes (e.g., control",
      "description_length": 271,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_5_0.To",
      "library": "pyast",
      "description": "This module converts various Python abstract syntax tree (AST) nodes from the `Pyast.V3_5_0` module into equivalent structures using the provided `Builder`. It supports direct translation of AST elements such as modules, statements, expressions, operators, and context information. Use this module to transform parsed Python code into a different internal representation, such as for analysis, transformation, or code generation tasks.",
      "description_length": 435,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_4_0.To",
      "library": "pyast",
      "description": "This module converts various Python Abstract Syntax Tree (AST) nodes from the `Pyast.V3_4_0` module into equivalent structures using a provided `Builder`. It supports transformations for modules, statements, expressions, operators, and other AST components. Use this when translating or analyzing Python code represented as an AST into a different intermediate representation via the `Builder` interface.",
      "description_length": 404,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_10_2.To",
      "library": "pyast",
      "description": "This module converts various Python abstract syntax tree (AST) nodes from the `Pyast.V3_10_2` module into equivalent structures using a provided `Builder`. It supports direct translation of AST elements such as modules, statements, expressions, operators, and patterns. Concrete use cases include building custom Python AST transformers or code generators that target a specific intermediate representation.",
      "description_length": 407,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_0_1.To",
      "library": "pyast",
      "description": "This module converts various Python abstract syntax tree (AST) nodes from the `Pyast.V3_0_1` module into equivalent structures using a provided `Builder`. It supports transformation of modules, statements, expressions, and associated constructs like operators, comprehensions, and exception handlers. Concrete use cases include translating Python ASTs into custom intermediate representations or generating code in another language using the target `Builder`'s output format.",
      "description_length": 475,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_11_0.To",
      "library": "pyast",
      "description": "This module converts various Python abstract syntax tree (AST) nodes from the `Pyast.V3_11_0` representation to an equivalent structure using the `Builder` module's types. It supports direct translation of AST elements such as modules, statements, expressions, operators, and patterns. Use this module to transform parsed Python code into a custom AST format suitable for analysis, transformation, or code generation tasks.",
      "description_length": 423,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_0.To",
      "library": "pyast",
      "description": "This module converts various Python abstract syntax tree (AST) nodes from the Pyast.V3_0 representation to a target representation defined by the Builder module. It provides direct mappings for AST elements such as modules, statements, expressions, operators, and control structures. Use this module to transform parsed Python code into a different AST format suitable for analysis, transformation, or code generation tasks.",
      "description_length": 424,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_3_1.To",
      "library": "pyast",
      "description": "This module converts various Python abstract syntax tree (AST) nodes from the Pyast.V3_3_1 representation to a target representation defined by the Builder module. It provides direct mappings for AST elements such as modules, statements, expressions, operators, and context information. Use this module to transform parsed Python code into a different AST format suitable for analysis, transformation, or code generation tasks.",
      "description_length": 427,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_3_1.Ast",
      "library": "pyast",
      "description": "This module provides functions to construct and manipulate Python abstract syntax tree (AST) nodes, covering core syntax elements like control structures, expressions, operators, and match patterns introduced in Python 3.3.1 and later. It operates on AST types including expressions, statements, identifiers, comprehensions, and exception handlers, with support for optional metadata such as source locations and structured node assembly. These capabilities enable use cases like programmatic code analysis, transformation tools, and static analysis frameworks that handle modern Python features including async constructs, pattern matching, and slice operations.",
      "description_length": 663,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_4_0.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) nodes into typed OCaml structures by parsing Python objects into specific AST components. It supports parsing of modules, statements, expressions, operators, and various syntactic constructs like comprehensions, exceptions, and function arguments. Each function maps a Python AST node to its corresponding typed representation in the Builder module.",
      "description_length": 404,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V2_6.Ast",
      "library": "pyast",
      "description": "This module provides functions to construct and manipulate abstract syntax tree (AST) nodes for Python 2.6, covering statements (e.g., `try`, `class`, `with`), expressions (e.g., `unaryop`, `subscript`, `lambda`), and structural elements like slices, patterns, and exception handlers. It operates on types such as `expr`, `stmt`, `arguments`, and `excepthandler`, with support for optional metadata (e.g., source positions, annotations) and complex constructs like comprehensions, pattern matching, and async operations. These tools are used for building Python code analysis, transformation, or generation systems that require precise AST manipulation.",
      "description_length": 653,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_10_0.Parse",
      "library": "pyast",
      "description": "This module translates Python abstract syntax trees (ASTs) into a strongly-typed OCaml representation using a provided builder. It supports parsing top-level constructs like modules, statements, and expressions, along with detailed components such as operators, comprehensions, and pattern matching structures. Use this module to convert Python AST objects into typed OCaml data suitable for analysis, transformation, or code generation tasks.",
      "description_length": 443,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V2_7.To",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) nodes from version 2.7 of the Python language into equivalent structures using a provided builder. It supports transformation of core AST elements such as modules, statements, expressions, operators, and control structures. Concrete use cases include translating parsed Python 2.7 code into an intermediate representation for analysis, transformation, or code generation tasks.",
      "description_length": 432,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_0_1.Parse",
      "library": "pyast",
      "description": "This module converts Python abstract syntax tree (AST) nodes into a typed OCaml representation using the Builder module. It provides functions to parse various AST components such as modules, statements, expressions, and operators, mapping them to corresponding typed structures. Use this module to transform raw Python AST objects into a structured format suitable for analysis or code generation.",
      "description_length": 398,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_0.Ast",
      "library": "pyast",
      "description": "This module constructs and manipulates abstract syntax tree (AST) nodes for Python 3.0, supporting operations on statements (e.g., `if`, `for`, `try`), expressions (e.g., unary/binary operations, function calls), and control structures (e.g., `with`, `while`). It works with data structures mirroring Python's syntactic elements, including expressions, statements, modules, and metadata like source locations. Specific use cases include programmatic code generation, static analysis tools, and transformations requiring precise control over Python's syntax tree structure.",
      "description_length": 572,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.S-To",
      "library": "pyast",
      "description": "Converts abstract syntax trees from the Pyast.S representation to a target format using a provided Builder module. It defines a transformation function `mod_` that maps AST nodes to the Builder's representation. This module is used to serialize or translate Python ASTs into alternative structures, such as bytecode or intermediate representations.",
      "description_length": 348,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V2_6",
      "library": "pyast",
      "description": "This module enables the construction, manipulation, and transformation of Python 2.6 abstract syntax trees (ASTs), offering direct support for expressions, statements, slices, patterns, and metadata like source positions. It provides operations for parsing Python code, modifying AST nodes, and handling core language features such as control flow, comprehensions, and pattern matching. Submodules facilitate conversion of AST nodes into alternative or strongly-typed OCaml representations using a Builder module, enabling structured transformations and interoperability. Examples include rewriting function calls, analyzing control structures, or generating Python code from modified ASTs.",
      "description_length": 690,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_2",
      "library": "pyast",
      "description": "This module parses Python 3.2 source code into abstract syntax trees (ASTs) and converts AST elements\u2014such as expressions, statements, and modules\u2014into typed OCaml representations. It supports precise modeling of Python syntax including structural pattern matching, async constructs, and type annotations, using data types like `expr`, `stmt`, and `mod_` with optional source location tracking. The child modules provide tools for AST construction, translation into custom intermediate representations, and typed conversion using pluggable builders. You can use it to build code analysis tools, perform static transformations, or generate Python code from OCaml-based representations.",
      "description_length": 684,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_8_0",
      "library": "pyast",
      "description": "This module enables the creation, parsing, and manipulation of Python 3.8 ASTs with precise source location tracking and optional metadata, supporting key data types like `expr`, `stmt`, `mod_`, `slice`, and `pattern`. It provides utilities for handling Python 3.8 features such as structured pattern matching, type annotations, and async/await constructs, facilitating tasks like code generation, static analysis, and transformation. Submodules handle AST translation into alternative representations, conversion into strongly-typed OCaml structures, and construction of AST nodes with full syntactic coverage. Together, they enable robust manipulation of Python code within OCaml toolchains, supporting both analysis and transformation workflows.",
      "description_length": 748,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_0",
      "library": "pyast",
      "description": "This module provides utilities for constructing and manipulating Python 3.0 abstract syntax trees in OCaml, modeling core components such as expressions, statements, and control structures with support for source location metadata and version-specific handling. It enables precise node creation, conversion of Python values to OCaml representations, and transformation of ASTs for tasks like code generation, static analysis, and linting. Child modules handle parsing Python source into typed OCaml ASTs, converting between AST representations, and manipulating structured elements like loops, conditionals, and function calls. Example uses include generating Python code from OCaml, rewriting AST nodes during analysis, and building tools that process Python programs in a typed, structured way.",
      "description_length": 796,
      "index": 60,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Pyast.S-Parse",
      "library": "pyast",
      "description": "This module parses Python abstract syntax trees into a structured representation using a provided builder. It converts Python AST nodes into a typed format defined by the builder's `mod_` function. Use it to analyze or transform Python code programmatically, such as extracting function definitions or evaluating code structure.",
      "description_length": 328,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_9_0",
      "library": "pyast",
      "description": "This module enables precise manipulation of Python 3.9 abstract syntax trees through typed constructors for nodes like expressions, statements, and patterns, supporting match-case syntax, type ignores, and async constructs. It provides utilities to parse Python source code into AST structures, convert Python objects to typed OCaml representations, and build or transform AST components with optional metadata like source locations. The module supports core operations such as arithmetic expressions, control flow, and exception handling, while submodules handle AST translation, node construction, and conversion from Python AST objects to structured OCaml types. Use it to generate, analyze, or transform Python code programmatically with accurate language semantics and detailed node control.",
      "description_length": 796,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V2_5",
      "library": "pyast",
      "description": "This module provides tools to build and manipulate Python 2.5 abstract syntax trees (ASTs), supporting the creation of nodes for expressions, statements, and constructs like comprehensions, slicing, and exception handling. It includes utilities for parsing Python code and converting between Python ASTs and OCaml values, enabling analysis, transformation, and code generation tasks. The child modules extend this functionality by offering structured AST construction, typed conversion of AST elements, and version-specific translation using customizable builder modules. Key data types include `stmt`, `expr`, `excepthandler`, and `alias`, with optional source location tracking for precise tooling support.",
      "description_length": 708,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_10_2",
      "library": "pyast",
      "description": "This module enables the construction, manipulation, and conversion of Python 3.10.2 abstract syntax trees in OCaml, with precise type definitions for nodes like expressions, statements, operators, and patterns, including support for advanced features such as async functions, match-case, and type ignores. Its core functionality works with builder-based translation strategies to convert Python ASTs into typed OCaml structures, facilitating static analysis, code generation, and cross-language transformations. Submodules provide direct access to node constructors, AST parsing routines, and transformation utilities that map Python syntax elements to customizable OCaml representations. Example uses include generating Python code from OCaml logic, analyzing source structure for linters, and converting Python programs into domain-specific intermediate forms.",
      "description_length": 862,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.S",
      "library": "pyast",
      "description": "This module provides operations for constructing and manipulating Python abstract syntax trees (ASTs) by defining functions to create nodes for expressions, statements, patterns, and operators with optional source location metadata. It works with OCaml representations of Python syntax elements like `expr`, `stmt`, `comprehension`, and `pattern`, enabling structured transformations of code components such as function definitions, loops, and match cases. Specific use cases include generating Python code from OCaml, building static analysis tools, or implementing linters that traverse and modify ASTs for optimization or refactoring.",
      "description_length": 637,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_3_0",
      "library": "pyast",
      "description": "This module enables programmatic construction and manipulation of Python 3.3 ASTs, supporting nodes for statements, expressions, modules, and advanced features like async operations and pattern matching. It operates on core OCaml types such as `stmt`, `expr`, `mod_`, and `pattern`, allowing precise AST transformations with optional source location tracking. Child modules focus on parsing, translating, and restructuring Python ASTs into typed OCaml representations, facilitating tasks like code analysis, rewriting, and custom intermediate representation generation. For example, you can parse a Python module, modify its function bodies, and emit the transformed code while preserving structural integrity.",
      "description_length": 710,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_4_0",
      "library": "pyast",
      "description": "This module provides utilities for building and manipulating Python 3.4 ASTs, supporting direct construction of nodes like `stmt`, `expr`, and `mod` with optional metadata such as source locations and type annotations. It enables precise control over Python syntax features including comprehensions, exception handling, and match-case patterns, making it suitable for code generation and static analysis. Submodules extend this functionality by offering typed constructors for AST nodes, translating ASTs into intermediate representations using a `Builder`, and parsing Python ASTs into typed OCaml structures. Together, they support end-to-end workflows for analyzing, transforming, and generating Python code programmatically.",
      "description_length": 728,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_3_1",
      "library": "pyast",
      "description": "This module provides tools for building and transforming Python 3.3.1 abstract syntax trees (ASTs), supporting expressions, statements, modules, and version-specific features like async/await and pattern matching. It includes utilities for node creation, type coercion, option handling, and source location tracking, enabling tasks such as code generation, static analysis, and transpilation. Submodules handle parsing Python ASTs into OCaml types, converting AST representations using a custom builder, and manipulating core syntax elements like comprehensions, control structures, and operators. Example uses include building Python modules programmatically, rewriting function calls, and analyzing code structure with precise type-preserving transformations.",
      "description_length": 761,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_1",
      "library": "pyast",
      "description": "This module provides tools to build and manipulate Python 3.1 abstract syntax trees, supporting direct creation and transformation of expressions, statements, and module structures. It includes operations for handling match-case patterns, comprehensions, control flow, and imports, using core types like `expr`, `stmt`, `arguments`, and `alias`. The module enables static analysis, code generation, and tooling development by converting Python code into OCaml AST representations or transforming existing AST nodes. Submodules extend this functionality by translating ASTs into typed OCaml structures and mapping them to custom intermediate representations for further processing.",
      "description_length": 680,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V2_7",
      "library": "pyast",
      "description": "This module enables the construction, conversion, and manipulation of Python abstract syntax trees (ASTs) across multiple versions, with built-in support for Python 2.7 control structures, 3.10+ pattern-matching, and version-specific representations of numbers and constants. It provides core data types such as `expr`, `stmt`, `mod_`, `slice`, and `pattern`, along with operations to build and transform AST nodes, including arithmetic expressions, function definitions, and control flow constructs. Child modules extend this functionality by offering version-specific AST manipulation, translation of Python ASTs into typed OCaml structures via a builder, and direct conversion of Python 2.7 ASTs into intermediate representations. These capabilities support use cases like programmatic code generation, static analysis, and AST transformations across different Python versions.",
      "description_length": 880,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_10_0",
      "library": "pyast",
      "description": "This library enables the construction, manipulation, and conversion of Python abstract syntax trees (ASTs) with precise support for Python 3.10 syntax, including control flow, comprehensions, pattern matching, and async constructs. It defines core data types like `expr`, `stmt`, and `mod_`, along with operations to build, modify, and traverse nodes, optionally tracking source locations. The companion modules handle AST conversion to and from alternative representations, supporting tasks like code generation, static analysis, and transformation by translating between Python ASTs and strongly-typed OCaml structures. Example uses include programmatically generating Python code with match statements, analyzing control flow in existing code, or transforming ASTs for custom language extensions.",
      "description_length": 799,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_6_0",
      "library": "pyast",
      "description": "This module enables the creation and manipulation of Python 3.6.0 abstract syntax trees using OCaml types such as `expr`, `stmt`, and `mod_`, along with support for Python objects and source location metadata. The Builder submodule provides precise construction of AST nodes for expressions, statements, and operators, enabling code generation and static analysis tools. The Converter submodule translates Python AST nodes into strongly-typed OCaml representations, ensuring type-safe AST manipulation within OCaml applications. Together, these components support tasks like parsing Python source, transforming ASTs, and generating Python code programmatically.",
      "description_length": 661,
      "index": 72,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pyast.V3_0_1",
      "library": "pyast",
      "description": "This module provides tools to build, manipulate, and transform Python 3.0.1 abstract syntax trees using OCaml types like `expr`, `stmt`, `mod_`, and `pattern`, with support for source location tracking and structural customization. Its submodules enable constructing AST nodes for complex Python syntax elements\u2014such as `match`, `try`, and comprehensions\u2014and transforming those nodes into typed OCaml structures or custom representations via a `Builder`. You can use it to generate Python code programmatically, implement linters or refactoring tools, or translate Python ASTs into other formats or languages. The combination of direct node manipulation and transformation pipelines supports both fine-grained AST edits and high-level code analysis workflows.",
      "description_length": 759,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_11_0",
      "library": "pyast",
      "description": "This module enables precise construction and manipulation of Python 3.11 ASTs, supporting control flow, expressions, pattern matching, and source location tracking. It provides core data types like `stmt`, `expr`, `slice`, and `pattern`, along with operations for building, transforming, and analyzing code structures such as loops, conditionals, and comprehensions. The companion modules handle conversion between Python AST objects and typed OCaml representations, using the `Builder` module's structure to enable analysis, transformation, and programmatic code generation. Together, they allow tasks like rewriting function bodies, extracting syntax patterns, or building custom static analysis tools directly from Python source.",
      "description_length": 732,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_7_0",
      "library": "pyast",
      "description": "This module provides tools for building and manipulating Python 3.7 ASTs, supporting expressions, statements, and modules with features like pattern matching, context managers, and exception handling. It includes utilities for handling optional fields, source locations, and conversions between Python and OCaml representations. Submodules enable AST construction, transformation via a builder, and parsing Python objects into typed OCaml structures. Examples include generating control flow code, analyzing expressions, and implementing linters or refactoring tools.",
      "description_length": 567,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast.V3_5_0",
      "library": "pyast",
      "description": "This module enables the construction, analysis, and transformation of Python 3.5 abstract syntax trees using rich OCaml types, supporting precise modeling of code structures like expressions, statements, and modules with metadata such as source locations. Its core functionality includes direct manipulation of AST nodes through types like `expr`, `stmt`, and `mod_`, while submodules provide dedicated tools for building ASTs, parsing Python code into typed OCaml representations, and translating AST nodes into alternative forms. You can use it to build linters that inspect control flow, generate code from AST fragments, or refactor Python programs by transforming their syntax trees programmatically. The combination of node construction, parsing, and translation capabilities supports end-to-end workflows for static analysis, code generation, and syntactic manipulation.",
      "description_length": 877,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pyast",
      "library": "pyast",
      "description": "This module parses Python source code into abstract syntax trees (ASTs) and manages version-specific AST definitions across Python releases. It provides core data types like `expr`, `stmt`, and `mod_` to represent Python syntax elements, along with operations to construct, manipulate, and convert AST nodes while preserving source location metadata. Child modules offer version-specific support for Python 2.5 to 3.11, enabling precise handling of features like async/await, pattern matching, and type annotations. You can use this module to build code analyzers, rewrite Python functions programmatically, generate Python code from OCaml logic, or translate ASTs into custom intermediate representations using pluggable builder modules.",
      "description_length": 738,
      "index": 77,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 78,
    "meaningful_modules": 78,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 880,
    "min_description_length": 205,
    "avg_description_length": 535.4871794871794,
    "embedding_file_size_mb": 0.28372859954833984
  }
}