{
  "package": "varint",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:10.968173",
  "modules": [
    {
      "module_path": "Varint.VarIntEncoding",
      "library": "varint",
      "description": "This module encodes and decodes variable-length integers to and from binary representations. It supports conversion between integer values and compact byte sequences, suitable for efficient storage or transmission. Use cases include serialization in network protocols or binary file formats where space efficiency is critical.",
      "description_length": 326,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Varint.VarInt64",
      "library": "varint",
      "description": "This module encodes and decodes 64-bit integers to and from variable-length byte sequences. It operates on `int64` values and supports serialization to and from `Cstruct.t` and `Mstruct.t` buffers. Use it when compactly storing or transmitting 64-bit integers in a binary format, such as in network protocols or file formats.",
      "description_length": 325,
      "index": 1,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Varint.LengthFieldPrefixing",
      "library": "varint",
      "description": "This module encodes and decodes variable-length integer-prefixed data structures. It works with `Cstruct.t` for output and `Mstruct.t` for input, handling efficient serialization and deserialization of length-prefixed fields. Concrete use cases include framing messages in network protocols or parsing binary formats where field lengths vary.",
      "description_length": 342,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Varint.VarInt32",
      "library": "varint",
      "description": "This module encodes and decodes 32-bit integers using variable-length encoding. It operates on `int32` values, converting them to and from `Cstruct.t` and `Mstruct.t` for efficient serialization and deserialization. Use this module when working with compact binary representations of 32-bit integers, such as in network protocols or binary file formats.",
      "description_length": 353,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Varint",
      "library": "varint",
      "description": "This module provides variable-length integer encoding and decoding for efficient binary serialization, using little-endian base-128 with continuation bits to minimize storage for small integers. It directly supports 32-bit and 64-bit signed integers and integrates with `Cstruct.t` and `Mstruct.t` for buffer-based serialization, enabling compact representation in network protocols and binary file formats. Submodules handle integer-prefixed data structures, allowing efficient framing and parsing of variable-length fields. For example, you can serialize an `int64` into a compact byte sequence, or encode an `int32` with a length-prefixed header for structured binary messaging.",
      "description_length": 681,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 681,
    "min_description_length": 325,
    "avg_description_length": 405.4,
    "embedding_file_size_mb": 0.018585205078125
  }
}