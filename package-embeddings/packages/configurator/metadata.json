{
  "package": "configurator",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:56:19.880071",
  "modules": [
    {
      "module_path": "Configurator.C_define.Type",
      "library": "configurator",
      "description": "This module defines a type `t` with three variants\u2014`Switch`, `Int`, and `String`\u2014representing possible types of C preprocessor definitions. It provides functions to convert values of type `t` to and from S-expressions and to compare them. These operations support parsing, serialization, and ordering of C define types in configuration workflows.",
      "description_length": 346,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Configurator.C_define.Value",
      "library": "configurator",
      "description": "This module defines a variant type for representing configuration values, including boolean switches, integers, and strings. It provides functions for converting values to and from S-expressions and comparing them. It is used to handle and persist configuration settings in a structured and type-safe way.",
      "description_length": 305,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Configurator.Pkg_config",
      "library": "configurator",
      "description": "This module provides functions to interface with `pkg-config` for retrieving package configuration details. It defines a type `t` representing the `pkg-config` environment and a `package_conf` record containing lists of libraries and compiler flags. The `get` function returns the `pkg-config` environment if available, and `query` retrieves library and flag information for a specified package.",
      "description_length": 395,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Configurator.C_define",
      "library": "configurator",
      "description": "This module manipulates C preprocessor definitions through two core types: one for define types (`Switch`, `Int`, `String`) and another for their associated values. It supports importing existing `#define` values from header files and generating new header files with defined constants, using S-expressions for serialization and comparison. Concrete use cases include configuring build settings based on detected C environment values and persisting those settings across builds.",
      "description_length": 478,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Configurator",
      "library": "configurator",
      "description": "This module creates and manages OCaml build configurations by querying OCaml compiler settings, running C compilation tests, and handling C preprocessor definitions. It works with C code strings, compiler flags, and configuration variables, offering direct access to `ocamlc -config` values and supporting conditional compilation based on detected system properties. Concrete use cases include checking for C library availability, defining build-time constants, and generating platform-specific configuration headers.",
      "description_length": 517,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 517,
    "min_description_length": 305,
    "avg_description_length": 408.2,
    "embedding_file_size_mb": 0.07285213470458984
  }
}