{
  "package": "configurator",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:18.997238",
  "modules": [
    {
      "module_path": "Configurator.C_define.Type",
      "library": "configurator",
      "description": "This module defines and manipulates types used to represent C preprocessor define values in configuration checks. It supports operations to convert between s-expressions and the type `t`, which includes `Switch`, `Int`, and `String`, enabling serialization and comparison. It is used to interpret and store results of C define checks in build configuration scripts.",
      "description_length": 365,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Configurator.C_define.Value",
      "library": "configurator",
      "description": "This module defines a variant type `t` representing possible values for C preprocessor definitions, including boolean switches, integers, and strings. It provides functions to convert values to and from S-expressions and to compare values. This module is used to handle configuration values that are passed to C compilers, such as feature toggles or numeric/string constants used in generated code.",
      "description_length": 398,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Configurator.C_define",
      "library": "configurator",
      "description": "This module manages C preprocessor definitions by generating header files from key-value lists, where values are typed C constants like integers, strings, or boolean switches. It supports importing, serializing, and comparing these values through operations that convert between S-expressions and a variant type `t`, enabling configuration checks and build-time variable handling. With its submodules, it provides a complete pipeline from defining configuration variables to generating `#define` directives in headers such as `config.h`. Example uses include enabling feature flags, embedding version numbers, or setting platform-specific constants in C code via generated headers.",
      "description_length": 681,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Configurator.Pkg_config",
      "library": "configurator",
      "description": "This module provides functions to interface with `pkg-config` for retrieving library and compiler flags. It defines a `package_conf` type to hold lists of libraries and C flags, and uses a `t` type to represent the `pkg-config` environment. The `get` function retrieves the `pkg-config` state if available, and `query` fetches configuration for a specific package if present.",
      "description_length": 375,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Configurator",
      "library": "configurator",
      "description": "This module orchestrates OCaml project configuration by integrating C compilation tests, system feature detection, and header generation. It directly supports reading OCaml compiler variables, executing C code checks, and defining preprocessor macros, while its submodules manage typed configuration values and `pkg-config` integration. The first submodule handles C preprocessor definitions using typed key-value pairs, enabling feature flags and version embedding in generated headers like `config.h`. The second submodule retrieves library dependencies and compiler flags via `pkg-config`, using types such as `package_conf` to structure build-time configuration data.",
      "description_length": 671,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 681,
    "min_description_length": 365,
    "avg_description_length": 498.0,
    "embedding_file_size_mb": 0.01862335205078125
  }
}