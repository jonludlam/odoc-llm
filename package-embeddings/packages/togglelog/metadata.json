{
  "package": "togglelog",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:08.867791",
  "modules": [
    {
      "module_path": "Togglelog.Mapper",
      "library": "togglelog",
      "description": "This module manipulates OCaml AST expressions to inject conditional logging logic during compilation. It generates expressions that either evaluate a log statement or short-circuit to a no-op, based on compile-time configuration. It works directly with `Ppxlib_ast.Ast.expression` and extension contexts to transform code inline, ensuring type correctness of injected log statements.",
      "description_length": 383,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Togglelog.Register",
      "library": "togglelog",
      "description": "This module controls logging behavior through a mutable `enabled` flag and provides an `extractor` function that processes AST patterns to generate logging expressions. It works with OCaml's abstract syntax tree (AST) structures, particularly payloads and expressions, to enable conditional logging during compilation. Concrete use cases include injecting debug logging into generated code based on the `enabled` flag and transforming specific AST nodes to include log statements.",
      "description_length": 480,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Togglelog",
      "library": "togglelog",
      "description": "This module manipulates OCaml AST expressions to conditionally inject logging logic during compilation, using an `enabled` flag to determine whether log statements are inserted or short-circuited. It operates on `Ppxlib_ast.Ast.expression` and extension contexts, transforming specific AST nodes inline while preserving type correctness. The `extractor` function processes AST patterns to generate logging expressions, enabling use cases like embedding debug logs into generated code based on compile-time settings. Example transformations include wrapping expressions with log statements or replacing placeholders with conditional logging logic.",
      "description_length": 646,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 646,
    "min_description_length": 383,
    "avg_description_length": 503.0,
    "embedding_file_size_mb": 0.0113067626953125
  }
}