{
  "package": "ez_config",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:56:51.373882",
  "modules": [
    {
      "module_path": "EzConfig.OCaml.LowLevel",
      "library": "ez_config",
      "description": "This module enables defining and manipulating typed configuration options with support for serialization between `option_value` and primitive types (integers, floats, strings) as well as structured data like lists and tuples. It operates on configuration files, sections, and options, offering hooks for value transformations, metadata management (e.g., help strings, advanced status), and custom (de)serialization for arrays or command-line argument parsing. Use cases include program configuration with type-safe defaults, extensible option classes, and bidirectional conversion between abstract configuration representations and runtime values.",
      "description_length": 647,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzConfig.OCaml.OP",
      "library": "ez_config",
      "description": "This module defines operations for working with configuration options. It provides a dereference operator `!!` to extract values from a config option and an assignment operator `=:=` to set values. These are used to manipulate optional configuration parameters in a type-safe way.",
      "description_length": 280,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzConfig.OCaml",
      "library": "ez_config",
      "description": "This module supports creating, loading, and modifying configuration files with typed key-value pairs (strings, integers, booleans, and structured data like tuples or maps), including metadata for documentation and dynamic behavior via pre/post-save hooks. It operates on hierarchical configuration structures with sections and provides type-safe access through operators `!!` and `=:=`, enabling use cases like application settings management, persistent state serialization, and error-resilient configuration parsing with human-readable diagnostics for malformed inputs.",
      "description_length": 571,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "EzConfig.OP",
      "library": "ez_config",
      "description": "This module provides direct access and assignment operations for configuration options. It works with typed configuration values represented by the `config_option` type. Use it to safely retrieve or set specific configuration parameters in a type-safe manner.",
      "description_length": 259,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "EzConfig",
      "library": "ez_config",
      "description": "This module supports defining and managing typed configuration options with metadata, enabling operations like loading, saving, and modifying hierarchical configuration files. It works with structured data types such as strings, integers, booleans, floats, lists, maps, and nested sections, while providing error handling and dynamic hooks for preprocessing or validation. It is suited for applications requiring type-safe configuration management with robust parsing, serialization, and documentation support for complex settings.",
      "description_length": 531,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 5,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8333333333333334
  },
  "statistics": {
    "max_description_length": 647,
    "min_description_length": 259,
    "avg_description_length": 457.6,
    "embedding_file_size_mb": 0.07285594940185547
  }
}