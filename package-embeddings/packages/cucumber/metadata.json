{
  "package": "cucumber",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 11,
  "creation_timestamp": "2025-07-15T23:06:25.387697",
  "modules": [
    {
      "module_path": "Cucumber.Lib",
      "library": "cucumber",
      "description": "This module creates and configures a Cucumber testing context with step definitions, hooks, and dialect settings. It supports attaching Gherkin steps using regular expressions, managing test state, and defining Before/After hooks for setup and teardown. Use it to implement custom step definitions that parse feature files, execute test logic, and report outcomes.",
      "description_length": 364,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cucumber.Step",
      "library": "cucumber",
      "description": "This module defines the structure and manipulation functions for Cucumber steps, including support for parsing and matching step text against regular expressions. It handles steps that may contain arguments in the form of docstrings or tables, and provides functions to extract matched groups and formatted step text. Concrete use cases include validating step definitions against feature file entries and extracting structured data from step arguments during test execution.",
      "description_length": 475,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cucumber.Docstring",
      "library": "cucumber",
      "description": "This module defines a type `t` for representing doc strings, which are used to pass multi-line text to step definitions. It provides `string_of_docstring` to convert a doc string to a regular string and `transform` to apply a function to the underlying string content. This module is useful for handling formatted text input in Gherkin scenarios, such as passing JSON or code snippets to step implementations.",
      "description_length": 409,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cucumber.Pickle",
      "library": "cucumber",
      "description": "This module processes Cucumber feature files into executable test scenarios called pickles. It provides operations to load feature files, extract scenario steps and names, run setup and teardown hooks, and filter scenarios based on tags. It works with structured test data like feature files, step definitions, and tag lists, enabling concrete use cases such as test execution pipelines and scenario-based testing workflows.",
      "description_length": 424,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cucumber.Outcome",
      "library": "cucumber",
      "description": "This module defines a sum type for test outcomes with values like Pass, Fail, and Pending, and provides functions to count occurrences of each outcome in a list. It includes utilities to convert outcomes to strings, print formatted results, and calculate an exit status from a list of outcomes. Use cases include summarizing test results, generating reports, and determining build success in testing frameworks.",
      "description_length": 411,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cucumber.Location",
      "library": "cucumber",
      "description": "Represents locations within Gherkin feature files using a custom type `t`. Provides `string_of_location` to convert a location to a string and `from_command_line` to create a default location for command-line tags. Used to track line and column positions when parsing or referencing feature file elements.",
      "description_length": 305,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cucumber.Dialect",
      "library": "cucumber",
      "description": "This module defines a comprehensive set of language dialects used for localizing Gherkin feature files. It includes specific dialects such as English variants, European and Asian languages, and regional language forms. The `string_of_dialect` function converts a dialect value to its corresponding string representation, enabling selection and display of the appropriate localization settings.",
      "description_length": 393,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cucumber.Report",
      "library": "cucumber",
      "description": "Prints a formatted report to stdout, taking a string title and a list of outcome lists as input. Works with string and list data types to structure and display test results. Useful for summarizing test execution outcomes in a readable format.",
      "description_length": 242,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cucumber.Tag",
      "library": "cucumber",
      "description": "This module defines operations for parsing and comparing Cucumber tags, which are used to organize and filter scenarios. It provides functions to convert tags to strings, compare them for equality, and split tag strings into allowed and disallowed lists. These operations support scenario selection and hook restriction based on tag expressions.",
      "description_length": 345,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cucumber.Table",
      "library": "cucumber",
      "description": "This module processes Cucumber data tables by converting them into structured mappings or applying transformations to rows. It supports operations like mapping rows to key-value pairs using headers, transforming rows with custom logic, and extracting columns as lists. Concrete use cases include parsing test data for BDD scenarios, validating tabular input against expected formats, and transforming table rows into domain-specific data structures.",
      "description_length": 449,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cucumber",
      "library": "cucumber",
      "description": "This module orchestrates behavior-driven testing by integrating context configuration, step definition, and scenario execution components. It enables defining steps with regex patterns, managing test state with hooks, parsing Gherkin features into executable scenarios, and reporting results based on structured outcomes. Key data types include test outcomes (Pass, Fail, Pending), docstrings for multiline input, dialects for localization, and data tables for structured input. Examples include parsing a feature file into scenarios with tags, extracting step arguments into JSON, and generating a formatted test summary report.",
      "description_length": 629,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 629,
    "min_description_length": 242,
    "avg_description_length": 404.1818181818182,
    "embedding_file_size_mb": 0.040340423583984375
  }
}