{
  "package": "parsite",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:26.672667",
  "modules": [
    {
      "module_path": "Parsite.Types.PResultM",
      "description": "Wraps tuples in a Win constructor and chains operations using bind, applying functions only when the result is successful. Handles error propagation by applying a function to the error message when the result is a Lose. Supports creating error states with custom messages and reversing the bind flow for error cases.",
      "description_length": 316,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsite.Combinators",
      "description": "Provides combinators for parsing strings by combining and transforming parsers. Operates on parser functions that take a string and return a result with a parsed value and remaining input. Enables tasks like parsing structured text, validating input formats, and extracting specific segments from a string.",
      "description_length": 306,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsite.Types",
      "description": "Encapsulates tuple operations within a Win constructor, enabling sequential processing with bind that propagates success or transforms errors via a Lose. Supports custom error messages and reverses computation flow on failure. Key operations include binding functions to successful results and transforming error values. Examples include chaining parsing steps that fail gracefully or modifying error messages during data validation.",
      "description_length": 433,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "parsite",
      "description": "Provides functions for parsing strings using monadic combinators, including sequence, choice, and repetition operations. Works with input strings and produces parsed results or error states. Used to build custom parsers for structured text formats like configuration files or domain-specific languages.",
      "description_length": 302,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsite",
      "description": "Combines parser combinators with tuple-based error handling to process and validate structured input. It uses parser functions that return parsed values and remaining input, along with Win and Lose constructors to manage success and error states. Operations include binding parsers together, transforming errors, and customizing failure messages. This enables tasks like parsing CSV rows with error recovery or validating JSON fields while preserving context on failure.",
      "description_length": 470,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 470,
    "min_description_length": 302,
    "avg_description_length": 365.4,
    "embedding_file_size_mb": 0.0186004638671875
  }
}