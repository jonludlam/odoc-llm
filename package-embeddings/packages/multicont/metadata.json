{
  "package": "multicont",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:16.722552",
  "modules": [
    {
      "module_path": "Multicont.Deep",
      "description": "Promotes linear deep continuations into multi-shot resumptions, allowing context to be reinstated with a value or aborted with an exception. Resumptions capture execution contexts and can be cloned or discarded, enabling advanced control flow management. Used to implement non-local exits, exception handling, and cooperative multitasking within effect systems.",
      "description_length": 361,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Multicont.Shallow",
      "description": "Promotes linear continuations to multi-shot resumptions, resumes them with values or exceptions, and allows aborting with or without backtraces. Operates on resumptions and continuations with specific type parameters for input and output. Enables precise control over program flow in effectful computations, such as implementing custom control structures or error handling.",
      "description_length": 373,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "multicont",
      "description": "Provides functions to capture, resume, and manipulate multi-shot continuations, enabling non-local control flow with repeated invocations. Operates on continuation values derived from OCaml's linear continuation syntax. Enables implementation of coroutines, backtracking algorithms, and stateful event loops.",
      "description_length": 308,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Multicont",
      "description": "manages multi-shot resumptions by transforming linear continuations into reusable execution contexts, supporting resumption with values, exceptions, or abortion. It introduces types for resumptions and continuations, with operations to resume, clone, and abort them, parameterized by input and output types. This enables complex control flows like non-local exits, custom error handling, and cooperative multitasking. For example, it can resume a suspended computation with a new value or propagate an exception to an earlier context.",
      "description_length": 534,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 534,
    "min_description_length": 308,
    "avg_description_length": 394.0,
    "embedding_file_size_mb": 0.014927864074707031
  }
}