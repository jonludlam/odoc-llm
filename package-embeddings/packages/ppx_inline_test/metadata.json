{
  "package": "ppx_inline_test",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T23:04:03.962793",
  "modules": [
    {
      "module_path": "Ppx_inline_test_libname",
      "library": "ppx_inline_test.libname",
      "description": "This module provides a function `get` that retrieves the name of a library specified via the `-inline-test-lib` command line argument or through a ppxlib cookie. It works with string values representing library names and optional annotations. Use cases include configuring test execution contexts in ppx-based testing frameworks like ppx_bench and ppx_inline_test.",
      "description_length": 364,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_inline_test_lib",
      "library": "ppx_inline_test.runtime-lib",
      "description": "This module provides runtime support for inline tests, including flags to detect test execution context and functions to initialize the test runner with custom command-line arguments. It works with standard OCaml data types like strings and string lists, along with custom variants to represent testing states. It is used to control test execution flow and configure test environments programmatically.",
      "description_length": 402,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Inline_test_config",
      "library": "ppx_inline_test.config",
      "description": "This module defines configuration options for executing inline tests, primarily through a `pre_test_hook` that runs setup logic before tests start. It works with unit values and functions, focusing on test initialization rather than data manipulation. A concrete use case is setting up logging or environment state before running individual test cases.",
      "description_length": 352,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_inline_test",
      "library": "ppx_inline_test",
      "description": "Handles conditional inclusion or removal of test code based on command-line flags. Works with OCaml parsetree expressions and structures, using location and tag information to validate and transform test annotations. Used to implement inline test macros that are stripped during compilation when tests are disabled.",
      "description_length": 315,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 4,
    "filtered_empty_modules": 3,
    "retention_rate": 0.5714285714285714
  },
  "statistics": {
    "max_description_length": 402,
    "min_description_length": 315,
    "avg_description_length": 358.25,
    "embedding_file_size_mb": 0.05838584899902344
  }
}