{
  "package": "ppx_protocol_conv_yaml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:35.226328",
  "modules": [
    {
      "module_path": "Protocol_conv_yaml.Yaml.Make",
      "library": "ppx_protocol_conv_yaml",
      "description": "This module supports bidirectional conversion between OCaml data structures and YAML values, handling primitive types (integers, strings, booleans) and complex structures like records, variants, lists, arrays, and options. It employs explicit error propagation via `result` types to ensure robust serialization and deserialization of nested or polymorphic data. Typical applications include parsing configuration files, mapping YAML documents to typed OCaml models, and enabling type-safe data interchange with YAML-based APIs or storage formats.",
      "description_length": 546,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Protocol_conv_yaml.Yaml",
      "library": "ppx_protocol_conv_yaml",
      "description": "This module enables bidirectional conversion between OCaml values and YAML abstract syntax trees, supporting primitives like integers, strings, and booleans, as well as structured data such as records, tuples, and variants. It provides core operations for parsing and emitting YAML, with robust error handling through result types and exceptions, and includes utilities for working with containers like arrays, lists, and optional values. Submodules extend this functionality to support complex data transformations, enabling applications such as parsing configuration files, mapping YAML documents to typed OCaml models, and serializing hierarchical data for storage or inter-process communication. Specific examples include converting a YAML configuration file into a typed OCaml record or serializing a nested OCaml data structure into a YAML document for API exchange.",
      "description_length": 872,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol_conv_yaml",
      "library": "ppx_protocol_conv_yaml",
      "description": "This module enables bidirectional conversion between OCaml values and YAML abstract syntax trees, supporting primitives like integers, strings, and booleans, as well as structured data such as records, tuples, and variants. It provides core operations for parsing and emitting YAML with robust error handling through result types and exceptions, and includes utilities for working with containers like arrays, lists, and optional values. Submodules extend this functionality to support complex data transformations, enabling applications such as parsing configuration files, mapping YAML documents to typed OCaml models, and serializing hierarchical data for storage or inter-process communication. Specific examples include converting a YAML configuration file into a typed OCaml record or serializing a nested OCaml data structure into a YAML document for API exchange.",
      "description_length": 871,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 3,
    "filtered_empty_modules": 1,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 872,
    "min_description_length": 546,
    "avg_description_length": 763.0,
    "embedding_file_size_mb": 0.011304855346679688
  }
}