{
  "package": "ppx_protocol_conv_yaml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:30:16.551713",
  "modules": [
    {
      "module_path": "Protocol_conv_yaml.Yaml.Make",
      "description": "Maps record and variant names using attributes, transforms constructors without arguments into strings, omits fields with default values, evaluates lazy fields eagerly, and fails on unknown record fields. Operates on OCaml records and variants with custom serialization rules. Used to control JSON or similar format generation from OCaml types with precise naming and structure adjustments.",
      "description_length": 390,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol_conv_yaml.Yaml",
      "description": "handles custom serialization of OCaml records and variants by mapping names via attributes, converting nullary constructors to strings, omitting fields with defaults, and evaluating lazy values, ensuring strict handling of unknown fields. It supports precise control over how data is represented in formats like JSON. Key operations include name transformation, field omission, and constructor conversion. For example, it can serialize a variant type with renamed constructors or exclude optional fields that are not set.",
      "description_length": 521,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ppx_protocol_conv_yaml",
      "description": "Provides functions to generate serialization and deserialization code for OCaml types using ppx syntax extensions. Works with custom type definitions and supports plugable drivers for various formats. Enables direct conversion of variant and record types to and from external representations like JSON or binary.",
      "description_length": 312,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Protocol_conv_yaml",
      "description": "handles custom serialization of OCaml records and variants by mapping names via attributes, converting nullary constructors to strings, omitting fields with defaults, and evaluating lazy values, ensuring strict handling of unknown fields. It provides operations for name transformation, field omission, and constructor conversion, enabling precise control over data representation in formats like JSON. For instance, it can serialize a variant type with renamed constructors or exclude optional fields that are not set. The main data types include OCaml records, variants, and lazy values, with transformations applied during serialization.",
      "description_length": 640,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 4,
    "filtered_empty_modules": 2,
    "retention_rate": 0.6666666666666666
  },
  "statistics": {
    "max_description_length": 640,
    "min_description_length": 312,
    "avg_description_length": 465.75,
    "embedding_file_size_mb": 0.0149383544921875
  }
}