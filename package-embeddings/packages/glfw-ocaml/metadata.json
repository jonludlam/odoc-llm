{
  "package": "glfw-ocaml",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:05:23.690773",
  "modules": [
    {
      "module_path": "GLFW.Image",
      "library": "glfw-ocaml",
      "description": "Represents image data for custom cursors and window icons with pixel storage and dimensions. Provides a structured format for raw pixel data used in GUI elements. Use to load or generate images for application windows and interactive components.",
      "description_length": 245,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GLFW.WindowHint",
      "library": "glfw-ocaml",
      "description": "This module sets window creation hints for OpenGL context and window behavior, such as version, profile, and visibility. It works with integer and boolean values mapped to GLFW's internal hint constants. Use it before creating a window to configure its properties.",
      "description_length": 264,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GLFW.WindowUpdateableAttribute",
      "library": "glfw-ocaml",
      "description": "This module manages window attributes that can be updated dynamically, such as size, position, and visibility. It operates on window objects, providing functions to modify and query properties like resizable, visible, and focused states. Use this module to adjust window behavior at runtime, for example, toggling fullscreen or centering a window on the screen.",
      "description_length": 361,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GLFW.S",
      "library": "glfw-ocaml",
      "description": "This module provides deprecated window hint and attribute management functions using separate types with shared constructor names. It works with window configuration values like OpenGL versions, window decorations, and input modes. Use this only for backward compatibility when upgrading from older versions of the GLFW binding.",
      "description_length": 328,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GLFW.GammaRamp",
      "library": "glfw-ocaml",
      "description": "Handles gamma ramp creation for monitor color calibration. Works with 16-bit unsigned integer arrays to define red, green, and blue intensity mappings. Used to adjust display color output by setting custom gamma curves of a specific size.",
      "description_length": 238,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GLFW.WindowAttribute",
      "library": "glfw-ocaml",
      "description": "This module retrieves window attributes such as size, position, and state (e.g., focused, iconified) using direct queries on window objects. It operates on window handles created via the core module, enabling inspection of runtime window properties. Useful for adjusting rendering or input behavior based on current window conditions, such as resizing or focus changes.",
      "description_length": 369,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GLFW.A",
      "library": "glfw-ocaml",
      "description": "This module defines window hints and attributes for configuring and querying window properties in GLFW. It supports operations like setting hints for window creation, retrieving attribute values, and modifying attributes post-creation, working with types such as booleans, integers, and specific enums like `opengl_profile`. Concrete use cases include disabling window resizing, specifying OpenGL profiles, setting refresh rates, and checking if a window is hovered.",
      "description_length": 466,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GLFW",
      "library": "glfw-ocaml",
      "description": "This module provides core functionality for managing windows, input, and OpenGL contexts in graphical applications. It supports creating windows with customized hints, manipulating window properties like size and visibility, and handling input events. You can load images for cursors and icons, adjust gamma ramps for color calibration, and query window attributes at runtime. Use it to build interactive applications with dynamic window behavior and custom rendering settings.",
      "description_length": 477,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 477,
    "min_description_length": 238,
    "avg_description_length": 343.5,
    "embedding_file_size_mb": 0.02947711944580078
  }
}