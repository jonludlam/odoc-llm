{
  "package": "dkml-package-console",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:11:21.225946",
  "modules": [
    {
      "module_path": "Dkml_package_console_uninstaller",
      "library": "dkml-package-console.uninstaller",
      "description": "Performs the uninstallation of a package given an ABI context, program name, and package arguments. Works with structured data types representing installation contexts and package metadata. Used to remove installed packages in a platform-specific manner during uninstall workflows.",
      "description_length": 281,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dkml_package_console_entry",
      "library": "dkml-package-console.entry",
      "description": "This module defines the entry point for handling installation or uninstallation operations based on a specified ABI context. It takes an install direction and a target ABI, triggering the appropriate logic for managing the installation state. It is used directly by end-user commands to initiate installation or removal of packages tied to a specific runtime environment.",
      "description_length": 371,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dkml_package_console_setup",
      "library": "dkml-package-console.setup",
      "description": "Performs setup operations for a console-based package installation. It configures the environment using ABI version 2 context, a package identifier, organization details, program name, assets, metadata, and command-line arguments. This function is used during the installation phase to initialize program-specific settings and prepare for execution.",
      "description_length": 349,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dkml_package_console_create",
      "library": "dkml-package-console.create",
      "description": "Handles the creation of installers for a given program by taking organization details, program name, and program information, then generating the necessary installation artifacts. Works with custom author and program data types defined in the common module. Used during the build process to produce distributable installer packages for specific applications.",
      "description_length": 358,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dkml_package_console_common.Windows_registry.Add_remove_programs",
      "library": "dkml-package-console.common",
      "description": "This module manages Windows registry entries for programs in the Add/Remove Programs list. It provides operations to add a program entry with details like installation path, organization, version, and assets, and to remove an entry by program name. It works directly with Fpath.t for paths and custom types for program metadata. Use this module during installation or uninstallation to ensure proper visibility of the program in system settings.",
      "description_length": 445,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dkml_package_console_common.Windows_registry",
      "library": "dkml-package-console.common",
      "description": "Manages Windows registry entries for installed programs, enabling addition and removal of entries with specific metadata. Operates on Fpath.t paths and custom program metadata types to register or deregister applications. Used during installation or uninstallation to control program visibility in system settings.",
      "description_length": 314,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dkml_package_console_common.Author_types",
      "library": "dkml-package-console.common",
      "description": "This module defines data structures for program metadata, including build information, program names with various naming conventions, organization details, program assets like logos, and program-specific configuration such as URLs and uninstaller flags. It supports operations to specify and manage application identity, branding, and deployment settings. Use cases include configuring installer generation, setting application display names, and embedding version or organization metadata into binaries.",
      "description_length": 504,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dkml_package_console_common",
      "library": "dkml-package-console.common",
      "description": "This module handles operations for console-based installers, including privilege elevation, execution of commands, and installation path determination. It works with component registries, command-line arguments, and platform-specific structures like Windows registry entries. Concrete use cases include launching elevated processes using `gsudo.exe` or Unix equivalents, determining user installation directories, and checking administrative requirements for install or uninstall operations.",
      "description_length": 491,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 504,
    "min_description_length": 281,
    "avg_description_length": 389.125,
    "embedding_file_size_mb": 0.11632156372070312
  }
}