{
  "package": "dkml-package-console",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:07:50.159233",
  "modules": [
    {
      "module_path": "Dkml_package_console_uninstaller",
      "library": "dkml-package-console.uninstaller",
      "description": "Performs the uninstallation of a package by taking an execution context, a program name, and package-specific arguments. Works with structured data types representing system architecture, program identifiers, and command-line parameters. Used to cleanly remove installed packages from the system during maintenance or application lifecycle management.",
      "description_length": 351,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dkml_package_console_setup",
      "library": "dkml-package-console.setup",
      "description": "Implements the core setup logic for console-based package installation by configuring program assets, organization details, and installation context. It works with structured data types including ABI contexts, program names, organizations, and package arguments. This function is used during the initialization phase of a package installation to prepare environment-specific configurations and metadata.",
      "description_length": 403,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dkml_package_console_common.Windows_registry.Add_remove_programs",
      "library": "dkml-package-console.common",
      "description": "This module manages Windows registry entries for programs in the Add/Remove Programs list. It provides operations to add a program entry with details like installation path, version, and organization, and to remove an existing entry by program name. It works with data types such as program name, organization, installation prefix, and version strings.",
      "description_length": 352,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dkml_package_console_common.Windows_registry",
      "library": "dkml-package-console.common",
      "description": "This module provides operations to manipulate Windows registry entries for installed programs, specifically managing the Add/Remove Programs list. It supports adding and removing program entries with details including installation path, version, and organization. Key data types include program name, organization, installation prefix, and version strings. For example, you can register a new application with its metadata or remove an entry by specifying the program name.",
      "description_length": 473,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dkml_package_console_common.Author_types",
      "library": "dkml-package-console.common",
      "description": "This module defines data structures for program metadata, including build information, program names with various naming conventions, organization details, program assets like icons, and program-specific properties such as URLs and installer settings. It supports operations to specify and manage application identity, branding, and deployment characteristics. Use cases include configuring installer generation, setting application metadata for cross-platform builds, and embedding version and organization details into binaries.",
      "description_length": 530,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dkml_package_console_common",
      "library": "dkml-package-console.common",
      "description": "This module orchestrates console-based installer workflows by managing privilege elevation, command execution, and path resolution across platforms, while integrating with component registries and command-line argument parsers. It supports concrete actions like launching elevated commands via `gsudo.exe` or Unix equivalents, determining user-specific installation directories, and registering or unregistering programs in the Windows registry with full metadata. Data types such as program names, organizations, versions, and installation prefixes enable precise control over installer behavior, with cross-platform support for embedding branding assets and configuring installer settings. Examples include registering an application in Add/Remove Programs, parsing installer command-line flags, or launching elevated setup scripts with platform-specific execution policies.",
      "description_length": 876,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dkml_package_console_entry",
      "library": "dkml-package-console.entry",
      "description": "Implements the entry point for handling installation or uninstallation based on the provided target ABI and installation direction. Works directly with `Dkml_install_register.install_direction` and `Dkml_install_api__Types.Context.Abi_v2.t` types. Used to initiate end-user installation or uninstallation workflows for specific target architectures.",
      "description_length": 349,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dkml_package_console_create",
      "library": "dkml-package-console.create",
      "description": "Handles the creation of installers for a given program by taking organization details, program name, and program information, then generating the necessary installation artifacts. Works with custom types representing organizations, program metadata, and configuration settings. Used during the build process to produce distributable installer packages for end users.",
      "description_length": 366,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 876,
    "min_description_length": 349,
    "avg_description_length": 462.5,
    "embedding_file_size_mb": 0.029466629028320312
  }
}