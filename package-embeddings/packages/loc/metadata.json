{
  "package": "loc",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:03:10.172503",
  "modules": [
    {
      "module_path": "Loc.Private.File_cache",
      "library": "loc",
      "description": "This module caches file contents and provides direct access to file paths and lines. It works with file paths as strings and line numbers as integers. Use it to retrieve specific lines from cached files during testing.",
      "description_length": 218,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Loc.Offset",
      "library": "loc",
      "description": "This module represents code locations as integer offsets, primarily used to track positions within source files. It includes functions to convert between offsets and standard lexing positions, enabling precise error reporting and source mapping. Offsets can be compared for equality and serialized, making them suitable for use in ASTs and error handling workflows.",
      "description_length": 365,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Loc.Private",
      "library": "loc",
      "description": "This module provides direct access to file paths and line numbers through its `File_cache` submodule, which retrieves specific lines from cached files. It works with file paths as strings and line numbers as integers. Designed exclusively for testing, it enables validation of location-based data extraction from files without parsing constraints.",
      "description_length": 347,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Loc.Lexbuf_loc",
      "library": "loc",
      "description": "Lexbuf_loc provides functions to create and manipulate location values from lexing positions, specifically using `Lexing.position` records to track start and end points in source code. It works with the `t` type, which pairs start and stop positions to represent a source code range. This module is used during parsing to associate AST nodes with their exact locations in the input, enabling precise error reporting with file, line, and character information.",
      "description_length": 459,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Loc.Range",
      "library": "loc",
      "description": "This module represents ranges of code locations defined by start and stop offsets. It provides operations to construct ranges from lexing positions, compare ranges for equality, and generate S-expressions for serialization. A key function combines two ranges into a single encompassing range, useful for tracking extended spans of source code during parsing or analysis.",
      "description_length": 370,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Loc.File_cache",
      "library": "loc",
      "description": "Stores and manages file content metadata for accurate location tracking in parsed code. It provides efficient access to line positions and offsets by caching newline character locations. Used when constructing or manipulating AST nodes to ensure precise error reporting and source location handling.",
      "description_length": 299,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Loc.Txt",
      "library": "loc",
      "description": "This module provides a way to attach source code locations to arbitrary values, typically used to associate positions in the input with parsed symbols. It supports creating located values from position pairs, extracting the location or the underlying value, and mapping over the value while preserving the location. Commonly used in parser rules to track the source location of AST elements, enabling precise error reporting and debugging.",
      "description_length": 439,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Loc",
      "library": "loc",
      "description": "The module provides operations to create, compare, and convert source code location values using lexing positions, offsets, and ranges for precise error reporting and AST decoration. It works with structured location data like file metadata, line/column information, and source ranges to support parsing workflows, diagnostic tools, and serialization of positional context in code analysis tasks.",
      "description_length": 396,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 459,
    "min_description_length": 218,
    "avg_description_length": 361.625,
    "embedding_file_size_mb": 0.11632061004638672
  }
}