{
  "package": "asn1-combinators",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 3,
  "creation_timestamp": "2025-08-14T22:49:10.232164",
  "modules": [
    {
      "module_path": "Asn.S",
      "library": "asn1-combinators",
      "description": "The module provides combinators for constructing and manipulating ASN.1 structures like sequences, sets, choices, and tagged types, alongside primitive encodings for BOOLEAN, INTEGER, OCTET STRING, and time values. It operates on typed abstract syntax trees represented by `'a t` and element-level values, using OCaml algebraic data types and tuples to model structured data. These tools are used to define schema-driven encoders/decoders for protocols relying on ASN.1, such as X.509 certificates, with explicit error handling for malformed inputs.",
      "description_length": 549,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Asn.OID",
      "library": "asn1-combinators",
      "description": "This module implements object identifier (OID) manipulation with operations for constructing OIDs from integer components, appending nodes, and converting between string and internal representations. It works with the abstract syntax tree of ASN.1 grammars, specifically handling OIDs as sequences of integers with validation. Concrete use cases include parsing dotted-decimal strings into structured OIDs, building hierarchical identifiers for cryptographic algorithms or X.509 extensions, and comparing or hashing OIDs for use in data structures.",
      "description_length": 548,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asn",
      "library": "asn1-combinators",
      "description": "This module supports constructing and manipulating ASN.1 abstract syntax trees using OCaml algebraic data types, with explicit handling of object identifiers (OIDs) as integer sequences. It provides encoders and decoders for ASN.1 structures under BER and DER rules, enabling schema-driven parsing and serialization of complex data like X.509 certificates. Specific operations include OID construction from dotted strings, structured data encoding, and precise decoding with error handling for malformed inputs.",
      "description_length": 511,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 549,
    "min_description_length": 511,
    "avg_description_length": 536.0,
    "embedding_file_size_mb": 0.043883323669433594
  }
}