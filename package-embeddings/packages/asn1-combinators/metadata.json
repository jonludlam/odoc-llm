{
  "package": "asn1-combinators",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:32.207004",
  "modules": [
    {
      "module_path": "Asn.OID",
      "library": "asn1-combinators",
      "description": "This module implements object identifier manipulation with operations to construct, compare, and convert OIDs. It works with a single abstract type representing OIDs, built from integers and stored internally as a structured list of nodes. Use cases include parsing OID strings into structured values, extending existing OIDs with additional nodes, and formatting OIDs for display or serialization.",
      "description_length": 398,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asn.S",
      "library": "asn1-combinators",
      "description": "This library provides operations for constructing and manipulating ASN.1 abstract syntax trees using primitives like SEQUENCE, SET, IMPLICIT/EXPLICIT tagging, and combinators for mapping, optional fields, and labeled elements. It works with OCaml types such as `'a t` for typed syntax representations, tuples, variants, strings, integers, and time values, aligning with ASN.1 encoding rules for BER/CER/DER. It is particularly useful for implementing network protocols, cryptographic data formats (e.g., X.509 certificates), or systems requiring precise ASN.1 serialization and parsing.",
      "description_length": 586,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Asn",
      "library": "asn1-combinators",
      "description": "This module enables working with ASN.1 abstract syntax and object identifiers directly in OCaml, supporting the construction, manipulation, and encoding of structured data according to ASN.1 standards. It provides core data types for abstract syntax trees and OIDs, with operations to build, extend, and serialize them using BER and DER encoding rules. Child modules focus on OID manipulation\u2014allowing structured parsing, extension, and formatting\u2014and on ASN.1 syntax tree construction using combinators for SEQUENCE, SET, and tagged types. Examples include parsing OID strings into structured values, defining ASN.1-based message formats for cryptographic protocols, and serializing complex data structures for network transmission.",
      "description_length": 733,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 733,
    "min_description_length": 398,
    "avg_description_length": 572.3333333333334,
    "embedding_file_size_mb": 0.011321067810058594
  }
}