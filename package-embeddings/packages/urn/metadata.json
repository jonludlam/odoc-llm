{
  "package": "urn",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:41.722493",
  "modules": [
    {
      "module_path": "Urn.FloatWeight",
      "library": "urn",
      "description": "This module defines float-based weights for an urn system, supporting arithmetic operations and random sampling. It provides functions for comparing, adding, subtracting, and sampling float weights, ensuring correct behavior for weighted random selection. Concrete use cases include implementing weighted random sampling with floating-point precision and managing dynamic probability distributions.",
      "description_length": 398,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Urn.U",
      "library": "urn",
      "description": "This module implements an efficient urn data structure for weighted random sampling, supporting operations to create, modify, and sample from urns with precise time complexity guarantees. It works with a user-defined weight type and elements of any type `'a`, organizing them in a structure that allows logarithmic-time sampling and updates. Concrete use cases include probabilistic algorithms, randomized data processing, and simulations where elements are selected or replaced based on dynamic weights.",
      "description_length": 504,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Urn.Make",
      "library": "urn",
      "description": "This module creates urns for weighted random sampling using a specified weight type. It supports operations to construct and modify urns with elements and their associated weights, and to sample or replace elements based on their weights. Concrete use cases include implementing probabilistic algorithms, simulations, or any application requiring efficient weighted random selection with dynamic updates.",
      "description_length": 404,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Urn.WeightType",
      "library": "urn",
      "description": "This module defines the required interface for weight types used in a weighted random sampling urn structure. It includes operations for comparing, adding, subtracting, and sampling weights, along with a zero value. It supports concrete use cases like selecting items from a collection where each item has a numeric weight, such as weighted random selection in games or simulations.",
      "description_length": 382,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Urn.IntWeight",
      "library": "urn",
      "description": "This module defines integer weights for an urn system using standard arithmetic operations and uniform random sampling via `Random.int`. It supports weight comparison, addition, subtraction, and sampling within a total order group structure. Concrete use cases include implementing weighted random selection algorithms where weights are integers, such as load balancing or probabilistic data processing.",
      "description_length": 403,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Urn",
      "library": "urn",
      "description": "This module implements a weighted random sampling system using a custom weight type that forms a totally ordered group, enabling operations like insertion, removal, and logarithmic-time sampling. It supports dynamic updates to element weights and efficient selection based on non-uniform probabilities, with concrete applications in probabilistic algorithms, simulations, and priority-based scheduling. Submodules define weight type interfaces, provide concrete float and integer weight implementations, and offer optimized urn structures that ensure precise time complexity for sampling and modification operations. Examples include adjusting weights in a load balancer, simulating dice rolls with variable probabilities, or selecting elements from a dynamic distribution.",
      "description_length": 773,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 773,
    "min_description_length": 382,
    "avg_description_length": 477.3333333333333,
    "embedding_file_size_mb": 0.02222156524658203
  }
}