{
  "package": "fit",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:43.621449",
  "modules": [
    {
      "module_path": "Fit.Decode",
      "description": "Decodes time-stamp fields from integer values into floating-point timestamps, scales numerical values using a specified factor and offset, and converts integer-based latitude or longitude coordinates into floating-point representations. Works with integer and floating-point values to interpret encoded data according to specific format definitions. Used to process FIT file records where values are stored in compressed or scaled forms.",
      "description_length": 437,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fit.Record",
      "description": "Provides functions to decode structured data from binary formats, including parsing fields, validating lengths, and extracting values. Works with custom record types that define field names, types, and offsets. Used to process network packets and file formats with fixed layouts.",
      "description_length": 279,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "fit",
      "description": "Parses binary FIT files, extracting records with structured data including timestamps and message-specific fields. It processes binary data into OCaml records, mapping message numbers to their corresponding field values. Used to convert FIT file content into JSON for analysis or integration with other systems.",
      "description_length": 311,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fit",
      "description": "Converts encoded integer values into meaningful floating-point representations, including timestamps, scaled numerical data, and geographic coordinates. Parses structured binary data by interpreting field definitions, validating lengths, and extracting values according to specified layouts. Supports operations such as timestamp decoding, value scaling, and coordinate conversion, as well as binary record parsing for network and file formats. Examples include converting a 32-bit integer to a floating-point timestamp and extracting a scaled sensor value from a binary record.",
      "description_length": 578,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 578,
    "min_description_length": 279,
    "avg_description_length": 401.25,
    "embedding_file_size_mb": 0.014960289001464844
  }
}