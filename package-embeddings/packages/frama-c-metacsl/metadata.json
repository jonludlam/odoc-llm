{
  "package": "frama-c-metacsl",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:43.563922",
  "modules": [
    {
      "module_path": "MetAcsl.Meta_utils.StrSet",
      "library": "frama-c-metacsl.core",
      "description": "This module implements an immutable, sorted string set structure with operations for both standard set-theoretic manipulations (union, intersection, difference) and functional transformations (mapping, filtering, folding). It works with ordered string collections, supporting efficient queries, bulk conversions to and from sequences, and safe iterative processing with customizable traversal order. Typical applications include managing unique string identifiers, processing ordered string data with set operations, and building immutable string collections from sequential sources.",
      "description_length": 583,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MetAcsl.Meta_run",
      "library": "frama-c-metacsl.core",
      "description": "Translates a project into a new version with modified assertions and bindings. It processes functions and their specifications, adjusting identifiers and assertions based on given options. This module is used when transforming code for analysis or instrumentation, particularly in contexts requiring precise control over assertion placement and function binding.",
      "description_length": 362,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MetAcsl.Meta_utils",
      "library": "frama-c-metacsl.core",
      "description": "This module provides an immutable, sorted string set structure with efficient set-theoretic operations like union, intersection, and difference, as well as functional transformations such as map, filter, and fold. It supports ordered string collections with customizable traversal, bulk conversions to and from sequences, and safe iteration. You can use it to manage unique string identifiers, process ordered string data with set operations, or build immutable collections from sequential sources. For example, you can compute the intersection of two sorted string sets or map a function over all elements while preserving order.",
      "description_length": 630,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MetAcsl",
      "library": "frama-c-metacsl.core",
      "description": "This module combines code transformation capabilities with efficient immutable string set operations. It enables precise modification of function bindings and assertions in a project while providing a robust structure for managing ordered, unique string collections. Users can transform code for analysis, then track or manipulate associated string identifiers using set operations. For example, you can process a function's specifications, adjust its assertions, and compute the set of variables involved using ordered string sets.",
      "description_length": 532,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 630,
    "min_description_length": 362,
    "avg_description_length": 526.75,
    "embedding_file_size_mb": 0.014958381652832031
  }
}