{
  "package": "ldp",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-06-18T16:34:19.469865",
  "modules": [
    {
      "module_path": "Ldp.Containers.Make",
      "description": "This module provides HTTP operations such as GET, POST, PUT, PATCH, and DELETE for interacting with LDP resources, supporting both RDF and non-RDF content while enabling SPARQL patches. It works with IRIs, RDF graphs, HTTP headers, and content types, emphasizing query execution, data serialization, and resource management. Specific use cases include handling redirects, managing container resources, and enforcing format-specific responses through headers and accept parameters.",
      "description_length": 480,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Http.Make_cache",
      "description": "Provides operations to manage a cache by clearing it, generating keys from HTTP headers and IRIs, storing responses and bodies under those keys, and retrieving cached data. Works with HTTP headers, IRIs, and custom key types derived from them. Used to cache HTTP responses for specific domains or routes, enabling efficient retrieval of previously fetched data.",
      "description_length": 361,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Http.No_cache",
      "description": "Provides functions to retrieve and manage HTTP responses without caching, using Iri.t and Cohttp.Header.t to determine cache keys. The get function fetches resources, strips the cookie header, and stores responses only if the status is 2XX. The clear function asynchronously resets all stored data.",
      "description_length": 298,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Http.Cached_http",
      "description": "Provides functions to retrieve and cache HTTP responses, using Iri.t as a key and filtering out cookie headers during cache operations. It returns responses as tuples of Cohttp.Response.t and string, with caching logic triggered by GET requests. Supports clearing the cache and ensures cached data is only stored for successful HTTP responses.",
      "description_length": 343,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp.Http.Http",
      "description": "Provides functions for performing HTTP requests and logging debug messages. Operates with HTTP methods, IRIs, request bodies, and headers. Used to send HTTP queries with customizable headers and body content, and to output debug information during network operations.",
      "description_length": 267,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp.Http.Http_ct",
      "description": "Provides functions to convert between a content type value and its string representation. Works with the `t` type, which encapsulates HTTP content type information. Used to serialize and deserialize content type headers in HTTP requests and responses.",
      "description_length": 251,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Cookies.Make",
      "description": "Removes expired cookies based on system time and adds cookies to a store indexed by IRI. Retrieves cookie lists for specific IRIs and clears the entire cookie collection. Operates on Iri.t and Cohttp.Cookie structures to manage web session data.",
      "description_length": 245,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Cache",
      "description": "Creates a cache instance from a directory, ensuring the directory exists. Operates on file system paths and HTTP cache data structures. Used to persist and retrieve HTTP responses efficiently during network requests.",
      "description_length": 216,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp.Containers",
      "description": "Provides a function to recursively retrieve and structure content from a given IRI into a tree of containers. Operates on Iri.t values and returns a tree structure with Lwt.t for asynchronous processing. Used to navigate and organize hierarchical data sources in a distributed system.",
      "description_length": 284,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Cookies",
      "description": "manages cookie storage and retrieval, automatically removing expired entries and organizing cookies by their IRI. It works with Iri.t and Cohttp.Cookie types to store, fetch, and clear session data. Users can retrieve cookies for a specific domain or remove all cookies at once. Operations include adding new cookies, checking expiration, and querying stored data by URL.",
      "description_length": 371,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp.Ct",
      "description": "The module provides functions for parsing, printing, and manipulating MIME content-type values, focusing on structured operations like parameter extraction and default value handling. It works with types such as `ty`, `subty`, `parameter`, and `mime` to represent and convert between different MIME type formats. Specific use cases include processing defined MIME types like application/rdf+xml and text/plain, ensuring compliance with RFC 2045 standards for content-type representations.",
      "description_length": 488,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp.Http",
      "description": "The module offers HTTP operations such as GET, POST, PUT, and DELETE, tailored for handling RDF graphs, SPARQL queries, and non-RDF content, with support for header customization, content-type negotiation, and redirection management. It works with IRIs, HTTP headers, and structured data formats, enabling tasks like querying LDP resources, managing container hierarchies, and parsing responses based on accepted formats. Specific use cases include fetching RDF triples, updating linked data endpoints, and processing SPARQL results through standardized HTTP interactions.",
      "description_length": 572,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp.Log",
      "description": "Provides logging functions for different severity levels, including error, warning, info, and debug, with both synchronous and Lwt-based variants. Operates on log sources, levels, and formatted messages using the Logs and Logs_lwt modules. Enables configuration of log levels through string parsing and option wrappers for runtime control.",
      "description_length": 339,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Types",
      "description": "Provides functions to create and manipulate metadata structures, extract container children from RDF graphs, and handle error and content-type conversions. Works with IRIs, HTTP methods, RDF graphs, and custom error types. Used to construct metadata responses, parse HTTP content types, and split strings based on character delimiters.",
      "description_length": 335,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "ldp",
      "description": "Handles HTTP methods such as GET, POST, PUT, and DELETE tailored for Linked Data Platform compliance, with support for RDF graph manipulation. Operates on HTTP clients, RDF triples, and resource representations in various serialization formats. Enables building web resources that adhere to LDP standards, such as managing semantic data stores or implementing LDP containers.",
      "description_length": 375,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp",
      "description": "manages HTTP caching, content retrieval, cookie storage, MIME parsing, and RDF operations within a distributed system. It handles Iri.t, Cohttp.Cookie, MIME types, and RDF graphs, enabling tasks like persisting HTTP responses, building hierarchical data trees, and performing SPARQL queries. It supports asynchronous processing, content-type negotiation, and metadata manipulation, with logging and error handling integrated throughout. Examples include retrieving structured data from IRIs, managing session cookies, and parsing MIME parameters for content negotiation.",
      "description_length": 570,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 16,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9411764705882353
  },
  "statistics": {
    "max_description_length": 572,
    "min_description_length": 216,
    "avg_description_length": 362.1875,
    "embedding_file_size_mb": 0.058539390563964844
  }
}