{
  "package": "ldp",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 18,
  "creation_timestamp": "2025-08-15T12:12:04.578457",
  "modules": [
    {
      "module_path": "Ldp.Http.Cached_http.Requests",
      "library": "ldp",
      "description": "This module provides direct access to the underlying HTTP request operations used for making network calls. It works with Cohttp types such as `Cohttp_lwt.Body.t`, `Cohttp.Header.t`, `Cohttp.Code.meth`, and `Iri.t`. Concrete use cases include sending HTTP requests with custom methods, headers, and bodies to specified IRIs, and handling the resulting responses and bodies asynchronously.",
      "description_length": 388,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp.Http.Cached_http.Cache",
      "library": "ldp",
      "description": "This module provides caching for HTTP responses based on IRI and request headers, excluding cookies. It supports `get` operations that retrieve cached responses or fetch and store new ones if not present, and a `clear` function to reset the cache. It is used to reduce redundant HTTP requests to the same IRI with the same headers, improving performance in repeated resource fetches.",
      "description_length": 383,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Http.Http.Cache",
      "library": "ldp",
      "description": "This module provides caching for HTTP GET requests, allowing responses to be stored and retrieved based on the request IRI and headers. It works with `Iri.t` identifiers and `Cohttp` response structures, stripping and ignoring `cookie` headers during cache operations. It is useful for reducing redundant network requests when retrieving resources that may not change frequently, such as static web content or API metadata.",
      "description_length": 423,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Http.Http.Requests",
      "library": "ldp",
      "description": "This module provides direct access to the underlying `Requests` module, exposing the `call` function for performing HTTP requests with customizable methods, headers, and bodies. It works with data types such as `Cohttp_lwt.Body.t`, `Cohttp.Header.t`, `Cohttp.Code.meth`, and `Iri.t`. A concrete use case is making authenticated API calls with custom headers and request bodies, such as sending a JSON payload to a REST endpoint using POST.",
      "description_length": 439,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Http.Http_ct",
      "library": "ldp",
      "description": "This module performs specialized HTTP queries for handling typed resources, supporting operations like GET, POST, PUT, and error-resilient batch GET requests. It works with data types such as `Iri.t`, `Ldp.Types.non_rdf_resource`, `Ldp.Types.meta`, and `Cohttp.Header.t`, using a wrapped type `t` from the parameter module `W`. Concrete use cases include fetching, creating, and updating resources with associated metadata or non-RDF content over HTTP, with support for following redirects and custom headers.",
      "description_length": 509,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Containers.Make",
      "library": "ldp",
      "description": "This module recursively retrieves and constructs a tree of containers from a given IRI using an HTTP implementation. It operates on IRIs and produces a structured tree representation of containers. Useful for building hierarchical views of linked data resources from a root IRI.",
      "description_length": 278,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Http.Cached_http",
      "library": "ldp",
      "description": "This module provides HTTP operations with caching for repeated requests to the same IRI and headers, supporting both RDF and non-RDF resource retrieval and manipulation. It operates on data types like `Iri.t`, `Cohttp.Header.t`, and `Rdf.Graph.graph`, offering functions for standard HTTP methods (`GET`, `HEAD`, `POST`) and specialized variants for RDF parsing, container handling, and SPARQL-based patches. Specific use cases include interacting with Linked Data Platform resources, merging retrieved RDF graphs into a target graph, handling authentication flows, and efficiently managing container resources with operations like PUT, PATCH, and DELETE.",
      "description_length": 655,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Http.No_cache",
      "library": "ldp",
      "description": "This module implements a no-op HTTP cache that never stores or retrieves responses, ensuring every request bypasses caching and fetches resources directly. It works with HTTP headers, IRIs, and response bodies using `Cohttp` and `Lwt`. Use this when you need to enforce fresh HTTP requests without leveraging any cached data, such as during development or when handling time-sensitive resources.",
      "description_length": 395,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Cookies.Make",
      "library": "ldp",
      "description": "This module provides operations to manage an in-memory cookie store, including adding cookies for specific IRIs, retrieving cookies by IRI, clearing all cookies, and removing expired cookies using the current system time. It works with Iri.t values to identify origins and Cohttp.Cookie types to represent cookie data. Concrete use cases include tracking session cookies during HTTP client interactions and managing cookie persistence across requests to the same domain.",
      "description_length": 470,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Http.Make_cache",
      "library": "ldp",
      "description": "Implements a caching layer for HTTP requests that stores responses based on IRI and request headers, excluding cookies. Provides `clear` to empty the cache and `get` to retrieve or fetch and store responses for 2XX results. Useful for reducing redundant network requests when querying HTTP resources with identical parameters.",
      "description_length": 326,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Containers",
      "library": "ldp",
      "description": "This module defines a recursive tree structure to represent RDF and non-RDF resources, including containers with their children. It provides a function to generate a string representation of a single tree node. Useful for visualizing or processing hierarchical linked data structures starting from a root IRI.",
      "description_length": 309,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Http",
      "library": "ldp",
      "description": "This module implements high-level HTTP operations for interacting with Linked Data Platform resources, supporting CRUD actions on RDF and non-RDF content, SPARQL patches, and batch retrieval with caching support. It works with IRIs, RDF graphs, Cohttp responses and bodies, and handles content negotiation, authentication, and metadata extraction. Concrete use cases include merging RDF graphs from multiple endpoints, managing container hierarchies, and error recovery during HTTP interactions.",
      "description_length": 495,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Cache",
      "library": "ldp",
      "description": "This module creates and manages an HTTP cache backed by a specified directory. It ensures the directory exists and provides a way to load or initialize cached resources. A typical use case is to persist HTTP responses to disk for faster retrieval and reduced network requests.",
      "description_length": 276,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp.Types",
      "library": "ldp",
      "description": "This module defines core data structures for representing Linked Data Platform (LDP) resources, including metadata (`meta`), RDF and non-RDF resources, and containers. It provides functions to construct and manipulate metadata, extract container children from RDF graphs, and handle content types and HTTP methods. Concrete use cases include parsing HTTP responses into typed resource metadata, extracting child IRIs from LDP container representations, and converting content type strings into structured types.",
      "description_length": 511,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Log",
      "library": "ldp",
      "description": "This module provides direct logging operations at various severity levels\u2014error, warning, info, and debug\u2014both synchronously and for Lwt-based asynchronous code. It handles log level conversion to and from strings, supports configuration through a wrapper and a conf_option for setting log levels. Concrete use cases include logging errors during library execution, emitting debug information, and configuring logging verbosity via external settings.",
      "description_length": 450,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Cookies",
      "library": "ldp",
      "description": "This module handles parsing, creating, and manipulating HTTP cookies. It provides functions to set cookie attributes like expiration, domain, and secure flags, as well as encode and decode cookie values. Concrete use cases include managing session cookies, tracking user preferences, and handling authentication tokens in web applications.",
      "description_length": 339,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp.Ct",
      "library": "ldp",
      "description": "This implementation provides utilities to parse, compare, and convert MIME types according to RFC 2045, supporting operations like extracting parameters (e.g., charset), checking type equality, and constructing types from strings. It works with custom algebraic data types representing MIME type hierarchies (`ty`, `subty`), parameterized values, and predefined constants for common formats such as `text/turtle` or `application/rdf+xml`. Typical use cases include content type negotiation in HTTP services, validating media types for data processing, or serializing/deserializing type information with parameter handling.",
      "description_length": 622,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp",
      "library": "ldp",
      "description": "This module provides functionality for building and interacting with Linked Data Platform resources, handling HTTP operations, content types, and caching. It works with RDF graphs, IRIs, MIME types, and HTTP messages to support use cases like querying and updating remote data, managing container hierarchies, and persisting responses to disk. Specific operations include content negotiation, cookie manipulation, metadata extraction, and tree-based data visualization.",
      "description_length": 469,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 18,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 655,
    "min_description_length": 276,
    "avg_description_length": 429.8333333333333,
    "embedding_file_size_mb": 0.2613058090209961
  }
}