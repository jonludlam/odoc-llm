{
  "package": "fun-postgresql",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:03:46.147610",
  "modules": [
    {
      "module_path": "Fun_postgresql.Arg",
      "library": "fun-postgresql",
      "description": "This module converts OCaml values into PostgreSQL query arguments. It supports basic types like strings, booleans, integers, floats, and binary data, along with optional values. Use it to safely pass parameters to PostgreSQL queries, ensuring correct encoding and type handling.",
      "description_length": 278,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fun_postgresql",
      "library": "fun-postgresql",
      "description": "This module executes parameterized PostgreSQL queries, manages transactions, and applies schema migrations, while converting OCaml values into properly encoded query arguments. It supports basic types like strings, booleans, integers, and floats, along with optional values, enabling safe and type-aware database interactions. Use it to run queries with typed parameters, retrieve and decode result rows, or handle schema changes in a transaction-safe manner. For example, you can query a user by ID and decode the result into a structured OCaml type, or apply a migration script to evolve the database schema.",
      "description_length": 610,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 610,
    "min_description_length": 278,
    "avg_description_length": 444.0,
    "embedding_file_size_mb": 0.00768280029296875
  }
}