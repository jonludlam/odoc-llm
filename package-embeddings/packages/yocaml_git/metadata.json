{
  "package": "yocaml_git",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:29:02.262132",
  "modules": [
    {
      "module_path": "Yocaml_git.Required",
      "description": "Stores key-value pairs using a Git-backed data structure, enabling persistent configuration management. It operates on `Git_kv.t` type, which represents a versioned key-value store. This is used to manage application settings across different commits or branches.",
      "description_length": 263,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_git.From_identity",
      "description": "Converts runtime errors to strings, handles monadic operations, and performs file system tasks like reading, writing, and checking file existence. Works with custom error types, paths, and asynchronous-like computations. Executes shell commands, logs messages at different levels, and manipulates file metadata such as modification times and directory contents.",
      "description_length": 361,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "yocaml_git",
      "description": "Provides functions to manage and execute build processes, including initializing a development environment and triggering builds. Operates on project configurations and system commands. Used to set up isolated OCaml environments and compile projects efficiently.",
      "description_length": 262,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_git",
      "description": "Manages versioned key-value stores and error handling with Git-backed persistence, enabling configuration tracking and runtime diagnostics. Provides operations on `Git_kv.t` for storing and retrieving settings, and supports file system interactions, error conversion, and shell execution. It allows for managing application state across Git commits and handling asynchronous workflows. Examples include saving build configurations, logging error messages, and manipulating file metadata within a Git repository.",
      "description_length": 511,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 511,
    "min_description_length": 262,
    "avg_description_length": 349.25,
    "embedding_file_size_mb": 0.01494598388671875
  }
}