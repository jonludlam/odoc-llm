{
  "package": "yocaml_git",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:43.218157",
  "modules": [
    {
      "module_path": "Yocaml_git.Required.CONFIG",
      "library": "yocaml_git",
      "description": "This module defines the configuration for a Git-based artifact store, specifically providing a value of type `Git_kv.t` that represents the Git store. It is used to set up and manage the storage layer when building a Git runtime for YOCaml, enabling the runtime to interact with a Git database. The configuration is essential for initializing the Git store that will be used by the runtime to generate and serve artifacts.",
      "description_length": 422,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_git.Required.SOURCE",
      "library": "yocaml_git",
      "description": "This module defines a monadic interface for executing Yocaml programs in a Git-based runtime, supporting operations like file manipulation, logging, time retrieval, and process execution. It works with data types such as paths, strings, results, and timestamps, handling both source and target file systems. Concrete use cases include reading and writing files in a Git repository, logging build events, checking file existence, and running external commands during static site generation.",
      "description_length": 489,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_git.From_identity",
      "library": "yocaml_git",
      "description": "This module defines a monadic interface for building Yocaml programs that interact with Git, providing operations for file and directory manipulation, content hashing, process execution, and logging. It works with paths from the Yocaml module, runtime errors, and Lwt promises, enabling asynchronous and effectful computations. Concrete use cases include reading and writing files in a Git repository, checking file existence and metadata, executing external commands, and transforming Yocaml programs into Lwt-compatible values for execution.",
      "description_length": 543,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_git.Required",
      "library": "yocaml_git",
      "description": "This module establishes the foundational interfaces and requirements for building a Git runtime in YOCaml, coordinating source and configuration modules to generate version-controlled artifacts. It defines core data types like `Git_kv.t` and provides operations for setting up a Git-based storage layer and executing Yocaml programs within a Git context. The runtime supports monadic operations over file systems, logging, and process execution, enabling tasks such as reading and writing versioned files, tracking timestamps, and integrating with deployment pipelines. Together with its submodules, it forms a cohesive system for building and managing static sites backed by Git versioning.",
      "description_length": 691,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_git",
      "library": "yocaml_git",
      "description": "This module builds a Git-based runtime for executing YOCaml programs, using a Git database as a compilation target and versioning layer. It provides direct access to Git operations like commit, diff, and push, while integrating source runtimes to generate and update version-controlled artifacts. The system supports asynchronous, effectful computations through a monadic interface, allowing file manipulation, process execution, and logging within a Git repository. Concrete applications include deploying static sites to Git hosts and embedding versioned content generation within unikernel deployments.",
      "description_length": 605,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 691,
    "min_description_length": 422,
    "avg_description_length": 550.0,
    "embedding_file_size_mb": 0.01858806610107422
  }
}