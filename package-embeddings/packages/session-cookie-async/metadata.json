{
  "package": "session-cookie-async",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:05.228027",
  "modules": [
    {
      "module_path": "Session_cookie_async.Session_cohttp_async.Make",
      "library": "session-cookie-async",
      "description": "This module creates an Async-based session manager using a provided backend. It handles session creation, retrieval, modification, and expiration using cookies, with functions to integrate with HTTP headers for session management. It works with string keys and values, and time-based expiration periods, supporting use cases like user authentication and stateful interactions over HTTP.",
      "description_length": 386,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Session_cookie_async.Session_cohttp_async",
      "library": "session-cookie-async",
      "description": "This module implements an asynchronous session manager for handling HTTP cookies, enabling session creation, retrieval, and expiration through time-based policies. It provides operations to integrate session data with HTTP headers, supporting stateful interactions such as user authentication. The core data types include sessions represented as key-value pairs with expiration timestamps, and operations to manipulate these sessions in an Async context. Example usage includes setting a session cookie upon user login and validating session state on subsequent requests.",
      "description_length": 571,
      "index": 1,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Session_cookie_async",
      "library": "session-cookie-async",
      "description": "This module manages HTTP sessions asynchronously, handling cookie-based state across requests. It supports creating, retrieving, and expiring sessions using time-based policies, with session data stored as key-value pairs. Operations include setting and parsing cookies, validating session integrity, and managing expiration. Example usage includes tracking authenticated users by setting a session cookie on login and verifying it on protected routes.",
      "description_length": 452,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 571,
    "min_description_length": 386,
    "avg_description_length": 469.6666666666667,
    "embedding_file_size_mb": 0.011326789855957031
  }
}