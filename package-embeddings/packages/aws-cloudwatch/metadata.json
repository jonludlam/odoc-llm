{
  "package": "aws-cloudwatch",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 170,
  "creation_timestamp": "2025-08-15T17:02:39.740854",
  "modules": [
    {
      "module_path": "Aws_cloudwatch.Types.InsightRules",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization, deserialization, and manipulation of CloudWatch insight rules. It works with lists of `InsightRule.t` records, supporting conversion to and from XML, JSON, and query formats. It is used when retrieving or sending batches of insight rules to AWS CloudWatch.",
      "description_length": 295,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutCompositeAlarmInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and operations for configuring composite alarms in AWS CloudWatch. It includes fields to specify alarm rules, actions for different states (e.g., OK, insufficient data), and metadata like tags and descriptions. It supports creating, serializing, and parsing composite alarm configurations using JSON, query parameters, or XML.",
      "description_length": 366,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricAlarms",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch metric alarms, providing operations to convert between XML, JSON, and query formats. It includes parsing from XML nodes, serialization to JSON and query parameters, and constructing alarm lists. Use this module when retrieving or sending batches of metric alarms to AWS CloudWatch via API calls or processing alarm responses in different data formats.",
      "description_length": 391,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricWidgetImageInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for retrieving metric widget images, including the widget content and optional output format. It provides functions to construct, parse, and serialize the input for API requests. Use this module when generating CloudWatch dashboard widget images via the AWS SDK.",
      "description_length": 302,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidParameterCombinationException",
      "library": "aws-cloudwatch",
      "description": "This module defines a specific exception type for handling invalid parameter combinations in AWS CloudWatch operations. It includes functions to create, parse, and convert the exception to various formats like JSON and query parameters. It works directly with string values to represent error messages and integrates with AWS SDK data handling.",
      "description_length": 344,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmNames",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of alarm names for AWS CloudWatch operations. It provides functions to convert alarm name lists to query parameters and JSON, and to parse them from XML and JSON. Use this module when working with CloudWatch APIs that require specifying multiple alarm names.",
      "description_length": 284,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardValidationMessage",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling validation messages related to dashboards, with optional fields for a data path and a message. It provides functions to construct, parse, and convert these messages to and from JSON and query formats. It is used to communicate errors or warnings when validating dashboard configurations in AWS CloudWatch.",
      "description_length": 355,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.LimitExceededFault",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling limit exceeded fault responses in AWS CloudWatch. It includes operations to create, parse, and serialize fault objects with an optional message field. Use cases include error handling when AWS service limits are exceeded, such as when too many metrics or alarms are created.",
      "description_length": 324,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricStatisticsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for querying CloudWatch metric statistics, including required fields like namespace, metric name, time range, and period. It supports optional parameters such as dimensions, statistics, extended statistics, and unit for detailed metric analysis. Use this module to construct and serialize requests when retrieving custom or standard metric data from AWS CloudWatch.",
      "description_length": 405,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardInvalidInputError",
      "library": "aws-cloudwatch",
      "description": "This module defines a type and associated functions for handling invalid input errors related to dashboards. It includes operations to create, parse, and serialize error data, working with types like strings and dashboard validation messages. It is used to manage structured error responses from AWS CloudWatch dashboard operations, such as validation failures during dashboard creation or updates.",
      "description_length": 398,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidNextToken",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` with an optional string message field and provides functions to construct, parse, and serialize instances of this type. It handles XML, JSON, and query parameter conversions for the `InvalidNextToken` error structure. Use this module when working with AWS CloudWatch API responses that return invalid next token errors, particularly for handling pagination issues.",
      "description_length": 395,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutMetricAlarmInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and operations for configuring CloudWatch alarms based on metric data. It includes functions to construct, parse, and serialize alarm configurations, supporting both XML and JSON formats. Concrete use cases include setting up alarms with custom thresholds, evaluation periods, statistics, and actions triggered by specific metric conditions.",
      "description_length": 381,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataQueries",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization, deserialization, and manipulation of metric data queries for AWS CloudWatch. It works with lists of `MetricDataQuery.t` structures, supporting conversion to and from XML, JSON, and query formats. It is used when building or processing requests and responses involving CloudWatch metric data queries.",
      "description_length": 338,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteAnomalyDetectorInput",
      "library": "aws-cloudwatch",
      "description": "This module defines a record type for input parameters used to delete an anomaly detector in AWS CloudWatch. It includes fields for metric namespace, name, dimensions, and statistic, along with functions to construct, parse, and serialize the data to query or JSON formats. It is used when issuing deletion requests for anomaly detectors based on specific metric configurations.",
      "description_length": 378,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmHistoryItems",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch alarm history items, providing direct conversions to and from XML, JSON, and query formats. It supports parsing alarm history from XML nodes and serializing the list for API requests or JSON responses. Use this module when retrieving or processing CloudWatch alarm history data for AWS integrations.",
      "description_length": 339,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutMetricDataInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for sending metric data to CloudWatch, including the namespace and metric data. It provides functions to construct, parse, and serialize the input for API requests. Use this module when publishing custom metrics to AWS CloudWatch from OCaml applications.",
      "description_length": 294,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetDashboardOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing the output of a CloudWatch dashboard retrieval operation. It includes fields for the dashboard's ARN, body, and name, along with functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used specifically when interacting with AWS CloudWatch APIs to manage or display dashboard metadata and configuration.",
      "description_length": 408,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRule",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing CloudWatch insight rules, including their name, state, schema, and definition. It provides functions to construct, parse, and convert insight rule data to and from XML, JSON, and query formats. Concrete use cases include managing monitoring rules and processing log data in AWS CloudWatch.",
      "description_length": 343,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Tag",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling tags in AWS CloudWatch, consisting of key-value pairs of strings. It provides functions to construct, serialize, and convert tags to and from JSON and query formats. Use this module when managing resource tags for CloudWatch metrics or alarms, ensuring proper formatting for API requests.",
      "description_length": 338,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetDashboardInput",
      "library": "aws-cloudwatch",
      "description": "This module defines a single type `t` representing input parameters for retrieving a CloudWatch dashboard by name. It provides functions to construct, serialize, and parse dashboard input data in various formats including JSON and query strings. Use this module when interacting with the CloudWatch API to fetch dashboard details programmatically.",
      "description_length": 347,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DisableInsightRulesOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of disabling CloudWatch insight rules, specifically capturing any failures that occur during the operation. It works with a record type containing a list of batch failures, each detailing individual rule disablement issues. Use this module to process and serialize responses when managing monitoring rules in AWS CloudWatch.",
      "description_length": 355,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidFormatFault",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing an invalid format fault in AWS CloudWatch, containing an optional error message. It provides functions to construct, parse, and convert the type to and from query parameters, JSON, and XML. Use this module to handle malformed input errors when interacting with CloudWatch APIs, particularly for validating metric data or alarm configurations.",
      "description_length": 386,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MissingRequiredParameterException",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` for handling missing required parameter exceptions, including operations to construct, parse, and serialize these exceptions. It works with XML nodes, query parameters, and JSON values. Concrete use cases include error handling during AWS CloudWatch API requests when mandatory parameters are omitted.",
      "description_length": 332,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorDatapoint",
      "library": "aws-cloudwatch",
      "description": "This module handles data points for insight rule contributors, each consisting of a timestamp and an approximate numeric value. It provides functions to construct, serialize, and convert these data points to and from XML, JSON, and query formats. Use this module when processing or sending contributor data to AWS CloudWatch for insight rules, especially when aggregating metrics over time.",
      "description_length": 390,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteDashboardsOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a type and associated functions for handling the output of dashboard deletion operations in a cloud monitoring service. It works with unit type values, converting them to and from query parameters, JSON, and service-specific data structures. It is used when confirming the successful deletion of dashboards.",
      "description_length": 327,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Statistics",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch statistic types, providing functions to convert them to and from JSON and query formats, and to parse them from XML. It works with `Statistic.t` lists and integrates with AWS SDK serialization workflows. Use this module when interacting with CloudWatch APIs that require specifying multiple statistics, such as `GetMetricStatistics`.",
      "description_length": 373,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardValidationMessages",
      "library": "aws-cloudwatch",
      "description": "This module handles parsing, converting, and validating dashboard messages from XML, JSON, and query formats. It works with lists of `DashboardValidationMessage.t` to represent and manipulate validation messages. Concrete use cases include converting validation responses to JSON for API output or parsing incoming XML data into structured validation messages.",
      "description_length": 360,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagKeyList",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of string-based tag keys for AWS CloudWatch operations. It provides functions to convert tag key lists to query parameters or JSON, and to parse them from XML or JSON input. Use this module when managing tag keys in CloudWatch metrics or resources like alarms.",
      "description_length": 286,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PartialFailure",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling partial failures in AWS CloudWatch operations, with fields to capture resource, exception type, error code, and description. It provides functions to construct, parse, and serialize failure information in multiple formats including JSON, query parameters, and XML. It is used to process and propagate detailed error information from CloudWatch API calls, such as failed metric or alarm operations.",
      "description_length": 447,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.EnableAlarmActionsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for enabling alarm actions in CloudWatch, specifically containing a list of alarm names. It provides functions to construct, serialize, and parse this input for use in API requests. The module works directly with CloudWatch alarm names and integrates with XML and JSON serialization formats for communication with AWS services.",
      "description_length": 367,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.StateValue",
      "library": "aws-cloudwatch",
      "description": "This module defines a polymorphic variant type `t` representing the state values of a CloudWatch alarm, with three possible states: `OK`, `ALARM`, and `INSUFFICIENT_DATA`. It provides bidirectional conversions between these states and strings, JSON, and query parameters, enabling seamless serialization and deserialization for API interactions. Use this module when handling CloudWatch alarm state transitions, logging, or status reporting in AWS integrations.",
      "description_length": 461,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListMetricsOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling the output of listing metrics in AWS CloudWatch, including a collection of metrics and an optional token for pagination. It provides functions to construct, parse, and serialize the output in various formats such as JSON and query parameters. Concrete use cases include processing responses from the CloudWatch API when retrieving custom metrics and handling paginated results across multiple API calls.",
      "description_length": 453,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataResult",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing CloudWatch metric data results, including identifiers, timestamps, values, and status information. It provides functions to construct, parse, and serialize these results to and from XML, JSON, and query formats. Use this module when retrieving or processing CloudWatch metrics data, such as when querying custom metrics or handling monitoring data in AWS integrations.",
      "description_length": 422,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeInsightRulesOutput",
      "library": "aws-cloudwatch",
      "description": "Handles output from describing CloudWatch insight rules, providing functions to create, parse, and serialize responses. It works with pagination tokens and insight rule lists, enabling retrieval and processing of monitoring rules in AWS CloudWatch. Used when querying or managing observability rules for metrics and logs.",
      "description_length": 321,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DatapointValues",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of double-precision floating-point values, primarily for representing metric data points in AWS CloudWatch. It provides functions to convert these values to and from XML, JSON, and query string formats, enabling seamless serialization and deserialization. Use cases include processing CloudWatch metric data responses, constructing API requests, and extracting values from JSON payloads.",
      "description_length": 413,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleMetricDatapoint",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure representing a single data point for an insight rule metric, capturing various statistical values such as average, sum, minimum, and maximum, all associated with a timestamp. It provides functions to construct, parse, and serialize these data points to and from JSON and AWS query formats. Concrete use cases include processing and transmitting metric data retrieved from AWS CloudWatch for analysis or visualization.",
      "description_length": 454,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectorConfiguration",
      "library": "aws-cloudwatch",
      "description": "This module defines a configuration for anomaly detectors, including time ranges to exclude and an optional metric timezone. It provides functions to construct, parse, and serialize the configuration for use in queries or JSON payloads. Use this when setting up or modifying CloudWatch anomaly detection to specify exclusions and time context for metrics.",
      "description_length": 355,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ExtendedStatistics",
      "library": "aws-cloudwatch",
      "description": "Handles extended statistics for CloudWatch metrics, providing functions to convert, parse, and serialize string lists. Works directly with AWS string lists and JSON/query representations. Used when specifying custom percentiles in CloudWatch metric statistics requests.",
      "description_length": 269,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Values",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization and deserialization of a list of double-precision floating-point numbers for use with AWS CloudWatch. It provides functions to convert between XML nodes, JSON values, and query parameters, ensuring correct formatting for API requests and responses. Use this module when working with CloudWatch metrics that require numerical data arrays in specific wire formats.",
      "description_length": 400,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DisableInsightRulesInput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for disabling CloudWatch insight rules by specifying a list of rule names. It includes functions to construct, serialize, and parse the input format required by the CloudWatch API. It is used when sending requests to disable specific insight rules, handling the rule names as a collection in XML, query string, or JSON formats.",
      "description_length": 364,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteDashboardsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for deleting CloudWatch dashboards, containing a list of dashboard names. It provides functions to construct, parse, and serialize the input for API requests, specifically working with XML, JSON, and query string formats. Use this module when preparing or handling deletion requests for CloudWatch dashboards in AWS integrations.",
      "description_length": 369,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagResourceInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for tagging a resource in AWS CloudWatch, consisting of a resource ARN and a list of tags. It provides functions to construct, parse, and serialize the input for use in API requests, specifically supporting operations like `TagResource`. The module works directly with AWS-specific string and tag list types, along with JSON and query parameter formats for HTTP interactions.",
      "description_length": 415,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.Statistic",
      "library": "aws-cloudwatch",
      "description": "This module defines a polymorphic variant type representing statistical operations used in metric data queries, including conversion functions between strings and the variant type. It supports serialization to and from JSON, query parameters, and XML, as well as string parsing and formatting. Concrete use cases include handling statistical aggregates like Average, Sum, and Maximum when interacting with AWS CloudWatch metric APIs.",
      "description_length": 433,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteAnomalyDetectorOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a type and associated functions for handling the output of anomaly detector deletion operations in AWS CloudWatch. It provides functions to convert unit values to query parameters, JSON objects, and back, ensuring compatibility with AWS API request formats. It is used specifically when confirming the successful deletion of an anomaly detector without returning additional data.",
      "description_length": 399,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardNotFoundError",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing errors when a CloudWatch dashboard is not found, with an optional message. It provides functions to construct, parse, and serialize these errors to and from JSON, query parameters, and XML. Use this module to handle missing dashboard errors in CloudWatch API interactions, such as when retrieving or updating non-existent dashboards.",
      "description_length": 377,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListTagsForResourceOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of listing tags for a resource in AWS CloudWatch. It provides functions to create, parse, and convert tag data to query or JSON formats. It works with tag lists and is used when retrieving metadata tags associated with monitoring resources.",
      "description_length": 271,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmType",
      "library": "aws-cloudwatch",
      "description": "This module defines an algebraic data type with two variants, `CompositeAlarm` and `MetricAlarm`, representing types of alarms in a monitoring system. It includes functions to convert between strings and the type, serialize to JSON and query formats, and parse from XML and JSON inputs. It is used to distinguish and handle different alarm types when interacting with AWS CloudWatch APIs, such as when creating, updating, or retrieving alarm configurations.",
      "description_length": 457,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsForMetricOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of describing CloudWatch alarms for a specific metric. It provides constructors, parsing, and serialization functions for working with `metric_alarms` data, which is a collection of metric alarm descriptions. Use this module when retrieving and processing alarm information from AWS CloudWatch in response to metric-based queries.",
      "description_length": 361,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetInsightRuleReportOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling the output of an insight rule report retrieval from CloudWatch. It includes fields for key labels, aggregation statistics, contributor data, and metric datapoints, supporting precise analysis of rule evaluation results. Operations include creating instances, parsing XML responses, and converting to and from JSON and query formats for API interactions.",
      "description_length": 403,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Metrics",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization, deserialization, and transformation of CloudWatch metric data. It works with lists of `Metric.t` records, converting them to and from XML, JSON, and query parameters. It is used when interacting with AWS CloudWatch APIs to send or process metric data in specific formats.",
      "description_length": 310,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmHistoryItem",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure representing an individual alarm history item, with fields for alarm name, type, timestamp, history item type, summary, and data. It provides functions to construct instances, parse from XML, convert to query parameters, and serialize to and from JSON. It is used to retrieve and process historical records of CloudWatch alarm state changes and actions taken.",
      "description_length": 396,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.HistoryItemType",
      "library": "aws-cloudwatch",
      "description": "This module defines a polymorphic variant type `t` representing the three possible types of history items in CloudWatch: `ConfigurationUpdate`, `StateUpdate`, and `Action`. It provides bidirectional conversions between these variants and strings, JSON, XML, and query parameters, enabling seamless serialization and deserialization for API interactions. Use this module when processing CloudWatch alarm history data, especially when integrating with AWS APIs that require or return history item types in different formats.",
      "description_length": 522,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsForMetricInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and operations for querying CloudWatch alarms associated with a specific metric. It includes functions to construct, parse, and serialize the input data, supporting interactions with AWS CloudWatch APIs using metric metadata. Concrete use cases involve retrieving alarm configurations for metrics by providing identifiers like metric name, namespace, dimensions, and statistical parameters.",
      "description_length": 430,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.SetAlarmStateInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for setting an alarm state in AWS CloudWatch, including fields for the alarm name, state value, reason, and optional reason data. It provides functions to construct, parse, and serialize the input for use with AWS API requests. Concrete use cases include updating the state of a CloudWatch alarm programmatically and integrating alarm state changes into monitoring workflows.",
      "description_length": 415,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.Dimension",
      "library": "aws-cloudwatch",
      "description": "This module defines a dimension type with name and value fields, both as strings, and provides functions to construct, parse, and convert dimensions to and from query parameters, JSON, and XML. It supports operations for encoding and decoding dimension data used in CloudWatch metrics. Concrete use cases include formatting dimensions for metric publishing or alarm configuration, and extracting dimension details from API responses.",
      "description_length": 433,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InternalServiceFault",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling internal service faults in AWS CloudWatch, specifically including a message field. It provides functions to create, parse, and convert the structure to and from query parameters, JSON, and XML formats. Use cases include error handling and communication with AWS CloudWatch APIs when managing monitoring and logging services.",
      "description_length": 374,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListDashboardsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for listing CloudWatch dashboards, including optional dashboard name prefix and pagination token. It provides functions to construct, parse, and serialize the input for API requests. Use this module when querying AWS CloudWatch to retrieve dashboard information with optional filtering and pagination.",
      "description_length": 341,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricDataInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for retrieving metric data from AWS CloudWatch, including queries, time range, pagination, and result limits. It supports operations to construct, parse, and serialize the input for API requests. Concrete use cases include querying custom metrics for monitoring, generating reports, or analyzing time-series data within a specified window.",
      "description_length": 379,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutDashboardOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output response for a dashboard update operation in AWS CloudWatch. It includes a list of validation messages returned after attempting to update a dashboard. The module works with XML, JSON, and query parameter formats for serializing and deserializing the validation messages.",
      "description_length": 302,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.StatisticSet",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing statistical data points with four numerical values: sample count, sum, minimum, and maximum. It provides functions to construct instances, parse XML input, and convert to query format or JSON. It is used when publishing or retrieving custom metrics in CloudWatch that include extended statistics.",
      "description_length": 350,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ScanBy",
      "library": "aws-cloudwatch",
      "description": "This module defines a polymorphic variant type `t` with two values, `TimestampDescending` and `TimestampAscending`, representing sort directions for time-series data. It includes functions to convert between strings and the `t` type, serialize and deserialize values to JSON and query formats, and parse from XML nodes. It is used to specify the ordering of time-stamped metric data when retrieving or processing cloud monitoring events.",
      "description_length": 437,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.EnableInsightRulesOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of enabling insight rules in CloudWatch, primarily working with a `t` type that contains a list of batch failures. It provides functions to construct, parse, and serialize this output for use in API responses, including conversion to JSON, query parameters, and XML. Use cases include processing and transmitting results from enabling insight rules, particularly tracking which rules failed to enable.",
      "description_length": 432,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteInsightRulesInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for deleting CloudWatch insight rules, specifically containing a list of rule names. It provides functions to construct, serialize, and parse this input, supporting operations like API request formatting and JSON conversion. Use this module when configuring requests to remove specific insight rules in CloudWatch.",
      "description_length": 354,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteInsightRulesOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of deleting CloudWatch insight rules, primarily storing any failures that occurred during the deletion. It works with a custom type `t` that contains a list of batch failures, each detailing specific rule deletion errors. Use this module to process and interpret results from a `DeleteInsightRules` API call, especially to identify which rules failed to delete.",
      "description_length": 392,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Counts",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of double-precision floating point numbers, primarily for representing metric statistics in AWS CloudWatch. It provides functions to convert these lists to and from JSON and query string formats, as well as parsing from XML nodes. Concrete use cases include serializing and deserializing statistical data like average, minimum, maximum, and sample counts for CloudWatch metric operations.",
      "description_length": 414,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.StatusCode",
      "library": "aws-cloudwatch",
      "description": "This module defines a polymorphic variant type `t` representing status codes with three possible values: `Complete`, `InternalError`, and `PartialData`. It includes functions to convert between strings and the `t` type, as well as serialization and deserialization functions for JSON, XML, and query parameters. This module is used when handling CloudWatch API responses that include status codes indicating the result of metric data retrieval or processing.",
      "description_length": 458,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricStatisticsOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling CloudWatch metric statistics responses, including a label and a list of data points. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used to process and transmit metric data retrieved from AWS CloudWatch.",
      "description_length": 325,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling the output of CloudWatch alarm descriptions, including composite and metric alarms along with a pagination token. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. It is used when retrieving and processing CloudWatch alarm data, particularly in paginated responses.",
      "description_length": 378,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectorExcludedTimeRanges",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization, deserialization, and manipulation of excluded time ranges for anomaly detectors. It works with lists of `Range.t` structures, representing time intervals, and provides direct conversions to and from JSON, query parameters, and XML. It is used when configuring or retrieving anomaly detection exclusions in CloudWatch metrics.",
      "description_length": 364,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorKeys",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of string-based contributor keys for insight rules. It provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Use this module when working with CloudWatch insight rule contributor data that requires structured key handling.",
      "description_length": 300,
      "index": 69,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagList",
      "library": "aws-cloudwatch",
      "description": "Handles tag lists for AWS CloudWatch resources, providing serialization and deserialization for use in queries and JSON APIs. Works with lists of tag objects, each containing key-value pairs. Used when managing resource tags in CloudWatch metrics or alarms, enabling integration with AWS SDK operations that require tag-based filtering or metadata.",
      "description_length": 348,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DimensionFilter",
      "library": "aws-cloudwatch",
      "description": "This module defines a dimension filter structure with `name` and optional `value` fields, used to represent CloudWatch dimension filters. It includes functions to construct, parse, and convert dimension filters to and from JSON and query formats. It is used when querying or filtering CloudWatch metrics based on dimensions such as instance IDs or custom tags.",
      "description_length": 360,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardEntries",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch dashboard entries, providing functions to convert them to and from JSON and query formats, and to parse them from XML. It works with `DashboardEntry.t` lists and integrates with AWS SDK serialization workflows. Use this module when managing CloudWatch dashboards programmatically, such as when retrieving, updating, or constructing dashboard configurations in JSON or query string formats.",
      "description_length": 429,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataResultMessages",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization, deserialization, and manipulation of CloudWatch metric data result messages. It works with lists of `MessageData.t` structures, providing operations to convert between XML, JSON, and query formats. Use this module when processing CloudWatch API responses containing metric data messages, particularly for extracting or formatting message details in different data interchange formats.",
      "description_length": 423,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutDashboardInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for putting a CloudWatch dashboard, with operations to create, parse, and serialize the dashboard name and body. It works with XML, JSON, and query string formats for interaction with AWS CloudWatch. Concrete use cases include constructing dashboard input data from JSON or XML, and converting it into a query format for API requests.",
      "description_length": 374,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutInsightRuleOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization and deserialization of the output for CloudWatch's `PutInsightRule` operation. It provides functions to convert unit values to AWS query format, JSON, and back, ensuring compatibility with API request/response handling. Use this module when working with CloudWatch insight rule creation responses in OCaml.",
      "description_length": 344,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataResults",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization, deserialization, and transformation of metric data results from AWS CloudWatch. It works with lists of `MetricDataResult.t` values, supporting operations to convert these to and from XML, JSON, and query formats. It is used when retrieving and processing metric statistics or alarm data from CloudWatch APIs.",
      "description_length": 347,
      "index": 76,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagResourceOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a simple unit type and associated functions for handling empty responses in AWS CloudWatch tag operations. It provides functions to construct, parse, and serialize unit values to query parameters or JSON, primarily used for API response handling where no meaningful data is returned. Commonly used in workflows that manage AWS resource tagging without requiring detailed output data.",
      "description_length": 403,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmHistoryOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of describing alarm history in AWS CloudWatch, providing structured access to alarm history items and pagination tokens. It includes functions to construct, parse, and serialize the output for use in API responses and queries. Concrete use cases include retrieving and processing historical alarm data for monitoring and alerting workflows.",
      "description_length": 371,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ConcurrentModificationException",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing a concurrent modification exception, with operations to create, parse, and convert the exception to query parameters, JSON, or from JSON. It works with unit values and standard AWS query and JSON structures. Concrete use cases include handling errors during AWS CloudWatch resource updates when multiple modifications occur simultaneously.",
      "description_length": 383,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAnomalyDetectorsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for input parameters used to describe anomaly detectors in CloudWatch. It includes fields like `next_token`, `max_results`, `namespace`, `metric_name`, and `dimensions`, enabling precise querying of anomaly detection configurations. Operations include creating, parsing, and serializing the input for API requests or JSON processing.",
      "description_length": 370,
      "index": 80,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteAlarmsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for deleting CloudWatch alarms, containing a list of alarm names. It provides functions to construct, parse, and serialize the input for API requests, specifically working with XML, JSON, and query parameter formats. Use this module when configuring alarm deletion operations in AWS CloudWatch.",
      "description_length": 334,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmHistoryInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and associated operations for querying CloudWatch alarm history. It supports constructing, serializing, and parsing requests with optional filters such as alarm name, type, date range, and pagination parameters. Use this module to configure and encode input when retrieving historical alarm data from AWS CloudWatch.",
      "description_length": 356,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.StandardUnit",
      "library": "aws-cloudwatch",
      "description": "This module defines a set of standard unit types for representing metrics in AWS CloudWatch, including time, data size, and rate units. It provides conversions between these units and string, JSON, and XML formats, enabling precise metric reporting and parsing. Use cases include formatting metric data for API requests and decoding unit values from AWS responses.",
      "description_length": 364,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricAlarm",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure representing a CloudWatch metric alarm, including its configuration and state. It provides functions to construct, parse, and serialize alarms for use in monitoring and alerting workflows. Concrete use cases include creating alarms based on custom metrics, updating alarm thresholds, and retrieving alarm status for operational dashboards.",
      "description_length": 376,
      "index": 84,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.UntagResourceOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization and deserialization of untag resource responses for AWS CloudWatch. It provides functions to convert unit values to query parameters, JSON objects, and back, ensuring correct data formatting for API interactions. Use this module when managing tag removal operations on CloudWatch resources to process service responses consistently.",
      "description_length": 370,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectors",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch anomaly detectors, providing operations to convert them to and from JSON and query formats. It includes parsing from XML nodes and constructing empty lists. Use this module when interacting with CloudWatch's anomaly detection APIs to format requests or process responses.",
      "description_length": 311,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricStat",
      "library": "aws-cloudwatch",
      "description": "This module defines a record type for representing CloudWatch metric statistics, including the metric, period, statistical value, and optional unit. It provides functions to construct, parse, and convert metric stat instances to and from JSON and query formats. Use this module when querying CloudWatch metrics with specific statistical parameters like average or sum over defined time intervals.",
      "description_length": 396,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ResourceNotFound",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing error responses when a resource is not found in CloudWatch, containing an optional message. It provides functions to construct, parse, and serialize these error objects to and from JSON, query parameters, or XML. Use this module to handle missing resource errors when interacting with CloudWatch APIs, such as when retrieving metrics or alarms that do not exist.",
      "description_length": 406,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetector",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for configuring and representing anomaly detectors in Amazon CloudWatch. It includes fields for metric namespace, name, dimensions, statistical function, configuration parameters, and state, with operations to construct, parse, and serialize these detectors for use in API requests. The module supports converting between XML, JSON, and internal representations, enabling integration with CloudWatch's monitoring and alerting workflows.",
      "description_length": 473,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Dimensions",
      "library": "aws-cloudwatch",
      "description": "This module handles dimension data for CloudWatch metrics, providing functions to convert dimensions to and from JSON and query formats. It works with lists of dimension records, each containing a name and value. Use this module when publishing or processing CloudWatch metrics with custom dimensions.",
      "description_length": 301,
      "index": 90,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.CompositeAlarms",
      "library": "aws-cloudwatch",
      "description": "This module handles composite alarm configurations for AWS CloudWatch. It provides functions to convert, parse, and serialize lists of composite alarms to and from JSON, XML, and query formats. Use this module when managing CloudWatch composite alarms programmatically, such as when retrieving, updating, or sending alarm definitions via AWS SDK.",
      "description_length": 346,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DatapointValueMap",
      "library": "aws-cloudwatch",
      "description": "This module handles mappings between string keys and double values, represented as a hash table. It provides functions to convert these mappings to AWS query format, JSON, and back from JSON. It is used for serializing and deserializing data point values when interacting with AWS CloudWatch APIs.",
      "description_length": 297,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorKeyLabels",
      "library": "aws-cloudwatch",
      "description": "Handles parsing, serialization, and conversion of contributor key labels for CloudWatch insight rules. Works with lists of strings as the primary data structure. Used when interacting with CloudWatch APIs to format and extract key labels in JSON, query parameters, or XML formats.",
      "description_length": 280,
      "index": 93,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricDataOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling the output of metric data retrieval operations, including fields for metric results, pagination tokens, and associated messages. It provides functions for constructing, parsing, and serializing the structure to and from JSON and query formats. It is used to process responses from CloudWatch metric data queries, enabling access to time-series metrics and related metadata.",
      "description_length": 423,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Datapoints",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch datapoints, providing functions to parse, convert to query format, and serialize to and from JSON. It works with `Datapoint.t` lists and integrates with XML, JSON, and query string representations. Use it to process metric data returned from CloudWatch or to prepare data for API requests.",
      "description_length": 329,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorDatapoints",
      "library": "aws-cloudwatch",
      "description": "Handles parsing and serialization of contributor data points for CloudWatch insight rules. Works with lists of `InsightRuleContributorDatapoint` records, converting between XML, JSON, and query formats. Used when retrieving or sending contributor metrics data to CloudWatch.",
      "description_length": 274,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Timestamps",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of timestamps in AWS CloudWatch operations, providing functions to parse, serialize, and convert timestamp data. It works with `Aws.BaseTypes.DateTime.t list` for representing multiple timestamps. Use this module when sending or receiving timestamp lists in CloudWatch metric queries or logs.",
      "description_length": 318,
      "index": 97,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardEntry",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure representing an AWS CloudWatch dashboard entry, with fields for the dashboard name, ARN, last modified timestamp, and size. It provides functions to construct, parse, and serialize dashboard entries to and from XML, JSON, and query formats. It is used when listing or retrieving metadata about CloudWatch dashboards, such as in the `ListDashboards` API operation.",
      "description_length": 400,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleMetricList",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of metric names for insight rules in AWS CloudWatch. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML. It is used when managing insight rules that aggregate or filter CloudWatch metrics.",
      "description_length": 272,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutInsightRuleInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and associated operations for creating or updating an insight rule in CloudWatch. It includes functions to construct, parse, and serialize the rule's name, state, definition, and tags, which are used when interacting with CloudWatch's API. Concrete use cases include setting up monitoring rules based on log patterns or operational metrics.",
      "description_length": 380,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for describing CloudWatch alarms, supporting operations to filter alarms by name, type, state, and relationships. It works with string, integer, and custom types like `AlarmNames`, `AlarmTypes`, and `StateValue`. Use this module to construct and manipulate alarm queries for AWS CloudWatch, such as listing alarms by prefix, filtering by state, or retrieving child alarms.",
      "description_length": 412,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.LimitExceededException",
      "library": "aws-cloudwatch",
      "description": "This module defines a unit type and associated functions for handling cases where a service limit has been exceeded. It includes operations for creating, parsing, and converting unit values to query parameters or JSON format, primarily used in error handling scenarios. Concrete use cases include signaling and processing limit-exceeded errors in AWS CloudWatch service interactions.",
      "description_length": 383,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.CompositeAlarm",
      "library": "aws-cloudwatch",
      "description": "This module defines a CompositeAlarm type with fields representing alarm configuration and state, such as alarm name, rule, ARN, and timestamps. It provides functions to construct, parse, and serialize alarms to and from JSON, query format, and XML. These operations support managing composite alarms in AWS CloudWatch, including setting actions and retrieving alarm state details programmatically.",
      "description_length": 398,
      "index": 103,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.BatchFailures",
      "library": "aws-cloudwatch",
      "description": "This module handles batch failures in CloudWatch operations by providing functions to convert, parse, and manipulate lists of partial failures. It works with XML nodes, JSON values, and query parameters, enabling seamless serialization and deserialization of failure data. Concrete use cases include processing failed metric submissions or log delivery errors in CloudWatch APIs.",
      "description_length": 379,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListTagsForResourceInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for listing tags on a CloudWatch resource, centered around the resource's ARN. It provides functions to construct, serialize, and parse the input format for use in API requests. Useful when retrieving tags for CloudWatch alarms or metrics using their ARNs.",
      "description_length": 296,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAnomalyDetectorsOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of describing anomaly detectors in AWS CloudWatch, providing constructors, parsers, and serializers for the response data. It works with `anomaly_detectors` (a list of anomaly detector configurations) and an optional `next_token` for pagination. Use this module to process and manipulate the results from `DescribeAnomalyDetectors` API calls, such as displaying detector configurations or handling paginated responses.",
      "description_length": 449,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.UntagResourceInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for untagging a resource in AWS CloudWatch. It includes operations to create, parse, and serialize the input containing the resource ARN and tag keys. It is used when making API calls to remove tags from CloudWatch resources like metrics or alarms.",
      "description_length": 288,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DisableAlarmActionsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for disabling CloudWatch alarm actions, containing a list of alarm names. It provides functions to create, parse, and convert the input to various formats like JSON and query parameters. It is used when sending requests to disable actions for specific CloudWatch alarms.",
      "description_length": 310,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDatum",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing CloudWatch metric data points, including fields like metric name, dimensions, timestamp, value, and unit. It provides functions to construct, parse, and serialize metric data for use in monitoring and metrics collection workflows. Operations include converting to and from JSON and query formats for integration with AWS SDK interactions.",
      "description_length": 392,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleNames",
      "library": "aws-cloudwatch",
      "description": "Handles parsing, formatting, and conversion of CloudWatch insight rule names. Works with lists of base string types for interacting with AWS CloudWatch APIs. Used to prepare rule names for API requests in JSON or query string formats and process responses.",
      "description_length": 256,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListDashboardsOutput",
      "library": "aws-cloudwatch",
      "description": "This module represents the output of a dashboard listing operation in AWS CloudWatch. It includes a list of dashboard entries and an optional pagination token for retrieving additional results. The module provides functions to construct, parse, and serialize the output for use in API requests and responses.",
      "description_length": 308,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetInsightRuleReportInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and associated operations for querying an insight rule report in AWS CloudWatch. It includes functions to construct, parse, and serialize the input parameters, which specify a rule name, time range, aggregation period, and optional metrics, contributor count limit, and sorting criteria. It is used to retrieve and process insight rule reports by interacting with AWS CloudWatch's API endpoints.",
      "description_length": 435,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutAnomalyDetectorInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and associated operations for configuring anomaly detection on CloudWatch metrics. It includes functions to construct, serialize, and parse anomaly detector inputs, working with strings, dimensions, and optional configuration data. Concrete use cases include setting up anomaly detection for specific metrics with custom statistics and exclusion ranges.",
      "description_length": 393,
      "index": 113,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.Range",
      "library": "aws-cloudwatch",
      "description": "This module defines a time range structure with start and end timestamps, using AWS DateTime values. It provides functions to construct, serialize, and convert time ranges to and from JSON and query formats. It is used to specify time intervals for retrieving or filtering CloudWatch metrics and logs.",
      "description_length": 301,
      "index": 114,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListMetricsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for listing metrics in a monitoring service, supporting optional filters by namespace, metric name, dimensions, and activity status. It provides operations to construct, parse, and serialize the input for API requests, including conversion to query parameters and JSON format. Concrete use cases include querying metrics with specific dimensions or retrieving recently active metrics.",
      "description_length": 424,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleMetricDatapoints",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch InsightRuleMetricDatapoint values, providing functions to parse, convert to query format, and serialize to and from JSON. It supports operations for transforming and serializing metric data points, typically used when working with CloudWatch Logs Insights query results. Concrete use cases include processing and formatting metric data returned from CloudWatch for further analysis or storage.",
      "description_length": 433,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributors",
      "library": "aws-cloudwatch",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of insight rule contributors. It works with XML nodes, JSON values, and AWS query parameters to transform contributor data. Use this module when processing CloudWatch insight rule responses or constructing requests for contributor data.",
      "description_length": 311,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ResourceNotFoundException",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing a resource not found error, with optional fields for resource type and ID. It includes functions to construct, parse, and convert the error to query parameters, JSON, or XML. Use this module when handling or reporting missing resources in AWS CloudWatch operations, such as when a specified alarm or metric does not exist.",
      "description_length": 366,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidParameterValueException",
      "library": "aws-cloudwatch",
      "description": "This module defines a type and functions for handling invalid parameter value exceptions in AWS CloudWatch operations. It provides constructors, parsing, and serialization to and from JSON, query parameters, and XML for an exception type containing an optional message string. Use this module when processing or responding to CloudWatch API errors involving invalid input parameters.",
      "description_length": 383,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricData",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch metric data points, providing functions to convert them to and from JSON and query formats. It supports parsing metric data from XML nodes and constructing empty or initialized lists. Concrete use cases include preparing batches of metric data for AWS CloudWatch API requests and processing API responses containing metric data.",
      "description_length": 368,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricWidgetImageOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output response for retrieving a CloudWatch metric widget image. It provides constructors, parsing, and serialization functions for a type containing an optional blob representing the rendered widget image. Use it to generate image data from metric widgets in CloudWatch dashboards or alarms.",
      "description_length": 316,
      "index": 121,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataQuery",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for querying metric data, including fields like identifier, metric statistics, mathematical expressions, and display labels. It provides functions to construct, parse, and serialize these queries for use in API requests. Concrete use cases include building custom metric queries for CloudWatch dashboards or retrieving specific metric statistics with configurable time periods and output formats.",
      "description_length": 433,
      "index": 122,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DimensionFilters",
      "library": "aws-cloudwatch",
      "description": "Handles dimension filters for CloudWatch metrics by providing functions to convert, parse, and query dimension filter data. Works with lists of dimension filters, converting them to JSON, query parameters, or parsing them from XML. Useful for interacting with CloudWatch APIs that require filtering metrics by dimensions like instance ID or region.",
      "description_length": 348,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ResourceList",
      "library": "aws-cloudwatch",
      "description": "This module represents a list of string resources, primarily used for handling collections of identifiers or ARNs in AWS CloudWatch operations. It provides functions to convert lists to and from JSON and query formats, parse XML nodes into string lists, and construct empty resource lists. Use this module when working with CloudWatch metrics, alarms, or events that require multiple resource identifiers.",
      "description_length": 405,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Datapoint",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing CloudWatch metric data points, including timestamps, statistical values, and units. It provides functions to construct, parse, and serialize data points to and from XML, JSON, and query formats. Use this module when retrieving or submitting metric data to CloudWatch, such as tracking application performance metrics like latency or request counts.",
      "description_length": 402,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardNames",
      "library": "aws-cloudwatch",
      "description": "Handles lists of dashboard names for AWS CloudWatch operations. Provides functions to convert these lists to and from JSON and query formats, and to parse them from XML. Useful when managing CloudWatch dashboards, such as listing or selecting specific dashboards for deletion or updates.",
      "description_length": 287,
      "index": 126,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.Metric",
      "library": "aws-cloudwatch",
      "description": "This module defines a metric type with optional namespace, metric name, and dimensions. It provides functions to construct, serialize, and convert metric data to and from JSON and query formats. It is used to represent CloudWatch metrics for operations like publishing custom metrics or querying existing ones.",
      "description_length": 310,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.RecentlyActive",
      "library": "aws-cloudwatch",
      "description": "This module defines a single enumerated type `t` with the constructor `PT3H`, representing a time window for recently active resources. It includes functions to convert between strings and the `t` type, serialize to and from JSON and query formats, and parse from XML nodes. This module is used to specify time ranges when querying AWS CloudWatch metrics that filter based on recent activity.",
      "description_length": 392,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeInsightRulesInput",
      "library": "aws-cloudwatch",
      "description": "Handles input parameters for describing CloudWatch insight rules, supporting pagination via `next_token` and limiting results with `max_results`. Works with AWS CloudWatch types and standard XML/JSON data representations. Used when querying CloudWatch for insight rules with custom pagination and result size controls.",
      "description_length": 318,
      "index": 129,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectorStateValue",
      "library": "aws-cloudwatch",
      "description": "This module defines an enumerated type representing the state of an anomaly detector, with values for pending training, trained with insufficient data, and fully trained. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization to JSON and query formats. The module is used to manage and interpret the operational state of anomaly detection models in monitoring workflows.",
      "description_length": 449,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MessageData",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling message data with optional code and value fields. It provides functions to create, parse, and convert instances to and from XML, JSON, and query formats. It is used to process error or diagnostic messages returned by AWS CloudWatch operations, such as API call failures.",
      "description_length": 320,
      "index": 131,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutAnomalyDetectorOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of a CloudWatch PutAnomalyDetector operation. It defines a unit type and functions to construct, parse, and serialize the response in various formats. It is used to confirm successful anomaly detector creation without returning additional data.",
      "description_length": 275,
      "index": 132,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributor",
      "library": "aws-cloudwatch",
      "description": "This module defines a record type for handling insight rule contributors in AWS CloudWatch, including keys, aggregate values, and datapoints. It provides functions to construct, parse, and convert contributor data to and from JSON, query parameters, and XML. It is used to process and analyze CloudWatch metrics data for specific contributor entities in monitoring workflows.",
      "description_length": 375,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.EnableInsightRulesInput",
      "library": "aws-cloudwatch",
      "description": "This module handles input for enabling CloudWatch insight rules by accepting a list of rule names. It provides functions to construct, serialize, and parse input data for API requests. Use it when enabling specific insight rules in CloudWatch through their SDK.",
      "description_length": 261,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmTypes",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization, deserialization, and manipulation of CloudWatch alarm types. It works with lists of `AlarmType.t` values, supporting conversion to and from XML, JSON, and query parameters. It is used when interacting with AWS CloudWatch APIs to list, describe, or filter alarms by type.",
      "description_length": 309,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ComparisonOperator",
      "library": "aws-cloudwatch",
      "description": "This module defines a set of comparison operators used to represent threshold conditions for CloudWatch alarms. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization routines for JSON, XML, and query parameters. These operations are used when configuring or interpreting CloudWatch alarm conditions programmatically.",
      "description_length": 396,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DeleteInsightRules",
      "library": "aws-cloudwatch",
      "description": "This module deletes CloudWatch insight rules by converting input data into an HTTP request and handling responses. It works with input and output types specific to the CloudWatch API, including encoded query parameters and XML error parsing. Use it to remove custom insight rules by name or ARN in AWS monitoring workflows.",
      "description_length": 323,
      "index": 137,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DeleteAlarms",
      "library": "aws-cloudwatch",
      "description": "This module deletes CloudWatch alarms by converting alarm names into an HTTP request for the AWS API. It handles the deletion process through structured input and output types, specifically working with `DeleteAlarmsInput` to specify which alarms to remove. Use this module when programmatically cleaning up outdated or unused CloudWatch alarms directly from OCaml code.",
      "description_length": 370,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.SetAlarmState",
      "library": "aws-cloudwatch",
      "description": "This module sets the state of an Amazon CloudWatch alarm, converting structured input into an HTTP request and handling responses. It works with `SetAlarmStateInput` to define alarm parameters and communicates with the CloudWatch service endpoint. Use this module to programmatically trigger or resolve alarms based on custom logic, such as monitoring thresholds in distributed systems.",
      "description_length": 386,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutCompositeAlarm",
      "library": "aws-cloudwatch",
      "description": "This module handles the creation and configuration of composite alarms in Amazon CloudWatch by providing functions to construct HTTP requests and process responses. It works with the `PutCompositeAlarmInput` type to define alarm parameters and communicates with the CloudWatch service using AWS request signing. Use this module to set up composite alarms that monitor multiple metrics across different AWS resources.",
      "description_length": 416,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutMetricData",
      "library": "aws-cloudwatch",
      "description": "This module sends custom metric data to AWS CloudWatch, allowing users to publish numerical values associated with specific metrics. It works with structured input data containing metric names, dimensions, and values, translating them into HTTP requests for the CloudWatch API. Concrete use cases include tracking application performance metrics like request latency or error rates in real-time.",
      "description_length": 395,
      "index": 141,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_cloudwatch.Errors_internal",
      "library": "aws-cloudwatch",
      "description": "This module defines a list of specific error types encountered in AWS CloudWatch operations, such as authentication failures, invalid parameters, and service unavailability. It provides functions to convert errors to HTTP status codes, strings, and back from strings, enabling precise error handling and response mapping. These operations are used when interpreting or responding to CloudWatch API errors in client code.",
      "description_length": 420,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DescribeInsightRules",
      "library": "aws-cloudwatch",
      "description": "This module handles describing CloudWatch insight rules by providing functions to convert input parameters into HTTP requests and parse responses. It works with input and output types specific to the CloudWatch API, including encoded query parameters and XML error responses. Use this module to retrieve insight rule configurations from AWS CloudWatch programmatically.",
      "description_length": 369,
      "index": 143,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.GetInsightRuleReport",
      "library": "aws-cloudwatch",
      "description": "This module handles the retrieval and processing of insight rule reports from AWS CloudWatch. It provides functions to convert input data into properly signed HTTP requests and parse HTTP responses into structured outputs or specific AWS errors. It works with structured input and output types defined in the `Aws_cloudwatch.Types` module, along with error handling tailored to the insight rule reporting API.",
      "description_length": 409,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DeleteAnomalyDetector",
      "library": "aws-cloudwatch",
      "description": "This module deletes an anomaly detector in Amazon CloudWatch by sending a properly signed HTTP request. It handles the conversion of input parameters to an HTTP request and parses the response or errors returned by the service. It works directly with the `DeleteAnomalyDetectorInput` type to specify which anomaly detector to delete, and returns no output on success.",
      "description_length": 367,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAnomalyDetectors",
      "library": "aws-cloudwatch",
      "description": "This module handles describing anomaly detectors in CloudWatch by converting input parameters into HTTP requests and parsing responses. It works with input and output types specific to the CloudWatch API, including encoded query parameters and XML error responses. It is used to retrieve configurations of existing anomaly detectors for metrics, such as identifying unusual spikes or dips in resource usage over time.",
      "description_length": 417,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutMetricAlarm",
      "library": "aws-cloudwatch",
      "description": "This module handles the creation and configuration of CloudWatch alarms based on custom metrics. It accepts `PutMetricAlarmInput` to define alarm parameters such as metric name, namespace, threshold, and evaluation period, and sends the request to AWS via HTTP. The result is a unit value on success or an error response if the alarm could not be created.",
      "description_length": 355,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.GetMetricData",
      "library": "aws-cloudwatch",
      "description": "This module handles retrieving metric data from AWS CloudWatch by defining input and output types for requests and responses. It provides functions to convert native inputs to HTTP requests and parse HTTP responses into outputs or errors, ensuring proper encoding and decoding. Concrete use cases include querying custom and standard metrics for monitoring application performance and system health directly from CloudWatch.",
      "description_length": 424,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutAnomalyDetector",
      "library": "aws-cloudwatch",
      "description": "This module handles the creation or updating of anomaly detectors in Amazon CloudWatch by converting input data into properly signed HTTP requests and parsing responses. It works with `PutAnomalyDetectorInput` to configure metrics and dimensions, sending requests using AWS-specific signing version 4. Use this module to programmatically manage anomaly detection on CloudWatch metrics, such as setting up monitoring for unusual API error rates or traffic patterns.",
      "description_length": 464,
      "index": 149,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAlarmHistory",
      "library": "aws-cloudwatch",
      "description": "This module handles the conversion of inputs and outputs for the AWS CloudWatch `DescribeAlarmHistory` API call, encoding requests into HTTP format and decoding responses. It works with `DescribeAlarmHistoryInput` and `DescribeAlarmHistoryOutput` types, along with internal error types for handling failures. It is used to interact directly with AWS CloudWatch to retrieve history for specific alarms, handling request signing and endpoint configuration.",
      "description_length": 454,
      "index": 150,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.EnableInsightRules",
      "library": "aws-cloudwatch",
      "description": "This module enables insight rules in Amazon CloudWatch by sending HTTP requests to activate specified rules. It handles input and output types specific to the CloudWatch API, including encoded query parameters and XML error parsing. It is used to programmatically manage monitoring rules for log data analysis in AWS environments.",
      "description_length": 330,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DisableAlarmActions",
      "library": "aws-cloudwatch",
      "description": "This module disables actions for specified CloudWatch alarms by sending a request to the AWS service. It works with `DisableAlarmActionsInput` to identify the alarms and handles responses as unit or error types. A concrete use case is stopping notifications or auto-scaling triggers when an alarm is no longer active.",
      "description_length": 317,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAlarmsForMetric",
      "library": "aws-cloudwatch",
      "description": "This module handles describing CloudWatch alarms associated with a specific metric by converting input parameters into an HTTP request and parsing the resulting response or errors. It works with structured input and output types defined in the CloudWatch types module, including metric identifiers and alarm configurations. Concrete use cases include retrieving alarm details for monitoring system performance or debugging alerting rules tied to specific metrics.",
      "description_length": 463,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.PutDashboard",
      "library": "aws-cloudwatch",
      "description": "This module handles the HTTP communication for creating or updating CloudWatch dashboards. It translates between the native OCaml types and HTTP requests/responses, including signing, encoding, and error parsing. It works directly with `PutDashboardInput`, `PutDashboardOutput`, and CloudWatch-specific errors, making it suitable for integrating dashboard management into OCaml-based AWS tooling.",
      "description_length": 396,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.ListMetrics",
      "library": "aws-cloudwatch",
      "description": "This module handles listing metrics from AWS CloudWatch by converting input parameters into signed HTTP requests and parsing responses. It works with `ListMetricsInput` and `ListMetricsOutput` types, along with internal error types for handling AWS-specific failures. It is used to query CloudWatch for available metrics, typically for monitoring or alerting purposes.",
      "description_length": 368,
      "index": 155,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.GetMetricWidgetImage",
      "library": "aws-cloudwatch",
      "description": "This module handles the retrieval of CloudWatch metric widget images by converting input parameters into properly signed HTTP requests and processing responses. It works with `GetMetricWidgetImageInput` and `GetMetricWidgetImageOutput` types, along with internal error types for handling AWS-specific failures. It is used to generate dashboard widget images programmatically, allowing integration with monitoring tools or custom reporting interfaces.",
      "description_length": 450,
      "index": 156,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DeleteDashboards",
      "library": "aws-cloudwatch",
      "description": "This module handles the deletion of CloudWatch dashboards by converting input parameters into an HTTP request and processing the response. It works with the `DeleteDashboardsInput` type to specify dashboard names and interacts with AWS CloudWatch service endpoints. Concrete use cases include removing specific dashboards by name and handling success or error responses from the AWS API.",
      "description_length": 387,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.ListTagsForResource",
      "library": "aws-cloudwatch",
      "description": "This module handles listing tags for a CloudWatch resource by converting input data into signed HTTP requests and parsing responses. It works with structured input and output types defined in CloudWatch's API, including ARNs and tag lists. Use it to retrieve tags from CloudWatch alarms or metrics using AWS's query protocol.",
      "description_length": 325,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DisableInsightRules",
      "library": "aws-cloudwatch",
      "description": "This module handles disabling CloudWatch insight rules by providing functions to construct HTTP requests from input parameters and parse responses or errors. It works with input and output types specific to the CloudWatch API, including encoded query parameters and XML-parsed error responses. Concrete use cases include programmatically managing monitoring rules and automating CloudWatch configuration workflows.",
      "description_length": 414,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types",
      "library": "aws-cloudwatch",
      "description": "This module handles serialization, deserialization, and format conversion for AWS monitoring data types like metrics, alarms, anomaly detectors, and insight rules, operating on structured data including timestamps, statistics, dimensions, and configuration objects. It supports API request/response workflows by transforming between JSON, XML, and query formats, enabling programmatic interactions with monitoring systems. Use cases include constructing metric queries, parsing alarm history, managing dashboard configurations, and handling error states in cloud observability pipelines.",
      "description_length": 587,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.ListDashboards",
      "library": "aws-cloudwatch",
      "description": "This module handles listing CloudWatch dashboards by converting input parameters into an HTTP request and parsing the response. It works with `ListDashboardsInput` and `ListDashboardsOutput` types, along with internal error types for handling failures. It is used to interact with the CloudWatch service via the AWS API, specifically for retrieving dashboard metadata.",
      "description_length": 368,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.UntagResource",
      "library": "aws-cloudwatch",
      "description": "This module handles the removal of tags from AWS CloudWatch resources by defining the input and output types for the `UntagResource` operation, along with functions to convert between HTTP requests and native OCaml types. It works with the `UntagResourceInput` type to specify which resource and tags to remove, and produces no output on success. Concrete use cases include managing tag-based access control and cleaning up metadata for CloudWatch metrics or alarms.",
      "description_length": 466,
      "index": 162,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.GetDashboard",
      "library": "aws-cloudwatch",
      "description": "This module handles retrieving CloudWatch dashboards by converting input parameters into signed HTTP requests and parsing responses. It works with `GetDashboardInput` and `GetDashboardOutput` types, along with internal error types for handling AWS-specific failures. Use this module when querying AWS CloudWatch for dashboard details, especially when handling authentication, request encoding, and response decoding.",
      "description_length": 416,
      "index": 163,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.EnableAlarmActions",
      "library": "aws-cloudwatch",
      "description": "This module enables alarm actions in Amazon CloudWatch by sending a request to activate specified alarms. It handles input parameters through the `EnableAlarmActionsInput` type and communicates with the AWS CloudWatch service using HTTP requests. A typical use case involves triggering alarm actions programmatically after detecting specific system events or metrics thresholds.",
      "description_length": 378,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutInsightRule",
      "library": "aws-cloudwatch",
      "description": "This module handles the insertion or update of CloudWatch insight rules by converting native inputs into properly signed HTTP requests and processing responses. It works with structured input data conforming to `PutInsightRuleInput.t`, and communicates with the CloudWatch service endpoint using AWS request signing version 4. Use this module to define or modify insight rules that analyze log data for actionable metrics.",
      "description_length": 422,
      "index": 165,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAlarms",
      "library": "aws-cloudwatch",
      "description": "This module handles the conversion of inputs and outputs for the `DescribeAlarms` API call to AWS CloudWatch. It works with `DescribeAlarmsInput` and `DescribeAlarmsOutput` types, encoding requests into HTTP queries and decoding responses. It is used to interact directly with the CloudWatch service, enabling retrieval of alarm details through properly signed HTTP requests.",
      "description_length": 375,
      "index": 166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.GetMetricStatistics",
      "library": "aws-cloudwatch",
      "description": "This module handles retrieving metric statistics from AWS CloudWatch by defining input/output types and conversion functions for HTTP requests. It works with structured data types representing CloudWatch metrics, timestamps, and statistical periods. Concrete use cases include querying CPU utilization, network traffic, or custom application metrics over specific time intervals.",
      "description_length": 379,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.TagResource",
      "library": "aws-cloudwatch",
      "description": "This module handles tagging operations for AWS CloudWatch resources by converting native inputs into properly signed HTTP requests and parsing responses. It works with `TagResourceInput` to construct requests and processes responses into unit outputs or specific CloudWatch errors. Concrete use cases include adding metadata tags to CloudWatch alarms or metrics for organizational or billing tracking purposes.",
      "description_length": 410,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch",
      "library": "aws-cloudwatch",
      "description": "This module enables programmatic management of monitoring and observability resources through operations like creating, updating, and deleting alarms, dashboards, anomaly detectors, and insight rules, alongside actions for retrieving metric data, tags, and historical reports. It works with structured input/output types that map to HTTP requests/responses, incorporating AWS v4 signing and error handling for reliability. Specific use cases include automating alerting workflows, generating visualizations, and managing anomaly detection systems in cloud environments.",
      "description_length": 569,
      "index": 169,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 170,
    "meaningful_modules": 170,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 587,
    "min_description_length": 256,
    "avg_description_length": 373.99411764705883,
    "embedding_file_size_mb": 2.463998794555664
  }
}