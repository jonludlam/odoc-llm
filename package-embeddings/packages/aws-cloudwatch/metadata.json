{
  "package": "aws-cloudwatch",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 171,
  "creation_timestamp": "2025-06-18T16:54:56.132103",
  "modules": [
    {
      "module_path": "Aws_cloudwatch.Types.Dimension",
      "description": "Provides operations to construct, parse, serialize, and deserialize a structured data type representing named values. Works with a record type containing a name and value, both as strings. Used to convert between XML nodes, query parameters, and JSON representations in AWS-related data processing.",
      "description_length": 298,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Dimensions",
      "description": "Creates and manipulates dimension data structures from XML, JSON, and query parameters. Operates on lists of dimension records, converting between XML nodes, JSON values, and AWS query formats. Used to process and serialize dimension information in API requests and responses.",
      "description_length": 276,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Metric",
      "description": "Provides operations to construct, parse, and serialize metric data with namespace, name, and dimensions. Works with structured data types including namespaces, metric names, and key-value dimension pairs. Used to generate AWS query parameters and JSON representations for cloud monitoring systems.",
      "description_length": 297,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.StandardUnit",
      "description": "Provides conversion between a custom type `t` and strings, XML nodes, and JSON, including parsing and serialization. Works with `t` and standard data types like `string`, `Ezxmlm.nodes`, and `Aws.Query.t`. Used to transform and encode data for API interactions and configuration parsing.",
      "description_length": 287,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Range",
      "description": "Provides operations to create, parse, and serialize time ranges using AWS date-time values. Works with a structured type containing start and end times. Used to generate query parameters and JSON representations for API requests involving time intervals.",
      "description_length": 254,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricStat",
      "description": "Provides operations to construct, parse, serialize, and deserialize metric statistics objects. Works with types such as Metric.t, Aws.BaseTypes.Integer.t, Aws.BaseTypes.String.t, and StandardUnit.t. Used to generate AWS CloudWatch metric queries and handle JSON representation for API interactions.",
      "description_length": 298,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorDatapoint",
      "description": "Provides operations to construct, parse, serialize, and deserialize a structured data point with a timestamp and a double-precision approximate value. Works with a record type containing a timestamp and a numeric value. Used to convert raw XML data into structured insights and prepare data for API requests or JSON storage.",
      "description_length": 324,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectorExcludedTimeRanges",
      "description": "Detects and manages time ranges to exclude from anomaly detection by parsing XML configurations into a list of time ranges, converting them to AWS query parameters, and serializing/deserializing them to and from JSON. Works with XML node structures, AWS query formats, and JSON lists of time range records. Used to filter out specified periods in log analysis or monitoring systems.",
      "description_length": 382,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataQuery",
      "description": "Provides operations to construct, parse, serialize, and deserialize query structures for metric data, including building with specific identifiers, metrics, and parameters. Works with types such as strings, integers, booleans, and custom structures like MetricStat.t. Used to generate AWS-compliant queries and JSON representations for retrieving time-series data.",
      "description_length": 364,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MessageData",
      "description": "Provides operations to construct, parse, serialize, and deserialize message data structures. Works with string-based code and value fields encapsulated in a record type. Used to convert XML nodes into structured message objects and generate query or JSON representations for API interactions.",
      "description_length": 292,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmType",
      "description": "Provides conversion between a custom type and strings, XML nodes, and JSON values, along with a generic initialization function. Works with a polymorphic type `t` and associated string representations. Used to serialize and deserialize alarm configurations in AWS API interactions.",
      "description_length": 281,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.HistoryItemType",
      "description": "Provides conversion between a custom type and strings, XML nodes, and JSON values, along with a generic creation function. Works with a polymorphic type `t` and associated string representations. Used to serialize and deserialize data structures in XML and JSON formats for API interactions.",
      "description_length": 291,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorDatapoints",
      "description": "Provides functions to create, parse, serialize, and deserialize lists of insight rule contributor data points. Operates on XML nodes, JSON values, and a list type representing structured contributor data. Used to convert raw XML input into query parameters for API requests and to handle JSON serialization for data exchange.",
      "description_length": 325,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorKeys",
      "description": "Provides functions to create, parse, and serialize a list of strings as a query, JSON structure, or parse from JSON. Operates on lists of strings, converting them into AWS query parameters and JSON representations. Used to handle rule contributor keys in AWS services, enabling structured data exchange.",
      "description_length": 303,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectorConfiguration",
      "description": "Provides functions to construct, parse, serialize, and deserialize configuration objects for anomaly detection systems. Works with time range exclusions, time zones, and structured data formats like XML, query strings, and JSON. Used to initialize detection parameters from XML input or convert configurations into JSON for API transmission.",
      "description_length": 341,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectorStateValue",
      "description": "Provides conversion between a custom type and string representations, including parsing from XML nodes and serialization to AWS query and JSON formats. Works with a polymorphic type that can be instantiated with any value. Used to handle state values in AWS-related workflows, such as converting configuration states for API requests or logging.",
      "description_length": 345,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ResourceList",
      "description": "Provides operations to create a resource list from a single element, parse XML nodes into a list of strings, convert the list to an AWS query, serialize to JSON format, and deserialize from JSON. Works with lists of strings representing resource identifiers. Used to process XML responses from AWS services and prepare data for API requests or JSON serialization.",
      "description_length": 363,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.StateValue",
      "description": "Provides conversion between a custom type and strings, XML nodes, and JSON, along with serialization to AWS query format. Works with a polymorphic type `t` and specific mappings for string representation and parsing. Used to transform and encode values for API interactions and data interchange.",
      "description_length": 295,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ComparisonOperator",
      "description": "Provides functions to convert between a custom type `t` and strings, XML nodes, and JSON, including parsing and serialization. Works with `t` and standard data types like strings, lists, and XML nodes. Used to handle structured data in API requests and responses, such as transforming input XML into internal representations or encoding values for HTTP queries.",
      "description_length": 361,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataQueries",
      "description": "Provides functions to construct, parse, serialize, and deserialize lists of metric data queries. Operates on XML nodes, AWS query structures, and JSON values to convert between representations. Used to generate AWS-compliant queries from parsed XML and to encode/decode query lists for storage or transmission.",
      "description_length": 310,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Statistic",
      "description": "Provides conversion between a custom type and string representations, including parsing from XML nodes and serialization to query and JSON formats. Works with a polymorphic type `t` that can be instantiated with any value. Used to transform data for API requests and configuration parsing.",
      "description_length": 289,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DatapointValues",
      "description": "Provides functions to create a value container, parse XML nodes into a list of double values, convert the list to an AWS query structure, serialize to JSON format, and deserialize from JSON. Works with lists of double-precision floating-point numbers. Used to handle numerical data in AWS API requests and responses.",
      "description_length": 316,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataResultMessages",
      "description": "Provides functions to create a wrapped value, parse XML nodes into a list of message data, convert message data to AWS query parameters, serialize to a JSON list structure, and deserialize from JSON back to message data. Operates on XML nodes, AWS query structures, and JSON values, along with a list of message data. Used to process and transform message data for API interactions and data serialization.",
      "description_length": 405,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.StatusCode",
      "description": "Provides conversion between status codes and strings, including parsing XML nodes and serializing to AWS query and JSON formats. Works with a custom type `t` representing status codes and associated string mappings. Used to handle HTTP status code representations in API interactions and data serialization workflows.",
      "description_length": 317,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Timestamps",
      "description": "Provides functions to create, parse, and serialize datetime lists into query parameters and JSON formats. Operates on lists of AWS datetime values, enabling structured data handling. Used to convert XML node sequences into datetime lists and to prepare datetime data for API requests and responses.",
      "description_length": 298,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Counts",
      "description": "Provides operations to create a list of double values, parse XML nodes into such lists, convert them to query parameters, serialize to JSON format, and deserialize from JSON. Works with lists of double-precision floating-point numbers. Used to handle numerical count data in AWS API interactions, such as processing response values from XML-based services or preparing data for JSON-encoded requests.",
      "description_length": 400,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.StatisticSet",
      "description": "Provides operations to create, parse, serialize, and deserialize statistical data including sample count, sum, minimum, and maximum. Works with custom data type `t` containing numeric statistics. Used to convert between XML, query parameters, and JSON representations of statistical aggregates.",
      "description_length": 294,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Values",
      "description": "Provides operations to create a value from a single element, parse XML nodes into a list of double values, convert lists of doubles to query parameters, serialize to JSON lists, and deserialize from JSON. Works with lists of double-precision floating-point numbers. Used to process XML data from AWS responses and prepare data for API queries and JSON serialization.",
      "description_length": 366,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DatapointValueMap",
      "description": "Constructs a new empty map from string to double values, parses raw data into structured representations, converts maps to AWS query parameters, serializes maps to JSON format, and deserializes JSON into maps. Operates on hash tables with string keys and double values. Used to prepare data for AWS API requests and to handle JSON-encoded parameter sets.",
      "description_length": 354,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmHistoryItem",
      "description": "Provides methods to construct, parse, serialize, and deserialize objects representing historical alarm events. Works with structured data including strings, dates, and custom types for alarm details. Used to process and transmit alarm history information in AWS-related workflows.",
      "description_length": 280,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.PartialFailure",
      "description": "Encapsulates failure details with resource, exception type, code, and description, supporting XML parsing, query string generation, and JSON serialization/deserialization. Operates on custom record types containing string fields for failure metadata. Used to construct and process error responses in AWS API interactions.",
      "description_length": 321,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DimensionFilter",
      "description": "Provides operations to create, parse, and serialize filter criteria based on name and optional value, supporting XML, query, and JSON formats. Works with string-based name-value pairs and structured query parameters. Used to construct and interpret AWS API filter parameters from XML responses or JSON payloads.",
      "description_length": 311,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.Tag",
      "description": "Provides operations to create, parse, and serialize tag structures. Works with string-based key-value pairs and JSON or query format representations. Used to construct and process AWS resource tags from XML, JSON, or query parameters.",
      "description_length": 234,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributor",
      "description": "Provides methods to construct, parse, serialize, and deserialize objects representing contributor data for insight rules, including creating instances from keys, double values, and datapoints, and converting between XML, query, and JSON formats. Works with types such as InsightRuleContributorKeys.t, Aws.BaseTypes.Double.t, and InsightRuleContributorDatapoints.t. Used to process and transmit contributor data in monitoring and analytics workflows.",
      "description_length": 449,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleMetricDatapoint",
      "description": "Provides operations to construct, parse, serialize, and deserialize metric data points with timestamps and numerical statistics. Works with a record type containing fields like timestamp, average, sum, minimum, maximum, and optional contributor metrics. Used to process and transmit time-series data in AWS CloudWatch Insights queries.",
      "description_length": 335,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardValidationMessage",
      "description": "Provides operations to construct, parse, serialize, and deserialize validation messages with optional data paths and messages. Works with XML nodes, query parameters, and JSON structures. Used to validate and transmit error details in AWS-related workflows.",
      "description_length": 257,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetector",
      "description": "Provides methods to construct, parse, serialize, and deserialize anomaly detection configurations, including setting namespace, metric name, dimensions, statistic, and state value. Works with AWS-specific types such as `Dimensions.t`, `AnomalyDetectorConfiguration.t`, and `AnomalyDetectorStateValue.t`. Used to generate AWS API requests and process XML or JSON responses related to anomaly detection settings.",
      "description_length": 410,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.CompositeAlarm",
      "description": "Creates and manipulates composite alarm configurations with detailed state and action settings. Works with types such as `ResourceList`, `DateTime`, `String`, and `StateValue` to represent alarm properties and behaviors. Used to construct and serialize alarm data for AWS CloudWatch integration and parsing XML responses from API calls.",
      "description_length": 336,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricAlarm",
      "description": "Provides functions to construct, parse, and serialize objects representing cloud monitoring alarms, including methods to convert between XML, query parameters, and JSON formats. Works with structured data types such as timestamps, resource lists, dimensions, and metric statistics. Used to generate and process alarm configurations for cloud service monitoring systems.",
      "description_length": 369,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataResult",
      "description": "Provides operations to construct, parse, serialize, and deserialize metric data results with optional identifiers, labels, timestamps, values, status codes, and messages. Works with custom types including timestamps, datapoint values, status codes, and message collections. Used to process and exchange structured metric data in AWS API responses.",
      "description_length": 347,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardEntry",
      "description": "Provides operations to construct, parse, and serialize dashboard entry data, including converting between XML nodes, query parameters, and JSON representations. Works with types such as strings, dates, and long integers to represent dashboard metadata. Used to process and transmit dashboard information in AWS-related workflows.",
      "description_length": 329,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRule",
      "description": "Creates and manipulates rule configurations with specific attributes including name, state, schema, and definition. Operates on XML nodes and JSON structures, converting between these formats and an internal representation. Used to serialize and deserialize rule definitions for AWS service interactions.",
      "description_length": 304,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDatum",
      "description": "Provides operations to construct, parse, serialize, and deserialize metric data with specific fields like name, dimensions, timestamp, value, and statistics. Works with types such as `Dimensions.t`, `StatisticSet.t`, `Values.t`, `Counts.t`, and `StandardUnit.t`. Used to prepare and process cloud monitoring data for AWS services.",
      "description_length": 330,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Datapoint",
      "description": "Provides constructors and parsers for structured time-series data, including methods to build instances with metrics like average, sum, and extended statistics. Works with custom types representing timestamps, numerical values, and unit measurements. Used to convert raw XML data into structured metric objects for cloud monitoring systems.",
      "description_length": 340,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmHistoryItems",
      "description": "Provides functions to create, parse, serialize, and deserialize lists of alarm history items. Operates on lists of `AlarmHistoryItem.t` and XML or JSON representations. Used to convert raw XML data from AWS responses into structured lists and prepare query parameters for API requests.",
      "description_length": 285,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.BatchFailures",
      "description": "Provides functions to create a failure container, parse XML nodes into a list of partial failures, convert failure lists to AWS query parameters, serialize to JSON format, and deserialize from JSON. Operates on XML nodes, AWS query structures, and JSON values, along with a list of partial failure records. Used to handle and transform error responses from AWS services during batch operations.",
      "description_length": 394,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DimensionFilters",
      "description": "Provides functions to create, parse, serialize, and deserialize lists of dimension filters. Operates on XML nodes, AWS query parameters, and JSON structures. Used to convert filter data between external representations and internal list formats for API interactions.",
      "description_length": 266,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.RecentlyActive",
      "description": "Provides conversion between a custom type and strings, XML nodes, and JSON, along with serialization to query parameters. Works with a polymorphic type `t` and string representations, enabling data interchange in web service contexts. Used to parse and generate structured data for API interactions.",
      "description_length": 299,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagList",
      "description": "Creates and manipulates lists of tags, supporting parsing from XML nodes, conversion to AWS query parameters, and serialization to and from JSON. Operates on lists of `Tag.t` values, enabling structured data handling in AWS-related workflows. Used to transform XML input into tag lists and prepare tags for API requests via query and JSON formats.",
      "description_length": 347,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleNames",
      "description": "Provides functions to create, parse, and convert between string lists and XML, query, and JSON formats. Operates on lists of strings representing rule names. Parses XML nodes into rule name lists, constructs AWS queries, and serializes/deserializes to and from JSON.",
      "description_length": 266,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleMetricList",
      "description": "Provides operations to construct, parse, and serialize a list of strings as part of AWS metric rules. Works with lists of string-type values and supports XML parsing, query string generation, and JSON encoding/decoding. Used to process and format rule-based metrics in AWS API interactions.",
      "description_length": 290,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmTypes",
      "description": "Creates and processes alarm type data structures from XML, JSON, and query parameters. Operates on lists of alarm type records, converting between XML nodes, JSON values, and AWS query formats. Used to parse and serialize alarm configurations in API interactions.",
      "description_length": 263,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ScanBy",
      "description": "Provides conversion between a custom type `t` and strings, XML nodes, and JSON, including parsing from XML and serializing to query parameters. Works with `t`, `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t`. Used to transform data structures for API requests and XML/JSON processing.",
      "description_length": 284,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmNames",
      "description": "Provides functions to create, parse, and serialize alarm names as lists of strings. Accepts XML nodes for parsing and converts between string lists, query parameters, and JSON structures. Used to process and represent AWS alarm names in API interactions.",
      "description_length": 254,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagKeyList",
      "description": "Provides operations to create an empty list, parse XML nodes into a list of strings, convert the list to an AWS query structure, serialize to JSON format, and deserialize from JSON. Works with lists of strings as the primary data structure. Used to handle tag key lists in AWS API requests and responses.",
      "description_length": 304,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorKeyLabels",
      "description": "Provides functions to create a value from a string, parse XML nodes into a list of strings, convert string lists to query parameters, serialize to JSON lists, and deserialize from JSON. Works with lists of strings and AWS-specific types for query and JSON formatting. Used to process and structure rule contributor key labels in AWS API interactions.",
      "description_length": 350,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributors",
      "description": "Provides functions to construct, parse, serialize, and deserialize lists of insight rule contributors. Operates on XML nodes, AWS query structures, and JSON values. Used to convert between XML data from API responses and structured contributor lists for further processing.",
      "description_length": 273,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleMetricDatapoints",
      "description": "Provides functions to construct, parse, serialize, and deserialize lists of metric datapoints for insight rules. Operates on XML nodes and JSON structures, converting them into and from a list of structured datapoint records. Used to process and format metric data for AWS query generation and JSON serialization.",
      "description_length": 313,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardValidationMessages",
      "description": "Creates and manipulates a list of dashboard validation messages. Processes XML nodes into message lists, converts messages to query parameters, and serializes/deserializes them to and from JSON. Used to handle validation data from XML sources and prepare it for API interactions.",
      "description_length": 279,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectors",
      "description": "Creates and manipulates anomaly detection configurations, supporting XML parsing, AWS query generation, and JSON serialization/deserialization. Operates on lists of anomaly detector objects, each representing a specific detection rule. Used to convert detector definitions into query parameters for AWS services and to store or transmit configurations in JSON format.",
      "description_length": 367,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.CompositeAlarms",
      "description": "Provides functions to create, parse, serialize, and deserialize composite alarm structures. Operates on lists of composite alarm records, converting them to query parameters, JSON representations, and from JSON. Used to handle AWS alarm configurations in XML and JSON formats during data processing pipelines.",
      "description_length": 309,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricAlarms",
      "description": "Provides functions to create, parse, and serialize metric alarm data. Operates on XML nodes and JSON structures to convert between external representations and internal list-of-alarms formats. Used to process cloud monitoring alerts from XML responses and generate query parameters for API interactions.",
      "description_length": 303,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataResults",
      "description": "Provides functions to create, parse, and serialize metric data results. Operates on lists of metric data objects, converting them to AWS query parameters, JSON structures, and parsing XML nodes into structured data. Used to process and format cloud monitoring data for API interactions and data exchange.",
      "description_length": 304,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardEntries",
      "description": "Provides functions to create, parse, and serialize dashboard entry data. Operates on lists of `DashboardEntry.t` and XML or JSON representations. Parses XML nodes into entries, converts entries to AWS query parameters, and serializes/deserializes entries to and from JSON.",
      "description_length": 272,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Metrics",
      "description": "Provides functions to create, parse, serialize, and deserialize metric data. Operates on XML nodes and a list of metric records, converting them to AWS query parameters or JSON structures. Used to process and transmit monitoring data in cloud infrastructure workflows.",
      "description_length": 268,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRules",
      "description": "Provides functions to create, parse, and serialize rule structures. Operates on XML nodes, AWS query structures, and JSON representations. Used to convert between raw XML data and structured rule sets for query generation and JSON serialization.",
      "description_length": 245,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ExtendedStatistics",
      "description": "Provides operations to create a wrapped value, parse XML nodes into a list of strings, convert string lists to query parameters, serialize to JSON lists, and deserialize from JSON to string lists. Works with lists of strings and JSON structures. Used to process and format data for API requests and responses.",
      "description_length": 309,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Statistics",
      "description": "Calculates and aggregates statistical data using a list of `Statistic.t` values. It processes XML nodes into structured statistics, converts them to AWS query parameters, and serializes/deserializes them to and from JSON format. Used to handle metric data in cloud monitoring systems.",
      "description_length": 284,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricData",
      "description": "Provides functions to create immutable values, parse XML nodes into a list of metric data, convert metric data to AWS query parameters, serialize to JSON format, and deserialize from JSON. Works with XML node structures, AWS query parameters, and JSON values. Used to process and transmit metric data in cloud monitoring systems.",
      "description_length": 329,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardNames",
      "description": "Provides operations to create a value from a single element, parse XML nodes into a list of strings, convert string lists to query parameters, serialize to JSON lists, and deserialize from JSON. Works with lists of string-type values and AWS-specific string types. Used to process and format dashboard names from XML input, prepare them for API queries, and handle JSON serialization in cloud service integrations.",
      "description_length": 414,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Datapoints",
      "description": "Creates and manipulates lists of structured data points, supporting parsing from XML nodes, conversion to AWS query parameters, and serialization/deserialization to JSON. Operates on lists of `Datapoint.t` values, enabling structured data handling in API interactions. Used to process and format time-series or metric data for AWS service requests and JSON payloads.",
      "description_length": 366,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmHistoryOutput",
      "description": "Provides operations to construct, parse, and serialize objects containing alarm history data, including methods to convert between XML, JSON, and query string formats. Works with `AlarmHistoryItems.t` and AWS-specific types for handling pagination tokens. Used to process and transmit detailed alarm history information from AWS services.",
      "description_length": 338,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DisableInsightRulesOutput",
      "description": "Provides operations to construct, parse, and serialize a structure representing the output of disabling insight rules, including handling failure details. Works with `BatchFailures.t` and AWS-specific data types like `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t`. Used to generate HTTP query parameters and JSON representations for API responses.",
      "description_length": 348,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetDashboardOutput",
      "description": "Provides operations to construct, parse, and serialize dashboard output data, including creating instances with ARN, body, and name, parsing XML nodes into structured data, and converting between query, JSON, and internal representations. Works with string-based identifiers and structured records containing dashboard metadata. Used to generate API responses and process incoming XML or JSON dashboard payloads.",
      "description_length": 412,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetDashboardInput",
      "description": "Provides operations to construct, parse, and serialize dashboard input data, including converting between XML nodes, query parameters, and JSON representations. Works with a structured type containing a dashboard name and associated parameters. Used to process incoming requests for dashboard configurations and prepare data for API interactions.",
      "description_length": 346,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListMetricsInput",
      "description": "Provides operations to construct, parse, and serialize input parameters for listing metrics, including namespace, metric name, dimensions, pagination token, and recently active filters. Works with custom types such as `DimensionFilters.t`, `RecentlyActive.t`, and AWS-specific string and JSON representations. Used to generate query parameters and JSON payloads for API requests related to metric discovery and filtering.",
      "description_length": 421,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagResourceInput",
      "description": "Provides functions to construct, parse, and serialize resource tagging data, including creating instances from ARN and tags, converting to query parameters, and handling JSON serialization and deserialization. Works with AWS resource ARNs and tag lists represented as lists of key-value pairs. Used to prepare and process tagging requests for AWS resources in API interactions.",
      "description_length": 377,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InternalServiceFault",
      "description": "Provides constructors and parsers for error representations, including creating instances from a message, parsing XML nodes, and converting to query parameters or JSON structures. Works with AWS-specific types such as strings, query parameters, and JSON associations. Used to handle internal service faults in API responses by serializing and deserializing error data.",
      "description_length": 368,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ConcurrentModificationException",
      "description": "Provides functions to create, parse, and serialize error instances, converting between internal representations and AWS query or JSON formats. Operates on unit type and generic input values. Used to handle and transmit concurrency-related error states in AWS interactions.",
      "description_length": 272,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.EnableInsightRulesInput",
      "description": "Provides operations to construct, parse, and serialize data structures representing insight rule configurations. Works with XML nodes, JSON values, and a structured record type containing rule names. Used to generate AWS query parameters and JSON representations from parsed input.",
      "description_length": 281,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetInsightRuleReportInput",
      "description": "Provides operations to construct, parse, and serialize a structured request for retrieving insight rule reports, including setting rule names, time ranges, and metrics. Works with types such as strings, dates, integers, and custom lists for metrics. Used to generate API-compatible query parameters and JSON payloads for querying cloud monitoring systems.",
      "description_length": 355,
      "index": 80,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmHistoryInput",
      "description": "Provides operations to construct, parse, and serialize objects for querying alarm history, including setting specific alarm names, types, date ranges, and pagination parameters. Works with AWS-specific data types such as DateTime, Integer, and custom enums for alarm and history item types. Used to generate API requests for retrieving detailed alarm change records within a defined timeframe.",
      "description_length": 393,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsInput",
      "description": "Constructs a request structure for querying alarms, supporting parameters like alarm names, types, state values, and pagination. Operates on types such as AlarmNames.t, AlarmTypes.t, and StateValue.t, and handles XML and JSON serialization. Used to generate AWS API-compatible queries for alarm management systems.",
      "description_length": 314,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListTagsForResourceInput",
      "description": "Provides operations to construct, parse, and serialize a resource ARN input structure. Works with AWS resource ARN strings and XML/JSON data formats. Used to prepare and process input for API calls that require resource tagging information.",
      "description_length": 240,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DisableInsightRulesInput",
      "description": "Provides operations to construct, parse, and serialize data structures representing disabled insight rules, including creating instances from rule names, parsing XML nodes, and converting to AWS query and JSON formats. Works with types such as `InsightRuleNames.t` and custom record types for representing rule configurations. Used to prepare input for API calls that disable specific insight rules in cloud monitoring services.",
      "description_length": 428,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.UntagResourceInput",
      "description": "Provides operations to construct, parse, and serialize data for untagging resources, including creating instances from ARN and tag keys, parsing XML nodes, and converting to query parameters, JSON, and from JSON. Works with AWS resource ARNs, tag key lists, and JSON structures. Used to prepare and process requests for removing tags from AWS resources in API interactions.",
      "description_length": 373,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricDataInput",
      "description": "Provides operations to construct, parse, and serialize structured requests for retrieving time-series metric data, including setting query parameters, time ranges, and pagination tokens. Works with custom types such as metric data queries, date times, and pagination strings. Used to prepare inputs for API calls that fetch detailed metric statistics over specified intervals.",
      "description_length": 376,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.UntagResourceOutput",
      "description": "Provides functions to create, parse, and convert values to query parameters or JSON, working with the unit type. Parses input into an optional unit and serializes unit values into JSON format. Used to handle resource untagging responses in AWS API interactions.",
      "description_length": 261,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricWidgetImageInput",
      "description": "Provides operations to construct, parse, and serialize a structure representing input for retrieving a metric widget image, including converting between XML, query parameters, and JSON formats. Works with string-based metrics and output formats, and supports optional parameters. Used to prepare and process requests for generating or fetching widget images in AWS services.",
      "description_length": 374,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.EnableInsightRulesOutput",
      "description": "Provides operations to construct, parse, and serialize a structure representing output from enabling insight rules, including handling batch failures. Works with `BatchFailures.t` and AWS-specific data types like `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t`. Used to generate HTTP query parameters and JSON representations for API responses.",
      "description_length": 344,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.LimitExceededFault",
      "description": "Provides operations to construct, parse, and serialize a fault structure representing a limit exceeded error. Works with AWS-specific types including strings, XML nodes, query parameters, and JSON structures. Used to handle API responses where resource limits are exceeded, enabling consistent error representation and conversion across formats.",
      "description_length": 345,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutMetricAlarmInput",
      "description": "Provides functions to construct, parse, and serialize objects for defining CloudWatch alarms, including setting metrics, thresholds, and actions. Works with types such as `ResourceList`, `Dimensions`, `MetricDataQueries`, and `TagList` to represent alarm configurations. Used to generate structured input for setting up alarms based on specific metrics and conditions.",
      "description_length": 368,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.SetAlarmStateInput",
      "description": "Provides operations to construct, parse, and serialize a structured alarm state input, including methods to convert between XML nodes, query parameters, and JSON representations. Works with custom types for alarm names, state values, and reason strings, including an optional reason data field. Used to generate and process input for setting alarm states in AWS monitoring systems.",
      "description_length": 381,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.EnableAlarmActionsInput",
      "description": "Provides operations to construct, parse, and serialize data for enabling alarm actions, including creating instances from alarm names, parsing XML nodes, and converting to and from JSON and query formats. Works with `AlarmNames.t` and AWS-specific data structures like `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t`. Used to prepare input for AWS CloudWatch alarm action enablement workflows.",
      "description_length": 393,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListDashboardsInput",
      "description": "Provides operations to construct, parse, and serialize dashboard query parameters, including setting a dashboard name prefix and pagination token. Works with AWS query and JSON formats, as well as XML node structures. Used to generate API requests for listing dashboards with filtering and pagination support.",
      "description_length": 309,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricWidgetImageOutput",
      "description": "Provides operations to construct, parse, and serialize a metric widget image representation, including converting between XML nodes, query parameters, and JSON structures. Works with AWS blob data and JSON-encoded values. Used to handle responses from AWS CloudWatch metrics widgets in API interactions.",
      "description_length": 303,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsForMetricInput",
      "description": "Provides operations to construct, parse, and serialize input parameters for describing alarms associated with a specific metric. Works with types such as metric names, namespaces, statistics, dimensions, and time periods. Used to generate AWS API requests for querying alarm configurations based on defined metric criteria.",
      "description_length": 323,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetInsightRuleReportOutput",
      "description": "Provides operations to construct, parse, and serialize data structures representing insight rule reports, including metrics, contributors, and statistical values. Works with types such as `InsightRuleContributorKeyLabels.t`, `InsightRuleContributors.t`, and `InsightRuleMetricDatapoints.t`. Used to generate structured outputs for AWS CloudWatch insights, enabling detailed analysis of resource metrics and their contributing factors.",
      "description_length": 434,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardInvalidInputError",
      "description": "Provides constructors and parsers for error representations including message and validation details. Works with string messages and structured validation data. Used to generate HTTP query parameters and JSON payloads for invalid dashboard inputs.",
      "description_length": 247,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteInsightRulesInput",
      "description": "Provides operations to construct, parse, and serialize input for deleting insight rules, including converting between XML nodes, query parameters, and JSON representations. Works with `InsightRuleNames.t` and AWS-specific data structures like `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t`. Used to prepare and process deletion requests in AWS CloudWatch integration workflows.",
      "description_length": 378,
      "index": 99,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidParameterValueException",
      "description": "Provides operations to construct, parse, and serialize exceptions with a message, including converting to and from JSON and query formats. Works with a record type containing an optional message string. Used to handle invalid parameter values in AWS API interactions by generating structured error representations.",
      "description_length": 314,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAnomalyDetectorsOutput",
      "description": "Provides operations to construct, parse, and serialize data structures containing anomaly detectors and pagination tokens. Works with custom types for anomaly detectors and AWS-specific string and query formats. Used to generate HTTP queries and JSON representations for API responses.",
      "description_length": 285,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutAnomalyDetectorOutput",
      "description": "Provides functions to create, parse, and convert anomaly detection output between internal and external representations. Works with unit type and AWS query structures. Used to process and serialize anomaly detection results for API interactions.",
      "description_length": 245,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutDashboardInput",
      "description": "Creates a structured representation for dashboard input using a name and body string. Processes XML nodes into this structure, converts it to query parameters, and serializes/deserializes it to and from JSON. Used to prepare and manipulate dashboard configuration data for API interactions.",
      "description_length": 290,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ResourceNotFound",
      "description": "Provides operations to create, parse, and serialize error representations from XML and JSON, including a constructor with optional messages. Works with XML node structures and JSON values, converting between them and a custom error type. Used to handle AWS resource not found responses by generating structured query parameters and JSON payloads.",
      "description_length": 346,
      "index": 104,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteDashboardsOutput",
      "description": "Provides operations to create, parse, and serialize unit values into query parameters and JSON structures. Works with the unit type to represent empty or void results. Used to handle responses from dashboard deletion operations in AWS SDK interactions.",
      "description_length": 252,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsOutput",
      "description": "Provides operations to construct, parse, and serialize alarm data structures, including methods to convert between XML, JSON, and query formats. Works with composite and metric alarm records, along with pagination tokens. Used to generate HTTP request parameters and process API responses from alarm management systems.",
      "description_length": 319,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeInsightRulesInput",
      "description": "Provides operations to construct, parse, and serialize request parameters for querying insight rules, including setting a pagination token and result limit. Works with AWS query and JSON formats, as well as XML nodes for parsing. Used to prepare inputs for API calls that retrieve rule-based insights from AWS services.",
      "description_length": 319,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutInsightRuleInput",
      "description": "Provides functions to construct, parse, and serialize a rule configuration object, including creating with a name, state, definition, and tags, and converting between XML, query, and JSON formats. Works with string-based rule definitions, tags, and structured data types like `TagList.t`. Used to prepare and process rule input for AWS services requiring structured configuration data.",
      "description_length": 385,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricDataOutput",
      "description": "Provides functions to construct, parse, and serialize objects containing metric data results, next tokens, and messages. Works with types such as MetricDataResults.t, Aws.BaseTypes.String.t, and MetricDataResultMessages.t. Used to process and format responses from AWS CloudWatch metric data queries.",
      "description_length": 300,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidNextToken",
      "description": "Provides functions to create, parse, and serialize an error type representing an invalid next token, including conversion to query parameters, JSON, and from JSON. Works with AWS-specific string types and XML nodes for parsing. Used to handle pagination errors in API responses by validating continuation tokens.",
      "description_length": 312,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListDashboardsOutput",
      "description": "Provides operations to construct, parse, and serialize dashboard output data, including creating instances with optional dashboard entries and pagination tokens, parsing XML nodes into structured data, and converting between JSON and query formats. Works with custom types such as `DashboardEntries.t` and AWS-specific data structures like `Aws.Query.t` and `Aws.Json.t`. Used to process and transmit dashboard listings from AWS API responses in a structured and serializable format.",
      "description_length": 483,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidParameterCombinationException",
      "description": "Provides a constructor for creating exception values with optional messages, parsers for XML nodes, and serialization functions to query strings and JSON formats. Works with custom exception types and AWS-specific data structures like JSON and XML nodes. Used to handle and convert invalid parameter combination errors in AWS request processing.",
      "description_length": 345,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MissingRequiredParameterException",
      "description": "Provides functions to construct, parse, serialize, and deserialize exceptions related to missing required parameters. Works with XML nodes, JSON values, and query parameters. Used to handle AWS API errors where required inputs are absent during request processing.",
      "description_length": 264,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutDashboardOutput",
      "description": "Provides functions to construct, parse, and serialize dashboard output data, including converting between XML nodes, query parameters, and JSON structures. Works with types such as dashboard validation messages, XML nodes, and AWS query and JSON representations. Used to generate and process dashboard output for AWS services, including validation message handling and structured data serialization.",
      "description_length": 399,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListMetricsOutput",
      "description": "Provides operations to construct, parse, and serialize a structured representation of API response data, including methods to convert between XML nodes, query parameters, and JSON formats. Works with custom types such as `Metrics.t` and AWS-specific data structures like `Aws.Query.t` and `Aws.Json.t`. Used to process and transform API responses from cloud services into usable OCaml data structures.",
      "description_length": 401,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagResourceOutput",
      "description": "Provides operations to create, parse, and serialize unit values into query parameters and JSON structures. Works with the unit type and generic input types for conversion. Used to handle resource tagging responses in AWS API interactions.",
      "description_length": 238,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteAnomalyDetectorInput",
      "description": "Detects anomalies by accepting a namespace, metric name, optional dimensions, and a statistic, then converts the data into query parameters, JSON representations, and parses XML nodes into structured input. Works with AWS-specific types such as strings, dimensions, and JSON structures. Used to prepare and process input for anomaly detection services in monitoring and logging workflows.",
      "description_length": 388,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteInsightRulesOutput",
      "description": "Provides functions to construct, parse, and serialize a response structure containing batch operation failures. Works with `BatchFailures.t` and AWS-specific query and JSON representations. Used to generate HTTP responses and JSON payloads for API operations involving rule deletions.",
      "description_length": 284,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.LimitExceededException",
      "description": "Provides functions to create, parse, and serialize exceptions related to rate limiting, working with unit types and AWS query/json formats. Includes a constructor for the exception and methods to convert between data structures and JSON. Used to handle API request limits in AWS integrations.",
      "description_length": 292,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutInsightRuleOutput",
      "description": "Provides functions to create, parse, and convert a unit type into AWS query parameters and JSON format. Operates on the unit type and arbitrary input types for parsing and serialization. Used to generate and process AWS API response structures in a structured manner.",
      "description_length": 267,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ResourceNotFoundException",
      "description": "Provides constructors and parsers for handling AWS resource not found exceptions, including conversion to query parameters, JSON serialization, and deserialization. Works with string-based resource types and IDs, and XML node structures. Used to generate and process error responses in AWS API interactions.",
      "description_length": 307,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteAnomalyDetectorOutput",
      "description": "Detects and processes anomaly deletion events using a unit type, offering parsing, query generation, and JSON serialization. It converts input values into AWS query structures and handles JSON deserialization for event data. The module is used to validate and prepare deletion requests for cloud infrastructure operations.",
      "description_length": 322,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidFormatFault",
      "description": "Provides functions to construct, parse, serialize, and deserialize error objects from XML and JSON. Works with XML nodes, JSON values, and string messages. Used to handle malformed input in AWS API responses by converting between external formats and internal error representations.",
      "description_length": 282,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardNotFoundError",
      "description": "Provides constructors and parsers for error representations, including creating instances from messages, parsing XML nodes, and serializing to query parameters, JSON, and deserializing from JSON. Works with AWS-specific types such as strings, XML nodes, query parameters, and JSON structures. Used to handle and propagate missing dashboard errors in AWS API interactions.",
      "description_length": 371,
      "index": 124,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeInsightRulesOutput",
      "description": "Provides operations to construct, parse, and serialize data structures representing insight rule outputs, including handling pagination tokens and rule lists. Works with types such as strings, JSON objects, and XML nodes. Used to generate HTTP queries and JSON representations for API responses or to parse incoming XML data into structured formats.",
      "description_length": 349,
      "index": 125,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutCompositeAlarmInput",
      "description": "Provides functions to construct, parse, and serialize objects representing composite alarm inputs for AWS CloudWatch. Works with types such as boolean flags, string names and descriptions, resource lists, and tag lists. Used to generate structured data for API requests when defining complex monitoring rules.",
      "description_length": 309,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricStatisticsInput",
      "description": "Provides operations to construct, parse, and serialize input for retrieving metric statistics, including setting namespace, metric name, time range, period, and statistics parameters. Works with types such as DateTime, Integer, String, and custom structures for dimensions, statistics, and units. Used to prepare requests for cloud monitoring services by encoding query parameters and JSON payloads.",
      "description_length": 399,
      "index": 127,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutMetricDataInput",
      "description": "Provides operations to construct, parse, and serialize metric data inputs, including creating instances from a namespace and metric data list, converting to query parameters, and serializing to JSON. Works with AWS-specific types such as `Aws.BaseTypes.String.t` and `MetricData.t`. Used to prepare and transmit custom metrics to monitoring services like CloudWatch.",
      "description_length": 366,
      "index": 128,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsForMetricOutput",
      "description": "Provides functions to construct, parse, and serialize data structures representing metric alarms, including creating instances from metric alarms, parsing XML nodes, generating AWS queries, and converting to and from JSON. Works with types such as `MetricAlarms.t` and custom JSON structures. Used to process alarm configurations in AWS monitoring systems and prepare data for API requests or storage.",
      "description_length": 401,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteAlarmsInput",
      "description": "Provides operations to construct, parse, serialize, and deserialize alarm input data. Works with `AlarmNames.t` and AWS-related types like `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t`. Used to generate query parameters and JSON payloads for deleting specific alarms in an API request.",
      "description_length": 287,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAnomalyDetectorsInput",
      "description": "Provides functions to construct, parse, and serialize request parameters for querying anomaly detectors, including handling pagination, namespaces, metric names, and dimensions. Works with types such as strings, integers, and custom dimension structures. Used to prepare input for API calls that analyze metric anomalies in cloud monitoring systems.",
      "description_length": 349,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListTagsForResourceOutput",
      "description": "Provides operations to construct, parse, and serialize a resource tags response, including converting between XML, JSON, and query formats. Works with a record type containing a list of tags, each represented as an associative list. Used to process API responses from services that return tagged resources, such as AWS EC2 or S3.",
      "description_length": 329,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutAnomalyDetectorInput",
      "description": "Provides functions to construct, parse, and serialize anomaly detection input for AWS CloudWatch, including creating instances with namespace, metric name, dimensions, and statistics. Works with types such as namespace, metric name, dimensions, and statistical values. Used to prepare structured input for anomaly detection configurations in monitoring systems.",
      "description_length": 361,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteDashboardsInput",
      "description": "Provides operations to construct, parse, and serialize dashboard input data, including creating instances from dashboard names, converting to query parameters, and handling JSON serialization and deserialization. Works with `DashboardNames.t` and AWS-specific data structures like `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t`. Used to prepare and process input for dashboard deletion requests in AWS API interactions.",
      "description_length": 420,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DisableAlarmActionsInput",
      "description": "Provides operations to construct, parse, and serialize data for disabling alarm actions, including creating instances from alarm names, parsing XML nodes, generating query parameters, and converting to and from JSON. Works with `AlarmNames.t` and AWS-specific data structures like `Ezxmlm.nodes`, `Aws.Query.t`, and `Aws.Json.t`. Used to prepare requests for disabling specific alarm actions in AWS monitoring systems.",
      "description_length": 418,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricStatisticsOutput",
      "description": "Provides operations to construct, parse, and serialize metric statistics data, including converting between XML nodes, query parameters, and JSON representations. Works with structured data containing labels and a list of datapoints. Used to process and transmit cloud monitoring statistics in API responses.",
      "description_length": 308,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DeleteAlarms",
      "description": "Handles conversion of alarm deletion requests into HTTP format and processes responses from AWS services. Operates on input structures representing alarm deletion parameters and outputs unit, with error handling for AWS-specific response formats. Parses HTTP responses to detect and translate AWS error codes into internal error representations.",
      "description_length": 345,
      "index": 137,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_cloudwatch.DeleteAnomalyDetector",
      "description": "Handles conversion of delete anomaly detector requests into HTTP format and decodes responses. Processes input containing detector identifiers and service-specific parameters, returning unit on success or service-specific errors. Parses AWS error responses to validate and map them to internal error types based on HTTP status and XML content.",
      "description_length": 343,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DeleteDashboards",
      "description": "Handles AWS dashboard deletion requests by converting input to HTTP requests and parsing responses. Processes input containing dashboard identifiers and returns no output upon success. Parses AWS error responses into native error types based on HTTP status codes and XML content.",
      "description_length": 279,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DeleteInsightRules",
      "description": "Handles AWS API requests for deleting insight rules by converting input to HTTP requests and parsing HTTP responses. Operates on structured input and output types specific to the DeleteInsightRules API, including error representations from AWS. Processes query-encoded requests and maps AWS error responses to internal error types based on status code and XML content.",
      "description_length": 368,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAlarmHistory",
      "description": "Handles conversion between native input and HTTP requests for AWS CloudWatch alarm history operations, encoding parameters into query format and setting action and version. Decodes HTTP responses into structured outputs or specific error types based on AWS XML format. Processes AWS error responses to map them to internal error representations matching the API specification.",
      "description_length": 376,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAlarms",
      "description": "Handles conversion between native input and HTTP requests for AWS alarm queries, encoding parameters into query format and setting action and version. Processes HTTP responses into structured outputs or specific error types based on AWS XML deserialization. Parses AWS error codes into domain-specific errors, validating status codes and error types.",
      "description_length": 350,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAlarmsForMetric",
      "description": "Handles conversion between native input and HTTP requests for describing metric alarms, including encoding parameters and setting action/version. Processes HTTP responses to extract structured output or specific error details. Works with input and output types defined in the metric alarms module and AWS error responses.",
      "description_length": 321,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAnomalyDetectors",
      "description": "Converts input parameters into HTTP requests for AWS anomaly detection services, handling query encoding and signing. Processes HTTP responses to extract structured outputs or specific error representations. Parses AWS error responses into domain-specific error types based on HTTP status codes and XML content.",
      "description_length": 311,
      "index": 144,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DescribeInsightRules",
      "description": "Handles conversion between native input and HTTP requests for AWS API calls, specifically encoding parameters into query format and setting action and version. Processes HTTP responses, decoding them into structured outputs or specific error types based on AWS XML format. Utilizes service-specific signing methods and validates error responses against expected formats and status codes.",
      "description_length": 387,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DisableAlarmActions",
      "description": "Handles AWS request signing and HTTP conversion for disabling alarm actions, including encoding parameters and setting request headers. Processes input of type `Types.DisableAlarmActionsInput.t` and returns no output. Decodes HTTP responses into native error types or success, with specific error parsing based on HTTP status and XML content.",
      "description_length": 342,
      "index": 146,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DisableInsightRules",
      "description": "Handles AWS request signing and HTTP conversion for disabling insight rules, including encoding actions and versions into query parameters. Processes input and output types specific to the DisableInsightRules API and decodes error responses from AWS. Parses HTTP status codes and XML error bodies into structured error types for precise error handling.",
      "description_length": 352,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.EnableAlarmActions",
      "description": "Handles AWS request signing and HTTP conversion for enabling alarm actions, including encoding parameters and setting service-specific headers. Processes input of type `Types.EnableAlarmActionsInput.t` and returns no output. Decodes HTTP responses into native error types or confirms success, supporting direct interaction with AWS monitoring services.",
      "description_length": 352,
      "index": 148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.EnableInsightRules",
      "description": "Handles conversion between native input and HTTP requests for AWS insight rule enabling, including query parameter encoding and signing. Processes HTTP responses into structured outputs or specific error types based on AWS XML deserialization. Designed for direct interaction with AWS services like CloudWatch, using defined input, output, and error types.",
      "description_length": 356,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Errors_internal",
      "description": "Provides functions to convert error values to HTTP status codes, string representations, and back from strings. Works with an opaque error type representing various error conditions. Used to standardize error handling and communication in API responses.",
      "description_length": 253,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.GetDashboard",
      "description": "Handles conversion of input data into AWS HTTP requests for dashboard retrieval, including query parameter encoding and signing configuration. Processes HTTP responses to extract structured output or specific error representations based on AWS XML formatting. Utilizes defined input and output types to interface with AWS services like EC2, ensuring accurate request and response handling.",
      "description_length": 389,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.GetInsightRuleReport",
      "description": "Handles conversion between native input and HTTP requests for AWS insight rule reporting, encoding parameters into query format and setting action and version. Processes HTTP responses into structured outputs or specific error types based on AWS XML deserialization. Utilizes service-specific signing and error parsing to ensure accurate interaction with AWS services.",
      "description_length": 368,
      "index": 152,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.GetMetricData",
      "description": "Handles conversion of input data into HTTP requests for AWS metric retrieval, setting necessary parameters like Action and Version. Processes HTTP responses, decoding them into structured outputs or specific error types based on AWS XML format. Works with input and output records defined in the module's types, and error structures from the internal error module.",
      "description_length": 364,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.GetMetricStatistics",
      "description": "Handles conversion between native input and HTTP requests for AWS metric data retrieval, encoding parameters into query format and setting action and version. Processes HTTP responses into structured output or specific error types based on AWS API definitions. Works with input and output records tailored for the GetMetricStatistics API, and error structures representing AWS-specific failures.",
      "description_length": 395,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.GetMetricWidgetImage",
      "description": "Handles conversion of input parameters into HTTP requests for fetching AWS CloudWatch metric widget images, including proper query encoding and signing. Processes HTTP responses to extract structured output or specific error details based on AWS XML formatting. Works with input and output records defined in the module's type definitions.",
      "description_length": 339,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.ListDashboards",
      "description": "Converts native input to HTTP requests with proper encoding and sets action and version parameters. Parses HTTP responses into structured outputs or specific error types based on AWS XML deserialization. Handles error parsing by validating HTTP status codes against expected error formats.",
      "description_length": 289,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.ListMetrics",
      "description": "Converts native input to HTTP requests with proper query encoding and sets action and version parameters. Parses HTTP responses into structured outputs or specific error types based on AWS XML deserialization. Handles error parsing by validating HTTP status codes against expected error formats.",
      "description_length": 295,
      "index": 157,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.ListTagsForResource",
      "description": "Handles conversion between native input and HTTP requests for listing tags on AWS resources, including encoding parameters and setting action/version. Processes HTTP responses to extract structured outputs or specific error details based on AWS XML format. Works with input and output types defined in the associated module, supporting error parsing for AWS-specific responses.",
      "description_length": 377,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutAnomalyDetector",
      "description": "Handles conversion of input data into AWS-signed HTTP requests for anomaly detection services, encoding parameters into query format and setting required action and version. Processes HTTP responses to extract results or decode specific AWS error structures based on status codes. Works with input records containing anomaly detection parameters and outputs no meaningful data, focusing on error handling for API interactions.",
      "description_length": 426,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutCompositeAlarm",
      "description": "Handles AWS CloudWatch PutCompositeAlarm requests by converting input to HTTP format, setting necessary parameters, and parsing responses. Works with AWS request types, error responses, and specific input/output structures for CloudWatch alarms. Used to programmatically create or update composite alarms in AWS CloudWatch.",
      "description_length": 323,
      "index": 160,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.PutDashboard",
      "description": "Handles AWS PutDashboard requests by converting input to HTTP format, managing signing parameters, and parsing responses. Works with specific input, output, and error types defined in the module's types. Used to send dashboard configuration updates to AWS and process resulting HTTP responses.",
      "description_length": 293,
      "index": 161,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.PutInsightRule",
      "description": "Handles conversion between native input and HTTP requests for AWS PutInsightRule operations, encoding parameters into query format and setting action and version. Decodes HTTP responses into structured outputs or specific error types based on AWS XML format. Processes AWS error responses to map them to internal error representations matching the API specification.",
      "description_length": 366,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutMetricAlarm",
      "description": "Handles AWS CloudWatch metric alarm operations by converting input parameters into signed HTTP requests and parsing responses. Processes input of type `Types.PutMetricAlarmInput.t` and returns no output, with error handling for AWS-specific response formats. Parses HTTP status codes and XML error bodies to identify and return native error types.",
      "description_length": 347,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutMetricData",
      "description": "Handles conversion of metric data inputs into HTTP requests for AWS services, including proper query encoding and setting action/version parameters. Processes HTTP responses to extract results or decode specific AWS error formats. Works with structured input types and error representations defined by the AWS API.",
      "description_length": 314,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.SetAlarmState",
      "description": "Handles AWS request signing and HTTP conversion for setting alarm states, including encoding requests and parsing error responses. Operates on input structures representing alarm state changes and returns unit outputs. Processes HTTP requests and responses for AWS services like CloudWatch, ensuring proper error handling and parameter validation.",
      "description_length": 347,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.TagResource",
      "description": "Handles conversion between native input and HTTP requests for AWS resource tagging operations, encoding parameters into query format and setting action-specific headers. Processes HTTP responses to extract results or decode service-specific errors based on predefined structures. Works with AWS service identifiers and input/output types tailored for resource tagging actions.",
      "description_length": 376,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types",
      "description": "The module provides a comprehensive set of operations for constructing, parsing, and serializing structured data types used in AWS-related data processing, including named values, dimensions, metrics, time ranges, and statistical data. It supports conversions between XML nodes, JSON, and query parameters, with main data types such as records with name-value pairs, lists of dimensions, metric statistics, and time range exclusions. Examples include generating AWS query parameters from XML, serializing metric data to JSON, and parsing time ranges for anomaly detection.",
      "description_length": 572,
      "index": 167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.UntagResource",
      "description": "Handles AWS request signing and HTTP conversion for resource untagging operations. Converts input data into HTTP requests with proper query encoding and parses HTTP responses into native error or success states. Works with AWS service-specific signing versions and error structures defined by the API.",
      "description_length": 301,
      "index": 168,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "aws-cloudwatch",
      "description": "Provides functions for constructing and sending HTTP requests to AWS services, parsing JSON responses, and handling authentication signatures. Works with types such as request configurations, HTTP methods, and AWS service-specific data structures. Used to interact directly with AWS S3 for object storage, DynamoDB for database operations, and EC2 for instance management.",
      "description_length": 372,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch",
      "description": "Provides a unified interface for interacting with AWS CloudWatch through HTTP-based API operations, handling request construction, signing, and response parsing. Main data types include structured inputs for alarms, dashboards, metrics, and anomaly detectors, along with error representations derived from AWS XML and status codes. Examples include deleting alarms, retrieving metric data, enabling insight rules, and parsing error responses into domain-specific types.",
      "description_length": 469,
      "index": 170,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 171,
    "meaningful_modules": 171,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 572,
    "min_description_length": 234,
    "avg_description_length": 333.2163742690058,
    "embedding_file_size_mb": 0.621638298034668
  }
}