{
  "package": "aws-cloudwatch",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 170,
  "creation_timestamp": "2025-07-15T23:33:08.608241",
  "modules": [
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorKeyLabels",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization and deserialization of insight rule contributor key labels, which are lists of strings, for use with AWS CloudWatch's API. It provides functions to convert these lists to and from XML, JSON, and query parameters, ensuring correct formatting for API requests and responses. Use this module when working directly with insight rule data that needs to be structured for AWS CloudWatch operations.",
      "description_length": 430,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Dimension",
      "library": "aws-cloudwatch",
      "description": "This module defines a dimension type with name and value fields, both as strings, and provides functions to construct, parse, and convert dimensions to and from query parameters, JSON, and XML. It supports operations for interacting with Amazon CloudWatch metrics by associating metadata with metric data. Use this module when sending or retrieving metrics that require dimensions, such as filtering or grouping data in CloudWatch.",
      "description_length": 431,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorDatapoint",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure representing a single contributor data point in an InsightRule, containing a timestamp and an approximate numeric value. It provides functions to construct, serialize, and deserialize these data points for use in querying and processing CloudWatch metrics. Use this module when working with CloudWatch InsightRule results that require contributor analysis, such as identifying top contributors to a metric over time.",
      "description_length": 453,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataResultMessages",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization, deserialization, and manipulation of CloudWatch metric data result messages. It works with lists of `MessageData.t` structures, providing operations to convert between XML, JSON, and query formats. Use this module when processing CloudWatch API responses containing metric data messages, particularly for extracting or formatting message details in different data formats.",
      "description_length": 411,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetDashboardOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing the output of a CloudWatch dashboard retrieval, including optional ARN, body, and name fields. It provides functions to construct, parse, and serialize dashboard output data for use in API responses or configuration management. Use cases include extracting dashboard details from XML responses, converting to JSON for logging, or building mock responses for testing.",
      "description_length": 420,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Dimensions",
      "library": "aws-cloudwatch",
      "description": "This module handles dimension data for CloudWatch metrics, providing functions to convert dimensions to and from JSON and query formats. It works with lists of dimension records, each representing a key-value pair. Use this module when sending or processing metric data with custom dimensions in AWS CloudWatch.",
      "description_length": 311,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListTagsForResourceInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for listing tags on a CloudWatch resource, including the resource ARN. It provides functions to construct, parse, and serialize the input for API requests. Use this when retrieving tags for CloudWatch alarms or metrics using their ARNs.",
      "description_length": 276,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListDashboardsOutput",
      "library": "aws-cloudwatch",
      "description": "This module represents the output of a dashboard listing operation, containing a collection of dashboard entries and an optional pagination token. It provides functions to construct, serialize, and deserialize this output format, specifically working with XML, JSON, and AWS query formats. It is used when retrieving paginated lists of CloudWatch dashboards, handling both the data and continuation token for subsequent requests.",
      "description_length": 429,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.Range",
      "library": "aws-cloudwatch",
      "description": "This module defines a time range structure with start and end timestamps, using AWS DateTime values. It provides functions to construct, serialize, and convert time ranges to and from JSON and query formats. It is used to specify time intervals for retrieving or filtering CloudWatch metrics and logs.",
      "description_length": 301,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.ScanBy",
      "library": "aws-cloudwatch",
      "description": "This module defines a polymorphic variant type `t` with two values, `TimestampDescending` and `TimestampAscending`, representing sort directions for time-series data. It includes functions to convert between strings and the `t` type, serialize and deserialize values to JSON, XML, and query parameters. It is used to specify the ordering of time-stamped metric data when retrieving or processing cloud monitoring events.",
      "description_length": 420,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricDataInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for retrieving metric data from AWS CloudWatch, including queries, time range, pagination, and result limits. It supports operations to construct, parse, and serialize the input for API requests. Concrete use cases include querying custom metrics for monitoring, generating reports from time-series data, and paginating through large metric datasets.",
      "description_length": 390,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardInvalidInputError",
      "library": "aws-cloudwatch",
      "description": "This module defines a type and operations for handling invalid input errors related to dashboards. It includes functions to construct, parse, and serialize error data, specifically working with strings and dashboard validation messages. It is used to manage detailed error information when dashboard configuration input fails validation.",
      "description_length": 337,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetInsightRuleReportInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and associated operations for querying an insight rule report in a monitoring service. It handles data types like strings, timestamps, integers, and metric lists to configure and execute detailed performance analysis queries. Use this module to retrieve and process insight reports based on time ranges, metric filters, and sorting options.",
      "description_length": 380,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmHistoryItems",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch alarm history items, providing functions to convert them to and from JSON and query formats. It includes parsing from XML nodes and constructing empty or initialized lists. Concrete use cases include serializing alarm history for API requests and deserializing responses into structured data for monitoring workflows.",
      "description_length": 357,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.EnableInsightRulesOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of enabling insight rules in CloudWatch, primarily working with a type that contains a list of batch failures. It provides functions to construct, parse, and serialize this output type to various formats like JSON and query parameters. Use this when processing responses from enabling insight rules to handle errors and integrate with AWS APIs.",
      "description_length": 375,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.RecentlyActive",
      "library": "aws-cloudwatch",
      "description": "This module defines a single enumerated type `t` with the constructor `PT3H`, representing a time window for recently active resources. It includes functions to convert between strings and the enumerated type, serialize to and from JSON and query formats, and parse from XML nodes. This module is used to specify time ranges when querying AWS CloudWatch metrics that filter based on recent activity.",
      "description_length": 399,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricAlarms",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch metric alarms, providing operations to convert them to and from JSON and query formats. It includes functions for parsing XML responses into metric alarm lists and constructing alarm lists from JSON input. Use this module when retrieving or sending batches of metric alarms to AWS CloudWatch, such as when listing or updating multiple alarms.",
      "description_length": 382,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DimensionFilter",
      "library": "aws-cloudwatch",
      "description": "This module defines a dimension filter with optional value matching, used to specify criteria for filtering CloudWatch metrics. It supports creating, parsing, and converting dimension filters to query parameters or JSON format. Common use cases include filtering metrics by specific dimensions when querying or setting up CloudWatch alarms.",
      "description_length": 340,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListMetricsOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling the output of listing CloudWatch metrics, including a collection of metrics and an optional pagination token. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when retrieving and processing metrics from AWS CloudWatch, particularly for paginated results.",
      "description_length": 384,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MissingRequiredParameterException",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` for handling missing required parameter exceptions, including operations to construct, parse, and serialize the exception data. It works with string values wrapped in an option type, along with XML nodes, query parameters, and JSON values. It is used when handling AWS CloudWatch API errors to represent cases where a required parameter is missing, enabling proper error reporting and handling.",
      "description_length": 425,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.StateValue",
      "library": "aws-cloudwatch",
      "description": "This module defines a polymorphic variant type `t` representing the state values of a CloudWatch alarm, with three possible states: `OK`, `ALARM`, and `INSUFFICIENT_DATA`. It provides bidirectional conversions between these states and strings, JSON, and query parameters, enabling seamless serialization and deserialization for API interactions. Use this module when handling CloudWatch alarm state transitions, logging, or status reporting in AWS integrations.",
      "description_length": 461,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricStatisticsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for querying CloudWatch metric statistics, including fields like namespace, metric name, timestamps, and aggregation details. It provides functions to construct, serialize, and parse these inputs in various formats such as JSON and query parameters. Use this module when configuring requests to retrieve metric data from CloudWatch, such as average CPU usage over a time range for a specific EC2 instance.",
      "description_length": 445,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardEntries",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch dashboard entries, providing functions to convert them to and from JSON and query formats, and to parse them from XML. It works with lists of `DashboardEntry.t` type, representing CloudWatch dashboards. Use this module when interacting with CloudWatch APIs that require or return multiple dashboard definitions, such as retrieving or updating dashboard configurations.",
      "description_length": 408,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.HistoryItemType",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing the three possible history item types in CloudWatch: `ConfigurationUpdate`, `StateUpdate`, and `Action`. It provides bidirectional conversions between these types and strings, JSON, and XML, along with utilities to integrate these types into query parameters. These functions are used when handling CloudWatch alarm history operations that require serialization or deserialization of history item types.",
      "description_length": 447,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricWidgetImageOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output response for retrieving a CloudWatch metric widget image. It provides functions to construct, serialize, and parse the response, which contains an optional blob representing the rendered metric image. Use this module when generating or processing CloudWatch dashboard widget images programmatically.",
      "description_length": 330,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling the output of CloudWatch alarm descriptions, including composite and metric alarms with optional pagination. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when retrieving and processing CloudWatch alarm data, particularly for paginated results.",
      "description_length": 377,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutCompositeAlarmInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for creating or updating a composite alarm in CloudWatch. It includes fields to specify the alarm rule, actions to trigger in different states, descriptions, and tags. The structure is used when making API calls to configure composite alarms based on multiple metrics.",
      "description_length": 308,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardEntry",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing CloudWatch dashboard metadata, including name, ARN, modification time, and size. It provides functions to construct, parse, and serialize dashboard entries to and from XML, JSON, and query formats. Use this module when managing CloudWatch dashboards, such as listing existing dashboards or processing dashboard metadata returned by AWS API calls.",
      "description_length": 400,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DisableInsightRulesInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for disabling CloudWatch insight rules, containing a list of rule names. It provides functions to construct, serialize, and parse this input, specifically working with XML, JSON, and query parameter formats. It is used when making API requests to disable specific insight rules in CloudWatch.",
      "description_length": 332,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutInsightRuleOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of putting an insight rule in CloudWatch. It defines a unit type and functions to create, parse, and serialize the output in various formats. It is used to confirm successful rule creation without returning additional data.",
      "description_length": 254,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmType",
      "library": "aws-cloudwatch",
      "description": "This module defines an enumerated type with two variants, `CompositeAlarm` and `MetricAlarm`, representing different types of CloudWatch alarms. It provides bidirectional conversion functions between these variants and strings, along with serialization and deserialization capabilities for JSON, XML, and query parameters. These operations are used when interacting with AWS CloudWatch APIs to specify or interpret alarm types in requests and responses.",
      "description_length": 453,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributor",
      "library": "aws-cloudwatch",
      "description": "This module defines a record type for handling insight rule contributors in AWS CloudWatch, including keys, approximate aggregate values, and datapoints. It provides functions to construct, parse, and serialize contributor data for use in querying and analyzing CloudWatch metrics. Use cases include processing and formatting contributor data returned from CloudWatch's `GetInsightRuleReport` API.",
      "description_length": 397,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteInsightRulesOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of deleting CloudWatch insight rules, specifically capturing any failures that occur during the deletion process. It works with a structured type that contains a list of batch failures, each detailing individual rule deletion errors. Use this module to interpret results from rule deletions, especially to identify and handle specific failures when managing monitoring rules in AWS CloudWatch.",
      "description_length": 424,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataQueries",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch metric data queries, providing operations to convert between XML, JSON, and query string formats. It supports parsing XML nodes into metric query lists, serializing them into AWS query parameters or JSON arrays, and constructing empty lists. Concrete use cases include preparing and processing CloudWatch metric queries for API requests or response parsing.",
      "description_length": 397,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListMetricsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for listing metrics in a monitoring service. It includes fields for filtering by namespace, metric name, dimensions, and activity, along with serialization and deserialization functions for JSON and query formats. It is used to construct and process API requests to retrieve metric data from a cloud monitoring system.",
      "description_length": 358,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectorStateValue",
      "library": "aws-cloudwatch",
      "description": "This module defines an enumerated type representing the state of an anomaly detector, with values for pending training, trained with insufficient data, and fully trained. It includes functions to convert between string representations and the enumerated type, as well as serialization and deserialization routines for JSON, XML, and query parameters. It is used to manage and communicate the operational state of anomaly detection models in monitoring workflows.",
      "description_length": 462,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutMetricDataInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for sending metric data to CloudWatch, including the namespace and metric data. It provides functions to construct, parse, and serialize the input for API requests. Use this module when publishing custom metrics to AWS CloudWatch from OCaml applications.",
      "description_length": 294,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteDashboardsOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of deleting dashboards in AWS CloudWatch. It defines a unit type for successful deletions and provides functions to parse, convert to query format, serialize to JSON, and deserialize from JSON. Use it when managing dashboard deletion responses in AWS CloudWatch integrations.",
      "description_length": 306,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DatapointValueMap",
      "library": "aws-cloudwatch",
      "description": "This module handles mappings of string keys to double values, represented as a hash table. It provides functions to convert these mappings into query parameters or JSON format, and to parse them from JSON. It is used when working with CloudWatch metrics data that requires structured key-value representations for dimensions and metric values.",
      "description_length": 343,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutInsightRuleInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and associated operations for creating or updating an insight rule in Amazon CloudWatch. It includes functions to construct, parse, and serialize the rule's name, state, definition, and tags, which are used when interacting with the CloudWatch API. The module is specifically used to format requests that define how insight rules monitor and analyze log data.",
      "description_length": 399,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataResults",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization, deserialization, and manipulation of CloudWatch metric data results. It works with lists of `MetricDataResult.t` structures, supporting conversion to and from XML, JSON, and query formats. It is used when retrieving and processing metric statistics from AWS CloudWatch, such as when handling output from `GetMetricStatistics` or similar API calls.",
      "description_length": 386,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutAnomalyDetectorOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of the `PutAnomalyDetector` operation in AWS CloudWatch. It defines a unit type and functions to construct, parse, and serialize the response in various formats such as JSON and query parameters. It is used when confirming the successful creation or update of an anomaly detector in CloudWatch.",
      "description_length": 325,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleMetricDatapoints",
      "library": "aws-cloudwatch",
      "description": "This module handles parsing, transforming, and serializing lists of insight rule metric datapoints. It works with XML nodes, JSON values, and AWS query structures to convert between these formats and the internal datapoint list type. Concrete use cases include processing CloudWatch responses containing metric data and preparing metric data for CloudWatch requests.",
      "description_length": 366,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmHistoryOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of describing alarm history in AWS CloudWatch, providing structured access to alarm history items and pagination tokens. It works with XML, JSON, and query string representations of alarm history data. Concrete use cases include parsing responses from the CloudWatch API and constructing output for further processing or display.",
      "description_length": 360,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ExtendedStatistics",
      "library": "aws-cloudwatch",
      "description": "Handles serialization and deserialization of extended statistics metrics for AWS CloudWatch. Works with string lists to represent statistic names, converting between XML, JSON, and query parameter formats. Used when configuring or retrieving custom statistics in CloudWatch metrics.",
      "description_length": 282,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectors",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch anomaly detectors, providing direct conversions between XML, JSON, and query formats. It includes parsing from XML nodes and JSON input, and serialization to both JSON and AWS query format. Concrete use cases include processing CloudWatch API responses and preparing anomaly detector data for API requests.",
      "description_length": 346,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagResourceOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization and deserialization of empty output responses for CloudWatch tag operations. It defines a unit type and functions to convert unit values to AWS query format, JSON, and back, ensuring compatibility with AWS SDK workflows. It is used specifically for processing empty responses when tagging or untagging CloudWatch resources.",
      "description_length": 361,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListTagsForResourceOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of listing tags for a CloudWatch resource. It provides functions to create, parse, and convert tag data to query or JSON formats. The primary data structure is a record containing a list of tags, used when retrieving resource tags from CloudWatch.",
      "description_length": 278,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteAnomalyDetectorOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines the output structure and serialization functions for a CloudWatch delete anomaly detector operation. It works with unit type values, providing functions to convert to AWS query format, JSON, and parse from JSON. It is used to handle responses when deleting anomaly detectors in CloudWatch.",
      "description_length": 309,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.StandardUnit",
      "library": "aws-cloudwatch",
      "description": "This module defines a set of standard unit types for metrics, such as Seconds, Bytes, Percent, and their per-second variants. It provides conversions between these units and strings, JSON, and XML, along with parsing and query generation functions. Use cases include specifying and serializing units when interacting with AWS CloudWatch metrics, particularly for monitoring and reporting numeric measurements in cloud environments.",
      "description_length": 431,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetector",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for configuring and representing CloudWatch anomaly detectors, including metric identifiers, dimensions, statistical configurations, and state. It provides functions to construct, serialize, and deserialize these detectors to and from JSON, query parameters, and XML. Concrete use cases include setting up anomaly detection for custom metrics and processing CloudWatch API responses.",
      "description_length": 420,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricData",
      "library": "aws-cloudwatch",
      "description": "This module handles collections of metric data points for AWS CloudWatch, providing operations to convert between XML, JSON, and query formats. It works with lists of `MetricDatum` records, enabling serialization and deserialization for API interactions. Concrete use cases include preparing metric data for CloudWatch PutMetricData requests and parsing responses containing metric statistics.",
      "description_length": 393,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Datapoint",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing individual metric data points in Amazon CloudWatch, including measurements like average, sum, minimum, and maximum values over a time interval. It supports operations to construct, serialize, and parse data points, with optional fields for flexible data representation. Concrete use cases include submitting custom metrics to CloudWatch, analyzing time-series metric data, and integrating with monitoring systems that require structured metric outputs.",
      "description_length": 506,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagResourceInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for tagging a CloudWatch resource, consisting of a resource ARN and a list of tags. It provides functions to construct, parse, and serialize the input for use in API requests. Use this module when preparing tag operations for CloudWatch metrics or alarms, particularly when integrating with AWS SDK workflows.",
      "description_length": 349,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRules",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization and deserialization of CloudWatch insight rules. It works with lists of insight rule records, converting between XML, JSON, and query parameter formats. Use it when interacting with CloudWatch APIs to list or process insight rules.",
      "description_length": 269,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmHistoryInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and associated operations for querying alarm history in AWS CloudWatch. It includes functions to construct, serialize, and parse alarm history requests, supporting filtering by alarm name, type, history item type, date range, and pagination. Concrete use cases include retrieving specific alarm events for monitoring, auditing, or debugging cloud infrastructure performance.",
      "description_length": 414,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleNames",
      "library": "aws-cloudwatch",
      "description": "Handles parsing, formatting, and conversion of CloudWatch insight rule names. Works with lists of base string types, supporting query parameter encoding, JSON serialization, and XML parsing. Used to process collections of insight rule names during CloudWatch API interactions like listing or deleting rules.",
      "description_length": 307,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.StatusCode",
      "library": "aws-cloudwatch",
      "description": "This module defines a polymorphic variant type `t` representing CloudWatch status codes, including `Complete`, `InternalError`, and `PartialData`. It provides bidirectional conversions between strings and the `t` type, along with serialization and deserialization functions for JSON, XML, and query parameters. Use cases include handling CloudWatch API responses, logging metric statuses, and converting status strings from external sources into typed values for safer processing.",
      "description_length": 480,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeInsightRulesInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for describing CloudWatch insight rules, with optional pagination via `next_token` and `max_results`. It supports parsing from XML, converting to query parameters or JSON, and constructing inputs programmatically. Concrete use cases include configuring paginated requests to list insight rules and serializing inputs for API calls or logging.",
      "description_length": 382,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ConcurrentModificationException",
      "library": "aws-cloudwatch",
      "description": "This module defines a singleton type `t` representing an error condition for concurrent modifications in AWS CloudWatch. It provides functions to construct, parse, and serialize this error type to and from JSON and query formats. Use this module when handling or signaling conflicts from simultaneous updates to CloudWatch resources like alarms or dashboards.",
      "description_length": 359,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricStat",
      "library": "aws-cloudwatch",
      "description": "This module defines a record type for representing CloudWatch metric statistics, including the metric, period, statistical value, and optional unit. It provides functions to construct, parse, and serialize metric stat objects to and from XML, JSON, and query formats. Use this module when querying CloudWatch metrics, such as retrieving average CPU utilization over a time period.",
      "description_length": 380,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetDashboardInput",
      "library": "aws-cloudwatch",
      "description": "This module defines a single data type `t` representing input parameters for retrieving a CloudWatch dashboard by name. It provides functions to construct, serialize, and parse dashboard input data, specifically handling conversions to and from JSON and query formats. Use this module when interacting with AWS CloudWatch APIs to fetch dashboard details programmatically.",
      "description_length": 371,
      "index": 61,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for describing CloudWatch alarms, including fields like alarm names, state values, and pagination parameters. It provides functions to construct, parse, and serialize alarm input data for API requests. Use this module when querying CloudWatch alarms with specific filters or retrieving paginated alarm lists.",
      "description_length": 348,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DimensionFilters",
      "library": "aws-cloudwatch",
      "description": "Handles dimension filters for CloudWatch metrics by providing functions to convert, parse, and serialize filter lists. Works with lists of dimension filter records, each containing name-value pairs. Used to construct API requests and process responses involving metric dimensions in JSON or XML formats.",
      "description_length": 303,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DisableAlarmActionsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for disabling alarm actions in CloudWatch, specifically containing a list of alarm names. It provides functions to construct, serialize, and parse this input, supporting operations like converting to a query format or JSON for API requests. It is used when making a direct API call to disable actions for specific alarms.",
      "description_length": 361,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MessageData",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling message data with optional code and value fields. It provides functions to create instances, parse from XML nodes, and convert to query parameters, JSON, and back from JSON. It is used to process and serialize error or diagnostic messages in AWS CloudWatch operations.",
      "description_length": 318,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetInsightRuleReportOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling the output of an insight rule report retrieval from CloudWatch. It includes fields for key labels, aggregation statistics, contributor data, and metric datapoints, supporting precise analysis of monitored system behavior. Operations include JSON and XML serialization, enabling integration with AWS APIs and data processing workflows.",
      "description_length": 384,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ComparisonOperator",
      "library": "aws-cloudwatch",
      "description": "This module defines a set of comparison operators used to represent threshold conditions for cloud monitoring alerts. It provides functions to convert between string representations and the enumerated type, as well as serialization and deserialization to and from JSON and XML formats. These operations are essential when configuring or interpreting CloudWatch alarm conditions that evaluate metrics against static thresholds.",
      "description_length": 426,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsForMetricOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of describing CloudWatch alarms for a specific metric. It provides functions to construct, parse, and serialize alarm data using XML and JSON formats. The primary data structure is a record containing a list of metric alarms, which can be used to analyze or display alarm states in monitoring tools or alerting systems.",
      "description_length": 350,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.Values",
      "library": "aws-cloudwatch",
      "description": "This module represents a list of numeric values for AWS CloudWatch metrics, providing functions to convert these values to and from XML, JSON, and query parameters. It supports operations for parsing XML nodes into a list of doubles, serializing the list to JSON or query format, and constructing or extracting the list from JSON. Concrete use cases include handling metric data points when interacting with CloudWatch APIs, such as publishing custom metrics or retrieving metric statistics.",
      "description_length": 491,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.CompositeAlarms",
      "library": "aws-cloudwatch",
      "description": "This module handles composite alarm data in AWS CloudWatch by providing functions to parse, convert, and serialize alarm lists. It works with XML nodes, JSON values, and AWS query structures to facilitate interaction with CloudWatch's composite alarm APIs. Concrete use cases include processing CloudWatch API responses containing composite alarms, building requests to update or create alarms, and converting alarm data between JSON and internal OCaml representations.",
      "description_length": 469,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.UntagResourceInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for untagging a resource in AWS CloudWatch. It includes operations to create, parse, and serialize the input containing the resource ARN and tag keys. It works with string and list types to handle resource identifiers and tag key collections.",
      "description_length": 282,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributors",
      "library": "aws-cloudwatch",
      "description": "This module handles parsing, serialization, and JSON conversion for a list of insight rule contributors. It works with XML nodes, JSON values, and query parameters, specifically processing lists of contributor data structures. Use it to transform contributor data between different representations when interacting with AWS CloudWatch APIs.",
      "description_length": 340,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutAnomalyDetectorInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and associated operations for configuring an anomaly detector in a monitoring service. It includes functions to construct, serialize, and parse the input data, which consists of metric identifiers, dimensions, statistical parameters, and optional configuration settings. It is used when setting up or updating anomaly detection for metrics, enabling integration with JSON and XML-based APIs.",
      "description_length": 431,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Counts",
      "library": "aws-cloudwatch",
      "description": "This module handles a list of double-precision floating point numbers, representing metric counts in a monitoring system. It provides functions to convert counts to query parameters, parse them from XML nodes, and serialize or deserialize them using JSON. It is used when working with metric data points in cloud monitoring workflows.",
      "description_length": 334,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagList",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch tags, providing operations to convert tag lists to and from JSON and query formats. It includes functions for parsing tag lists from XML nodes and constructing tag lists from JSON values. Use this module when working with CloudWatch resource tags in API requests or responses, such as attaching or retrieving metadata from alarms or metrics.",
      "description_length": 381,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ListDashboardsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for listing CloudWatch dashboards, including optional dashboard name prefixes and pagination tokens. It provides functions to construct, parse, and serialize the input for use in API requests. Use this module when querying AWS CloudWatch to retrieve dashboard information with specific filtering and pagination options.",
      "description_length": 359,
      "index": 76,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDatum",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing individual metric data points in AWS CloudWatch, including fields like metric name, dimensions, timestamp, value, and unit. It provides functions to construct, parse, and serialize metric data for use with CloudWatch's API, supporting operations like sending custom metrics or querying existing ones. The module works directly with XML, JSON, and query parameter formats for integration with AWS SDK components.",
      "description_length": 465,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardValidationMessages",
      "library": "aws-cloudwatch",
      "description": "This module handles parsing, converting, and validating dashboard messages from XML, JSON, and query formats. It works with lists of `DashboardValidationMessage.t` to represent and manipulate validation feedback from dashboard operations. Concrete use cases include processing AWS CloudWatch dashboard validation responses into structured data for error reporting or automated correction workflows.",
      "description_length": 398,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricAlarm",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing CloudWatch metric alarms, including properties like alarm name, metric details, thresholds, and actions. It provides functions to construct, parse, and serialize alarms for use in AWS API requests or responses. Use cases include creating or updating alarms based on custom metrics, retrieving alarm configurations, and handling alarm state changes in monitoring systems.",
      "description_length": 424,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutDashboardInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for putting a CloudWatch dashboard, with fields for the dashboard name and body. It provides functions to construct, parse, and serialize the input for API requests. Use this module when configuring or updating CloudWatch dashboards via the AWS SDK.",
      "description_length": 289,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InternalServiceFault",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling internal service faults in AWS CloudWatch, including operations to create, parse, and serialize fault data. It works with XML nodes, JSON values, and query parameters to facilitate error handling and communication with AWS services. Concrete use cases include processing fault responses from CloudWatch APIs and constructing error messages for failed operations.",
      "description_length": 412,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricDataOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output response from fetching metric data in AWS CloudWatch. It provides constructors, parsing, and serialization functions for working with metric data results, pagination tokens, and result messages. Use it to process and transform CloudWatch metric data responses in applications that monitor or analyze AWS resource performance.",
      "description_length": 356,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidFormatFault",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing an invalid format error with an optional message string. It provides functions to construct, parse, and convert the error to query parameters, JSON, or XML. Use this module when handling malformed input errors in AWS CloudWatch operations, particularly for interacting with AWS APIs that return or require invalid format fault structures.",
      "description_length": 382,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.EnableInsightRulesInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for enabling insight rules in CloudWatch, containing a list of rule names. It provides functions to construct, serialize, and parse this input, specifically working with XML, JSON, and query parameter formats. It is used when enabling specific insight rules via the CloudWatch API, where rule names must be provided in a structured payload.",
      "description_length": 380,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorKeys",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization and deserialization of insight rule contributor keys, which are lists of strings, for use in AWS CloudWatch operations. It provides functions to convert these lists to and from XML, JSON, and query parameters, ensuring correct formatting for API interactions. Use cases include processing contributor data returned by CloudWatch's `GetInsightRuleReport` and preparing input for rule evaluations.",
      "description_length": 433,
      "index": 85,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.Statistics",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch statistic types, providing functions to convert between XML, JSON, and query formats. It supports parsing statistic lists from XML nodes and serializing them for API requests. Use this module when working with CloudWatch metrics that require multiple statistics, such as GetMetricStatistics calls.",
      "description_length": 337,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardNotFoundError",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing an error when a CloudWatch dashboard is not found, containing an optional message. It provides functions to construct, parse, and convert the error to various formats like JSON and query parameters. Use this to handle missing dashboard errors in CloudWatch API interactions, such as when retrieving or updating non-existent dashboards.",
      "description_length": 379,
      "index": 87,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_cloudwatch.Types.ResourceNotFound",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing error responses when a resource is not found, containing an optional message. It provides functions to construct, parse, and serialize these error objects to and from JSON, query parameters, and XML. Use this module to handle missing resource errors in API responses, particularly for interacting with AWS CloudWatch services.",
      "description_length": 370,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleMetricDatapoint",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure representing a single data point for an insight rule metric, capturing various statistical measures like average, sum, minimum, and maximum, along with a timestamp. It includes functions to construct, parse, and serialize these data points to and from JSON and AWS query formats. It is used to process and transmit metric data retrieved from AWS CloudWatch for analysis and visualization.",
      "description_length": 425,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Timestamps",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of timestamps in AWS CloudWatch operations, providing functions to convert, parse, and serialize timestamp data. It works with `Aws.BaseTypes.DateTime.t list` for representing multiple timestamps. Use this module when sending or receiving timestamp lists in CloudWatch API requests, such as when querying metrics or processing alarm history.",
      "description_length": 367,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleContributorDatapoints",
      "library": "aws-cloudwatch",
      "description": "Handles parsing and serialization of contributor data points for CloudWatch insight rules. Works with lists of `InsightRuleContributorDatapoint` records, converting between XML, JSON, and query formats. Useful for processing CloudWatch metric insights results and preparing them for API requests or storage.",
      "description_length": 307,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteInsightRulesInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for deleting CloudWatch insight rules, containing a list of rule names. It provides functions to construct, parse, and serialize the input for API requests. Use this module when specifying which insight rules to delete in AWS CloudWatch operations.",
      "description_length": 288,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAlarmsForMetricInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and associated operations for querying CloudWatch alarms associated with a specific metric. It includes functions to construct, serialize, and parse the input data, supporting interactions with the CloudWatch API using JSON or query string formats. The module works directly with metric identifiers, optional statistics, dimensions, and time-based parameters to refine alarm queries.",
      "description_length": 423,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmNames",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of alarm names for AWS CloudWatch operations. It provides functions to convert alarm name lists to and from JSON and query formats, as well as parsing from XML nodes. It is used when working with bulk alarm operations, such as retrieving or setting attributes for multiple alarms at once.",
      "description_length": 314,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRuleMetricList",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of metric names for insight rules in AWS CloudWatch. It provides functions to convert these lists to and from XML, JSON, and query formats, ensuring proper serialization and deserialization. Use this module when managing custom insight rules that track specific metrics across AWS resources.",
      "description_length": 317,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectorConfiguration",
      "library": "aws-cloudwatch",
      "description": "This module defines a configuration for anomaly detectors, including time ranges to exclude and an optional metric timezone. It provides functions to construct, parse, and serialize configurations for use in AWS CloudWatch operations. Use cases include setting up anomaly detection with custom exclusions and timezones when monitoring metrics.",
      "description_length": 343,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAnomalyDetectorsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for input parameters used to describe anomaly detectors in a monitoring service. It includes fields for pagination, metric identification, and dimension filtering, along with functions to construct, serialize, and parse these inputs. It is used when querying or processing anomaly detection configurations based on specific metrics and dimensions.",
      "description_length": 384,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PartialFailure",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling partial failures in AWS CloudWatch operations, with fields to capture resource, exception type, error code, and description. It provides functions to construct, parse, and serialize failure information in multiple formats including JSON, query parameters, and XML. Concrete use cases include reporting individual failures when batch operations partially succeed or logging detailed error information for debugging.",
      "description_length": 464,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmTypes",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization, deserialization, and manipulation of CloudWatch alarm types. It works with lists of `AlarmType.t` values, supporting conversion to and from XML, JSON, and query parameters. It is used when interacting with AWS CloudWatch APIs to list, filter, or process alarms based on their type.",
      "description_length": 320,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.StatisticSet",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for statistical data points with four numerical fields: sample count, sum, minimum, and maximum. It provides functions to construct instances, convert to and from JSON and XML formats, and serialize for queries. It is used when publishing or retrieving custom metrics in Amazon CloudWatch that require detailed statistical information.",
      "description_length": 372,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AnomalyDetectorExcludedTimeRanges",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization and deserialization of excluded time ranges for anomaly detectors. It works with lists of time range structures, supporting operations to convert these ranges to and from XML, JSON, and query parameters. It is used when configuring or retrieving anomaly detector settings that exclude specific time intervals from analysis.",
      "description_length": 361,
      "index": 101,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DatapointValues",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of double-precision floating-point values, primarily for representing metric data points in AWS CloudWatch. It provides functions to convert these lists to and from JSON and query formats, as well as parsing from XML nodes. Use cases include serializing and deserializing metric data for API requests and responses.",
      "description_length": 341,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.UntagResourceOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization and deserialization of untag resource responses in AWS CloudWatch. It provides functions to convert unit values to query parameters, JSON objects, and back, ensuring compatibility with AWS API request formats. Use this module when managing tag removal operations on CloudWatch resources.",
      "description_length": 325,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteDashboardsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for deleting CloudWatch dashboards, containing a list of dashboard names. It provides functions to construct, parse, and serialize the input for API requests, specifically working with XML, JSON, and query parameter formats. Concrete use cases include preparing batch deletion requests of dashboards and integrating with AWS SDK operations for CloudWatch.",
      "description_length": 395,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.LimitExceededException",
      "library": "aws-cloudwatch",
      "description": "This module defines a unit type and associated functions for handling cases where a service limit has been exceeded. It provides operations to create, parse, and convert unit values to query parameters or JSON format, typically used in error responses from AWS CloudWatch APIs. Use this module to represent and serialize limit exceeded exceptions in API requests and responses.",
      "description_length": 377,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteAnomalyDetectorInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and associated operations for deleting an anomaly detector in AWS CloudWatch. It handles parsing from XML, conversion to query format, and serialization to and from JSON. The primary data type is a record containing namespace, metric name, optional dimensions, and statistic, used directly when making API requests to remove anomaly detectors.",
      "description_length": 383,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidParameterValueException",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing an invalid parameter value exception with an optional message field. It provides functions to construct, parse, and serialize the exception to various formats including JSON, query parameters, and XML. Use this module when handling or reporting errors related to invalid input parameters in AWS CloudWatch operations.",
      "description_length": 361,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Metrics",
      "library": "aws-cloudwatch",
      "description": "This module handles the serialization, deserialization, and querying of CloudWatch metric data. It works with lists of `Metric.t` records, converting them to and from XML, JSON, and query formats. It is used when interacting with AWS CloudWatch APIs to submit or retrieve metric data points.",
      "description_length": 291,
      "index": 108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeInsightRulesOutput",
      "library": "aws-cloudwatch",
      "description": "Handles output from describing CloudWatch insight rules, providing functions to create, parse, and serialize responses. It works with pagination tokens and insight rule lists, supporting XML, JSON, and query parameter formats. Used when retrieving and processing CloudWatch insight rule data in AWS integrations.",
      "description_length": 312,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.CompositeAlarm",
      "library": "aws-cloudwatch",
      "description": "This module defines a composite alarm structure with fields for alarm actions, state values, timestamps, and configuration rules. It provides operations to create, parse, and serialize composite alarms to and from JSON, query parameters, and XML. Use this module when managing AWS CloudWatch composite alarms, such as when retrieving alarm details, updating alarm configurations, or handling alarm state changes.",
      "description_length": 412,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidNextToken",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing an error response from AWS CloudWatch when an invalid pagination token is used. It includes operations to construct, parse, and serialize the error, supporting interaction with AWS APIs through query parameters or JSON. Use this type to handle pagination errors when making requests to CloudWatch services.",
      "description_length": 350,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardValidationMessage",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing validation messages related to dashboards, with optional fields for a data path and a message. It provides functions to construct, parse, and convert these messages to and from JSON and query formats. It is used to handle dashboard validation errors when interacting with AWS CloudWatch APIs, particularly during dashboard creation or updates.",
      "description_length": 397,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataQuery",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for querying metric data, including fields like metric identifier, metric statistics, mathematical expressions, and result configuration. It provides functions to construct, parse, and serialize these queries for use in API requests. Concrete use cases include building custom CloudWatch metric queries, processing returned metric data, and integrating with AWS SDK operations that require structured metric input.",
      "description_length": 451,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.Datapoints",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of CloudWatch datapoints, providing functions to parse, convert to query format, and serialize to and from JSON. It works with `Datapoint.t` lists and JSON or XML input/output formats. Use this module when retrieving or processing time-series metric data from CloudWatch, such as when querying custom metrics or processing monitoring data.",
      "description_length": 365,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DashboardNames",
      "library": "aws-cloudwatch",
      "description": "Handles lists of dashboard names for AWS CloudWatch operations. Provides functions to convert, parse, and serialize string lists to and from JSON, query parameters, and XML. Useful when managing multiple CloudWatch dashboards, such as listing or deleting a set of dashboards in API requests.",
      "description_length": 291,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DeleteAlarmsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for deleting CloudWatch alarms, containing a list of alarm names. It provides functions to construct, parse, and serialize the input for API requests, supporting XML and JSON formats. Use this module when configuring alarm deletion operations in AWS CloudWatch.",
      "description_length": 301,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricWidgetImageInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for retrieving metric widget images, consisting of a metric widget JSON string and an optional output format. It provides functions to construct, parse, and convert the input type to query parameters or JSON for API requests. Concrete use cases include generating dashboard widget images and exporting metric visualizations in specified formats.",
      "description_length": 385,
      "index": 117,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.Statistic",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing statistical operations used in CloudWatch metrics, including `SampleCount`, `Average`, `Sum`, `Minimum`, and `Maximum`. It provides conversions to and from strings, JSON, and query parameters, along with parsing from XML. These functions support handling CloudWatch statistic values in API requests and responses.",
      "description_length": 357,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutDashboardOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output response for a dashboard update operation in AWS CloudWatch. It includes a list of validation messages returned after attempting to update a dashboard. The module works with XML, JSON, and query parameter formats for data interchange. Use this module when processing responses from CloudWatch to validate dashboard updates or handle errors.",
      "description_length": 371,
      "index": 119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.Metric",
      "library": "aws-cloudwatch",
      "description": "This module defines a metric structure with optional namespace, metric name, and dimensions. It provides functions to construct, serialize, and deserialize metrics for use in AWS CloudWatch operations. These operations include converting metrics to query parameters or JSON, and parsing them from XML or JSON input.",
      "description_length": 315,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.InsightRule",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing CloudWatch insight rules, with operations to create, parse, and serialize rule data. It works with XML nodes, JSON values, and query parameters to facilitate interaction with AWS CloudWatch APIs. Concrete use cases include processing CloudWatch rule configurations from API responses and preparing rule data for API requests.",
      "description_length": 379,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DescribeAnomalyDetectorsOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of describing anomaly detectors in CloudWatch, providing functions to create, parse, and serialize the response data. It works with a list of anomaly detectors and an optional next token for pagination. Use this module to process results from `DescribeAnomalyDetectors` API calls, including handling paginated responses and converting data to and from JSON or query formats.",
      "description_length": 405,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ResourceNotFoundException",
      "library": "aws-cloudwatch",
      "description": "This module defines a type `t` representing a resource not found error, with optional fields for resource type and ID. It includes functions to construct, parse, and convert the error to query parameters, JSON, or from JSON. It is used to handle missing resource errors in API responses when interacting with AWS CloudWatch services.",
      "description_length": 333,
      "index": 123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.GetMetricStatisticsOutput",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling CloudWatch metric statistics responses, including a label and a collection of data points. It provides functions to construct, parse, and serialize the structure to and from XML, JSON, and query formats. Use this module when retrieving and processing metric data from AWS CloudWatch, such as CPU utilization or request latency over time.",
      "description_length": 387,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.PutMetricAlarmInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure and operations for configuring CloudWatch alarms based on metrics. It includes functions to construct, parse, and serialize alarm configurations, supporting fields like thresholds, evaluation periods, and actions. Concrete use cases include setting up alarms for CPU utilization, request latency, or custom metrics with specific triggers and notifications.",
      "description_length": 396,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.TagKeyList",
      "library": "aws-cloudwatch",
      "description": "This module handles lists of string-based tag keys for AWS CloudWatch operations. It provides functions to convert tag key lists to query parameters or JSON, and to parse them from XML or JSON input. Use this module when working with CloudWatch tagging APIs to manage resource tags efficiently.",
      "description_length": 294,
      "index": 126,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Aws_cloudwatch.Types.Tag",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling tags in AWS CloudWatch, consisting of key-value pairs of strings. It provides functions to construct tags, parse them from XML nodes, convert them to query parameters or JSON format, and create them from JSON input. This module is used to manage metadata tags associated with CloudWatch metrics and alarms.",
      "description_length": 356,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.ResourceList",
      "library": "aws-cloudwatch",
      "description": "This module represents a list of string resources, primarily used for handling collections of identifiers or ARNs in AWS CloudWatch operations. It provides functions to convert the list to and from XML, JSON, and query string formats, ensuring compatibility with AWS API request and response structures. It is commonly used when interacting with CloudWatch metrics, alarms, or logs that require or return lists of string-based resources.",
      "description_length": 437,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.DisableInsightRulesOutput",
      "library": "aws-cloudwatch",
      "description": "This module handles the output of disabling CloudWatch insight rules, specifically capturing any failures that occur during the batch operation. It works with a list of failure records, each detailing the rule and the error. Use this to process or inspect which rules failed to disable and why.",
      "description_length": 294,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.SetAlarmStateInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for setting an alarm state in CloudWatch, including fields for the alarm name, state value, reason, and optional reason data. It provides functions to construct, parse, and serialize the input for use with AWS API requests. Concrete use cases include updating alarm states programmatically based on monitoring logic or external events.",
      "description_length": 375,
      "index": 130,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.EnableAlarmActionsInput",
      "library": "aws-cloudwatch",
      "description": "This module defines the input structure for enabling alarm actions in CloudWatch, specifically containing a list of alarm names. It provides functions to construct, serialize, and parse this input, supporting both JSON and XML formats. It is used when configuring CloudWatch alarms to trigger actions based on specified conditions.",
      "description_length": 331,
      "index": 131,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.InvalidParameterCombinationException",
      "library": "aws-cloudwatch",
      "description": "This module defines a type and associated functions for handling invalid parameter combination exceptions in AWS CloudWatch operations. It provides functions to create, parse, and serialize exception data, specifically working with XML nodes, query parameters, and JSON values. Use cases include error handling when invalid combinations of parameters are passed to CloudWatch APIs, enabling structured communication of misconfigurations.",
      "description_length": 437,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.MetricDataResult",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for representing CloudWatch metric data results, including identifiers, timestamps, values, and status information. It provides functions to construct, parse, and convert these structures to and from XML, JSON, and query formats. Use this module when retrieving or processing CloudWatch metrics data, such as when querying custom metrics or handling monitoring data in AWS integrations.",
      "description_length": 423,
      "index": 133,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.BatchFailures",
      "library": "aws-cloudwatch",
      "description": "This module handles batch failures in CloudWatch operations by providing functions to convert, parse, and manipulate lists of partial failures. It works with XML nodes, JSON values, and query parameters to facilitate error handling during bulk metric or log operations. Concrete use cases include processing failed metric submissions in batched CloudWatch PutMetricData requests and extracting error details from CloudWatch API responses.",
      "description_length": 438,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types.AlarmHistoryItem",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure representing an individual alarm history item, with fields for alarm name, type, timestamp, history item type, summary, and data. It provides constructors, JSON and XML parsers, and query builders to facilitate handling alarm history data in AWS CloudWatch. Use this module to process or generate alarm history entries when interacting with CloudWatch alarms, such as logging changes or auditing alarm state transitions.",
      "description_length": 457,
      "index": 135,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.Types.LimitExceededFault",
      "library": "aws-cloudwatch",
      "description": "This module defines a data structure for handling limit exceeded errors in AWS CloudWatch, specifically a type `t` that includes an optional error message. It provides functions to construct, parse, and convert the error data to and from XML, JSON, and query formats. Use this module when interacting with AWS CloudWatch APIs to handle or propagate errors related to service limits being exceeded.",
      "description_length": 397,
      "index": 136,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Aws_cloudwatch.ListDashboards",
      "library": "aws-cloudwatch",
      "description": "This module handles listing CloudWatch dashboards by converting input parameters into an HTTP request and parsing the response. It works with `ListDashboardsInput` and `ListDashboardsOutput` types, along with internal error types for handling failures. It is used to retrieve dashboard names and ARNs, especially when integrating with monitoring systems or building custom dashboard management tools.",
      "description_length": 400,
      "index": 137,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.TagResource",
      "library": "aws-cloudwatch",
      "description": "This module handles tagging operations for AWS CloudWatch resources by converting native inputs into properly signed HTTP requests and parsing responses. It works with `TagResourceInput` to construct requests that associate metadata tags with monitoring resources, and processes responses into unit outputs or specific CloudWatch errors. Concrete use cases include adding tags to CloudWatch alarms or metrics for organizational or billing tracking purposes.",
      "description_length": 457,
      "index": 138,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DisableAlarmActions",
      "library": "aws-cloudwatch",
      "description": "This module disables actions for specified CloudWatch alarms by sending a request to the AWS service. It works with `DisableAlarmActionsInput` to construct HTTP requests and processes responses into unit or error types. Concrete use cases include programmatically silencing notifications or auto-scaling triggers when alarms are no longer actionable.",
      "description_length": 350,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.GetInsightRuleReport",
      "library": "aws-cloudwatch",
      "description": "This module handles the retrieval and processing of CloudWatch insight rule reports by converting input parameters into properly signed HTTP requests and parsing the corresponding responses. It works with structured input and output types defined in `Aws_cloudwatch.Types`, specifically `GetInsightRuleReportInput` and `GetInsightRuleReportOutput`, along with internal error types for handling failures. Concrete use cases include querying aggregated metric data from CloudWatch insight rules and handling pagination, filtering, and time-range specifications in monitoring workflows.",
      "description_length": 583,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.PutMetricData",
      "library": "aws-cloudwatch",
      "description": "This module sends custom metric data to AWS CloudWatch, allowing you to publish numeric data points for monitoring. It works with the `PutMetricDataInput` type, which includes metric names, values, timestamps, and dimensions. A concrete use case is tracking application-specific performance metrics like request latency or error rates in real-time.",
      "description_length": 348,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DescribeInsightRules",
      "library": "aws-cloudwatch",
      "description": "This module handles describing CloudWatch insight rules by converting input parameters into an HTTP request and parsing the response or errors. It works with input and output types specific to the CloudWatch API, including encoded query parameters and XML responses. Use this module to retrieve insight rule configurations from AWS CloudWatch, handling both successful responses and API-specific errors.",
      "description_length": 403,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.GetMetricStatistics",
      "library": "aws-cloudwatch",
      "description": "This module handles retrieving metric statistics from AWS CloudWatch by defining input/output types and converting between HTTP requests and native OCaml types. It works with structured types for querying metrics, including dimensions, timestamps, and statistical periods. Use this module to fetch and process performance metrics like CPU utilization or request latency directly from AWS CloudWatch APIs.",
      "description_length": 404,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.UntagResource",
      "library": "aws-cloudwatch",
      "description": "This module handles the removal of tags from AWS CloudWatch resources by defining the input and output types for the operation, along with functions to serialize requests and deserialize responses. It works directly with CloudWatch resource identifiers and tag structures, using HTTP to interface with the AWS API. Concrete use cases include untagging CloudWatch alarms or metrics for cost allocation or resource management.",
      "description_length": 424,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutAnomalyDetector",
      "library": "aws-cloudwatch",
      "description": "This module handles the creation or updating of anomaly detectors in Amazon CloudWatch by converting input data into HTTP requests and parsing responses. It works with `PutAnomalyDetectorInput` to configure metrics and dimensions, and returns no output on success or an error if the request fails. It is used when integrating CloudWatch with custom metrics to detect abnormal behavior based on historical data.",
      "description_length": 410,
      "index": 145,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DisableInsightRules",
      "library": "aws-cloudwatch",
      "description": "This module handles the disabling of CloudWatch insight rules by converting input parameters into an HTTP request and processing the response. It works with input and output types specific to the CloudWatch API, along with error types defined in the AWS SDK. Use this module to programmatically disable insight rules in CloudWatch by sending the appropriate API command.",
      "description_length": 370,
      "index": 146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutMetricAlarm",
      "library": "aws-cloudwatch",
      "description": "This module defines the input and output types for creating or updating CloudWatch alarms based on metric data. It includes functions to convert between native OCaml types and HTTP requests/responses, specifically encoding `PutMetricAlarmInput` into signed AWS requests and decoding responses into success or error states. It is used to programmatically configure CloudWatch alarms with precise metric thresholds and notification actions.",
      "description_length": 438,
      "index": 147,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAlarmsForMetric",
      "library": "aws-cloudwatch",
      "description": "This module handles querying AWS CloudWatch to retrieve alarms associated with a specific metric. It provides functions to convert input parameters into an HTTP request and parse the corresponding response or error. Use this module to programmatically inspect CloudWatch alarms for metrics like CPU utilization or custom application-specific metrics.",
      "description_length": 350,
      "index": 148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.SetAlarmState",
      "library": "aws-cloudwatch",
      "description": "This module handles setting the state of CloudWatch alarms by converting input data into HTTP requests and parsing responses. It works with `SetAlarmStateInput` to configure alarm state changes and communicates with the CloudWatch service using signed HTTP requests. Concrete use cases include updating alarm states in response to monitoring events or automated scaling triggers.",
      "description_length": 379,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DeleteDashboards",
      "library": "aws-cloudwatch",
      "description": "This module handles the deletion of CloudWatch dashboards by converting input parameters into an HTTP request and processing the response. It works with the `DeleteDashboardsInput` type to specify dashboard names and interacts with AWS CloudWatch service endpoints. Use this module to delete one or more dashboards by name, where the operation returns no output on success or an error if the request fails.",
      "description_length": 406,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Types",
      "library": "aws-cloudwatch",
      "description": "This module models and manipulates CloudWatch monitoring data, enabling metric collection, alarm configuration, anomaly detection, and dashboard management. It defines core data types such as metrics with dimensional data, time ranges, alarm states, and dashboard metadata, and supports operations for submitting custom metrics, setting alert thresholds, analyzing historical data, and handling API errors. Child modules refine this functionality with structured types and serialization for dimensions, metric data points, insight rule contributors, anomaly detectors, alarm history, tags, and dashboard entries, ensuring seamless conversion between XML, JSON, and query formats. Specific capabilities include constructing and parsing metric queries, handling batch failures, configuring composite alarms, and processing insight rule reports, all while supporting AWS API interactions for monitoring, alerting, and visualization workflows.",
      "description_length": 939,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.GetMetricWidgetImage",
      "library": "aws-cloudwatch",
      "description": "This module handles the retrieval of CloudWatch metric widget images by converting input parameters into signed HTTP requests and parsing the resulting image data or errors. It works with structured input and output types specific to the CloudWatch API, including encoded widget metrics and image responses. Concrete use cases include generating URLs for metric graphs and handling image data returned from CloudWatch.",
      "description_length": 418,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.ListTagsForResource",
      "library": "aws-cloudwatch",
      "description": "This module handles listing tags for a specified AWS CloudWatch resource by converting input data into an HTTP request and parsing the response. It works with input and output types specific to the CloudWatch tagging API, including resource ARNs and tag lists. Use this module to retrieve metadata tags associated with CloudWatch alarms or metrics for cost tracking or resource management.",
      "description_length": 389,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DeleteInsightRules",
      "library": "aws-cloudwatch",
      "description": "This module handles the deletion of CloudWatch insight rules by converting input parameters into an HTTP request and processing the response. It works with input and output types specific to the DeleteInsightRules operation, along with error types defined in the CloudWatch API. Use this module to programmatically remove insight rules by name, handling responses and errors specific to the deletion process.",
      "description_length": 408,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAnomalyDetectors",
      "library": "aws-cloudwatch",
      "description": "This module handles describing anomaly detectors in CloudWatch by converting input parameters into HTTP requests and parsing responses. It works with input and output types specific to the CloudWatch API, including encoded query parameters and XML error responses. It is used to retrieve configurations of anomaly detectors for metrics, handling request signing and response decoding.",
      "description_length": 384,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.EnableInsightRules",
      "library": "aws-cloudwatch",
      "description": "This module enables insight rules in CloudWatch by providing functions to construct and send HTTP requests for rule activation. It handles input and output types specific to enabling insight rules, including error parsing from AWS responses. Use this module to programmatically activate predefined insight rules for monitoring application performance and operational health.",
      "description_length": 374,
      "index": 156,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.GetMetricData",
      "library": "aws-cloudwatch",
      "description": "This module handles retrieving metric data from AWS CloudWatch by converting input parameters into HTTP requests and parsing responses. It works with structured input and output types defined in `Aws_cloudwatch.Types`, along with error types specific to the `GetMetricData` operation. It is used to query custom and standard metrics, including time-series data aggregation across specified dimensions.",
      "description_length": 401,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.Errors_internal",
      "library": "aws-cloudwatch",
      "description": "This module defines a list of specific error types encountered in AWS CloudWatch operations, such as authentication failures, invalid parameters, and service unavailability. It provides functions to convert errors to HTTP status codes, strings, and back from strings, enabling precise error handling and response parsing. These operations are used when interacting with AWS CloudWatch APIs to manage alarms, metrics, and logs, ensuring accurate error identification and client-side logic based on specific failure conditions.",
      "description_length": 525,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAlarms",
      "library": "aws-cloudwatch",
      "description": "This module handles the conversion of inputs and outputs for the `DescribeAlarms` API call to AWS CloudWatch. It works with `DescribeAlarmsInput` and `DescribeAlarmsOutput` types, encoding inputs into HTTP requests and decoding responses into structured outputs or errors. It is used to interact directly with the CloudWatch service, enabling programmatic retrieval of alarm configurations over HTTP.",
      "description_length": 400,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutCompositeAlarm",
      "library": "aws-cloudwatch",
      "description": "This module handles the creation and configuration of composite alarms in Amazon CloudWatch by converting native input types into properly signed HTTP requests and parsing responses. It works directly with `PutCompositeAlarmInput` to construct requests and processes responses into either a unit result or a CloudWatch-specific error. Concrete use cases include setting up composite alarms based on multiple metric conditions and updating alarm configurations programmatically.",
      "description_length": 477,
      "index": 160,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DeleteAnomalyDetector",
      "library": "aws-cloudwatch",
      "description": "This module deletes an anomaly detector from Amazon CloudWatch, handling the HTTP request construction and response parsing. It works with the `DeleteAnomalyDetectorInput` type to specify which anomaly detector to remove and returns no output on success. Use this module to programmatically clean up or reconfigure anomaly detection in CloudWatch by removing existing detectors based on metric and dimension identifiers.",
      "description_length": 420,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.EnableAlarmActions",
      "library": "aws-cloudwatch",
      "description": "This module enables alarm actions in Amazon CloudWatch by sending a request to AWS with the required alarm name. It handles input encoding into HTTP requests and decodes responses into either success or error states, working directly with alarm action input and error types. It is used to programmatically re-enable actions for specific CloudWatch alarms after they have been triggered.",
      "description_length": 386,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutInsightRule",
      "library": "aws-cloudwatch",
      "description": "This module handles the insertion or update of CloudWatch insight rules by converting native inputs into properly signed HTTP requests and processing responses. It works with structured input data defined by `PutInsightRuleInput.t`, returning no output on success or decoding specific AWS errors. It is used when managing custom insight rules for log analysis in CloudWatch, ensuring correct query encoding and error handling.",
      "description_length": 426,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.ListMetrics",
      "library": "aws-cloudwatch",
      "description": "This module handles listing metrics from AWS CloudWatch by converting input parameters into signed HTTP requests and parsing responses. It works with `ListMetricsInput` and `ListMetricsOutput` types, along with internal error types for handling AWS-specific failures. Concrete use cases include querying available CloudWatch metrics for a given namespace and dimensions, and handling pagination of metric lists across multiple requests.",
      "description_length": 436,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.GetDashboard",
      "library": "aws-cloudwatch",
      "description": "This module handles retrieving CloudWatch dashboards by converting input parameters into signed HTTP requests and parsing responses. It works with `GetDashboardInput` and `GetDashboardOutput` types to send requests to the CloudWatch service endpoint and decode returned dashboard data or errors. Use this module to fetch specific dashboard configurations from AWS CloudWatch for display or analysis.",
      "description_length": 399,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.DeleteAlarms",
      "library": "aws-cloudwatch",
      "description": "This module handles the deletion of CloudWatch alarms by converting input parameters into an HTTP request and processing the response. It works with `DeleteAlarmsInput` to specify which alarms to delete and returns no output on success, using internal error types to handle failure cases. Concrete use cases include removing outdated or unnecessary alarms to manage monitoring resources efficiently.",
      "description_length": 399,
      "index": 166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws_cloudwatch.DescribeAlarmHistory",
      "library": "aws-cloudwatch",
      "description": "This module handles the conversion of inputs and outputs for the AWS CloudWatch DescribeAlarmHistory API call, encoding requests into HTTP format and decoding responses. It works with structured types like `DescribeAlarmHistoryInput` and `DescribeAlarmHistoryOutput`, along with error types for handling API-specific failures. It is used when querying the history of CloudWatch alarms, ensuring correct serialization and deserialization of data during the API interaction.",
      "description_length": 472,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch.PutDashboard",
      "library": "aws-cloudwatch",
      "description": "This module handles the HTTP communication for creating or updating CloudWatch dashboards. It translates between the native input type and HTTP requests, ensuring correct query encoding and response parsing. It works directly with CloudWatch dashboard input data, output responses, and error types.",
      "description_length": 298,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws_cloudwatch",
      "library": "aws-cloudwatch",
      "description": "This module provides comprehensive access to AWS CloudWatch monitoring and alerting features, enabling operations such as metric submission, alarm configuration, anomaly detection, and dashboard management. It supports key data types including metrics with dimensional data, alarm configurations, insight rules, dashboards, and tags, with structured input and output types for each operation. You can use it to send custom metric data, retrieve metric statistics, create and delete alarms, manage dashboard configurations, enable or disable insight rules, and tag CloudWatch resources for organizational tracking. Specific workflows include real-time performance monitoring, automated alerting based on metric thresholds, historical data analysis with insight rules, and programmatic management of CloudWatch dashboards and anomaly detectors.",
      "description_length": 842,
      "index": 169,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 170,
    "meaningful_modules": 170,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 939,
    "min_description_length": 254,
    "avg_description_length": 386.1235294117647,
    "embedding_file_size_mb": 0.6178646087646484
  }
}