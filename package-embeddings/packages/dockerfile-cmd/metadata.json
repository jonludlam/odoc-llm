{
  "package": "dockerfile-cmd",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:27:35.197475",
  "modules": [
    {
      "module_path": "Dockerfile_cmd.Docker",
      "description": "Provides commands for invoking Docker operations, including building, running, and pushing images, as well as checking existence and retrieving build IDs. Works with command-line constructs represented as `Bos.Cmd.t` and file paths using `Fpath.t`. Used to construct and execute Docker commands with custom options like volume mounts, tags, and build configurations.",
      "description_length": 366,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dockerfile_cmd.Opam",
      "description": "Provides functions to execute Opam2 commands and manage environment variables for a given root directory, including handling job concurrency. Works with command-line structures, file paths, and result types for error handling. Used to invoke Opam commands and set up isolated build environments.",
      "description_length": 295,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dockerfile_cmd.Gen",
      "description": "Generates Dockerfiles from structured data, applying layer optimization when enabled. Processes lists of name-Dockerfile pairs to create individual or branched Dockerfile outputs. Supports directory organization and Git branch creation for deployment scenarios.",
      "description_length": 261,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "dockerfile-cmd",
      "description": "Generates Dockerfile content using a domain-specific language, supporting image definitions, layer additions, and instruction sequencing. It operates on OCaml types representing build steps, environment variables, and file system operations. Used to automate container image creation in CI pipelines and infrastructure-as-code workflows.",
      "description_length": 337,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dockerfile_cmd",
      "description": "Encapsulates Docker build automation by combining command execution, environment setup, and Dockerfile generation. It handles Docker operations via `Bos.Cmd.t` and `Fpath.t`, executes Opam commands with environment isolation, and constructs optimized Dockerfiles from structured input. Users can build and push images, manage build environments, and generate deployment-ready Dockerfile structures. Examples include creating multi-stage builds, setting up CI pipelines, and automating image tagging and deployment.",
      "description_length": 514,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 514,
    "min_description_length": 261,
    "avg_description_length": 354.6,
    "embedding_file_size_mb": 0.01859283447265625
  }
}