{
  "package": "dockerfile-cmd",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:40.353425",
  "modules": [
    {
      "module_path": "Dockerfile_cmd.Gen",
      "library": "dockerfile-cmd",
      "description": "This module generates Dockerfiles in various configurations, supporting output to a single directory, multiple named subdirectories, or dedicated Git branches. It works with file paths, Dockerfile structures, and optionally Git repositories, allowing controlled generation with parameters like output location and crunch mode. Concrete use cases include automating Dockerfile creation for CI pipelines, organizing build files across branches for different environments, and generating versioned Dockerfile outputs in structured directories.",
      "description_length": 540,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dockerfile_cmd.Docker",
      "library": "dockerfile-cmd",
      "description": "This module provides functions to construct and execute Docker commands for building, running, and pushing images, as well as managing volumes and manifests. It works with file paths, string lists, and command types to handle tasks like building images with specific options, running containers with mounts, and pushing multi-architecture manifests. Concrete use cases include automating Docker-based CI workflows, scripting image builds with caching, and preparing containers for testing or deployment.",
      "description_length": 503,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dockerfile_cmd.Opam",
      "library": "dockerfile-cmd",
      "description": "This module provides functions to invoke `opam` commands and configure the environment for building OCaml packages within Docker. It works with Bos.Cmd.t for command construction and handles environment setup using string maps for configuration. Concrete use cases include setting up CI environments for OCaml projects using Docker, particularly for multi-job builds.",
      "description_length": 367,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dockerfile_cmd",
      "library": "dockerfile-cmd",
      "description": "This module orchestrates Docker-based workflows by combining Dockerfile generation, command execution, and environment configuration into a unified interface. It defines core operations for running Docker commands, handling structured logs, and managing build artifacts, with data types representing Dockerfile structures, command sequences, and execution environments. You can generate Dockerfiles across multiple directories or Git branches, build and push Docker images with custom options, and run `opam`-based workflows inside containers for OCaml project CI. Submodules extend this functionality to specialized tasks like Dockerfile templating, multi-arch image management, and OCaml-specific environment setup.",
      "description_length": 717,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 717,
    "min_description_length": 367,
    "avg_description_length": 531.75,
    "embedding_file_size_mb": 0.014933586120605469
  }
}