{
  "package": "dockerfile-cmd",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:50:34.691627",
  "modules": [
    {
      "module_path": "Dockerfile_cmd.Gen",
      "library": "dockerfile-cmd",
      "description": "This module generates Dockerfiles and organizes them in various output structures. It provides functions to write a single Dockerfile, multiple named Dockerfiles in a directory, Dockerfiles in subdirectories, or Dockerfiles in separate Git branches. It works with `Dockerfile.t` values and file paths, producing results in specified output directories or Git repositories.",
      "description_length": 372,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dockerfile_cmd.Opam",
      "library": "dockerfile-cmd",
      "description": "This module provides functions to invoke `opam` commands and configure the environment for building OCaml packages within Docker. It works with Bos.Cmd.t for command construction and handles environment setup using a root path and job count. Concrete use cases include scripting Docker-based CI builds that require opam package management and environment configuration.",
      "description_length": 369,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dockerfile_cmd.Docker",
      "library": "dockerfile-cmd",
      "description": "This module provides functions to construct and execute Docker commands for building, running, and pushing images, as well as managing volumes and manifests. It works with file paths, string lists, and command structures to handle tasks like building images with specific options, generating unique build IDs, and creating multi-platform manifest pushes. Concrete use cases include scripting Docker-based CI pipelines, automating image builds with caching, and setting up container runs with mounted directories.",
      "description_length": 512,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dockerfile_cmd",
      "library": "dockerfile-cmd",
      "description": "This module runs and logs Docker-based commands with support for environment configuration, script orchestration, and structured logging. It works with command structures, file paths, and result types to handle tasks like executing Docker builds, managing CI pipelines, and generating Dockerfiles in various output formats. Concrete use cases include automating Docker image builds with logging, scripting CI workflows that involve `opam` package management, and generating Dockerfile trees for multi-platform builds.",
      "description_length": 517,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 517,
    "min_description_length": 369,
    "avg_description_length": 442.5,
    "embedding_file_size_mb": 0.05840778350830078
  }
}