{
  "package": "libsvm",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:49.022775",
  "modules": [
    {
      "module_path": "Libsvm.Svm.Problem",
      "description": "Constructs problems from sparse or dense feature matrices and target vectors, and retrieves sample counts, feature counts, and targets. Supports loading, saving, and serializing problems to files or channels, and scales features to a specified range. Computes minimum and maximum values per feature for normalization purposes.",
      "description_length": 326,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Libsvm.Svm.Model",
      "description": "Provides functions to extract SVM type, number of classes, labels, support vectors, and probability information from a trained model. Works with a custom type `t` representing machine learning models. Used to inspect model properties and persist/load models to/from files.",
      "description_length": 272,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Libsvm.Svm",
      "description": "Encapsulates tools for preparing and analyzing support vector machine (SVM) problems, including loading, saving, and scaling data, as well as extracting statistical properties. Offers operations to inspect trained models, retrieving details such as SVM type, class counts, support vectors, and probability estimates. Data structures include feature matrices, target vectors, and a custom model type for storing and querying model attributes. Examples include normalizing features, checking model probabilities, and retrieving support vectors for further analysis.",
      "description_length": 563,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Libsvm.Stats",
      "description": "Calculates performance metrics by comparing two Lacaml D vectors representing expected and predicted values. It computes the number of correct predictions, accuracy as a percentage, mean squared error, and squared correlation coefficient. Used to evaluate SVM model performance against test data.",
      "description_length": 296,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "libsvm",
      "description": "Provides functions for training and predicting with support vector machines, including model creation, parameter configuration, and classification tasks. Works with datasets represented as arrays of features and labels, and supports kernel configurations for different learning scenarios. Used to implement machine learning models for tasks like text categorization and numerical regression.",
      "description_length": 391,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Libsvm",
      "description": "Provides tools for preparing, analyzing, and evaluating SVM problems. Handles feature matrices, target vectors, and custom model types, enabling operations like data scaling, model inspection, and support vector retrieval. Computes performance metrics such as accuracy, mean squared error, and correlation coefficient by comparing predicted and actual outputs. Examples include normalizing input data, checking model probabilities, and assessing prediction quality with statistical measures.",
      "description_length": 491,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 563,
    "min_description_length": 272,
    "avg_description_length": 389.8333333333333,
    "embedding_file_size_mb": 0.02222728729248047
  }
}