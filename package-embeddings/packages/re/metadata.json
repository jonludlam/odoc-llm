{
  "package": "re",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 18,
  "creation_timestamp": "2025-08-15T12:13:26.493345",
  "modules": [
    {
      "module_path": "Re_perl",
      "library": "re.perl",
      "description": "This module parses and compiles Perl-style regular expressions with options like case insensitivity and multiline matching. It works with strings and abstract syntax trees representing regex patterns. Use it to build and execute complex text-matching logic directly from string expressions.",
      "description_length": 290,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_glob",
      "library": "re.glob",
      "description": "Implements shell-style pattern matching with support for wildcards, character sets, and optional features like brace expansion and double asterisks. Works directly with strings to generate regular expressions for matching file paths or text patterns. Useful for filtering filenames or parsing structured text input with shell-like syntax.",
      "description_length": 338,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_emacs",
      "library": "re.emacs",
      "description": "This module parses and compiles Emacs-style regular expressions into executable patterns. It supports case-sensitive and case-insensitive matching through optional flags during parsing or compilation. Concrete use cases include text search, input validation, and log parsing where Emacs-style regex syntax is required.",
      "description_length": 318,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Re_posix",
      "library": "re.posix",
      "description": "This module parses and compiles POSIX extended regular expressions with options like case insensitivity and newline handling. It works with strings as input patterns and produces compiled regular expressions for matching. Concrete use cases include validating input formats, extracting substrings, and performing search-and-replace operations in text processing tasks.",
      "description_length": 368,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_pcre",
      "library": "re.pcre",
      "description": "This module compiles and executes Perl-compatible regular expressions with support for flags like case-insensitive matching and anchoring. It provides operations for pattern matching, extracting capture groups, splitting strings based on regex delimiters, and substituting matched text. Concrete use cases include parsing log lines, validating input formats like email addresses, and transforming text with dynamic replacements.",
      "description_length": 428,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re.Mark.Set",
      "library": "re",
      "description": "This module implements a structured collection of operations for managing ordered sets of mark elements, supporting modifications like union, intersection, and difference alongside ordered traversal via iterators and folds. It operates on a set type containing elements with a fixed comparison ordering, enabling efficient membership checks, transformations, and subset relations. Designed for scenarios requiring precise manipulation of mark-based sets, such as tracking hierarchical text annotations or maintaining ordered symbolic references.",
      "description_length": 545,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re.Str",
      "library": "re",
      "description": "This module provides operations for compiling and executing regular expressions with support for pattern matching, searching, and substitution in strings. It works with strings and regular expression patterns, enabling tasks like splitting text on delimiters, extracting substrings, and replacing content using static values or dynamic functions that process captured groups. Specific use cases include text parsing, data sanitization, and transforming structured string formats through pattern-based manipulation.",
      "description_length": 514,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Re.Posix",
      "library": "re",
      "description": "This module parses and compiles POSIX extended regular expressions, supporting options like case insensitivity and newline handling. It works with strings and abstract syntax trees for regex patterns, enabling precise matching and substring extraction. It is used to construct reusable regex patterns and extract structured data from text, such as parsing log lines into typed records.",
      "description_length": 385,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re.Glob",
      "library": "re",
      "description": "Implements shell-style glob pattern parsing into regular expressions with support for features like brace expansion, wildcard matching, and case sensitivity control. Works directly with string patterns and generates regular expression ASTs for matching file paths or text. Useful for implementing file globbing in command-line tools or filtering paths in build systems.",
      "description_length": 369,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Re.View",
      "library": "re",
      "description": "This module provides a structured view of regular expression patterns, enabling inspection and manipulation of their components. It works directly with the abstract syntax tree of regular expressions, including constructs like sequences, alternatives, repetitions, and groups. Concrete use cases include analyzing pattern structure for optimization, transforming expressions, or generating human-readable representations of regex logic.",
      "description_length": 436,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Re.Emacs",
      "library": "re",
      "description": "Implements parsing and compilation of Emacs-style regular expressions. Works with strings and case sensitivity flags, producing compiled regular expressions for pattern matching. Useful for text processing tasks requiring Emacs-compatible regex syntax.",
      "description_length": 252,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re.Group",
      "library": "re",
      "description": "This module provides functions to access and inspect captured groups from a regular expression match. It supports retrieving matched substrings, their positions, and presence checks, working with group indexes and match data structures. Use it to extract specific parts of a match, like parsing log lines or structured text formats.",
      "description_length": 332,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Re.Pcre",
      "library": "re",
      "description": "This module implements regular expression operations using PCRE syntax, providing functions to compile patterns, match strings, extract capture groups, and split or substitute text based on matches. It works with strings and structured group data, supporting both positional and named captures. Concrete use cases include parsing log lines, validating input formats like email addresses, and transforming text through pattern-based substitutions.",
      "description_length": 446,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Re.Perl",
      "library": "re",
      "description": "This module provides functions to parse and compile Perl-style regular expressions with optional flags like case insensitivity and multiline matching. It works with strings as input patterns and produces compiled regular expressions for efficient matching. Concrete use cases include validating input formats, extracting data from structured text, and implementing search functionality with flexible matching rules.",
      "description_length": 415,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Re.Mark",
      "library": "re",
      "description": "This module provides operations to test whether a mark was matched, retrieve all matched marks from a group, and compare or check equality of marks. It works with marks generated during regular expression matching, particularly in conjunction with the `Group` module. Concrete use cases include tracking which named capture groups matched in a regex pattern and managing sets of such marks in ordered collections for text analysis or structured parsing tasks.",
      "description_length": 459,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re.Seq",
      "library": "re",
      "description": "This module provides iterative versions of regular expression operations, returning lazy sequences for memory-efficient processing. It supports matching, splitting, and tokenizing strings based on compiled regex patterns, with functions that yield results incrementally. Use it to process large text inputs or stream results without building intermediate lists.",
      "description_length": 361,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re",
      "library": "re",
      "description": "This module offers operations to compile, execute, and manipulate regular expressions with precise control over matching behavior, including capturing groups, splitting text, and handling complex patterns through combinators and modifiers like `greedy` or `non_greedy`. It works with strings and structured types like `Re.t` (representing regex patterns), alongside modules for character sets, named captures, and syntax conversions (e.g., Perl-compatible or shell globs). Specific use cases include input validation, text parsing, log file analysis, and pattern-based transformations like substitution or tokenization.",
      "description_length": 619,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Re_str",
      "library": "re.str",
      "description": "This library supports compiling and applying regular expressions to perform case-insensitive substring matching, search-and-replace operations, and capture group extraction on strings using Emacs-style syntax. It provides functions for splitting text on delimiters, transforming matched patterns, and tracking match positions, commonly used for tasks like parsing structured data, normalizing input formats, or analyzing log files.",
      "description_length": 431,
      "index": 17,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 18,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 619,
    "min_description_length": 252,
    "avg_description_length": 405.8888888888889,
    "embedding_file_size_mb": 0.26119041442871094
  }
}