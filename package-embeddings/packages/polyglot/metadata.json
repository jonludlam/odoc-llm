{
  "package": "polyglot",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:00.355605",
  "modules": [
    {
      "module_path": "Polyglot.Stream",
      "library": "polyglot",
      "description": "This module transforms XML signal streams into polyglot (X)HTML5 signal streams by detecting document structure and applying appropriate output rules. It operates on `Xmlm.output` and `Xmlm.signal` types, providing functions to create and manage stream contexts, push signals, and output formatted markup. Concrete use cases include streaming HTML5 content with correct doctype handling, converting partial XML fragments to polyglot markup, and conditionally generating valid XML or HTML5 output based on input structure.",
      "description_length": 521,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Polyglot.Tree",
      "library": "polyglot",
      "description": "This module transforms XML trees into polyglot (X)HTML5 trees using a custom variant type that represents either text data or elements with tags and children. It provides functions to output valid (X)HTML5 markup, with support for indentation, namespace prefixes, and optional document type declarations. These functions are used when generating HTML5 or XHTML5 output from structured XML data, particularly in web templating or document conversion workflows.",
      "description_length": 459,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Polyglot",
      "library": "polyglot",
      "description": "This module ensures HTML5 output conforms to XML parsing requirements by validating DOCTYPEs and handling namespaces, with utilities for templating and static generation. It works with two submodules: one transforms XML signal streams into polyglot markup, managing output contexts and signals for streaming HTML5 or XHTML5; the other converts XML trees into polyglot structures, supporting indentation and namespace-aware output. Together, they enable validation of DOCTYPE strings, streaming transformation of XML to HTML5/XHTML5, and structured document conversion with correct markup declarations. Example uses include generating valid HTML5 from XML, converting fragments with proper namespaces, and producing indented XHTML5 with doctype declarations.",
      "description_length": 757,
      "index": 2,
      "embedding_norm": 0.9999998807907104
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 757,
    "min_description_length": 459,
    "avg_description_length": 579.0,
    "embedding_file_size_mb": 0.0113372802734375
  }
}