{
  "package": "bindlib",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:45.253096",
  "modules": [
    {
      "module_path": "Bindlib.Lift",
      "library": "bindlib",
      "description": "This module provides the `lift_box` function, which reorders a nested type structure by lifting operations through a box type. It works with any type that has a map function, allowing the permutation of type constructors. A concrete use case is transforming a list of boxed values into a boxed list, enabling consistent manipulation of nested data.",
      "description_length": 348,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindlib.Ctxt",
      "library": "bindlib",
      "description": "This module provides functions for managing variable binding contexts with customizable renaming policies. It supports operations like introducing fresh variables, unbinding terms, and tracking free variables within a given context structure. It is used when implementing type systems or formal calculi with complex binding semantics, such as lambda calculi or dependent types.",
      "description_length": 377,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bindlib.Map",
      "library": "bindlib",
      "description": "This module defines a polymorphic map function that applies a transformation to each element of a container structure, preserving its shape. It works with any parametric data type `'a t` that supports element-wise mapping, such as lists, options, or trees. Use it to lift functions into containers, enabling concise data transformations without explicit pattern matching.",
      "description_length": 371,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindlib.Map2",
      "library": "bindlib",
      "description": "This module defines a binary map function that applies separate transformations to the two type parameters of a structured value, preserving the overall shape while updating its contents. It operates on data structures that are parameterized by two independent types, allowing independent mapping over each. A typical use case is transforming pairs of expressions or types in a syntax tree where each element has a distinct role, such as variables and binders in a representation of lambda calculus.",
      "description_length": 499,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindlib.Lift2",
      "library": "bindlib",
      "description": "This module provides a `lift_box` function that transforms a binary map over boxed values into a boxed binary map, enabling manipulation of bound variables within structures defined by the parameter module `M`. It operates on data types involving `Bindlib.box`, which represents terms with binders, and supports concrete use cases like handling variable bindings in abstract syntax trees with two-argument functions. It is useful when lifting binary operations over terms that involve free and bound variables.",
      "description_length": 510,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bindlib.Renaming",
      "library": "bindlib",
      "description": "This module defines a renaming policy for managing variable names in binding contexts, primarily used when pretty-printing terms with binders. It tracks reserved names and generates fresh names to avoid capture, using configurable rules for handling constants and closed terms. Key operations include creating fresh names, reserving variable names, and controlling naming behavior through flags and context state.",
      "description_length": 413,
      "index": 5,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Bindlib",
      "library": "bindlib",
      "description": "This module manages variables and binders in abstract syntax trees with support for substitution, binder manipulation, and type-safe boxed representations. It provides core operations for constructing and transforming terms composed of variables, abstractions, and applications, using contexts to ensure correct binding behavior and avoid name collisions. The module enables tasks like representing lambda terms, checking free variables, and performing safe substitutions, while its submodules extend functionality with customizable renaming policies, polymorphic and binary mapping, and utilities for lifting operations through boxed types. Specific capabilities include transforming nested boxed structures, tracking free variables in complex calculi, and generating fresh names during term traversal or pretty-printing.",
      "description_length": 822,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 822,
    "min_description_length": 348,
    "avg_description_length": 477.14285714285717,
    "embedding_file_size_mb": 0.025869369506835938
  }
}