{
  "package": "bindlib",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T23:01:18.665223",
  "modules": [
    {
      "module_path": "Bindlib.Lift",
      "library": "bindlib",
      "description": "This module provides the `lift_box` function, which reorders the application of a type constructor `M` with respect to the `box` type, enabling lifting of boxed values through `M`. It operates on values that combine a type constructor `M` with boxed OCaml values (`'a Bindlib.box`). A typical use case involves transforming data structures containing binders, such as abstract syntax trees, by lifting boxed variables through containers like lists or options.",
      "description_length": 459,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindlib.Lift2",
      "library": "bindlib",
      "description": "This module provides the `lift_box` function, which transforms a binary boxed function into a function that operates on boxed values, enabling the application of binary operations within a binding context. It works with data types involving `Bindlib.box`, specifically handling functions that take two boxed arguments. A concrete use case includes lifting operations like arithmetic or comparison functions to work with bound variables in abstract syntax trees.",
      "description_length": 461,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bindlib.Ctxt",
      "library": "bindlib",
      "description": "This module provides functions for managing variable binding contexts, including creating fresh variables, unbinding terms, and tracking free variables. It works with boxed values, binders, and multi-binders, along with their associated variables and contexts. Concrete use cases include implementing type checkers, compilers, or interpreters that require precise handling of variable binding and renaming.",
      "description_length": 406,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindlib",
      "library": "bindlib",
      "description": "This module provides operations for managing variable binding, substitution, and context tracking in abstract syntax trees, with support for safe manipulation of free and bound variables through boxed representations. It works with terms containing variables, abstractions, and applications, alongside boxed values, binders (single and multi), and context types to handle name uniqueness and substitution semantics. Specific capabilities include creating and comparing binders, lifting computations over boxed data, hashing variables, and transforming structured terms like tuples while preserving binding integrity.",
      "description_length": 616,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 616,
    "min_description_length": 406,
    "avg_description_length": 485.5,
    "embedding_file_size_mb": 0.05839347839355469
  }
}