{
  "package": "patricia-tree",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 53,
  "creation_timestamp": "2025-06-18T16:43:33.626128",
  "modules": [
    {
      "module_path": "PatriciaTree.MakeCustomHeterogeneousSet.BaseMap.WithForeign",
      "description": "Provides operations to construct and query a binary tree-based map structure, including creating empty maps, singleton leaves, and internal branch nodes with strict invariants. Works with key types, value pairs, and tree views, supporting efficient lookups and structural checks. Used to implement efficient, prefix-based associative structures where elements are partitioned by bit patterns.",
      "description_length": 392,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedSet.BaseMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree structure. Works with key-value mappings using specialized types for keys, values, and tree views. Supports creating empty maps, singleton leaves, and internal branches, along with efficient lookups and checks for emptiness.",
      "description_length": 299,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedMap.BaseMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree map, including creating empty maps, singleton leaves, and branching nodes. Works with key types, value pairs, and tree structures that enforce prefix and bit constraints for efficient lookups. Used to implement efficient key-value storage with bitwise prefix checks and constant-time membership tests.",
      "description_length": 376,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeCustomMap.BaseMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree map, including creating empty maps, singleton leaves, and branching nodes. Works with key types, value pairs, and tree structures that enforce prefix and bit constraints for efficient lookups. Used to implement efficient key-value storage with deterministic traversal paths based on integer keys.",
      "description_length": 371,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeMap.BaseMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree structure representing key-value mappings. Works with custom types for keys, values, and tree nodes, enforcing invariants through specialized constructors. Used to efficiently store and retrieve data with bitwise prefix matching, such as in trie implementations or IP address routing.",
      "description_length": 359,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.MakeHeterogeneousSet.BaseMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree structure representing key-value mappings. Works with custom types for keys, values, and tree nodes, enforcing invariants through specialized constructors. Used to efficiently store and retrieve data with bitwise prefix matching, such as in trie implementations or IP address routing.",
      "description_length": 359,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.MakeCustomSet.BaseMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree structure representing key-value mappings. Works with custom types for keys, values, and a private view type to represent the tree's internal state. Supports creating empty maps, singleton leaves, and branches with strict invariants, enabling efficient lookups and checks for emptiness.",
      "description_length": 361,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeSet.BaseMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree structure representing key-value mappings. Works with custom types for keys, values, and a private view type to represent the tree's internal state. Supports creating empty maps, singleton leaves, and branches with strict invariants, enabling efficient lookups and checks for emptiness.",
      "description_length": 361,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedHeterogeneousSet.BaseMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree map, including creating empty maps, singleton leaves, and branching nodes. Works with key types, value pairs, and tree structures that enforce prefix and bit constraints. Used to efficiently store and retrieve key-value pairs with bitwise prefix matching, such as in trie implementations or IP address routing.",
      "description_length": 385,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.MakeCustomHeterogeneousSet.BaseMap",
      "description": "provides a binary tree-based map structure with key-value associations, supporting efficient lookups and structural operations. It uses existential types for key-value pairs and higher-ranked functions for polymorphic operations. It enables constructing maps from trees, querying elements via bit-pattern prefixes, and performing union or mapping operations. Examples include building a map with bit-separated keys and extracting values based on tree node structures.",
      "description_length": 467,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedSet.BaseMap",
      "description": "Provides persistent, prefix-based tree operations with specialized key and value types, enabling efficient construction, querying, and manipulation of map structures. It supports creating empty maps, singleton leaves, and internal branches, along with lookups and emptiness checks. Key operations include polyiter, polymap, and polyunion, which handle higher-ranked polymorphism for flexible processing. Examples include building a map from a list of key-value pairs and traversing the tree to extract specific entries.",
      "description_length": 519,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedMap.BaseMap",
      "description": "Provides persistent, prefix-based tree map operations with key-value storage optimized for bitwise prefix checks and efficient lookups. Uses 'k key and ('k,'m) value types to enable flexible, higher-rank operations like polyiter and polymap. Supports constructing empty maps, singleton leaves, and branching nodes, allowing constant-time membership tests and prefix-based queries. Example tasks include building a map with bit-constrained keys and performing efficient range searches.",
      "description_length": 484,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree map, including creating empty maps, singleton leaves, and internal branch nodes with strict invariants. Works with key types, value pairs, and tree structures that encode keys as bit prefixes. Used to efficiently store and retrieve key-value pairs with bitwise prefix matching, such as in trie implementations or IP address routing.",
      "description_length": 407,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.MakeCustomMap.BaseMap",
      "description": "Provides persistent, prefix-based tree map operations with key-value storage optimized for integer keys. Uses 'k key and ('k,'m) value types to enable flexible, higher-rank polymorphic operations like polyiter and polymap. Supports constructing empty maps, singleton leaves, and branching nodes, enabling efficient lookups through deterministic traversal. Example tasks include inserting integer keys with associated values and querying based on prefix constraints.",
      "description_length": 465,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeCustomMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree map, including creating empty maps, singleton leaves, and internal branch nodes with strict invariants. Works with key types, value pairs, and tree structures that represent mappings with bitwise prefix constraints. Used to efficiently store and retrieve key-value pairs where keys are integers with specific bit patterns.",
      "description_length": 397,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHeterogeneousMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree structure. Works with key-value mappings using specialized types for keys, values, and tree views. Supports creating empty maps, singleton leaves, and internal branches, along with efficient lookups and checks for emptiness.",
      "description_length": 299,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeMap.BaseMap",
      "description": "Provides persistent, prefix-based tree structures for key-value mappings, supporting custom key and value types with bitwise prefix matching. Uses specialized constructors to enforce invariants and enables efficient data storage and retrieval, such as in trie or IP routing applications. Operations include constructing, querying, and manipulating trees with higher-ranked polymorphic functions. Key types are parameterized, and values are tied to both key and map types, with existential hiding for certain return values.",
      "description_length": 522,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree structure. Works with key-value mappings where keys are converted to integers and organized through branch and leaf nodes. Used to efficiently store and retrieve values based on key prefixes, such as in trie implementations or IP address routing.",
      "description_length": 321,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.MakeHeterogeneousSet.BaseMap",
      "description": "Provides persistent, prefix-based tree operations for key-value mappings using custom types and bitwise prefix matching. Key data types include 'k key, ('k,'m) value, and KeyValue for encapsulated pairs, with operations like polyiter and polymap enabling higher-ranked manipulations. It supports efficient storage and retrieval in structures like tries or IP routing tables, allowing for complex pattern-based queries and transformations. The module enforces invariants through specialized constructors and enables cross-map operations with existential hiding of internal representations.",
      "description_length": 588,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedHeterogeneousMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree structure. Works with key-value mappings using specialized types for keys, values, and tree views. Supports creating empty maps, singleton leaves, and internal branches, along with efficient lookups and checks for emptiness.",
      "description_length": 299,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeCustomSet.BaseMap",
      "description": "Provides persistent, prefix-based tree operations for key-value mappings using custom key and value types, with internal state managed through a private view. Supports constructing empty maps, singleton leaves, and branching structures while enforcing strict invariants for efficient lookups. Key operations include querying, inserting, and merging, with values and keys parameterized through type constructors. Examples include building a map with custom key types and performing efficient membership checks.",
      "description_length": 509,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeSet.BaseMap",
      "description": "provides persistent, prefix-based key-value mapping with custom key and value types, using a private tree structure for internal representation. it supports constructing empty maps, singleton entries, and branching structures with strict invariants, enabling efficient lookups and emptiness checks. operations like polyiter and polymap allow higher-ranked polymorphic processing over keys and values. examples include building a map with custom key types, traversing the tree with user-defined functions, and merging maps while preserving structural invariants.",
      "description_length": 561,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeCustomHeterogeneousMap.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree map, including creating empty maps, singleton leaves, and internal branch nodes with strict invariants. Works with key types, value pairs, and tree structures that encode keys as integers with bitwise prefixes. Used to efficiently store and retrieve key-value pairs where keys are represented as integers with specific bit patterns.",
      "description_length": 407,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedHeterogeneousSet.BaseMap",
      "description": "provides persistent, prefix-based tree map operations with key-value storage and retrieval using bitwise constraints. it defines types for keys, values, and tree nodes, supporting operations like creating empty maps, inserting entries, and traversing structures. it enables efficient prefix matching, making it suitable for applications like IP routing or trie-based data storage. examples include building a map for subnet addresses and querying entries based on bit patterns.",
      "description_length": 477,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.BaseMap.WithForeign",
      "description": "Provides operations to construct and query a binary tree-based map structure, including creating empty maps, singleton leaves, and internal branch nodes with strict invariants. Works with key types, value pairs, and a private view type to represent map contents. Used to efficiently store and retrieve key-value associations where prefix-based branching ensures fast lookups.",
      "description_length": 375,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeMap",
      "description": "Generates unique integer identifiers for values using a counter, ensuring injectivity and efficiency. Operates on values of type `t` to support hash-consing and key management in Patricia Trees. Used to assign stable, unique keys for efficient tree operations and binding comparisons.",
      "description_length": 284,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeSet",
      "description": "Generates unique integer identifiers for values using a counter-based approach, ensuring injectivity and efficiency. Operates on values of type `t` to support hash-consing and key management in Patricia Trees. Useful for maintaining consistent and unique keys in tree-based data structures requiring ordered operations.",
      "description_length": 319,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHeterogeneousSet",
      "description": "Provides operations to generate unique integer identifiers for keys and compare keys polymorphically. Works with a generic key type wrapped in a tree structure. Used to ensure consistent key comparison and unique identification in heterogeneous set implementations.",
      "description_length": 265,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHeterogeneousMap",
      "description": "Provides functions to create and manipulate maps with heterogeneous key types, supporting operations like insertion, lookup, and iteration. Works with a custom type ('key, 'map) t that encapsulates key-value pairs where keys can belong to different types. Used to build dynamic data structures that combine multiple key types within a single map, such as merging configuration settings with unique identifiers.",
      "description_length": 410,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeCustomMap",
      "description": "Provides operations to construct and inspect a custom map structure, including creating empty maps, singleton leaves, and internal branch nodes with strict invariants. Works with key types and value pairs, converting between map representations and a view for efficient pattern matching. Used to build and traverse a trie-like structure with prefix-based branching for fast lookups.",
      "description_length": 382,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeCustomSet",
      "description": "Generates unique integer identifiers for elements using a counter-based approach, ensuring injectivity and efficient lookup. Operates on values of type `t` and leverages hash-consing to maintain consistency. Useful for implementing Patricia Trees with stable, unique keys for efficient set operations.",
      "description_length": 301,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.MakeCustomHeterogeneousMap",
      "description": "Provides operations to construct and query a heterogeneous map structure, including creating empty maps, singleton leaves, and internal branch nodes with strict invariants. Works with key types wrapped in a `key` abstraction and value pairs tied to specific map implementations. Used to build efficient, pattern-matched map representations that support constant-time conversions to a uniform view for traversal or inspection.",
      "description_length": 425,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.MakeCustomHeterogeneousSet",
      "description": "Provides operations to construct and query a custom heterogeneous set implementation, including creating empty maps, singleton leaves, and branch nodes with specific bit constraints. Works with key types wrapped in a `Key.t` module and a nested `value` type that carries no data. Used to build efficient, bit-manipulated tree structures for fast membership checks and conversions to a view representation.",
      "description_length": 405,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedMap",
      "description": "Provides hash and polymorphic equality operations for values of type 'a t, enabling hash-consing by ensuring equal values share the same hash. Works with abstract types that support casting between different type parameters while maintaining type safety. Used to create hash-consed maps where identical values across compatible types are treated as equivalent.",
      "description_length": 360,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedSet",
      "description": "Generates unique integer identifiers for values to support hash-consing, ensuring injectivity and efficient comparison. Operates on values of type `t` to produce identifiers used in Patricia Trees for optimized storage and lookup. Useful for managing unique representations of data structures in memory-efficient applications.",
      "description_length": 326,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedHeterogeneousSet",
      "description": "Provides operations to generate unique integer identifiers for keys and perform polymorphic equality checks. Works with a type `'key t` that represents a set of heterogeneous keys. Used to efficiently manage and compare distinct values in hash-consed structures, ensuring consistent and fast equality checks during set operations.",
      "description_length": 330,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.MakeHashconsedHeterogeneousMap",
      "description": "Provides hash and polymorphic equality operations for heterogeneous values, enabling efficient comparison and storage. Works with a type parameterized by a key and a map, supporting distinct value representations while ensuring type-safe equality checks. Used in scenarios requiring hash-consing of values with varying types, such as symbolic computation or memoization across different data structures.",
      "description_length": 403,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.Value",
      "description": "Provides functions to create, compare, and transform values of any type, including identity, equality checks, and conversion utilities. Works with polymorphic types wrapped in a single constructor. Used to ensure consistent value handling in map implementations and data transformations.",
      "description_length": 287,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.HomogeneousValue",
      "description": "Provides functions to create and manipulate values that are uniform across a heterogeneous map, using a single type parameter for the value. Works with the `t` type, which ties the value type to the map type. Used to ensure consistent value handling in maps where key types vary but value types remain fixed.",
      "description_length": 308,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.WrappedHomogeneousValue",
      "description": "Provides operations to handle values wrapped in an unboxed type, enabling safe comparisons without triggering the typechecker's eager alias simplification. Works with tuples containing a value and a map, ensuring proper type distinction during pattern matching. Used to safely manage polymorphic values in contexts where direct equality checks would cause type inference issues.",
      "description_length": 378,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.HashedValue",
      "description": "Provides hash and polymorphic equality operations for values, using Hashtbl.hash for hashing and physical equality for comparisons. Works with a type 'a t that wraps arbitrary values. Used to ensure consistent hashing and equality in hash-consed data structures, enabling efficient storage and comparison of values across different types.",
      "description_length": 338,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.HeterogeneousHashedValue",
      "description": "Provides hash and polymorphic equality operations for values with type parameters that may vary. Works with type-erased values represented as ('k, 'm) t, where 'm is a type parameter. Used to implement hash-consing in heterogeneous maps, ensuring consistent hashing and safe type casting under specific equality conditions.",
      "description_length": 323,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.SimpleNode",
      "description": "Provides functions to create, traverse, and modify a tree structure where each node contains a key and a map of child nodes. Operates on the ('key, 'map) t type, which represents a node with a key and a mapping from labels to sub-nodes. Used to build and query hierarchical data like configuration trees or file system representations.",
      "description_length": 335,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.NodeWithId",
      "description": "Provides operations to create, retrieve, and update nodes with associated keys and maps. Works with tuples of key-value pairs and nested map structures. Used to manage hierarchical data where each node must maintain a unique identifier and associated metadata.",
      "description_length": 260,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.SetNode",
      "description": "Provides functions to create, merge, and query sets of keys with efficient membership checks. Operates on the `'k t` type, representing a collection of unique elements. Used to manage dynamic groups of identifiers in rule-based systems and configuration parsing.",
      "description_length": 262,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.WeakNode",
      "description": "Provides operations to create, access, and manage weak references to nodes in a graph structure, including lifting and dereferencing references. Works with a polymorphic type that pairs a key with a map, enabling safe traversal of potentially cyclic data. Used to implement graph algorithms that require non-retaining links between nodes.",
      "description_length": 338,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.WeakSetNode",
      "description": "Provides operations to manage a set of weakly referenced nodes, including adding, removing, and checking membership. Works with a type 'k t that represents a set of nodes with weak references, allowing safe handling of cyclic data structures. Used to track node existence without preventing garbage collection, particularly in graph or tree traversal algorithms.",
      "description_length": 362,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.HashconsedNode",
      "description": "Provides hash and polymorphic equality operations for values wrapped in a type that associates a key with a map. Works with a generic type ('key, 'map) t that enables efficient comparison and hashing of structured data. Used to ensure consistent hashing and safe type-casting in heterogeneous value representations, such as in implementations of hash-consed nodes.",
      "description_length": 364,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree.HashconsedSetNode",
      "description": "Provides operations to generate unique integer identifiers for keys and perform fast polymorphic equality checks. Works with a type parameterized by key types, supporting hash-consed values. Used to ensure consistent and efficient comparisons in data structures requiring unique key representation.",
      "description_length": 298,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.WithForeign",
      "description": "Provides operations to construct and query a persistent, prefix-based tree map. Works with key-value structures represented as trees, where each node is either empty, a leaf, or a branch with specific bit-based constraints. Used to efficiently store and retrieve values based on integer keys with bitwise prefix matching.",
      "description_length": 321,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "PatriciaTree.BaseMap",
      "description": "Provides binary tree-based map operations with key-value associations, using a private view type for internal representation. Key types are parameterized with 'k key, and values are typed as ('k,'m) value, enabling flexible and efficient storage and retrieval. Operations include constructing empty maps, singleton leaves, and branch nodes, with support for polymeric transformations and existential hiding of key-value pairs. Examples include building prefix-based trees for fast lookups and performing unified operations across different map implementations.",
      "description_length": 560,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "patricia-tree",
      "description": "Provides operations for constructing, merging, and querying Patricia trees, including insertion, deletion, and membership checks. Works with integer keys and implements set and map structures using a space-efficient prefix trie. Used to efficiently manage large collections of integers in applications requiring fast lookups and merges, such as symbolic execution or static analysis.",
      "description_length": 383,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "PatriciaTree",
      "description": "Provides operations to generate unique integer identifiers for keys and perform polymorphic equality checks. Works with key-value structures where keys are represented as typed nodes in a Patricia Tree. Used to ensure consistent key comparison and hashing in scenarios requiring efficient membership and lookup operations.",
      "description_length": 322,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 53,
    "meaningful_modules": 53,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 588,
    "min_description_length": 260,
    "avg_description_length": 377.52830188679246,
    "embedding_file_size_mb": 0.18220043182373047
  }
}