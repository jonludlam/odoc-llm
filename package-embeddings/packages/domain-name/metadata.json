{
  "package": "domain-name",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:06:46.400917",
  "modules": [
    {
      "module_path": "Domain_name.Service_set",
      "library": "domain-name",
      "description": "This module implements a strictly ordered set structure for service domain names (`[ `service ] Domain_name.t`), emphasizing set algebra (union, intersection, difference), membership queries, and transformations while preserving physical equality. It supports efficient iteration through ordered sequences and conversions to/from lists or sequences, enabling use cases like managing DNS service records, enforcing unique service name collections, or performing ordered traversal in network configuration tools. The set operations and sequence integrations cater to scenarios requiring both mathematical set semantics and ordered processing of domain-based service identifiers.",
      "description_length": 676,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Domain_name.Service_map",
      "library": "domain-name",
      "description": "This module provides operations for managing hierarchical key-value associations where keys combine domain names with service annotations, supporting ordered traversal, partial lookups, and set-theoretic operations. It works with maps structured around `Domain_name.Service_map.key` (domain names paired with service identifiers) and associated values, enabling efficient insertion, deletion, merging, and range queries. Typical use cases include DNS service configuration, service discovery systems, and routing tables where domain-based hierarchies require ordered traversal or aggregation of service-specific data.",
      "description_length": 617,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Domain_name.Host_map",
      "library": "domain-name",
      "description": "This module implements a specialized map for domain name hosts, offering ordered key-based operations like insertion, deletion, merging, and traversal while preserving domain name ordering. It operates on maps with keys of type `Domain_name.Host_map.key` (domain names of kind `[ `host ]`) and arbitrary value types, supporting transformations, filtering, and bidirectional iteration. Typical use cases include DNS record management, routing table construction, and applications requiring hierarchical domain name processing with ordered semantics.",
      "description_length": 548,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Domain_name.Map",
      "library": "domain-name",
      "description": "This module implements a key-value store with domain names as ordered keys, offering insertion, deletion, and lookup operations alongside ordered traversal, filtering, and merging of maps. It handles arbitrary value types and maintains sorted key order, supporting use cases like DNS record management or hierarchical domain-based data aggregation. Utilities for conversion to sequences/lists and range-based iteration enable efficient processing of domain-centric datasets.",
      "description_length": 474,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Domain_name.Host_set",
      "library": "domain-name",
      "description": "This module implements a set structure for domain host names, supporting standard operations like union, intersection, and membership checks, along with ordered iteration and transformation functions. It works with sets of domain names ordered via their inherent comparison logic, enabling efficient querying and conversion to sequences for processing. Common use cases include managing DNS records, filtering domain collections, and network-related tasks requiring ordered set manipulation.",
      "description_length": 491,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Domain_name.Set",
      "library": "domain-name",
      "description": "This module enables functional manipulation of domain name collections through ordered set operations like union, intersection, and difference, combined with element-wise transformations and membership checks. It operates on domain names using set and sequence abstractions, supporting ordered traversal, filtering, and bidirectional conversion between sets and sequences. Typical applications include DNS record management, domain validation pipelines, and hierarchical domain name analysis where ordered processing and precise set semantics are critical.",
      "description_length": 556,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Domain_name",
      "library": "domain-name",
      "description": "This library offers domain name parsing, validation, and hierarchical manipulation, including operations for concatenation, subdomain checks, and label-level transformations, with support for DNS-compliant case-insensitive comparison and normalization. It provides ordered maps and sets (e.g., Host_map, Service_set) for efficient domain name collection management, enabling use cases like DNS server logic, domain validation in network tools, and hierarchical domain routing. The API includes both safe (result-returning) and unsafe (exception-raising) variants for critical operations, ensuring flexibility for error handling.",
      "description_length": 628,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 676,
    "min_description_length": 474,
    "avg_description_length": 570.0,
    "embedding_file_size_mb": 0.10186195373535156
  }
}