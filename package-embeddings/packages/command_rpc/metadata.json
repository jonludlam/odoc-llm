{
  "package": "command_rpc",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:24:42.087624",
  "modules": [
    {
      "module_path": "Command_rpc.Command.Stateful",
      "library": "command_rpc",
      "description": "This module defines stateful RPC commands that maintain persistent server-side state across multiple RPC calls. It supports operations to create and manage RPCs that take a state type `'a` as input, allowing functions to modify or access that state over successive invocations. Concrete use cases include implementing RPC servers that track session data, manage configuration state, or handle incremental computations where each call depends on prior results.",
      "description_length": 459,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Command_rpc.Command.Expert",
      "library": "command_rpc",
      "description": "This module defines a command-line parameter that creates and runs an RPC server in a child process, handling communication with the parent over stdin/stdout. It works with `Command_rpc.Command.t` values representing RPC implementations, and supports configuration options like timeouts, heartbeat settings, and message size limits. It is used to launch services that communicate with a parent process using either Async RPC or a Sexp-based protocol, with stderr optionally forwarded for debugging.",
      "description_length": 498,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Command_rpc.Command.Invocation",
      "library": "command_rpc",
      "description": "Handles RPC command invocations using either S-expression or binary IO protocols. It supports executing commands in a child process with communication over stdin/stdout, remapping stdout to stderr for debugging. Used to implement RPC servers that can switch between Async RPC and Sexp-based interfaces via command-line flags.",
      "description_length": 325,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Command_rpc.Connection.Expert",
      "library": "command_rpc",
      "description": "This module provides low-level control over command-rpc child processes, allowing you to send signals and wait for termination. It works directly with `Command_rpc.Connection.t` to manage process lifecycle and capture exit status. Use it when you need to explicitly handle process termination or signal handling outside of standard connection lifecycle management.",
      "description_length": 364,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Command_rpc.Connection.Stderr_handling",
      "library": "command_rpc",
      "description": "This module defines how standard error output is handled for remote commands. It supports propagating stderr to the local process, ignoring it, or applying a custom handler that consumes the stderr stream. Use cases include controlling error output behavior in distributed systems or command execution frameworks.",
      "description_length": 313,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Command_rpc.Connection.Stdout_handling",
      "library": "command_rpc",
      "description": "This module defines how standard output is handled for RPC connections. It supports three strategies: merging stdout with stderr, propagating stdout directly, or applying a custom handler. It is used to control output behavior when executing commands over RPC, particularly in conjunction with async I/O operations.",
      "description_length": 315,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Command_rpc.Command",
      "library": "command_rpc",
      "description": "This module implements RPC servers that communicate with a parent process over stdin/stdout, supporting both Async RPC and Sexp-based protocols. It provides functions to define and compose RPC commands, handle stateful operations, and configure communication parameters like timeouts and message size limits. Concrete use cases include building child process services that expose versioned RPCs with bidirectional streaming, maintain per-connection state, or dynamically switch protocols based on command-line flags.",
      "description_length": 516,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Command_rpc.Connection",
      "library": "command_rpc",
      "description": "This module manages RPC connections to child processes, enabling remote execution of commands with precise control over standard I/O streams. It supports creating and using connections that link to running child processes, handling stdout and stderr through configurable strategies, and integrating with async I/O for non-blocking communication. Concrete use cases include building distributed command execution systems and managing remote processes with custom output handling and lifecycle control.",
      "description_length": 500,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Command_rpc",
      "library": "command_rpc",
      "description": "This module implements RPC servers and client connections for communicating with parent and child processes over stdin/stdout. It supports defining and composing RPC commands, managing per-connection state, and executing remote commands with control over I/O streams and async communication. Use cases include building versioned RPC services in child processes, executing distributed commands with custom output handling, and managing bidirectional streaming with protocol switching.",
      "description_length": 483,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 516,
    "min_description_length": 313,
    "avg_description_length": 419.22222222222223,
    "embedding_file_size_mb": 0.1308450698852539
  }
}