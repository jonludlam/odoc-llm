{
  "package": "command_rpc",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-06-18T16:30:58.390982",
  "modules": [
    {
      "module_path": "Command_rpc.Connection.Stdout_handling",
      "description": "Handles output based on file descriptor configuration. Merges stdout with stderr when disabled, or propagates stdout independently when enabled. Works with configuration state to control output behavior in process execution contexts.",
      "description_length": 233,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Command_rpc.Connection.Stderr_handling",
      "description": "Handles error output by redirecting and capturing standard error streams. Operates on custom error state objects to control and inspect stderr behavior. Used to isolate and log errors during process execution or testing scenarios.",
      "description_length": 230,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Command_rpc.Connection.Expert",
      "description": "Sends signals to a running process and waits for its termination, returning the exit status. Operates on process handles and Unix exit/signal information. Useful for managing process lifecycle and retrieving termination details after asynchronous cleanup.",
      "description_length": 255,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Command_rpc.Command.Invocation",
      "description": "Provides serialization of internal representation to S-expression format. Works with a custom type `t` that encapsulates invocation details. Used to generate human-readable logs and debug information during runtime.",
      "description_length": 215,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Command_rpc.Command.Stateful",
      "description": "Provides functions to implement and manage multiple versions of RPCs, including a main handler that processes queries and returns responses. Works with custom types `query`, `response`, and `state`, and supports serialization via S-expressions. Used to define versioned APIs and track implemented versions for maintenance and pruning.",
      "description_length": 334,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Command_rpc.Command.Expert",
      "description": "Provides functions to initialize and manage an RPC server with custom configuration options such as connection description, timeout, heartbeat, and message size. Works with types like Core.Info.t, Core.Time_float.Span.t, and Async.Rpc.Connection.Heartbeat_config.t to configure server behavior. Used to start an RPC server from command-line parameters, handling connection lifecycle and cleanup after client disconnection.",
      "description_length": 422,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Command_rpc.Command",
      "description": "Provides functions to define and manage multiple versions of an RPC implementation, including handling queries and responses serialized from and to S-expressions. Works with query and response types, and tracks implemented versions and RPCs. Used to register and retrieve RPCs for a specific command across different protocol versions.",
      "description_length": 335,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Command_rpc.Connection",
      "description": "manages process output, error handling, and signal control through integrated state management. It supports merging or separating stdout and stderr, capturing error streams, and sending signals to terminate processes. Operations include configuring output behavior, inspecting error states, and retrieving exit statuses. Examples include isolating error logs during tests, controlling output streams in scripts, and gracefully terminating background processes.",
      "description_length": 460,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "command_rpc",
      "description": "Provides functions to serialize and deserialize command-line arguments into structured data, and to execute commands with controlled input/output. Works with tuples representing command names and their associated arguments, and with process states and exit codes. Enables precise handling of shell commands in automated workflows and testing environments.",
      "description_length": 355,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Command_rpc",
      "description": "Manages RPC implementations with versioned queries and responses, enabling registration, retrieval, and serialization of command-specific operations. Handles process execution, output control, and signal management, allowing precise manipulation of streams and termination of running tasks. It supports tasks such as isolating error logs, merging output streams, and tracking RPC versions across protocol revisions. Operations include configuring output behavior, inspecting error states, and managing versioned command interfaces.",
      "description_length": 531,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 531,
    "min_description_length": 215,
    "avg_description_length": 337.0,
    "embedding_file_size_mb": 0.03674507141113281
  }
}