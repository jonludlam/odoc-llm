{
  "package": "tube",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T23:00:42.211207",
  "modules": [
    {
      "module_path": "Tube.BoolPipe",
      "library": "tube",
      "description": "This module implements a boolean FIFO pipe with separate reader and writer endpoints. It supports asynchronous writing with optional pushback and reading of boolean values through Lwt-based operations. Typical use cases include coordinating state changes between concurrent processes or signaling events across threads.",
      "description_length": 319,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tube.IntPipe",
      "library": "tube",
      "description": "This module implements a unidirectional communication channel for integer values, allowing asynchronous writing and reading through separate reader and writer endpoints. It supports operations to send integers with optional backpressure handling and receive integers on demand. Concrete use cases include coordinating data flow between concurrent components, such as feeding metrics into a monitoring system or managing resource-constrained producers and consumers.",
      "description_length": 465,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tube.StringPipe",
      "library": "tube",
      "description": "This module implements a unidirectional communication channel for string data, allowing asynchronous writing and reading through separate reader and writer endpoints. It supports operations to write strings to the channel and read them from the other end, with one function offering backpressure handling during writes. Concrete use cases include streaming text data between concurrent processes or handling input/output in event-driven networking code.",
      "description_length": 453,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tube.Make",
      "library": "tube",
      "description": "Implements a communication channel for exchanging values of type `t` using separate reader and writer endpoints. Supports asynchronous reading and writing via `Lwt.t`, with optional pushback during writes. Useful for producer-consumer scenarios where one thread sends data to another through a buffered channel.",
      "description_length": 311,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tube.CharPipe",
      "library": "tube",
      "description": "This module implements a character-based communication channel with separate reader and writer endpoints. It supports asynchronous character transmission through `write` and `read` operations, along with flow control via `write_with_pushback`. Typical use cases include inter-process communication, stream processing, and implementing protocols over character-based channels.",
      "description_length": 375,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tube",
      "library": "tube",
      "description": "Implements communication channels for exchanging typed values between concurrent processes using reader-writer endpoints. Supports asynchronous operations via Lwt with optional flow control for boolean, integer, string, and character data types. Used for streaming data, coordinating state changes, and handling inter-process communication with backpressure.",
      "description_length": 358,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 465,
    "min_description_length": 311,
    "avg_description_length": 380.1666666666667,
    "embedding_file_size_mb": 0.08736324310302734
  }
}