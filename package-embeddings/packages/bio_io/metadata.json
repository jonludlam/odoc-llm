{
  "package": "bio_io",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 26,
  "creation_timestamp": "2025-07-15T23:11:52.668080",
  "modules": [
    {
      "module_path": "Bio_io.Btab.Record.Parsed.Fields.Direct",
      "library": "bio_io",
      "description": "This module provides direct access to individual fields of a fully parsed Btab record, enabling operations like iteration, mapping, folding, and validation over specific alignment data. It works with the `Bio_io.Btab.Record.Parsed.t` type, which contains typed fields such as strings for query/target names, floats for scores, and optional integers for sequence lengths. Use this module when you need to inspect or transform each component of a parsed Btab record, for example when serializing to structured formats or applying per-field validation rules.",
      "description_length": 555,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab.Record.Parsed.Fields",
      "library": "bio_io",
      "description": "This module provides operations to access, construct, and manipulate fully parsed BLAST tabular records as OCaml records with strongly-typed fields, including query and target names, alignment coordinates, scores, and identity percentages. It supports transformations like `fold`, `map`, and `iter`, along with bulk predicate checks and list conversion, handling both required and optional values with integer and float conversions. The child module enables direct access to individual fields, allowing iteration, mapping, folding, and validation over specific components of a parsed Btab record. Use these capabilities for tasks like serializing to structured formats, applying per-field validation, or performing detailed analysis of alignment metrics.",
      "description_length": 754,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab_queries.In_channel.T",
      "library": "bio_io",
      "description": "This module provides functions for reading and processing btab files line by line or as complete records, supporting operations like line iteration, folding, and direct record parsing. It works with input channels and string-based lines, along with structured `record` values representing btab entries. Concrete use cases include parsing large btab files incrementally, filtering or transforming query records, and extracting specific fields or lines based on content.",
      "description_length": 468,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Btab.Record.Parsed",
      "library": "bio_io",
      "description": "This module represents a fully parsed BLAST tabular record as an OCaml record with strongly-typed fields for query, target, alignment length, e-value, bit score, and more. It supports direct access to typed values, transformations via `map`, `fold`, and `iter`, and serialization to and from S-expressions, enabling detailed analysis and structured storage of alignment data. Use it to perform per-field validation, convert records to lists of values, or serialize results for downstream processing. The child module extends this functionality with additional operations for field-specific manipulation and bulk predicate checks.",
      "description_length": 629,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Private.In_channel",
      "library": "bio_io",
      "description": "This module provides low-level input operations for handling both binary and text data from in_channels, including reading raw bytes, integers, characters, and lines with customizable line-ending handling. It supports file positioning via `seek` and `pos`, and offers utilities to read entire files into strings or line lists, while ensuring compatibility with the `Record_in_channel.Make` functor by omitting binary mode flags in file creation. It is designed for scenarios requiring precise control over input parsing, such as processing structured binary formats or text files with specific encoding requirements.",
      "description_length": 616,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Fasta.In_channel",
      "library": "bio_io",
      "description": "This module provides functions to read FASTA records from input channels, supporting operations like iteration, folding, and conversion to lists or sequences. It works with FASTA record data structures and input channels, enabling concrete tasks such as computing total sequence length, printing sequence metadata, or building record collections. Use cases include processing genomic data files for analysis, filtering records by properties, or transforming sequences into other formats.",
      "description_length": 487,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Record_in_channel.S",
      "library": "bio_io",
      "description": "This module provides functions for reading biological records from input channels, supporting operations like folding, iterating, and collecting records into lists or sequences. It works with input channels (`t`) and biological record types (`record`), offering indexed and non-indexed processing. Concrete use cases include parsing FASTA files, counting records, or transforming sequence data during file traversal.",
      "description_length": 416,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Private.Peekable_in_channel",
      "library": "bio_io",
      "description": "This module provides peeking capabilities for input channels, supporting both regular files and FIFOs. It extends standard input operations with `peek_char` and `peek_line`, enabling lookahead without consumption, particularly useful when reading compressed streams like gzip. Concrete use cases include parsing bioinformatics file formats that require lookahead, such as FASTA or VCF, from piped or compressed input.",
      "description_length": 417,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Btab_queries.In_channel",
      "library": "bio_io",
      "description": "This module provides input operations for parsing Btab files by treating entire queries as atomic records, enabling efficient traversal and aggregation of sequence alignment data. It supports structured `record` values representing btab entries and offers operations like line iteration, folding over hits, and direct record parsing, working with input channels and string-based lines. Concrete use cases include incrementally parsing large Btab files, filtering or transforming query records, and extracting specific fields or lines based on content. It accommodates both sequential and random-access processing while normalizing line endings for bioinformatics workflows.",
      "description_length": 673,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab.Record",
      "library": "bio_io",
      "description": "This module represents a single homology search hit from a tab-delimited btab file, providing functions to create, convert, and access specific fields such as query, target, percent identity, alignment length, start and end positions, e-value, and bit-score. It supports typed access to values, transformations via `map`, `fold`, and `iter`, and serialization to and from S-expressions for structured storage and analysis. The child module adds field-specific manipulation and bulk predicate checks, enabling validation, filtering, and conversion of records to lists of values for downstream processing. Use this module to parse and transform individual BLAST or MMseqs2 alignment records with strong typing and flexible data handling.",
      "description_length": 735,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Fasta.Record",
      "library": "bio_io",
      "description": "This module defines a record type for representing FASTA file entries, with operations to access and modify the identifier, description, and sequence fields. It supports sequence manipulation such as reversing, complementing, and reverse-complementing, following IUPAC conventions. Use cases include parsing FASTA files, transforming sequences for bioinformatics analysis, and generating correctly formatted FASTA output with optional newlines.",
      "description_length": 444,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Fastq.Record",
      "library": "bio_io",
      "description": "This module provides operations for constructing, modifying, and converting FASTQ records, including computing sequence complements and reverse complements while preserving associated metadata. It works with a record type `t` containing sequence data, quality scores, identifiers, and optional annotations, supporting transformations that maintain alignment with IUPAC conventions. These capabilities are used in genomic data processing pipelines for tasks like sequence alignment, variant detection, and quality score normalization.",
      "description_length": 533,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Record_in_channel.In_channel_input_record",
      "library": "bio_io",
      "description": "This module provides functions for reading structured records from input channels, including opening and closing channels, reading records, and comparing channel states. It works with input channels and record types, enabling precise handling of sequential data formats like FASTA or BED. Concrete use cases include parsing genomic data files one record at a time for memory-efficient processing.",
      "description_length": 396,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab_queries.Record",
      "library": "bio_io",
      "description": "This module represents Btab homology search records grouped by query sequence, providing structured access to query names and their associated hit lists. It works with strings for query identifiers and lists of `Bio_io.Btab.Record.t` values for hit data. Use this module to process and analyze homology search results where each query sequence has multiple target hits.",
      "description_length": 369,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Fastq.In_channel",
      "library": "bio_io",
      "description": "This module provides functions to read FASTQ records from input channels, supporting operations like iterating over records for side effects, folding records into aggregated values, and collecting records into lists or sequences. It works with FASTQ record data structures and handles file input through channel management, including opening, closing, and exception-safe resource handling. Concrete use cases include calculating total sequence lengths, printing sequence metadata, and building processing pipelines for FASTQ data.",
      "description_length": 530,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Record_in_channel.Make",
      "library": "bio_io",
      "description": "This module creates input channels for reading record-based data from files or standard input, supporting operations like reading individual records, folding over all records with or without indices, iterating with side effects, and collecting records into lists or sequences. It works with a polymorphic record type defined by the parameter module M, handling input parsing and resource management. Concrete use cases include processing structured text files like FASTA or CSV by mapping each line or block to a typed record and performing aggregations, transformations, or analyses on the fly.",
      "description_length": 595,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Btab.In_channel",
      "library": "bio_io",
      "description": "This module reads btab-formatted files record by record, supporting operations like folding, iterating, and collecting records into lists or sequences. It works directly with `Bio_io.Btab.Record.t` values, parsing input line by line and handling standard input or file paths. Use cases include processing BLAST tabular output to aggregate alignment statistics, filter hits by criteria, or transform records into other formats without loading the entire file into memory.",
      "description_length": 470,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Utils",
      "library": "bio_io",
      "description": "Handles DNA sequence transformations and error-tolerant function execution. Provides sequence complement and reverse-complement operations, along with wrappers for catching exceptions in unary and nullary functions. Works directly with string-encoded DNA sequences and function values. Useful for bioinformatics pipelines where sequence manipulation and robust error handling are required.",
      "description_length": 389,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab_queries",
      "library": "bio_io",
      "description": "This module processes Btab files by organizing data into query-centric records, each containing a query identifier and a list of associated hits. It provides structured access to query names and their corresponding alignment hits, supporting operations like filtering, transforming, and aggregating records based on query or hit properties. The module enables efficient traversal and analysis of homology search results, such as computing summary statistics or extracting specific queries and their matches. Example uses include parsing large Btab files line by line, grouping hits by query, and selectively processing records that meet certain alignment criteria.",
      "description_length": 664,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Private",
      "library": "bio_io",
      "description": "This module offers low-level input handling with support for binary and text data, enabling precise parsing through operations like reading raw bytes, integers, characters, and lines with customizable line endings. It includes utilities for file positioning and reading entire files into strings or line lists, while accommodating structured formats like FASTA or VCF through non-consuming lookahead functions such as `peek_char` and `peek_line`. Specific capabilities include processing compressed streams, piped input, and custom binary formats with strict control over encoding and file access.",
      "description_length": 597,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Fasta",
      "library": "bio_io",
      "description": "This module processes FASTA files by parsing and manipulating sequence data, supporting iteration, transformation, and analysis. It defines a FASTA record type with identifier, description, and sequence fields, and provides operations to read records from input channels, compute sequence properties, and convert sequences using IUPAC conventions like reverse-complement. You can use it to filter records, calculate total sequence lengths, or transform genomic data for downstream analysis. Example tasks include parsing a FASTA file, modifying sequence headers, or generating reverse-complemented sequences for bioinformatics workflows.",
      "description_length": 637,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Record_in_channel",
      "library": "bio_io",
      "description": "This module enables reading structured records from input channels using customizable parsers, supporting precise extraction of data from line-oriented formats like CSV or log files. It works with user-defined record types and provides operations for reading, folding, and transforming records during traversal, with support for indexed or non-indexed processing. Child modules extend this functionality to specific domains such as genomic data parsing, offering memory-efficient sequential access and resource-managed file processing. Examples include counting FASTA records, converting BED entries into typed structures, or aggregating CSV data on the fly.",
      "description_length": 658,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Fastq",
      "library": "bio_io",
      "description": "This module processes FASTQ data by combining record manipulation and input handling. It supports reading records from files using channels and applying transformations like iteration, folding, and collection, while preserving sequence metadata. Key data types include FASTQ records with sequence, quality, and identifier fields, enabling operations such as reverse complementation and quality normalization. Examples include computing total sequence length across a file, filtering records by quality scores, and generating processed sequence data for downstream analysis.",
      "description_length": 573,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Cigar",
      "library": "bio_io",
      "description": "This module parses CIGAR strings into an internal representation and provides operations to analyze and visualize alignments. It supports Match (M), Insertion (I), and Deletion (D) operations, computing alignment length, gap count, match count, and lengths of query and target sequences. It also includes functions to draw a string-based representation of the alignment for debugging or educational purposes.",
      "description_length": 408,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Btab",
      "library": "bio_io",
      "description": "This module processes tab-delimited homology search results by parsing and manipulating individual alignment records and entire files. It provides typed access to fields such as query, target, percent identity, e-value, and bit-score, supporting operations like `map`, `fold`, and `iter` for transformation and analysis. The module enables line-by-line reading of btab files, allowing memory-efficient filtering, aggregation, and conversion to other formats. Examples include extracting high-confidence hits, computing alignment statistics, or transforming records into custom data structures for downstream analysis.",
      "description_length": 617,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io",
      "library": "bio_io",
      "description": "This module handles DNA sequence manipulation, file parsing, and alignment analysis for bioinformatics applications. It provides data types for FASTA, FASTQ, and alignment records, along with operations for sequence transformation, error handling, and structured input processing. You can parse sequence files, compute reverse complements, extract alignment statistics, and process tabular homology search results with custom filters and aggregations. Specific tasks include reading FASTA records with lookahead, transforming Btab data into typed structures, and analyzing CIGAR strings for alignment properties.",
      "description_length": 612,
      "index": 25,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 26,
    "meaningful_modules": 26,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 754,
    "min_description_length": 369,
    "avg_description_length": 547.7692307692307,
    "embedding_file_size_mb": 0.09488105773925781
  }
}