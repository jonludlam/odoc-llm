{
  "package": "bio_io",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 25,
  "creation_timestamp": "2025-06-18T16:38:00.896509",
  "modules": [
    {
      "module_path": "Bio_io.Btab.Record.Parsed.Fields.Direct",
      "description": "Provides operations to iterate over, fold, check conditions, collect elements, transform, and update mutable fields of a structured data type. Works with a custom type containing string, float, and optional integer fields. Used to process alignment data from sequence comparison tools, applying transformations or validations to individual attributes.",
      "description_length": 351,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab.Record.Parsed.Fields",
      "description": "Processes structured data with string, float, and optional integer fields, enabling iteration, transformation, and validation. Supports folding, condition checks, and updates to individual attributes. Can apply filters or modify alignment data from sequence comparison tools. Examples include extracting specific fields, normalizing values, or enforcing constraints on optional integers.",
      "description_length": 387,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab.Record.Parsed",
      "description": "Provides a structured way to handle Btab records with string, float, and optional integer fields, enabling direct access and manipulation. Offers operations like folding, filtering, and updating individual attributes, along with validation and transformation capabilities. Users can extract specific fields, normalize values, or adjust alignment data from sequence comparisons. Examples include enforcing constraints on optional integers or generating s-expressions from fully parsed records.",
      "description_length": 492,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab_queries.In_channel.T",
      "description": "Provides functions to read and process input from files or FIFOs, including line-by-line iteration, line reading with optional Windows EOL fixing, and peeking at the next character or line without consuming input. Works with file paths and a custom `t` type wrapping `Stdio.In_channel` for enhanced functionality. Used to handle compressed input streams and support peek operations during iteration.",
      "description_length": 399,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Record_in_channel.Make",
      "description": "Provides operations to create, read from, and manage input sources, including reading records and handling standard input. Works with a custom `t` type representing input channels and a `record` type for structured data. Used to process files line by line or read from predefined input streams.",
      "description_length": 294,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Private.In_channel",
      "description": "This module offers low-level input operations for reading bytes, characters, binary integers, and lines from file-like objects, along with channel state management such as position tracking and closure. It handles text and binary data, supporting line-ending normalization and buffer management, while working with input channels and file paths. Use cases include processing structured text files line by line, extracting binary data, and integrating with functors requiring input channel abstractions.",
      "description_length": 502,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Private.Peekable_in_channel",
      "description": "Provides `peek_char` and `peek_line` to inspect the next character or line without consuming the input, supporting FIFOs and files. Works with file paths and input channels, enabling safe line-by-line processing. Used to read compressed data from pipes without consuming the stream, such as when processing gzip-compressed input.",
      "description_length": 329,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab.Record",
      "description": "Encapsulates Btab file records with string, float, and optional integer fields, supporting direct access, modification, and validation. Provides operations for filtering, folding, and transforming records, including normalization and alignment adjustments. Users can enforce constraints on optional fields or serialize records into s-expressions. Examples include extracting specific fields or ensuring integer values meet defined thresholds.",
      "description_length": 442,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Btab.In_channel",
      "description": "Provides functions to read and process records from input channels, including reading individual records, iterating over all records, and folding over records with or without indices. Works with `Record.t` and manages file handling, ensuring proper closure and error handling. Supports direct file operations like reading all records into a list or processing them with custom functions.",
      "description_length": 387,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Fastq.Record",
      "description": "This module handles serialization, deserialization, and manipulation of FASTQ record data through a custom `t` type, enabling operations like sequence reversal, complementation, and quality score transformation while adhering to IUPAC conventions. It works with structured data comprising sequence strings and associated quality scores, supporting tasks such as bioinformatics workflows and sequence analysis. Specific use cases include processing high-throughput sequencing data and modifying read annotations for downstream computational biology applications.",
      "description_length": 561,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Fastq.In_channel",
      "description": "Provides functions to read and process FASTQ records from an input channel, including reading individual records, folding over records with or without indices, iterating with side effects, and collecting all records into a list or sequence. Operates on `t` type representing an input channel and `Record.t` for FASTQ data. Used for efficiently handling large FASTQ files by processing records one at a time or in bulk.",
      "description_length": 418,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab_queries.Record",
      "description": "Provides functions to convert a record to an S-expression, retrieve the query name, and access the list of hits. Works with a custom record type containing a query string and a list of Btab.Record.t entries. Used to encapsulate and manipulate data from Btab homology search files for analysis.",
      "description_length": 293,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab_queries.In_channel",
      "description": "reads and processes input from files or FIFOs, supporting line-by-line iteration, Windows EOL correction, and non-consuming peek operations. it operates on a custom `t` type that wraps `Stdio.In_channel`, enabling handling of compressed streams and enhanced control during reading. functions include `input_line`, `peek_char`, `peek_line`, and `with_in_channel` for safe resource management. examples include reading compressed Btab files line by line or inspecting upcoming data without advancing the read position.",
      "description_length": 516,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Fasta.Record",
      "description": "Provides functions to construct, manipulate, and serialize FASTA records, including creating records from ID, description, and sequence, reversing and complementing sequences, and converting to string representations with or without newlines. Works with strings for ID, description, and sequence, and returns sequence length as an integer. Used to process biological sequence data, generate FASTA-formatted output, and perform sequence transformations like reverse, complement, and reverse-complement.",
      "description_length": 501,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Fasta.In_channel",
      "description": "Provides functions to read and process FASTA records from input channels, including reading, folding, and iterating over records. Operates on file input channels and FASTA record data structures. Used to efficiently process large sequence files by folding over records, extracting all records into a list, or applying side-effecting operations per record.",
      "description_length": 355,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab",
      "description": "Encapsulates tab-delimited alignment records with string, float, and optional integer fields, enabling direct access, modification, and validation. Offers filtering, folding, and transformation operations, including normalization and constraint enforcement on optional fields. Reads and processes records from input channels, supporting iteration, indexing, and custom processing while managing file handles and errors. Users can extract specific fields, adjust alignments, or serialize records into s-expressions for further analysis.",
      "description_length": 535,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Btab_queries",
      "description": "Encapsulates and manipulates Btab homology search data through a record type containing a query string and associated hits, enabling conversion to S-expressions, query name extraction, and hit list access. Provides low-level input handling with support for compressed streams, line-by-line processing, and non-consuming look-ahead, using a custom `t` type to manage input channels. Functions like `input_line` and `peek_line` allow flexible data inspection and processing, while `with_in_channel` ensures safe resource management. Examples include reading compressed Btab files and analyzing query records by their structured components.",
      "description_length": 637,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Cigar",
      "description": "Parses and manipulates CIGAR strings, converting them to and from structured representations and extracting alignment metrics like total length, gap count, and query/target lengths. Operates on a custom type `t` that encodes sequence operations such as matches, insertions, and deletions. Computes alignment details and generates visual representations of alignments for debugging or educational purposes.",
      "description_length": 405,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Fasta",
      "description": "Handles reading, processing, and manipulating FASTA records, supporting both input channel operations and record-level transformations. Core data includes sequence IDs, descriptions, and sequences, with operations for reversing, complementing, and serializing records. Functions enable efficient file processing through folding or list extraction, while also allowing direct record modification and output generation. Examples include generating reverse-complemented sequences, extracting all records from a file, and converting records to formatted strings.",
      "description_length": 558,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Fastq",
      "description": "manages FASTQ file input and record manipulation through a structured `t` type, supporting sequence and quality transformations, and provides efficient methods for reading and processing records from input channels. It enables operations such as reversing sequences, converting bases, and adjusting quality scores, while offering flexible record iteration and collection strategies. Functions include reading single records, folding over multiple records, and collecting all data into a list or sequence. This allows for scalable processing of high-throughput sequencing data and integration into bioinformatics pipelines.",
      "description_length": 622,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Private",
      "description": "Manages input channels with low-level reading capabilities, including byte, character, and line-based access, along with buffer and state management. Supports peek operations to examine upcoming data without advancing the read position, enabling safe processing of streams and structured files. Operations include reading binary integers, normalizing line endings, and handling compressed data through pipes. Examples include parsing log files line by line, extracting binary headers, and inspecting input before consumption.",
      "description_length": 525,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bio_io.Record_in_channel",
      "description": "Provides functions to read and process biological records from an input channel, including reading individual records, folding over records with or without indices, and iterating with side effects. Operates on `t` for input channels and `record` for structured data elements. Used for batch processing of file-based records, such as parsing and aggregating data from sequence files.",
      "description_length": 382,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io.Utils",
      "description": "Provides error-wrapping versions of function calls with varying arity, error message customization, and string transformation operations for DNA sequence manipulation. Works with function types, strings, and error-typed results. Used to safely execute potentially failing operations and compute complementary DNA strands.",
      "description_length": 321,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "bio_io",
      "description": "Reads and writes FASTA formatted sequence data, extracting headers and nucleotide/protein sequences. Processes input from files or streams, returning structured records with identifiers and raw data. Enables integration of biological sequence data into analysis pipelines.",
      "description_length": 272,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bio_io",
      "description": "manages biological data through structured input handling, alignment processing, and sequence manipulation. it supports tab-delimited records, Btab homology data, CIGAR strings, FASTA, and FASTQ formats, with operations for reading, transforming, and serializing data. it enables tasks like extracting query names, computing alignment metrics, reversing sequences, and handling compressed streams. examples include parsing Btab files, generating reverse-complemented FASTA sequences, and analyzing CIGAR string gaps.",
      "description_length": 516,
      "index": 24,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 25,
    "meaningful_modules": 25,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 637,
    "min_description_length": 272,
    "avg_description_length": 440.0,
    "embedding_file_size_mb": 0.09123420715332031
  }
}