{
  "package": "tyabt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-07-15T23:07:38.726025",
  "modules": [
    {
      "module_path": "Tyabt.Make.Variable",
      "library": "tyabt",
      "description": "This module generates and manipulates typed variables within a many-sorted abstract binding tree framework. It supports creating fresh variables with unique names, retrieving variable names and their associated sorts, and checking equality between variables while ensuring sort compatibility. Concrete use cases include managing variable bindings in formal languages with multiple syntactic categories, such as programming language type systems or logical calculi.",
      "description_length": 464,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Make.Sort",
      "library": "tyabt",
      "description": "Implements comparison and ordering functions for sorts and ABTs, enabling operations like sorting and equality checks on typed abstract binding trees. Works directly with GADTs representing sorts and their associated ABT structures, using phantom types to enforce validity. Useful for tasks like normalizing expressions in a compiler or comparing terms in a proof assistant.",
      "description_length": 374,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Make.Operator",
      "library": "tyabt",
      "description": "This module defines operations for comparing and displaying abstract binding tree operators. It supports equality checks that produce arity equivalence proofs and pretty-prints operators for debugging or logging. These functions are used when implementing or inspecting language constructs with statically-typed sorts and arities.",
      "description_length": 330,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Make",
      "library": "tyabt",
      "description": "This module builds an implementation of abstract binding trees from a given signature, enabling the construction and manipulation of expressions with precise binding behavior. It provides core operations for variables, operators, and sorts, ensuring strong static guarantees through GADTs and phantom types, with support for substitution, alpha-equivalence, and typed transformations. Submodules handle variable generation and comparison, sort ordering and comparison, and operator equality and display, allowing tasks like fresh variable allocation, term normalization, and language construct inspection. Example uses include implementing compilers with correct binding semantics and building proof assistants with typed term manipulation.",
      "description_length": 740,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Operator",
      "library": "tyabt",
      "description": "This module defines operations for comparing and displaying operators within the same sort. It provides `equal` to check equality of two operators, returning a type equality proof if they match, and `pp_print` to format and display an operator. These functions are used to validate operator consistency and support readable debugging output during ABT manipulation.",
      "description_length": 365,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tyabt.S-Sort",
      "library": "tyabt",
      "description": "This module provides functions for comparing and deciding equality between different sorts in a many-sorted abstract binding tree system. It works with GADTs and phantom types representing syntactic sorts and their equality proofs. A concrete use case is validating type consistency during ABT construction or transformation, ensuring operations only proceed when sorts match exactly.",
      "description_length": 384,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Variable",
      "library": "tyabt",
      "description": "This module represents variables in many-sorted abstract binding trees, tracking both a variable's sort and its name. It supports generating fresh variables with guaranteed uniqueness, retrieving a variable's sort and name, and checking equality between variables while ensuring sort consistency. Concrete use cases include managing variable bindings and resolving variable identity during substitution or evaluation in formal languages with multiple syntactic sorts.",
      "description_length": 467,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tyabt.S",
      "library": "tyabt",
      "description": "This module constructs and manipulates many-sorted abstract binding trees (ABTs) with operations for abstraction, variable introduction, and operator application. It supports data types for sorts, variables, and operators, enabling precise representation of syntactic structures with binding. Concrete use cases include modeling programming language syntax with scoped variables and typed operators, and performing alpha-equivalence checks or substitutions on such structures.",
      "description_length": 476,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tyabt.S-Operator",
      "library": "tyabt",
      "description": "This module defines operations for comparing and displaying operators within a many-sorted abstract binding tree framework. It supports equality checking that also validates and returns arity equivalence, and prettyprinting for operators. It works directly with operator types parameterized by their arity and sort, enabling precise manipulation and inspection of ABT nodes in concrete syntax processing tasks.",
      "description_length": 410,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.S-Variable",
      "library": "tyabt",
      "description": "This module represents variables in many-sorted abstract binding trees, providing operations to create fresh variables, retrieve their sort and name, and compare variables for equality with sort consistency. It works with the `Variable.t` type indexed by a sort, and supports concrete use cases such as managing bound and free variables in formal languages with multiple syntactic categories, ensuring correct variable handling in transformations and substitutions.",
      "description_length": 465,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Sort",
      "library": "tyabt",
      "description": "This module provides a single operation, `equal`, which compares two sorts and returns either a proof of their type equality or a proof of their type inequality. It operates on abstract binding tree sorts, which are represented using GADTs and phantom types to enforce syntactic validity. A concrete use case is verifying during type checking that two syntactic classes are compatible, ensuring static guarantees about variable scoping and operator application.",
      "description_length": 461,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt",
      "library": "tyabt",
      "description": "This module enables the construction and manipulation of many-sorted abstract binding trees with strong static guarantees on syntactic validity, using GADTs and phantom types. It supports user-defined sorts, variables, and operators to model languages with binding, such as lambda calculi, ensuring correct variable scoping, substitution, and alpha-equivalence. Submodules handle variable generation and comparison, sort ordering, operator equality and display, and typed transformations, enabling tasks like fresh variable allocation, term normalization, and language construct inspection. Example uses include implementing compilers with precise binding semantics and building proof assistants with typed term manipulation.",
      "description_length": 725,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 740,
    "min_description_length": 330,
    "avg_description_length": 471.75,
    "embedding_file_size_mb": 0.044002532958984375
  }
}