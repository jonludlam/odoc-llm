{
  "package": "tyabt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:14:23.640968",
  "modules": [
    {
      "module_path": "Tyabt.Make.Operator",
      "library": "tyabt",
      "description": "This module defines operations for comparing and displaying abstract binding tree operators. It supports equality checks that produce arity proofs and pretty-printing for operators across different syntactic sorts. Concrete use cases include validating operator equivalence in type checking and formatting operators for debugging or user output.",
      "description_length": 345,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Make.Variable",
      "library": "tyabt",
      "description": "This module implements variable management for abstract binding trees with strong static guarantees. It provides operations to create fresh variables, retrieve variable names and sorts, and compare variables for equality with sort consistency proofs. It works with variables parameterized by their syntactic sort, ensuring variables of different sorts cannot be confused. Concrete use cases include generating unique bound variables during term construction and safely comparing variables within type-checking or evaluation logic.",
      "description_length": 530,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Make.Sort",
      "library": "tyabt",
      "description": "Implements comparison operations for sorts in many-sorted abstract binding trees. Provides a concrete implementation of sort equality checking, returning either a proof of type equality or a proof of type inequality. Used to determine if two syntactic classes (sorts) are identical or distinct within a single ABT instance.",
      "description_length": 323,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Make",
      "library": "tyabt",
      "description": "This module implements abstract binding trees with strong static guarantees about variable scoping and sort correctness. It provides operations to construct and manipulate ABTs, including variable binding, operator application, substitution, and alpha-equivalence checking. It works with variables, sorts, and operators parameterized by their syntactic class, ensuring type-safe term construction and transformation in formal systems like programming languages or proof assistants.",
      "description_length": 481,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt",
      "library": "tyabt",
      "description": "This module implements many-sorted abstract binding trees with support for multiple syntactic sorts, variable binding, and scope tracking. It provides operations for defining sorts, operators, and variables with strong static guarantees using GADTs and phantom types. Concrete use cases include representing and manipulating formal languages like the simply typed lambda calculus, where precise handling of variable binding and type correctness is required.",
      "description_length": 457,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 530,
    "min_description_length": 323,
    "avg_description_length": 427.2,
    "embedding_file_size_mb": 0.0729055404663086
  }
}