{
  "package": "tyabt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:32:06.417292",
  "modules": [
    {
      "module_path": "Tyabt.Make.Sort",
      "description": "Compares two sorted lists for structural equality, returning a proof of type equivalence or nonequivalence. Operates on polymorphic sorted list structures parameterized by a type-level sort. Used to verify type consistency in dependently typed data transformations.",
      "description_length": 265,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Make.Operator",
      "description": "Checks for equality between two operators of the same sort, returning a proof of arity equality when applicable. Formats operator representations for human-readable output. Operates on typed operator structures with specified arities and sorts. Used to validate operator consistency in symbolic computation systems and to generate debug-friendly representations.",
      "description_length": 362,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Make.Variable",
      "description": "Generates unique variables with specified sorts and extracts their sort and name. Compares variables to determine equality, ensuring type consistency in the process. Used to manage symbolic variables in formal systems where uniqueness and type safety are critical.",
      "description_length": 264,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Make",
      "description": "Checks if two operators of the same sort are equal, returning an arity equality proof when they match. Prettyprints operator representations for debugging or logging. Operates on typed operator structures with explicit arity and sort parameters. Used to validate operator consistency in term rewriting systems and generate human-readable output during analysis.",
      "description_length": 361,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt.Sort",
      "description": "Compares two sorted structures to determine if they are structurally identical, returning a proof of type equality or inequality. Operates on polymorphic sorted containers parameterized by a type 'sort. Used to validate consistency between sorted data representations in type-safe transformations.",
      "description_length": 297,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tyabt.Operator",
      "description": "Checks if two operators of the same sort are equal, returning a proof of arity equality when applicable. Prettyprints operator representations. Works with operators parameterized by arity and sort. Used to validate operator equivalence in type-checking and to generate human-readable output during debugging.",
      "description_length": 308,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tyabt.Variable",
      "description": "Generates unique variables with specified sorts and extracts their sort and name. Compares variables to determine equality, ensuring type consistency in the process. Used to manage symbolic variables in formal systems where uniqueness and type safety are critical.",
      "description_length": 264,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "tyabt",
      "description": "Handles variable binding and scope tracking through operations like substitution, capture-avoiding binding, and term comparison. Works with many-sorted abstract binding trees represented via GADTs and phantom types to enforce syntactic validity. Used to implement formal systems, such as type checkers or theorem provers, where variable scoping and term structure must be precisely controlled.",
      "description_length": 393,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tyabt",
      "description": "Checks if sorted structures, operators, and variables are structurally or semantically equivalent, generating proofs of equality or inequality. Provides operations to compare, prettyprint, and manage elements parameterized by sort, arity, and uniqueness. Supports type-safe validation of data consistency, operator equivalence, and variable management in formal systems. Can verify identical sorted lists, check operator arity matches, and generate or compare unique variables with specified types.",
      "description_length": 498,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 498,
    "min_description_length": 264,
    "avg_description_length": 334.6666666666667,
    "embedding_file_size_mb": 0.029496192932128906
  }
}