{
  "package": "aws",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 23,
  "creation_timestamp": "2025-07-15T23:10:04.963670",
  "modules": [
    {
      "module_path": "Aws.BaseTypes.DateTime",
      "library": "aws",
      "description": "This module handles date and time values formatted according to ISO 8601, providing functions to convert between string, JSON, and query parameter representations. It supports parsing from XML nodes and includes operations for serializing and deserializing timestamps used in AWS API requests and responses. Concrete use cases include handling request timestamps, expiration times in presigned URLs, and logging event times in AWS service interactions.",
      "description_length": 452,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.BaseTypes.Base",
      "library": "aws",
      "description": "This module defines a core data type `t` along with functions to convert values of this type to and from JSON, query strings, XML nodes, and strings. It provides direct serialization and deserialization operations for handling AWS API inputs and outputs, particularly useful when processing responses from or preparing requests to AWS services. Use cases include parsing XML-based AWS responses, generating query parameters for API calls, and converting data to JSON for transmission over HTTP.",
      "description_length": 494,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.BaseTypes.Unit",
      "library": "aws",
      "description": "This module provides functions to convert the unit type to and from JSON, query, XML, and string representations. It supports use cases where unit values need to be serialized or deserialized as part of AWS API requests and responses. The operations include `to_json`, `of_json`, `to_query`, `parse`, `to_string`, and `of_string`.",
      "description_length": 330,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws.BaseTypes.String",
      "library": "aws",
      "description": "This module defines a base type for strings used in AWS API interactions, providing functions to convert between string values and JSON, query, and XML formats. It supports operations like parsing XML nodes into strings, serializing strings to JSON or query parameters, and converting to and from standard OCaml string values. Concrete use cases include handling string inputs and outputs in AWS service requests and responses, such as serializing query parameters for HTTP requests or extracting string values from XML responses.",
      "description_length": 530,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.BaseTypes.Double",
      "library": "aws",
      "description": "This module defines operations for handling double-precision floating-point numbers in the context of AWS API interactions. It provides functions to convert between float values and JSON, query strings, XML nodes, and string representations. These conversions are used when serializing and deserializing float values for network requests and responses in AWS services.",
      "description_length": 368,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.BaseTypes.Blob",
      "library": "aws",
      "description": "This module represents binary data as a string type and provides direct conversions to and from JSON and query string formats. It includes functions for parsing binary data from XML nodes and converting it to standard string representations. It is used for handling raw data such as file contents or binary payloads in AWS API requests and responses.",
      "description_length": 350,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws.BaseTypes.Float",
      "library": "aws",
      "description": "This module provides functions to convert float values to and from JSON, query parameters, XML nodes, and strings. It supports data interchange scenarios where float values must be serialized or deserialized for API communication or configuration parsing. Use cases include handling numeric data in AWS API requests, responses, and configuration files.",
      "description_length": 352,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.BaseTypes.Long",
      "library": "aws",
      "description": "This module provides functions to convert integer values to and from JSON, query strings, XML nodes, and string representations. It works directly with integer values, treating them as 64-bit long integers. Concrete use cases include serializing and deserializing AWS API request and response fields that expect or return long integer values.",
      "description_length": 342,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.BaseTypes.Boolean",
      "library": "aws",
      "description": "This module defines conversions for boolean values to and from JSON, query parameters, XML nodes, and strings. It supports the `bool` type, providing functions used in serializing and deserializing boolean values during AWS API interactions. Concrete use cases include encoding boolean request parameters into HTTP queries and decoding boolean responses from XML or JSON payloads.",
      "description_length": 380,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws.BaseTypes.Integer",
      "library": "aws",
      "description": "This module defines conversions for integer values used in AWS API interactions, providing functions to serialize and deserialize integers to and from JSON, query parameters, XML nodes, and strings. It works directly with the `int` type and is used in handling AWS API inputs and outputs where numeric values must be encoded or decoded in specific formats. Concrete use cases include converting integers for HTTP request parameters, JSON payloads, and XML responses in AWS service clients.",
      "description_length": 489,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.Signing.Hash",
      "library": "aws",
      "description": "This module implements SHA-256 hashing with optional keyed hashing support, providing direct output in raw, hexadecimal, and Base64-encoded formats. It operates on strings as input data, producing hashed outputs suitable for cryptographic verification and AWS request signing. Concrete use cases include generating signed URLs, calculating message integrity checks, and preparing canonical request representations for AWS API authentication.",
      "description_length": 441,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.Signing",
      "library": "aws",
      "description": "This module implements AWS V2 and V4 request signing algorithms, generating authenticated HTTP requests with proper Authorization headers using access keys, secret keys, service names, and regions. It includes a child module that provides SHA-256 hashing with optional keyed hashing, outputting raw, hexadecimal, or Base64-encoded results for cryptographic verification and canonical request representation. Together, these components enable secure interaction with AWS services by ensuring request authenticity and integrity. Example uses include generating signed URLs, creating tamper-proof API requests, and preparing canonical request forms for AWS authentication.",
      "description_length": 669,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.Json",
      "library": "aws",
      "description": "This module defines a JSON type and provides functions for parsing and extracting data from JSON values. It supports operations like converting JSON lists to typed lists, building hash tables from JSON associations, and safely looking up fields in JSON objects. Concrete use cases include decoding AWS API responses into structured data and extracting specific fields from JSON payloads during request handling.",
      "description_length": 411,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.Util",
      "library": "aws",
      "description": "This module provides functions for handling options, association lists, and filtering values in the context of AWS library code generation. It includes operations like safely extracting values from options, filtering empty keys, and mapping over optional values. These functions are used to manage data structures during AWS service interactions, such as processing API responses or building requests.",
      "description_length": 401,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.Xml",
      "library": "aws",
      "description": "This module provides safe XML node extraction and validation operations using `Ezxmlm.nodes`. It includes functions to retrieve optional or multiple XML members by tag name and validate required fields. Concrete use cases include parsing AWS XML responses where tags may be missing or certain values must be present.",
      "description_length": 316,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.BaseTypes",
      "library": "aws",
      "description": "This module defines fundamental data types like string, integer, boolean, and datetime, along with their serialization and deserialization logic for AWS API interactions. It provides functions to convert these types to and from AWS-specific formats such as query strings, JSON, and XML, enabling tasks like parsing timestamps, encoding blobs for S3 uploads, and formatting numeric values in API requests. Submodules handle specific data representations, such as ISO 8601 timestamps, binary data, and numeric types, with operations including `to_json`, `of_query`, and `parse` for structured and unstructured data interchange. Examples include extracting string values from XML responses, serializing integers for HTTP queries, and converting boolean parameters in AWS service requests.",
      "description_length": 785,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.Request",
      "library": "aws",
      "description": "This module defines the structure and components of HTTP requests used in AWS service interactions, including methods, headers, and URIs. It supports operations for constructing and serializing requests, specifically tailored for AWS signing processes. Concrete use cases include building signed HTTP requests for AWS API calls, handling custom HTTP methods, and managing header lists for authentication and metadata.",
      "description_length": 417,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws.Call",
      "library": "aws",
      "description": "This module defines the core operations for making AWS API calls, including converting inputs to HTTP requests and parsing outputs or errors from HTTP responses. It works with native input and output types specific to each AWS service, along with error types that represent API-specific failure conditions. Concrete use cases include sending signed HTTP requests to AWS services like EC2 or S3 and handling the deserialization of responses or error messages.",
      "description_length": 458,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.Query",
      "library": "aws",
      "description": "This module encodes data into AWS-specific URL query strings using a recursive tree structure of lists, key-value pairs, and optional values. It provides functions to convert lists and hashtables into this structure, ensuring proper indexing and nesting required by AWS APIs. Use it when constructing signed requests or custom API calls that require AWS's exact query formatting.",
      "description_length": 379,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Aws.Endpoints",
      "library": "aws",
      "description": "This module maps AWS service names and regions to their corresponding endpoint URLs, providing concrete resolution for service-specific domains. It works with string identifiers for services and regions, returning formatted endpoint strings or `None` if no match exists. Use this to dynamically construct AWS API URLs based on service and region inputs.",
      "description_length": 353,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.Error",
      "library": "aws",
      "description": "This module defines error types and parsing functions for handling AWS API responses. It includes a `bad_response` type to capture error details and functions to format errors as strings or extract structured error information from AWS response bodies. It is used to process and interpret error messages returned by AWS services during API calls.",
      "description_length": 346,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws.Time",
      "library": "aws",
      "description": "This module parses and formats timestamps in the AWS-specific ISO 8601 format, such as \"2013-05-24T21:15:31.000Z\", truncating milliseconds when parsing and appending \".000Z\" when formatting. It operates on `CalendarLib.Calendar.t` values, providing direct conversions to and from this string format. Concrete use cases include handling AWS API request and response timestamps, such as signing requests with expiration times or processing event timestamps returned by AWS services.",
      "description_length": 480,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Aws",
      "library": "aws",
      "description": "This module coordinates AWS service interactions by managing request signing, endpoint resolution, and time formatting, while supporting data serialization across XML, JSON, and query formats. It provides core types like HTTP requests, AWS timestamps, and structured data representations, with operations to sign requests using V2 or V4 signatures, extract and validate XML nodes, parse JSON responses, and format query parameters. Submodules handle cryptographic hashing for signing, safe option and list manipulations, error parsing from responses, and mapping service regions to endpoints. You can use it to build and sign custom API requests, decode structured responses, manage timestamps in AWS format, and serialize data for AWS services like S3 or EC2.",
      "description_length": 760,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 23,
    "meaningful_modules": 23,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 785,
    "min_description_length": 316,
    "avg_description_length": 447.95652173913044,
    "embedding_file_size_mb": 0.08403682708740234
  }
}