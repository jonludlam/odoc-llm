{
  "package": "sarif",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:31:54.924842",
  "modules": [
    {
      "module_path": "Sarif.Sarif_v_2_1_0_j",
      "description": "This module provides serialization, deserialization, and manipulation utilities for SARIF v2.1.0 data structures, including addresses, logical locations, messages, artifact locations, edges, graph traversals, and static analysis results. It operates on complex, hierarchical types such as code flows, thread flows, notifications, and tool metadata, enabling tasks like report generation, tool integration, and diagnostic analysis. Specific use cases include processing static analysis outputs, managing artifact relationships, and validating structured data for compliance with SARIF standards.",
      "description_length": 594,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sarif.Sarif_v_2_1_0_t",
      "description": "This module provides serialization, comparison, and human-readable formatting operations for SARIF v2.1.0 data structures, including addresses, logical locations, artifact metadata, messages, graph traversals, and tool configurations. It works with complex types like `artifact_content`, `edge`, `multiformat_message_string`, `graph_traversal`, and `thread_flow_location`, enabling detailed static analysis reporting and traceability. Use cases include analyzing code execution paths, managing artifact relationships, and generating structured diagnostics for tool output.",
      "description_length": 572,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sarif.Sarif_v_2_1_0_util",
      "description": "The module provides validation functions for specific data formats like ISO 8601 timestamps, MIME types, and GUIDs, as well as SARIF v2.1.0 structures such as results, runs, and tool components, using regex and constraints to enforce correctness. It handles structured types including records, lists, and complex entities like addresses and fixes, ensuring compliance with SARIF schema requirements. Use cases include validating static analysis data integrity, checking language codes and version control details, and verifying web request/response formats within SARIF reports.",
      "description_length": 578,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sarif.Sarif_v_2_1_0_v",
      "description": "This module provides utilities for serializing, comparing, and pretty-printing SARIF v2.1.0 data structures, including addresses, logical locations, messages, artifact content, graphs, code flows, and result metadata. It operates on complex, nested types representing static analysis tool outputs, artifact relationships, and execution traces, enabling tasks like validating SARIF logs, generating human-readable reports, and managing analysis result annotations. Specific use cases include processing code flow information, tracking artifact changes, and handling tool invocation metadata for interoperability and diagnostics.",
      "description_length": 627,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "sarif",
      "description": "Provides functions to parse, validate, and serialize SARIF 2.1.0 data, including handling of run, artifact, and result records. Operates on OCaml types representing SARIF objects such as `run`, `artifact`, and `result`. Used to process static analysis tool outputs and generate standardized reports for integration with development tools.",
      "description_length": 338,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sarif",
      "description": "Combines serialization, validation, and formatting capabilities for SARIF v2.1.0 data, handling complex types like code flows, thread flows, artifact locations, and messages. Supports operations such as data integrity checks, structured diagnostics generation, and human-readable output creation. Enables tasks like validating timestamps, analyzing execution paths, and managing tool metadata. Examples include processing static analysis results, ensuring compliance with SARIF standards, and generating traceable reports.",
      "description_length": 522,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 627,
    "min_description_length": 338,
    "avg_description_length": 538.5,
    "embedding_file_size_mb": 0.022240638732910156
  }
}