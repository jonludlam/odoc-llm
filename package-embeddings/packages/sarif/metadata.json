{
  "package": "sarif",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:04:23.220108",
  "modules": [
    {
      "module_path": "Sarif.Sarif_v_2_1_0_t",
      "library": "sarif",
      "description": "This module provides structured data representations and serialization utilities for the Static Analysis Results Interchange Format (SARIF) version 2.1.0, focusing on artifact metadata, code analysis locations, logical and physical result mappings, graph traversals, and tool configuration data. It operates on types such as `physical_location`, `code_flow`, `graph_traversal`, `tool_component`, and `result`, with functions for pretty-printing, equality checks, and string conversion to support standardized log generation and analysis. Specific use cases include static analysis tool output serialization, cross-tool result correlation, and structured reporting of code defects, vulnerabilities, and runtime behavior metadata.",
      "description_length": 728,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sarif.Sarif_v_2_1_0_util",
      "library": "sarif",
      "description": "This module provides validation functions for scalar and structured data types in the SARIF v2.1.0 schema, enforcing constraints on ISO 8601 timestamps, GUIDs, URI strings, integer ranges, and composite types like `artifact`, `result`, and `reportingDescriptor`. It ensures data integrity through format checks, uniqueness validation, and schema-specific invariants, primarily supporting the correct serialization of static analysis results and tool metadata in SARIF-compliant formats.",
      "description_length": 486,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sarif.Sarif_v_2_1_0_j",
      "library": "sarif",
      "description": "This module provides JSON serialization, deserialization, and structured manipulation of SARIF v2.1.0 data models, focusing on static analysis artifacts like code flows, logical/physical locations, suppression metadata, and tool configurations. It operates on richly nested types representing analysis results (e.g., `code_flow`, `thread_flow`, `result`, `tool_component`), along with scalar types for identifiers (GUIDs, version quads) and metadata (property bags, MIME types). The functionality supports use cases such as generating SARIF-compliant logs from static analyzers, programmatically modifying analysis outputs, and integrating with CI/CD pipelines that consume structured vulnerability reports.",
      "description_length": 707,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sarif.Sarif_v_2_1_0_v",
      "library": "sarif",
      "description": "This module provides utilities for constructing, validating, and manipulating SARIF v2.1.0 data structures, focusing on static analysis metadata. It defines types for artifact references, logical/physical locations, code flows, suppression records, tool configurations, and analysis results, along with operations to serialize these types to strings, compare their values, and validate schema compliance. These capabilities support use cases such as generating standardized SARIF logs for static analysis tools, processing inter-procedural control flow graphs, and managing suppressions or localization metadata in analysis reports.",
      "description_length": 632,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sarif",
      "library": "sarif",
      "description": "This module provides JSON serialization, deserialization, and structured manipulation of SARIF v2.1.0 data models, focusing on static analysis artifacts like code flows, logical/physical locations, suppression metadata, and tool configurations. It operates on richly nested types such as `code_flow`, `result`, and `tool_component`, along with scalar types for identifiers and metadata. Use cases include generating SARIF-compliant logs from static analyzers, programmatically modifying analysis outputs, and integrating with CI/CD pipelines that consume structured vulnerability reports.",
      "description_length": 588,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 728,
    "min_description_length": 486,
    "avg_description_length": 628.2,
    "embedding_file_size_mb": 0.07287120819091797
  }
}