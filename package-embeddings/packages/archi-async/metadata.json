{
  "package": "archi-async",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:14.327345",
  "modules": [
    {
      "module_path": "Archi_async.Component.COMPONENT",
      "library": "archi-async",
      "description": "This module defines a component interface with operations to initialize and terminate components using context and argument types. It handles component lifecycle management through start and stop functions, where start prepares a component with context and stop gracefully shuts it down. Concrete use cases include managing network services, database connections, or background tasks in an asynchronous application.",
      "description_length": 415,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi_async.Component.SIMPLE_COMPONENT",
      "library": "archi-async",
      "description": "This module defines a component interface with operations to initialize and terminate a component instance. It works with a context type for configuration and a result type for handling success or error states during startup. Concrete use cases include managing lifecycle events for network services or background tasks.",
      "description_length": 320,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi_async.System",
      "library": "archi-async",
      "description": "This module manages the lifecycle of component-based systems, allowing creation, starting, stopping, and accessing of component states. It works with systems composed of contextual data, component dependencies, and state transitions between stopped and started. Concrete use cases include orchestrating startup and shutdown of interdependent services, such as initializing a web server with its database connection pool and background workers.",
      "description_length": 443,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archi_async.Component",
      "library": "archi-async",
      "description": "This module composes and manages asynchronous components with context-aware dependencies, enabling structured assembly of services through operations like `append`, `concat`, and `using`. It defines component lifecycles via start and stop functions that handle initialization and graceful shutdown, supporting typed dependencies and error handling during startup. Submodules refine these abstractions, specifying interfaces for component instances that manage resources like network services or database connections. Example usage includes linking a database pool component to a web server component, ensuring the pool starts before the server and shuts down cleanly after.",
      "description_length": 673,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi_async.Io",
      "library": "archi-async",
      "description": "This module implements monadic operations for handling asynchronous I/O actions. It provides `return` to wrap values in an asynchronous context, `map` to transform results of asynchronous actions, and `bind` to sequence asynchronous actions. These functions work with the `Io.t` type representing asynchronous computations. Use this module to compose non-blocking I/O operations like reading from or writing to network streams without blocking the main execution thread.",
      "description_length": 470,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archi_async",
      "library": "archi-async",
      "description": "This module orchestrates the lifecycle of asynchronous, interdependent components within a system, managing their creation, startup, shutdown, and access to state. It centers around components that encapsulate contextual dependencies, state transitions, and resource management, with operations to compose and link them based on typed dependencies. Asynchronous I/O is handled through a monadic interface using `map`, `bind`, and `return` over an `Io.t` type, enabling non-blocking operations like network or file access. For example, a web server can be composed with a database connection pool, ensuring sequential startup, safe sharing of resources, and coordinated shutdown.",
      "description_length": 678,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 678,
    "min_description_length": 320,
    "avg_description_length": 499.8333333333333,
    "embedding_file_size_mb": 0.022211074829101562
  }
}