{
  "package": "ocaml-monadic",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:04:05.559778",
  "modules": [
    {
      "module_path": "Ocaml_monadic.Ocaml_monadic_ppx",
      "library": "ocaml_monadic",
      "description": "This module implements custom syntax extensions for monadic bind (`>>=`) and failure handling (`<?>`) operators through PPX rewriters. It transforms expressions using these operators into their expanded forms during compilation, enabling concise monadic and error-handling code patterns. It directly works with OCaml abstract syntax trees (ASTs) using `Ppxlib` and `Ppxlib_ast` types, specifically `expression` and extension points.",
      "description_length": 432,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocaml_monadic",
      "library": "ocaml_monadic",
      "description": "This module enables concise monadic and error-handling code patterns by rewriting expressions using custom `>>=` and `<?>` operators into their expanded forms at compile time. It operates on OCaml ASTs using `Ppxlib` and `Ppxlib_ast`, transforming `expression` nodes and extension points. Developers can write clean, readable monadic code that automatically desugars into efficient core OCaml constructs. For example, a function using `x >>= fun y -> ...` gets rewritten into a chain of `bind` calls, while `expr <?> \"error\"` injects error-handling logic directly into the monadic flow.",
      "description_length": 586,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 586,
    "min_description_length": 432,
    "avg_description_length": 509.0,
    "embedding_file_size_mb": 0.0076923370361328125
  }
}