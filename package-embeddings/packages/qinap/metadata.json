{
  "package": "qinap",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:35.654649",
  "modules": [
    {
      "module_path": "Qinap.Clist",
      "description": "Converts between a list of characters and a string, allowing efficient manipulation of character sequences. Operates on the `char list` type, enabling direct processing of character-based data. Used to transform input strings into structured character lists for further processing or to generate output strings from processed character data.",
      "description_length": 341,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qinap.Ext_string",
      "description": "Returns the first character of a string as an option and removes the first character, handling empty strings gracefully. Operates on OCaml strings and provides safe access and manipulation. Useful for processing string prefixes in parsing or data extraction tasks.",
      "description_length": 264,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "qinap",
      "description": "Provides monadic parsing operations such as sequencing, choice, and repetition, along with primitive parsers for characters and strings. Works with parser types that encapsulate input state and failure handling. Used to build recursive descent parsers for structured text formats like configuration files or domain-specific languages.",
      "description_length": 334,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qinap",
      "description": "Converts between character lists and strings, enabling efficient manipulation of sequences, and provides safe string prefix operations by extracting or removing the first character. Operates on `char list` and OCaml strings, offering bidirectional conversion and safe access. For example, it can split a string into a list for processing or extract the initial character for parsing decisions. It supports tasks like tokenization or incremental string analysis.",
      "description_length": 461,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 461,
    "min_description_length": 264,
    "avg_description_length": 350.0,
    "embedding_file_size_mb": 0.014939308166503906
  }
}