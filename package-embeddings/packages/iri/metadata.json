{
  "package": "iri",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:06:35.344803",
  "modules": [
    {
      "module_path": "Iri.Set",
      "library": "iri",
      "description": "This module offers set manipulation for ordered collections of unique IRI elements, supporting union, intersection, difference, and ordered traversal alongside sequence conversion. It operates on immutable sets (`Iri.Set.t`) with persistent data structures that preserve element order and structural equality during transformations. Use cases include managing hierarchical identifiers, processing ordered data streams, and performing efficient set queries or bulk transformations while maintaining logical consistency.",
      "description_length": 518,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iri_types.KV",
      "library": "iri",
      "description": "This module offers ordered key-value map manipulations with string keys, supporting immutable updates, ordered traversal, and safe value access via `option` types. It operates on maps and sequences of key-value pairs, enabling transformations like filtering, merging, and structural decomposition while preserving key ordering. Use cases include configuration management with ordered key dependencies, incremental map construction from sequences, and algorithms requiring ordered iteration (e.g., range queries or priority-based processing).",
      "description_length": 541,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iri.KV",
      "library": "iri",
      "description": "This module implements an ordered key-value map with operations for functional updates, ordered traversal, and sequence-based transformations. It works with parameterized map structures where keys are ordered, supporting efficient access and manipulation, and handles conversions between maps and sequences of key-value pairs. Use cases include managing sorted associative data, incremental map construction from sequences, and functional state management with optional value handling.",
      "description_length": 485,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Iri.Map",
      "library": "iri",
      "description": "This module implements ordered key-value storage and manipulation using `Iri.t` keys, supporting operations like insertion, deletion, ordered traversal, and transformation through functions such as `map`, `filter`, and `fold`. It works with maps parameterized over their value type, enabling ordered queries (e.g., `find_first_opt`, `find_last`), bulk conversions to/from sequences/lists, and precise control over key ordering during iteration or construction. It is particularly suited for scenarios requiring sorted data maintenance, incremental map updates from sequences, or key-range-based operations like splitting and merging.",
      "description_length": 633,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iri_types",
      "library": "iri",
      "description": "This module handles IRI components through encoding, parsing, construction, and normalization, working with structured representations that include scheme, host, path, and fragment elements, along with path types and key-value pairs for query parameters. Its core operations enable precise manipulation of IRIs in web frameworks, data validation, and internationalized link generation, with support for immutable updates, ordered traversal, and safe value access via `option` types. The module provides direct access to IRI construction and normalization functions, while its child module enhances query handling through ordered key-value maps that support filtering, merging, and ordered iteration. Examples include building and validating URLs with normalized encoding, incrementally constructing query parameters with preserved order, and safely accessing or transforming structured IRI components.",
      "description_length": 901,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Iri_lexer",
      "library": "iri",
      "description": "This module parses IRIs and HTTP links from lexing buffers, providing precise location tracking and error reporting. It constructs IRI values with optional percent-decoding and captures source positions using standard lexing structures. Use it to extract and validate IRIs or parse link headers with positional information.",
      "description_length": 323,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iri",
      "library": "iri",
      "description": "This module provides core functionality for parsing, constructing, and manipulating Internationalized Resource Identifiers (IRIs), with support for accessing and modifying components such as scheme, path, query, and fragment. It includes operations for normalization, resolution against base IRIs, and precise equivalence checks with customizable encoding, enabling use cases like URL internationalization, HTTP link header processing, and canonicalization for web applications. The module is complemented by submodules for ordered sets of IRIs, ordered key-value maps, and IRI-keyed maps, which together support managing hierarchical identifiers, sorted associative data, and key-range operations with sequence conversions and functional transformations. Specific capabilities include parsing a string into an IRI, resolving relative references, normalizing for equivalence, and efficiently managing collections of IRIs or IRI-based key-value data with ordered traversal and bulk manipulation.",
      "description_length": 994,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 994,
    "min_description_length": 323,
    "avg_description_length": 627.8571428571429,
    "embedding_file_size_mb": 0.0258636474609375
  }
}