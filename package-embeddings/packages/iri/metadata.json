{
  "package": "iri",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:32:35.445307",
  "modules": [
    {
      "module_path": "Iri_types.KV",
      "description": "The module provides functions for creating, modifying, and querying key-value maps, including adding, updating, removing, and merging entries, with a focus on ordered maps using string keys and generic values. It supports sequential processing, predicate-based filtering, and key-based partitioning, enabling tasks like configuration management or data processing pipelines that require structured, ordered data manipulation. Specific operations include iterating over subsets of bindings, building maps from sequences, and transforming data through folding and mapping.",
      "description_length": 570,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iri.KV",
      "description": "The module provides operations for managing ordered maps with string keys, including adding, merging, and iterating over key-value pairs, as well as filtering and transforming data through predicate-based selection and sequential processing. It works with sequences of key-value pairs and maps, enabling use cases like configuration management and data aggregation where ordered traversal and selective processing are required. Specific functions support building maps from sequences and partitioning data based on key predicates.",
      "description_length": 530,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iri.Set",
      "description": "The module provides set operations for adding, removing, and combining elements, alongside querying properties like size, membership, and extremal values, working with ordered sets defined by a comparison function. It includes iterative processing, predicate-based searches, and transformations such as mapping and filtering, enabling tasks like data pipeline manipulation and structured analysis. Additionally, it supports sequence-based set construction and reverse-order traversal, catering to scenarios requiring ordered data aggregation or sequential processing.",
      "description_length": 567,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Iri.Map",
      "description": "This module provides operations for creating, modifying, and querying ordered maps, including adding, removing, updating, and merging key-value bindings, as well as iterating over entries in key order. It works with ordered data structures like maps and sequences, enabling tasks such as finding minimum/maximum keys, filtering, and converting between maps and lists. Use cases include efficient key-based data retrieval, maintaining sorted collections, and processing bindings in structured traversal patterns.",
      "description_length": 511,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "iri",
      "description": "Processes and validates Internationalized Resource Identifiers (IRIs) by parsing, normalizing, and encoding components such as schemes, hosts, and paths. It handles UTF-8 encoded strings and structured data representing IRI segments. Used to ensure consistent representation of web addresses in applications requiring international character support.",
      "description_length": 350,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Iri_types",
      "description": "manages ordered key-value maps with string keys and arbitrary values, offering creation, modification, and query operations such as adding, updating, removing, and merging entries. it supports sequential traversal, filtering by predicates, and partitioning by keys, enabling structured data processing. operations include iterating over subsets, building maps from sequences, and transforming data via folding and mapping. examples include configuring systems with ordered settings or processing data streams with key-based transformations.",
      "description_length": 540,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Iri_lexer",
      "description": "Provides functions to create and manage source location data, parse IRI strings with optional percent decoding, and extract HTTP link relationships. Works with Lexing.position, Iri_types.t, and custom loc and error types to track parsing context and report issues. Used to generate detailed error messages, convert locations to strings, and parse structured URI data from input buffers.",
      "description_length": 386,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Iri",
      "description": "manages ordered data structures through operations on maps and sets, supporting key-based manipulation, filtering, and transformation. It handles sequences and ordered collections, enabling tasks like configuration aggregation, data pipeline processing, and structured traversal. Key functions include building maps from sequences, merging sets, and querying extremal values. Examples include filtering map entries by key predicates, generating ordered sets from input sequences, and extracting minimum or maximum keys for analysis.",
      "description_length": 532,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 570,
    "min_description_length": 350,
    "avg_description_length": 498.25,
    "embedding_file_size_mb": 0.029486656188964844
  }
}