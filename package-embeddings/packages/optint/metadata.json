{
  "package": "optint",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:31:39.921299",
  "modules": [
    {
      "module_path": "Optint.Int63.Boxed.Infix",
      "description": "Provides arithmetic and bitwise operations for a type `t`, including addition, subtraction, multiplication, division, modulo, bitwise AND, OR, left shift, and right shift. Works with numeric and bitwise data types, supporting both integer and bit-level manipulations. Used for low-level calculations, bit masking, and efficient numerical transformations in performance-critical code.",
      "description_length": 383,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Optint.Int63.Infix",
      "description": "Provides arithmetic and bitwise operations for a type `t`, including addition, subtraction, multiplication, division, modulo, bitwise AND, OR, left shift, and right shift. Works with numeric and bitwise data types, enabling low-level manipulation and calculations. Used for implementing mathematical expressions, bit manipulation in embedded systems, and performance-critical numeric processing.",
      "description_length": 395,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Optint.Int63.Boxed",
      "description": "implements arithmetic and bitwise operations on 63-bit integers, ensuring consistent boxed representation for reliable low-level computations. it defines a type `t` with operations such as add, sub, mul, div, mod, and bitwise shifts, and supports both integer and bit-level manipulations. examples include performing precise bit masking, handling large integer arithmetic without overflow, and optimizing numerical transformations in systems code. it is designed for environments where predictable memory layout and exact bit control are essential.",
      "description_length": 548,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Optint.Infix",
      "description": "Provides arithmetic and bitwise operations for a type `t`, including addition, subtraction, multiplication, division, modulo, bitwise AND, OR, left shift, and right shift. Works with numeric or bit-manipulable data types, enabling low-level computations and transformations. Used for implementing mathematical expressions, bit masking, and efficient data processing in performance-critical code.",
      "description_length": 395,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Optint.Conditional",
      "description": "Checks if a type is either of two specified types, enabling conditional type selection. Works with polymorphic variants and type parameters to enforce type constraints. Used to route function implementations based on type membership in generic code.",
      "description_length": 249,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Optint.Int63",
      "description": "Encapsulates 63-bit integer operations with a type `t` supporting arithmetic and bitwise manipulations. Provides add, sub, mul, div, mod, and shifts, enabling precise control over bit patterns and large integer calculations. Examples include implementing bit masking, avoiding overflow in critical computations, and optimizing low-level numerical transformations. Ensures consistent representation for reliable system-level programming and deterministic behavior.",
      "description_length": 463,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "optint",
      "description": "Provides operations for arithmetic, comparison, and conversion on optimized integer types, including addition, subtraction, and bitwise operations. Works with custom data types Optint.t and Int63.t, designed for efficient memory and performance on 64-bit systems. Used to replace standard 32-bit and 64-bit integers in performance-critical code paths where native int usage is beneficial.",
      "description_length": 388,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Optint",
      "description": "Encapsulates 63-bit integer operations with a type `t` supporting arithmetic and bitwise manipulations, including add, sub, mul, div, mod, and shifts. Provides conditional type selection based on membership in two specified types, enabling generic function routing. Supports precise bit control, overflow avoidance, and deterministic system-level computations, allowing bit masking, large integer handling, and efficient data transformations. Examples include implementing secure cryptographic operations, optimizing memory layouts, and ensuring consistent numerical behavior in critical applications.",
      "description_length": 601,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 601,
    "min_description_length": 249,
    "avg_description_length": 427.75,
    "embedding_file_size_mb": 0.02944660186767578
  }
}