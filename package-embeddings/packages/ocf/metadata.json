{
  "package": "ocf",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:56.130148",
  "modules": [
    {
      "module_path": "Ocf.Wrapper",
      "library": "ocf",
      "description": "This module defines wrappers for serializing and deserializing values to and from JSON using Yojson, with support for primitive types, lists, options, tuples, and custom string conversions. It provides operations to construct and manipulate JSON values with type-safe wrappers, ensuring correct parsing and encoding. Concrete use cases include reading and writing configuration values like integers, strings, and lists directly from JSON files, and mapping JSON objects to custom data structures using predefined conversion functions.",
      "description_length": 534,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocf.SMap",
      "library": "ocf",
      "description": "This module provides a string-keyed map structure optimized for configuration data management, supporting efficient immutable updates and physical equality checks. It offers ordered traversal operations like conditional searches, key-based iteration, and sequence-driven bulk updates, along with transformations such as filtering, partitioning, and value mapping. Designed for use cases requiring structured configuration handling, ordered key-value processing, and high-performance merges or conversions between maps, lists, and sequences.",
      "description_length": 540,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ocf",
      "library": "ocf",
      "description": "This module organizes hierarchical configuration data into typed groups, enabling structured validation, serialization, and error handling for JSON-based configuration files. It combines typed configuration access with a specialized string-keyed map for efficient, ordered manipulation of key-value pairs and a JSON conversion layer that supports primitives, lists, and custom data structures. You can define nested configuration schemas, read and write them to disk, merge command-line arguments with stored settings, and safely access or transform values using type-aware operations. The map submodule enables ordered traversal and bulk updates, while the JSON submodule handles precise, type-safe encoding and decoding of complex values.",
      "description_length": 740,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 740,
    "min_description_length": 534,
    "avg_description_length": 604.6666666666666,
    "embedding_file_size_mb": 0.011322975158691406
  }
}