{
  "package": "current_git",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:27:31.410961",
  "modules": [
    {
      "module_path": "Current_git.Commit_id",
      "description": "Provides a way to uniquely identify Git commits using repository URI, reference name, and hash. It supports comparison, equality checks, and pretty-printing for debugging or logging. Includes a specialized formatter to display Git clone commands for reproducibility.",
      "description_length": 266,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_git.Commit",
      "description": "Provides a total ordering for commit objects, extracts commit identifiers and repository paths, generates hash strings, and serializes/deserializes commits. Works with commit identifiers, file paths, and string representations of commit data. Used to compare commits during merge operations, generate unique identifiers for version control tracking, and persist commit state in binary format.",
      "description_length": 392,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Current_git.Local",
      "description": "Provides operations to retrieve the local Git repository path, current branch reference, and associated commit objects. Works with Fpath.t for file paths and Commit_id.t for commit identifiers. Enables fetching the commit at a specific reference, such as a branch or tag, within a local repository.",
      "description_length": 298,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "current_git",
      "description": "Provides operations for fetching, building, testing, and deploying code based on version control events. Works with Git repositories, commit hashes, and build artifacts. Used to automate continuous integration workflows and update build statuses in real time.",
      "description_length": 259,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_git",
      "description": "Encapsulates Git repository state by managing commit identifiers, repository paths, and reference tracking. It handles commit comparison, serialization, and retrieval, supporting operations like generating clone commands, extracting commit data, and fetching commits by reference. Key types include commit identifiers, file paths, and hash strings, enabling version control tracking and binary persistence. Examples include comparing commits during merges, logging commit details, and reconstructing repository states from serialized data.",
      "description_length": 539,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 539,
    "min_description_length": 259,
    "avg_description_length": 350.8,
    "embedding_file_size_mb": 0.018586158752441406
  }
}