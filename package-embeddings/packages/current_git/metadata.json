{
  "package": "current_git",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:50:14.768299",
  "modules": [
    {
      "module_path": "Current_git.Commit_id",
      "library": "current_git",
      "description": "This module represents Git commit identifiers with structured fields for repository URI, reference name, and hash. It provides operations to construct commit IDs, access their components, and compare or format them. Use cases include tracking specific commits across repositories and generating user-facing Git commands for cloning or checking out a commit.",
      "description_length": 357,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_git.Commit",
      "library": "current_git",
      "description": "This module represents Git commits with operations to create commits from a repository and commit ID, retrieve metadata like hash and repository path, and compare or serialize commit values. It works with commit IDs, repository paths, and string hashes. Concrete use cases include tracking specific commits in a Git repository, comparing commit positions in history, and serializing commit references for storage or transmission.",
      "description_length": 429,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_git.Local",
      "library": "current_git",
      "description": "Works with local Git repositories, providing operations to access the current branch head, resolve references to commits, and retrieve repository paths. It handles data types such as branch references, commit IDs, and commit objects. Use cases include inspecting the state of a local Git repository, tracking branch tips, and resolving symbolic references to specific commits.",
      "description_length": 376,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_git",
      "library": "current_git",
      "description": "This module provides operations to clone and fetch Git commits, track branch heads, resolve references, and manage checkouts. It works with commit IDs, repository paths, and branch references to support concrete tasks like cloning a repository at a specific branch, fetching commits for comparison, and running jobs in temporary checkouts. Use cases include building continuous integration pipelines that require precise Git commit tracking and local repository inspection.",
      "description_length": 473,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 473,
    "min_description_length": 357,
    "avg_description_length": 408.75,
    "embedding_file_size_mb": 0.058348655700683594
  }
}