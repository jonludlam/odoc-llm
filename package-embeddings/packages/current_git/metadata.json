{
  "package": "current_git",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:38.944955",
  "modules": [
    {
      "module_path": "Current_git.Local",
      "library": "current_git",
      "description": "Works with local Git repositories, providing operations to access the current branch head, resolve references to commits, and retrieve repository paths. It handles data types such as commit IDs, commit objects, and file paths. Use cases include inspecting the state of a local Git repository, tracking branch heads, and resolving specific references to commit hashes.",
      "description_length": 367,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Current_git.Commit",
      "library": "current_git",
      "description": "This module represents Git commits with operations to create commits from a repository and commit ID, retrieve metadata like hash and repository path, and compare or serialize commit values. It works with commit IDs, repository paths, and string hashes. Concrete use cases include tracking specific points in a Git repository's history, comparing commit positions for ordering, and serializing commit data for storage or transmission.",
      "description_length": 434,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Current_git.Commit_id",
      "library": "current_git",
      "description": "This module represents Git commit identifiers with structured fields for repository URI, reference name, and hash. It provides operations to construct commit IDs, extract their components, and compare or format them. Use cases include tracking specific commits across repositories and generating user-readable Git commands for cloning or checking out a commit.",
      "description_length": 360,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Current_git",
      "library": "current_git",
      "description": "This module integrates with Git by enabling repository cloning, fetching commits, and performing temporary checkouts, while working directly with commit identifiers and local repository references. Its core data types include commit IDs, commit objects, and repository paths, supporting operations like resolving branch heads, comparing commits, and serializing commit data. Submodules extend this functionality by modeling Git commits with metadata, structured commit IDs with repository context, and utilities for inspecting local repositories. Examples include cloning a repo at a specific branch, fetching a commit by ID, comparing commit positions, and generating Git commands from structured commit IDs.",
      "description_length": 709,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 709,
    "min_description_length": 360,
    "avg_description_length": 467.5,
    "embedding_file_size_mb": 0.0149383544921875
  }
}