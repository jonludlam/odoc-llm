{
  "package": "easy_logging",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 13,
  "creation_timestamp": "2025-07-15T23:07:52.286344",
  "modules": [
    {
      "module_path": "Easy_logging.Logging_internals.Logging_infra.MakeTree.SMap",
      "library": "easy_logging",
      "description": "This implementation provides a sorted dictionary structure with string keys and polymorphic values, supporting efficient operations like insertion, deletion, merging, and ordered traversal. It offers transformations through mapping, filtering, and partitioning, along with conversions to and from sequences and lists, enabling workflows that require ordered data manipulation or incremental updates. The structure is particularly suited for managing hierarchical configurations, environment variables, or any keyed data requiring predictable ordering and compositional operations.",
      "description_length": 580,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Easy_logging.Logging_internals.Logging_infra.Data_type",
      "library": "easy_logging",
      "description": "This module defines a data type `t` representing hierarchical log sources and provides operations to construct and reference them. The `make` function creates a new log source with a given name and optional parent, enabling structured logging hierarchies. The `root` value represents the top-level log source, serving as the common ancestor for all loggers in the system.",
      "description_length": 371,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Easy_logging.Logging_internals.Logging_infra.MakeTree",
      "library": "easy_logging",
      "description": "This module organizes named data elements into a hierarchical tree structure, using string paths to manage nested nodes and support scoped configurations such as logging domains. It provides operations to construct and retrieve data by path, with a mutable root node managing the tree, and integrates a sorted dictionary structure for ordered key-value storage and transformations like mapping, filtering, and merging. You can use it to build hierarchical configurations, manage environment variables, or represent nested scopes with efficient traversal and updates. For example, a logging system can be structured with named domains at different levels, each storing configuration data that can be accessed or modified through its path.",
      "description_length": 737,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Easy_logging.Logging_internals.Formatters",
      "library": "easy_logging",
      "description": "This module provides functions to format log messages in different output styles, including plain text, colored text, and JSON. It operates on log items and string lists, handling tasks like joining strings, reducing lists, and formatting tags. Use cases include generating human-readable logs with optional color coding and structured JSON output for log processing systems.",
      "description_length": 375,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Easy_logging.Handlers.FileHandler",
      "library": "easy_logging",
      "description": "This module creates file-based logging handlers with configurable file naming, truncation, and rotation. It works with log levels, file paths, and Unix permissions to manage log output files. Concrete use cases include writing logs to a dated file, rotating logs when they reach a size limit, and managing file permissions for log files.",
      "description_length": 337,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Easy_logging.Logging_internals.Logging_infra",
      "library": "easy_logging",
      "description": "This module provides a structured logging framework centered on hierarchical data organization and typed log entries. It defines core abstractions like `Data_type` for log formats and `MakeTree` for building nested log hierarchies, while its child modules implement concrete representations for log sources and scoped, mutable tree-based configurations. You can create structured loggers with typed outputs, organize log domains using path-based trees, and manipulate nested configurations through operations like mapping and filtering. Example uses include hierarchical text or JSON logging, scoped environment management, and domain-based log configuration.",
      "description_length": 659,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Easy_logging.Logging_internals.Colorize",
      "library": "easy_logging",
      "description": "This module provides functions to apply terminal color and formatting to strings. It defines color and format types for foreground, background, and text styles like bold or underline, and maps them to terminal codes. It is used to enhance log output visibility in terminal environments.",
      "description_length": 286,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Easy_logging.Logging_internals.Logging_types",
      "library": "easy_logging",
      "description": "This module defines log severity levels and associated operations for parsing, displaying, and formatting them. It introduces the `level` type for representing log priorities and `log_item` for structured log entries. Use cases include converting log levels from strings, rendering levels for output, and constructing log messages with metadata like timestamps and tags.",
      "description_length": 370,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Easy_logging.Handlers.CliHandler",
      "library": "easy_logging",
      "description": "This module creates logging handlers that write messages to standard output or error streams. It accepts an output channel and a minimum log level, forwarding log records to the specified stream if they meet or exceed the level. Use it to direct log output to stdout or stderr in command-line applications.",
      "description_length": 306,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Easy_logging.Logging_internals",
      "library": "easy_logging",
      "description": "This module organizes hierarchical, structured logging with support for rich formatting and terminal presentation. It centers on log items and severity levels, with operations to build and manipulate nested log trees, format messages in plain text, JSON, or colored output, and apply styling for terminal display. You can create typed log entries, render them with colors or indentation based on severity, and manage scoped configurations for structured logging systems. Example uses include generating color-coded logs in terminals, exporting structured logs in JSON format, and organizing log output into hierarchical domains with custom formatting.",
      "description_length": 651,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Easy_logging.Logging",
      "library": "easy_logging",
      "description": "This module implements a hierarchical logging system with configurable log levels, message formatting, and output handlers. It defines log items containing level, timestamp, logger name, message, and tags, and supports operations to create and retrieve loggers, set logging levels, and serialize the logger hierarchy to JSON. Concrete use cases include structured logging in applications with multiple components, filtering logs by level or tags, and directing logs to different outputs like files or consoles through handler configurations.",
      "description_length": 541,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Easy_logging.Handlers",
      "library": "easy_logging",
      "description": "This module routes log messages through configurable handlers that apply formatters, filters, and output targets based on log levels and filter conditions. It supports writing logs to files with rotation and permissions management, or streaming them to stdout/stderr with level-based filtering. Key operations include setting formatting templates, defining filter rules, and attaching output destinations such as files or system streams. For example, it can direct error-level messages to stderr while writing all logs to a rotating file with a specific naming pattern.",
      "description_length": 569,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Easy_logging",
      "library": "easy_logging",
      "description": "This module provides a structured logging system with hierarchical organization, configurable formatting, and flexible output routing. It centers on log items with severity levels, timestamps, and tags, supporting operations to build nested log trees, apply color and indentation, and serialize logs to JSON or terminal output. Users can direct logs to files with rotation or system streams with level-based filtering, enabling use cases like color-coded terminal logs, structured JSON exports, and multi-destination logging with scoped configurations.",
      "description_length": 552,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 13,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9285714285714286
  },
  "statistics": {
    "max_description_length": 737,
    "min_description_length": 286,
    "avg_description_length": 487.2307692307692,
    "embedding_file_size_mb": 0.04765796661376953
  }
}