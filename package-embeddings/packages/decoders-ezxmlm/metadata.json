{
  "package": "decoders-ezxmlm",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:39.497224",
  "modules": [
    {
      "module_path": "Decoders_ezxmlm.Decode.Infix",
      "library": "decoders-ezxmlm",
      "description": "This module provides infix operators for composing decoders that process XML data using the `Decoders` library. It supports monadic and applicative operations like bind (`>>=`), map (`>|=`), and apply (`<*>`), along with custom `let*` and `and*` constructs for sequencing and combining decoder results. These functions are used to decode and transform structured XML input into OCaml values, such as parsing XML elements into records or custom data types.",
      "description_length": 455,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Decoders_ezxmlm.Decode",
      "library": "decoders-ezxmlm",
      "description": "This module combines monadic and applicative combinators with custom syntax for building XML decoders that transform structured input into OCaml values. It provides core operations like `>>=`, `>|=`, and `<*>`, along with `let*` and `and*` for sequencing and merging decoder results. These combinators enable decoding XML elements into records or custom types by composing smaller decoders. For example, a decoder for an XML list of items can be built by combining element parsers using applicative style or monadic binds.",
      "description_length": 522,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_ezxmlm",
      "library": "decoders-ezxmlm",
      "description": "This module builds XML decoders using monadic and applicative combinators, transforming structured XML into OCaml values. It supports `>>=`, `>|=`, `<*>`, and custom syntax like `let*` and `and*` to compose decoders for complex structures such as records or custom types. Core operations allow decoding nested elements, attributes, and lists by chaining or merging smaller decoders. For example, it can parse an XML document containing a list of user entries into a list of OCaml user records by combining field-level decoders.",
      "description_length": 527,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 527,
    "min_description_length": 455,
    "avg_description_length": 501.3333333333333,
    "embedding_file_size_mb": 0.011312484741210938
  }
}