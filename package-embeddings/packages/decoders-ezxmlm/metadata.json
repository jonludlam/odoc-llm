{
  "package": "decoders-ezxmlm",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:32.114295",
  "modules": [
    {
      "module_path": "Decoders_ezxmlm.Decode.Infix",
      "description": "Performs monadic sequencing and transformation on decoder values, combining results of successive decoding steps or applying functions to parsed values. Operates on decoder types that track input state and output values, enabling structured data parsing. Used to chain JSON parsing operations, transform decoded values, and combine multiple decoder results into tuples.",
      "description_length": 369,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Decoders_ezxmlm.Decode",
      "description": "Sequences and transforms decoder values through monadic operations, tracking input state and producing structured outputs. It supports chaining JSON parsing steps, applying functions to parsed data, and combining results into tuples. Key data types include decoder values that encapsulate state and output. Examples include parsing nested JSON fields, modifying decoded strings, and aggregating multiple parsed values into a single result.",
      "description_length": 439,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "decoders-ezxmlm",
      "description": "Parses JSON-like strings into OCaml values using a set of combinators that define how to extract and transform data. It supports common data types such as integers, strings, lists, and records, with custom decoding logic for nested structures. Used to convert raw JSON input from APIs or configuration files into strongly typed OCaml values for safe processing.",
      "description_length": 361,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Decoders_ezxmlm",
      "description": "Encapsulates stateful parsing workflows, enabling sequential processing and transformation of decoded values. It handles JSON structures by chaining operations, applying functions, and combining outputs into structured formats. Core types include stateful decoder values and transformation functions, allowing for nested field extraction, string manipulation, and result aggregation. Users can parse complex JSON hierarchies, modify decoded strings on the fly, and merge multiple parsed elements into cohesive data structures.",
      "description_length": 526,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 526,
    "min_description_length": 361,
    "avg_description_length": 423.75,
    "embedding_file_size_mb": 0.014950752258300781
  }
}