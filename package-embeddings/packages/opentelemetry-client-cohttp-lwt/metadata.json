{
  "package": "opentelemetry-client-cohttp-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:04:07.541921",
  "modules": [
    {
      "module_path": "Opentelemetry_client_cohttp_lwt.Config",
      "library": "opentelemetry-client-cohttp-lwt",
      "description": "This module defines configuration settings for exporting telemetry data via HTTP using Cohttp and Lwt. It supports specifying endpoints for traces, metrics, and logs, along with batching parameters and custom headers. The configuration is used to control how and where telemetry data is sent in an asynchronous OCaml application.",
      "description_length": 329,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opentelemetry_client_cohttp_lwt",
      "library": "opentelemetry-client-cohttp-lwt",
      "description": "This module implements an OpenTelemetry collector backend using Cohttp and Lwt for asynchronous HTTP communication, enabling telemetry data export in Lwt-based applications. It provides configuration options for endpoints, batching, and custom headers, along with functions to create and manage a backend with optional cleanup hooks. The child module defines detailed export settings, allowing fine-grained control over trace, metric, and log transmission. Example usage includes setting up a configured backend to send telemetry data to a remote collector over HTTPS with custom authentication headers.",
      "description_length": 603,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 603,
    "min_description_length": 329,
    "avg_description_length": 466.0,
    "embedding_file_size_mb": 0.0076999664306640625
  }
}