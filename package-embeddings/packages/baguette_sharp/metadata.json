{
  "package": "baguette_sharp",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-06-18T16:33:12.372774",
  "modules": [
    {
      "module_path": "Baguette_sharp.Array_manipulation",
      "description": "Extracts and modifies elements in arrays and matrices using index-based access and replacement, constructs arrays and matrices of specified sizes with default values, and converts arrays to string representations. Operates on `Parser.parameters` and list structures to manipulate structured data. Used to build and modify data structures dynamically during parsing or configuration setup.",
      "description_length": 388,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Baguette_sharp.Conditions",
      "description": "Handles logical and comparative operations on parameter lists, generating parser-compatible results. Processes boolean and numeric values through functions like equality, inequality, and logical combinations. Used to construct conditional expressions in parsing workflows.",
      "description_length": 272,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Filemanager",
      "description": "Provides functions to manage file paths and directories, including creating directories, generating file names, and handling library-specific file structures. Operates with strings representing file paths and directory names. Used to set up project directories, generate file locations, and manage library installations.",
      "description_length": 320,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Functions",
      "description": "Handles string substitution using regular expressions, recursive printing of parameter lists, and variable management in a hash table. Processes input and output operations, including reading from standard input and returning values from function calls. Manages function dispatch based on string identifiers and argument lists.",
      "description_length": 327,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Interpreter",
      "description": "Handles parsing and execution of B# code by reading source files, merging hash tables for symbol management, and executing abstract syntax tree nodes. Works with AST structures, hash tables for labels and functions, and error objects to generate stack traces. Used to run code snippets, inject variables during execution, and manage runtime environments in both interactive and batch modes.",
      "description_length": 390,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Baguette_sharp.Levenshtein",
      "description": "Calculates the minimum edit distance between two strings using dynamic programming and a fast implementation of the Wagner-Fischer algorithm. Operates on strings and returns integer distances or selects the word with the smallest distance from a list. Useful for spell checking or text normalization tasks.",
      "description_length": 306,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Lexer",
      "description": "Processes strings to generate token lists using character or word-based lexing. Handles token recognition, keyword detection, type inference, and syntax validation including parenthesis and quote consistency. Supports automatic correction of mismatched parentheses and extracts tokens with associated types.",
      "description_length": 307,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Math",
      "description": "Converts parameters to floats, handles arithmetic operations on parameter lists, and computes mathematical functions like Fibonacci, square roots, and logarithms. Works with parameter lists and individual parameters, supporting both numeric and control flow operations. Processes inputs to generate results such as sums, products, random integers, and trigonometric-like transformations.",
      "description_length": 387,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Naive",
      "description": "Reads a file and returns its contents as a list of strings. Processes two strings to compute an integer result based on a simple comparison algorithm. Used to analyze text files by comparing line pairs for similarity scores.",
      "description_length": 224,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Parser",
      "description": "Provides functions to parse and extract structured data from raw string inputs, including tokenization and syntax validation. Works with strings and custom grammar definitions to transform input into abstract syntax tree nodes. Used to process configuration files and command-line arguments with defined syntax rules.",
      "description_length": 317,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Baguette_sharp.String_manipulation",
      "description": "Extracts and transforms string parameters using functions that handle argument lists, perform concatenation, replacement, and splitting. Operates on strings, lists of characters, and parsed parameters. Enables string manipulation tasks such as creating repeated strings, replacing substrings, and converting between data types.",
      "description_length": 327,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Token",
      "description": "Converts strings to tokens and vice versa, extracting literal values and formatting tokens for output. Operates on a custom token_type representing lexical elements. Used to process and display tokenized input in a parser or interpreter.",
      "description_length": 237,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Transpiler",
      "description": "Transpiler converts source code from one language to another by taking the input language and target language as parameters, then returns the translated code along with a status code. It processes abstract syntax trees and emits equivalent code in the target language. It is used to generate JavaScript from OCaml or Python from C.",
      "description_length": 331,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Utils",
      "description": "Provides functions to read and parse files, execute lines of code, and manage hash tables. Works with strings, lists, and hash tables to support file operations, runtime execution, and autocompletion. Used to load and process input files, display help information, and combine configuration data from multiple sources.",
      "description_length": 318,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "baguette_sharp",
      "description": "Processes command-line input using linenoise, formats output with fmt, and executes shell commands through a custom REPL interface. It handles string manipulation, input parsing, and binary installation workflows. Integrates with system binaries to enable interactive scripting and command execution.",
      "description_length": 300,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Baguette_sharp",
      "description": "Manages array and matrix operations, string manipulation, and file system interactions, while supporting parsing, tokenization, and code execution. Processes parameters, strings, and ASTs, enabling tasks like edit distance calculation, conditional logic, and code transpilation. Provides tools for dynamic data structure modification, file path management, and lexical analysis. Supports spell checking, configuration parsing, and runtime environment setup with functions for substitution, comparison, and transformation.",
      "description_length": 521,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 16,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 521,
    "min_description_length": 224,
    "avg_description_length": 329.5,
    "embedding_file_size_mb": 0.05853080749511719
  }
}