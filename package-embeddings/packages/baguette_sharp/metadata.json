{
  "package": "baguette_sharp",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 14,
  "creation_timestamp": "2025-08-14T23:20:13.517616",
  "modules": [
    {
      "module_path": "Baguette_sharp.Utils",
      "library": "baguette_sharp",
      "description": "This module handles file parsing, execution, and runtime management for a custom language interpreter. It provides functions to read and process files or individual lines, supporting verbose and lexer options, and maintains global state via hash tables. Typical use cases include loading and executing script files, parsing interactive commands, and managing runtime parameters during interpretation.",
      "description_length": 400,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Baguette_sharp.Lexer",
      "library": "baguette_sharp",
      "description": "This module implements a lexer that processes input strings into token lists, supporting both character-by-character and word-by-word tokenization. It includes functions for token validation, type inference, keyword recognition, and parenthesis balancing, operating directly on strings and token lists. Concrete use cases include parsing source code for a custom language, correcting mismatched parentheses in user input, and identifying keywords or string literals during lexical analysis.",
      "description_length": 490,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Conditions",
      "library": "baguette_sharp",
      "description": "This module implements logical and comparison operations for parsing and evaluating conditions in a parameterized expression system. It works directly with lists of parameters and supports concrete operations like equality checks, numeric comparisons, and boolean logic (AND, OR, XOR, NOT). These functions are used to build and evaluate conditional expressions in a parser context.",
      "description_length": 382,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Transpiler",
      "library": "baguette_sharp",
      "description": "Implements a transpiler that converts input strings into output strings using a specified transformation rule. Operates on basic string data types and applies concrete transformation logic based on the provided parameters. Useful for tasks like code generation, text rewriting, or converting between markup formats.",
      "description_length": 315,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Math",
      "library": "baguette_sharp",
      "description": "This module converts parser parameters to floats and performs arithmetic operations like addition, multiplication, subtraction, division, exponentiation, and logarithms. It supports list-based input for operations such as sum, product, and random integer generation within a range. Specific functions include iterative Fibonacci calculation, square root computation, and float transformations for further numerical processing.",
      "description_length": 426,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Filemanager",
      "library": "baguette_sharp",
      "description": "This module handles file and directory operations for managing library paths and structures. It provides functions to create directories, initialize files, and construct paths relative to a library directory, using system-specific separators. Concrete use cases include setting up library directories, generating file paths for library resources, and installing files with timestamped names.",
      "description_length": 391,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Token",
      "library": "baguette_sharp",
      "description": "This module defines a set of token types used to represent lexical elements in a structured format, including parentheses, keywords, literals, and delimiters. It provides functions to convert tokens to and from strings, pretty-print tokens, and identify recognized tokens. It is used to support lexical analysis of structured data or configuration formats.",
      "description_length": 356,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.String_manipulation",
      "library": "baguette_sharp",
      "description": "This module handles string transformations and manipulations, including concatenation, splitting, replacing substrings, and accessing specific characters. It operates on strings and lists of parameters, converting between string representations and other data types like integers, floats, and booleans. Concrete use cases include building repeated strings, parsing and modifying text input, and converting values to and from string format for processing or output.",
      "description_length": 464,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Baguette_sharp.Levenshtein",
      "library": "baguette_sharp",
      "description": "Implements Levenshtein distance calculations between strings with both basic and optimized algorithms. Provides functions to compute the minimal edit distance between two strings, select the closest string from a predefined list based on edit distance, and retrieve a list of available functions. Useful for spell checking, string matching, and natural language processing tasks where similarity between text inputs is required.",
      "description_length": 428,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Naive",
      "library": "baguette_sharp",
      "description": "Reads a file into a list of strings and compares two strings by their lengths. Works with basic string and list types. Useful for loading text files and performing simple string analysis.",
      "description_length": 187,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Interpreter",
      "library": "baguette_sharp",
      "description": "This module interprets parsed B# code by executing abstract syntax trees and managing runtime state using hash tables. It handles function calls, label definitions, and error reporting with stack traces during execution. Use it to run B# scripts or evaluate expressions in a REPL environment.",
      "description_length": 292,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Functions",
      "library": "baguette_sharp",
      "description": "This module manages function execution and command dispatching using a hash table for variable storage and a stack for result handling. It provides operations for printing, reading input, defining and accessing variables, and replacing string patterns within loops. These functions are used to interpret and execute a domain-specific language with support for variable assignment, string manipulation, and control flow.",
      "description_length": 419,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Baguette_sharp.Array_manipulation",
      "library": "baguette_sharp",
      "description": "This module implements array and matrix creation, element access, replacement, and display operations. It works with arrays and matrices of `Parser.parameters` type, supporting dynamic population and indexing. Concrete use cases include building fixed-size arrays and matrices, accessing or modifying elements by index, and converting arrays to string representations.",
      "description_length": 368,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Baguette_sharp",
      "library": "baguette_sharp",
      "description": "This module implements core functionalities for array and matrix manipulation, condition evaluation, file management, function execution, B# code interpretation, string distance calculation, lexical analysis, and mathematical operations. It works with arrays, matrices, parameter lists, files, strings, and abstract syntax trees, providing concrete operations like dynamic array population, logical comparisons, directory creation, variable handling, runtime execution, tokenization, and numerical computations. Use it to build and process structured data, evaluate expressions, manage file systems, interpret scripts, and perform string and mathematical operations in a domain-specific language context.",
      "description_length": 704,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 20,
    "meaningful_modules": 14,
    "filtered_empty_modules": 6,
    "retention_rate": 0.7
  },
  "statistics": {
    "max_description_length": 704,
    "min_description_length": 187,
    "avg_description_length": 401.57142857142856,
    "embedding_file_size_mb": 0.20335865020751953
  }
}