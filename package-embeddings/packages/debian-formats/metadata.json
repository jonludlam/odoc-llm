{
  "package": "debian-formats",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-06-18T16:31:02.244079",
  "modules": [
    {
      "module_path": "DebianFormats.Version",
      "description": "Parses version strings to extract the upstream identifier and remove epoch prefixes. Determines if a version is native by checking its format. Used to normalize and classify package versions in build systems.",
      "description_length": 208,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "DebianFormats.Release",
      "description": "Parses an input stream into a structured release representation containing version, date, and changelog entries. Works with a record type that includes strings for version and date, and a list of changelog items. Used to process and validate release notes from text files during deployment workflows.",
      "description_length": 300,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "DebianFormats.Source",
      "description": "Parses Debian source package metadata from strings, extracting names, architectures, versions, and binary relationships. Processes checksums, configuration fields, and logical conjunctions, returning structured data with file metadata and checksums. Used to analyze and validate Debian Sources files, extracting detailed information about package components and their integrity.",
      "description_length": 378,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "DebianFormats.Binary",
      "description": "Provides functions to parse structured data from strings, including package names, version constraints, logical expressions, and package fields. Works with strings, tuples, lists, and a custom record type representing package metadata. Parses Debian Packages files, extracting fields like names, versions, and dependencies for package management tasks.",
      "description_length": 352,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "DebianFormats.Control",
      "description": "Provides functions to parse and process control file data, including extracting package names, version information, and essential flags. Operates on strings, lists, and custom record types representing source and binary sections. Used to read and structure Debian control files from input streams or default templates.",
      "description_length": 318,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "DebianFormats.URI",
      "description": "Generates source URLs based on distribution, section, and component, using a specified mirror and filename. Constructs pool filenames by combining a source, a mirror, and a target filename. Operates on strings, mirrors, distributions, and sections to build and manipulate package retrieval paths.",
      "description_length": 296,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "debian-formats",
      "description": "Parses Debian changelog files, source control files, and binary control files into structured data. Extracts version numbers, package names, and dependency lists from text-based configurations. Enables automated processing of package metadata in build and deployment workflows.",
      "description_length": 277,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "DebianFormats",
      "description": "Processes and structures Debian package data from various sources, including version strings, release notes, metadata, control files, and URLs. Handles version normalization, release parsing, metadata extraction, and URL generation using custom record types, strings, and structured data. Enables tasks like validating package integrity, analyzing release history, and constructing package retrieval paths. Supports workflows in package management, deployment, and build systems by transforming unstructured text into actionable data.",
      "description_length": 534,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "DFWatch",
      "description": "Parses input streams into lists of strings, extracting structured data from raw input. It processes character sequences and splits them based on defined delimiters. Used to convert log files into actionable event lists for real-time monitoring systems.",
      "description_length": 252,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "DFChangelog",
      "description": "Provides functions to read and parse changelog entries from input, convert entries to strings, and generate default entries. Works with the `entry` type, which includes fields for version, date, and changes. Used to extract the latest entry from a file or generate a baseline changelog structure.",
      "description_length": 296,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 10,
    "filtered_empty_modules": 2,
    "retention_rate": 0.8333333333333334
  },
  "statistics": {
    "max_description_length": 534,
    "min_description_length": 208,
    "avg_description_length": 321.1,
    "embedding_file_size_mb": 0.03676128387451172
  }
}