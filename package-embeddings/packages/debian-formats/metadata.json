{
  "package": "debian-formats",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 9,
  "creation_timestamp": "2025-08-14T23:06:49.526421",
  "modules": [
    {
      "module_path": "DebianFormats.URI",
      "library": "debian-formats",
      "description": "This module handles the construction and manipulation of URIs for Debian package sources and binary pools. It provides functions to generate source list entries and binary package paths based on distribution, component, and architecture. Concrete use cases include building URLs for Debian repositories and organizing package files within a mirrored repository structure.",
      "description_length": 371,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "DebianFormats.Source",
      "library": "debian-formats",
      "description": "This module parses Debian source package metadata into structured data, handling fields like source name, version, binary packages, build dependencies, and checksums. It processes input from Debian `Sources` files, extracting and validating architecture-specific and independent dependencies, conflicts, and file hashes. Concrete use cases include reading package information for build systems, dependency resolution, and package verification in Debian-based distributions.",
      "description_length": 473,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "DebianFormats.Release",
      "library": "debian-formats",
      "description": "This module defines a data structure for parsing and representing Debian release metadata, including fields like origin, suite, version, and checksums. It provides a `parse` function to read this structured data from an input source, specifically handling MD5, SHA1, and SHA256 checksum lists with file sizes and names. It is used to process `Release` files in Debian repositories, enabling validation and metadata extraction for package management workflows.",
      "description_length": 459,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "DebianFormats.Binary",
      "library": "debian-formats",
      "description": "This module parses Debian binary package metadata from control files, handling fields like dependencies, conflicts, and provides. It processes data into structured types such as package names, versioned dependencies, and extended attributes. Use it to read and analyze Debian Packages files, extracting structured package information from raw input streams.",
      "description_length": 357,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "DebianFormats.Version",
      "library": "debian-formats",
      "description": "This module processes version strings according to Debian packaging conventions. It provides functions to strip epoch prefixes, extract upstream version components, and determine whether a version represents a native Debian package. These operations are essential for version comparison and package management tasks in Debian-based systems.",
      "description_length": 340,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "DebianFormats.Control",
      "library": "debian-formats",
      "description": "This module defines data structures for parsing and representing Debian control files, including source and binary package metadata. It provides functions to parse fields such as package names, version constraints, dependencies, and build relationships from strings or input streams. Concrete use cases include reading and validating Debian source control (.dsc) files and constructing package control information for binary packages.",
      "description_length": 434,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "DFWatch",
      "library": "debian-formats",
      "description": "Parses input from a file or stream into a list of strings, splitting by lines. Works with any `IO.input` source such as files or network streams. Useful for reading log files or monitoring line-based data sources in real time.",
      "description_length": 226,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "DFChangelog",
      "library": "debian-formats",
      "description": "This module handles parsing and generating changelog entries in a structured format, specifically for Debian-based package metadata. It provides operations to read changelog data from input sources, convert entries to string representations, and access predefined default values. Concrete use cases include processing Debian changelog files during package builds and generating changelog excerpts for release management.",
      "description_length": 420,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "DebianFormats",
      "library": "debian-formats",
      "description": "This module processes Debian package metadata and related formats, providing structured parsing and manipulation of version strings, release files, source and binary package data, control fields, and repository URIs. It handles data types like package names, versions, checksums, and dependencies, supporting concrete tasks such as parsing `Release` files, extracting source metadata from `Sources`, analyzing binary package control data, and constructing Debian repository URLs. Use it to implement package management tools, repository mirrors, and build systems that require direct manipulation of Debian-specific metadata formats.",
      "description_length": 633,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 633,
    "min_description_length": 226,
    "avg_description_length": 412.55555555555554,
    "embedding_file_size_mb": 0.13083839416503906
  }
}