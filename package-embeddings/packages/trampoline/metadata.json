{
  "package": "trampoline",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:54:57.686067",
  "modules": [
    {
      "module_path": "Trampoline.Not_a_trampoline",
      "library": "trampoline",
      "description": "This module provides direct execution of suspended computations without trampolining, working with the same trampoline-compatible type as the main Trampoline module. It includes functions for binding, mapping, recursion, and suspension, enabling continuation-passing style while using the native call stack. Use this when targeting environments with sufficient stack size, avoiding trampoline overhead in recursive functions like tree traversals or expression evaluation.",
      "description_length": 471,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Trampoline",
      "library": "trampoline",
      "description": "This module provides two implementations for managing recursive computations. The `Trampoline` submodule handles deeply nested recursion by suspending and resuming evaluations to avoid stack overflow, working with trampolined values (`'a t`) and supporting chaining through `bind` and `map`. It is used in interpreters or JavaScript targets where deep recursion would otherwise fail. The `Not_a_trampoline` submodule offers the same interface but executes computations directly, leveraging the native call stack, making it suitable for environments with adequate stack size, such as in tree traversals or recursive expression evaluation where trampolining overhead is unnecessary.",
      "description_length": 680,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 680,
    "min_description_length": 471,
    "avg_description_length": 575.5,
    "embedding_file_size_mb": 0.02943706512451172
  }
}