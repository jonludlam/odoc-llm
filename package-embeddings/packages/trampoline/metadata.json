{
  "package": "trampoline",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:54.235231",
  "modules": [
    {
      "module_path": "Trampoline.Trampoline",
      "description": "Performs deferred and recursive computation sequencing using a trampoline pattern. Operates on a monadic type 'a t, allowing values to be suspended, chained, or recursively processed. Enables safe tail-recursive execution of nested operations, such as processing large data structures or implementing state machines.",
      "description_length": 316,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Trampoline.Not_a_trampoline",
      "description": "Performs nested computations by deferring execution through suspended operations, allowing direct stack usage instead of trampolines. Operates on a monadic type 'a t, enabling sequencing of actions with return, bind, and suspend. Used to simplify recursive function calls and manage delayed evaluations in environments where stack depth is guaranteed.",
      "description_length": 351,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "trampoline",
      "description": "Handles recursive function execution by converting tail-recursive calls into iterative loops, using a state machine to manage continuation. Operates on functions that return a `Continue` or `Stop` variant, along with associated values. Enables safe execution of deep recursion in environments with limited stack depth, such as parsing or event-driven systems.",
      "description_length": 359,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Trampoline",
      "description": "Performs deferred and recursive computations using a trampoline pattern to avoid stack overflow. It works with a monadic type 'a t, allowing values to be suspended, chained, or transformed. Use cases include implementing deep recursion, lazy evaluation, and managing stateful computations without heap allocation.",
      "description_length": 313,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 359,
    "min_description_length": 313,
    "avg_description_length": 334.75,
    "embedding_file_size_mb": 0.014941215515136719
  }
}