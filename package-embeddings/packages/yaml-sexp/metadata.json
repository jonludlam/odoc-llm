{
  "package": "yaml-sexp",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:55:31.242210",
  "modules": [
    {
      "module_path": "Yaml_sexp.Stream.Event",
      "library": "yaml-sexp",
      "description": "This module defines data structures and conversion functions for parsing and serializing YAML event streams. It handles event types like document markers, scalar values, mappings, sequences, and aliases, along with positional metadata using start and end marks. It is used to represent and manipulate YAML parsing events during streaming operations.",
      "description_length": 349,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yaml_sexp.Stream.Mark",
      "library": "yaml-sexp",
      "description": "This module defines a type `t` representing position metadata in a YAML stream, with fields for index, line, and column numbers. It provides functions to convert this position data to and from S-expressions. It is used to track and serialize parsing locations for debugging or error reporting in YAML processing.",
      "description_length": 312,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yaml_sexp.Stream",
      "library": "yaml-sexp",
      "description": "This module provides functions to parse and manipulate YAML event streams with precise positional metadata. It works with data structures representing YAML events such as documents, scalars, mappings, and aliases, each annotated with start and end marks tracking their location in the input. Concrete use cases include streaming YAML validation, error reporting with location details, and transforming YAML content incrementally.",
      "description_length": 429,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yaml_sexp",
      "library": "yaml-sexp",
      "description": "This component enables bidirectional conversion between YAML and S-expressions using custom algebraic data types (sequences, mappings, scalars) and S-expression structures. It includes utilities for translating YAML-specific constructs (versions, encoding formats) and provides a stream-based interface for precise parsing, error reporting, and incremental transformation of structured data.",
      "description_length": 391,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 429,
    "min_description_length": 312,
    "avg_description_length": 370.25,
    "embedding_file_size_mb": 0.05833244323730469
  }
}