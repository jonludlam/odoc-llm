{
  "package": "xml-light",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-07-15T23:07:01.827126",
  "modules": [
    {
      "module_path": "Xml_light_utils.StringMap",
      "library": "xml-light",
      "description": "This module provides operations for managing maps with string keys and arbitrary values, supporting key-based modifications like merging, filtering, and transformation, as well as extremal binding retrieval. It includes utilities for converting between maps and lists or sequences, enabling iteration and bulk construction, alongside comparison and search functions for key-value pairs. These features are particularly useful for handling structured data such as XML attributes, aggregating multi-valued keys, or processing hierarchical configurations where string identifiers map to complex values.",
      "description_length": 599,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xml_parser",
      "library": "xml-light",
      "description": "Parses DTD element declarations from XML input using a lexer function. It processes tokens like `OPEN`, `CLOSE`, and `IDENT` to construct DTD child elements. Useful for validating XML structure during parsing.",
      "description_length": 209,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xml_light_types",
      "library": "xml-light",
      "description": "This module defines core data structures for representing XML documents and DTD schemas, including elements, attributes, and content models. It includes recursive types for building hierarchical XML trees and DTD validation rules such as optional or repeated children. These types are used directly by XML parsing, validation, and transformation functions that require precise structural definitions.",
      "description_length": 400,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "XmlParser",
      "library": "xml-light",
      "description": "This module creates and configures XML parsers with options like DTD proving, EOF checking, and PCData concatenation. It supports parsing from files, channels, strings, and lex buffers into XML data structures. Use it to parse XML documents with custom DTD resolution, strict document-end validation, or controlled text node merging.",
      "description_length": 333,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xml_light_utils",
      "library": "xml-light",
      "description": "This module manages mutable string-indexed maps with support for creation, modification, iteration, and querying, enabling in-place updates through a reference-wrapped structure. It provides core operations like key-based transformations, filtering, and merging, along with utilities for converting maps to lists or sequences, comparing bindings, and searching for specific entries. The module is well-suited for handling XML node attributes, dynamic configuration data, and symbol tables during parsing or transformation workflows. Submodule functionality extends these capabilities with enhanced manipulation tools and structured traversal mechanisms.",
      "description_length": 653,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dtd",
      "library": "xml-light",
      "description": "This module defines data structures and operations for working with Document Type Definitions (DTDs) in XML documents. It provides functions to parse DTDs from files, strings, or input channels, validate DTD declarations, and enforce DTD constraints on XML documents. Key data types include `dtd`, `checked`, and various constructors for element and attribute types, supporting use cases like XML schema validation and DTD-based document transformation.",
      "description_length": 453,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xml_light_errors",
      "library": "xml-light",
      "description": "This module defines error types and position information for parsing and validating XML and DTD structures. It includes detailed error messages for specific parsing failures, such as unterminated strings or missing attributes, along with positional data to locate errors in the input. These types are used to report issues during XML or DTD parsing and validation, such as undeclared elements, invalid attribute values, or structural mismatches.",
      "description_length": 445,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xml_light_dtd_check",
      "library": "xml-light",
      "description": "This module validates XML DTD (Document Type Definitions) structures, ensuring correctness of element and attribute declarations. It processes `Xml_light_types.dtd` values to produce a `checked` record mapping element names to their allowed types and attributes with their default values. Use it to enforce DTD constraints during XML parsing or document validation.",
      "description_length": 365,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xml_lexer",
      "library": "xml-light",
      "description": "This module provides functions for lexing XML and DTD content, converting raw input into structured tokens such as tags, PCData, and doctype declarations. It processes input using Lexing.lexbuf and tracks position information for error reporting. Concrete use cases include parsing XML documents and validating DTD structures in XML processing pipelines.",
      "description_length": 354,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xml",
      "library": "xml-light",
      "description": "This module provides XML parsing and serialization operations, converting between XML documents and OCaml data structures. It processes input from files, strings, or channels into a tree-like structure representing elements, attributes, text nodes, and DTDs, with error handling for malformed input. The serialized output supports both compact and human-readable formats, enabling use cases like configuration file manipulation, data exchange between systems, or XML validation workflows.",
      "description_length": 488,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 653,
    "min_description_length": 209,
    "avg_description_length": 429.9,
    "embedding_file_size_mb": 0.03677654266357422
  }
}