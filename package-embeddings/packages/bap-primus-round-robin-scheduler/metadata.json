{
  "package": "bap-primus-round-robin-scheduler",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:33.627232",
  "modules": [
    {
      "module_path": "Primus_round_robin_main.RR",
      "library": "bap-plugin-primus_round_robin",
      "description": "This module implements a round-robin scheduling mechanism using a stateful machine. It provides operations to initialize the scheduler, execute a single step of a job, and finalize the process after completion. It works with a generic job type `'a` and manages their sequential execution in a round-robin fashion.",
      "description_length": 313,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Primus_round_robin_main.Config",
      "library": "bap-plugin-primus_round_robin",
      "description": "The module provides operations for defining and managing typed configuration parameters, including command-line parsing, value conversion between strings and structured types (e.g., integers, floats, enums, lists), and documentation via manpage blocks. It utilizes a reader interface to retrieve parameter values with support for deprecation notices, default values, and future-determined values, enabling use cases such as configuring round-robin systems with structured configuration files or command-line interfaces that require flexible parsing and backward compatibility.",
      "description_length": 576,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Primus_round_robin_main",
      "library": "bap-plugin-primus_round_robin",
      "description": "This module orchestrates round-robin task execution using a stateful scheduler that steps through jobs in sequence, maintaining a queue of pending tasks and a set of completed ones. It supports structured configuration through a parameter system that handles typed values, command-line parsing, and deprecation, enabling flexible setup of scheduling behavior. Logging at multiple severity levels and progress reporting with task metadata allow detailed tracking of execution state. Example usage includes running interleaved computations with configurable step limits, logging progress to a file, or adjusting scheduler behavior via command-line flags and structured config files.",
      "description_length": 680,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 680,
    "min_description_length": 313,
    "avg_description_length": 523.0,
    "embedding_file_size_mb": 0.011327743530273438
  }
}