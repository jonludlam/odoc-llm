{
  "package": "bech32",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:56:02.126468",
  "modules": [
    {
      "module_path": "Bech32.Segwit.Btc",
      "library": "bech32",
      "description": "This module defines constants and types for Bitcoin's SegWit protocol, specifically implementing the `t` type with a single constructor `Btc`. It provides the `version` boolean indicating SegWit version and the `prefix` string used for Bitcoin addresses. Concrete use cases include encoding and validating Bitcoin Bech32 addresses according to BIP-0173.",
      "description_length": 353,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bech32.Segwit.Zil",
      "library": "bech32",
      "description": "This module defines a specific Bech32 encoding variant used for Zilliard (ZIL) addresses. It includes a unique type `t` representing the ZIL encoding, a version flag indicating the encoding version, and a prefix string used in address formatting. It is used to generate and validate ZIL cryptocurrency addresses according to the Bech32 standard.",
      "description_length": 345,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bech32.Segwit.Tbtc",
      "library": "bech32",
      "description": "This module defines the specific parameters and constants for the TBTC SegWit address format. It includes the version flag and the human-readable prefix used in TBTC Bech32 addresses. It is used to generate and validate TBTC SegWit addresses in a blockchain context.",
      "description_length": 266,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bech32.Segwit",
      "library": "bech32",
      "description": "This module implements Bech32 encoding and decoding logic for SegWit-based cryptocurrency addresses. It operates on a polymorphic `t` type parameterized by network implementations, each defining a version and prefix, and supports concrete networks like Bitcoin (Btc), TBTC (Tbtc), and Zilliqa (Zil). Key operations include `encode`/`decode` for address conversion, `create` for constructing address values, and `scriptPubKey` for extracting script representations, used directly in blockchain validation and wallet systems.",
      "description_length": 523,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bech32",
      "library": "bech32",
      "description": "This module implements Bech32 encoding and decoding for binary data, operating on strings and supporting conversion between different bit lengths with optional padding. It provides direct functions for encoding and decoding Bech32 strings, commonly used in cryptocurrency address formats. Concrete use cases include generating and validating Bech32-encoded addresses in blockchain protocols like Bitcoin SegWit.",
      "description_length": 411,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 523,
    "min_description_length": 266,
    "avg_description_length": 379.6,
    "embedding_file_size_mb": 0.07284069061279297
  }
}