{
  "package": "bech32",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:27:19.086554",
  "modules": [
    {
      "module_path": "Bech32.Segwit.Btc",
      "description": "Provides operations to check if a value is a Bitcoin transaction, retrieve its version flag, and access its network prefix string. Works with the `t` type, which represents Bitcoin transaction data. Used to validate transaction structure and determine network origin during protocol handling.",
      "description_length": 292,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bech32.Segwit.Tbtc",
      "description": "Provides operations to access a static value `t`, check a version flag `version`, and retrieve a string prefix `prefix`. Works with a custom type `t` that represents a specific internal state. Used to configure and query system parameters in protocol-specific contexts.",
      "description_length": 269,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bech32.Segwit.Zil",
      "description": "Provides functions to access a configuration value, check version status, and retrieve a string prefix. Works with a custom type representing configuration state and a boolean flag. Used to validate environment settings and construct prefixed identifiers during system initialization.",
      "description_length": 284,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bech32.Segwit",
      "description": "Provides operations to inspect and manipulate Segwit data, including checking the version flag and extracting the prefix string. Works with the `t` type, which represents Segwit-encoded data. Used to validate and parse Segwit addresses in blockchain transactions.",
      "description_length": 263,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "bech32",
      "description": "Encodes and decodes data using the Bech32 encoding scheme, handling base32-like transformations with checksums. It operates on byte sequences and strings, ensuring valid character sets and error detection. Used for processing Bitcoin addresses and similar cryptographic identifiers.",
      "description_length": 282,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bech32",
      "description": "Encodes and decodes Segwit data using the `t` type, enabling validation and parsing of blockchain addresses. It allows extraction of prefix strings and inspection of version flags to ensure proper address formatting. Operations include checking the validity of encoded data and transforming between raw and encoded representations. This supports tasks like verifying address structure or preparing data for transaction processing.",
      "description_length": 430,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 430,
    "min_description_length": 263,
    "avg_description_length": 303.3333333333333,
    "embedding_file_size_mb": 0.022220611572265625
  }
}