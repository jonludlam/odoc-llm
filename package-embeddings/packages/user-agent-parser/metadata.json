{
  "package": "user-agent-parser",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:10.505907",
  "modules": [
    {
      "module_path": "User_agent_parser.UAParser",
      "library": "user-agent-parser",
      "description": "This module parses user agent strings into structured version information. It initializes a parser instance and processes user agent strings to extract browser or operating system family names along with major, minor, and patch version numbers. Use it to analyze HTTP user agent headers for client identification in web services or analytics.",
      "description_length": 342,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "User_agent_parser.OSParser",
      "library": "user-agent-parser",
      "description": "Parses operating system information from user agent strings into structured data. It provides functions to initialize a parser, execute parsing, and compare or display results. Each result contains the OS family and optional version components (major, minor, patch, patch_minor). Useful for extracting OS details from HTTP user agent headers in web analytics or logging systems.",
      "description_length": 378,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "User_agent_parser.DeviceParser",
      "library": "user-agent-parser",
      "description": "This module parses device information from user agent strings, extracting the device family, brand, and model. It provides functions to initialize a parser, parse a user agent string into a result, and compare, print, or convert result values. Use it to identify mobile devices, tablets, or desktop computers from HTTP user agent headers.",
      "description_length": 338,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "User_agent_parser",
      "library": "user-agent-parser",
      "description": "This module processes user agent strings into structured data, extracting browser, operating system, and device details. It provides core functions to parse raw user agent strings and produce records containing browser family and version, OS platform with version breakdown, and device type with brand and model. You can use it to analyze HTTP user agent headers for client identification, logging, or analytics, with submodules focusing on version parsing, OS extraction, and device detection. For example, you can determine if a request came from an iPhone running iOS 16 or a Chrome browser on Android.",
      "description_length": 605,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 605,
    "min_description_length": 338,
    "avg_description_length": 415.75,
    "embedding_file_size_mb": 0.014931678771972656
  }
}