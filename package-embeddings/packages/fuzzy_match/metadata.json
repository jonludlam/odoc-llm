{
  "package": "fuzzy_match",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:51:07.163304",
  "modules": [
    {
      "module_path": "Fuzzy_search.For_testing",
      "library": "fuzzy_match.search",
      "description": "Performs substring matching to locate the start and end indices of a query within a given string. Returns an optional tuple indicating the range if a match exists. Useful for validating search results or highlighting matched portions in test scenarios.",
      "description_length": 252,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fuzzy_search.Query",
      "library": "fuzzy_match.search",
      "description": "Represents a parsed fuzzy search query with pattern matching capabilities. It provides a way to construct and manipulate search patterns from strings for fuzzy matching against target sequences. Useful in scenarios like auto-complete suggestions or approximate string matching in text editors.",
      "description_length": 293,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fuzzy_search",
      "library": "fuzzy_match.search",
      "description": "This module implements fuzzy search functionality using parsed query patterns to match and score strings. It provides operations for scoring matches, extracting indices of matching sections, splitting strings into matching and non-matching parts, and filtering and sorting lists of strings based on fuzzy match quality. The module works directly with strings and arrays of indices, supporting use cases like interactive filtering in command-line interfaces, auto-complete features, and text highlighting in editors.",
      "description_length": 515,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fuzzy_match",
      "library": "fuzzy_match.match",
      "description": "Performs fuzzy matching of a pattern against a string using a customizable character equality function. Works with strings and supports case-sensitive or case-insensitive comparisons based on the provided function. Useful for implementing search features where partial or approximate matches are acceptable, such as auto-complete suggestions or error-tolerant input parsing.",
      "description_length": 374,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 515,
    "min_description_length": 252,
    "avg_description_length": 358.5,
    "embedding_file_size_mb": 0.05838489532470703
  }
}