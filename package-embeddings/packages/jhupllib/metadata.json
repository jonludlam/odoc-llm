{
  "package": "jhupllib",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 45,
  "creation_timestamp": "2025-07-15T23:14:37.594470",
  "modules": [
    {
      "module_path": "Jhupllib.Multimap_pp.Make",
      "library": "jhupllib",
      "description": "This module provides functions to format and convert multimap data structures into strings, using specified key and value pretty-printing modules. It works with any multimap type `M.t` where keys and values can be rendered using `K_pp` and `V_pp`. Use this to generate human-readable representations of multimaps for debugging or logging.",
      "description_length": 338,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Yojson_utils.Map_to_yojson",
      "library": "jhupllib",
      "description": "This module provides a `to_yojson` function that serializes a map into a Yojson representation using a provided value serialization function. It operates on map structures from a functorized map module and is useful for converting structured data into JSON format for storage or transmission. A concrete use case is transforming configuration data stored in a map into a JSON object for logging or API responses.",
      "description_length": 412,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Yojson_utils.Set_to_yojson",
      "library": "jhupllib",
      "description": "This module provides a `to_yojson` function that serializes a set structure into a Yojson representation. It works with functorized set modules and their associated element types, converting them into a JSON-safe format. A concrete use case is enabling easy JSON serialization of custom set types for data interchange or storage.",
      "description_length": 329,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Multimap.Multimap_sig",
      "library": "jhupllib",
      "description": "This module provides operations to manage a multimap where each key maps to multiple values, supporting additions, deletions, lookups, and iteration over key-value pairs. It structures data as `t`, with keys associated to value collections represented by `S.t`, and includes utilities for enumerating key-collection pairs, testing equality, and comparing multimap structures. It is suited for scenarios requiring grouped data management and structural validation, such as aggregating heterogeneous values by key or verifying consistency between multimap instances.",
      "description_length": 564,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Monads.MonadWithUtils",
      "library": "jhupllib",
      "description": "This module extends the core monad interface with utility functions for sequencing and mapping over enumerations. It provides operations like `sequence` and `mapM` to handle collections of monadic values, and `lift1` to apply pure functions within a monadic context. These functions are designed to work with monadic types that wrap values, supporting use cases such as processing streams of data with side effects or handling optional or asynchronous computations.",
      "description_length": 465,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jhupllib.Nondeterminism.Nondeterminism_monad",
      "library": "jhupllib",
      "description": "This module implements a non-determinism monad that supports operations like `bind`, `pure`, and `plus` to compose computations with multiple possible outcomes. It works with values wrapped in a monadic type `'a m`, enabling branching logic through functions like `pick_enum` to select from an enumeration or `zero` and `empty` to represent failure or absence of results. Concrete use cases include generating all possible combinations of choices, exploring state transitions in search algorithms, and backtracking computations where multiple paths need to be considered.",
      "description_length": 571,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Monads.Utils",
      "library": "jhupllib",
      "description": "This module provides helper functions for working with monadic values, including operations like `sequence` and `mapM` for handling enumerations of monadic actions. It builds on the core monad interface to enable composition and transformation of monadic computations over collections. Concrete use cases include processing streams of effectful operations and aggregating results from multiple monadic actions in sequence.",
      "description_length": 422,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Witness_protection.Pp_utils",
      "library": "jhupllib",
      "description": "This module provides a pretty-printing function for escorted witnesses, which are values wrapped with additional context from a witness registry. It works with the `escorted_witness` type and supports formatting these values using an existing pretty printer for their underlying data. A concrete use case is displaying simplified or labeled representations of complex values during debugging or logging, based on their registered witnesses.",
      "description_length": 440,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Witness_protection.Make",
      "library": "jhupllib",
      "description": "This module creates registries that map distinct values to unique, immutable witnesses, accelerating comparisons by using these simpler witnesses instead of the original values. It supports operations to retrieve or create witnesses for values, compare and check equality of witnesses, and look up values from witnesses. Concrete use cases include optimizing performance in data structures like sets or maps where element comparison is expensive.",
      "description_length": 446,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jhupllib.Witness_protection.Make_pp",
      "library": "jhupllib",
      "description": "This module provides a pretty-printing function for escorted witnesses, using a witness registry and a pretty-printer for the underlying values. It works with witness registries and escorted witness types produced by the registry. A concrete use case is displaying simplified or abbreviated representations of complex values via their associated witnesses.",
      "description_length": 356,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Eager_nondeterminism.Nondeterminism_monad_sig",
      "library": "jhupllib",
      "description": "This module defines a monadic interface for handling nondeterministic computations using eager evaluation, primarily backed by lists. It supports operations like `bind`, `pure`, and `plus` for composing and combining nondeterministic values, along with utilities such as `pick_enum` to select elements from an enumeration and `mapM` to map functions across nondeterministic collections. Concrete use cases include generating and manipulating finite sets of possible outcomes in search algorithms, constraint solvers, and combinatorial problem exploration without relying on lazy evaluation.",
      "description_length": 590,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Witness_protection.Registry",
      "library": "jhupllib",
      "description": "This module defines the interface for a witness registry, which maps distinct values to unique, immutable witnesses. It supports operations to create a new registry, retrieve or generate a witness for a value, and recover the original value from a witness. The module also includes functions to compare and check equality of witnesses, enabling efficient key-based lookups in data structures like maps and sets.",
      "description_length": 411,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jhupllib.Multimap.Make",
      "library": "jhupllib",
      "description": "This module provides operations to manage associations between keys and ordered sets of values, supporting additions, removals, and queries of key-value pairs. It works with a multimap structure where keys map to `S.t` sets of values, leveraging key and value orderings to enable ordered traversal, comparison, and conversion to enumerations. Use cases include grouping entries by keys, comparing multimaps with ordered elements, or transforming between multimap and enumeration representations for processing.",
      "description_length": 510,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Pp_utils.Set_pp",
      "library": "jhupllib",
      "description": "This module generates a pretty printer for a functorized set module, providing `pp` and `show` functions to format and convert set values to strings. It works with set types produced by a functorized set module and uses a pretty-printing module to customize output formatting. A concrete use case is displaying elements of a set module like `Set.Make(String)` with custom delimiters and formatting rules.",
      "description_length": 404,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Multimap_to_yojson.Make",
      "library": "jhupllib",
      "description": "This module converts a multimap into a JSON representation, where each key maps to a list of values. It operates on a multimap data structure, using specified JSON serialization modules for keys and values. A concrete use case is serializing a multimap of configuration settings, where each key corresponds to multiple string values, into a structured JSON format for storage or transmission.",
      "description_length": 392,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Monads.MakeUtils",
      "library": "jhupllib",
      "description": "This module provides monadic operations including binding, returning values, sequencing monadic enumerations, and mapping functions over enumerations. It works with monadic types defined by the parameter module and Batteries enumerations. Concrete use cases include composing computations that produce enumerations within a monadic context and transforming values inside monadic wrappers.",
      "description_length": 388,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Witness_protection.Spec",
      "library": "jhupllib",
      "description": "This module type defines the interface for creating a witness registry by specifying a type `t` and a comparison function `compare`. It works with arbitrary types that can be mapped to unique witness values, using the provided comparison to ensure distinctness. Concrete use cases include optimizing data structures like sets or maps where key comparison is expensive, by using lightweight witnesses instead of original values.",
      "description_length": 427,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Pp_utils.Pp",
      "library": "jhupllib",
      "description": "This module defines a pretty-printing interface with a type `t` and a `pp` function that formats values of type `t` as strings. It works with custom data types that require structured, human-readable output. Concrete use cases include logging complex data structures, generating error messages, and formatting output for user interfaces or configuration files.",
      "description_length": 360,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Monads.MonadPlusWithUtils",
      "library": "jhupllib",
      "description": "This module extends the base monad interface with additional utility functions for handling optional and alternative computations. It introduces operations like `zero` and `plus` to represent failure and combination of monadic values, enabling backtracking and choice-based logic. These capabilities are particularly useful for parsing, search algorithms, and handling computations that may have multiple or no valid outcomes.",
      "description_length": 426,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Monads.Monad",
      "library": "jhupllib",
      "description": "This module defines the core operations `pure` and `bind` for working with monadic structures. It provides the foundational interface for monads, enabling sequencing of computations that carry context, such as error handling or state. Concrete use cases include chaining operations that return optional values, managing state transformations, or handling asynchronous effects.",
      "description_length": 376,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Witness_protection.Make_to_yojson",
      "library": "jhupllib",
      "description": "This module provides a function to convert escorted witnesses into JSON representations, using a provided JSON encoder for the underlying values. It operates on witness values from the `R` module, leveraging the `Y` module's encoding capabilities. This is useful for serializing witness-based data structures into JSON without exposing the internal complexity of the original values.",
      "description_length": 383,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Uids.Uid_module",
      "library": "jhupllib",
      "description": "This module defines a type `t` for unique identifiers (UIDs) and a `context` type that manages UID generation state. It provides operations to create fresh UIDs, compare and check equality of UIDs, and convert UIDs to strings or pretty-print them. Use cases include generating unique tokens for program entities, tracking distinct instances in a system, or ensuring identifier uniqueness across different scopes using separate contexts.",
      "description_length": 436,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Nondeterminism.Nondeterminism_monad_sig",
      "library": "jhupllib",
      "description": "This module defines a non-determinism monad with operations to compose and manipulate non-deterministic computations. It supports values wrapped in a monadic type `'a m`, allowing for branching logic through `zero` and `plus`, and provides utilities like `pick_enum` to select elements non-deterministically from an enumeration. Concrete use cases include generating all possible outcomes of a computation, modeling search spaces, and implementing backtracking algorithms over enumerated choices.",
      "description_length": 496,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Uids.Make",
      "library": "jhupllib",
      "description": "This module generates unique identifiers (UIDs) with optional contextual isolation. It provides functions to create fresh UIDs, compare and check equality of existing UIDs, and convert UIDs to strings or print them. Use cases include generating temporary variable names, tracking distinct entities in a system, or ensuring uniqueness in data structures like ASTs or stateful computations.",
      "description_length": 388,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Monads.MonadPlus",
      "library": "jhupllib",
      "description": "This module extends the monad interface with operations for combining and filtering values, specifically providing `zero` for representing failure and `plus` for combining alternatives. It works with monadic types that support choice and empty values, enabling backtracking and search strategies. Concrete use cases include parsing with multiple possible outcomes and handling optional or alternative data flows.",
      "description_length": 412,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Witness_protection.Make_escorted",
      "library": "jhupllib",
      "description": "This module creates registries that manage values alongside unique witnesses, using a provided comparable type. It supports efficient comparison acceleration by mapping distinct values to distinct witnesses, with operations to retrieve and compare witnesses directly. Concrete use cases include optimizing key comparisons in data structures like dictionaries or sets when the original values are expensive to compare.",
      "description_length": 417,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Pp_utils.Map_pp",
      "library": "jhupllib",
      "description": "Generates pretty-printing functions for map modules, converting map contents into readable string representations. Works with functorized map structures and custom value pretty printers. Useful for debugging or logging structured data in a human-readable format.",
      "description_length": 262,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Witness_protection.To_yojson_utils",
      "library": "jhupllib",
      "description": "This module defines a type `escorted_witness` and provides the function `escorted_witness_to_yojson` for converting escorted witnesses to JSON representations. It works with witness values that carry additional data requiring JSON serialization. A concrete use case is exporting witness-based data structures to JSON for logging, debugging, or external communication.",
      "description_length": 367,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Eager_nondeterminism.Nondeterminism_monad",
      "library": "jhupllib",
      "description": "This module implements an eager nondeterminism monad using non-lazy structures, primarily lists, to represent multiple possible results. It provides core monadic operations like `bind`, `pure`, and `plus`, along with utilities for converting between enumerations and nondeterministic values, such as `pick_enum` and `enum`. Concrete use cases include generating and composing finite sets of possible outcomes in a straightforward, stack-safe manner under heavy computational load.",
      "description_length": 480,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Witness_protection.Escorted_registry",
      "library": "jhupllib",
      "description": "This module implements a registry that pairs values with unique witnesses for efficient comparison and retrieval, where each witness is bundled with its registry in an escorted structure. It supports operations to create registries, map values to witnesses, recover original values, and compare or share escorted witnesses. Concrete use cases include optimizing key comparisons in data structures like sets or maps when working with expensive-to-compare values such as abstract syntax trees or large records.",
      "description_length": 508,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Yojson_utils.To_yojson_type",
      "library": "jhupllib",
      "description": "This module defines the interface for types that can be serialized to Yojson. It includes the type `t` and a function `to_yojson` that converts values of this type into `Yojson.Safe.t` representations. It is used when implementing custom serializers for data structures that need to be converted to JSON format.",
      "description_length": 311,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jhupllib.Multimap",
      "library": "jhupllib",
      "description": "This module implements a multimap structure where each key maps to a collection of values, enabling operations to add, remove, and retrieve value groups, as well as iterate over keys, values, or bindings. It defines the core data type `t` with keys associated to value collections of type `S.t`, supporting concrete tasks like grouping log entries by user ID, aggregating search results by category, or managing configuration data with repeated keys. The child modules enhance this functionality by adding structural validation, ordered traversal, and enumeration conversion capabilities, enabling use cases such as verifying multimap consistency, comparing multimaps with ordered elements, or transforming between multimap and enumeration formats. Together, they provide a comprehensive interface for managing and manipulating grouped data efficiently and predictably.",
      "description_length": 869,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Witness_protection",
      "library": "jhupllib",
      "description": "This module enables efficient comparison of complex values by mapping them to unique, immutable witnesses that can be used as lightweight keys in data structures. It provides operations to create registries, generate witnesses for values, and compare or retrieve original values from their witnesses, with support for arbitrary types and custom comparison functions. Submodules extend this functionality with pretty-printing, JSON serialization, and escorted witness types that bundle witnesses with registry context, enabling use cases like optimized dictionaries, debug-friendly representations, and serialized exports of witness-based structures. For example, large custom objects can be compared by witness identity instead of value, improving performance in maps or sets, while submodules allow logging simplified views or exporting data to JSON without exposing internal complexity.",
      "description_length": 888,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jhupllib.Yojson_utils",
      "library": "jhupllib",
      "description": "This module provides functions to serialize lists, sets, and maps into Yojson representations, enabling type-safe JSON encoding of structured data. It includes direct support for standard collections and allows custom data types to implement the `to_yojson` interface for seamless integration. For example, maps can be converted into JSON objects using a functorized `to_yojson` function, while sets are transformed into JSON arrays preserving element uniqueness. These utilities facilitate tasks like generating API responses or persisting configuration data in JSON format.",
      "description_length": 575,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jhupllib.Utils",
      "library": "jhupllib",
      "description": "This module includes functions for comparing sequences, removing duplicates from enumerations, generating Cartesian products of lists, folding over pairs in an enumeration, and writing strings to files. It works with enumerations, lists, and file paths. Concrete uses include processing combinatorial inputs, deduplicating streams of data, analyzing adjacent elements in sequences, and persisting string data to disk.",
      "description_length": 417,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Multimap_pp",
      "library": "jhupllib",
      "description": "This module converts multimaps into readable string formats by leveraging key and value pretty-printing modules. It supports any multimap type `M.t`, rendering keys and values through `K_pp` and `V_pp` for customizable output. Functions allow transforming multimaps into strings, ideal for debugging or logging structured data. For example, a multimap binding integers to lists of strings can be printed with keys in hexadecimal and values joined by commas.",
      "description_length": 457,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Logger_utils",
      "library": "jhupllib",
      "description": "This module provides functions for configuring and generating loggers with specific severity levels, supporting dynamic log level adjustments per component. It works with string identifiers and lazy-evaluated log messages to control output verbosity. Concrete use cases include scoped logging in applications, wrapping function calls with entry/exit logs, and suppressing verbose logs in production via level filtering.",
      "description_length": 419,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Multimap_to_yojson",
      "library": "jhupllib",
      "description": "This module serializes a multimap into a structured JSON format, where each key maps to an array of values. It requires JSON serialization modules for both keys and values, enabling type-safe conversion of complex multimaps, such as those holding configuration settings with multiple values per key. For example, a multimap binding string keys to lists of string values can be converted into a JSON object with string keys and array values. This supports use cases like exporting application configurations to JSON for storage or API transmission.",
      "description_length": 547,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Eager_nondeterminism",
      "library": "jhupllib",
      "description": "This module implements an eager nondeterminism monad using lists to represent computations with multiple outcomes, ensuring deterministic evaluation order and stack safety under heavy load. It provides core operations like `bind`, `pure`, and `plus` for composing nondeterministic computations, along with utilities such as `pick_enum` for selecting from finite enumerations and `mapM` for mapping functions over nondeterministic values. The module supports generating, combining, and transforming finite sets of results, making it suitable for search algorithms, constraint solving, and combinatorial exploration where immediate evaluation of all possibilities is required. Submodules extend these capabilities with additional conversions between enumerations and nondeterministic structures while maintaining the efficiency and simplicity of eager evaluation.",
      "description_length": 861,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Monads",
      "library": "jhupllib",
      "description": "This module defines the foundational monadic interfaces `Monad` and `MonadPlus`, along with utility-enhanced variants, enabling structured computation over contexts like optionality, effects, and sequencing. It provides core operations such as `bind`, `return`, `map`, `plus`, and `zero`, which allow chaining, transforming, and combining monadic values. Submodules extend these capabilities with functions like `mapM`, `sequence`, and `lift1` for working with enumerations and applying pure functions within monadic contexts. Together, they support concrete tasks such as processing effectful streams, handling optional data flows, and implementing backtracking logic in parsing or search algorithms.",
      "description_length": 701,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Pp_utils",
      "library": "jhupllib",
      "description": "This module combines core utilities and submodules to build customizable pretty-printers for common data structures like lists, sets, and maps. It provides functions to format values with custom delimiters, separators, and layout rules, supporting both basic types and user-defined structures. The submodules handle functorized sets and maps, generating `pp` and `show` functions that integrate with custom pretty-printing configurations. For example, it can format a `Set.Make(String)` as a comma-separated list within curly braces or render a map with key-value pairs aligned for readability.",
      "description_length": 594,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Nondeterminism",
      "library": "jhupllib",
      "description": "This module implements a non-determinism monad for computations with multiple possible outcomes, using a monadic type `'a m` to structure branching logic through operations like `bind`, `pure`, `zero`, and `plus`. It provides core functions to combine, filter, and traverse non-deterministic values, with utilities such as `pick_enum` to select from an enumeration and represent failure via `zero` or `empty`. Submodules extend this foundation to support concrete use cases like generating permutations, modeling search spaces, and implementing backtracking algorithms over enumerated choices. Together, the module and its children enable structured handling of ambiguity in parsing, combinatorial generation, and state exploration.",
      "description_length": 732,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.String_utils",
      "library": "jhupllib",
      "description": "This module provides functions for string manipulation and formatting, including concatenation with separators, converting lists and tuples to strings, indentation, and splitting strings on whitespace. It works with strings, lists, tuples, and Batteries enumerations. Concrete use cases include generating formatted output, parsing and restructuring text data, and simplifying string-based data transformations.",
      "description_length": 411,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib.Uids",
      "library": "jhupllib",
      "description": "This module provides a generative functor for creating UID modules that produce fresh, unique identifiers with strong guarantees of distinctness across different instances. It defines core data types such as `t` for UIDs and `context` for managing generation state, supporting operations like `fresh`, `equal`, and `to_string`. The first child module enhances UID management with context-aware generation and rich comparison operations, enabling use cases like symbol creation in compilers or tracking entities across scopes. The second child module simplifies UID generation with optional contextual isolation, ideal for creating temporary names or ensuring uniqueness in ASTs and stateful systems.",
      "description_length": 699,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jhupllib",
      "library": "jhupllib",
      "description": "This collection provides structured tools for managing grouped data, unique identifiers, and complex computations with support for serialization, comparison, and pretty-printing. Core data types include multimaps for key-value aggregations, witnesses for efficient value comparison, UID types for unique identifier generation, and monadic structures for deterministic and non-deterministic computation sequencing. Operations span from JSON and string serialization, multimap manipulation, and logger configuration to combinatorial search and nondeterministic result generation. Examples include grouping log entries by user, exporting configuration multimaps to JSON, implementing backtracking parsers, and generating unique symbols in compilers.",
      "description_length": 746,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 45,
    "meaningful_modules": 45,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 888,
    "min_description_length": 262,
    "avg_description_length": 488.9555555555556,
    "embedding_file_size_mb": 0.1639719009399414
  }
}