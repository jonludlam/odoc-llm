{
  "package": "qrc",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:59:44.454713",
  "modules": [
    {
      "module_path": "Qrc.Prop",
      "library": "qrc",
      "description": "This module calculates QR code structural properties including version-to-size mapping, data and error correction capacities, and alignment pattern positions. It handles QR versions, error correction levels, and encoding modes, providing precise metrics for capacity planning and layout generation. Use it to determine encoding limits, matrix dimensions, or error correction parameters for specific QR versions.",
      "description_length": 411,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qrc.Gf_256",
      "library": "qrc",
      "description": "This module implements arithmetic operations in the Galois Field GF(2\u2078), including addition, subtraction, multiplication, exponentiation, logarithm, and inversion, all performed modulo an irreducible polynomial. It operates on byte values (integers 0\u2013255) and uses a generator to compute exponentials and logarithms for efficient multiplication and division. It is used in QR code encoding for error correction code generation and data polynomial manipulation.",
      "description_length": 460,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qrc.Matrix",
      "library": "qrc",
      "description": "This module represents QR code matrices as flat bit arrays and provides direct access to individual modules via coordinate-based get/set operations. It supports matrix creation from bit sequences, copying, and traversal with row-major folding. Typical uses include constructing and manipulating QR code patterns before rendering to formats like SVG, where each bit corresponds to a visual module in the final image.",
      "description_length": 415,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qrc_fmt",
      "library": "qrc",
      "description": "This module defines functions for rendering QR code matrices into text-based visual representations. It supports multiple output formats including ASCII, ANSI, and UTF-8 encodings with block characters. These formatters are used to display or print QR codes in terminal environments where graphical rendering is not available.",
      "description_length": 326,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qrc",
      "library": "qrc",
      "description": "This module encodes byte data into QR code matrices, supporting version selection, error correction levels, and masking options. It works with flat bit arrays representing QR code modules, enabling precise coordinate-based manipulation and row-major traversal. Concrete uses include generating scannable QR codes with specified error resilience and matrix dimensions for rendering in formats like SVG.",
      "description_length": 401,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 460,
    "min_description_length": 326,
    "avg_description_length": 402.6,
    "embedding_file_size_mb": 0.07287120819091797
  }
}