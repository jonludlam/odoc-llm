{
  "package": "qrc",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:36.320300",
  "modules": [
    {
      "module_path": "Qrc.Matrix",
      "library": "qrc",
      "description": "This module represents QR code matrices as two-dimensional grids of boolean values, with support for creating, modifying, and querying individual cells. It provides operations to construct matrices from bit sequences, access and update cell states, and render the matrix as an SVG image with configurable size, inversion, and quiet zone inclusion. Use cases include encoding data into QR codes by setting specific modules and visualizing the resulting matrix as a scalable image.",
      "description_length": 479,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qrc.Prop",
      "library": "qrc",
      "description": "This module defines properties and computations specific to QR code encoding, including version mapping, capacity calculations, and alignment pattern placement. It operates on QR code versions, error correction levels, and modes, providing precise data on byte capacities, block distributions, and geometric properties. Concrete use cases include determining maximum data size for a given version and error correction level, computing matrix dimensions, and positioning alignment patterns.",
      "description_length": 489,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qrc.Gf_256",
      "library": "qrc",
      "description": "Implements arithmetic operations in the Galois Field GF(2\u2078) using polynomials and bytes as integers. Provides addition, subtraction, multiplication, exponentiation, logarithm, and inversion functions for error correction in QR code encoding. Designed for use with fixed irreducible polynomials and generator elements required by the QR code standard.",
      "description_length": 350,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Qrc_fmt",
      "library": "qrc",
      "description": "This module provides functions to format QR matrices into text-based representations using different character encodings. It supports ASCII, ANSI, UTF-8 full block, and UTF-8 half block output styles, each rendering QR code modules as specific text characters. Use cases include generating printable QR codes in terminal environments or text files where graphical output is unavailable.",
      "description_length": 386,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Qrc",
      "library": "qrc",
      "description": "This module encodes QR codes from byte data into matrices of boolean values, supporting configurable versions, error correction levels, and masking strategies. It includes submodules for matrix manipulation, QR-specific property calculations, and Galois Field arithmetic, enabling precise control over encoding and error correction. You can generate scannable QR images, compute data capacities for specific configurations, and render matrices as SVG files with customizable size and appearance. Operations include setting individual cells, determining alignment patterns, and performing GF(2\u2078) arithmetic for error correction code generation.",
      "description_length": 643,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 643,
    "min_description_length": 350,
    "avg_description_length": 469.4,
    "embedding_file_size_mb": 0.018619537353515625
  }
}