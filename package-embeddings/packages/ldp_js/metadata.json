{
  "package": "ldp_js",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:51:42.623967",
  "modules": [
    {
      "module_path": "Ldp_js.Nodbg",
      "library": "ldp_js",
      "description": "This module performs HTTP requests without enabling debug output. It provides a `call` function to send HTTP methods (e.g., GET, POST) to a given IRI, with optional headers and body, returning the response and body. It is used for making silent, production-ready HTTP calls in client-side OCaml code.",
      "description_length": 300,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp_js.Make",
      "library": "ldp_js",
      "description": "Implements HTTP query execution with debug logging capabilities. Operates on IRI values and Cohttp types for methods, headers, responses, and bodies. Enables making synchronous HTTP requests (GET, POST, etc.) to perform operations like fetching or modifying remote resources over the web.",
      "description_length": 288,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ldp_js.Dbg",
      "library": "ldp_js",
      "description": "This module performs HTTP requests and logs debug messages using Firebug's console. It provides a `call` function to send HTTP methods with optional headers and request bodies to a given IRI, returning responses asynchronously. Debugging is integrated via a `dbg` function that logs messages during operations.",
      "description_length": 310,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ldp_js",
      "library": "ldp_js",
      "description": "This module implements synchronous HTTP request handling with configurable debug logging, supporting operations like GET, POST, and other HTTP methods against IRI-based endpoints. It works with Iri.t values and Cohttp types for headers, responses, and bodies, enabling interaction with RESTful web services. Concrete use cases include client-side resource retrieval, form submission, and authenticated API calls in web applications.",
      "description_length": 432,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 432,
    "min_description_length": 288,
    "avg_description_length": 332.5,
    "embedding_file_size_mb": 0.05836677551269531
  }
}