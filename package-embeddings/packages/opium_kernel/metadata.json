{
  "package": "opium_kernel",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 20,
  "creation_timestamp": "2025-08-15T12:09:36.789339",
  "modules": [
    {
      "module_path": "Opium_kernel.Rock.Request.Fields.Direct",
      "library": "opium_kernel",
      "description": "This module directly manipulates fields of HTTP request objects, enabling precise access and transformation of request metadata, body, and environment data. It operates on `Opium_kernel.Rock.Request.t` values, using field-specific functions to inspect or modify components like headers, method, and URI. Concrete use cases include extracting request headers, modifying the request body, or inspecting environment variables within middleware or handlers.",
      "description_length": 453,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opium_kernel.Rock.Response.Fields.Direct",
      "library": "opium_kernel",
      "description": "This module directly manipulates fields of HTTP response objects, including status code, headers, body, and environment. It provides operations to iterate over, fold, map, and query individual response components with precise control. Use cases include modifying response headers for middleware, inspecting or transforming response bodies, and validating response structure during testing or logging.",
      "description_length": 400,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Response.Fields",
      "library": "opium_kernel",
      "description": "This module directly manipulates fields of HTTP response objects, including status code, headers, body, and environment. It provides operations to iterate over, fold, map, and query individual response components with precise control. Use cases include modifying response headers for middleware, inspecting or transforming response bodies, and validating response structure during testing or logging.",
      "description_length": 400,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Request.Fields",
      "library": "opium_kernel",
      "description": "This module provides operations to access, transform, and inspect individual components of an HTTP request, including the body, environment, and underlying Cohttp request. It works directly with `Opium_kernel.Rock.Request.t`, using field descriptors to manipulate specific parts such as headers, method, and URI. Concrete use cases include modifying request headers in middleware, replacing the request body, or extracting environment data for routing decisions.",
      "description_length": 462,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Route.Fields_of_matches.Direct",
      "library": "opium_kernel",
      "description": "This module provides direct access to route match data by iterating, folding, and mapping over parameter and splat fields. It works with `matches` structures containing parameter lists and splats, allowing transformation or inspection of route components. Concrete use cases include extracting route parameters, validating paths, and modifying captured values during routing in a web application.",
      "description_length": 396,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opium_kernel.Hmap.Key",
      "library": "opium_kernel",
      "description": "This module provides operations to create and manage keys for use with Hmaps, including creating keys with associated metadata and extracting that metadata. It supports existential keys, which enable type-erased comparison and equality checks between keys. Concrete use cases include filtering or traversing heterogeneous Hmaps where key types vary but need to be compared or indexed uniformly.",
      "description_length": 394,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Handler",
      "library": "opium_kernel",
      "description": "This module defines a handler as a service that processes HTTP requests and generates responses. It provides default and not-found handlers for common request scenarios, such as serving 404 pages. The handler operates on request and response types defined in the Rock module, enabling middleware composition and route handling in web applications.",
      "description_length": 347,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.App",
      "library": "opium_kernel",
      "description": "This module composes HTTP handlers with middleware chains, enabling request processing pipelines. It works with handler and middleware types to build modular web applications. Concrete use cases include adding logging, authentication, or routing layers to an HTTP server.",
      "description_length": 271,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Route.Fields_of_matches",
      "library": "opium_kernel",
      "description": "This module provides operations to access, transform, and inspect route match data, specifically handling parameter lists and splat values within `matches` structures. It supports creating, mapping, folding, and filtering over route components, enabling direct manipulation of captured route values. Use cases include extracting and validating route parameters, modifying splat segments, and building custom routing logic in web applications.",
      "description_length": 442,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opium_kernel.Rock.Service",
      "library": "opium_kernel",
      "description": "This module defines services as asynchronous functions that transform requests into responses, supporting serialization and deserialization of both input and output via S-expressions. It works with polymorphic request and response types, enabling services to handle arbitrary data structures. Concrete use cases include building composable HTTP handlers, implementing RPC endpoints, and defining middleware chains that operate on structured data.",
      "description_length": 446,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Request",
      "library": "opium_kernel",
      "description": "This module provides functions to construct, inspect, and manipulate HTTP requests, including access to the request method, URI, headers, body, and environment. It operates on the `Opium_kernel.Rock.Request.t` type, which wraps Cohttp request and body values alongside a typed environment map. Use cases include extracting request headers for authentication, reading the request URI for routing, and modifying the body in middleware filters.",
      "description_length": 441,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Middleware",
      "library": "opium_kernel",
      "description": "This module defines composable filters that transform or inspect HTTP requests and responses in a web application pipeline. It works with `Request.t` and `Response.t` types, allowing middleware components to be chained together to handle tasks like logging, authentication, or header manipulation. Concrete use cases include adding CORS headers, measuring request latency, or injecting authentication data into requests before routing.",
      "description_length": 435,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Response",
      "library": "opium_kernel",
      "description": "This module constructs and manipulates HTTP responses with specific fields such as status code, headers, body, and environment. It supports creating responses from strings, streams, or existing response-body pairs, and provides accessors to inspect individual components. Concrete use cases include building custom middleware that modifies headers, streaming dynamic content in web applications, and generating testable or loggable HTTP responses with precise control over their structure.",
      "description_length": 489,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Filter",
      "library": "opium_kernel",
      "description": "This module composes and manipulates request/response transformation pipelines using higher-order functions. It operates on services that process request and response types, enabling chaining of transformations through the `>>>` operator and applying lists of filters via `apply_all`. Concrete use cases include modifying HTTP request handling behavior, such as logging, authentication, or header manipulation, by composing filters that transform incoming requests and outgoing responses.",
      "description_length": 488,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opium_kernel.Router",
      "library": "opium_kernel",
      "description": "This module provides functions to create and manipulate routers for handling HTTP routes and requests. It supports operations like adding routes with specific methods and parameters, extracting request parameters, and converting routers to and from S-expressions. It is used to define and manage routing logic in web applications built with the Opium framework.",
      "description_length": 361,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opium_kernel.Cookie",
      "library": "opium_kernel",
      "description": "This module handles cookie management for HTTP requests and responses. It provides functions to retrieve cookies from requests, set individual or multiple cookies in responses, and includes middleware to integrate cookie handling into a web application. Use cases include session management, user authentication, and tracking user preferences across HTTP interactions.",
      "description_length": 368,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Hmap",
      "library": "opium_kernel",
      "description": "This module provides operations for a heterogeneous map with typed keys, enabling type-safe insertion, retrieval, and transformation of values indexed by polymorphic keys. It works with extensible, persistent map structures (`Hmap.t`) where keys are managed via the `Key` module to ensure uniform comparison and existential type quantification, supporting efficient lookups (`find_exn`), filtering, and traversal. It is particularly useful for scenarios requiring dynamic, type-preserving data aggregation, such as configuration management or polymorphic extensible records.",
      "description_length": 574,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Route",
      "library": "opium_kernel",
      "description": "This module handles route matching and parsing for URLs, working with `path_segment` variants like static segments, parameters, and splats. It provides functions to convert routes between string and structured forms, extract parameters and splats from URLs, and manipulate route components directly. Concrete use cases include defining RESTful endpoints with dynamic segments, extracting query values from paths, and building routers that map URLs to handlers based on pattern matching.",
      "description_length": 486,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opium_kernel.Rock",
      "library": "opium_kernel",
      "description": "This module implements a Rack-inspired HTTP processing framework with composable services, filters, and middleware. It provides primitives for building and transforming HTTP requests and responses, supporting structured data handling through S-expressions and typed environments. Concrete use cases include constructing middleware pipelines with chained filters, defining RPC endpoints with custom serialization, and building modular web applications with typed request/response handling.",
      "description_length": 488,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel",
      "library": "opium_kernel",
      "description": "This module includes submodules for building composable HTTP applications with typed environments and structured data handling. It supports operations such as defining route-based handlers, managing middleware pipelines, and manipulating heterogeneous data maps. Use cases include constructing type-safe web APIs with dynamic routing, handling HTTP cookies for session state, and organizing configuration data using polymorphic maps.",
      "description_length": 433,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 21,
    "meaningful_modules": 20,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9523809523809523
  },
  "statistics": {
    "max_description_length": 574,
    "min_description_length": 271,
    "avg_description_length": 428.7,
    "embedding_file_size_mb": 0.2758932113647461
  }
}