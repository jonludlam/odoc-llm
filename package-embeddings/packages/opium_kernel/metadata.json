{
  "package": "opium_kernel",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 20,
  "creation_timestamp": "2025-07-15T23:10:25.914309",
  "modules": [
    {
      "module_path": "Opium_kernel.Rock.Request.Fields.Direct",
      "library": "opium_kernel",
      "description": "This module directly manipulates fields of HTTP request objects, enabling precise access and transformation of request metadata, body, and environment data. It operates on `Opium_kernel.Rock.Request.t` values, breaking them into their component parts\u2014`Cohttp.Request.t`, `Cohttp_lwt.Body.t`, and `Opium_kernel__.Hmap0.t`\u2014for targeted processing. Use it to inspect or modify individual elements of a request, such as headers, body content, or environment variables, during middleware or handler execution.",
      "description_length": 504,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Response.Fields.Direct",
      "library": "opium_kernel",
      "description": "This module provides direct access to individual fields of a response object, such as status code, headers, body, and environment. It allows inspecting and transforming these fields through operations like `iter`, `map`, `fold`, `for_all`, and `exists`. Concrete use cases include modifying response headers, logging response status codes, or validating response bodies during HTTP request handling.",
      "description_length": 399,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Response.Fields",
      "library": "opium_kernel",
      "description": "This module enables direct manipulation of response fields including status code, headers, body, and environment, with operations to create, map, iterate, and fold over these components. It provides functions like `map`, `iter`, and `fold` for transforming and inspecting responses, while its submodules allow granular access to individual fields. You can construct custom HTTP responses, modify headers dynamically, or validate response bodies during request handling. Specific examples include logging response status, filtering headers, or transforming body content before sending.",
      "description_length": 584,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Route.Fields_of_matches.Direct",
      "library": "opium_kernel",
      "description": "This module provides operations to iterate, fold, filter, and transform route match data in a structured way. It works directly with `Opium_kernel.Route.matches` and handles both parameter (`params`) and wildcard (`splat`) fields using `Fieldslib` field definitions. Concrete use cases include extracting route parameters, validating match conditions, and modifying captured route values during routing in a web application.",
      "description_length": 424,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Request.Fields",
      "library": "opium_kernel",
      "description": "This module provides direct access to the core components of HTTP request objects, allowing precise manipulation of request metadata, body, and environment data. It operates on `Opium_kernel.Rock.Request.t` values, exposing operations to create, map, fold, and query these components individually. Use it to extract headers, transform request bodies, or inspect environment variables during request processing. Submodules extend this functionality with targeted operations on specific request elements, enabling fine-grained transformations and inspections within middleware or handlers.",
      "description_length": 587,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opium_kernel.Rock.App",
      "library": "opium_kernel",
      "description": "This module composes HTTP handlers with middleware chains, enabling request processing pipelines. It works with handler and middleware functions that transform HTTP requests and responses. Concrete use cases include adding logging, authentication, or routing layers to web applications.",
      "description_length": 286,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Handler",
      "library": "opium_kernel",
      "description": "This module defines a handler as a service that processes HTTP requests and generates responses. It works with request and response types defined in `Opium_kernel.Rock`, enabling routing and middleware composition. Concrete use cases include defining endpoint behavior, handling errors like missing routes, and chaining transformations over incoming requests and outgoing responses.",
      "description_length": 382,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Filter",
      "library": "opium_kernel",
      "description": "This module composes and manipulates filters that transform services into other services, supporting bidirectional request and response type conversions. It works directly with service types defined in the Rock module, using higher-order functions to chain transformations. Concrete use cases include modifying HTTP request/response handling pipelines, such as adding logging, authentication, or content compression layers to web services.",
      "description_length": 439,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opium_kernel.Route.Fields_of_matches",
      "library": "opium_kernel",
      "description": "This module gives structured access to route match data through typed fields, enabling creation, transformation, and inspection of `matches` values. It supports operations like extracting path components, mapping over parameters, and validating route structures, both directly and through its child module. The child module extends this functionality with iteration, filtering, and folding over both `params` and `splat` fields of `Opium_kernel.Route.matches`. Together, they allow precise manipulation of route captures, such as transforming parameter lists or checking match conditions during routing.",
      "description_length": 603,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Request",
      "library": "opium_kernel",
      "description": "This module represents an HTTP request and provides accessors for the underlying Cohttp request, body, and environment. It supports operations to retrieve the request URI, HTTP method, headers, and environment data, enabling tasks like authentication via headers or parsing form data from the request body. The module also includes submodules that offer targeted manipulation of specific request components, such as headers or body transformations. These submodules operate on `Opium_kernel.Rock.Request.t` values, supporting creation, mapping, folding, and querying of individual elements for fine-grained request processing in middleware or handlers.",
      "description_length": 652,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opium_kernel.Rock.Middleware",
      "library": "opium_kernel",
      "description": "This module defines composable filters that transform or inspect HTTP requests and responses in a web application pipeline. It provides operations to create, name, and apply middleware to services, enabling functionality like logging, authentication, or header manipulation. Each middleware wraps a service to modify behavior without altering its core logic.",
      "description_length": 358,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Hmap.Key",
      "library": "opium_kernel",
      "description": "This module provides operations to create and manage keys for use in a heterogeneous map structure. It supports creating keys with associated metadata, extracting key information, and comparing keys for equality and ordering through existential key types. Concrete use cases include filtering or traversing heterogeneous maps where keys of different types need to be compared or tracked.",
      "description_length": 387,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Service",
      "library": "opium_kernel",
      "description": "This module defines services as asynchronous functions that transform requests into responses, working with arbitrary types `'a` and `'b` for input and output. It provides utilities to serialize and deserialize services using S-expressions, create identity services, and construct constant response services. Concrete use cases include building middleware, defining route handlers, and serializing service components for debugging or transport.",
      "description_length": 444,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock.Response",
      "library": "opium_kernel",
      "description": "This module constructs and manipulates HTTP responses with precise control over status codes, headers, bodies, and environment. It supports creating responses from strings, streams, or existing response-body pairs, and provides operations like `map`, `iter`, and `fold` to transform and inspect response components. Submodules allow granular access to individual fields, enabling tasks like logging response status, dynamically modifying headers, or streaming large bodies efficiently. Use cases include building custom middleware, generating error responses, or validating and transforming response content during handling.",
      "description_length": 624,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opium_kernel.Hmap",
      "library": "opium_kernel",
      "description": "This module implements a type-safe heterogeneous map that allows storing and manipulating values of arbitrary types under distinct keys, ensuring type-preserving access through key-specific retrieval functions. It supports operations for inserting, removing, and retrieving values on `Hmap.t` structures, while its key management submodule enables creating, comparing, and tracking keys with associated metadata across different value types. You can use it to manage dynamic configurations with mixed data types, build dependency injection containers, or implement stateful systems with strict key-value type guarantees. For example, you can insert an integer under one key, a string under another, and safely retrieve each with the correct type, or filter and traverse keys based on their metadata or type.",
      "description_length": 807,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Rock",
      "library": "opium_kernel",
      "description": "This module implements a composable HTTP processing pipeline using services, handlers, and middleware filters. It centers around `Request.t` and `Response.t` as the primary data types, with operations to access and transform HTTP methods, headers, bodies, and environment data. Services represent asynchronous request-response transformations, while middleware filters wrap these services to add cross-cutting behavior like logging, authentication, or compression. Developers can build custom pipelines by chaining filters, define endpoint logic with handlers, and manipulate individual request/response components using submodules for headers, bodies, or environment data.",
      "description_length": 673,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Router",
      "library": "opium_kernel",
      "description": "This module provides functions to create and manipulate routers for handling HTTP routes and requests. It supports operations like adding routes with specific methods and parameters, extracting request parameters, and converting routers to and from S-expressions. It is used to define and manage request handlers in a web application, enabling dynamic route matching and middleware integration.",
      "description_length": 394,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Opium_kernel.Cookie",
      "library": "opium_kernel",
      "description": "This module handles cookie management for HTTP requests and responses. It provides functions to retrieve cookies from requests, set individual or multiple cookies in responses with configurable attributes, and parse percent-encoded cookie values. It works directly with `Rock.Request.t` and `Rock.Response.t` types, enabling middleware integration for cookie handling in web applications. Use cases include session management, user tracking, and storing client-side preferences via cookies.",
      "description_length": 490,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel.Route",
      "library": "opium_kernel",
      "description": "This module handles route matching and parsing for URL paths, converting between strings and structured path segments like static parts, parameters, and splats. It supports extracting and transforming match data, including path components and parameters, through typed operations. Its child module provides structured access to match results, enabling iteration, filtering, and validation over captured route elements. For example, you can define a route pattern, match it against a URL, then extract or transform the resulting parameters and splats directly or with higher-order operations.",
      "description_length": 591,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Opium_kernel",
      "library": "opium_kernel",
      "description": "This module provides a comprehensive toolkit for building and managing HTTP-based applications with strong type safety and composability. Core data types include `Request.t`, `Response.t`, and `Hmap.t`, enabling structured manipulation of HTTP components, dynamic configuration, and type-preserving state management. Key operations span route definition and matching, cookie handling, middleware composition, and heterogeneous data storage, supporting use cases such as building type-safe web services, managing session data, and implementing custom routing logic with typed parameter extraction. For example, developers can define routes with typed parameters, chain middleware to enrich request processing, and store or retrieve values of varying types in a type-secure context.",
      "description_length": 780,
      "index": 19,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 21,
    "meaningful_modules": 20,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9523809523809523
  },
  "statistics": {
    "max_description_length": 807,
    "min_description_length": 286,
    "avg_description_length": 520.4,
    "embedding_file_size_mb": 0.0730743408203125
  }
}