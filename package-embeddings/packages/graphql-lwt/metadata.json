{
  "package": "graphql-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:52.508686",
  "modules": [
    {
      "module_path": "Graphql_lwt.Schema.Io.Stream",
      "library": "graphql-lwt",
      "description": "This module implements streaming capabilities for handling asynchronous GraphQL operations, allowing incremental data processing. It provides `map`, `iter`, and `close` to transform, consume, and terminate streams of GraphQL responses. Use it to implement subscriptions or large result sets without blocking.",
      "description_length": 308,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_lwt.Schema.Io",
      "library": "graphql-lwt",
      "description": "This module combines monadic handling of asynchronous GraphQL schema computations with streaming capabilities for incremental data processing. It centers around the `Io.t` type, enabling effectful chains with `bind` and `return`, while its child module extends this with `map`, `iter`, and `close` for streaming. Use it to define I/O-heavy resolvers like database queries or implement GraphQL subscriptions that process results incrementally. Together, they support both one-off asynchronous operations and long-lived, streamed responses within a schema.",
      "description_length": 554,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_lwt.Schema.StringMap",
      "library": "graphql-lwt",
      "description": "This module provides a polymorphic string-keyed map with persistent (immutable) functional operations for creation, modification, traversal, and comparison of key-value associations. It supports operations like `add`, `find`, `fold`, and `map`, handling string keys paired with arbitrary values, and includes safe lookup via `find` (returning `option`) and `find_exn` (raising exceptions). The structure is optimized for scenarios requiring ordered key-value management, such as schema definitions or configuration data in GraphQL Lwt, where transformations and iterative processing over string-indexed collections are critical.",
      "description_length": 628,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_lwt.Schema.Arg",
      "library": "graphql-lwt",
      "description": "This module defines argument types and constructors for building GraphQL schema fields with Lwt support. It provides functions to create scalar, enum, and object argument types, along with standard types like int, string, and bool, enabling precise schema definition with optional and non-null constraints. Use it to define the input structure of GraphQL queries and mutations, such as specifying filters, parameters, or input objects with custom validation and coercion logic.",
      "description_length": 477,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_lwt.Schema",
      "library": "graphql-lwt",
      "description": "This module enables the construction and execution of asynchronous GraphQL schemas, supporting the definition of object types, interfaces, enums, and scalars with modifiers like `list` and `non_null`. It integrates with Lwt for concurrency, allowing schema-driven query execution and value resolution through resolver contexts and abstract type representations. The module's core works with GraphQL AST documents to validate and execute queries, while its submodules enhance functionality: one handles asynchronous I/O and streaming for resolvers and subscriptions, another manages string-keyed maps for schema definitions and configuration data, and a third provides utilities for defining field arguments with type constraints. These components together support building robust, type-safe GraphQL APIs with both synchronous and streaming operations.",
      "description_length": 851,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_lwt",
      "library": "graphql-lwt",
      "description": "This module enables the creation and execution of asynchronous GraphQL schemas with support for object types, interfaces, enums, scalars, and type modifiers. It integrates Lwt for concurrency, allowing resolvers to handle queries, mutations, and subscriptions using GraphQL AST documents and schema-driven validation. Submodules manage streaming, string-keyed maps for schema configuration, and typed field arguments. You can define schemas with resolver contexts, execute queries asynchronously, and stream results over time.",
      "description_length": 526,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 851,
    "min_description_length": 308,
    "avg_description_length": 557.3333333333334,
    "embedding_file_size_mb": 0.022202491760253906
  }
}