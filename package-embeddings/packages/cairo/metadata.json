{
  "package": "cairo",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-06-18T16:33:15.237967",
  "modules": [
    {
      "module_path": "Cairo.Font_Options",
      "description": "Manages font rendering settings by allowing configuration of antialiasing, subpixel order, and hinting parameters. It works with custom types representing font options and rendering behaviors. Used to customize text appearance in graphical applications by adjusting visual quality and performance trade-offs.",
      "description_length": 308,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo.Scaled_Font",
      "description": "Provides functions to create and query font objects with specific transformations and options, including retrieving font and text extents, and converting between font types. Operates on font faces, matrices, and custom font options structures. Used to handle glyph positioning and rendering metrics in graphical applications.",
      "description_length": 325,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo.Pattern",
      "description": "Provides methods to create and manipulate graphical patterns, including solid colors, gradients, and surface-based patterns. Supports operations like adding color stops to gradients, setting transformation matrices, and configuring extend and filter modes. Works with types such as solid_pattern, gradient_pattern, surface_pattern, and matrix to enable detailed control over visual rendering.",
      "description_length": 392,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo.Matrix",
      "description": "Provides matrix operations for creating identity, translation, scaling, and rotation matrices, as well as transforming points and distances. Works with 2D transformation matrices and geometric points. Used to apply affine transformations in graphics or spatial computations.",
      "description_length": 274,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pango_cairo.FontMap",
      "description": "Provides functions to initialize a font mapping structure, retrieve a default instance, and create a Pango rendering context. Works with font_map and Pango.context types. Used to set up text rendering environments with specific font configurations.",
      "description_length": 248,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "cairo",
      "description": "Provides functions for creating and manipulating 2D graphics contexts, drawing shapes, and applying transformations. Works with surfaces, paths, and color gradients to render visual output. Used to generate vector graphics, overlay annotations on images, and create dynamic visual elements in applications.",
      "description_length": 306,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo_ps",
      "description": "Creates PostScript surfaces from output channels or streams, allowing precise control over rendering dimensions. Accepts float-based width and height parameters to define the canvas size. Used to generate vector graphics output suitable for printing or embedding in documents.",
      "description_length": 276,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo_ft",
      "description": "Provides functions to initialize and finalize FreeType libraries, create and manage font faces from file paths or patterns, and convert between Cairo font faces and FreeType-specific types. Works with types such as `ft_library`, `ft_face`, `fc_pattern`, and specialized font face representations. Used to load and manipulate font data for rendering, enabling precise control over font patterns and face locking in graphics operations.",
      "description_length": 434,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo_svg",
      "description": "Creates SVG surfaces from output channels or streams, allowing precise control over rendering dimensions. Restricts SVG output to specific versions and converts version identifiers to strings for validation or logging. Operates with out_channels, strings, and version-typed values to generate and manage SVG content.",
      "description_length": 316,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo_lablgtk",
      "description": "Creates a Cairo context from a drawable object, sets color and pixel buffer sources, and draws rectangles and regions. Operates on Gdk color, rectangle, region, and pixbuf types. Used for rendering custom graphics and visual elements in GTK applications.",
      "description_length": 254,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cairo",
      "description": "Combines font configuration, graphical pattern creation, and matrix transformations to enable detailed control over text and visual rendering. It handles font options, glyph metrics, and transformation matrices, along with solid, gradient, and surface-based patterns. Users can adjust text clarity, position glyphs precisely, and apply affine transformations to graphics. Examples include customizing font hinting, generating gradient fills, and rotating graphical elements.",
      "description_length": 474,
      "index": 10,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Cairo_png",
      "description": "Creates image surfaces from files, channels, or streams and writes surfaces to output channels, files, or custom streams. Operates on OCaml in_channels, out_channels, strings, and Cairo surface types. Used to generate and save PNG images from raw data or external sources.",
      "description_length": 272,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo_pdf",
      "description": "Creates PDF surfaces from output channels or streams, allowing precise control over page dimensions. Accepts float-based width and height parameters to define the size of the output. Used to generate vector graphics in PDF format for reporting or document generation.",
      "description_length": 267,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pango_cairo",
      "description": "Initializes font mappings and creates rendering contexts for text, enabling custom font configurations. Supports operations on font_map and Pango.context types to manage text layout and rendering. Allows setting up environments where text can be precisely styled and positioned. Example tasks include loading custom fonts and generating text layouts for graphical output.",
      "description_length": 371,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cairo_bigarray",
      "description": "Converts 2D bigarrays with specific element types and layouts into Cairo image surfaces, supporting formats like 32-bit ARGB, 24-bit RGB, and 8-bit grayscale. Outputs 2D bigarrays in PPM format to a file channel, preserving pixel data integrity. Accepts bigarrays with defined strides and dimensions for precise image creation and manipulation.",
      "description_length": 344,
      "index": 14,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 474,
    "min_description_length": 248,
    "avg_description_length": 324.06666666666666,
    "embedding_file_size_mb": 0.05491447448730469
  }
}