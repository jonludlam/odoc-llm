{
  "package": "bap-build",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:49:25.681996",
  "modules": [
    {
      "module_path": "Bap_build.Std.Plugin_rules",
      "library": "bap-build",
      "description": "This module provides functions to integrate BAP-specific build rules into an OCamlbuild system. It works with Ocamlbuild's rule installation phases and plugin configuration structures. Use this module to enable BAP's custom compilation behavior directly within a project's `myocamlbuild.ml` script by installing rules during the `Before_rules` phase.",
      "description_length": 350,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_build.Std.Plugin_options",
      "library": "bap-build",
      "description": "This module provides functions to configure and activate bapbuild behavior when using a custom `myocamlbuild.ml` script. It works with OCamlbuild's plugin system and configuration phases, allowing programmatic setup of default options and rule installation. A concrete use case is enabling bapbuild functionality directly within a project's build system without relying on the `bapbuild` utility.",
      "description_length": 396,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_build.Std",
      "library": "bap-build",
      "description": "This module provides functions to configure and activate bapbuild behavior when using a custom `myocamlbuild.ml` script. It works with OCamlbuild's plugin system and configuration phases, allowing programmatic setup of default options and rule installation. A concrete use case is enabling bapbuild functionality directly within a project's build system without relying on the `bapbuild` utility.",
      "description_length": 396,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_build",
      "library": "bap-build",
      "description": "This module configures and activates bapbuild behavior within a custom `myocamlbuild.ml` script, integrating with OCamlbuild's plugin system and configuration phases. It provides functions to set up default options and install rules programmatically. A concrete use case is embedding bapbuild functionality directly into a project's build system, avoiding the need for the standalone `bapbuild` utility.",
      "description_length": 403,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 403,
    "min_description_length": 350,
    "avg_description_length": 386.25,
    "embedding_file_size_mb": 0.044074058532714844
  }
}