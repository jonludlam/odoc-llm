{
  "package": "mtime",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:53.887465",
  "modules": [
    {
      "module_path": "Mtime_clock",
      "library": "mtime.clock",
      "description": "This module measures monotonic time intervals using functions like `elapsed`, `count`, and `now`, which return values of type `Mtime.span` or `Mtime.t`. It supports time counters via `counter` and `count`, and provides raw 64-bit nanosecond access through `elapsed_ns` and `now_ns`. Use cases include benchmarking code execution, tracking durations between events, and synchronizing time-sensitive operations across processes when `now` is required.",
      "description_length": 449,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mtime.Span",
      "library": "mtime",
      "description": "This module handles arithmetic and comparisons for non-negative time intervals, supporting operations like addition, scaling, and duration checks. It works with `Mtime.span` values, which represent time spans in nanoseconds, and provides conversions to numeric types (int, float) and human-readable formatting using SI prefixes. Typical use cases include measuring execution durations, implementing timeouts, or tracking intervals in systems requiring monotonic time stability across processes.",
      "description_length": 494,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mtime",
      "library": "mtime",
      "description": "This module provides precise, platform-independent handling of monotonic time values, using `t` for timestamps and `span` for time intervals. It enables reliable time comparisons and interval calculations across processes, with operations like `is_earlier`, `add_span`, and `span` to measure and manipulate time without interference from system clock changes. The span module extends this functionality with arithmetic operations, unit conversions, and formatting for intervals, supporting use cases like performance measurement, timeouts, and cross-process scheduling. Together, they allow developers to track elapsed time accurately, format durations for logging, and synchronize timing-sensitive operations.",
      "description_length": 710,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 710,
    "min_description_length": 449,
    "avg_description_length": 551.0,
    "embedding_file_size_mb": 0.011321067810058594
  }
}