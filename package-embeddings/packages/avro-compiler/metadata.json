{
  "package": "avro-compiler",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:29:07.549103",
  "modules": [
    {
      "module_path": "Avro_compiler_lib.Codegen.Code",
      "description": "Converts a list of OCaml code elements into a formatted string representation. Operates on a custom type `t` that encapsulates individual code constructs. Used to generate human-readable code snippets from structured data during compilation or analysis.",
      "description_length": 253,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avro_compiler_lib.Codegen",
      "description": "Generates human-readable code from structured data by converting a custom type `t` into formatted strings. Supports operations that traverse and serialize code elements like expressions, types, and declarations. Examples include outputting function definitions, type annotations, or module structures. The module enables dynamic code generation for tools such as pretty-printers or code analyzers.",
      "description_length": 397,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avro_compiler_lib.Util",
      "description": "Filters out None values from a list of options, returning a list of wrapped values. Transforms the contents of an option using a provided function, preserving the option's presence. Used to safely process optional data structures and clean up lists of potentially missing values.",
      "description_length": 279,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "avro-compiler",
      "description": "Provides functions to serialize and deserialize data according to Avro schemas, including reading JSON schema definitions and generating corresponding OCaml types. Works with OCaml variants, records, and primitive types, and integrates with camlzip for compression. Used to encode structured data for storage or transmission and decode it back into OCaml values with type safety.",
      "description_length": 379,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avro_compiler_lib",
      "description": "Converts custom types into formatted strings, enabling code generation for expressions, types, and declarations, while filtering and transforming optional values to handle missing data safely. It supports operations like serializing function definitions and cleaning lists of options by removing None entries. The main data types include `t` for structured data and `option` for nullable values, with functions for traversal, transformation, and filtering. Examples include generating pretty-printed code or processing lists of optional parameters.",
      "description_length": 548,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 5,
    "filtered_empty_modules": 2,
    "retention_rate": 0.7142857142857143
  },
  "statistics": {
    "max_description_length": 548,
    "min_description_length": 253,
    "avg_description_length": 371.2,
    "embedding_file_size_mb": 0.018614768981933594
  }
}