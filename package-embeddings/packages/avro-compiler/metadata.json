{
  "package": "avro-compiler",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:14.911206",
  "modules": [
    {
      "module_path": "Avro_compiler_lib.Codegen.Code",
      "library": "avro-compiler.lib",
      "description": "Represents and manipulates OCaml source code as structured data. Provides a way to build and combine code fragments using a list-based structure, with a conversion function to produce a string representation. Useful for generating OCaml modules programmatically, such as during schema-driven code generation.",
      "description_length": 308,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avro_compiler_lib.Codegen",
      "library": "avro-compiler.lib",
      "description": "This module generates OCaml code from Avro schemas, using the `gen` function to produce structured code representations that include type definitions and serialization logic. It directly supports converting schema definitions into OCaml values that can encode and decode Avro data. The child module enables building and manipulating OCaml source code as structured, combinable fragments, which can then be rendered into valid OCaml source strings. Together, they allow programmatic generation of complete OCaml modules from schemas, suitable for integration into larger codebases or toolchains.",
      "description_length": 594,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avro_compiler_lib.Util",
      "library": "avro-compiler.lib",
      "description": "This module provides functions for working with optional values and lists. It includes `list_keep_some` to filter and extract values from a list of options, and `map_opt` to apply a function within an optional context. These functions are useful for handling data transformations where presence or absence of values must be preserved, such as parsing or data validation workflows.",
      "description_length": 380,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avro_compiler_lib.Schema",
      "library": "avro-compiler.lib",
      "description": "This module defines data types for representing Avro schema structures, including atomic types, complex types like records and enums, and operations for serializing and deserializing schemas to and from JSON. It provides functions to convert schemas to human-readable strings, parse schemas from strings or files, and handle Avro-specific constructs such as unions, maps, and fixed-size byte arrays. Use cases include validating Avro schema definitions, generating schema representations for code generation, and interfacing with Avro data serialization systems.",
      "description_length": 562,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Avro_compiler_lib",
      "library": "avro-compiler.lib",
      "description": "This module transforms Avro schemas into OCaml code, generating type definitions and serialization logic that enable encoding and decoding Avro data. It includes utilities for handling optional values and lists, such as filtering `Some` values from a list or mapping functions over optional data. The module also defines core data types for representing Avro schemas\u2014like records, enums, and unions\u2014and supports parsing, serializing, and converting schemas to readable formats. For example, you can generate OCaml modules from Avro schema files, process lists of optional values during schema parsing, or validate and manipulate Avro schema structures programmatically.",
      "description_length": 669,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 669,
    "min_description_length": 308,
    "avg_description_length": 502.6,
    "embedding_file_size_mb": 0.018610000610351562
  }
}