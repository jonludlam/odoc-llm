{
  "package": "bitcoin-ocurl",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:35.415579",
  "modules": [
    {
      "module_path": "Bitcoin_ocurl.Httpclient.Monad",
      "library": "bitcoin-ocurl",
      "description": "This module implements a monadic interface for handling asynchronous HTTP requests in the context of Bitcoin protocol interactions. It provides core monadic operations like `return`, `bind`, and `catch` to sequence and error-handle computations that return HTTP client results. It is used to structure Bitcoin node communication workflows with clean composition and exception handling.",
      "description_length": 385,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bitcoin_ocurl.Httpclient",
      "library": "bitcoin-ocurl",
      "description": "This module sends HTTP POST requests to Bitcoin nodes using OCurl, handling low-level network communication with Unix inet addresses, custom headers, and JSON-RPC payloads. It provides a `post_string` function for direct interaction with Bitcoin's RPC API, enabling operations like querying balances or submitting transactions. The monadic interface sequences asynchronous requests and handles errors cleanly, supporting structured workflows for Bitcoin protocol interactions. Together, the direct API and monadic submodule allow both simple requests and complex, composed operations with robust error handling.",
      "description_length": 611,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bitcoin_ocurl",
      "library": "bitcoin-ocurl",
      "description": "This module implements a Bitcoin HTTP client using OCurl to communicate with Bitcoin nodes via JSON-RPC. It provides a function to send POST requests with custom headers and JSON payloads over Unix inet connections, supporting operations like balance queries and transaction submissions. A monadic interface sequences asynchronous calls and handles errors, enabling robust composition of Bitcoin protocol interactions. Example uses include sending raw RPC commands or chaining dependent requests with error propagation.",
      "description_length": 519,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 611,
    "min_description_length": 385,
    "avg_description_length": 505.0,
    "embedding_file_size_mb": 0.011322021484375
  }
}