{
  "package": "uspf",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:05:24.938319",
  "modules": [
    {
      "module_path": "Uspf_unix",
      "library": "uspf.unix",
      "description": "This module implements SPF record validation and email header parsing using the Unix and DNS client libraries. It provides `get_and_check` to perform DNS-based SPF verification from a context, and `extract_received_spf` to parse SPF results directly from email headers. These functions are used to validate sender authenticity in email processing pipelines.",
      "description_length": 357,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uspf.Record",
      "library": "uspf",
      "description": "This module handles the creation, parsing, and serialization of SPF records for DNS zone files. It operates on a list of mechanism-qualifier pairs and modifier key-value pairs, producing a structured representation that can be converted to or from a string format. It supports parsing with macro expansion using a context, enabling accurate interpretation of SPF policies from TXT records.",
      "description_length": 389,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uspf.Result",
      "library": "uspf",
      "description": "This module defines a result type for SPF evaluation outcomes, including pass, fail, soft fail, and error states. It provides a function to format and print these results using OCaml's standard formatter. This module is used to represent and display the final result of SPF checks during email validation.",
      "description_length": 305,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uspf.Macro",
      "library": "uspf",
      "description": "This module handles parsing and expanding macro-encoded strings in SPF records. It defines a `macro` type for representing literal strings, encoded characters, and macro expansions with modifiers. The `expand_string` function processes a string using a context to resolve macros into domain names, while `to_string` and `pp` format macro structures for output.",
      "description_length": 360,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uspf.Encoder",
      "library": "uspf",
      "description": "This module formats and outputs SPF result data structures using a pretty-printing interface. It provides functions to encode SPF evaluation results, including optional contextual information like the receiver domain. The module is used to generate human-readable or structured output for logging or reporting the outcome of SPF checks.",
      "description_length": 336,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uspf.Extract",
      "library": "uspf",
      "description": "This module parses SPF (Sender Policy Framework) records from email headers, extracting structured fields such as result status, receiver, sender, and IP address. It processes raw string input or unstructured data into typed results, handling malformed input with explicit error states. Use cases include validating email authenticity during SMTP transactions or analyzing email headers for security auditing.",
      "description_length": 409,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uspf.Term",
      "library": "uspf",
      "description": "This module represents and manipulates SPF (Sender Policy Framework) terms, including directives like IP address checks, include statements, and modifiers such as redirect and explanation. It provides parsing from strings, string conversion, pretty printing, and equality comparison for structured SPF term lists. Concrete use cases include validating SPF records during email server configuration and programmatically constructing or inspecting SPF policies.",
      "description_length": 459,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uspf",
      "library": "uspf",
      "description": "This module enables the construction and evaluation of SPF policies by combining sender contexts (IP, domain, origin) with mechanisms like `a`, `mx`, and qualifiers such as `Pass` or `Fail`. It handles structured SPF records, result representations (e.g., `fail`, `softfail`), and error handling through DNS lookups and macro expansion, supporting dynamic policy enforcement in email validation systems and anti-spoofing workflows.",
      "description_length": 431,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 459,
    "min_description_length": 305,
    "avg_description_length": 380.75,
    "embedding_file_size_mb": 0.11638736724853516
  }
}