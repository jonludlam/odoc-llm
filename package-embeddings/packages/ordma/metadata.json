{
  "package": "ordma",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:24.986464",
  "modules": [
    {
      "module_path": "Lwt_rsocket.Bytes",
      "description": "Provides functions to create and manage byte buffers using Bigarray arrays, enabling low-level data manipulation. Supports sending and receiving data over sockets with precise control over message flags and buffer sizes. Designed for network communication tasks requiring direct memory access and efficient data transfer.",
      "description_length": 321,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rsocket.Version",
      "description": "Provides access to version components including major, minor, and patch integers, along with a Git revision string. Works with tuples representing version numbers and strings for revision identifiers. Used to embed build-specific version details into applications for diagnostics and compatibility checks.",
      "description_length": 305,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "ordma",
      "description": "Provides asynchronous socket operations using RDMA, including connect, accept, read, and write on rsockets. Works with custom socket types and Lwt promises for non-blocking I/O. Enables high-performance network communication in distributed applications requiring low-latency data transfer.",
      "description_length": 289,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ordma_version",
      "description": "Returns the Git commit hash, and the major, minor, and patch version numbers as separate values. Accepts and returns tuples of version components along with the revision string. Used to embed and retrieve precise version information in build artifacts.",
      "description_length": 252,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rsocket",
      "description": "Encapsulates version and revision information through tuples and strings, enabling precise version comparisons and build identification. Supports operations like parsing, formatting, and extracting components for version control. Applications can leverage these to enforce compatibility, track builds, and manage release cycles. For example, it allows checking if a minor version upgrade is backward compatible or extracting the Git hash for debugging.",
      "description_length": 452,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 5,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8333333333333334
  },
  "statistics": {
    "max_description_length": 452,
    "min_description_length": 252,
    "avg_description_length": 323.8,
    "embedding_file_size_mb": 0.01858806610107422
  }
}