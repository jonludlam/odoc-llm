{
  "package": "cohttp_static_handler",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:30:57.607139",
  "modules": [
    {
      "module_path": "Cohttp_static_handler.Asset.What_to_serve",
      "description": "Provides functions to construct objects representing content to serve, including embedded strings, files with optional filename mapping, and files with custom serving names. Operates on strings, file paths, and a custom type `t` that encapsulates serving configurations. Used to define how static assets or inline content are delivered in web servers or embedded systems.",
      "description_length": 371,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_static_handler.Asset.Kind",
      "description": "Provides functions to create and manipulate kind identifiers for different file types, including CSS, JavaScript, favicons, and source maps. Works with the `t` type to represent specific kinds, and includes a `file` function that associates a relative path with a MIME type. Used to categorize assets in web applications, such as defining server-loaded resources or linking source maps.",
      "description_length": 386,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_static_handler.Http_handler",
      "description": "Handles HTTP requests by processing the request body, client address, and request object, then generating a response. Operates on Cohttp_async types including Body, Socket.Address.Inet, and Request. Used to implement custom server logic for routing and response generation in asynchronous web services.",
      "description_length": 302,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_static_handler.Asset",
      "description": "Encapsulates asset handling through a type `t` that manages serving configurations, allowing construction of content from strings, files, and custom names. Supports categorization of assets by type using kind identifiers, with functions to link paths to MIME types for structured resource management. Enables precise control over how static content is delivered, such as serving a CSS file with a specific MIME type or embedding a string with a custom filename. Facilitates organized asset delivery in web applications by combining serving logic with type-specific metadata.",
      "description_length": 574,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_static_handler.Single_page_handler",
      "description": "Provides functions to construct HTTP handlers for single-page applications, including creating boilerplate index pages with or without a specific div, wrapping custom HTML bodies, and generating handlers that serve assets and manage unknown URLs. Operates with types such as `t`, `Asset.t`, and string-based configurations. Useful for building web apps with client-side routing where unknown URLs should load the main index page.",
      "description_length": 429,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "cohttp_static_handler",
      "description": "Handles HTTP GET requests for static files by providing functions to serve files from a directory, manage content types, and handle range requests. Works with file paths, HTTP headers, and byte sequences to deliver content efficiently. Used to serve web assets like HTML, CSS, and images in a web server implementation.",
      "description_length": 319,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_static_handler",
      "description": "manages HTTP request processing, asset delivery, and single-page application routing. It works with types like `t`, `Asset.t`, and Cohttp_async structures to handle request bodies, client addresses, and response generation, while enabling asset serving with MIME type control and SPA index page creation. It allows serving CSS files with specific types, embedding strings with custom names, and routing unknown URLs to a main index. Functions include building handlers that combine asset delivery with client-side routing logic.",
      "description_length": 528,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 574,
    "min_description_length": 302,
    "avg_description_length": 415.57142857142856,
    "embedding_file_size_mb": 0.02585887908935547
  }
}