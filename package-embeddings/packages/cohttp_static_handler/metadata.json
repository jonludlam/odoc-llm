{
  "package": "cohttp_static_handler",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:17.960103",
  "modules": [
    {
      "module_path": "Cohttp_static_handler.Asset.Kind",
      "library": "cohttp_static_handler",
      "description": "This module defines asset kinds for static file handling, supporting types like CSS, JavaScript, favicons, and source maps. It provides constructors for specific asset types and allows creating custom assets with a relative path and MIME type. Used to serve static resources in web applications with precise content-type and caching behavior.",
      "description_length": 342,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_static_handler.Asset.What_to_serve",
      "library": "cohttp_static_handler",
      "description": "This module constructs values representing assets to be served by a static HTTP handler. It supports creating assets from embedded strings, files on disk, or files mapped to specific paths. The `t` type encapsulates the source and optional filename or path for serving, enabling precise control over how assets are delivered. Use cases include serving static files from a known directory or embedding small resources directly into the application.",
      "description_length": 447,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_static_handler.Single_page_handler",
      "library": "cohttp_static_handler",
      "description": "This module provides functions to create handlers for serving single-page applications with customizable HTML content and asset management. It works with HTML strings, asset lists, and metadata to generate index pages that load specified resources. Concrete use cases include serving a minimal HTML page with a designated div for dynamic content or wrapping custom body content in a full HTML document structure with a predefined head section.",
      "description_length": 443,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_static_handler.Http_handler",
      "library": "cohttp_static_handler",
      "description": "This module defines a function type for handling HTTP requests in an asynchronous Cohttp server. It processes incoming requests by taking a request body, client address, and request object, then returns a deferred response. It is used to implement custom request handlers for serving static content or dynamic responses over HTTP.",
      "description_length": 330,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cohttp_static_handler.Asset",
      "library": "cohttp_static_handler",
      "description": "This module manages static assets for web serving, supporting local files, external URLs, and dynamically generated content like OpenSearch XML. It provides a core type to represent assets with their kind, source, and delivery path, allowing registration of resources such as CSS, JavaScript, or embedded XML for browser integration. Child modules define asset kinds with MIME types and path-based resolution, and construct asset values from files, strings, or mapped paths. Examples include embedding an OpenSearch descriptor with custom metadata or serving a JavaScript file with correct content-type and caching.",
      "description_length": 615,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cohttp_static_handler",
      "library": "cohttp_static_handler",
      "description": "This module serves static files from a directory using a Cohttp HTTP handler, mapping URLs to file paths and returning appropriate HTTP responses. It supports building single-page applications with customizable HTML and asset management, handling requests asynchronously through a function type that processes incoming connections and returns deferred responses. The core asset system represents static resources\u2014like CSS, JavaScript, or OpenSearch XML\u2014with their source, kind, and delivery path, enabling precise content-type handling, caching, and embedding. Specific use cases include serving minimal HTML pages with dynamic content placeholders, wrapping custom body content in full HTML structures, and delivering embedded XML descriptors for browser integration.",
      "description_length": 768,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 768,
    "min_description_length": 330,
    "avg_description_length": 490.8333333333333,
    "embedding_file_size_mb": 0.022223472595214844
  }
}