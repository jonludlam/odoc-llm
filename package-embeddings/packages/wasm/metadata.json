{
  "package": "wasm",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 92,
  "creation_timestamp": "2025-07-15T23:19:30.854816",
  "modules": [
    {
      "module_path": "Wasm.Lib.Bigarray.Array1_64",
      "library": "wasm",
      "description": "This module implements a 64-bit indexed one-dimensional big array structure, supporting creation with specified element kind and memory layout, and provides direct access to elements via 64-bit integer indices. It works with `Bigarray.Array1.t` types, allowing precise control over array dimensions and memory representation. Use cases include handling large binary data buffers, interfacing with low-level system APIs, and managing memory-mapped files where 64-bit indexing is required.",
      "description_length": 487,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.V128.F32x4_convert",
      "library": "wasm",
      "description": "This module converts 32-bit integer vectors to 32-bit floating-point vectors, handling signed and unsigned integers, and converts 64-bit floating-point vectors to 32-bit floating-point vectors by truncating higher precision values. It operates on 128-bit vector types representing four 32-bit integers or two 64-bit floats. Use cases include preparing data for WebAssembly SIMD operations requiring specific numeric representations.",
      "description_length": 432,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Values.V128Vec",
      "library": "wasm",
      "description": "Handles 128-bit vector operations in WebAssembly. Converts between 128-bit values and vector representations, supporting direct manipulation of Wasm.V128.t data. Useful for low-level numeric processing and SIMD operations in WebAssembly runtimes.",
      "description_length": 246,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Parse.Script",
      "library": "wasm",
      "description": "This module provides functions to parse WebAssembly script files from various input sources, including strings, channels, and lex buffers. It processes input into a structured representation of a WebAssembly script, capturing commands and module definitions. Use it to load and analyze WebAssembly test scripts or module streams from files, raw strings, or input channels.",
      "description_length": 372,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Ast.IntOp",
      "library": "wasm",
      "description": "This module defines integer operations for WebAssembly abstract syntax, including unary, binary, test, relational, and conversion operations. It works with integer types (I32, I64) and supports bitwise manipulation, arithmetic, comparisons, and type conversions. Concrete use cases include implementing WebAssembly instruction semantics and validating integer transformations in a compiler or interpreter.",
      "description_length": 405,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.V128.IntShape",
      "library": "wasm",
      "description": "This module supports operations on 128-bit integer vectors (`Wasm.V128.t`), treating them as lanes of 8-bit, 16-bit, 32-bit, or 64-bit integers. It provides lane-wise manipulations (extraction, replacement, splatting), arithmetic (addition, multiplication, saturation), bitwise operations (shifts with 32-bit controls, popcount), and comparisons (min/max, signed/unsigned equality). These capabilities enable efficient SIMD parallelism for tasks like media processing, cryptography, and numerical computations in WebAssembly environments.",
      "description_length": 538,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Fxx.RepType",
      "library": "wasm",
      "description": "This module represents 32-bit or 64-bit floating-point values as bit patterns, supporting direct bit manipulation and conversions. It provides constants for special values like zero, infinities, and NaNs, along with bitwise operations and conversions to and from strings and floats. Concrete use cases include low-level floating-point manipulation, serialization, and implementing numeric parsers or formatters.",
      "description_length": 411,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Values.VecType",
      "library": "wasm",
      "description": "This module implements operations for converting between a custom vector type and a standardized vector representation in the context of WebAssembly values. It provides `to_vec` to serialize the custom type into a `Wasm.Values.vec` and `of_vec` to construct the custom type from a vector and an integer size. Concrete use cases include marshaling data between internal structures and WebAssembly-compatible formats during execution or compilation.",
      "description_length": 447,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Ixx.Make",
      "library": "wasm",
      "description": "This module implements a comprehensive set of integer operations for WebAssembly numeric types, encompassing arithmetic (addition, multiplication, division), bitwise manipulations (shifts, rotations, logical operations), and comparison operators with both signed and unsigned interpretations. It operates on fixed-width integer values abstracted through a representation module, supporting advanced operations like saturation arithmetic, sign extension, and bit-counting utilities. These capabilities enable efficient low-level numeric processing, safe type conversions, and precise control over binary representations in contexts like compiler backends or system-level programming.",
      "description_length": 682,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Ast.V128Op",
      "library": "wasm",
      "description": "This module supports operations on 128-bit vectors through a structured set of SIMD-aligned instructions, including arithmetic, bitwise, comparison, and lane-specific manipulations like shifting, splatting, and lane extraction. It works with vector types divided into lanes of varying widths, enabling precise control over data parallelism and format conversions. These capabilities are essential for implementing WebAssembly's SIMD operations, particularly in scenarios requiring efficient vectorized computations for multimedia processing or numerical simulations.",
      "description_length": 566,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Lib.Fun",
      "library": "wasm",
      "description": "This module provides functions for manipulating and applying functions in various forms. It includes identity, currying, and uncurrying operations, as well as a repeat function for executing a function multiple times. These operations work with standard function types and tuples, enabling precise control over function application in scenarios like callback handling or iterative execution.",
      "description_length": 391,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.V8x16",
      "library": "wasm",
      "description": "Performs vector swizzling and shuffling operations on 128-bit vectors interpreted as 16 lanes of 8-bit integers. Accepts two vectors and an index list to rearrange or select elements across lanes. Useful for implementing vectorized data permutations and SIMD-style data shuffling in WebAssembly.",
      "description_length": 295,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Lib.List32",
      "library": "wasm",
      "description": "This module implements list operations using 32-bit integers for indexing and sizing, providing precise control over list manipulation in environments requiring strict size constraints. It supports creating lists of a specified length, retrieving elements by 32-bit index, and mapping functions over lists with index tracking. Use cases include handling memory-safe list transformations and interfacing with systems that require 32-bit size guarantees, such as WebAssembly exports or low-level data buffers.",
      "description_length": 507,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.V128.I64x2",
      "library": "wasm",
      "description": "This module provides SIMD operations for processing 128-bit vectors as pairs of 64-bit integers, supporting arithmetic (addition, subtraction, multiplication, saturation), bitwise manipulations (shifts, masks, popcount), and comparisons (min/max, equality, signed/unsigned ordering). It works with 128-bit vector types interpreted as two 64-bit lanes, enabling parallel computation across both signed and unsigned integer interpretations. These operations are used in high-performance scenarios like cryptographic algorithms, data compression, or numerical simulations requiring vectorized integer processing.",
      "description_length": 609,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.F32x4",
      "library": "wasm",
      "description": "This module supports lane-wise arithmetic (addition, multiplication, square root), comparison (equality, min/max), and permutation operations on 128-bit vectors represented as four 32-bit floating-point lanes. It operates on Wasm.V128.t values, enabling efficient SIMD-style parallel computation for tasks like vector math, graphics processing, or numerical simulations where bulk float operations are required. Specific patterns include per-element transformations, pairwise min/max reduction, and lane-specific extraction or replacement.",
      "description_length": 539,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.V128.V1x128",
      "library": "wasm",
      "description": "This module provides bitwise logical operations on 128-bit vectors, including negation, AND, OR, XOR, ANDNOT, and bit selection. It operates on the `Wasm.V128.t` type, which represents 128-bit values used in WebAssembly SIMD instructions. These functions are used to implement low-level vector manipulations required in WebAssembly execution, such as mask operations and bitwise transformations.",
      "description_length": 395,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.V128.F64x2_convert",
      "library": "wasm",
      "description": "This module provides functions to convert 32-bit floating-point and integer vectors to 64-bit floating-point vectors. It operates on 128-bit vector values, interpreting them as pairs of 64-bit floats or quadruples of 32-bit integers. These conversions are used when transforming data for WebAssembly SIMD operations that require higher precision or different numeric representations.",
      "description_length": 383,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Lib.String",
      "library": "wasm",
      "description": "This module provides functions for converting between strings and character lists, splitting strings on delimiters, breaking strings into fixed-length chunks, and searching for characters matching a predicate. It operates on standard string and list types. Concrete use cases include parsing delimited text, chunking large strings for processing, and character-level string manipulation for formatting or validation.",
      "description_length": 416,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Ast.FloatOp",
      "library": "wasm",
      "description": "This module defines operations for floating-point arithmetic, comparisons, and type conversions in WebAssembly. It includes unary and binary operations like addition, subtraction, absolute value, and square root, as well as comparison and conversion operations between numeric types. These operations are used to manipulate floating-point values in WebAssembly programs, such as performing arithmetic on `f32` or `f64` types or converting between integers and floats.",
      "description_length": 467,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.F64x2",
      "library": "wasm",
      "description": "This module provides arithmetic operations (addition, subtraction, multiplication, division), comparison functions (equality, ordering, min/max), and vector manipulation capabilities (lane extraction, replacement, splatting) for 128-bit vectors interpreted as pairs of 64-bit floating-point numbers. It operates on `Wasm.V128.t` values, enabling efficient parallel computation patterns like SIMD processing. These capabilities are particularly useful in high-performance computing scenarios requiring concurrent floating-point operations, such as scientific simulations or graphics processing.",
      "description_length": 593,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Fxx.S",
      "library": "wasm",
      "description": "This module provides arithmetic operations (addition, subtraction, multiplication, division, square root, rounding), comparisons (min, max, equality checks), bit-level manipulation, and conversions to and from floats and strings for a floating-point type `t`. It is tailored",
      "description_length": 274,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Parse.S",
      "library": "wasm",
      "description": "This module provides functions to parse WebAssembly binary or text format from various input sources, producing a structured representation of the input. It supports parsing from a file path, a string buffer, or an input channel, using a lexing buffer for tokenization. Concrete use cases include loading WebAssembly modules from disk, in-memory strings, or network streams for validation, execution, or analysis.",
      "description_length": 413,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Parse.Module",
      "library": "wasm",
      "description": "This module provides functions to parse WebAssembly module definitions from various input sources, including files, strings, and channels. It processes input into a structured representation consisting of an optional variable and a module definition. Concrete use cases include loading and interpreting WebAssembly modules from disk or network streams.",
      "description_length": 352,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.FloatShape",
      "library": "wasm",
      "description": "This module provides a suite of floating-point arithmetic and comparison operations for 128-bit vector values, supporting element-wise calculations like addition, multiplication, minimum/maximum selection, and pairwise reductions. It operates on 128-bit vectors (`Wasm.V128.t`) interpreted as SIMD lanes of floating-point numbers, enabling efficient parallel processing of numerical data. Typical use cases include high-performance numerical computations and vectorized mathematical transformations in WebAssembly environments.",
      "description_length": 527,
      "index": 23,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Wasm.Values.F32Num",
      "library": "wasm",
      "description": "This module defines operations for converting to and from 32-bit floating-point numbers (`Wasm.F32.t`). It provides `to_num` for embedding floats into a generic numeric operation type and `of_num` for extracting 32-bit floats from a numeric value. These functions are used when working with WebAssembly numeric instructions that require precise float handling, such as constant folding or operand evaluation.",
      "description_length": 408,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I16x8",
      "library": "wasm",
      "description": "This module offers arithmetic, comparison, bitwise, and lane management operations for 128-bit vectors interpreted as eight 16-bit integers (signed or unsigned). It works directly with the V128 type, supporting tasks like saturating arithmetic, population count, bitmask extraction, and logical reductions across parallel lanes. These capabilities are particularly useful in WebAssembly for optimizing multimedia processing, cryptography, or machine learning workloads requiring SIMD parallelism.",
      "description_length": 496,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I32x4",
      "library": "wasm",
      "description": "This module provides lane-wise arithmetic, comparison, and bitwise operations for 128-bit vectors interpreted as four 32-bit signed integers, supporting saturating math, shifts, and reductions. It operates on `Wasm.V128.t` values, enabling efficient SIMD manipulation aligned with WebAssembly's vectorized integer semantics. Typical use cases include optimizing parallelizable integer computations in high-performance domains like image processing, numerical simulations, or machine learning inference within WebAssembly environments.",
      "description_length": 534,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Values.F64Num",
      "library": "wasm",
      "description": "This module converts between 64-bit floating-point values and a generalized numeric type, using operations defined in the Wasm.Values module. It provides `to_num` for converting a value to a polymorphic numeric representation and `of_num` for extracting a 64-bit float from a tagged numeric type. Concrete use cases include handling WebAssembly floating-point constants and interfacing with dynamic numeric values in WebAssembly execution.",
      "description_length": 439,
      "index": 27,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Wasm.Values.I64Num",
      "library": "wasm",
      "description": "Handles conversion between 64-bit integers and numeric values in WebAssembly. It provides `to_num` to wrap 64-bit integers into a WebAssembly numeric type and `of_num` to extract them from that type. Useful when implementing or interacting with WebAssembly instructions that manipulate 64-bit integer values.",
      "description_length": 308,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I8x16_convert",
      "library": "wasm",
      "description": "This module provides functions to convert 16 packed 16-bit integers from two input vectors into 8-bit integers in a single output vector. The `narrow_s` and `narrow_u` functions perform signed and unsigned narrowing conversions, respectively, operating on 128-bit vectors interpreted as sixteen 16-bit lanes. It is used in WebAssembly SIMD operations to reduce vector element sizes while combining data from two sources.",
      "description_length": 420,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Lib.List",
      "library": "wasm",
      "description": "This module implements list operations for value generation, transformation, and querying. It supports indexed list creation, element filtering, mapping with optional results, and pair-wise function application. Use cases include list initialization with repeated values, extracting sublists, finding elements by value or predicate, and flattening higher-dimensional lists.",
      "description_length": 373,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Values.I32Num",
      "library": "wasm",
      "description": "This module defines operations for working with 32-bit integer values in the context of WebAssembly semantics. It includes functions to convert integers to and from a generic numeric type used in WebAssembly evaluation, ensuring correct handling of 32-bit signed integer operations. Concrete use cases include implementing WebAssembly instructions that manipulate 32-bit integers, such as arithmetic and bitwise operations.",
      "description_length": 423,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I32x4_convert",
      "library": "wasm",
      "description": "This module provides vector conversion and arithmetic operations for 128-bit vectors, specifically handling 32-bit and 64-bit floating-point to integer truncation with saturation, signed and unsigned integer extensions, pairwise addition, and external multiplication. It operates on `Wasm.V128.t` values, which represent 128-bit SIMD vectors, and supports operations commonly used in low-level numeric processing and WebAssembly instruction implementations. Concrete use cases include converting floating-point vectors to integers in graphics processing, accelerating integer arithmetic in machine learning kernels, and implementing WebAssembly's SIMD instructions.",
      "description_length": 665,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I16x8_convert",
      "library": "wasm",
      "description": "This module provides operations to convert and manipulate 128-bit vectors interpreted as eight 16-bit integers. It supports narrowing, extending, extended multiplication, and pairwise addition operations, both signed and unsigned. These functions are used for low-level vector arithmetic in WebAssembly code, particularly when handling SIMD operations on 16-bit integer lanes.",
      "description_length": 376,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I8x16",
      "library": "wasm",
      "description": "This module provides arithmetic (including saturation), bitwise, comparison, and lane manipulation operations on 128-bit vectors composed of 16 lanes of 8-bit integers (signed/unsigned). It operates on `Wasm.V128.t` values, supporting tasks like parallel byte-wise computations, population count, shifts, and boolean reductions. These capabilities are particularly useful for high-performance applications such as multimedia processing, cryptography, and WebAssembly-based SIMD workloads that require efficient bulk data manipulation.",
      "description_length": 534,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Error.Make",
      "library": "wasm",
      "description": "Implements functions for generating warnings and errors during WebAssembly validation, using source regions to indicate precise locations in the input. The `warn` function logs a message without interrupting execution, while `error` raises an exception to halt processing on invalid input. Works directly with `Wasm.Source.region` and string messages, used in parsing and validating WebAssembly modules.",
      "description_length": 403,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Lib.Array32",
      "library": "wasm",
      "description": "This module implements array operations using 32-bit integers for indexing, including creating arrays, getting and setting elements, and copying segments between arrays. It works directly with OCaml's built-in array type but enforces int32 bounds for compatibility with WebAssembly memory models. It is used in WebAssembly implementations to manage linear memory buffers and handle array-based data structures with precise size constraints.",
      "description_length": 440,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Ixx.RepType",
      "library": "wasm",
      "description": "This module type provides low-level arithmetic and bitwise operations for a numeric integer type, including addition, multiplication, logical operations, and both signed and unsigned shifts. It supports conversions to and from integers, 64-bit integers, and string representations (decimal and hexadecimal), while exposing the type's bit width for use in WebAssembly environments requiring precise integer manipulation and format interoperability.",
      "description_length": 447,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Lib.Int",
      "library": "wasm",
      "description": "Computes the base-2 logarithm of an integer and checks whether a given integer is a power of two. Works directly with OCaml's `int` type. Useful in low-level numerical computations and bit manipulation tasks where power-of-two checks and logarithmic calculations are required.",
      "description_length": 276,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Lib.Bigarray",
      "library": "wasm",
      "description": "This module provides a 64-bit indexed, one-dimensional big array structure for efficient handling of large binary data. It supports creation with specified element kinds and memory layouts, and allows direct element access using 64-bit integer indices. Operations include array construction, element mutation, and data transfer to and from memory-mapped files or system buffers. Example uses include managing multi-gigabyte datasets, interfacing with low-level system APIs, and optimizing performance-critical numerical computations.",
      "description_length": 533,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Lib.Option",
      "library": "wasm",
      "description": "This module provides functions for handling optional values, including retrieving values with a default, extracting values unconditionally, applying transformations, and performing side effects. It operates on the standard `'a option` type, which represents the presence or absence of a value. Use cases include safely accessing optional configuration settings, processing potentially missing data fields, and conditionally executing logging or cleanup actions.",
      "description_length": 461,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Values.NumType",
      "library": "wasm",
      "description": "This module defines operations for working with numeric types in WebAssembly, specifically providing conversions between a generic numeric type `t` and the `Wasm.Values.num` type. It supports concrete use cases such as interpreting and manipulating WebAssembly numeric values, including converting integers to and from the internal representation used in WebAssembly execution. The module is used when handling numeric constants, function parameters, and results in WebAssembly modules.",
      "description_length": 486,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Parse.Script1",
      "library": "wasm",
      "description": "This module parses WebAssembly script files from various input sources, producing structured script representations. It supports parsing from strings, files, and input channels using a lexing buffer. Concrete use cases include loading and validating WebAssembly module scripts during execution setup or toolchain processing.",
      "description_length": 324,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.V128.I64x2_convert",
      "library": "wasm",
      "description": "This module provides functions to convert 64-bit lanes of 128-bit vectors to wider 128-bit integers, with operations for extending low/high lanes and performing signed/unsigned multiplication. It operates on 128-bit vector types (`Wasm.V128.t`) representing two 64-bit integer lanes. These functions are used in WebAssembly code to implement precise integer arithmetic and conversions required by numeric algorithms and low-level system operations.",
      "description_length": 448,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Spectest",
      "library": "wasm",
      "description": "This module provides functions to create and manipulate WebAssembly globals, tables, and memories, along with defining and invoking functions with typed signatures. It supports concrete operations like instantiating a function from a closure, printing values, and resolving external instances by name. Use cases include embedding WebAssembly test execution, exposing host functions to Wasm modules, and inspecting runtime values during evaluation.",
      "description_length": 447,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.I16",
      "library": "wasm",
      "description": "This module offers arithmetic, bitwise, and comparison operations for 16-bit integers, emulating WebAssembly's i16 semantics using OCaml's `int32`. It supports saturated arithmetic, fixed-point multiplication (Q15), bit counting, sign extension, and conversions to/from strings and integers. These operations are critical for implementing WebAssembly runtime components, such as instruction decoding, numeric validation, and low-level code generation in virtual machines or compilers.",
      "description_length": 484,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Utf8",
      "library": "wasm",
      "description": "This module handles UTF-8 encoding and decoding operations, converting between OCaml strings and lists of Unicode codepoints. It provides two primary functions: `decode`, which transforms a string into a list of codepoints, and `encode`, which reconstructs a string from a list of codepoints. It is useful for processing text in WebAssembly-related contexts where precise Unicode handling is required.",
      "description_length": 401,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Lexer",
      "library": "wasm",
      "description": "Converts lexical positions from OCaml's standard Lexing module to Wasm-specific source positions and extracts tokens from a lexbuf input stream. Works with Lexing.position, lexbuf, and Wasm.Parser.token types. Used during WebAssembly source parsing to translate low-level lexical data into structured token and position information for further processing.",
      "description_length": 355,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Types",
      "library": "wasm",
      "description": "This component provides operations to define and manipulate WebAssembly type hierarchies, check type properties like size and category, and convert type definitions into string representations for debugging or display. It works with algebraic data types representing numeric, vector, reference, function, table, memory, global, and external types, alongside supporting structures like limits and function signatures. These capabilities enable tasks such as type validation, structural inspection during module processing, and serialization for diagnostic tools.",
      "description_length": 561,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.I64_convert",
      "library": "wasm",
      "description": "This module provides functions to convert 32-bit and 64-bit floating-point values to 64-bit integers, with support for signed and unsigned truncation, saturation, and reinterpretation. It operates on Wasm.I32, Wasm.F32, and Wasm.F64 types, producing Wasm.I64 results. These conversions are used when translating WebAssembly instructions that manipulate integer and floating-point data, such as when handling memory addresses or numeric transformations in a WebAssembly interpreter or compiler.",
      "description_length": 493,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.I64",
      "library": "wasm",
      "description": "This module provides arithmetic, bitwise manipulation, and comparison operations for 64-bit integers, including saturation arithmetic to handle overflow and underflow. It supports conversions between integer representations (e.g., bit patterns and strings) and low-level operations like shifts, rotations, and bit counting. These features are critical for systems programming, virtual machine implementations, and scenarios requiring precise control over 64-bit integer behavior in environments adhering to WebAssembly semantics.",
      "description_length": 529,
      "index": 50,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Wasm.Decode",
      "library": "wasm",
      "description": "Decodes WebAssembly binary modules into abstract syntax trees using the `decode` function, which takes a module name and binary data. The `decode_custom` function extracts custom sections by name from the binary, returning their contents as a list of strings. These functions directly process raw WebAssembly binaries into structured representations for analysis or transformation tasks.",
      "description_length": 387,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Ixx",
      "library": "wasm",
      "description": "This module provides efficient bitvector arithmetic for WebAssembly integer types, combining low-level operations such as addition, multiplication, bitwise shifts, and precise overflow handling with modules that extend support for comparisons, conversions, and bit-level utilities. It centers around fixed-width 32-bit and 64-bit integer types, enabling operations like sign extension, saturation arithmetic, and bitwise rotations, with direct use in interpreters, JIT compilers, and formal verification. The combined interface supports arithmetic, logical, and conversion operations, allowing tasks such as binary value manipulation, numeric type conversion, and string formatting in WebAssembly execution and compilation contexts.",
      "description_length": 732,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Encode",
      "library": "wasm",
      "description": "Encodes WebAssembly modules and custom sections into binary format. It takes an abstract syntax tree representation of a WebAssembly module or a custom section name and content, and produces the corresponding binary string. This module is used when generating or modifying WebAssembly binaries directly from OCaml code.",
      "description_length": 319,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.F32",
      "library": "wasm",
      "description": "This module provides arithmetic operations (addition, subtraction, multiplication, division, square root), comparison logic (minimum, maximum, ordered checks), and conversion utilities for 32-bit floating-point values, including handling special states like NaN and infinity. It operates on 32-bit float representations, supporting transformations between numeric, string, and bitwise forms while adhering to WebAssembly's floating-point semantics. These capabilities are particularly useful for low-level numeric processing, WebAssembly runtime implementations, and scenarios requiring precise control over floating-point behavior in constrained environments.",
      "description_length": 660,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Memory",
      "library": "wasm",
      "description": "This module provides dynamic memory management and typed data manipulation capabilities, focusing on allocation, resizing, and precise access to scalar values, vectors, and packed data structures. It operates on memory instances containing raw byte sequences, with specialized support for vector types aligned to specific offsets for efficient SIMD operations. These tools enable low-level memory safety and performance optimization in scenarios like array processing, buffer management, and hardware-accelerated computations.",
      "description_length": 526,
      "index": 55,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Wasm.Lib",
      "library": "wasm",
      "description": "This module combines low-level data manipulation with functional utilities to support precise handling of WebAssembly semantics. It provides 32-bit and 64-bit integer operations, memory-safe lists and arrays, and utilities for strings and options, enabling tasks like Wasm execution, memory management, and data transformation. Functions include indexed list creation, bigarray element access, string splitting, option unwrapping, and function repetition. Use cases range from parsing and processing binary data to implementing runtime logic for Wasm modules with strict size and type constraints.",
      "description_length": 597,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Instance",
      "library": "wasm",
      "description": "This module manages WebAssembly module instances, providing operations to access and manipulate their internal components such as functions, tables, memories, and exports. It works with structured types like `module_inst` and reference types like `FuncRef`, enabling direct interaction with WebAssembly runtime elements. Concrete use cases include resolving exported functions by name, inspecting module structure, and constructing empty module instances for initialization purposes.",
      "description_length": 483,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Sexpr",
      "library": "wasm",
      "description": "This module handles the serialization and pretty-printing of S-expression data structures, which consist of atoms or nested nodes with string tags and child expressions. It provides functions to output formatted S-expressions to a channel, print them to standard output, or convert them to a string, with an integer parameter controlling indentation. Concrete use cases include generating human-readable representations of WebAssembly module structures for debugging or external tooling integration.",
      "description_length": 499,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.I8",
      "library": "wasm",
      "description": "This module implements arithmetic operations with saturation (addition, subtraction, Q15 multiplication), bitwise manipulations (shifts, rotations, population count, sign extension), and comparison operators for 8-bit signed/unsigned integers represented as `int32`. It supports conversions between integer/string representations, explicit overflow handling via saturation, and zero/sign-aware bit-level operations. These capabilities are critical for low-level systems programming, WebAssembly runtime implementations, and embedded environments requiring precise 8-bit integer semantics with controlled overflow behavior.",
      "description_length": 622,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.F64_convert",
      "library": "wasm",
      "description": "This module converts 32-bit and 64-bit integer types to 64-bit floating-point values, supporting both signed and unsigned interpretations. It also includes a function to reinterpret the bits of a 64-bit integer as a 64-bit float. These operations are used when translating numeric values between integer and floating-point representations in WebAssembly execution.",
      "description_length": 364,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Eval",
      "library": "wasm",
      "description": "Implements initialization and invocation of WebAssembly modules. It initializes a module instance from an abstract syntax tree and external imports, then executes exported functions with provided arguments. This module directly manipulates WebAssembly AST and instance structures, handling function calls and value passing in a WebAssembly runtime context.",
      "description_length": 356,
      "index": 61,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Fxx",
      "library": "wasm",
      "description": "This module provides arithmetic and bitwise operations for 64-bit floating-point numbers following WebAssembly semantics, operating directly on float representations to support scalar and vectorized computations via the `Make` functor. It includes core operations like addition, multiplication, comparison, and conversion, enabling precise implementation of WebAssembly's `f64` instruction set and optimization of numerical processing in interpreters or compilers. The accompanying submodules handle low-level bit manipulation, special value constants, and direct conversions, allowing tasks like float serialization, parsing, and bit-level transformation. Together, they support both high-level arithmetic and fine-grained control over floating-point behavior.",
      "description_length": 761,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Ast",
      "library": "wasm",
      "description": "This module provides a comprehensive set of operations for manipulating WebAssembly's core numeric types, structured into specialized submodules for integers, vectors, and floating-point values. The main data types include 32- and 64-bit integers, 128-bit vectors with configurable lanes, and 32- and 64-bit floating-point numbers, each supporting a rich set of unary, binary, and conversion operations. Users can perform tasks such as arithmetic on integer and floating-point values, bitwise manipulation, SIMD vector operations for parallel processing, and type conversions between numeric representations. Together, these components enable precise implementation of WebAssembly instruction semantics, compiler optimizations, and low-level numeric computations.",
      "description_length": 763,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.I32",
      "library": "wasm",
      "description": "This module supports arithmetic, bitwise, and conversion operations on 32-bit integers, including saturating arithmetic, fixed-point multiplication, and bit-level manipulations like rotations, sign extension, and population count. It handles both signed and unsigned interpretations, with conversions to/from bit representations, strings, and other numeric types. These operations are used in low-level systems programming, compiler implementations, or binary translation tasks requiring precise control over 32-bit integer behavior, such as WebAssembly semantics or embedded systems emulation.",
      "description_length": 594,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Global",
      "library": "wasm",
      "description": "This module manages WebAssembly global variables, providing operations to allocate, type-check, read, and write global state. It works with `global_type` and `value` types from the `Wasm.Types` and `Wasm.Values` modules. Concrete use cases include initializing mutable global variables in a WebAssembly instance and accessing or updating their values during execution.",
      "description_length": 368,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Import",
      "library": "wasm",
      "description": "This module resolves imports in a WebAssembly module by linking them to external instances. It processes an abstract syntax tree module to produce a list of external imports and allows registering custom resolvers for named imports that map external types to instances. Concrete use cases include integrating host functions or external modules when instantiating WebAssembly code.",
      "description_length": 380,
      "index": 66,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Parse",
      "library": "wasm",
      "description": "This module parses WebAssembly binary and text formats into structured representations, implementing a unified interface across submodules for handling modules, expressions, and scripts. It supports parsing from files, strings, and input channels, producing validated module definitions or command sequences that can be executed or analyzed. Use it to load and validate Wasm modules from disk, evaluate standalone expressions, or process test scripts with sequences of Wasm commands. Submodules specialize in module parsing, single-expression parsing, and script interpretation, providing targeted APIs for different Wasm input structures.",
      "description_length": 639,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Flags",
      "library": "wasm",
      "description": "This module manages runtime configuration flags controlling behavior during WebAssembly execution. It provides mutable references to boolean and integer settings that influence validation, tracing, and output formatting. Concrete use cases include enabling trace logging, setting execution budgets, and toggling dry-run modes for testing.",
      "description_length": 338,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Error",
      "library": "wasm",
      "description": "This module handles error reporting and validation during WebAssembly processing, using source regions to pinpoint issues in the input. It defines `warn` for non-fatal messages and `error` for fatal exceptions, both taking a source region and a message. Main data types include `Wasm.Source.region` for location tracking and strings for descriptive messages. For example, it can log a warning about a deprecated feature or raise an error on invalid module structure during parsing.",
      "description_length": 481,
      "index": 69,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Js",
      "library": "wasm",
      "description": "Converts a WebAssembly script into its JavaScript representation. Works with WebAssembly script data structures. Useful for generating executable JavaScript code from WebAssembly modules.",
      "description_length": 187,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Operators",
      "library": "wasm",
      "description": "This module provides instruction constructors for arithmetic, memory access, control flow, and SIMD operations in WebAssembly. It operates on numeric types (32/64-bit integers and floats), vectors (v128, i8x16, f32x4), and memory structures with alignment/offset parameters, enabling low-level data manipulation and optimized parallel processing. Specific use cases include numeric computation pipelines, memory-safe data access patterns, and SIMD-accelerated algorithms for tasks like image processing or cryptography.",
      "description_length": 519,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Values",
      "library": "wasm",
      "description": "This module manages WebAssembly values through precise operations on 32/64-bit integers, 32/64-bit floats, 128-bit vectors, and reference types, supporting equality checks, default value creation, and string formatting\u2014including hexadecimal. It enables runtime value manipulation, type validation, and debugging, with child modules handling specialized conversions and operations. For example, 32-bit integers are converted to and from a generic numeric type, 64-bit floats are embedded into polymorphic numeric representations, and 128-bit vectors are manipulated for SIMD operations. Additional submodules marshal custom vector types, convert between internal and WebAssembly-compatible formats, and handle numeric constants and function parameters.",
      "description_length": 751,
      "index": 72,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Parser",
      "library": "wasm",
      "description": "This module defines a token type representing WebAssembly instructions, types, and syntax elements, along with parsing functions for converting token streams into structured WebAssembly modules and scripts. It includes constructors for vector operations, memory access, control flow, and constants, working directly with AST nodes, memory offsets, and value types. Concrete use cases include parsing WebAssembly text format (WAT) into executable modules and validating script definitions with precise syntactic constructs.",
      "description_length": 522,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Run",
      "library": "wasm",
      "description": "This module executes WebAssembly code from various input sources. It provides functions to run code directly from a string, a file, or standard input, and includes a tracing function for logging messages during execution. The module works with WebAssembly binary and text formats, enabling interactive testing and integration of WebAssembly modules in applications.",
      "description_length": 365,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.I32_convert",
      "library": "wasm",
      "description": "This module provides functions to convert 64-bit integers and 32/64-bit floating-point values to 32-bit integers, supporting both wrapping and saturating truncation. It operates on Wasm.I64.t, Wasm.F32.t, and Wasm.F64.t types, producing Wasm.I32.t results. These conversions are used when translating or enforcing value ranges during WebAssembly instruction execution, such as when handling numeric operations that must fit within 32-bit integer limits.",
      "description_length": 453,
      "index": 75,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Data",
      "library": "wasm",
      "description": "This module manages raw binary data in WebAssembly memory. It provides allocation, size retrieval, byte loading, and resource cleanup operations for data segments. It works directly with WebAssembly memory addresses and character-based byte access, enabling efficient handling of low-level data in WebAssembly execution contexts.",
      "description_length": 329,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Env",
      "library": "wasm",
      "description": "This module provides operations for handling WebAssembly values and execution control, including type validation, value extraction, and program termination. It works with WebAssembly-specific data types such as `value`, `value_type`, `extern_type`, and `extern`, along with standard lists. Concrete use cases include extracting an integer from a WebAssembly value, aborting execution, exiting with a result, and resolving external imports by type and name.",
      "description_length": 456,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Arrange",
      "library": "wasm",
      "description": "Converts WebAssembly AST elements into S-expressions for serialization or debugging. It processes instructions, functions, modules, and scripts, transforming them into a structured textual format. Useful for generating readable output from parsed WebAssembly code or for preparing data to be written to a file.",
      "description_length": 310,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Script",
      "library": "wasm",
      "description": "This module defines types and structures for representing WebAssembly script elements, including variables, literals, definitions, actions, and assertions. It supports parsing and handling WebAssembly values such as numbers, references, and vectors, along with pattern matching constructs for these values. It is used for implementing and validating WebAssembly test scripts and execution contexts.",
      "description_length": 398,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Print",
      "library": "wasm",
      "description": "This module provides functions to print WebAssembly AST elements, including instructions, functions, modules, and scripts, to an output channel. It supports both textual and binary script representations and formats the output with indentation for readability. Concrete use cases include debugging WebAssembly code and generating human-readable dumps of parsed WebAssembly modules or scripts.",
      "description_length": 392,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.F32_convert",
      "library": "wasm",
      "description": "This module converts 64-bit floating-point numbers to 32-bit floating-point numbers and converts 32-bit and 64-bit integers (both signed and unsigned) to 32-bit floating-point numbers. It also reinterprets 32-bit integers as 32-bit floating-point numbers without changing their bit representation. These operations are used when translating or manipulating numeric values between different bit widths and representations in WebAssembly.",
      "description_length": 436,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128",
      "library": "wasm",
      "description": "This module provides SIMD operations on 128-bit vectors partitioned into typed lanes of fixed counts, enabling parallel arithmetic, comparisons, bitwise operations, and data manipulation across integer and floating-point types. It includes submodules for lane-specific operations on 8-bit, 16-bit, 32-bit, and 64-bit integers and floats, supporting conversions, narrowing, widening, saturation, and shuffling across vector formats. You can perform per-lane arithmetic on 32-bit floats, convert 64-bit floats to 32-bit, extract and replace lanes in integer vectors, and apply bitwise logic across full vectors. Specific applications include accelerating cryptographic routines, optimizing image processing, and implementing high-performance numerical computations in WebAssembly.",
      "description_length": 778,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Valid",
      "library": "wasm",
      "description": "Validates WebAssembly modules by checking their structure and type correctness. It ensures that the module adheres to the WebAssembly specification, including validation of function signatures, memory constraints, and control flow integrity. Useful during compilation or loading of WebAssembly code to catch malformed modules before execution.",
      "description_length": 343,
      "index": 83,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Elem",
      "library": "wasm",
      "description": "This module manages element segments in WebAssembly, providing operations to allocate, access, and manipulate reference lists. It works with `elem` types representing element segments and `ref_` lists for table initialization. Concrete use cases include setting up table data in WebAssembly modules and retrieving or dropping references during execution.",
      "description_length": 354,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Source",
      "library": "wasm",
      "description": "This module defines position and region data structures for tracking source code locations, including file, line, and column information. It provides functions to create and convert these structures to string representations, as well as operators to associate arbitrary values with source regions. These features support precise error reporting and source mapping in parsing and compilation tasks.",
      "description_length": 397,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Func",
      "library": "wasm",
      "description": "This module manages the allocation and typing of WebAssembly functions, both from AST definitions and host implementations. It works with function types, instance environments, and value lists to define callable entities. Concrete use cases include instantiating Wasm functions from module definitions and wrapping host-side OCaml functions to be called from Wasm code.",
      "description_length": 369,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Eval_vec",
      "library": "wasm",
      "description": "This module evaluates vector operations for WebAssembly, handling test, unary, binary, and comparison operations on vector values. It supports operations like splatting scalar values into vectors, extracting or replacing elements, and applying shifts or bitmask operations. These functions are used to implement low-level vector computations in WebAssembly execution.",
      "description_length": 367,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Eval_num",
      "library": "wasm",
      "description": "This module evaluates numeric operations on WebAssembly values, handling unary, binary, conversion, test, and relational operations. It works directly with numeric types represented in the `Wasm.Values.num` variant and uses operation types defined in `Wasm.Ast`. It is used to execute low-level numeric instructions during WebAssembly program interpretation.",
      "description_length": 358,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Table",
      "library": "wasm",
      "description": "This module manages table objects in WebAssembly, supporting operations like allocation, resizing, and element access. It works with table types, indices, and reference values to store and manipulate data in a table structure. Concrete use cases include dynamically growing tables, initializing tables with reference values, and copying lists of references into table positions.",
      "description_length": 378,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Free",
      "library": "wasm",
      "description": "This module analyzes WebAssembly AST nodes to track free variables across different identifier categories\u2014such as types, globals, and functions\u2014using set-based representations. It computes free variables from expressions, instructions, and module components, combining results through set unions to support static analysis tasks like variable capture detection and scope validation. Submodules extend this functionality to specific WebAssembly structures, enabling precise analysis of functions, tables, and memory definitions. For example, it can determine which globals remain free within a function body or verify that all referenced types are properly bound in a module.",
      "description_length": 674,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm",
      "library": "wasm",
      "description": "This collection provides comprehensive tools for building, manipulating, and executing WebAssembly modules. It includes data types for WebAssembly values, types, functions, tables, memories, and control structures, along with operations for numeric computation, bit manipulation, memory access, and type checking. You can define and invoke host functions, parse and emit WebAssembly text and binary formats, validate modules, manage runtime state, and perform low-level numeric and vector operations with precise control over overflow, rounding, and representation. Examples include compiling and running WebAssembly code from OCaml, inspecting and modifying module instances, implementing WebAssembly interpreters or compilers, and handling Unicode, floating-point, and SIMD operations with strict adherence to WebAssembly semantics.",
      "description_length": 834,
      "index": 91,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 97,
    "meaningful_modules": 92,
    "filtered_empty_modules": 5,
    "retention_rate": 0.9484536082474226
  },
  "statistics": {
    "max_description_length": 834,
    "min_description_length": 187,
    "avg_description_length": 463.5869565217391,
    "embedding_file_size_mb": 0.33454322814941406
  }
}