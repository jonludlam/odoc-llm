{
  "package": "wasm",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 86,
  "creation_timestamp": "2025-08-15T16:10:52.453240",
  "modules": [
    {
      "module_path": "Wasm.Lib.Bigarray.Array1_64",
      "library": "wasm",
      "description": "This module implements a 64-bit indexed one-dimensional Bigarray with operations for creating, accessing, modifying, and slicing arrays. It supports arrays of any Bigarray kind and layout, using 64-bit integers for dimensions and indices. Concrete use cases include handling large numerical datasets, memory-mapped files, and interfacing with low-level system APIs requiring precise array manipulation.",
      "description_length": 402,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Values.I64Num",
      "library": "wasm",
      "description": "Handles conversion between 64-bit integers and a generic numeric type in WebAssembly. It provides `to_num` to convert a value to a polymorphic numeric type, and `of_num` to create a 64-bit integer from an integer and a generic numeric value. Used when interacting with WebAssembly instructions that require explicit 64-bit integer handling.",
      "description_length": 340,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Lib.Array32",
      "library": "wasm",
      "description": "This module provides operations to create, access, modify, and copy arrays with 32-bit integer indices. It supports fixed-size arrays of arbitrary elements, enabling precise control over memory layout and access patterns. Concrete use cases include implementing memory buffers, numerical computations, and low-level data structures requiring 32-bit indexing.",
      "description_length": 358,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Values.V128Vec",
      "library": "wasm",
      "description": "This module provides direct conversions between 128-bit vector values and their representation as byte vectors. It supports reading from and writing to memory buffers using low-level vector operations. Concrete use cases include handling SIMD data in WebAssembly execution and interfacing with binary formats requiring 128-bit alignment.",
      "description_length": 337,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.F32x4_convert",
      "library": "wasm",
      "description": "This module converts 32-bit integer vectors to 32-bit floating-point vectors and demotes 64-bit floating-point vectors to 32-bit floating-point vectors, operating on 128-bit vector values. It provides precise conversion functions for signed and unsigned 32-bit integers and truncates 64-bit floats to 32-bit floats using zero as the high lane values. These operations are essential for numerical computations in WebAssembly code involving vectorized data processing.",
      "description_length": 466,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Lib.String",
      "library": "wasm",
      "description": "This module provides functions for converting between strings and character lists, splitting strings on delimiters or into chunks, and searching for characters based on predicates. It operates directly on the `string` and `char` types, enabling tasks like parsing text or manipulating string content. Concrete use cases include tokenizing input by separators, slicing strings into fixed-size segments, and scanning for specific characters in a controlled manner.",
      "description_length": 462,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Lib.Fun",
      "library": "wasm",
      "description": "This module provides functions for manipulating and applying functions in various forms. It includes identity, currying, and uncurrying operations, as well as a repeat function for executing an effectful function a fixed number of times. These operations work with arbitrary types `'a`, `'b`, and `'c`, and are useful for adapting function signatures and controlling effect execution.",
      "description_length": 384,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I64x2_convert",
      "library": "wasm",
      "description": "This module provides functions to convert 64-bit lanes within 128-bit vectors, including sign and zero extensions of low and high lanes, as well as extended multiplication operations producing low and high 64-bit results. It operates on the `Wasm.V128.t` type, which represents 128-bit vectors. These operations are used for precise manipulation and arithmetic on 64-bit integer lanes in WebAssembly SIMD code.",
      "description_length": 410,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.F64x2_convert",
      "library": "wasm",
      "description": "This module provides functions to convert 32-bit floating-point and integer vectors to 64-bit floating-point vectors. It operates on 128-bit vector values, interpreting them as vectors of four 32-bit integers or four 32-bit floats. These conversions are used when transforming data for numerical computations requiring higher precision, such as in signal processing or mathematical simulations.",
      "description_length": 394,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I32x4_convert",
      "library": "wasm",
      "description": "This module provides vector conversion and arithmetic operations for 128-bit SIMD values. It includes functions for saturating truncation of floating-point vectors to signed or unsigned 32-bit integers, sign and zero extensions, pairwise addition, and extended multiplication of 32-bit integer vectors. These operations are used for efficient numerical computations in WebAssembly SIMD code, particularly in multimedia processing and numerical simulations.",
      "description_length": 456,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Parse.Script",
      "library": "wasm",
      "description": "This module provides functions to parse WebAssembly script files, strings, and channels into an abstract syntax tree. It operates on input sources like file paths, raw strings, and input channels, producing structured script representations. Concrete use cases include loading and interpreting WebAssembly test scripts or module definitions from various input formats.",
      "description_length": 368,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.F32x4",
      "library": "wasm",
      "description": "This module specializes in SIMD arithmetic and comparison operations on 128-bit vectors interpreted as four 32-bit floating-point lanes, including addition, multiplication, min/max calculations, and lane-wise transformations. It manipulates `Wasm.V128.t` values through operations like lane extraction, replacement, absolute value computation, and square root derivation, while supporting conversions between vectors and float lists. It is particularly useful for high-performance numerical computations, graphics processing, and WebAssembly-based applications requiring parallel float operations.",
      "description_length": 597,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Parse.Module",
      "library": "wasm",
      "description": "This module provides functions to parse WebAssembly module definitions from various input sources such as files, strings, and channels. It processes the input into a structured representation consisting of an optional variable and a module definition. Use this module to load and analyze WebAssembly modules from different input formats in a consistent way.",
      "description_length": 357,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.V8x16",
      "library": "wasm",
      "description": "Performs vector swizzling and shuffling operations on 128-bit vectors interpreted as 16 lanes of 8-bit integers. Accepts two input vectors and an index list to rearrange or select elements across lanes. Useful for implementing vectorized data permutations and SIMD operations in WebAssembly.",
      "description_length": 291,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I64x2",
      "library": "wasm",
      "description": "This module supports operations on 128-bit vectors treated as pairs of 64-bit signed integers, including arithmetic (addition, multiplication, saturating operations), bitwise manipulations (shifts, population count), and comparisons (min, max, equality checks). It works with `Wasm.V128.t` values, emphasizing lane-level access for extracting or replacing individual 64-bit elements and reducing vectors to scalar masks or boolean aggregates. These capabilities are used in WebAssembly for optimizing parallel computations in domains like signal processing, cryptography, or physics simulations where dual 64-bit integer operations are required.",
      "description_length": 645,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Lib.List32",
      "library": "wasm",
      "description": "This module implements list operations using 32-bit integers for indexing and sizing, providing precise control over list manipulation in environments requiring strict size constraints. It supports creating lists of a specified length, retrieving elements by 32-bit index, and transforming lists through indexed mapping. Use cases include handling memory-safe lists in WebAssembly bindings and managing fixed-size data structures where 32-bit arithmetic is necessary.",
      "description_length": 467,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Ast.IntOp",
      "library": "wasm",
      "description": "This module defines operations for integer manipulation in WebAssembly, including unary, binary, test, relational, and conversion operations. It works with integer types such as 32-bit and 64-bit signed and unsigned integers, supporting actions like addition, bitwise operations, comparisons, and type conversions. Concrete use cases include implementing arithmetic logic, overflow checks, and type transformations in WebAssembly execution.",
      "description_length": 440,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Lib.Bigarray",
      "library": "wasm",
      "description": "This module implements a one-dimensional Bigarray with 64-bit indexing, supporting creation, access, modification, and slicing of arrays for any Bigarray kind and layout. It works with large numerical datasets, memory-mapped files, and low-level system APIs requiring precise array manipulation.",
      "description_length": 295,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Values.F32Num",
      "library": "wasm",
      "description": "This module defines operations for working with 32-bit floating-point numbers in the WebAssembly semantics. It provides functions to convert between numeric types and perform typed operations, specifically handling `float32` values. Concrete use cases include interpreting and manipulating WebAssembly instructions that operate on 32-bit floats, such as arithmetic operations or value conversions in a WebAssembly engine.",
      "description_length": 421,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Free.Set",
      "library": "wasm",
      "description": "This module implements a sorted set data structure for `int32` values, supporting efficient membership checks, ordered traversal, and set-theoretic operations like union and intersection. It provides both functional transformations (e.g., `map`, `filter`) and imperative-style iterations over elements, along with conversions to and from lists and sequences. Typical use cases include managing ordered collections of unique integers, performing set algebra, or integrating sorted set data with pipelines using sequence operations.",
      "description_length": 530,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Fxx.Make",
      "library": "wasm",
      "description": "This module implements arithmetic and comparison operations for floating-point numbers following WebAssembly semantics, including addition, multiplication, square root, and ordered comparisons alongside specialized operations like copysign, truncation, and handling of NaNs and infinities. It operates on an abstract float type `t` with a bitwise `bits` representation, enabling both numeric computations and direct manipulation of floating-point encodings. These capabilities are critical for accurately executing WebAssembly instructions that require precise floating-point behavior, such as validating Wasm binary encodings or implementing Wasm runtime environments with strict IEEE 754 compliance.",
      "description_length": 701,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.V1x128",
      "library": "wasm",
      "description": "This module provides bitwise logical operations on 128-bit vectors, including negation, AND, OR, XOR, ANDNOT, and bit selection. It operates on the `Wasm.V128.t` type, which represents 128-bit values used in WebAssembly SIMD instructions. These functions are used to implement low-level vector manipulations required in WebAssembly execution, such as mask operations and bitwise conditionals.",
      "description_length": 392,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Ast.V128Op",
      "library": "wasm",
      "description": "This module supports arithmetic, bitwise, and comparison operations on 128-bit vectors, including lane-level manipulations like splatting, replacing, and extracting. Data structures are vectors partitioned into lanes of integers or floating-point values with varying widths, parameterized through a common lane operation framework. These operations enable efficient SIMD execution in applications such as multimedia processing, cryptographic algorithms, and parallel data transformations.",
      "description_length": 488,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I16x8",
      "library": "wasm",
      "description": "This module supports lane-level manipulation, arithmetic operations (including saturating addition and subtraction), and bitwise transformations on 128-bit vectors divided into eight 16-bit integer lanes. It operates on packed integer vectors (`Wasm.V128.t`) with explicit support for signed and unsigned interpretations, enabling efficient parallel computations. Typical applications include multimedia processing, numerical analysis, and low-level optimizations where vectorized saturation arithmetic or bitmask reductions are required.",
      "description_length": 538,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.V128.I32x4",
      "library": "wasm",
      "description": "This module provides vectorized operations for processing 128-bit vectors as four 32-bit signed integers, including arithmetic (addition, multiplication, saturation), comparisons (min, max), bitwise manipulations, lane-level access, and boolean reductions. It operates on `Wasm.V128.t` values, enabling efficient parallel computation patterns aligned with WebAssembly's SIMD instruction set. These capabilities are particularly useful for high-performance applications like audio processing, cryptography, or numerical simulations requiring bulk integer operations.",
      "description_length": 565,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I8x16",
      "library": "wasm",
      "description": "This module supports arithmetic, bitwise, and comparison operations on 16-element vectors of 8-bit integers (signed/unsigned), represented as `Wasm.V128.t`. It enables lane-level manipulation, saturation arithmetic, and bitmask extraction, catering to low-level data parallelism in tasks like image processing or cryptographic algorithms.",
      "description_length": 338,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I8x16_convert",
      "library": "wasm",
      "description": "This module provides functions to convert 16 packed 16-bit integers from two input vectors into 8-bit integers in a resulting vector. The `narrow_s` and `narrow_u` operations perform signed and unsigned narrowing conversions, respectively, operating on Wasm.V128.t values. It is used in WebAssembly SIMD operations to reduce vector element sizes while combining data from two sources.",
      "description_length": 384,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Parse.Script1",
      "library": "wasm",
      "description": "This module provides functions to parse WebAssembly script files, strings, and channels into an abstract syntax tree representation. It supports input sources such as file paths, raw strings, and input channels, producing a `Wasm.Script.script` value. Use this module to load and parse WebAssembly module definitions from various input sources for further processing or execution.",
      "description_length": 380,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Values.F64Num",
      "library": "wasm",
      "description": "Handles conversion and manipulation of 64-bit floating-point numbers within WebAssembly value operations. Works directly with `Wasm.F64.t` and interacts with `Wasm.Values.num` for numeric representations. Used to extract or inject 64-bit floats into WebAssembly operand stacks and instruction evaluations.",
      "description_length": 305,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.I16x8_convert",
      "library": "wasm",
      "description": "This module provides operations for converting and transforming 128-bit vectors interpreted as eight 16-bit integers. It supports narrowing, extending, extended multiplication, and pairwise addition operations, handling both signed and unsigned interpretations. These functions are used for low-level vector manipulation in WebAssembly code, particularly when working with SIMD instructions that require precise control over 16-bit lanes.",
      "description_length": 438,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Lib.Int",
      "library": "wasm",
      "description": "Computes the base-2 logarithm of an integer and checks whether a given integer is a power of two. Works directly with OCaml's `int` type. Useful in low-level numeric operations, bit manipulation, and when working with binary data structures where power-of-two sizes or indices are required.",
      "description_length": 290,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.V128.F64x2",
      "library": "wasm",
      "description": "Implements arithmetic, comparison, and lane manipulation operations for 128-bit vectors (represented as `Wasm.V128.t`) interpreted as pairs of 64-bit floating-point numbers. These operations support numerical computations requiring parallel processing of two float values, such as vector math or data-parallel algorithms in WebAssembly environments.",
      "description_length": 349,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Ast.FloatOp",
      "library": "wasm",
      "description": "This module defines operations for working with floating-point numbers in WebAssembly, including unary, binary, comparison, and conversion operations. It supports data types like 32-bit and 64-bit floats and provides precise control over rounding, arithmetic, and type conversion. Concrete use cases include implementing numeric transformations, validating floating-point comparisons, and converting between integer and floating-point representations in WebAssembly code.",
      "description_length": 471,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Values.I32Num",
      "library": "wasm",
      "description": "This module defines operations for working with 32-bit integer values in the context of WebAssembly semantics. It provides functions to convert between raw integers and WebAssembly numeric types, and to manipulate those values within the constraints of WebAssembly's i32 type. Concrete use cases include implementing WebAssembly instructions that operate on 32-bit integers, such as arithmetic operations or value conversions.",
      "description_length": 426,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Lib.List",
      "library": "wasm",
      "description": "This module provides list manipulation functions such as creating lists with repeated values or generated elements, slicing, extracting elements, and searching by value or predicate. It supports operations like mapping with filtering, concatenating mapped lists, and applying functions to pairs of consecutive elements. These functions are useful for tasks like input preprocessing, sequence transformation, and iterative algorithm implementation.",
      "description_length": 447,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Ixx.Make",
      "library": "wasm",
      "description": "This module offers arithmetic, bitwise, and comparison operations for WebAssembly integer semantics, including saturation arithmetic, sign-preserving conversions, and string parsing/formatting. It operates on an abstract integer type `t` represented through the `Rep` module, which models Wasm's specific integer behavior, such as signed/unsigned distinctions and overflow handling. These functions are essential for implementing Wasm compilers, interpreters, or analysis tools that require precise integer operations aligned with Wasm's execution model.",
      "description_length": 554,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Error.Make",
      "library": "wasm",
      "description": "This module handles warning and error reporting during WebAssembly validation, providing precise location tracking. It works with source regions and string messages, enabling diagnostic output tailored to specific parts of the input. Use it to signal non-fatal issues or halt processing on invalid WebAssembly structures.",
      "description_length": 321,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Lib.Option",
      "library": "wasm",
      "description": "This module provides functions for handling optional values, including retrieving values with a default, extracting values unconditionally, applying transformations, and performing side effects. It operates on the standard `'a option` type, which represents the presence or absence of a value. Use cases include safely processing optional configuration values, transforming optional data fields, and conditionally executing logging or cleanup actions.",
      "description_length": 451,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Instance",
      "library": "wasm",
      "description": "This module manages WebAssembly module instances, providing operations to access and manipulate their components. It includes functions to retrieve exports by name, convert external values to their types, and initialize empty module instances. Key data structures include module_inst, which holds collections of functions, tables, memories, and other WebAssembly entities, while supporting direct interaction with references to functions via FuncRef.",
      "description_length": 450,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Utf8",
      "library": "wasm",
      "description": "This module handles UTF-8 encoding and decoding operations. It converts between OCaml strings and lists of Unicode codepoints. Use it to process text in WebAssembly-related contexts where precise Unicode handling is required.",
      "description_length": 225,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Import",
      "library": "wasm",
      "description": "Implements module linking and external value registration for WebAssembly instances. Processes a WebAssembly module's import section to resolve external dependencies and binds host-defined functions or globals to module imports by name. Used during module instantiation to connect runtime implementations with imported identifiers.",
      "description_length": 331,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.I64_convert",
      "library": "wasm",
      "description": "This module provides functions to convert 32-bit integers and 32/64-bit floating-point values to 64-bit integers, supporting both signed and unsigned extensions, truncations, and saturation-based conversions. It operates on numeric types `Wasm.I32.t`, `Wasm.F32.t`, and `Wasm.F64.t`, producing `Wasm.I64.t` results. These operations are used when translating WebAssembly instructions that manipulate integer and floating-point registers, such as converting a float to an integer for arithmetic operations or memory access.",
      "description_length": 522,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Eval_vec",
      "library": "wasm",
      "description": "This module evaluates vector operations for WebAssembly, including arithmetic, bitwise, comparison, conversion, and permutation operations on vector and numeric values. It provides functions for unary, binary, and ternary operations, as well as extracting, replacing, and splatting vector elements. Concrete use cases include executing WebAssembly vector instructions like addition, bitwise masking, comparisons, and element-wise operations during instruction evaluation.",
      "description_length": 471,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Global",
      "library": "wasm",
      "description": "This module manages global variables in WebAssembly, providing operations to allocate, type-check, read, and write global state. It works with `global_type` and `value` types to enforce correctness and manage mutable or immutable global variables. Concrete use cases include initializing module globals with specified types and values, and dynamically updating or inspecting global variable values during execution.",
      "description_length": 415,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Valid",
      "library": "wasm",
      "description": "Validates WebAssembly modules by checking their structure and type correctness. It ensures that the module adheres to the WebAssembly specification, including validation of function signatures, memory constraints, and control flow integrity. Useful during compilation or loading of WebAssembly code to catch malformed modules before execution.",
      "description_length": 343,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Error",
      "library": "wasm",
      "description": "This module defines error types and handling utilities for WebAssembly operations. It includes functions to create, match, and convert errors related to parsing, validation, and execution. Concrete use cases include reporting invalid module structures, type mismatches, and runtime failures in WebAssembly code.",
      "description_length": 311,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Memory",
      "library": "wasm",
      "description": "This module manages dynamic memory allocation and resizing while supporting efficient vector data manipulation through typed load and store operations. It operates on raw memory buffers and structured vector types, enabling precise control over numeric data layouts and memory alignment. These capabilities are critical for optimizing performance-critical WebAssembly code sections that handle binary data serialization, numerical computations, or low-level memory management.",
      "description_length": 476,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Values",
      "library": "wasm",
      "description": "Facilitates handling of WebAssembly value types by supporting operations like type conversion, equality checks, and serialization. It works with numeric types (32-bit/64-bit integers, floats), 128-bit vectors, and reference types, enabling tasks such as initializing default values, comparing data structures for validation, and converting values to hexadecimal strings for debugging or storage purposes.",
      "description_length": 404,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Encode",
      "library": "wasm",
      "description": "Encodes WebAssembly modules and custom sections into binary format. It takes an abstract syntax tree representation of a WebAssembly module or a named custom section with raw data, and produces the corresponding binary string. This module is used to serialize WebAssembly structures for storage or transmission.",
      "description_length": 311,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Spectest",
      "library": "wasm",
      "description": "This module provides functions to create and manipulate WebAssembly globals, tables, memories, and functions for testing purposes. It includes utilities to define test functions with custom behavior, print values, and look up external instances by name. Concrete use cases include setting up test environments for WebAssembly module validation and execution.",
      "description_length": 358,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.I32",
      "library": "wasm",
      "description": "This module implements 32-bit integer arithmetic, bitwise manipulation, and conversion routines for WebAssembly semantics. It operates on 32-bit integer values with both signed and unsigned interpretations, supporting operations like saturating addition/subtraction, bit counting, rotation, and WebAssembly-specific averages while handling overflow and underflow. Typical use cases include implementing WebAssembly's low-level integer operations, bit-level data processing, and safe numeric conversions between integers and string representations.",
      "description_length": 547,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.I16",
      "library": "wasm",
      "description": "This module provides low-level arithmetic, bitwise, and comparison operations for 16-bit integers, including saturating arithmetic, bit shifts, rotations, and sign-aware conversions. It operates on 16-bit signed integers stored as `int32` with explicit overflow handling and supports reinterpretation between signed and unsigned representations. Typical use cases include WebAssembly runtime implementations, embedded systems requiring precise integer control, and numerical algorithms needing bit-level manipulation or bounded arithmetic.",
      "description_length": 539,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Flags",
      "library": "wasm",
      "description": "This module manages runtime configuration flags for controlling behavior during WebAssembly execution. It provides mutable references to boolean and integer values that influence execution modes, such as enabling tracing, skipping checks, or setting output width. These flags are used to adjust interpreter operation and debugging output in toolchains or runtime environments.",
      "description_length": 376,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.F32_convert",
      "library": "wasm",
      "description": "This module converts 64-bit floating-point numbers to 32-bit floating-point numbers and reinterprets integer values as 32-bit floats. It operates on 32-bit and 64-bit integer and float types. Concrete use cases include numeric type coercion for WebAssembly execution and low-level float manipulation.",
      "description_length": 300,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Fxx",
      "library": "wasm",
      "description": "Implements arithmetic and comparison operations for floating-point numbers according to WebAssembly semantics, including addition, multiplication, square root, ordered comparisons, copysign, and truncation, with support for handling NaNs and infinities. Operates on an abstract float type `t` with a bitwise `bits` representation, enabling both numerical operations and direct manipulation of floating-point encodings. Used for validating Wasm binary encodings and implementing Wasm runtime environments requiring strict IEEE 754 compliance.",
      "description_length": 541,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.F64",
      "library": "wasm",
      "description": "This module provides arithmetic operations (addition, multiplication, square root), comparison functions (minimum, maximum), and conversion utilities for 64-bit floating-point numbers, including",
      "description_length": 194,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Sexpr",
      "library": "wasm",
      "description": "This module handles the serialization and pretty-printing of S-expressions, which are represented as either atoms or labeled nodes with child expressions. It provides functions to output formatted S-expressions to a channel, print them directly, or convert them to a string, with control over indentation. Concrete use cases include generating readable textual representations of abstract syntax trees or structured data in a Lisp-like format.",
      "description_length": 443,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Ast",
      "library": "wasm",
      "description": "This module provides structured representations of WebAssembly instructions and AST elements, supporting numeric/vector operations (unary, binary, SIMD), memory accesses (load/store), and module component definitions (globals, functions, tables). It works with parameterized types that embed source position metadata for validation and error tracking, handling expressions, element segments, imports, and exports. Key use cases include AST manipulation during compilation, type extraction for module linking, and source-aware transformations of WebAssembly programs.",
      "description_length": 566,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Eval_num",
      "library": "wasm",
      "description": "This module evaluates numeric operations on WebAssembly values, handling unary, binary, test, relation, and conversion operations. It works directly with numeric types represented in the `Wasm.Values.num` structure. Use this module to execute low-level numeric instructions such as addition, comparison, and type conversion during WebAssembly program evaluation.",
      "description_length": 362,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Types",
      "library": "wasm",
      "description": "This module supports inspection, classification, and serialization of WebAssembly types, including numeric, vector, and reference types, along with function signatures, tables, memories, and globals. It provides utilities to determine type sizes, check properties like mutability, compare type definitions for compatibility, and generate string representations for debugging, enabling tasks like validating type constraints during module validation or displaying structured type information for developer tooling.",
      "description_length": 513,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Elem",
      "library": "wasm",
      "description": "This module manages element segments in WebAssembly, providing operations to allocate, access, and manipulate reference lists. It works with `elem` types representing element segments and `ref_` lists containing function or extern references. Concrete use cases include initializing tables with function references and dynamically modifying table entries during execution.",
      "description_length": 372,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Parser",
      "library": "wasm",
      "description": "Parses WebAssembly text format into abstract syntax trees using a lexer and token definitions. It processes tokens representing Wasm instructions, types, memory operations, and module structure to construct script and module definitions. Concrete use cases include reading `.wast` files, validating Wasm syntax, and enabling tooling like interpreters or compilers to analyze or execute Wasm code.",
      "description_length": 396,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Eval",
      "library": "wasm",
      "description": "Implements initialization and invocation of WebAssembly modules. It initializes a module with a list of external instances, returning a module instance, and allows invoking functions within that instance by passing arguments and returning results. Works directly with WebAssembly AST modules, function instances, and value types. Useful for executing WebAssembly code in a host environment, such as running compiled programs or sandboxed computations.",
      "description_length": 451,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Arrange",
      "library": "wasm",
      "description": "Converts WebAssembly AST elements into S-expressions for serialization or debugging. It processes instructions, functions, modules, and scripts, supporting both textual and binary output formats. Useful for generating human-readable representations of WebAssembly code or for interfacing with tools that consume S-expressions.",
      "description_length": 326,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Print",
      "library": "wasm",
      "description": "This module provides functions to print WebAssembly AST elements to an output channel, including instructions, functions, modules, and scripts. It supports both textual and binary script representations and formats the output with indentation for readability. Concrete use cases include debugging WebAssembly code or generating human-readable dumps of parsed WebAssembly modules.",
      "description_length": 379,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.F32",
      "library": "wasm",
      "description": "This module provides arithmetic operations (addition, multiplication, square root), comparisons (min, max, ordered checks), and value transformations (rounding, absolute value, sign manipulation) for 32-bit floating-point numbers. It operates on a custom type `t` for numeric representation and an `int32` alias `bits` for bitwise manipulation, supporting conversions to and from floats, strings, and raw bit patterns. These functions are particularly useful for implementing WebAssembly semantics, numerical analysis requiring precise control over floating-point behavior, and handling edge cases like NaN propagation or infinity detection.",
      "description_length": 641,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Func",
      "library": "wasm",
      "description": "This module manages the allocation and typing of WebAssembly functions, both from AST definitions and host implementations. It works with function types, instances, and value lists to define callable entities in a WebAssembly module. Concrete use cases include instantiating functions from parsed Wasm code and defining host functions that interface with Wasm execution.",
      "description_length": 370,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Data",
      "library": "wasm",
      "description": "This module manages raw binary data in WebAssembly memory. It provides allocation, size retrieval, byte loading, and resource cleanup operations. Use it to handle memory buffers, read from or write to Wasm memory regions, or manage data lifetimes explicitly.",
      "description_length": 258,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Ixx",
      "library": "wasm",
      "description": "This module implements arithmetic, bitwise, and comparison operations following WebAssembly's integer semantics, including saturation arithmetic, sign-preserving conversions, and string parsing and formatting. It works with an abstract integer type `t` defined through a representation module `Rep`, which captures Wasm-specific behaviors like signed/unsigned distinctions and overflow handling. It is used for building Wasm compilers, interpreters, or analysis tools requiring precise integer operations aligned with Wasm's execution model.",
      "description_length": 541,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Lexer",
      "library": "wasm",
      "description": "Converts lexical positions from OCaml's standard Lexing module to Wasm-specific source positions and extracts tokens from a lexing buffer according to WebAssembly's lexical structure. Works directly with `Lexing.position` and `Lexing.lexbuf`, producing `Wasm.Source.pos` and `Wasm.Parser.token` values. Used during the initial parsing phase to translate raw input into structured tokens and positions for error reporting and syntax analysis.",
      "description_length": 441,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.I64",
      "library": "wasm",
      "description": "This module provides low-level 64-bit integer arithmetic, bitwise manipulation, and conversion operations, including saturated arithmetic, bit shifting, rotation, and comparison functions. It operates on 64-bit integer values and bit sequences, supporting both signed and unsigned representations with overflow handling and hexadecimal string conversions. Typical use cases include implementing numerical computations requiring precise bit-level control, emulating WebAssembly's I64 instruction semantics, and managing integer representations in systems programming contexts.",
      "description_length": 575,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.F64_convert",
      "library": "wasm",
      "description": "This module converts 32-bit and 64-bit integer types to 64-bit floating-point values, supporting both signed and unsigned interpretations. It also includes a function to reinterpret the bits of a 64-bit integer as a 64-bit float. These operations are used when translating numeric values between different representations in WebAssembly code.",
      "description_length": 342,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Script",
      "library": "wasm",
      "description": "This module defines types and structures for representing WebAssembly script elements, including variables, literals, definitions, actions, and assertions. It supports parsing and handling WebAssembly values like numbers, references, and vectors, along with pattern matching over them. It is used for implementing and validating WebAssembly test scripts and execution contexts.",
      "description_length": 377,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Table",
      "library": "wasm",
      "description": "This module manages table objects in WebAssembly, supporting operations like allocation, resizing, and element access. It works with table types, indices, and reference values to store and manipulate elements in a table structure. Concrete use cases include dynamically growing tables, initializing tables with reference values, and copying sequences of elements into tables during execution.",
      "description_length": 392,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Operators",
      "library": "wasm",
      "description": "This module provides low-level WebAssembly instruction constructors for control flow manipulation (blocks, loops, branches), memory access (loads, stores, memory management), numeric computations (integer/floating-point arithmetic, comparisons, conversions), and SIMD vector operations (lane-wise manipulations, arithmetic, bitwise operations) on 128-bit vectors. It operates on WebAssembly AST instruction nodes (`instr'`), numeric types (`i32`, `i64`, `f32`, `f64`), and vector types (`v128`, `i8x16`, `f32x4`, `f64x2`), interacting with memory, tables, locals, and globals. These operations are used to implement compiled language semantics, optimize numeric algorithms, and leverage SIMD parallelism for tasks like image processing or machine learning inference in WebAssembly modules.",
      "description_length": 789,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Run",
      "library": "wasm",
      "description": "This module executes WebAssembly code from various input sources. It provides functions to run code directly from a string, a file, or standard input, and returns success status or traces execution details. Use it to embed and evaluate WebAssembly scripts within an OCaml application.",
      "description_length": 284,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Decode",
      "library": "wasm",
      "description": "Decodes WebAssembly binary modules into abstract syntax trees using the `decode` function, which takes a module name and binary data. The `decode_custom` function extracts custom sections by name from a binary, returning their contents as a list of strings. These functions operate directly on raw binary strings and WebAssembly AST structures, enabling inspection and manipulation of WebAssembly modules at a low level.",
      "description_length": 420,
      "index": 76,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Parse",
      "library": "wasm",
      "description": "This module provides functions to parse WebAssembly modules and scripts from files, strings, and channels into structured representations. It processes input into either a module definition or an abstract syntax tree, supporting direct loading and analysis of WebAssembly code. Concrete use cases include reading `.wasm` files, interpreting `.wat` script files, and converting raw WebAssembly binary or text format into executable structures.",
      "description_length": 442,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.I32_convert",
      "library": "wasm",
      "description": "This module performs precise numeric conversions between 32-bit integer types and other numeric types, including signed and unsigned truncation, saturation-based truncation, and reinterpretation of bits. It operates on values of type `Wasm.I32.t`, `Wasm.I64.t`, `Wasm.F32.t`, and `Wasm.F64.t`. These functions are used when translating or emulating WebAssembly numeric operations that require exact bit-level control or value conversion.",
      "description_length": 437,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Free",
      "library": "wasm",
      "description": "This module tracks sets of free variables across WebAssembly components like functions, globals, and tables, using a record of `Set.t` values for each category. It provides operations to compute free variables from WebAssembly AST elements such as instructions, constants, and modules, returning aggregated sets of unbound identifiers. Concrete use cases include static analysis for unbound references in WebAssembly code, optimizing variable usage, and validating module correctness.",
      "description_length": 484,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Js",
      "library": "wasm",
      "description": "Converts a WebAssembly script into its JavaScript representation. Works with WebAssembly script data structures. Useful for generating executable JavaScript code from WebAssembly modules.",
      "description_length": 187,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Lib",
      "library": "wasm",
      "description": "This module provides precise data manipulation capabilities for functions, lists, arrays, optional values, integers, and strings. It includes operations like function composition, list and array transformations with 32-bit and 64-bit indexing, optional value handling, integer checks, and string parsing. Use cases include low-level numeric processing, memory-safe list and array management, effect control, and structured text manipulation.",
      "description_length": 441,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.I8",
      "library": "wasm",
      "description": "Implements low-level arithmetic (addition, multiplication, saturating operations), bitwise manipulations (shifts, rotations, population count), and comparisons (signed/unsigned equality, ordering) for 8-bit integers represented as `int32`. Provides conversions between signed and unsigned representations, fixed-point scaling, and string serialization, adhering to WebAssembly semantics for overflow handling and bit-level precision. Useful in virtual machine implementations or compilers requiring strict control over integer behavior, such as emulating Wasm execution environments or optimizing numeric code.",
      "description_length": 610,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wasm.Source",
      "library": "wasm",
      "description": "Tracks source code positions and regions with file, line, and column information. Provides functions to create and format position and region values, along with operators to attach region metadata to arbitrary values. Useful for error reporting and source mapping in compilers or interpreters handling WebAssembly code.",
      "description_length": 319,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm.Env",
      "library": "wasm",
      "description": "This module provides operations for handling WebAssembly execution environments, including value conversion, error signaling, and external instance lookup. It works with WebAssembly values, types, and external instances, supporting concrete tasks like extracting integers from values, managing function exits, and resolving external references by name. Specific use cases include validating value types during execution, converting between OCaml and WebAssembly representations, and handling runtime errors in a WebAssembly interpreter.",
      "description_length": 536,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wasm",
      "library": "wasm",
      "description": "This module supports low-level manipulation of WebAssembly artifacts through operations like binary encoding/decoding, AST transformation, numeric/vector computations, and execution state management. It operates on structured data including WebAssembly AST nodes, binary modules, numeric primitives (I32, I64, V128), tables, and type descriptors, with validation and source-position tracking. Designed for compiler toolchains, interpreters, and analysis tools, it enables precise control over WebAssembly semantics, memory behavior, and runtime interactions through strict numeric handling and structured execution primitives.",
      "description_length": 626,
      "index": 85,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 88,
    "meaningful_modules": 86,
    "filtered_empty_modules": 2,
    "retention_rate": 0.9772727272727273
  },
  "statistics": {
    "max_description_length": 789,
    "min_description_length": 187,
    "avg_description_length": 426.6511627906977,
    "embedding_file_size_mb": 1.246750831604004
  }
}