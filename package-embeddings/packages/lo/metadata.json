{
  "package": "lo",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:04.820646",
  "modules": [
    {
      "module_path": "Lo.Address",
      "description": "Constructs and manipulates address representations using a host string and port integer. Operates on the abstract type `t` to encapsulate network address information. Used to initialize a connection target or retrieve a server-suggested default address.",
      "description_length": 253,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lo.Message",
      "description": "Converts message data into a string for debugging purposes. Works with a custom `timetag` type representing time information and a variant `data` type encoding different message payloads. Used to serialize messages before logging or network transmission.",
      "description_length": 254,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lo.Server",
      "description": "Handles server creation and message processing by binding to a port and invoking a custom handler for incoming requests. Processes message data arrays associated with specific paths and blocks until new messages arrive. Safely terminates server operations to prevent further interactions after stopping.",
      "description_length": 303,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "lo",
      "description": "Provides functions for creating and manipulating audio buffers, processing audio signals with filters, and generating sound waves. Works with data types such as float arrays, signal generators, and audio processing graphs. Used for real-time audio synthesis, effect application, and signal analysis in music and audio software.",
      "description_length": 327,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lo",
      "description": "Encapsulates OSC communication by managing addresses, serializing messages, and handling server interactions. It works with types `t` for network addresses, `timetag` for time stamps, and `data` for message payloads, enabling address construction, message serialization, and server setup. Users can create and manipulate network targets, log message contents, and process incoming OSC data on a bound port. Examples include sending messages to a specified host and port, logging formatted message strings, and running a server that responds to OSC events.",
      "description_length": 555,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 555,
    "min_description_length": 253,
    "avg_description_length": 338.4,
    "embedding_file_size_mb": 0.018570899963378906
  }
}