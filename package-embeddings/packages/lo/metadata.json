{
  "package": "lo",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:51:45.971775",
  "modules": [
    {
      "module_path": "Lo.Server",
      "library": "lo",
      "description": "Handles OSC message reception by creating a server that listens on a specified port. It provides functions to start the server with a custom message handler, receive messages synchronously, and stop the server. This module is used to implement OSC servers that process incoming messages based on their paths and data payloads.",
      "description_length": 326,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lo.Message",
      "library": "lo",
      "description": "Handles OSC message data types and conversions. Provides a polymorphic variant type for OSC data, including integers, floats, strings, and timetags, along with a function to convert message contents to a string. Useful for inspecting or logging the payload of incoming or outgoing OSC messages.",
      "description_length": 294,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lo.Address",
      "library": "lo",
      "description": "Handles OSC address creation and management with string and port inputs. Provides `create` to construct addresses from host and port, and `default` to generate a default address. Used for configuring target endpoints when sending OSC messages.",
      "description_length": 243,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lo",
      "library": "lo",
      "description": "This module implements OSC message handling with functions to create and manage network addresses, construct and inspect message payloads, and run a server to receive messages. It works with OSC addresses, polymorphic variant message data types, and server configurations. Concrete use cases include sending OSC packets to a specified host and port, parsing incoming message contents, and setting up a listening server to handle real-time OSC events.",
      "description_length": 450,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 450,
    "min_description_length": 243,
    "avg_description_length": 328.25,
    "embedding_file_size_mb": 0.05835247039794922
  }
}