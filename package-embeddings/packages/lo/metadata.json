{
  "package": "lo",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:49.431241",
  "modules": [
    {
      "module_path": "Lo.Address",
      "library": "lo",
      "description": "This module creates and manages network addresses for sending OSC messages. It supports operations to construct addresses from host and port values or obtain a default address. Useful for directing OSC packets to specific destinations or using system-provided defaults.",
      "description_length": 269,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lo.Server",
      "library": "lo",
      "description": "This module creates and manages OSC servers that listen on specified ports, handling incoming messages with user-defined functions. It works with server instances and OSC message data, providing functions to start listening, process messages, and stop the server. Use it to implement OSC-based communication endpoints that react to incoming messages in real-time applications.",
      "description_length": 376,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lo.Message",
      "library": "lo",
      "description": "Handles OSC message data types and serialization. It defines a polymorphic variant type for OSC data, including integers, floats, strings, blobs, MIDI messages, and timetags, along with a function to convert these data types into human-readable strings for debugging purposes. Useful for inspecting the contents of OSC messages when developing networked audio applications or debugging message routing.",
      "description_length": 402,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lo",
      "library": "lo",
      "description": "This module enables OSC-based communication by combining address management, message handling, and server operations into a unified interface for real-time network interaction. It provides core types like `Address.t` for routing, `Message.data` for structured data exchange, and `Server.t` for handling incoming messages with custom callbacks. With support for OSC data serialization and human-readable debugging, it allows building clients that send typed values to specific endpoints or servers that react to messages on a port. Example uses include sending MIDI-like events between music applications or building interactive installations that respond to OSC-triggered commands.",
      "description_length": 681,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 681,
    "min_description_length": 269,
    "avg_description_length": 432.0,
    "embedding_file_size_mb": 0.014947891235351562
  }
}