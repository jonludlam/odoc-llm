{
  "package": "builder",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:36.067038",
  "modules": [
    {
      "module_path": "Builder.Log",
      "library": "builder",
      "description": "This module provides functions for logging messages at various severity levels, including debug, info, warning, error, and application-specific logs. It supports structured logging with custom formatters, tags, and result type handling to propagate errors after logging them. Concrete use cases include tracking execution flow, reporting failures with contextual data, and integrating with error-handling pipelines that require side-effect logging.",
      "description_length": 448,
      "index": 0,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Builder.Asn",
      "library": "builder",
      "description": "This module implements ASN.1-based serialization and deserialization for structured build system data, focusing on strict decoding and bidirectional conversions between values and strings. It operates on types like jobs, execution states, commands, and their results, with schema definitions enabling reliable data interchange in distributed build scenarios. Specific utilities include string representation of command variants for debugging and serialization workflows.",
      "description_length": 470,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Builder",
      "library": "builder",
      "description": "This module coordinates distributed build workflows using jobs, execution results, and versioned commands, while child modules enhance its capabilities with structured logging and ASN.1 serialization. The core provides fault-tolerant scheduling over Unix sockets, state synchronization, and interruptible task execution, with utilities for result chaining and low-level I/O. Structured logging supports tagged, severity-based message tracking and error propagation, while the serialization submodule enables strict, bidirectional data conversion for debugging and distributed communication. Example uses include synchronizing build states across nodes, logging execution flow with contextual errors, and serializing command variants for remote transmission.",
      "description_length": 757,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 757,
    "min_description_length": 448,
    "avg_description_length": 558.3333333333334,
    "embedding_file_size_mb": 0.011319160461425781
  }
}