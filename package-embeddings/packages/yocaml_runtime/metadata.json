{
  "package": "yocaml_runtime",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:06:17.548110",
  "modules": [
    {
      "module_path": "Yocaml_runtime.Server.Kind",
      "library": "yocaml_runtime",
      "description": "This module defines a type `t` that classifies paths as either directories or files. It includes a function `from_path` that lifts a raw path into a `t` value by determining if it is a directory using a provided predicate and building the absolute path with a concatenation function. It is used to abstract path handling logic when constructing servers that need to distinguish between files and directories for routing or static asset serving.",
      "description_length": 444,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Server.Request_path",
      "library": "yocaml_runtime",
      "description": "Handles request paths by converting HTTP paths into structured values, determining content types from filenames. Works with custom types through predicates and string manipulation functions. Useful for routing and static file handling in web servers.",
      "description_length": 250,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Server.Pages",
      "library": "yocaml_runtime",
      "description": "Implements functions to generate error and directory listing pages for a server. Works with strings and server kinds to produce HTML content. Used to display 404 error messages and directory contents in a browser.",
      "description_length": 213,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Hash",
      "library": "yocaml_runtime",
      "description": "Implements SHA256 hashing for strings, providing a function to compute the hash of a given input string. Works directly with string data to generate fixed-size hexadecimal hash outputs. Useful for tasks like content integrity verification, caching, or generating unique identifiers from text inputs.",
      "description_length": 299,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Error",
      "library": "yocaml_runtime",
      "description": "This module defines error types for handling common runtime failures such as file and directory operations, command execution, and time reading. It includes the `common` type with variants for specific failure cases and a `common_to_string` function to convert errors to human-readable strings. It is used to manage and report errors during runtime operations involving paths and system commands.",
      "description_length": 396,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Log",
      "library": "yocaml_runtime",
      "description": "This module provides functions to log messages at different severity levels and configure a default logging setup. It works with the `level` type to categorize log messages as error, warning, info, debug, or application-level. Concrete use cases include tracking build progress, reporting errors during file processing, and debugging pipeline stages in a static site generator.",
      "description_length": 377,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Server",
      "library": "yocaml_runtime",
      "description": "This module provides core tools for building servers with structured request routing, path classification, and error handling. It defines server kinds and operations for displaying messages and handling exceptions, while its submodules offer concrete functionality: one classifies paths into files and directories, another processes HTTP paths into typed values and determines content types, and a third generates HTML error pages and directory listings. Together, these components enable constructing web servers that serve static content, route requests based on path structure, and display formatted error responses. Example use cases include serving a directory tree with proper MIME types and generating custom 404 pages for invalid routes.",
      "description_length": 745,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime",
      "library": "yocaml_runtime",
      "description": "This module combines utilities for content hashing, error handling, logging, and server construction. It provides SHA256 hashing for strings, typed errors for system operations, configurable logging levels, and a structured framework for building static web servers with routing and error responses. You can verify data integrity with hashes, log detailed runtime events, handle file and command errors gracefully, and serve static content with custom routing and error pages. Example workflows include building a static site generator with logging and error reporting, or setting up a web server that serves files with correct MIME types and handles invalid routes with custom HTML responses.",
      "description_length": 693,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 745,
    "min_description_length": 213,
    "avg_description_length": 427.125,
    "embedding_file_size_mb": 0.029465675354003906
  }
}