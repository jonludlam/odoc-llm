{
  "package": "yocaml_runtime",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:32:09.617095",
  "modules": [
    {
      "module_path": "Yocaml_runtime.Server.Kind",
      "description": "Determines whether a given path represents a file or directory by evaluating a predicate function and constructing a result using a concatenation function. Works with path-like values and string identifiers to encode path semantics. Used to annotate file system entries with their type during traversal or processing.",
      "description_length": 317,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Server.Request_path",
      "description": "Provides functions to determine content types from filenames and to construct path objects from various data structures. Works with file and directory predicates, string concatenation, and path normalization. Used to parse and validate HTTP request paths into structured representations.",
      "description_length": 287,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Server.Pages",
      "description": "Generates HTML content for debug pages using string and list operations. Processes directory listings and error messages, combining them with kind-specific data. Used to construct custom 404 responses and directory index views.",
      "description_length": 227,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Error",
      "description": "Provides string conversion for error codes representing common runtime issues across Unix and Eio. Operates on a custom type `common` encoding error identifiers. Used to generate human-readable error messages in system-level applications.",
      "description_length": 238,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Hash",
      "description": "Provides a function to compute the SHA256 hash of a string, returning the result as a hexadecimal string. Works with raw string inputs and outputs fixed-length hash values. Used to generate unique identifiers for text content.",
      "description_length": 226,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Log",
      "description": "Logs messages with specified severity levels and configures a default logging setup. Operates on log levels and string messages. Used to emit structured logs during application runtime and initialize logging behavior.",
      "description_length": 217,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Server",
      "description": "Encapsulates server-side path handling, content type resolution, and HTML generation for debugging. Processes path semantics using predicates and string operations, constructs structured path objects, and generates dynamic HTML content. Supports tasks like determining file types, parsing HTTP requests, and creating custom error pages. Enables fine-grained control over file system traversal and web response formatting.",
      "description_length": 421,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "yocaml_runtime",
      "description": "Provides functions to manage and execute build processes, including initializing a development environment and triggering compilation. Works with project configurations, build commands, and directory structures. Used to set up isolated builds and ensure consistent project compilation.",
      "description_length": 285,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime",
      "description": "Encodes and decodes error identifiers into human-readable messages, computes SHA256 hashes for string inputs, logs structured messages with severity levels, and handles server-side path operations to generate HTML content. Key data types include error codes, hexadecimal strings, log levels, and path objects, with operations for conversion, hashing, logging, and content generation. It enables tasks such as generating unique identifiers, emitting debug logs, and constructing custom error pages. Examples include converting error codes to messages, hashing user input for fingerprinting, and generating HTML responses for HTTP requests.",
      "description_length": 638,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 638,
    "min_description_length": 217,
    "avg_description_length": 317.3333333333333,
    "embedding_file_size_mb": 0.033145904541015625
  }
}