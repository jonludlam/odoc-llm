{
  "package": "yocaml_runtime",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:05:50.548844",
  "modules": [
    {
      "module_path": "Yocaml_runtime.Server.Kind",
      "library": "yocaml_runtime",
      "description": "This module defines a type `t` that classifies paths as either `Directory` or `File`. It includes a function `from_path` that lifts a raw path into a `t` by checking if it is a directory and concatenating a string to it. Use this to distinguish between files and directories when building static site generators or file processors that require path classification.",
      "description_length": 364,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_runtime.Server.Request_path",
      "library": "yocaml_runtime",
      "description": "This module handles request paths by mapping HTTP paths to structured values using content type detection and path traversal logic. It works with abstract path representations and string-based paths, supporting operations like determining content types from filenames and lifting paths into structured values. Concrete use cases include routing static assets and resolving request paths into typed representations for handlers.",
      "description_length": 427,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Server.Pages",
      "library": "yocaml_runtime",
      "description": "Implements functions to generate error and directory listing pages for servers. It operates on strings and lists of server components, producing formatted HTML output. Useful for displaying 404 errors and server directory contents during development.",
      "description_length": 250,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Server",
      "library": "yocaml_runtime",
      "description": "This module provides tools for building servers with path classification, request path handling, and generation of error and directory listing pages. It works with path types, string-based routes, and server components to support concrete use cases like routing static assets, resolving HTTP paths into typed values, and rendering HTML responses for errors or directory contents. Helpers include a prompt function and an exception handler for managing server preamble and error output.",
      "description_length": 485,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yocaml_runtime.Log",
      "library": "yocaml_runtime",
      "description": "This module provides functions to configure a default logger and log messages at specified levels such as error, warning, info, and debug. It works with the `level` type, which represents logging severity, and strings for message content. Concrete use cases include logging build progress in a compiler or tracking runtime events in an interpreter.",
      "description_length": 348,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Hash",
      "library": "yocaml_runtime",
      "description": "Implements SHA256 hashing for strings, providing a function to generate fixed-size hash digests from arbitrary string input. Works directly with string data to produce hexadecimal-encoded output. Useful for generating unique identifiers, verifying data integrity, or building content-addressable storage systems.",
      "description_length": 312,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime.Error",
      "library": "yocaml_runtime",
      "description": "This module defines a variant type `common` representing specific error conditions encountered during file and directory operations, such as reading, writing, or creating files and directories, along with command execution failures. It includes a function `common_to_string` that converts these errors into human-readable strings. Concrete use cases include handling I/O errors in build systems or file-processing pipelines where precise error reporting is required.",
      "description_length": 466,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yocaml_runtime",
      "library": "yocaml_runtime",
      "description": "This module includes submodules for handling file operation errors with string conversion, generating SHA256 hashes from strings, logging messages at configurable severity levels, and building servers with path routing and HTML response generation. It works with data types such as error variants, strings, logging levels, and server components. Use cases include I/O error reporting in build systems, data integrity checks, compiler progress logging, and serving static assets with custom HTTP path handling.",
      "description_length": 509,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 509,
    "min_description_length": 250,
    "avg_description_length": 395.125,
    "embedding_file_size_mb": 0.11637496948242188
  }
}