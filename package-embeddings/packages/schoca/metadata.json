{
  "package": "schoca",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 11,
  "creation_timestamp": "2025-06-18T16:33:01.605196",
  "modules": [
    {
      "module_path": "ScmDynnum.C",
      "description": "Performs arithmetic and complex number operations including addition, subtraction, multiplication, division, and inversion, along with conjugation, square root, and polar conversion. Works with a complex number type representing real and imaginary components. Used for mathematical computations in signal processing and numerical analysis.",
      "description_length": 339,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ScmEval.Environment",
      "description": "Manages symbol bindings and variable lookups in a lexical environment, supporting both direct value access and reference-based updates. It operates on environments represented as `ScmTypes.environment` and handles bindings of strings to `ScmTypes.datum` values or references. Used to dynamically add, retrieve, and modify variables during evaluation of a Scheme-like language.",
      "description_length": 376,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "schoca",
      "description": "Provides functions for parsing and validating email addresses, including checking domain existence and format compliance. Operates on strings and custom record types representing email components. Used to filter invalid entries in user registration systems and verify contact information in messaging applications.",
      "description_length": 314,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ScmUtil",
      "description": "Provides functions to create hash tables from key-value lists, compute greatest and least common multiples, and extract numerator and denominator from floats. Works with integers, floats, and hash tables mapping keys to values. Used for mathematical operations and data structure initialization in numerical applications.",
      "description_length": 321,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ScmParser",
      "description": "Parses lexical tokens into structured S-expression data types using a custom parser function. It processes input through a lexer buffer and maps token sequences to abstract syntax tree nodes. Used to convert raw input streams into executable or evaluatable Scheme expressions.",
      "description_length": 276,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ScmConfig",
      "description": "Provides configuration values for initializing various internal data structures used in a symbolic computation system. Works with integer values representing the default sizes of global and local environments, symbol tables, and macro tables. Used to set up initial memory allocations for efficient symbol and macro management during program execution.",
      "description_length": 352,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ScmDynnum",
      "description": "Performs arithmetic, complex number operations, and conversions, including addition, multiplication, conjugation, and polar form. Operates on a complex number type composed of real and imaginary parts. Supports signal processing and numerical analysis tasks through precise mathematical transformations. Examples include calculating square roots of complex values and converting between rectangular and polar representations.",
      "description_length": 425,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ScmLexer",
      "description": "Handles lexical analysis for a Scheme-like language, extracting strings, characters, booleans, and symbols from input. Operates on strings and lexing buffers, producing tokens for parsing. Used to process source code lines and tokenize input for further evaluation.",
      "description_length": 265,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ScmEval",
      "description": "Maintains and manipulates lexical environments for a Scheme-like language, enabling dynamic variable management through string-based bindings. It supports retrieving, updating, and adding variables, with values stored as `ScmTypes.datum` or references within `ScmTypes.environment` structures. Operations include binding symbols to values, looking up variables, and modifying existing bindings. For example, it allows defining a variable `x` with a value, then later updating its reference to a new value during evaluation.",
      "description_length": 523,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ScmTypes",
      "description": "This module provides type-checking, conversion, and manipulation operations for Scheme-compatible data types, including lists, pairs, symbols, numbers, and vectors, all interacting with a generic `datum` type representing S-expression nodes. It enables tasks like list traversal, nested access (e.g., `caaddr`), association list lookups, and transformation utilities (e.g., `append`, `reverse`), tailored for implementing interpreters or compilers handling Lisp-like structures. Specific use cases include converting OCaml values to Scheme representations, processing nested list structures, and efficiently querying key-value pairs in association lists.",
      "description_length": 654,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ScmSchoca",
      "description": "Creates a lexical buffer from an input channel, string, or byte-reading function, enabling parsing of Scheme expressions. Processes input streams or strings into Scheme data structures using a provided environment or default parsing logic. Supports interactive parsing with custom prompt handling, converting input into executable Scheme values.",
      "description_length": 345,
      "index": 10,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 654,
    "min_description_length": 265,
    "avg_description_length": 380.90909090909093,
    "embedding_file_size_mb": 0.04037666320800781
  }
}