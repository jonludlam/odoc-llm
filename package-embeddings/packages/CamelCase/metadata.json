{
  "package": "CamelCase",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:04:31.082055",
  "modules": [
    {
      "module_path": "CamelCase.FloatValue",
      "library": "CamelCase",
      "description": "This module implements precise comparison operations for float values, including equality, inequality, and ordering checks. It supports direct comparisons, option-wrapped values, and result-wrapped values, enabling robust testing of floating-point computations. Concrete use cases include validating numerical outputs in test cases, handling optional or error-prone float results, and ensuring correct ordering in algorithms involving floats.",
      "description_length": 442,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CamelCase.IntValue",
      "library": "CamelCase",
      "description": "This module provides assertion functions for comparing integer values in test cases, including equality, inequality, and ordering checks. It supports direct integer comparisons, as well as comparisons involving optional integers and result-wrapped integers. These functions are used to validate expected outcomes in unit tests involving integer values.",
      "description_length": 352,
      "index": 1,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "CamelCase.CharValue",
      "library": "CamelCase",
      "description": "This module implements a set of assertion functions for comparing characters in test cases, including equality, inequality, and ordering checks. It supports direct comparisons, option types, and result types, specifically handling `char` values. These functions are used to validate expected outcomes in unit tests involving character values.",
      "description_length": 342,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CamelCase.StringValue",
      "library": "CamelCase",
      "description": "This module implements assertion functions for comparing string values in test scenarios, including equality, inequality, and ordering checks. It supports direct string comparisons, optional strings, and result types wrapping strings. These functions are used to validate expected outcomes in unit tests or validation logic.",
      "description_length": 324,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CamelCase",
      "library": "CamelCase",
      "description": "This module provides a lightweight testing framework for defining and composing test cases that evaluate expected outcomes on booleans, options, and results, with support for chaining and batch evaluation. It includes submodules for precise comparisons of floats, integers, characters, and strings, each offering assertion functions for equality, inequality, and ordering checks within test cases. Main data types include test results, functions for assertions, and wrappers like option and result for handling optional or error-prone values. You can use it to write unit tests that validate numerical outputs, compare characters, assert string equality, or check boolean conditions with clear pass/fail outcomes.",
      "description_length": 713,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 713,
    "min_description_length": 324,
    "avg_description_length": 434.6,
    "embedding_file_size_mb": 0.018606185913085938
  }
}