{
  "package": "CamelCase",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:55:41.045902",
  "modules": [
    {
      "module_path": "CamelCase.StringValue",
      "library": "CamelCase",
      "description": "This module implements assertion functions for comparing string values in test scenarios, including equality, inequality, and ordering checks. It supports direct comparisons between strings, optional strings, and result-typed values containing strings. These functions are used to validate expected outcomes in unit tests involving string manipulation or parsing logic.",
      "description_length": 369,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CamelCase.CharValue",
      "library": "CamelCase",
      "description": "This module implements assertion functions for comparing characters in test scenarios, including equality, inequality, and ordering checks. It supports direct comparisons between characters, as well as comparisons involving optional characters and result types. These functions are used to validate character values in unit tests, ensuring expected outcomes against actual results.",
      "description_length": 381,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CamelCase.FloatValue",
      "library": "CamelCase",
      "description": "This module provides functions for comparing float values in test scenarios, including equality, inequality, and ordering checks. It supports direct float comparisons, as well as comparisons involving optional floats and result-wrapped floats. These functions are used to assert expected numeric behavior in unit tests, particularly when validating floating-point calculations or I/O-bound numeric outputs.",
      "description_length": 406,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CamelCase.IntValue",
      "library": "CamelCase",
      "description": "This module provides functions to perform equality, inequality, and comparison checks between integers and integer options or results, returning typed test results. It supports concrete test assertions like checking if two integers are equal, if an integer matches within an option or result, or if one integer is greater than or less than another. Use cases include unit testing numerical logic, validating integer-based computations, and ensuring correct handling of integer values in result types.",
      "description_length": 500,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CamelCase",
      "library": "CamelCase",
      "description": "This module implements a testing framework for defining and executing test cases with rich assertions. It provides functions to construct test results from primitive checks on values like booleans, options, and results, and compose them through chaining or bulk evaluation. The framework is used to validate logic in application code through explicit expectations on function outputs, including typed comparisons for integers, strings, floats, and characters.",
      "description_length": 459,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 500,
    "min_description_length": 369,
    "avg_description_length": 423.0,
    "embedding_file_size_mb": 0.07288646697998047
  }
}