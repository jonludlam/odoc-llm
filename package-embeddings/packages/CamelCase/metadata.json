{
  "package": "CamelCase",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:29:04.599071",
  "modules": [
    {
      "module_path": "CamelCase.IntValue",
      "description": "Checks integer equality, inequality, and ordering against expected values, returning test results. Operates on integers, optional integers, and result types containing integers. Used to validate numeric outputs in test scenarios, such as ensuring a computed value matches an expected integer or confirming a result is within a specified range.",
      "description_length": 343,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "CamelCase.StringValue",
      "description": "Compares strings for equality or ordering, returning test results with custom messages. Handles raw strings, options, and result types to validate expected versus actual values. Used to assert string matches in tests, check for presence or absence of values, and verify lexicographical order.",
      "description_length": 292,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CamelCase.FloatValue",
      "description": "Compares floating-point values against expected results using equality and inequality checks, including support for optional and result types. Performs relational comparisons such as less than, greater than, and their inclusive variants. Used in testing scenarios to validate numerical outputs with precise control over expected outcomes.",
      "description_length": 338,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "CamelCase.CharValue",
      "description": "Compares characters and character options or results against expected values, returning test results for equality, inequality, and ordering. Operates on `char`, `char option`, and `(char, 'a) result` types. Used to validate character-based logic in test scenarios, such as checking input parsing outcomes or string processing correctness.",
      "description_length": 338,
      "index": 3,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "CamelCase",
      "description": "Provides a set of comparison utilities for testing numeric, string, floating-point, and character values, each returning structured test results. Supports integer, string, float, and char types, along with their optional and result variants, enabling precise validation of expected versus actual outputs. Allows assertions on equality, inequality, and ordering across multiple data types, such as verifying a computed integer matches a target or checking if a string is lexicographically ordered. Includes custom messaging for string comparisons and range-based checks for numeric values.",
      "description_length": 588,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 588,
    "min_description_length": 292,
    "avg_description_length": 379.8,
    "embedding_file_size_mb": 0.018611907958984375
  }
}