{
  "package": "zdd",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:30:48.217703",
  "modules": [
    {
      "module_path": "Zdd.Make_ZddZE",
      "description": "Provides hash, comparison, equality, and pretty-printing operations for a custom type `t`. Works with abstract data structures requiring ordered and printable representations. Used to standardize handling of ZDD elements in symbolic computation contexts.",
      "description_length": 254,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zdd.Make_Zdd",
      "description": "Provides hash, comparison, equality, and pretty-printing operations for a custom data type `t`. Works with abstract structures that require ordered, hashable, and printable representations. Used to standardize interactions with ZDD nodes in symbolic computation workflows.",
      "description_length": 272,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zdd.Make",
      "description": "Provides hash, comparison, equality, and pretty-printing operations for a custom type `t`. Works with values of type `t` to enable deterministic hashing, total ordering, and readable output. Used to standardize representation and comparison in data structures like sets and maps.",
      "description_length": 279,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zdd.UpSet",
      "description": "Provides hash, comparison, equality, and pretty-printing operations for a custom type `t`. Works with structured data requiring deterministic ordering and serialization. Used to standardize representation and comparison in data processing pipelines.",
      "description_length": 249,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zdd.DownSet",
      "description": "Provides hash, comparison, equality, and pretty-printing operations for a custom type `t`. Works with abstract data structures requiring ordered and comparable representations. Used to ensure consistent serialization and comparison in data processing pipelines.",
      "description_length": 261,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "zdd",
      "description": "Provides operations to construct, manipulate, and query ZDDs, including intersection, union, and enumeration of subsets. Works with ZDDs, which encode families of sets by representing their elements as paths in a binary tree. Used to efficiently handle combinatorial problems such as counting independent sets in graphs or generating all subsets satisfying a constraint.",
      "description_length": 370,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zdd",
      "description": "The module provides set-theoretic operations like union, intersection, and difference, along with advanced transformations such as join and meet, operating on set families and individual sets of elements. It includes analytical functions for computing minima, hitting sets, and closures, applicable in combinatorial optimization and logical reasoning tasks.",
      "description_length": 357,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 370,
    "min_description_length": 249,
    "avg_description_length": 291.7142857142857,
    "embedding_file_size_mb": 0.02588176727294922
  }
}