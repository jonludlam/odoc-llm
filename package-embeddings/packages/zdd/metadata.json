{
  "package": "zdd",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:07:40.660049",
  "modules": [
    {
      "module_path": "Zdd.DownSet",
      "library": "zdd",
      "description": "This module enables the construction and manipulation of downward-closed families of finite sets, represented as ZDDs, supporting operations like union, intersection, inclusion checks, and maximal element extraction. It works with elements of type `X.t` and represents maximal sets as ordered lists, providing iterators to process these sets efficiently. It is particularly suited for combinatorial optimization or formal verification tasks requiring compact and efficient manipulation of large, structured set families.",
      "description_length": 520,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zdd.Make",
      "library": "zdd",
      "description": "This module enables efficient manipulation of finite set families encoded as Zero-suppressed Decision Diagrams (ZDDs), supporting operations like union, intersection, difference, and closure under inclusion or exclusion. It provides specialized tools for extremal set extraction (e.g., minimal/maximal sets), combinatorial transformations (e.g., substitution, restriction), and structural analysis (e.g., node counting, cardinality bounds), working with sets of user-defined elements. Particularly effective for combinatorial optimization, symbolic computation, and formal verification tasks where compact representations of vast set families are critical, such as enumerating valid configurations or analyzing lattice structures.",
      "description_length": 730,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zdd.T",
      "library": "zdd",
      "description": "This module defines the required interface for types used to create set families based on ZDDs (Zero-Suppressed Binary Decision Diagrams). It includes operations for hashing, comparing, equality testing, and pretty printing, ensuring types can be effectively managed within the ZDD structure. It supports concrete use cases such as representing and manipulating finite sets in combinatorial problems, and defining upward-closed or downward-closed set families.",
      "description_length": 460,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zdd.Make_Zdd",
      "library": "zdd",
      "description": "This module provides functions to construct and manipulate ZDDs (Zero-Suppressed Decision Diagrams) representing families of finite sets, supporting operations like union, intersection, difference, cardinality computation, and closure properties (e.g., upward/downward closure). It operates on polymorphic elements (`elt`) and families of sets (`t`), enabling efficient combinatorial set manipulation through logical transformations and containment-based filtering. Key use cases include symbolic computation, combinatorial optimization, and managing hierarchical set families with inclusion constraints.",
      "description_length": 604,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zdd.UPSET",
      "library": "zdd",
      "description": "This module represents upward-closed set families using ZDDs, where each family is stored via its minimal elements. It supports operations like union, intersection, inclusion testing, and construction of families from element lists, along with substitution and traversal over minimal elements. The module is useful for combinatorial problems involving set manipulation, such as computing closures or analyzing dependencies in sets.",
      "description_length": 431,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zdd.S",
      "library": "zdd",
      "description": "This module provides operations for constructing and manipulating families of finite sets using Zero-Suppressed Decision Diagrams (ZDDs), supporting set-theoretic operations like union, intersection, and difference, as well as element-level transformations such as restriction, inclusion constraints, and extremal set extraction (e.g., minima, maxima). It works with two primary types: `elt` representing elements of sets and `t` representing ZDD-encoded set families, alongside utilities for structural queries (e.g., cardinality, subset checks) and combinatorial operations like closure computation and minimal hitting sets. These capabilities are particularly useful for applications requiring efficient symbolic manipulation of large set families, such as combinatorial optimization, formal verification, or algebraic structure analysis under distributive normal form interpretations.",
      "description_length": 888,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zdd.Make_ZddZE",
      "library": "zdd",
      "description": "This module supports creating and manipulating families of finite sets using zero-suppressed binary decision diagrams (ZDDs), with operations spanning set-theoretic transformations (union, intersection, difference), extremal set extraction (minima, maxima, hitting sets), closure computations, and element-level modifications. It works with ZDDs and upward/downward-closed set families, enabling efficient symbolic algebra and combinatorial analysis for applications like formal verification, optimization, and visualizing hierarchical set structures",
      "description_length": 550,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Zdd.DOWNSET",
      "library": "zdd",
      "description": "This module represents downward-closed set families using ZDDs, where each family is stored via its maximal elements. It supports operations such as union, intersection, inclusion testing, and the generation of downward-closed families from element lists. Concrete use cases include modeling subsets constrained by inclusion, efficiently manipulating combinatorial structures, and computing closures under set operations.",
      "description_length": 421,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Zdd",
      "library": "zdd",
      "description": "This module implements finite set families using Zero-Suppressed Binary Decision Diagrams (ZDDs), enabling efficient set-theoretic operations such as union, intersection, difference, and inclusion checks on integer-labeled sets. It provides specialized structures for upward-closed and downward-closed families, represented through minimal or maximal elements, and supports combinatorial operations like extremal set extraction, closure computation, and element-level transformations. Submodules extend this functionality to handle polymorphic elements, structural analysis, and optimized manipulation of large set families in applications such as symbolic model checking, combinatorial optimization, and constraint solving. Key data types include `elt` for set elements and `t` for ZDD-encoded families, with utilities for traversal, filtering, and transformation based on inclusion properties.",
      "description_length": 895,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 9,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9
  },
  "statistics": {
    "max_description_length": 895,
    "min_description_length": 421,
    "avg_description_length": 611.0,
    "embedding_file_size_mb": 0.03313636779785156
  }
}