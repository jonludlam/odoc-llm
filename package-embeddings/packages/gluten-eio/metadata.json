{
  "package": "gluten-eio",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:46.897979",
  "modules": [
    {
      "module_path": "Gluten_eio.Server",
      "description": "Handles incoming network connections by initializing protocol-specific processing, supporting both standard and upgradable connection flows. Operates on socket addresses, stream sockets, and protocol runtime structures. Used to manage HTTP/1.1 and WebSocket upgrades by defining request handlers and protocol state transitions.",
      "description_length": 327,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gluten_eio.Client",
      "description": "Provides functions to initialize a client with a network socket and protocol, upgrade the connection to a specific implementation, and manage closure status. Operates on stream sockets and protocol-specific runtime environments. Used to establish and control client-side communication in networked applications.",
      "description_length": 311,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "gluten-eio",
      "description": "Provides functions for managing protocol state transitions and handling protocol upgrades in network connections, including HTTP/1.1 to Websocket and h2c initialization. Operates on connection state records, protocol-specific event streams, and byte buffers. Used to implement seamless protocol switching in asynchronous network applications.",
      "description_length": 342,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gluten_eio",
      "description": "manages network communication by handling both server and client connections, supporting protocol-specific initialization, upgrades, and state transitions. It works with socket addresses, stream sockets, and protocol runtimes to process HTTP/1.1 requests and WebSocket upgrades on the server side, and to establish and control client-side connections on the client side. Key operations include setting up handlers, managing protocol transitions, and tracking connection closure. Examples include processing incoming HTTP requests, upgrading connections to WebSockets, and initiating client-side protocol exchanges.",
      "description_length": 614,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 614,
    "min_description_length": 311,
    "avg_description_length": 398.5,
    "embedding_file_size_mb": 0.0149688720703125
  }
}