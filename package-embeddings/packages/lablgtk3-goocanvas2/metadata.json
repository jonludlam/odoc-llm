{
  "package": "lablgtk3-goocanvas2",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 19,
  "creation_timestamp": "2025-08-14T23:30:10.396391",
  "modules": [
    {
      "module_path": "GtkGooCanvas.Item.Signals.Event",
      "library": "lablgtk3-goocanvas2",
      "description": "This module handles event signals for canvas items, connecting user input events to callback functions. It supports events like mouse clicks, keyboard input, focus changes, and pointer movements, working with `GdkEvent` types such as `Button`, `Key`, `Motion`, and `Crossing`. Use it to implement interactive behavior on graphical canvas items, such as responding to clicks or tracking mouse movement over shapes or widgets.",
      "description_length": 424,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkGooCanvas.Item.Signals",
      "library": "lablgtk3-goocanvas2",
      "description": "Handles event signals for canvas items by connecting user input events to callbacks. Supports mouse, keyboard, focus, and pointer events using `GdkEvent` types like `Button`, `Key`, `Motion`, and `Crossing`. Use to implement interactive behavior on canvas items, such as click responses or mouse tracking over shapes.",
      "description_length": 317,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkGooCanvasProps.ItemSimple.P",
      "library": "lablgtk3-goocanvas2",
      "description": "This module defines properties for configuring visual attributes of canvas items, such as color, font, and stroke settings. It works with `goocanvasitemsimple` objects and supports concrete operations like setting fill and stroke colors with RGBA values, applying fonts, and adjusting line width and join limits. Use this module to customize the appearance of shapes and text elements in a graphical canvas interface.",
      "description_length": 417,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkGooCanvas.Rect",
      "library": "lablgtk3-goocanvas2",
      "description": "Creates a rectangular item with specified dimensions and position, adding it to a given canvas item. Works with `GooCanvas_types.item` and `GooCanvas_types.rect` objects. Useful for drawing fixed-size rectangles in graphical applications, such as UI elements or visual indicators.",
      "description_length": 280,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkGooCanvasProps.ItemSimple",
      "library": "lablgtk3-goocanvas2",
      "description": "This module provides functions to create and manipulate simple canvas items with support for visual properties like color, font, and stroke settings. It operates on `item_simple` objects, enabling concrete tasks such as setting RGBA fill and stroke colors, defining fonts, and adjusting line width and join styles. Use it to build and style graphical elements like shapes and text in a canvas-based user interface.",
      "description_length": 414,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkGooCanvas.Image",
      "library": "lablgtk3-goocanvas2",
      "description": "Creates an image item for a GooCanvas with a specified position and optional pixel buffer. It initializes the image within a given canvas item, supporting dynamic placement and rendering. Useful for embedding raster graphics into interactive canvas scenes at precise coordinates.",
      "description_length": 279,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkGooCanvas.Canvas",
      "library": "lablgtk3-goocanvas2",
      "description": "This module manages canvas elements for graphical applications using the GooCanvas library. It provides functions to create and manipulate canvas objects, set and retrieve bounds, scale, and root items, and convert coordinates between different spaces. Key operations include querying items at specific points, scrolling the canvas, and handling transformations for rendering and interaction tasks.",
      "description_length": 398,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkGooCanvas.Group",
      "library": "lablgtk3-goocanvas2",
      "description": "Creates hierarchical groups of canvas items and manages their layout. It operates on `GooCanvas_types.item` and `GooCanvas_types.group` objects, allowing structured composition of graphical elements. Use it to organize related items into containers, enabling collective transformations and layout management.",
      "description_length": 308,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkGooCanvas.Item",
      "library": "lablgtk3-goocanvas2",
      "description": "Handles hierarchical relationships and layout of canvas items with operations to manipulate parents, children, and item bounds. Works with `GooCanvas_types.item` objects to manage visual elements like shapes, text, and groups in a graphical canvas. Use to build and modify interactive diagrams, layered graphics, or dynamic UI elements with precise spatial control and nesting.",
      "description_length": 377,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkGooCanvas.Points",
      "library": "lablgtk3-goocanvas2",
      "description": "Creates a canvas_points structure with a specified number of points, using the given float array as coordinate data. It directly handles arrays of floating-point values to define point sequences for graphical elements. This function is used when initializing or updating point-based shapes or paths in a graphical canvas.",
      "description_length": 321,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkGooCanvas.Widget",
      "library": "lablgtk3-goocanvas2",
      "description": "Creates a canvas item that embeds a GTK widget at a specified position and size within a graphical canvas. It allows precise placement of interactive UI elements like buttons or labels inside a GooCanvas scene. This is useful for building complex, layered user interfaces with both vector graphics and standard GTK controls.",
      "description_length": 324,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkGooCanvas.Text",
      "library": "lablgtk3-goocanvas2",
      "description": "Creates a text item with specified content and dimensions, positioned at given coordinates within a canvas. It allows rendering and manipulating textual content as part of a graphical scene. Useful for displaying labels, annotations, or dynamic text overlays in a GUI.",
      "description_length": 268,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkGooCanvas.Polyline",
      "library": "lablgtk3-goocanvas2",
      "description": "Creates polyline items for a canvas, supporting both generic polylines and straight lines. Works with canvas items and geometric coordinates. Use to draw connected line segments or single lines in a graphical interface.",
      "description_length": 219,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GooCanvas_types",
      "library": "lablgtk3-goocanvas2",
      "description": "This module serves as the foundation for representing and organizing graphical elements in a 2D scene graph, defining polymorphic variant types to distinguish canvas components like shapes (`ellipse`, `rect`), text, and structural models (`item`, `item_model`). It enables structured manipulation of hierarchical graphics by categorizing elements such as paths, polylines, and tables, which are essential for rendering complex visual layouts and interactive diagrams. The types facilitate type-safe differentiation and traversal of canvas hierarchies in applications requiring dynamic graphical composition.",
      "description_length": 607,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GtkGooCanvasProps",
      "library": "lablgtk3-goocanvas2",
      "description": "This module includes functions for conditionally adding GObject properties to parameter lists, specifically handling optional values. It works with GObject property types and parameter lists, allowing precise property configuration. Use it to construct parameter lists for GObject-based objects when properties may be optional or conditionally set.",
      "description_length": 348,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GooCanvasEnums",
      "library": "lablgtk3-goocanvas2",
      "description": "This module defines enumerated types for controlling visual properties and interaction behaviors in a canvas rendering system. It includes `anchor_type` for positioning, `item_visibility` for display states, and `pointer_events` for input event handling. These types are used to configure how graphical items are rendered and interacted with in a canvas-based user interface.",
      "description_length": 375,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "GooCanvas",
      "library": "lablgtk3-goocanvas2",
      "description": "This module creates and manipulates vector graphics elements within a canvas, supporting items such as text, rectangles, images, and polylines. It provides functions to define shapes, layout widgets, and manage hierarchical groups with precise positioning and styling options. Concrete use cases include building interactive diagrams, custom UI components, and visual data representations.",
      "description_length": 389,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "GtkGooCanvas",
      "library": "lablgtk3-goocanvas2",
      "description": "This module implements a canvas-based graphical interface system with support for vector shapes, text, images, and embedded widgets. It provides precise control over 2D graphical elements through typed properties and hierarchical item structures. Use to build interactive diagrams, custom UI components, or data visualizations with layered graphics and event handling.",
      "description_length": 368,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OgtkGooCanvasProps",
      "library": "lablgtk3-goocanvas2",
      "description": "This module provides direct operations for setting, getting, and creating GObject property values for GooCanvas objects. It works with GObject properties and parameters, specifically tied to GooCanvas elements. Use cases include configuring canvas item properties like position, size, and style, or retrieving property values from existing canvas items at runtime.",
      "description_length": 364,
      "index": 18,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 29,
    "meaningful_modules": 19,
    "filtered_empty_modules": 10,
    "retention_rate": 0.6551724137931034
  },
  "statistics": {
    "max_description_length": 607,
    "min_description_length": 219,
    "avg_description_length": 357.7368421052632,
    "embedding_file_size_mb": 0.2757606506347656
  }
}