{
  "package": "cowabloga",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 17,
  "creation_timestamp": "2025-07-15T23:08:30.151859",
  "modules": [
    {
      "module_path": "Cowabloga.Foundation.Link",
      "library": "cowabloga",
      "description": "This module defines operations for creating and rendering navigational elements such as top, side, and bottom menus, as well as button groups from lists of labeled URIs. It works with tuples of strings and URIs, organized into lists representing links. Concrete use cases include generating navigation bars and button groups for HTML pages using the Cow XML generator.",
      "description_length": 368,
      "index": 0,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Cowabloga.Blog.Entry",
      "library": "cowabloga",
      "description": "This module defines a blog entry structure with fields for update date, authors, subject, permalink, and body content. It provides functions to generate permalinks, compare entries, and convert entries to HTML or Atom feed formats. Use cases include rendering blog posts in web pages or generating Atom syndication feeds.",
      "description_length": 321,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cowabloga.Foundation.Index",
      "library": "cowabloga",
      "description": "Constructs a complete HTML page using a provided top navigation bar, wrapping it with the necessary document structure. Works with `Cow.Html.t` values to generate valid HTML5 output. Useful for rendering static pages where the top navigation is dynamically generated but the overall layout remains consistent.",
      "description_length": 309,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cowabloga.Foundation.Sidebar",
      "library": "cowabloga",
      "description": "This module defines a polymorphic type `t` representing different kinds of sidebar elements such as active links, dividers, plain links, raw text, and HTML content. It provides a function `t` to construct a sidebar section with a given title and a list of these elements. The module is used to generate structured sidebar navigation UI components in web applications.",
      "description_length": 367,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cowabloga.Foundation.Blog",
      "library": "cowabloga",
      "description": "This module constructs HTML components for blog layouts and individual posts. It provides functions to format blog posts with titles, authors, dates, and content, along with a function to assemble the overall blog page structure with sidebars and copyright notices. It works directly with `Cow.Html.t` values, combining them into valid HTML structures for rendering blog content.",
      "description_length": 379,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cowabloga.Dispatch.Log",
      "library": "cowabloga",
      "description": "This module provides functions to handle dispatch outcomes such as success, not found, and redirect scenarios. It works with string messages and a polymorphic return type, allowing custom handling of each outcome. Concrete use cases include routing responses in a web application, where each function can trigger logging, error handling, or redirection logic based on the dispatch result.",
      "description_length": 388,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cowabloga.Foundation",
      "library": "cowabloga",
      "description": "This module assembles HTML blog pages with structured layouts, combining top navigation, body content, and sidebars using `Cow.Html.t` values and URIs. It supports rendering blog posts with metadata, embedding analytics, and generating complete HTML documents with consistent structure. The navigation module creates menus and button groups from URI-labeled lists, while the sidebar module defines structured UI elements like active links and dividers under titled sections. Together with the blog-specific layout functions, it enables building rich, dynamic blog interfaces with reusable components.",
      "description_length": 600,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cowabloga.Date",
      "library": "cowabloga",
      "description": "This module defines date-related types and conversion functions for handling dates in various formats. It provides structured date values with components like month, day, year, and time, and supports transformations to HTML, XML, and tuple representations. Concrete use cases include formatting dates for web output, parsing date components into structured values, and serializing dates for data exchange.",
      "description_length": 405,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cowabloga.Links",
      "library": "cowabloga",
      "description": "Handles conversion and comparison of link data structures for Atom feed generation. It works with link entries containing metadata like URIs, titles, dates, and associated streams, and provides functions to generate permalinks, compare entries, and convert link lists into Atom feeds. Used to structure and serialize blog or news links into standardized Atom format for syndication.",
      "description_length": 382,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cowabloga.Dispatch",
      "library": "cowabloga",
      "description": "This module routes requests and generates responses based on URI paths and headers, offering functions to split paths, parse headers, and map routes to asynchronous actions. It supports serving assets, HTML pages, atoms, or redirects, and works with a child module that handles dispatch outcomes like success, not found, or redirect using string messages and a polymorphic return type. You can define custom logic for logging, error handling, or redirection based on the result of a route dispatch. For example, a request to `/users/:id` can trigger an async database lookup on success or return a 404 page if no matching route exists.",
      "description_length": 635,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cowabloga.Feed",
      "library": "cowabloga",
      "description": "Handles aggregation and rendering of blog, wiki, and link feeds into unified HTML or Atom formats. Works with typed feed variants containing entries from different content sources. Used to generate combined news feeds, permalinks, and XML/HTML output for static site generators.",
      "description_length": 278,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cowabloga.Bootstrap",
      "library": "cowabloga",
      "description": "Constructs HTML document bodies and pages with optional Google Analytics integration. Accepts HTML headers and content, producing complete HTML documents with customizable namespace support. Useful for generating static blog pages with embedded analytics and structured markup.",
      "description_length": 277,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cowabloga.Atom_feed",
      "library": "cowabloga",
      "description": "Handles parsing and rendering of Atom feeds, providing functions to construct and manipulate feed metadata and entries. Works with custom types representing Atom feeds and entries, including metadata like title, subtitle, author, and content. Useful for generating or consuming web feeds in web applications or content management systems.",
      "description_length": 338,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cowabloga.Wiki",
      "library": "cowabloga",
      "description": "This module manages wiki entries and generates HTML and ATOM feed content. It handles entry rendering, date formatting, permalink generation, and feed conversion using types like `entry`, `body`, and `Cow.Atom` structures. Concrete uses include building HTML pages with recent updates, generating full ATOM feeds, and rendering individual entry content from files or HTML.",
      "description_length": 372,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cowabloga.Blog",
      "library": "cowabloga",
      "description": "This module converts blog entries into HTML and Atom feed formats, structuring content for web display and syndication. It processes lists of entries to generate XML content, Atom feeds, and sidebars, supporting use cases like rendering recent posts or building dynamic blog pages. The core data type is the blog entry, which includes fields for authors, update date, subject, permalink, and body, along with operations to compare entries and transform them into different output formats. Submodules define the entry structure and provide helper functions for permalink generation and format conversion.",
      "description_length": 603,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cowabloga.Headers",
      "library": "cowabloga",
      "description": "This module provides predefined HTTP header fields for common content types such as HTML, JSON, and PNG. Each value is a list of key-value pairs representing headers, primarily used to set response headers in web applications. It simplifies returning correct Content-Type headers for specific file types in HTTP responses.",
      "description_length": 322,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cowabloga",
      "library": "cowabloga",
      "description": "This module builds dynamic blog and wiki interfaces with structured HTML and Atom feed generation, handling content routing, date formatting, and link management. It centers on data types like blog entries, wiki pages, and link feeds, offering operations to render HTML documents with analytics, convert content to Atom feeds, and route HTTP requests to async actions. You can generate permalinked blog posts with metadata, serve dynamic pages from URIs like `/posts/:year/:title`, and aggregate content into unified feeds. Date handling, HTTP headers, and navigation menus are integrated to support full-stack web publishing workflows.",
      "description_length": 636,
      "index": 16,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 17,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 636,
    "min_description_length": 277,
    "avg_description_length": 410.5882352941176,
    "embedding_file_size_mb": 0.062233924865722656
  }
}