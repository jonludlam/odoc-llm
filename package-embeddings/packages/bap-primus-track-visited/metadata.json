{
  "package": "bap-primus-track-visited",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:33.804471",
  "modules": [
    {
      "module_path": "Bap_primus_track_visited.Set.Make",
      "library": "bap-primus-track-visited",
      "description": "This module implements a set interface for tracking visited basic blocks during Primus execution. It provides operations to check membership (`mem`), add (`add`) or remove (`del`) specific block identifiers, and retrieve the full set of visited blocks (`all`). These operations work directly with `Bap.Std.tid` identifiers and are used to manage a dynamic record of executed blocks in a machine-specific context.",
      "description_length": 412,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_primus_track_visited.Set",
      "library": "bap-primus-track-visited",
      "description": "This module tracks visited basic blocks during execution using a set interface. It supports operations to add, remove, and check block identifiers (`Bap.Std.tid`), along with retrieving the full set of visited blocks. You can use it to maintain a dynamic record of executed blocks, query whether a specific block has been visited, or clear entries for individual or all blocks. For example, `add` marks a block as visited, `mem` checks if it was previously visited, and `all` returns the complete set.",
      "description_length": 501,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bap_primus_track_visited",
      "library": "bap-primus-track-visited",
      "description": "This module tracks basic block visitation during Primus execution, marking visited and dead terms in the program. It initializes tracking by pre-populating visited blocks, updates attributes dynamically during execution, and propagates visitation to subterms and stubbed function bodies. The set interface in the child module supports adding, checking, and retrieving visited blocks by TID, enabling dynamic tracking and querying of execution paths. Use it to analyze code coverage, trace execution flow, or inspect term status in binary programs.",
      "description_length": 547,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 547,
    "min_description_length": 412,
    "avg_description_length": 486.6666666666667,
    "embedding_file_size_mb": 0.011313438415527344
  }
}