{
  "package": "diffast-langs-java",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 34,
  "creation_timestamp": "2025-08-15T14:23:34.016928",
  "modules": [
    {
      "module_path": "Mjava_p",
      "library": "diffast-langs-java.p",
      "description": "Parses Java source code into abstract syntax trees, handling lexical analysis and grammar rules. It processes strings or files containing Java code, converting them into structured data for further manipulation. This module is used to analyze or transform Java programs programmatically, such as for refactoring, static analysis, or code generation.",
      "description_length": 349,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_base.Java_label.Expression",
      "library": "diffast-langs-java.base",
      "description": "This module defines a labeled expression type for Java, encompassing constructs like conditionals, binary and unary operators, casts, primary expressions, assignments, lambdas, and switches. It provides operations to convert expressions to strings, extract names, strip or anonymize labels, and construct expressions from AST nodes. Use cases include analyzing or transforming Java expressions with precise label tracking during compilation or static analysis.",
      "description_length": 460,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.Literal",
      "library": "diffast-langs-java.base",
      "description": "This module represents Java literal values with precise type encodings, including integers, floating points, booleans, characters, strings, text blocks, and null. It provides operations to parse, unescape, reduce, and anonymize literal values, handling string encoding and special character patterns. Use cases include processing Java source literals during analysis or transformation tasks, such as normalizing string values, extracting literal tags with metadata, or preparing literals for display.",
      "description_length": 500,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_unparsing.UPB",
      "library": "diffast-langs-java.base",
      "description": "This module provides low-level formatting and layout operations for generating Java code, handling tasks like string and numeric value printing, whitespace control, and structural punctuation (brackets, braces, separators). It works with primitive types and formatting boxes to manage document structure, enabling precise alignment with Java syntax rules. Specific use cases include pretty-printing expressions, statements, and identifiers while maintaining correct lexical spacing and nesting.",
      "description_length": 494,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.Statement",
      "library": "diffast-langs-java.base",
      "description": "This module defines a labeled statement type for Java, including constructs like `if`, `for`, `while`, `try`, and `switch`, each optionally tied to identifiers or expression data. It provides operations to extract identifiers, convert statements to strings, anonymize or simplify them, and check properties like naming or relabeling permissions. Concrete use cases include analyzing or transforming Java control flow structures during static analysis or code refactoring tasks.",
      "description_length": 477,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.BinaryOperator",
      "library": "diffast-langs-java.base",
      "description": "This module defines a variant type representing binary operators in Java, including arithmetic, comparison, bitwise, and logical operations. It provides functions to convert operators to different string formats, map from an AST representation, anonymize operators, and extract tags with associated data. Concrete use cases include pretty-printing expressions, analyzing or transforming Java code during compilation or static analysis.",
      "description_length": 435,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.Modifier",
      "library": "diffast-langs-java.base",
      "description": "This module defines a set of modifier keywords used in Java, such as `Public`, `Static`, and `Final`, along with operations to convert these modifiers to string representations. It includes functions for anonymizing modifiers, generating simple or short string forms, and producing tagged output with attributes. These capabilities are used when analyzing or transforming Java code, such as during decompilation, pretty-printing, or static analysis tasks.",
      "description_length": 455,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.Type",
      "library": "diffast-langs-java.base",
      "description": "This module offers operations to inspect, convert, and manipulate Java base types, including primitives, classes, interfaces, arrays, and generics. It centers on a type `t` that represents these types, supporting tasks like type analysis, code generation, and identifier resolution through functions such as `get_name`, `strip`, `to_string`, and XML-like tag construction. Specific use cases include processing Java type hierarchies, anonymizing or simplifying complex types, and converting between Java type syntax and string representations for tooling or serialization.",
      "description_length": 572,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_lib_base.Tree",
      "library": "diffast-langs-java.base",
      "description": "This module constructs and manipulates tree nodes with labeled data, supporting operations like node creation with annotations, ordinal tables, and origin labels. It works with objects representing tree nodes that carry metadata such as labels, annotations, and location information. Concrete use cases include building abstract syntax trees with customizable node properties and handling tree transformations with precise identity tracking.",
      "description_length": 441,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_base.Java_tree.Tree",
      "library": "diffast-langs-java.base",
      "description": "This module constructs and manipulates tree nodes with labeled data, annotations, and unique identifiers. It supports creating nodes with varying numbers of children, extracting labels and annotations from nodes, and comparing nodes based on their labels. Concrete use cases include building abstract syntax trees with metadata for program analysis and transformation tasks.",
      "description_length": 374,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_fact.FB",
      "library": "diffast-langs-java.base",
      "description": "This module provides utilities for constructing and manipulating nodes in a Java abstract syntax tree, focusing on entity, literal, and resource representations with typed identifiers. It operates on `Diffast_core.Triple.node` structures to enable hierarchical navigation, property extraction, and predicate-based searches across AST elements. Specific use cases include analyzing code structure, traversing parent-child relationships, and locating semantically relevant ancestors in nested data representations.",
      "description_length": 512,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_base.Java_unparsing.Fmtr",
      "library": "diffast-langs-java.base",
      "description": "This module provides direct access to a formatter value used for unparsing Java code. It supports operations like `pp_print_string`, `pp_open_box`, and other formatting primitives from the `Format` module. Concrete use cases include generating readable Java source code from abstract syntax trees or intermediate representations.",
      "description_length": 329,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.AssignmentOperator",
      "library": "diffast-langs-java.base",
      "description": "This module defines a variant type representing Java assignment operators, including standard arithmetic, bitwise, and shift operations. It provides functions to convert these operators to string representations and map them from abstract syntax tree (AST) equivalents. Use cases include code generation, static analysis, and transformation of Java programs where precise handling of assignment operations is required.",
      "description_length": 418,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_tree.FB",
      "library": "diffast-langs-java.base",
      "description": "The module provides utilities for constructing and manipulating Java abstract syntax tree (AST) nodes, such as creating entities, literals, and versioned elements, all represented as `Diffast_core.Triple.node`. It supports traversal and inspection of tree structures through parent/child navigation, metadata extraction (e.g., digests, locations), and predicate-based searches. These operations are particularly useful for analyzing or transforming Java codebases, such as locating contextual nodes during static analysis or refactoring tasks.",
      "description_length": 543,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.Annotation",
      "library": "diffast-langs-java.base",
      "description": "This module defines and manipulates annotation labels in Java bytecode, supporting operations to retrieve annotation names, convert annotations to various string representations, and anonymize them. It works with a variant type representing normal, marker, and single-element annotations, along with associated name and attribute data. Concrete use cases include processing Java annotations during bytecode analysis, generating human-readable annotation summaries, and transforming annotations during code instrumentation or decompilation.",
      "description_length": 539,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.UnaryOperator",
      "library": "diffast-langs-java.base",
      "description": "This module defines a set of unary operators used in Java, including increment, decrement, sign, and logical operations, represented as a variant type. It provides functions to convert these operators to string representations and to map them from an AST representation. The module is used to handle unary operator labels in Java code analysis or transformation tools.",
      "description_length": 368,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.Primary",
      "library": "diffast-langs-java.base",
      "description": "This module defines a rich variant type `t` representing primary expressions in Java, such as names, literals, method invocations, field accesses, and array operations. It provides functions to inspect, transform, and simplify these expressions, including extracting names, converting to strings, anonymizing components, and checking compatibility between expressions. Use cases include analyzing or rewriting Java code structures during static analysis, refactoring tools, or code transformation pipelines.",
      "description_length": 507,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_lib_base",
      "library": "diffast-langs-java.base",
      "description": "This module includes a `sprintf` function for formatted string output and a `Tree` submodule for constructing and manipulating labeled tree nodes with metadata. The `Tree` module handles operations like node creation with annotations, ordinal tables, and origin labels, working with tree structures that carry rich contextual information. It is used for building and transforming abstract syntax trees with customizable node properties and precise identity tracking.",
      "description_length": 466,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label",
      "library": "diffast-langs-java.base",
      "description": "This module provides operations for creating, inspecting, and classifying labels representing Java AST nodes, with functions to encode/decode identifiers for XML, anonymize names, extract attributes, and perform semantic checks like compatibility or structural equivalence. It works with Java AST elements such as types, literals, operators, expressions, modifiers, and structural components (classes, methods, statements), supporting use cases in static analysis, code transformation, and tools requiring precise AST manipulation or diffing. Specific applications include XML serialization, identifier sanitization, and semantic classification of Java code constructs for analysis or refactoring tools.",
      "description_length": 703,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_base.Java_unparsing",
      "library": "diffast-langs-java.base",
      "description": "This module transforms Java abstract syntax trees into formatted text through operations like identifier printing, expression rendering, and layout control, using structured data fields and arrays to represent AST components. It leverages precise syntax rules and precedence handling to support tasks like code generation and syntax-aware pretty-printing, with configurable formatting options for use cases such as toolchain output or documentation generation. Key data structures include labeled objects and hierarchical collections that mirror Java's lexical hierarchy, enabling accurate reification of code structure.",
      "description_length": 620,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_fact",
      "library": "diffast-langs-java.base",
      "description": "The module provides utilities for constructing, navigating, and filtering Java abstract syntax trees (ASTs) using semantic and structural relationships. It operates on `Diffast_core.Triple.node` structures, leveraging predefined predicates and accessors to target elements like method parameters, conditionals, and class initializers, while supporting name simplification and fact extraction. These tools enable use cases such as code analysis, context-aware traversal, and configuration-driven processing of hierarchical AST data with object-typed fields.",
      "description_length": 556,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_tree",
      "library": "diffast-langs-java.base",
      "description": "This module offers functions for constructing and transforming Java abstract syntax trees (ASTs) with capabilities like node creation, control flow setup, label and annotation extraction, and tree traversal. It operates on AST nodes with associated metadata (e.g., source locations, annotations), compilation units, and hierarchical tree structures, enabling use cases such as static analysis, refactoring, and code transformation through tools like AST-to-tree conversion and control flow graph generation.",
      "description_length": 507,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base",
      "library": "diffast-langs-java.base",
      "description": "This module provides core components for analyzing, transforming, and generating Java abstract syntax trees (ASTs). It includes utilities for navigating and filtering AST nodes based on semantic and structural properties, creating and classifying AST labels, constructing and manipulating tree structures with metadata, and converting ASTs to formatted source code. These capabilities support concrete use cases such as static analysis, refactoring, code generation, and tools requiring precise manipulation of Java syntax and structure.",
      "description_length": 537,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_lib.Change.CB",
      "library": "diffast-langs-java",
      "description": "This module provides functions to retrieve a label from an object and check if an object is a phantom. It operates on objects with a nested `data` field containing a `_label`. Use cases include analyzing or transforming labeled structures in Java bytecode.",
      "description_length": 256,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_lib.Analyzing.Postprocessing",
      "library": "diffast-langs-java",
      "description": "This module specializes in structural analysis and transformation of tree-based code differences, with a focus on move detection, edit script generation, and synchronization in Java ASTs. It operates on annotated tree nodes, node mappings, and edit scripts to support tasks like refactoring visualization, version comparison, and hierarchical code restructuring, employing techniques such as cost-based pruning, hashtable-driven move tracking, and traversal-based validation.",
      "description_length": 475,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_lib.Change.F",
      "library": "diffast-langs-java",
      "description": "This module provides operations to extract labels and check phantom status from objects with specific data structures. It works with objects containing nested data fields, particularly those with `_label` attributes. Use cases include analyzing or transforming labeled data structures in Java-like intermediate representations.",
      "description_length": 327,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mjava.Java_change.F.CB",
      "library": "diffast-langs-java",
      "description": "This module provides functions to retrieve a label from an object and check if an object is marked as phantom. It operates on objects with a nested `data` field containing a `_label`. Use cases include analyzing or transforming labeled structures in Java-like intermediate representations.",
      "description_length": 289,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_change.F",
      "library": "diffast-langs-java",
      "description": "This module suite supports manipulating code changes (insertions, deletions, modifications) with significance metadata, analyzing Java AST structures through node properties and structural relationships, and defining predicates to identify language constructs (e.g., statements, modifiers, control structures) or contextual roles (e.g., block membership, declaration scope). It operates on Java AST nodes (`Diffast_core.Spec.node_t`), hierarchical triples for relationship encoding, and Diffast_core's tree representations, enabling tasks like code comparison, transformation, and differencing. Specific utilities handle accessibility changes, nesting depth analysis, edit operation extraction, and traversal of statement ancestors to support precise AST refactoring and impact analysis.",
      "description_length": 787,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_lib.Change",
      "library": "diffast-langs-java",
      "description": "This module provides operations for modeling and analyzing changes in Java abstract syntax trees (ASTs), including change type classification (insertions, deletions, modifications), semantic significance scoring, and conversion to graph-based triple representations. It works with structured AST node types from `Diffast_core.Spec`, triples, and metadata, enabling tasks like code diffing, transformation tracking, and semantic analysis. Specific use cases include identifying structural modifications in Java programs, comparing AST node properties, and extracting descriptive information for change visualization or program analysis workflows.",
      "description_length": 645,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_lib.Analyzing",
      "library": "diffast-langs-java",
      "description": "This module performs structural analysis and transformation of Java AST differences, focusing on move detection, edit script generation, and synchronization. It operates on annotated tree nodes, node mappings, and edit scripts to support tasks like refactoring visualization, version comparison, and hierarchical code restructuring. Key techniques include cost-based pruning, hashtable-driven move tracking, and traversal-based validation.",
      "description_length": 439,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_lib.PP",
      "library": "diffast-langs-java",
      "description": "This module provides operations for structural manipulation and analysis of abstract syntax trees (ASTs), focusing on diffing, transformation, and move detection. It works with Java AST nodes and trees enriched with metadata like source locations and labels, alongside data structures such as node mappings, edit scripts, and move tables to track insertions, deletions, relabels, and subtree relocations. Key use cases include code differencing, edit synchronization, and transformation workflows where subtree comparisons, move analysis, or relabeling optimizations are required.",
      "description_length": 580,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mjava.Java_change",
      "library": "diffast-langs-java",
      "description": "This module generates unique identifiers for Java AST nodes and provides functions to manipulate code changes with metadata. It works with Java AST structures, hierarchical triples, and tree representations to support precise code comparison, transformation, and refactoring. Concrete use cases include analyzing accessibility changes, extracting edit operations, and traversing statement ancestors for impact analysis.",
      "description_length": 419,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_lib",
      "library": "diffast-langs-java",
      "description": "This module implements structural analysis and transformation of Java abstract syntax trees (ASTs) with a focus on diffing, move detection, and edit script generation. It operates on annotated AST nodes, node mappings, and edit scripts to support concrete tasks like refactoring visualization, version comparison, and code restructuring workflows. Key functions include `elaborate_edits` for configuring and generating detailed edit scripts, and submodules for change modeling, AST manipulation, and pretty-printing.",
      "description_length": 516,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mjava",
      "library": "diffast-langs-java",
      "description": "This module provides operations for generating unique identifiers for Java AST nodes, manipulating code changes with metadata, and performing structural analysis and transformation of Java ASTs. It works with Java AST structures, hierarchical triples, and edit scripts to support tasks like analyzing accessibility changes, extracting edit operations, and generating detailed edit scripts for refactoring visualization and version comparison. Key functions include precise code comparison, move detection, and traversal of statement ancestors for impact analysis.",
      "description_length": 563,
      "index": 33,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 63,
    "meaningful_modules": 34,
    "filtered_empty_modules": 29,
    "retention_rate": 0.5396825396825397
  },
  "statistics": {
    "max_description_length": 787,
    "min_description_length": 256,
    "avg_description_length": 484.05882352941177,
    "embedding_file_size_mb": 0.49311065673828125
  }
}