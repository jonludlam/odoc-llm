{
  "package": "diffast-langs-java",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 34,
  "creation_timestamp": "2025-07-15T23:14:31.693066",
  "modules": [
    {
      "module_path": "Java_base.Java_label.BinaryOperator",
      "library": "diffast-langs-java.base",
      "description": "This module defines a variant type representing binary operators in Java, including arithmetic, comparison, bitwise, and logical operations. It provides functions to convert operators to different string representations, anonymize them, and map from an AST representation. Concrete use cases include pretty-printing expressions, analyzing or transforming Java code during compilation or static analysis.",
      "description_length": 403,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.Annotation",
      "library": "diffast-langs-java.base",
      "description": "This module defines operations for handling Java annotation labels, including normal, marker, and single-element annotations. It provides functions to retrieve annotation names, convert annotations to various string representations, anonymize them, and extract tag information. Concrete use cases include processing Java bytecode annotations during analysis or transformation tasks, such as identifying annotation types or generating human-readable output for debugging.",
      "description_length": 470,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_base.Java_unparsing.UPB",
      "library": "diffast-langs-java.base",
      "description": "This module generates properly structured Java code by managing layout through box models and output primitives, handling elements like parentheses, brackets, and control characters while maintaining a formatter context. It operates on basic types such as strings, options, and arrays to produce readable code with precise punctuation, spacing, and indentation. Its utilities are critical for code generation tasks requiring syntactic correctness and aesthetic formatting, such as compiler backends or source code pretty-printers.",
      "description_length": 530,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.Statement",
      "library": "diffast-langs-java.base",
      "description": "This module defines a labeled statement type for Java, including constructs like loops, conditionals, and exception handling blocks, each potentially associated with identifiers or tie IDs. It provides operations to extract identifiers, convert statements to strings, anonymize or simplify them, and check relationships between statements. Use cases include analyzing or transforming Java control flow structures during static analysis or code refactoring tasks.",
      "description_length": 462,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_base.Java_label.T",
      "library": "diffast-langs-java.base",
      "description": "The module provides semantic analysis, classification, and transformation operations for Java abstract syntax tree (AST) nodes represented by a structured label type (`t`) and associated annotations. It includes functions for equivalence checks (`quasi_eq`), compatibility assessments (`is_compatible`), data extraction, and boolean predicates to categorize syntactic elements (e.g., literals, control structures, modifiers), enabling use cases like code diffing, merging, and static analysis. These operations support tools requiring precise AST node inspection, such as refactoring utilities or semantic diffing algorithms with custom relabeling rules.",
      "description_length": 654,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_base.Java_label.Modifier",
      "library": "diffast-langs-java.base",
      "description": "This module defines a set of modifiers used in Java, such as `Public`, `Static`, and `Final`, along with operations to convert them to strings, anonymize them, and generate tagged representations. It works directly with the variant type `t` representing Java modifier keywords. Concrete use cases include generating Java source code, analyzing modifier combinations, and serializing modifiers for output or debugging.",
      "description_length": 417,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.Expression",
      "library": "diffast-langs-java.base",
      "description": "This module represents Java expressions with a variant type that includes unary and binary operators, casts, conditionals, and primary expressions. It provides functions to manipulate and inspect expressions, such as extracting names, converting to strings, anonymizing identifiers, and constructing expressions from AST nodes. Use cases include analyzing or transforming Java code during static analysis or refactoring tasks.",
      "description_length": 426,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_tree.Tree",
      "library": "diffast-langs-java.base",
      "description": "This module constructs and manipulates tree nodes with labeled data, annotations, and optional original labels. It supports creating nodes with varying numbers of children, handling unique identifiers, and comparing node labels. Concrete use cases include building abstract syntax trees with metadata for program analysis and transformation tasks.",
      "description_length": 347,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_fact.FB",
      "library": "diffast-langs-java.base",
      "description": "This module offers operations to construct structured nodes for source code elements (like entities, literals, and version control metadata) and provides utilities to traverse and inspect Java abstract syntax trees (ASTs) by navigating parent-child relationships, retrieving node properties, and locating ancestors that satisfy specific predicates. It works with `Diffast_core.Triple.node` and parent-linked objects, enabling use cases such as structural code analysis, AST navigation for refactoring, and extracting hierarchical relationships in Java, C++, or C codebases.",
      "description_length": 573,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_base.Java_unparsing.Fmtr",
      "library": "diffast-langs-java.base",
      "description": "This module provides direct access to a formatter value used for unparsing Java code. It supports operations like `pp_print_string`, `pp_open_box`, and other formatting primitives from the `Format` module. Concrete use cases include generating readable Java source code from abstract syntax trees or intermediate representations.",
      "description_length": 329,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.UnaryOperator",
      "library": "diffast-langs-java.base",
      "description": "This module defines a set of unary operators used in Java, including increment, decrement, sign, and logical operations. It provides conversions to string representations and extracts tags with associated attributes for serialization or analysis. It is used to model and manipulate unary expressions in Java AST transformations and code generation.",
      "description_length": 348,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_lib_base.Tree",
      "library": "diffast-langs-java.base",
      "description": "This module implements tree construction and manipulation operations for XML-based data structures, supporting node creation with annotations, identifiers, and ordinal tables. It works with objects representing tree nodes, labels, and annotations, along with XML input. Functions are used to build and compare nodes, extract label and annotation data, and serialize trees for output.",
      "description_length": 383,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_base.Java_label.Type",
      "library": "diffast-langs-java.base",
      "description": "This module provides operations for analyzing and transforming Java type representations, handling primitives, classes, interfaces, arrays, and void through a unified type system. It offers functions to classify types (e.g., `is_common`, `is_named`), extract structural details (e.g., `get_name`, `get_dimensions`), and convert between string representations (e.g., `to_string`, `strip`), while supporting advanced type manipulations like wildcard handling and name resolution. These capabilities are particularly useful for Java bytecode analysis, type-aware code generation, and static analysis tools requiring precise type modeling.",
      "description_length": 635,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.Primary",
      "library": "diffast-langs-java.base",
      "description": "This module defines a polymorphic type `t` representing various Java primary expressions, such as variable names, literals, method invocations, and array operations. It provides functions to inspect, transform, and simplify these expressions, including extracting names, anonymizing components, converting to strings, and checking compatibility between expressions. Concrete use cases include analyzing Java AST nodes for refactoring, code comparison, and generating concise representations of complex expressions.",
      "description_length": 514,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.AssignmentOperator",
      "library": "diffast-langs-java.base",
      "description": "This module defines a variant type representing Java assignment operators, including standard arithmetic, bitwise, and shift operations. It provides functions to convert these operators to different string representations and to map them from an abstract syntax tree type. Use cases include pretty-printing Java code or analyzing assignments in a Java compiler or linter.",
      "description_length": 371,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_tree.FB",
      "library": "diffast-langs-java.base",
      "description": "This module enables constructing and manipulating Java abstract syntax trees through node creation (wrapping strings into entities, literals, or resource nodes), structural navigation (retrieving parents, children, or metadata like digests), and predicate-driven traversal (locating ancestor nodes with specific labels). It operates on `Diffast_core.Triple.node` structures augmented with labels, annotations, and hierarchical references, supporting use cases like static analysis, code transformation, or AST-based resource version tracking.",
      "description_length": 542,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label.Literal",
      "library": "diffast-langs-java.base",
      "description": "This module represents Java literal values with precise type encodings, including integers, floating points, booleans, characters, strings, text blocks, and null. It provides parsing from AST literals, string conversion, escaping, and anonymization operations tailored for Java source representation. Use cases include literal value manipulation during code analysis, transformation, and generation in Java AST processing.",
      "description_length": 422,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_lib_base",
      "library": "diffast-langs-java.base",
      "description": "This module provides core utilities for working with hierarchical data structures and formatted string generation. Its `Tree` submodule supports building, traversing, and manipulating trees, particularly for XML-like structures, with support for annotated nodes, identifiers, and ordinal tables. The `sprintf` function enables type-safe string interpolation, useful for generating structured output such as XML dumps or log messages. Together, these features allow tasks like constructing abstract syntax trees, comparing node hierarchies, and producing labeled textual representations of data.",
      "description_length": 594,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_fact",
      "library": "diffast-langs-java.base",
      "description": "This module models hierarchical and semantic relationships in Java code using predicate nodes and triple-based AST representations, enabling operations like filtering, labeling, and extracting positional metadata from abstract syntax trees. It provides structured node construction, parent-linked traversal, and ancestor lookup capabilities, working directly with `Diffast_core.Triple.node` to support precise structural analysis and refactoring tasks. The module allows inspecting method parameters, type declarations, and version control metadata while supporting nested relationships such as inheritance and scoping. Examples include building static analysis tools, implementing code navigation systems, and automating refactorings based on control flow and type hierarchies.",
      "description_length": 778,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_tree",
      "library": "diffast-langs-java.base",
      "description": "This module manipulates Java abstract syntax trees with rich metadata, supporting tasks like location tracking, name resolution, and control flow setup through object-oriented tree representations. It provides core operations for node creation, structural navigation, and predicate-based traversal, working with labeled nodes that carry annotations, optional values, and hierarchical references. Concrete tasks include AST-to-XML conversion, control flow graph generation, and semantic analysis via signature comparison or fully qualified name resolution. Submodules handle node construction with variable children and metadata management, enabling static analysis, code transformation, and version tracking of AST-based resources.",
      "description_length": 731,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_label",
      "library": "diffast-langs-java.base",
      "description": "This module coordinates the construction, inspection, and transformation of Java abstract syntax elements through labeled representations, integrating core operations with specialized submodules for expressions, types, statements, and annotations. It supports data types such as labeled AST nodes, modifiers, operators, and literals, with operations for equivalence checks, structural analysis, string conversion, and metadata extraction. You can analyze control flow with labeled statements, inspect or transform Java expressions and types, classify literals, or process annotations with name and tag handling. Submodules enable precise manipulation of unary and binary operators, assignment forms, and type constructs, supporting tasks like static analysis, refactoring, bytecode processing, and custom code generation.",
      "description_length": 821,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Java_base.Java_unparsing",
      "library": "diffast-langs-java.base",
      "description": "This module converts Java abstract syntax trees into well-formatted source code by managing layout, precedence, and structural elements such as expressions, types, and blocks. It uses a formatter context and box model to control indentation, spacing, and punctuation, supporting operations like `pp_open_box` and `pp_print_string` for precise code layout. It also includes utilities for escaping identifiers, resolving nested structures, and applying pattern-based transformations to AST nodes. Examples include generating readable Java code from compiler intermediates or implementing custom pretty-printing for code analysis tools.",
      "description_length": 633,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Java_base",
      "library": "diffast-langs-java.base",
      "description": "This module suite provides comprehensive tools for constructing, analyzing, and transforming Java abstract syntax trees with rich metadata and hierarchical relationships. Key data types include labeled nodes, predicate triples, and annotated trees, supporting operations such as structural traversal, semantic inspection, type-safe string generation, and control flow analysis. You can build and compare ASTs, generate XML or source code from Java ASTs, extract method metadata, or implement refactoring tools using precise node manipulation and formatting controls. Specific tasks include static analysis, code navigation, pretty-printing, and transformation of Java code based on semantic and structural patterns.",
      "description_length": 715,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_lib.Change.F",
      "library": "diffast-langs-java",
      "description": "This module provides operations to extract labels and check phantom status from objects with nested data structures. It works with objects containing a `data` field that includes a `_label` of type `Stdlib.Obj.t`. Use cases include analyzing or transforming labeled data structures in Java-like intermediate representations.",
      "description_length": 324,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mjava.Java_lib.Analyzing.Postprocessing",
      "library": "diffast-langs-java",
      "description": "This module specializes in structural analysis and transformation optimization of Java abstract syntax trees during postprocessing, focusing on move detection, edit refinement, and conflict resolution. It operates on tree nodes, hierarchical node mappings, and edit records to",
      "description_length": 276,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mjava.Java_lib.Change.CB",
      "library": "diffast-langs-java",
      "description": "This module provides functions to retrieve label information and check phantom status from objects with structured data fields. It operates on objects containing nested data with a `_label` field of type `Stdlib.Obj.t`. Useful for analyzing or transforming labeled program elements in compiler or static analysis tools.",
      "description_length": 319,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mjava.Java_change.F.CB",
      "library": "diffast-langs-java",
      "description": "This module provides functions to retrieve a label from an object and check if an object is marked as phantom. It operates on objects with a nested data structure containing a `_label` field. Concrete use cases include analyzing or transforming labeled nodes in a program's intermediate representation.",
      "description_length": 302,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mjava.Java_change.F",
      "library": "diffast-langs-java",
      "description": "The module represents code changes with significance levels and analyzes Java AST structure to identify syntactic roles and properties like nesting depth and source location. It supports operations on AST nodes and triples for tasks such as code comparison, refactoring, and edit script generation, with utilities for string conversion, grafting, and predicate-based classification. Its child module extends functionality by extracting labels and detecting phantom markers in nested data structures, enabling deeper analysis and transformation of program representations. Examples include identifying method bodies for targeted refactoring, analyzing field accesses, and classifying loop components within ASTs.",
      "description_length": 711,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_lib.PP",
      "library": "diffast-langs-java",
      "description": "This module facilitates manipulation and analysis of Java abstract syntax trees (ASTs) in diffing and transformation workflows. It provides operations for tree traversal, move detection, edit generation, and structural consistency checks, operating on AST nodes with metadata, node mappings, and edit operations. Specific applications include refactoring detection, delta edit generation, and resolving conflicts from crossing moves or structural inconsistencies.",
      "description_length": 463,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mjava.Java_lib.Analyzing",
      "library": "diffast-langs-java",
      "description": "This module analyzes structured code representations through tree comparison and manipulation operations, enabling tasks like isomorphism classification, subtree pruning, and diff statistics generation. It handles complex trees with metadata-rich nodes, supporting customizable thresholds for structural comparison and detailed difference reporting. The Java-specific submodule enhances these capabilities with move detection, edit refinement, and conflict resolution on ASTs during postprocessing. Together, they enable precise structural analysis, refactoring support, and optimized code transformation workflows.",
      "description_length": 615,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_lib.Change",
      "library": "diffast-langs-java",
      "description": "This module analyzes and transforms labeled data structures in nested objects, particularly those with a `_label` field of type `Stdlib.Obj.t`. It provides direct operations to extract labels and determine phantom status, enabling inspection or modification of structured data in compiler intermediates or program representations. Child modules extend these capabilities to handle complex nested data layouts and structured program elements, supporting detailed label retrieval and status checks across different object hierarchies. Examples include traversing Java-like intermediate structures to identify labeled components or filtering out phantom elements during static analysis.",
      "description_length": 683,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mjava.Java_change",
      "library": "diffast-langs-java",
      "description": "This module transforms Java code elements while tracking unique identifiers through AST analysis and syntactic role detection. It provides the `nups` function for UID-to-string conversion and includes the `F` submodule for extended transformation logic like grafting, classification, and edit script generation. You can use it to analyze nesting depth, compare code structures, or identify method bodies for refactoring. The module also supports label extraction and phantom marker detection in nested constructs for precise program transformation.",
      "description_length": 548,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mjava.Java_lib",
      "library": "diffast-langs-java",
      "description": "This module enables precise edit analysis and transformation of tree-structured code representations, combining core operations for node mapping, conflict resolution, and edit generation with specialized submodules for Java AST manipulation, structural comparison, and labeled data analysis. It centers on tree nodes, edit operations, and mappings, with support for subtree matching, adjacency corrections, and customizable comparison thresholds, facilitating tasks like automated refactoring, diffing, and semantic change tracking. The Java-specific submodule enhances these capabilities with move detection, structural consistency checks, and edit refinement on ASTs, while the labeled data submodule enables inspection and transformation of nested structures with `_label` fields, including filtering phantom elements and retrieving label metadata. Together, they support end-to-end workflows for structured code analysis, transformation, and optimization across multiple representation layers.",
      "description_length": 997,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mjava",
      "library": "diffast-langs-java",
      "description": "This module analyzes and transforms Java code through abstract syntax tree manipulation, tracking unique identifiers and syntactic roles to enable precise structural edits. It provides data types such as tree nodes, edit operations, and labeled structures, along with operations for grafting, classification, and edit script generation. You can use it to compare code structures, identify method bodies for refactoring, detect moves and structural inconsistencies in ASTs, or filter nested constructs using label metadata. Specific tasks include automated refactoring, semantic change tracking, and generating refined edit scripts across multiple code representation layers.",
      "description_length": 674,
      "index": 33,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 64,
    "meaningful_modules": 34,
    "filtered_empty_modules": 30,
    "retention_rate": 0.53125
  },
  "statistics": {
    "max_description_length": 997,
    "min_description_length": 276,
    "avg_description_length": 529.7058823529412,
    "embedding_file_size_mb": 0.12399959564208984
  }
}