{
  "package": "biotk",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 147,
  "creation_timestamp": "2025-06-18T16:53:38.461457",
  "modules": [
    {
      "module_path": "Biotk.Ucsc_genome_browser.Chrom_size.Fields.Direct",
      "description": "Processes a structured data type by applying functions to specific fields, iterating, folding, and transforming values associated with chromosome and size attributes. Operates on a type `t` containing string and integer fields, enabling manipulation and traversal of these components. Used to update mutable fields, generate lists, or perform bulk operations on genomic or tabular data structures.",
      "description_length": 397,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.FeatureCounts.Tsv.Fields.Direct",
      "description": "Provides operations to iterate over, fold, check conditions, and transform values associated with specific fields in a record type. Works with a structured type containing fields like id, chr, lo, hi, strand, length, and count, each with distinct data types. Used to process genomic data records by applying functions to individual fields or generating lists of transformed values.",
      "description_length": 381,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk_pipes.Pipe.Make.Monad_infix",
      "description": "Performs binding operations on monadic values, chaining computations that carry input and output contexts. Operates on type `('i, 'o, 'a) t`, representing computations with input, output, and result. Enables sequential processing of I/O-bound tasks while preserving context between steps.",
      "description_length": 288,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.GLoc.Map.Key",
      "description": "Provides serialization and deserialization between a custom type and S-expressions, along with a comparator for ordered operations. Works with a generic type `t` and a phantom type `comparator_witness` to enforce type-specific comparisons. Used to enable ordered data structures like sets and maps with custom key types.",
      "description_length": 320,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Map.Diff",
      "description": "Provides operations to convert between a structured data type and S-expressions, and to compute and apply differences between map-like structures. Works with map-based data types that track changes through optional diffs. Computes delta updates between maps and applies them to derive new states.",
      "description_length": 296,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Map.Provide_of_sexp",
      "description": "Converts a S-expression into a key type using a custom parsing function. Works with Sexp.t and Key.t data structures. Used to deserialize configuration keys from S-expressions in parsing workflows.",
      "description_length": 197,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Map.Provide_bin_io",
      "description": "Provides functions to serialize and deserialize values of type Key.t using Bin_prot, including size calculation, writing, reading, and shape information. Works with Key.t and polymorphic variants of Key.t. Used to persist and reconstruct key data structures in binary format for storage or communication.",
      "description_length": 304,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Map.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance and consistency with comparison. Works with custom data types and collections, incorporating size information to prevent prefix-based collisions. Used to generate reliable hash values for complex structures in hashing and equality checks.",
      "description_length": 369,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Set.Elt",
      "description": "Provides serialization and deserialization between a type and S-expressions, along with a comparator for ordered operations. Works with a generic type `t` and its associated comparator witness. Used to enable persistent storage and ordered comparisons in data structures.",
      "description_length": 271,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Set.Diff",
      "description": "Provides operations to compute and apply differences between sets of elements, including converting between S-expressions and set differences, and applying a difference to a base set. Works with set-based data structures and optional difference representations. Used to track changes between versions of a set and reconstruct modified states.",
      "description_length": 342,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Set.Provide_of_sexp",
      "description": "Converts an S-expression into a custom type using a provided constructor. Operates on `Sexp.t` and the module's defined type `Elt.t`. Used to parse structured data from S-expressions into application-specific values.",
      "description_length": 216,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Set.Provide_bin_io",
      "description": "Provides binary serialization and deserialization for a type `t` using Bin_prot, including size calculation, writing, reading, and shape information. Operates on a type `t` that is parameterized by `Elt.t`, supporting both direct and variant-based reading. Used to persist and reconstruct complex data structures efficiently in binary format.",
      "description_length": 342,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Set.Provide_hash",
      "description": "Provides a hash folding mechanism that integrates the contents of structured data into a hash state, ensuring collision resistance by incorporating size information before element-wise folding. Works with custom data types defined using the `Elt` module, supporting recursive and composite structures. Used to generate consistent, collision-resistant hash values for complex types in serialization and equality checks.",
      "description_length": 418,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Ucsc_genome_browser.Chrom_size.Fields",
      "description": "Processes a structured data type by applying functions to specific fields, supporting iteration, folding, and transformation of values linked to chromosome and size attributes. It works with a type `t` that includes string and integer fields, allowing for updates, list generation, and bulk operations on genomic or tabular data. Functions can traverse and modify components, enabling tasks like filtering rows by chromosome or aggregating size values. Examples include updating field values in bulk or extracting lists of specific attributes for analysis.",
      "description_length": 556,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.FeatureCounts.Tsv.Fields",
      "description": "Processes genomic data records by enabling iteration, folding, condition checking, and transformation on structured fields such as id, chr, lo, hi, strand, length, and count. Supports operations that extract, modify, or aggregate field values, allowing for custom processing pipelines. For example, it can compute the total length of all records or filter records based on strand information. The core data types include the structured record and functions that operate on individual or grouped fields.",
      "description_length": 502,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Idr.Narrow_output.Row",
      "description": "Returns the location associated with a row object, extracting the GLoc.t value from its internal structure. Works with the t type, which encapsulates row data including positional information. Used to retrieve spatial coordinates for rendering or layout calculations in a graphical interface.",
      "description_length": 292,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Idr.Broad_output.Row",
      "description": "Returns the location associated with a row, extracted from a structured record type that includes a GLoc.t field. Operates on a record type containing a location and other row-specific data. Used to retrieve positioning information for rendering or layout calculations in a graphical interface.",
      "description_length": 294,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bed.Bed4.Item",
      "description": "Returns the location associated with an item, constructs an item from a line object, and converts an item to its string representation. Works with the `GLoc.t` type for positioning and `Line.t` for input parsing. Used to parse and serialize item data within a text-based format.",
      "description_length": 278,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bed.Bed3.Item",
      "description": "Returns the location associated with an item, constructs an item from a line, converts an item to its string representation, and creates an item from a location. Works with `GLoc.t` and `Line.t` types. Used to parse and serialize item data in a structured format.",
      "description_length": 263,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bed.Bed6.Item",
      "description": "Returns the location associated with an item. Constructs an item from a line of text. Converts an item back into its string representation. Works with the `GLoc.t` type for tracking positions and `Line.t` for processing text lines. Used to parse and serialize item data within a structured text format.",
      "description_length": 302,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bed.Bed5.Item",
      "description": "Returns the location of an item as a GLoc.t value. Constructs an item from a Line.t value and converts an item to a string. Transforms an item into a Bed4.item format for genomic data processing. Works with line-based data and genomic interval representations.",
      "description_length": 260,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff.GFF3.Item",
      "description": "Parses a line into either a comment string or a record object. Converts items back into their string representation for output. Works with line data and structured record types to handle configuration or log entries.",
      "description_length": 216,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff.GFF2.Item",
      "description": "Parses a line into either a comment or a record, using a specific line type as input. Converts items back into string representations for output. Works with line data and structured records to handle configuration or log file entries.",
      "description_length": 234,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk_pipes.Pipe.Make",
      "description": "Provides monadic operations for chaining computations, including lifting values into a context and binding functions that produce new contexts. Works with a parameterized type 'a t that represents computations in a context. Used to sequence file creation steps in build systems, where each step depends on the success of the previous.",
      "description_length": 334,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_pipes.Pipe.Monad_infix",
      "description": "Performs binding operations on monadic values, chaining computations that carry input and output contexts. Operates on values wrapped in a monadic type that tracks input and output states. Enables sequential processing of effectful operations in a structured, composable manner.",
      "description_length": 278,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk_pipes_unix.Pipe.Monad_infix",
      "description": "Performs sequential composition of monadic actions, binding the result of one computation to the next. Operates on a monadic type parameterized by input, output, and result types. Enables chaining of I/O-bound or effectful operations in a structured manner.",
      "description_length": 257,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Croquis.Font",
      "description": "Returns metrics for font glyphs including ascender, descender, and bounding box coordinates. Operates on a font type `t` representing specific font configurations. Used to retrieve baseline and dimension data for rendering text in fixed-width and proportional layouts.",
      "description_length": 268,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Croquis.Axis",
      "description": "Creates an axis object with a label and two endpoints, supporting horizontal and vertical drawing operations with projection functions and tick marks. Works with floating-point coordinates and a custom axis type. Used to render axes in graphical projections, such as plotting data on a 2D canvas with labeled ticks.",
      "description_length": 315,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Croquis.Viewport",
      "description": "Creates a coordinate mapping system for visualizing data, supporting axis labeling and scaling. Operates on a custom type `t` representing a viewport with defined limits and size. Used to convert data coordinates to pixel positions for plotting graphs or diagrams.",
      "description_length": 264,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Croquis.Plot",
      "description": "Generates geometric elements for visualizing data, including points, lines, horizontal and vertical lines, regression lines, and function graphs. Operates on float arrays and individual float values to construct visual components. Used to create scatter plots, trend lines, and mathematical function visualizations in graphical outputs.",
      "description_length": 336,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Croquis.Colormap",
      "description": "Generates color palettes from grayscale values or HSL parameters, with each palette represented as an array of Gg.Color.t values. The function `greys` creates a gradient from black to white based on the number of steps, while `hsl` constructs a palette with a fixed hue and varying lightness. These palettes are used for visualizing data ranges or generating consistent color schemes in graphics applications.",
      "description_length": 409,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Font_data.Internal",
      "description": "This module exposes predefined string values, each serving as a unique hexadecimal hash or identifier, primarily used for verification, identification, or system configuration. It operates exclusively with string data, returning fixed, unmodified literals without performing any transformations or computations. These constants likely support internal referencing, validation checks, or standardized data representation within the application.",
      "description_length": 443,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk_croquis.Vg_text.Font",
      "description": "Returns font metadata such as ascent, descent, and bounding box coordinates. Processes font data from strings or files, extracting textual and numerical properties. Used to analyze glyph dimensions and validate font file content.",
      "description_length": 229,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Vg_text.Layout",
      "description": "Creates a layout object from a font, size, and string, enabling precise measurement of text dimensions. Computes the width, maximum y-coordinate, and minimum y-coordinate of the rendered text. Used to position and align text elements in graphical interfaces with exact spacing and alignment.",
      "description_length": 291,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Encode.Experiment_list",
      "description": "Provides functions to parse experiment data from a string, with `parse` returning a result type and `parse_exn` raising exceptions on failure. Works with a list of `item` records, each containing structured experiment details. Includes dedicated URLs for human and mouse experiments, used for generating specific resource links.",
      "description_length": 328,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Set",
      "description": "Encodes and decodes values between S-expressions and custom types, supporting ordered operations via comparators and difference tracking for set modifications. Handles binary serialization with Bin_prot, enabling efficient storage and reconstruction of complex structures. Parses S-expressions into application-specific values using defined constructors and folds structured data into collision-resistant hashes. Examples include saving set states, applying incremental changes, and generating unique identifiers for complex records.",
      "description_length": 533,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Map",
      "description": "Encapsulates operations for handling custom key types, including S-expression and binary serialization, delta computation, and hash folding. Supports ordered comparisons, configuration parsing, and state transitions in map-like structures. Enables reliable hashing, efficient storage, and precise deserialization of key-based data. Examples include converting keys between formats, applying map updates, and generating consistent hash values for complex types.",
      "description_length": 460,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Alphabet.Make",
      "description": "Generates a string containing all lowercase English letters. Operates on no inputs and returns a fixed-length string. Used to create a reference alphabet for cipher algorithms or text analysis.",
      "description_length": 193,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Ncbi_genome.Assembly_summary",
      "description": "Provides functions to convert between CSV rows and a structured type, including generating reversed CSV headers, creating instances from rows, and serializing instances to CSV. Works with lists of strings and a specific type `t` derived from a record. Used to process CSV data where each row maps directly to an instance of `t`, supporting both loading and saving operations with customizable separators.",
      "description_length": 404,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Ucsc_genome_browser.Chrom_size",
      "description": "Processes structured data with string and integer fields, enabling iteration, folding, and transformation of chromosome and size attributes. It supports bulk updates, list generation, and aggregation, allowing tasks like filtering by chromosome or summing size values. Operations can traverse and modify components, making it suitable for genomic or tabular data manipulation. Examples include generating lists of chromosome names or calculating total sizes across entries.",
      "description_length": 473,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Cisbp.TF_information",
      "description": "Loads a list of structured data items from a file, where each item contains specific fields. Works with a list of records, each representing a distinct data entry. Used to parse configuration files or data logs into an in-memory structure for processing.",
      "description_length": 254,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Cisbp.Motif",
      "description": "Extracts position weight matrices from files and directories, processes them into a 2D float array structure, and generates position weight matrices for sequence analysis. Reads multiple motif files from a directory, associating each with its corresponding data. Used to analyze DNA or protein sequences by matching motif patterns against biological data.",
      "description_length": 355,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.FeatureCounts.Tsv",
      "description": "Processes genomic data by enabling iteration, folding, and transformation on structured fields like id, chr, lo, hi, strand, length, and count. Core operations include filtering, aggregating, and modifying records, with data types centered on structured records and field-level functions. It allows tasks such as summing record lengths or isolating records by strand. Custom processing pipelines can be built using these combinable operations.",
      "description_length": 443,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.FeatureCounts.Summary",
      "description": "Loads a serialized summary from a file path and returns a structured summary object. It works with a record type containing fields for aggregated data points and metadata. Used to restore processed data for reporting or further analysis.",
      "description_length": 237,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Macs2.Xls",
      "description": "Parses a line into an item, returning a result with possible error messages. Reads a file and returns a list of items, handling parsing errors. Works with line and record data structures, extracting location information from records.",
      "description_length": 233,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Macs2.Broad_peaks",
      "description": "Parses a line into an item, returning a result that may contain an error message. It processes lines from genomic data, extracting structured information about peaks. The item type includes fields such as chromosome, start and end positions, and peak score.",
      "description_length": 257,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Sam.Flags",
      "description": "Provides functions to convert between a private integer type and S-expressions, and to check specific properties of sequencing alignment flags. Includes operations to determine segment alignment status, reverse complementation, and alignment quality. Used to analyze BAM file alignment records for bioinformatics processing.",
      "description_length": 324,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Profile_matrix.Make",
      "description": "Provides operations to convert between a custom type `t` and characters, including mapping all values to a list, determining the size, and converting to and from integers. Works with the abstract type `t` and character data. Used to encode and decode values in a fixed set of symbols, such as in cipher implementations or data serialization.",
      "description_length": 341,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Profile_matrix.DNA",
      "description": "Provides operations to create and manipulate DNA sequences represented as 2D float arrays, including calculating sequence composition, entropy, and generating visualizations. Supports reversing and complementing sequences, and offers methods to render profiles and sequences with customizable color palettes. Works with float array arrays and returns graphical representations for biological data visualization.",
      "description_length": 411,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Profile_matrix.Protein",
      "description": "Provides operations to create and manipulate protein data structures, including converting from 2D float arrays, calculating sequence length, and deriving composition and entropy profiles. Works with private 2D float arrays representing protein sequences and color palettes for visualization. Generates graphical representations of protein sequences and their statistical properties for analysis.",
      "description_length": 396,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Pwm_stats.TFM_pvalue",
      "description": "Computes score distributions for PWMs using specified alpha and beta parameters, calculates p-values from a given score, and determines the score corresponding to a target p-value. Operates on Pwm.t and Pwm.background types, which represent position weight matrices and background nucleotide frequencies. Used to assess sequence motif significance in bioinformatics applications.",
      "description_length": 379,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Igv.Statement",
      "description": "Creates and manipulates genomic data structures, supporting initialization from a string or file with specified format, index, and name. Operates on a custom type `t` representing genomic statements. Used to load and process sequence data for analysis pipelines.",
      "description_length": 262,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gene.Transcript",
      "description": "Provides operations to create and query genomic transcript data, including extracting exon and intron ranges, determining genomic coordinates, and calculating upstream and downstream regions. Works with genomic location data represented as `GLoc.t` and lists of such locations. Used to analyze gene structure and predict regulatory regions near transcripts.",
      "description_length": 357,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Idr.Narrow_output",
      "description": "Extracts GLoc.t values from row objects, enabling access to spatial coordinates stored within the t type. This functionality supports layout and rendering by exposing positional data embedded in row structures. It allows developers to query exact locations for elements during visualization or user interaction. For example, it can be used to determine the screen position of a table row or align UI components dynamically.",
      "description_length": 423,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Idr.Broad_output",
      "description": "Extracts location data from structured records containing a GLoc.t field, enabling precise positioning in graphical layouts. The primary data type is a record with a location and row-specific fields, supporting operations that isolate and utilize the GLoc.t value. This allows for dynamic rendering adjustments based on row positions. For example, it can determine the exact screen coordinates for a row during layout updates.",
      "description_length": 426,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bed.Item",
      "description": "Returns the location associated with an item and constructs or serializes items from or to a line. Operates on a tuple of a location and a list of strings. Used to parse and generate configuration lines with positional metadata.",
      "description_length": 228,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bed.Bed3",
      "description": "Handles item location retrieval, construction from lines, and conversion to strings using `GLoc.t` and `Line.t`. Supports parsing and serializing item data through structured operations. Allows creating items from locations or lines and converting them back to readable formats. Enables precise manipulation of item metadata in genomic or tabular data workflows.",
      "description_length": 362,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bed.Bed4",
      "description": "Handles item positioning, parsing, and serialization using `GLoc.t` for locations and `Line.t` for input. Provides functions to extract locations from items, build items from lines, and convert items to strings. Supports text-based data manipulation by translating between structured item representations and line-based input. For example, it can parse a line into an item or generate a string representation for output.",
      "description_length": 420,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bed.Bed5",
      "description": "handles line-based genomic data by converting between Line.t, GLoc.t, and Bed4.item types. It enables location extraction, item construction, and format transformation for genomic intervals. Operations include string conversion and data restructuring for downstream analysis. For example, it can convert a line from a file into a genomic location or reformat an item for compatibility with Bed4 tools.",
      "description_length": 401,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bed.Bed6",
      "description": "Handles item location tracking, text line processing, and data serialization. Utilizes `GLoc.t` for position management and `Line.t` for line manipulation, enabling precise text parsing and reconstruction. Supports converting items to and from string representations, maintaining structured data integrity. Allows for accurate tracking of item positions and efficient text line handling in formatted input.",
      "description_length": 406,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Let_syntax.Result",
      "description": "Handles sequential computation with error propagation using bind and map operations. Works with the result type, which represents computations that may fail with a specific error type. Enables safe chaining of operations where each step depends on the success of the previous one, such as parsing and validating user input.",
      "description_length": 323,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Dna_sequence.Parser_of_char",
      "description": "Processes character-based input to compute and retrieve scores for specific nucleotide symbols. Operates on nucleotide symbols and returns floating-point scores based on predefined parsing rules. Used to evaluate alignment quality in sequence analysis tasks.",
      "description_length": 258,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Dataframe.Parser",
      "description": "Parses strings into arrays of integers, floats, or strings, with options to handle missing values. Supports error formatting and conversion to strings for diagnostic output. Provides monadic operations for chaining parsing steps and transforming results.",
      "description_length": 254,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Dataframe.Ez",
      "description": "Reads and parses data from a file into a structured format, supporting retrieval of integers, floats, and strings by index or name. Handles optional values and allows configuration of header parsing behavior. Used to extract specific columns from structured data files like CSVs or configuration tables.",
      "description_length": 303,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Wfa.Make",
      "description": "Provides arithmetic and comparison operations for a numeric type, including addition, minimum, maximum, and ordering. Works with a custom type `t` that supports numeric semantics. Enables precise manipulation of values in contexts requiring ordered arithmetic operations.",
      "description_length": 271,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Wfa.Nucleotide",
      "description": "Provides functions to retrieve all nucleotide types, convert individual nucleotides to strings, and access each nucleotide variant (A, C, G, T) as a value. Operates on the `t` type, representing a single nucleotide. Used to generate a complete set of nucleotides for sequence analysis or to serialize nucleotide values for output.",
      "description_length": 330,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Wfa.Nucleotide_frequency",
      "description": "Calculates the frequency-based score of a nucleotide symbol, returns the score for missing symbols, and computes the complementary frequency distribution. It operates on a tuple of four floats representing nucleotide frequencies and individual nucleotide symbols. Used to analyze DNA sequence patterns by quantifying base presence and generating complementary sequences.",
      "description_length": 370,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Wfa.Nucleotide_IUPAC",
      "description": "Calculates a score for a given nucleotide symbol based on a predefined profile. Handles missing symbols by returning a designated default score. Operates on custom types for symbols, profiles, and numerical scores. Used to evaluate sequence alignment quality in bioinformatics pipelines.",
      "description_length": 287,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Wfa.PSSM",
      "description": "Provides operations to construct and analyze sequence profiles using nucleotide frequency data, including creating expressions for sequences, gaps, and disjunctions. Works with custom types `expression` and `automaton` to represent pattern models and their corresponding state machines. Used to scan biological sequences for motif matches, compute score ranges, and generate expressions from count matrices.",
      "description_length": 407,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Fastq.Stats",
      "description": "Provides functions to parse and compute statistical summaries from raw data, including mean, median, and standard deviation. Works with structured data containing numerical values and error handling for malformed inputs. Used to process log files and generate performance metrics.",
      "description_length": 280,
      "index": 69,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.NarrowPeak.Item",
      "description": "Parses a line into an item using a line parser function. Operates on line data and returns structured item representations. Used to convert raw input lines into processed item objects for further processing.",
      "description_length": 207,
      "index": 70,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Line_oriented.Parser",
      "description": "Provides a step function that processes byte chunks to extract lines, returning updated state and parsed lines. Operates on a state type and string options representing input chunks. Used to parse streaming data, such as log files or network input, maintaining line count and processing progress.",
      "description_length": 296,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Line_oriented.Make",
      "description": "Parses a line into a structured representation and converts that structure back into a string. It operates on a line type and a custom type `t` that encapsulates parsed data. This is used to transform input lines into a usable format and reconstruct them for output.",
      "description_length": 266,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff.Record",
      "description": "Provides serialization and deserialization between a record type and S-expressions, along with access to location information, length, and specific attributes. Works with a structured record type containing a location, and string-based attributes. Used to parse and inspect structured data in a format compatible with Sexp parsing.",
      "description_length": 331,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff.GFF2",
      "description": "Processes lines from configuration or log files by parsing them into structured records or comments, and reconstructing them as strings. Supports line data and record types, enabling manipulation and transformation of file content. Allows for reading, modifying, and writing entries while preserving format and metadata. Can extract fields, filter comments, or rewrite records with adjusted parameters.",
      "description_length": 402,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Gff.GFF3",
      "description": "Handles line-based data by parsing and serializing entries, supporting both comments and structured records. Core data types include strings for comments and record objects with fields like sequence name, source, feature type, and attributes. Operations include parsing lines into structured data, converting records back to strings, and managing configuration or log entries efficiently. Example tasks include extracting feature locations or modifying attribute fields in genomic data files.",
      "description_length": 492,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff.Annotation",
      "description": "Converts a list of items into a structured annotation format, using specified labels for gene and transcript identifiers. It extracts gene mappings and UTR records, returning them in associative tables with error tracking. Used to process genomic data for downstream analysis of gene regions and transcript features.",
      "description_length": 316,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Macs.Xls",
      "description": "Parses a line of text into a structured entry by matching known formats and extracting relevant components. Converts structured entries back into formatted strings for output or display. Operates on line data and custom item types representing parsed spreadsheet rows.",
      "description_length": 268,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bam.Header",
      "description": "Converts between SAM header structures and a specialized internal representation. Works with SAM header records and custom type t for efficient manipulation. Used to parse and generate BAM file headers during data processing pipelines.",
      "description_length": 235,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bam.Alignment0",
      "description": "Provides functions to extract specific fields from BAM alignment records, including query name, flags, reference ID, position, CIGAR string, and optional fields, with error handling for malformed data. Works with custom types for alignment data, headers, and quality scores, enabling efficient parsing and encoding. Used to process BAM files for targeted analysis where full record decoding is unnecessary.",
      "description_length": 406,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Meme.Motif_format",
      "description": "Encodes motif data into MEME format, writing to an output channel. It handles probability matrices, nucleotide alphabets, and strand information. Used to generate MEME-compatible files for motif analysis in bioinformatics pipelines.",
      "description_length": 232,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bamstats.Fragment_length_histogram",
      "description": "Provides functions to initialize a histogram and update it with alignment data from BAM files, tracking fragment lengths. Operates on a private type encapsulating histogram state and processes `Bam.Alignment0.t` records. Used to analyze sequencing data by aggregating fragment length distributions for quality control and downstream analysis.",
      "description_length": 342,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bamstats.Chr_histogram",
      "description": "Provides functions to initialize and update a histogram tracking alignment data from BAM files. Operates on `Bam.Header.t` and `Bam.Alignment0.t` to aggregate read quality and mapping information. Used to analyze sequencing data by counting reads with specific mapq values within defined ranges.",
      "description_length": 295,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GAnnot.Selection",
      "description": "Provides operations to manage sets of non-overlapping genomic locations, including adding, intersecting, unioning, and differencing regions. Works with `GLoc.t` values to represent genomic intervals and returns sequences or counts of overlaps. Used to analyze genomic data by checking overlaps with specific regions or aggregating intervals into a non-overlapping set.",
      "description_length": 368,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GAnnot.LSet",
      "description": "Provides operations to manage sets of genomic locations, including checking for intersections, finding the closest location, and retrieving intersecting elements. Works with sequences of `GLoc.t` values and a custom set type `t`. Used to determine genomic overlaps, locate nearest gene loci, and filter sets based on positional criteria.",
      "description_length": 337,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GAnnot.LMap",
      "description": "Provides operations to manage a collection of genomic locations with associated values, including adding elements, checking intersections, finding the closest location, and converting to and from sequences. Works with genomic location objects (GLoc.t) and arbitrary annotations. Used to efficiently query genomic data for overlaps and proximity, such as identifying nearby gene regions or regulatory elements.",
      "description_length": 409,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GAnnot.LAssoc",
      "description": "Provides operations to convert between association lists and a private list structure, filter entries based on location and value, and perform fold operations across two structured datasets. Works with lists of tuples containing location identifiers (GLoc.t) and associated values. Enables precise matching of locations with customizable distance thresholds and interval-based comparisons.",
      "description_length": 389,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff.Item",
      "description": "Parses a line into either a comment or a record, using a specific line type as input. Converts items back into string representations for output. Works with line data and structured records to handle configuration or log file entries.",
      "description_length": 234,
      "index": 87,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk_pipes.Pipe",
      "description": "Encapsulates monadic computations that track input and output contexts, enabling sequential execution of effectful operations. Operates on values wrapped in a context-aware monadic type, supporting binding and chaining of transformations. Allows for structured composition of operations that maintain state across steps. For example, it can sequence I/O actions, manage resource allocation, or process data streams with preserved context.",
      "description_length": 438,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk_pipes_unix.Pipe",
      "description": "Provides a mechanism for sequentially composing monadic actions, where each step transforms input to output through effectful computations. The core type encapsulates a computation that takes an input, produces an output, and yields a result, supporting chaining via binding. Operations include `map`, `bind`, and `return`, enabling fluent manipulation of I/O or side-effecting processes. For example, it can be used to read a file, parse its contents, and write the result to another location in a single, readable flow.",
      "description_length": 521,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Croquis",
      "description": "Provides tools for rendering text, axes, and data visualizations by integrating font metrics, coordinate systems, and color schemes. It handles font dimensions, axis labeling, coordinate transformations, and geometric drawing, along with palette generation for visual consistency. Operations include calculating glyph bounds, creating labeled axes, mapping data to screen coordinates, and generating plots with customizable colors. Examples include rendering proportional text, plotting data with axis ticks, and visualizing functions with color-coded gradients.",
      "description_length": 562,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Font_data",
      "description": "contains predefined string-based identifiers used for verification, configuration, and reference, all returned as unaltered literals. it defines constants such as version hashes, checksums, or unique keys, which are directly accessible as string values. these identifiers enable consistent validation, lookup, or conditional logic based on exact string matches. examples include checking a known hash against a computed value or retrieving a configuration key for system setup.",
      "description_length": 477,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Vg_text",
      "description": "Provides font metadata and text layout capabilities, enabling analysis of glyph dimensions and precise text measurement. It handles font properties like ascent, descent, and bounding boxes, and computes text metrics such as width and vertical bounds. Users can process fonts from strings or files and generate layout objects for accurate text positioning. Examples include validating font files and aligning text elements in a graphical layout.",
      "description_length": 444,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Alphabet",
      "description": "Provides operations to convert between characters and a custom type `t`, including mapping to and from integers, and retrieving all elements in the alphabet. Works with the abstract type `t` and standard characters. Used to validate and convert characters to a normalized representation, such as mapping input to a fixed set of symbols.",
      "description_length": 336,
      "index": 93,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Amino_acid",
      "description": "Provides operations to convert between amino-acid representations, including mapping to and from characters and integers. Works with a custom type `t` representing amino acids. Used to validate and translate single-character codes into their corresponding amino-acid values.",
      "description_length": 274,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bai",
      "description": "Provides functions to parse BAI index files, compute genomic region bins, and iterate over intervals. Works with data structures representing reference sequences, intervals, and bin ranges. Used to efficiently query BAM file regions by converting coordinate ranges into precomputed bin indices.",
      "description_length": 294,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bam",
      "description": "Processes BAM files by converting SAM headers into an internal format and extracting specific alignment fields for efficient data handling. Supports custom types for headers, alignment records, and quality scores, enabling precise manipulation and error-resistant parsing. Allows extraction of query names, flags, reference IDs, positions, and CIGAR strings without full record decoding. Used in pipelines for targeted analysis, header modification, and data filtering.",
      "description_length": 469,
      "index": 96,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bam_iterator",
      "description": "Iterates over BAM file alignments using a provided reference index, applying a folding function to accumulate results. Processes a single genomic location or a list of locations, working with BAM headers and alignment records. Used to aggregate read data for specific genomic regions in bioinformatics pipelines.",
      "description_length": 312,
      "index": 97,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bamstats",
      "description": "Tracks fragment lengths and read quality metrics from BAM files using private state types and alignment records. Supports histogram updates with data from `Bam.Header.t` and `Bam.Alignment0.t`, enabling analysis of mapping quality and fragment distributions. Can count reads with mapq values in specified ranges or aggregate fragment lengths for quality control. Examples include identifying low-quality alignments or visualizing library size distributions.",
      "description_length": 457,
      "index": 98,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bed",
      "description": "Processes and stores structured data records, supporting loading from and saving to string representations. Operates on a custom `item` type and a labeled map structure for annotated data. Used to persist and retrieve configuration settings and annotated datasets.",
      "description_length": 264,
      "index": 99,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bgzf",
      "description": "This module enables reading from and writing to BGZF-compressed files, offering low-level binary and string I/O operations such as writing bytes, integers, and strings with precise bit-width and signedness control, alongside higher-level utilities for safe resource management. It interacts with in_channel and out_channel types, supporting seek operations and virtual file offset handling for efficient compressed data manipulation. Common use cases include processing large bioinformatics datasets like BAM files, where BGZF compression balances speed and storage efficiency.",
      "description_length": 577,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Cisbp",
      "description": "Loads structured data from files into in-memory records and extracts position weight matrices from motif files into 2D float arrays. Processes configuration and biological data for analysis, enabling sequence motif matching and data-driven decision making. Supports parsing and transformation of tabular and motif-based data formats. Can be used to analyze DNA sequences by applying extracted matrices to identify binding preferences.",
      "description_length": 434,
      "index": 101,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Dataframe",
      "description": "Processes and transforms structured data by parsing strings into typed arrays and reading files into accessible columnar formats. Supports integer, float, and string conversions with error handling, and enables column retrieval by index or name. Monadic operations allow sequential parsing and transformation of data. Can extract specific columns from CSVs or convert raw text into structured numeric or string arrays.",
      "description_length": 418,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Dna_sequence",
      "description": "Computes genomic statistics including start and end positions, raw and normalized scores, and GC content from DNA sequences. Processes data using a custom `t` type and generates cumulative distribution functions for statistical analysis. Calculates bounds for false positive rates and GC content thresholds to filter sequence matches.",
      "description_length": 334,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Encode",
      "description": "Handles parsing and retrieval of structured experiment data from ENCODE, with functions to process strings into item records. Offers specialized endpoints for human and mouse experiments, enabling direct access to relevant resources. Supports error handling through result types or exceptions, allowing flexible data integration. Examples include extracting experiment metadata or generating URLs for specific genomic studies.",
      "description_length": 426,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Fasta",
      "description": "Provides functions to parse and serialize FASTA format data, including converting between string representations and structured data. Works with header (string list) and item (sequence identifier and content) types. Used to extract sequences from files, write items to files, and perform safe or unsafe parsing of FASTA content.",
      "description_length": 328,
      "index": 105,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Fastq",
      "description": "Processes structured numerical data to compute statistical summaries like mean, median, and standard deviation, with error handling for invalid inputs. Operates on datasets such as log files to extract performance metrics. Supports parsing and analysis of raw numerical values. Can calculate distribution characteristics and validate data integrity during processing.",
      "description_length": 367,
      "index": 106,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.FeatureCounts",
      "description": "Processes genomic records by enabling field-level manipulation, filtering, and aggregation, with support for custom pipelines that transform and summarize data. It handles structured records containing genomic features and provides operations to compute totals, isolate subsets, and modify field values. A separate function loads pre-processed summaries from files, returning objects with aggregated metrics and metadata for reporting or downstream analysis. Examples include summing feature lengths by chromosome or extracting strand-specific counts for further examination.",
      "description_length": 575,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GAnnot",
      "description": "manages genomic regions with set operations and annotations, supporting both overlapping and non-overlapping structures. it handles `GLoc.t` intervals and associated values, enabling overlap checks, nearest neighbor searches, and data aggregation. operations include union, intersection, difference, and filtering, with support for custom distance thresholds and value-based queries. it allows conversion between list formats and efficient analysis of genomic data, such as identifying regulatory elements near gene loci.",
      "description_length": 521,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc",
      "description": "Encodes and decodes custom types between S-expressions and binary formats using Bin_prot, with support for ordered comparisons, delta tracking, and hash folding. Manages key-based data structures by enabling serialization, state transitions, and collision-resistant hashing. Performs operations such as saving set states, applying incremental map updates, and generating unique identifiers for complex records. Supports efficient storage, precise deserialization, and reliable configuration parsing for application-specific data.",
      "description_length": 529,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gcf",
      "description": "Processes genomic coordinates by converting them into BED format, handling open-ended ranges when specified. Operates on strings and a row type containing a genomic location and a list of strings. Used to generate standardized genomic interval files for downstream analysis tools.",
      "description_length": 280,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gene",
      "description": "manages genomic transcript structures by enabling the creation and querying of gene features, with support for extracting exon and intron boundaries, calculating genomic coordinates, and identifying upstream and downstream regions. It operates on `GLoc.t` values and lists of these, allowing detailed analysis of gene architecture. Users can determine regulatory regions based on transcript positions or compare exon-intron configurations. Examples include identifying promoter regions relative to a gene's start site or isolating intronic sequences for further analysis.",
      "description_length": 571,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff",
      "description": "handles line-based data by parsing and serializing entries, enabling structured manipulation of configuration or log content. It works with line types and records, supporting operations like parsing, converting, and reconstructing data. Users can extract comments, process records, and generate output strings from structured data. Examples include filtering out comments, modifying field values, and exporting parsed data back to file format.",
      "description_length": 443,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.ISet",
      "description": "This module provides operations for managing sets of integers encoded as contiguous ranges, including adding/removing elements/ranges, set operations (union, intersection, difference), and range-based filtering. It works with interval-encoded structures, enabling efficient manipulation of large datasets with overlapping or adjacent integers, such as genomic intervals or time ranges. Specialized functions support traversal, conversion to lists, and complement operations, optimizing performance for scenarios where ranges dominate over isolated elements.",
      "description_length": 557,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Ibed",
      "description": "Provides functions to sort, group, and convert Ibed format data, which consists of chromosomal interaction records. Operates on lists of items with fields like chromosome and bait location. Enables filtering and exporting subsets of interaction data, such as extracting contacts from a specific chromosome.",
      "description_length": 306,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Idr",
      "description": "Provides utilities for accessing and using GLoc.t values embedded in row and record structures, enabling precise spatial control in graphical layouts. The main data type is a record containing a GLoc.t field alongside row-specific information, with operations that extract and utilize the positional data. This allows for dynamic UI adjustments, such as determining the screen coordinates of a table row during rendering or aligning components based on row positions. It supports layout calculations and interactive element positioning by exposing hidden spatial information.",
      "description_length": 575,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Interval_tree",
      "description": "Provides operations to manage a collection of integer-bounded intervals with associated values, including checking for intersections, adding intervals, and retrieving elements. Works with intervals represented as tuples of integers and associated data values. Used to efficiently find overlapping intervals, compute closest matches, and filter intervals based on range queries.",
      "description_length": 377,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Interval_union",
      "description": "Provides operations to manage collections of non-overlapping ranges, including creating an empty set, adding a single range, and subtracting a range from the collection. Works with lists of Range.t values to represent intervals. Used to efficiently manipulate time intervals or numerical ranges in scheduling and resource allocation.",
      "description_length": 333,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Jaspar",
      "description": "Represents a transcription factor binding matrix with position-specific weights and consensus sequence. Parses matrix data from file paths, returning structured data or error messages. Used to analyze gene regulatory regions by matching sequences against known binding motifs.",
      "description_length": 276,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Let_syntax",
      "description": "Provides a framework for sequential computation with error handling, using bind and map to chain operations that may fail. The result type encapsulates either a successful value or a specific error, allowing for safe and expressive error propagation. It supports tasks like parsing and validation by ensuring each step is executed only if prior steps succeed. For example, it can be used to process user input by first reading a string, then parsing it into a number, and finally validating its range, with errors handled at each stage.",
      "description_length": 536,
      "index": 119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Line",
      "description": "Provides operations to parse, manipulate, and construct lines of text. Works with opaque string-based line representations, supporting stripping, splitting, and concatenation. Parses strings into line lists, extracts rightmost lines, and converts between line values and S-expressions.",
      "description_length": 285,
      "index": 120,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Line_oriented",
      "description": "Processes text line by line, parsing each line into an `item` type and supporting accumulation over lines. Accepts a file path to load lines or a string to process in memory, and writes a list of items back to a file. Used for reading and writing structured log entries or configuration lines.",
      "description_length": 293,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.List1",
      "description": "Creates a list-like structure from a single element, prepends elements, or initializes with a function. Processes elements through mapping, filtering, iteration, and folding, and converts between native OCaml lists and this structure. Supports checking all or any elements against a predicate, and safely constructs from or extracts to standard lists.",
      "description_length": 351,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Macs",
      "description": "Processes text lines by parsing them into structured data and reconstructing formatted output. Supports custom item types derived from spreadsheet rows, enabling bidirectional conversion between raw text and structured representations. Allows for flexible manipulation of line-based data, such as extracting specific fields or generating standardized outputs. Examples include parsing log entries, transforming CSV data, and formatting results for display.",
      "description_length": 456,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Macs2",
      "description": "Processes genomic data by parsing lines into structured peak records, handling errors and extracting location-based information. Contains item types with chromosome, start, end, and score fields, supporting operations like file reading and line processing. Enables analysis of peak locations and scores from sequencing data. Can be used to filter peaks by score or locate peaks on specific chromosomes.",
      "description_length": 402,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Meme",
      "description": "Encodes motif data into MEME format, including probability matrices, nucleotide alphabets, and strand information, for use in bioinformatics analysis. It supports writing structured motif data to output channels, enabling integration with downstream tools. Operations include matrix validation, alphabet mapping, and strand-aware output generation. Examples include generating MEME files from custom motifs or preparing input for motif discovery algorithms.",
      "description_length": 457,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Misc",
      "description": "Performs iterative accumulation over a range of integers with a custom function and initial value. Processes integer ranges to compute summed or product results using provided mappings to floats. Used for numerical aggregation in mathematical or statistical computations.",
      "description_length": 271,
      "index": 126,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.NarrowPeak",
      "description": "Processes input lines into structured items with statistical values, enabling analysis of genomic peak data. Contains core data types such as pval and qval represented as log10 values, along with parsing and transformation operations. Allows conversion of raw text lines into analyzable objects for downstream applications. Example tasks include filtering peaks by significance thresholds or aggregating log10 scores across datasets.",
      "description_length": 433,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Ncbi_genome",
      "description": "Converts CSV rows to and from a structured type `t`, supporting custom separators and header reversal. Enables creation of `t` instances from string lists and serialization back to CSV format. Processes data where each row directly maps to a `t` value, facilitating bidirectional data transformation. Example: loading genome metadata from a CSV file or exporting records into a formatted CSV string.",
      "description_length": 399,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Nucleotide",
      "description": "Provides functions to create and manipulate nucleotide values, including conversion between characters, integers, and their complementary base. Works with a private char type representing DNA nucleotides. Used to validate and transform input from sequencing data or generate all possible nucleotide combinations.",
      "description_length": 312,
      "index": 129,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Phred_score",
      "description": "Converts PHRED scores between integer, probability, and ASCII character representations, supporting both 33 and 64 offset encodings. Handles conversions from Solexa scores and provides error-checked parsing and serialization. Ensures accurate mapping between quality scores and their probabilistic interpretations.",
      "description_length": 314,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Phylo_tree_draw",
      "description": "Creates tree structures with styled leaves and branches, supporting colored labels and hierarchical connections. Operates on custom tree and branch types representing phylogenetic relationships. Renders trees and individual branches into graphical representations suitable for biological visualization.",
      "description_length": 302,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Profile_matrix",
      "description": "Provides operations to create and manipulate matrix structures representing sequence profiles, including converting from 2D float arrays, generating flat profiles, and computing composition and entropy values. Works with private 2D float array structures and generates visualizations using color palettes. Used to render sequence alignment profiles and analyze residue conservation patterns.",
      "description_length": 391,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Pwm",
      "description": "Creates position-weight matrices from count matrices and background distributions, supporting operations like reverse complement, tandem motif construction, and sequence scanning with score thresholds. Works with count matrices (int 2D arrays) and background distributions (float arrays). Used to identify DNA motif occurrences in sequences, generate random PWMs, and analyze tandem motif patterns.",
      "description_length": 398,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Pwm_stats",
      "description": "Calculates statistical significance of PWM matches by modeling score distributions with alpha and beta parameters, enabling p-value computation and inverse score lookup. Operates on Pwm.t for motif models and Pwm.background for sequence frequency data. Can determine the p-value of a specific score or find the score threshold for a desired p-value. Useful for evaluating motif enrichment in genomic sequences.",
      "description_length": 410,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.RanT",
      "description": "Provides range-based traversal operations including finding elements that satisfy a predicate, mapping over ranges with optional values, counting matches, iterating, folding, and checking all elements. Works with integer ranges and functions that operate on individual integers. Used to efficiently process sequences of integers without explicit loops, such as searching for a value in a range or aggregating results from a range of indices.",
      "description_length": 441,
      "index": 135,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Range",
      "description": "The module offers operations for creating, comparing, and combining integer ranges, such as calculating unions, intersections, and subset relationships, while supporting membership checks and size computations. It works with intervals defined by lower and upper bounds, enabling set-like manipulations of contiguous integer sequences. Use cases include bioinformatics for genomic interval analysis or scheduling systems requiring efficient range management.",
      "description_length": 457,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Sam",
      "description": "Encapsulates functionality for parsing and manipulating SAM/BAM alignment records, focusing on flag manipulation and segment analysis. Provides operations to check alignment status, determine strand orientation, and assess mapping quality through integer-to-SEXP conversion and validation. Enables detailed examination of sequencing data, such as identifying properly aligned reads or determining if a segment is reversed. Supports tasks like filtering aligned reads or extracting quality metrics for downstream analysis.",
      "description_length": 521,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Solexa_score",
      "description": "Converts between ASCII characters and integer Solexa scores, and translates between probabilities and scores using logarithmic transformations. Operates on integers representing scores and ASCII characters in the range 33\u2013126. Used to process sequencing data in FASTQ formats, particularly when handling raw quality scores from Illumina machines.",
      "description_length": 346,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Ucsc_genome_browser",
      "description": "Processes structured data with string and integer fields, enabling iteration, folding, and transformation of chromosome and size attributes. It supports bulk updates, list generation, and aggregation, allowing tasks like filtering by chromosome or summing size values. Operations can traverse and modify components, making it suitable for genomic or tabular data manipulation. Examples include generating lists of chromosome names or calculating total sizes across entries.",
      "description_length": 473,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Utils",
      "description": "Extracts a unique value from a list based on a custom equality and transformation function, returning an error if duplicates are found. Operates on lists and applies a mapping to derive a key for comparison. Used to ensure uniqueness in data processing pipelines, such as validating unique identifiers in a dataset.",
      "description_length": 315,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Wfa",
      "description": "Provides operations to construct and analyze weighted finite automata, including creating expressions through disjunction, sequence, and gap constraints, and extracting scores and automata from expressions. Works with custom types such as expressions, automata, scores, profiles, and symbols to represent linguistic patterns and their evaluations. Used to process string inputs with custom symbol mappings, generating sequences of scored matches with specific length and score boundaries.",
      "description_length": 488,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "biotk",
      "description": "Parses and unparse BED, GFF, and VCF file formats, converting them into structured data types such as lists of intervals and variant records. Implements sequence operations like k-mer extraction, sequence alignment, and motif scanning on strings and biosequence objects. Provides direct access to genomic databases through query functions for retrieving sequences and annotations.",
      "description_length": 380,
      "index": 142,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk_pipes",
      "description": "Tracks input and output contexts through monadic computations, enabling sequential execution of effectful operations. Operates on values wrapped in a context-aware monad, supporting binding and chaining to maintain state across transformations. It can sequence I/O actions, manage resources, or process data streams while preserving context. For example, it can read from a file, transform data, and write results, all while tracking the current processing state.",
      "description_length": 463,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_pipes_unix",
      "description": "Encapsulates sequential monadic workflows where each step processes input and generates output through effectful operations. Core types include computations that chain via `bind`, with `map` and `return` enabling transformation and lifting of values. It supports building pipelines like reading from a file, processing data, and writing results. Examples include parsing log files or transforming CSV data through a series of composed steps.",
      "description_length": 441,
      "index": 144,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk_croquis",
      "description": "combines text rendering, font analysis, and string-based identifiers into a unified toolkit for graphical output and data validation. it manages glyph dimensions, coordinate transformations, and layout calculations, while providing fixed string literals for configuration and verification. users can generate labeled plots, measure text accuracy, and validate system components through exact string comparisons. examples include creating color-coded function graphs, aligning axis labels, and checking version hashes against stored values.",
      "description_length": 539,
      "index": 145,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk",
      "description": "The module offers a comprehensive set of tools for bioinformatics data processing, including character and amino-acid conversion, BAM and BAI file handling, genomic interval analysis, and data serialization. It supports custom types like `t`, `GLoc.t`, and `Bam.Alignment0.t`, along with operations for parsing, transforming, and analyzing structured data. Examples include validating nucleotide sequences, extracting alignment metrics, and generating BED files for genomic regions.",
      "description_length": 482,
      "index": 146,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 148,
    "meaningful_modules": 147,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9932432432432432
  },
  "statistics": {
    "max_description_length": 577,
    "min_description_length": 193,
    "avg_description_length": 363.312925170068,
    "embedding_file_size_mb": 0.5343856811523438
  }
}