{
  "package": "biotk",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 137,
  "creation_timestamp": "2025-08-18T18:45:16.982542",
  "modules": [
    {
      "module_path": "Biotk_pipes.Pipe.Make.Monad_infix",
      "library": "biotk.pipes",
      "description": "Implements monadic bind for pipeline transformations, enabling sequential composition of pipe-based computations. Works with pipe values parameterized by input, output, and result types. Useful for chaining data processing stages where each stage consumes output from the previous and produces new values incrementally.",
      "description_length": 319,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk_pipes.Pipe.Make",
      "library": "biotk.pipes",
      "description": "This module implements a monadic pipeline system for incremental stream processing, offering operations to consume inputs (`await`), produce outputs (`yield`), transform data (`map`, `filter`, `fold`), and chain processing stages (`compose`). It manipulates parameterized stream types `('i, 'o, 'r)` where input, output, and result types are explicitly tracked, enabling type-safe dataflow pipelines. The `drop` function specifically supports skipping leading elements in a stream, useful for scenarios like header removal in file parsing or initial transient filtering in signal processing.",
      "description_length": 591,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_pipes.Pipe",
      "library": "biotk.pipes",
      "description": "This module implements a monadic pipeline system for incremental stream processing with explicit tracking of input, output, and result types via parameterized streams `('i, 'o, 'r)`. It provides operations to consume inputs (`await`), produce outputs (`yield`), transform data (`map`, `filter`, `fold`), and chain processing stages (`compose`), ensuring type-safe dataflow pipelines. Specific functions like `drop` enable skipping leading elements, useful for header removal in file parsing or filtering transients in signal processing.",
      "description_length": 536,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_pipes",
      "library": "biotk.pipes",
      "description": "This module implements a monadic pipeline system for incremental stream processing, supporting operations like `await`, `yield`, `map`, `filter`, `fold`, and `compose` to build type-safe dataflow pipelines. It works with parameterized streams `('i, 'o, 'r)` to track input, output, and result types, enabling precise transformations and chaining. Concrete use cases include parsing file contents incrementally, processing signals by filtering transients, and building data pipelines with strict type discipline.",
      "description_length": 511,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Ucsc_genome_browser.Chrom_size.Fields.Direct",
      "library": "biotk",
      "description": "This module provides operations to iterate over, fold, map, and query fields of a chromosome size record, specifically handling `chrom` (string) and `size` (integer) fields. It supports concrete transformations and aggregations over these fields, enabling tasks like validation, serialization, or data conversion. Use cases include processing UCSC genome browser input files and building custom pipelines for genomic data.",
      "description_length": 422,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.FeatureCounts.Tsv.Fields.Direct",
      "library": "biotk",
      "description": "This module provides direct access to individual fields of a TSV record structure used in feature counting, enabling iteration, folding, filtering, mapping, and validation operations over specific attributes like chromosome, genomic coordinates, strand, length, and count values. It works directly with the `Biotk.FeatureCounts.Tsv.t` type, exposing its internal fields for transformation and analysis. Concrete use cases include processing and manipulating feature count data from genomic experiments, such as adjusting genomic intervals or validating count values.",
      "description_length": 566,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bed.Bed3.Item",
      "library": "biotk",
      "description": "This module provides functions to convert between genomic location data and BED3 format lines. It works with `Biotk.GLoc.t` for representing genomic intervals and `Biotk.Line.t` for parsing and printing tab-separated lines. Use it to read BED3 entries from files or write genomic intervals to BED3-formatted strings.",
      "description_length": 316,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.GLoc.Map.Provide_bin_io",
      "library": "biotk",
      "description": "This module implements binary serialization and deserialization for maps with keys of type `Key` and arbitrary values. It provides functions to compute the binary shape, size, and to read/write map values in binary format, supporting efficient storage or transmission of structured map data. Concrete use cases include saving and loading genome location maps to disk or sending them over a network.",
      "description_length": 398,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Set.Provide_of_sexp",
      "library": "biotk",
      "description": "Converts S-expressions into sets of genomic locations, using a specified element module for parsing individual elements. It operates on `Sexplib0.Sexp.t` inputs and produces values of type `Biotk.GLoc.Set.t`. This function is useful when loading pre-defined genomic location sets from configuration or data files in S-expression format.",
      "description_length": 336,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Set.Provide_hash",
      "library": "biotk",
      "description": "This module implements hash functions for sets of genomic locations, enabling efficient hashing of set contents. It provides `hash_fold_t` and `hash` operations to integrate with hashing libraries and support use cases like caching or fast equality checks. The module works directly with `Biotk.GLoc.Set.t`, a set structure representing genomic intervals.",
      "description_length": 355,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Set.Elt",
      "library": "biotk",
      "description": "This module defines serialization and deserialization functions for converting between S-expressions and genomic location (`Biotk.GLoc.t`) values. It also provides a comparator for ordering genomic locations, enabling their use in sets and maps. These features support efficient storage, comparison, and exchange of genomic interval data in applications like genome analysis pipelines or annotation processing.",
      "description_length": 410,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Idr.Narrow_output.Row",
      "library": "biotk",
      "description": "Converts a row from IDR narrow output into a genomic location and provides access to its associated metadata fields. Works with the `t` type representing a single row of IDR narrow output. Useful for parsing and analyzing peak data from IDR results, such as extracting signal values, p-values, or summit positions for downstream processing.",
      "description_length": 340,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Map.Provide_of_sexp",
      "library": "biotk",
      "description": "Converts S-expressions into maps with location-aware keys, using a provided key conversion function. Works with `Sexplib0.Sexp.t` input and produces `Biotk.GLoc.Map.t` values. Useful for parsing structured data files into typed maps during input processing.",
      "description_length": 257,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bed.Bed4.Item",
      "library": "biotk",
      "description": "This module provides functions to parse and manipulate BED4 format items, which represent genomic features with four tab-separated fields. It supports converting between BED4 items and string lines, and extracting genomic location data. Concrete use cases include processing BED4 files to analyze gene annotations or genomic intervals.",
      "description_length": 335,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Idr.Broad_output.Row",
      "library": "biotk",
      "description": "Converts a row from the IDR Broad output format into a genomic location and provides direct access to its associated metadata fields. Works with the `t` type, which represents a single row in the output file. Useful for parsing and analyzing peak data from the IDR tool, such as retrieving signal values, p-values, or local/global IDR scores for downstream statistical analysis or visualization.",
      "description_length": 395,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Map.Key",
      "library": "biotk",
      "description": "This module defines the key operations for using genomic locations (`Biotk.GLoc.t`) in maps, including serialization to and from S-expressions and a comparator for ordering. It supports efficient map operations where genomic intervals are keys, enabling use cases like interval tree lookups or genome annotation tracking. The comparator ensures correct sorting and merging of genomic regions based on their natural order.",
      "description_length": 421,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bed.Bed5.Item",
      "library": "biotk",
      "description": "This module provides functions to construct, deconstruct, and convert BED5 items, which represent genomic features with five fields: chromosome, start, end, name, and score. It supports parsing from and converting to string representations, extracting genomic locations, and down-converting to BED4 items. Use it when working directly with BED5 data to manipulate individual records or integrate with data processing pipelines.",
      "description_length": 427,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Ucsc_genome_browser.Chrom_size.Fields",
      "library": "biotk",
      "description": "This module directly manipulates chromosome size records through field-specific operations, supporting concrete actions like mapping, folding, and validation on `chrom` (string) and `size` (int) fields. It enables tasks such as parsing UCSC genome files, transforming chromosome data, and building custom genomic data pipelines. Functions include field iteration, aggregation, and record creation tailored to genomic datasets.",
      "description_length": 426,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff.GFF2.Item",
      "library": "biotk",
      "description": "Handles parsing and unparsing of GFF2 (GTF) format lines into structured items, supporting both comment lines and feature records. Works with `Biotk.Gff.item` type, which represents either a comment or a parsed record. Useful for reading and writing transcript annotation data where each line corresponds to a genomic feature or metadata comment.",
      "description_length": 346,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Set.Diff",
      "library": "biotk",
      "description": "This module represents and manipulates differences between sets of genomic locations (`Biotk.GLoc.t`). It supports operations to compute, apply, and serialize diffs between two sets, and construct diffs from lists of changes. Concrete use cases include tracking incremental changes in genomic intervals across versions or samples, and synchronizing distributed genomic datasets.",
      "description_length": 378,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.FeatureCounts.Tsv.Fields",
      "library": "biotk",
      "description": "This module directly exposes and operates on the individual fields of a feature count TSV record structure, including chromosome, genomic coordinates, strand, length, and count. It supports transformations, validation, and iteration over these fields, working specifically with the `Biotk.FeatureCounts.Tsv.t` type. Concrete use cases include parsing, modifying, and validating feature count data from genomic alignment experiments.",
      "description_length": 432,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.GLoc.Map.Diff",
      "library": "biotk",
      "description": "This module represents and manipulates differences between genome location maps, supporting serialization to and from S-expressions. It provides functions to apply diffs to base maps, construct diffs from lists, and retrieve specific diff components. Concrete use cases include tracking changes between versions of genomic data structures and merging incremental updates to map entries.",
      "description_length": 386,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Map.Provide_hash",
      "library": "biotk",
      "description": "This module provides a function `hash_fold_t` that extends a hash folding operation to handle values of type `'a Biotk.GLoc.Map.t`. It works with map-like structures where keys are of a specified type and values are hashed recursively. A concrete use case is enabling efficient hashing of genome location maps for use in data integrity checks or hash-based data structures like hash tables.",
      "description_length": 390,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Set.Provide_bin_io",
      "library": "biotk",
      "description": "This module implements binary serialization and deserialization for sets of genomic locations (`Biotk.GLoc.Set.t`). It provides functions to compute binary size, read and write sets in binary format, and define their shape and type-specific readers and writers. Concrete use cases include persisting genomic interval data to disk or transmitting it over a network in a compact, efficient format.",
      "description_length": 395,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bed.Bed6.Item",
      "library": "biotk",
      "description": "This module provides direct access to BED6 format items, which represent genomic features with six specific fields. It supports parsing from and converting to BED-formatted lines, and extracting genomic location data. Concrete use cases include processing BED6 files to analyze gene annotations or genomic intervals with associated metadata.",
      "description_length": 341,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff.GFF3.Item",
      "library": "biotk",
      "description": "Handles parsing and unparsing of individual GFF3 records and comments. Works with `Biotk.Gff.item` values, which represent either a GFF3 record or a comment line. Useful for reading and writing GFF3 files line by line, converting between textual and structured representations of annotations.",
      "description_length": 292,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.NarrowPeak.Item",
      "library": "biotk",
      "description": "This module defines the data structure and parsing logic for individual entries in a NarrowPeak file. It provides the `parse` function to convert a line of input into a structured item representing a genomic peak region. The primary use case is processing ChIP-seq or similar genomic data to extract peak coordinates and associated metadata.",
      "description_length": 341,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Encode.Experiment_list",
      "library": "biotk",
      "description": "Handles parsing of ENCODE experiment lists from string input, providing direct access to predefined human and mouse dataset URLs. Operates on a list of experiment items, each representing a biological experiment with associated metadata. Useful for loading and validating ENCODE experiment configurations from files or remote sources.",
      "description_length": 334,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.GLoc.Set",
      "library": "biotk",
      "description": "This module offers operations for constructing, manipulating, and serializing sets of genomic intervals, supporting transformations like union, mapping, and filtering alongside format conversions (S-expressions, binary, hashable). It works with `Biotk.GLoc.t` elements organized into sets, leveraging comparators and functors to enable efficient interval merging, persistence, and property-based testing. Typical use cases include genomic data analysis pipelines requiring deduplication, interval arithmetic, or cross-format interoperability in bioinformatics workflows.",
      "description_length": 570,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Macs2.Xls",
      "library": "biotk",
      "description": "This module parses XLS output from MACS2, converting lines into structured items like records or comments. It processes strings into lists of typed items and extracts genomic locations from records. Use it to analyze MACS2 results by accessing peak data as structured values or filtering by location.",
      "description_length": 300,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Cisbp.TF_information",
      "library": "biotk",
      "description": "Processes transcription factor binding data from the CisBP database, focusing on extracting and structuring information about TFs, their DNA-binding domains, and associated metadata. Works directly with the `item` type representing individual TF entries and lists of such items. Enables querying TF properties, motif sources, and species-specific binding preferences from parsed CisBP datasets.",
      "description_length": 394,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Gff.GFF3",
      "library": "biotk",
      "description": "This module reads, writes, and processes GFF3 files, handling both feature records and comment lines. It operates on `Biotk.Gff.item` values, supporting operations like loading entire files into lists of items, folding over items with custom functions, and saving items back to disk. It is used for parsing and serializing transcript annotations in GFF3 format, enabling structured manipulation of genomic features and associated metadata.",
      "description_length": 439,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Wfa.Make",
      "library": "biotk",
      "description": "This module builds and evaluates weighted finite automata for sequence alignment scoring. It combines symbolic expressions with scoring profiles to model alignment constraints and computes minimum and maximum scores for partial matches. Use it to implement custom alignment algorithms with bounded gaps and score ranges over arbitrary symbol sets.",
      "description_length": 347,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Alphabet.Make",
      "library": "biotk",
      "description": "This module generates alphabet implementations with operations to convert characters to and from a restricted set of valid values. It works with a custom type `t` representing alphabet characters, supporting validation, cardinality queries, and integer encoding. Concrete use cases include modeling DNA, RNA, or protein sequences where only specific characters are valid.",
      "description_length": 371,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Fastq.Stats",
      "library": "biotk",
      "description": "Reads a FASTQ file and computes statistics, returning the number of reads found. Works with FASTQ formatted data. Useful for quickly determining the size of a sequencing dataset without loading the entire file into memory.",
      "description_length": 222,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Wfa.PSSM",
      "library": "biotk",
      "description": "This module defines operations for constructing and evaluating position-specific scoring models (PSSMs) over nucleotide sequences. It supports building expressions from nucleotide frequency profiles, combining them with disjunction and sequence operators, and inserting variable-length gaps. Functions compute score ranges, generate automata for efficient matching, and scan sequences to yield scored matches with positions and lengths.",
      "description_length": 436,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff.GFF2",
      "library": "biotk",
      "description": "Processes GFF2 (GTF) formatted files for transcript annotation data. Parses lines into structured items representing features or comments and supports reading from and writing to GTF files. Directly works with `Biotk.Gff.item` lists, enabling operations like filtering or transforming genomic features during file processing.",
      "description_length": 325,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff.Record",
      "library": "biotk",
      "description": "This module provides functions to parse, manipulate, and query individual GFF/GTF records. It supports operations to access genomic location, feature length, and attribute values by key, working with the `t` type that represents a single GFF record. Use this module to extract specific annotations, filter features by attributes, or convert between GFF2 and GFF3 attribute formats.",
      "description_length": 381,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Pwm_stats.TFM_pvalue",
      "library": "biotk",
      "description": "TFM_pvalue computes p-values and score thresholds for position weight matrices (PWMs) using a dynamic programming approach. It operates on PWMs and background frequency models to determine statistical significance of sequence matches. This module is used to assess the likelihood that a given DNA sequence motif occurs by chance under a specified background model.",
      "description_length": 364,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Profile_matrix.Protein",
      "library": "biotk",
      "description": "This module represents protein profile matrices as arrays of float arrays and provides operations to create, analyze, and visualize them. It supports computing residue composition and entropy per position, and includes functions for drawing profiles using customizable color palettes, such as the built-in Dayhoff palette. Use cases include visualizing sequence conservation in multiple sequence alignments and generating heatmaps for protein family analysis.",
      "description_length": 459,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GAnnot.Selection",
      "library": "biotk",
      "description": "This module manages collections of non-overlapping genomic regions, supporting operations like union, intersection, difference, and membership testing. It works with genomic locations parameterized by a sequence identifier type, typically strings for chromosome names. Concrete uses include analyzing CpG islands, finding overlapping regions between datasets, and computing coverage statistics.",
      "description_length": 394,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Let_syntax.Result",
      "library": "biotk",
      "description": "This module provides monadic binding and mapping operations for `result` values using `let*` and `let+`. It allows chaining error-propagating computations and transforming successful results within the `result` type. Useful for handling sequences of operations where each may fail, such as parsing or system interactions.",
      "description_length": 321,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Wfa.Nucleotide_IUPAC",
      "library": "biotk",
      "description": "This module defines types and scoring functions for nucleotide sequences using the IUPAC alphabet. It provides a `score` function that calculates the match score between a sequence profile and a nucleotide symbol, along with a `missing_score` for handling undefined positions. It operates on custom `symbol`, `t`, and `score` types representing nucleotide variants, sequence profiles, and scoring values, respectively. Use this module to implement alignment scoring schemes that account for IUPAC ambiguity codes in DNA or RNA sequences.",
      "description_length": 537,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GLoc.Map",
      "library": "biotk",
      "description": "This module implements map structures for genomic interval keys, enabling efficient creation from diverse data sources like arrays, lists, and hashtables, along with merging overlapping intervals, transforming keys with duplicate resolution, and processing ordered sequences. It supports value aggregation, equality comparisons, and error-aware folding operations, tailored for genomic applications such as tracking annotations across genome assemblies or computing differences between interval maps. Serialization via S-expressions and binary I/O, combined with hashing and property-testing utilities, facilitates data interchange and robust testing in genomics workflows.",
      "description_length": 673,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bam.Alignment0",
      "library": "biotk",
      "description": "This module represents partially parsed BAM alignment records, providing access to individual fields like query name, flags, reference ID, position, mapping quality, and optional tags. It supports efficient traversal of BAM files when only specific fields are needed, improving performance by avoiding full record parsing. Functions decode and encode convert between partially and fully parsed alignment representations using a BAM header.",
      "description_length": 439,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bed.Bed4",
      "library": "biotk",
      "description": "This module processes BED4 format data, which represents genomic intervals with four tab-separated fields: chromosome, start, end, and name. It provides functions to load BED4 data from a file into a list of items or a location map, and to save items back to a file. Use it to analyze or manipulate gene annotations, genomic features, or interval-based datasets directly from BED4 files.",
      "description_length": 387,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Line_oriented.Make",
      "library": "biotk",
      "description": "This module processes line-oriented file formats by converting each line into a structured item. It provides functions to load a file into a list of items, fold over items while reading a file, and save a list of items to a file. Each item is parsed from or formatted to a single line, making it suitable for flat, line-based data like BED or GFF files.",
      "description_length": 353,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Gene.Transcript",
      "library": "biotk",
      "description": "This module represents and manipulates transcript annotations, including their genomic location, exons, and strand orientation. It provides functions to construct transcripts from genomic locations, retrieve exon and intron ranges, and compute upstream and downstream regions. Concrete use cases include analyzing gene structure, preparing input for RNA-seq analysis, and generating regions for primer design.",
      "description_length": 409,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bamstats.Chr_histogram",
      "library": "biotk",
      "description": "Tracks chromosome coverage from BAM alignments using a binned counter structure. It filters alignments by mapping quality and accumulates counts per reference sequence name. This module is used to generate histograms of aligned read coverage across chromosomes in a BAM file.",
      "description_length": 275,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bed.Bed5",
      "library": "biotk",
      "description": "This module reads and writes BED5 formatted genomic data, handling lists of items with chromosome, start, end, name, and score fields. It supports loading from files into item lists or labeled maps, and saving item lists back to disk. Use it to process annotated genomic intervals like gene regions or regulatory elements with associated scores.",
      "description_length": 345,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Ncbi_genome.Assembly_summary",
      "library": "biotk",
      "description": "This module provides functions to parse and serialize NCBI genome assembly summary records. It defines a structured type for holding assembly metadata and supports reading from and writing to CSV files. Use cases include processing NCBI assembly data for analysis, filtering assemblies by attributes like taxid or assembly level, and generating custom assembly reports.",
      "description_length": 369,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Idr.Broad_output",
      "library": "biotk",
      "description": "Reads IDR Broad output files into lists of rows, each representing a genomic peak with metadata. Parses file paths into structured data for accessing signal intensities, statistical scores, and peak coordinates. Useful for loading and processing peak call results from ChIP-seq or similar genomic experiments.",
      "description_length": 309,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.FeatureCounts.Tsv",
      "library": "biotk",
      "description": "This module supports parsing, manipulation, and serialization of feature count data in TSV format, focusing on operations like converting between structured records and tab-separated rows, handling custom delimiters, and managing headers. It primarily works with genomic feature count entries (via a record type containing coordinates, strand, length, and counts) and genomic location objects (`GLoc.t`), enabling bidirectional transformations between these representations. Typical use cases include processing TSV outputs from genomic alignment tools, aggregating count data, and mapping TSV records to their corresponding genomic intervals for downstream analysis.",
      "description_length": 667,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Line_oriented.Parser",
      "library": "biotk",
      "description": "This module implements a line parser that processes byte chunks to extract lines, maintaining state across incremental reads. It works with a state type and lists of line values, tracking line numbers as parsing progresses. It is suitable for parsing large or streaming text files where each record occupies a single line, such as FASTA or GFF3 formats.",
      "description_length": 353,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Dataframe.Parser",
      "library": "biotk",
      "description": "This module parses tabular data into typed arrays, validating column counts and converting values from strings to integers, floats, or optional variants. It handles errors such as type conversion failures, unexpected labels, and column count mismatches during parsing. Use it to load and validate structured data from files or streams into typed arrays for further processing.",
      "description_length": 376,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.FeatureCounts.Summary",
      "library": "biotk",
      "description": "This module defines a data structure for summarizing feature counting results, with fields tracking counts of reads assigned to features and various categories of unassigned reads. It provides a `load` function to parse such summaries from a file. The module is used to analyze RNA-seq alignment results, enabling evaluation of mapping quality and feature coverage.",
      "description_length": 365,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bed.Bed6",
      "library": "biotk",
      "description": "This module processes BED6 format data, which represents genomic intervals with associated name, score, and strand information. It provides functions to load and save BED6 records, along with converting them to location-based maps for genomic analysis. Use cases include analyzing gene features, regulatory elements, or any annotated genomic regions with six-field BED structure.",
      "description_length": 379,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Cisbp.Motif",
      "library": "biotk",
      "description": "This module parses position weight matrices from the CISBP database, converting them into a standard matrix format. It processes files containing motif data into float arrays and transforms them into PWM representations. Use it to load and convert transcription factor binding motifs from CISBP for downstream sequence analysis.",
      "description_length": 328,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Dna_sequence.Parser_of_char",
      "library": "biotk",
      "description": "This module parses DNA sequences from character input and computes statistical models for GC content analysis. It generates histograms of GC levels and provides functions to calculate cumulative distribution, average, and bounds for false positive rates. Use it to analyze sequence composition for alignment accuracy or genomic feature detection.",
      "description_length": 346,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Bed.Bed3",
      "library": "biotk",
      "description": "This module reads and writes BED3 format files, which represent genomic intervals with chromosome, start, and end positions. It operates on `Biotk.Bed.Bed3.Item.t` values, corresponding to BED3 lines, and supports loading from or saving to a file. Use it to parse BED3 data into interval lists or write interval data back to BED3 format for genomic analysis workflows.",
      "description_length": 368,
      "index": 59,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Wfa.Nucleotide",
      "library": "biotk",
      "description": "This module defines a data type `t` representing nucleotide bases and provides constants for each nucleotide (A, C, G, T). It includes a list of all nucleotides and a function to convert a nucleotide to its string representation. Useful for handling DNA sequence data where individual nucleotides need to be stored, compared, or converted to string form.",
      "description_length": 354,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Sam.Flags",
      "library": "biotk",
      "description": "This module decodes and inspects the bitwise flags in SAM records to determine properties of sequencing reads, such as whether a segment is mapped, reversed, or part of a pair. It operates on a private integer type representing the SAM flag field, providing boolean checks for each standard SAM flag bit. Use cases include filtering reads based on alignment status, strand orientation, or quality control flags during processing of high-throughput sequencing data.",
      "description_length": 464,
      "index": 61,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Profile_matrix.Make",
      "library": "biotk",
      "description": "This module implements profile matrices with operations for creation, analysis, and visualization. It works with float arrays and color palettes to represent and render sequence profiles. Concrete uses include drawing sequence logos and computing positional entropy from alignment data.",
      "description_length": 286,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Profile_matrix.DNA",
      "library": "biotk",
      "description": "This module represents position weight matrices for DNA sequences, providing operations to create, manipulate, and visualize them. It supports tasks like calculating nucleotide composition, entropy, and drawing sequence logos with optional color palettes. Concrete use cases include analyzing transcription factor binding site motifs and visualizing their conservation across genomic regions.",
      "description_length": 392,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Wfa.Nucleotide_frequency",
      "library": "biotk",
      "description": "This module represents nucleotide frequency distributions as tuples of four floats, corresponding to the four DNA bases. It provides functions to compute a score for a given nucleotide, handle missing nucleotides, and calculate the complementary distribution. These operations are used when evaluating or transforming position weight matrices in sequence analysis tasks.",
      "description_length": 370,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GAnnot.LSet",
      "library": "biotk",
      "description": "This module implements set operations for genomic regions, including union, intersection, difference, and membership tests. It works with abstract chromosome identifiers and genomic ranges, supporting annotated regions through parameterized data types. It is used to find intersecting genomic elements, test for overlaps, and determine the closest genomic location to a query.",
      "description_length": 376,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Macs.Xls",
      "library": "biotk",
      "description": "This module parses and unparses MACS XLS-formatted lines into structured entries, handling comments, headers, and data records. It works with the `entry` type for individual data rows and the `item` type to represent either comments, headers, or records. Use this module to read MACS output files line-by-line or to generate XLS-formatted output from peak data structures.",
      "description_length": 372,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bam.Header",
      "library": "biotk",
      "description": "This module converts between BAM and SAM header representations, enabling interoperability between binary and text-based alignment formats. It operates on BAM header data structures and SAM header records, facilitating parsing and serialization. Concrete use cases include preparing headers for BAM file writing from SAM inputs and extracting metadata like reference sequences or read group information from existing BAM files.",
      "description_length": 427,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Meme.Motif_format",
      "library": "biotk",
      "description": "This module implements the MEME motif format for representing and serializing position probability matrices. It defines types for biological alphabets, strands, and structured motif data including version, name, alphabet, strand orientation, background frequencies, and probability matrices. It is used to write motif models to output channels in the standard MEME format, suitable for input to tools like MEME Suite for motif analysis.",
      "description_length": 436,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Ucsc_genome_browser.Chrom_size",
      "library": "biotk",
      "description": "This module handles chromosome size data with operations for parsing, transforming, and serializing records containing `chrom` (string) and `size` (int) fields. It supports concrete tasks like loading UCSC genome files, converting between CSV rows and structured data, and exporting chromosome information to CSV. Functions include direct accessors, CSV serialization with customizable separators, and file-based loading and saving.",
      "description_length": 432,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Igv.Statement",
      "library": "biotk",
      "description": "This module builds IGV script statements for genomic data visualization. It provides functions to set the genome reference and load data files with optional format, index, and track name parameters. It works with strings to construct commands for IGV, such as setting the genome or loading a BAM or VCF file.",
      "description_length": 308,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GAnnot.LAssoc",
      "library": "biotk",
      "description": "This module manages sets of annotated genomic regions, supporting operations like union, intersection, and difference, as well as membership tests and neighborhood folding. It works with lists of region-annotation pairs, enabling filtering based on region and annotation predicates and matching regions within a specified distance. Concrete use cases include analyzing overlapping gene annotations, identifying nearby regulatory elements, or merging intervals from genomic experiments.",
      "description_length": 485,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GAnnot.LMap",
      "library": "biotk",
      "description": "This module represents genomic regions with associated values, supporting operations to add regions, check intersections, find closest regions, and retrieve intersecting elements. It works with `GLoc.t` for genomic locations and parameterizes annotations of type `'a`. Use cases include genomic interval analysis, such as identifying overlapping genes or finding nearest regulatory elements.",
      "description_length": 391,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bamstats.Fragment_length_histogram",
      "library": "biotk",
      "description": "Tracks fragment length distributions from aligned sequencing data by collecting lengths into bins. It uses a counter structure to accumulate fragment lengths, filtering alignments by a minimum mapping quality threshold. This histogram is useful for quality control in genomic analyses, such as assessing library preparation characteristics from BAM files.",
      "description_length": 355,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Idr.Narrow_output",
      "library": "biotk",
      "description": "Parses IDR narrow output files into lists of rows, each representing a genomic peak with metadata. Converts input files using `from_file`, which returns parsed rows or an error message. Enables analysis of IDR results by providing structured access to peak coordinates, signal strengths, and statistical values directly from output files.",
      "description_length": 338,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Dataframe.Ez",
      "library": "biotk",
      "description": "This module simplifies working with tabular data by providing direct access to columns and rows as typed arrays, including integers, floats, and strings, with optional values for handling missing data. It supports reading tables from files with flexible header handling and offers index-based and name-based lookups for efficient data extraction. Concrete use cases include parsing CSV files with mixed data types, performing columnar analysis, and extracting specific fields for numerical processing or data validation.",
      "description_length": 520,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff.Annotation",
      "library": "biotk",
      "description": "This module organizes GFF/GTF records into structured annotations, mapping genes and transcripts by ID. It processes lists of GFF items into a typed representation, extracting gene and transcript relationships while handling attribute labeling variations. Use it to load and query genomic annotations from GFF2 or GFF3 files, particularly when analyzing transcript structures or gene models.",
      "description_length": 391,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Macs2.Broad_peaks",
      "library": "biotk",
      "description": "Handles parsing and processing of MACS2 broad peak output files into structured data. Works with the `item` type representing genomic intervals and associated scores. Used to extract and analyze broad peaks from ChIP-seq data, such as identifying enriched regions across the genome with associated statistical significance.",
      "description_length": 323,
      "index": 77,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.FeatureCounts",
      "library": "biotk",
      "description": "This module handles feature count data from genomic alignments, providing operations to parse and transform TSV-formatted count data into structured records with genomic locations and to summarize read assignment statistics. It works with structured feature count entries, genomic location objects (`GLoc.t`), and summary records tracking assigned and unassigned read counts. It is used for processing alignment outputs, aggregating count results, and evaluating RNA-seq mapping quality.",
      "description_length": 487,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Profile_matrix",
      "library": "biotk",
      "description": "Implements profile matrices for DNA and protein sequences with operations to create, analyze, and visualize sequence logos and positional entropy. Works with float arrays and color palettes to represent profiles and support tasks like motif analysis and conservation visualization. Directly used for rendering transcription factor binding site motifs and analyzing residue conservation in protein families.",
      "description_length": 406,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bamstats",
      "library": "biotk",
      "description": "This module aggregates statistics from BAM alignments into a structured format, tracking totals, QC-passing reads, single and paired reads, and mapped reads and pairs. It provides functions to update statistics incrementally from alignment data and includes submodules for collecting fragment length and chromosome coverage histograms. These features support quality assessment and analysis of sequencing data in genomic pipelines.",
      "description_length": 431,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Cisbp",
      "library": "biotk",
      "description": "This module processes transcription factor binding data from the CisBP database, extracting structured TF information such as DNA-binding domains and species-specific preferences. It parses position weight matrices into float arrays for motif analysis and provides direct access to TF entries via the `item` type and related lists. Concrete use cases include loading PWM data for sequence scanning and querying TF metadata from CisBP datasets.",
      "description_length": 443,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Fastq",
      "library": "biotk",
      "description": "Handles parsing and processing of FASTQ formatted files, providing structured access to sequence data. Works with FASTQ files by reading them line-by-line and converting entries into `item` records containing description, sequence, comment, and quality fields. Includes functions for safe deserialization from S-expressions and accumulating results through file traversal, with detailed error handling for malformed input.",
      "description_length": 422,
      "index": 82,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Ucsc_genome_browser",
      "library": "biotk",
      "description": "This module constructs and manipulates UCSC genome browser track lines and custom track URLs. It works with assembly identifiers, track attributes (such as color, visibility, and data sources), and chromosome size data. Concrete use cases include generating track lines for visualizing genomic data in the UCSC browser, building custom track URLs with specified display parameters, and integrating external genomic datasets into browser sessions using assembly-specific coordinates.",
      "description_length": 482,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Amino_acid",
      "library": "biotk",
      "description": "This module defines an enumerated type representing standard amino acids, along with conversions to and from characters and integers. It provides a list of all amino acid values, the total count, and safe and unsafe character parsing functions. Useful for sequence analysis and bioinformatics pipelines where amino acid data needs to be encoded or validated.",
      "description_length": 358,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bam",
      "library": "biotk",
      "description": "This module reads and writes BAM files by parsing and serializing headers and alignment records. It operates on BAM headers and alignment data, supporting both full and partial parsing of alignments for efficiency. Concrete use cases include converting SAM headers to BAM format, streaming alignments from large BAM files, and writing processed alignment data to output channels.",
      "description_length": 379,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Line",
      "library": "biotk",
      "description": "This module represents a single line of text with operations to parse, manipulate, and convert lines. It provides functions to split strings into lines, strip whitespace, append or concatenate lines, and handle s-expressions. Use cases include processing text files line-by-line, parsing structured data, and efficiently handling string fragments that represent lines.",
      "description_length": 368,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Interval_tree",
      "library": "biotk",
      "description": "This module implements an interval tree for storing and querying integer-bounded intervals labeled with arbitrary values. It supports efficient insertion, intersection checks, and retrieval of overlapping or closest intervals. Concrete use cases include genomic interval analysis, scheduling conflicts, and spatial range queries.",
      "description_length": 329,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bai",
      "library": "biotk",
      "description": "This module implements the BAI index format for BAM files, providing functions to read and process BAI data structures. It works with indexed genomic regions using chunk, bin, and interval types to map reference sequences to file offsets. Use this module to efficiently query BAM file regions by translating genomic coordinates into byte ranges for data retrieval.",
      "description_length": 364,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Let_syntax",
      "library": "biotk",
      "description": "This module enables monadic composition of `result`-typed values using `let*` for binding and `let+` for mapping. It simplifies sequential computations that may fail, such as file parsing or network requests, by cleanly propagating errors and transforming successful outcomes.",
      "description_length": 276,
      "index": 89,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Pwm",
      "library": "biotk",
      "description": "This module implements position-weight matrices (PWM) for DNA motif analysis, supporting operations like motif creation from count matrices, tandem motif construction with spacers, and reverse complement transformations. It provides efficient scanning functions to identify motif occurrences in DNA sequences above a given score threshold, with multiple optimized implementations for performance. Concrete use cases include motif discovery, genome-wide sequence scanning, and modeling transcription factor binding sites.",
      "description_length": 520,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Line_oriented",
      "library": "biotk",
      "description": "This module processes line-oriented file formats by folding over lines, parsing byte chunks into lines, and converting lines to structured items. It works with strings, line values, and stateful parsers to handle large or streaming text files where each record occupies a single line, such as FASTA, GFF, or BED formats. Concrete functions include line-by-line folding, error-aware parsing, and item-based file loading and saving.",
      "description_length": 430,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Nucleotide",
      "library": "biotk",
      "description": "This module represents nucleotide bases as a private character type, providing constants for the four standard bases (A, C, G, T) and operations to convert between nucleotides, characters, and integers. It includes functions to get the complement of a nucleotide and to safely or unsafely convert from characters and integers. Use cases include DNA sequence manipulation, base validation, and encoding/decoding genetic data.",
      "description_length": 424,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Macs",
      "library": "biotk",
      "description": "This module processes MACS XLS-formatted data by parsing and generating structured entries from lines, supporting operations to read or write peak data with precise handling of comments, headers, and data rows. It works with the `entry` type for data records and the `item` type to distinguish between comments, headers, and entries. Use this module to extract peak information from MACS output files or to serialize peak data into XLS format for downstream analysis or reporting.",
      "description_length": 480,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.RanT",
      "library": "biotk",
      "description": "This module traverses integer ranges with operations like searching, counting, and folding. It supports functions that process each integer in a range, enabling use cases such as scanning indices for a condition, accumulating values over a sequence, or applying side effects across a numeric interval. Functions return results like the first matching index, total of satisfying elements, or a transformed value through a range.",
      "description_length": 427,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Jaspar",
      "library": "biotk",
      "description": "This module parses transcription factor binding site matrices from JASPAR format files. It reads the matrix ID, transcription factor name, and count data into a structured matrix type. Use it to load and analyze position weight matrices for motif analysis in genomics.",
      "description_length": 268,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Misc",
      "library": "biotk",
      "description": "Iterates over integer ranges with customizable accumulation, computes sums and products of functions applied to integers. Works with integers and floating-point values. Useful for mathematical computations requiring range iteration and aggregation.",
      "description_length": 248,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Meme",
      "library": "biotk",
      "description": "This module implements the MEME motif format for representing and serializing position probability matrices. It defines types for biological alphabets, strands, and structured motif data, including version, name, alphabet, strand orientation, background frequencies, and probability matrices. It is used to write motif models to output channels in the standard MEME format, suitable for input to tools like the MEME Suite for motif analysis.",
      "description_length": 441,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bam_iterator",
      "library": "biotk",
      "description": "This module provides functions to iterate over BAM file alignments within specified genomic regions, using a fold-like approach. It works with BAM files and their corresponding index files, along with genomic location (`GLoc.t`) and alignment data structures. Concrete use cases include aggregating coverage statistics, filtering alignments by region, or extracting specific reads from a BAM file.",
      "description_length": 397,
      "index": 98,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Phred_score",
      "library": "biotk",
      "description": "This module implements conversions between PHRED quality scores and related data types, including ASCII characters, integers, probability values, and Solexa scores. It supports two common ASCII encodings using offsets of 33 and 64, and provides functions to safely encode and decode PHRED scores while handling potential errors. Concrete use cases include parsing and generating FASTQ files, recalculating quality scores from probabilities, and converting between PHRED and Solexa score formats in bioinformatics pipelines.",
      "description_length": 523,
      "index": 99,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Fasta",
      "library": "biotk",
      "description": "This module parses and writes FASTA files, handling headers and sequence records. It processes input into structured data types like string lists for headers and item records containing descriptions and sequences. Use it to load FASTA data from files, extract sequences, or serialize items back to disk.",
      "description_length": 303,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Wfa",
      "library": "biotk",
      "description": "This module implements alignment scoring and sequence analysis operations for DNA sequences. It works with nucleotide symbols, frequency distributions, IUPAC ambiguity codes, and position-specific scoring models (PSSMs), providing functions to compute match scores, handle missing data, and scan sequences for high-scoring regions. Concrete use cases include motif discovery, sequence alignment with ambiguous nucleotides, and building scoring profiles from frequency data.",
      "description_length": 473,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Solexa_score",
      "library": "biotk",
      "description": "This module implements conversions between Solexa quality scores and ASCII encodings or probability values. It provides functions to transform ASCII characters to scores, scores to ASCII, and scores to probabilities, following the Solexa score definition. These operations are used when processing FASTQ files containing sequence quality data encoded in the Solexa/Illumina format.",
      "description_length": 381,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Idr",
      "library": "biotk",
      "description": "Handles parsing and conversion of IDR program output files into structured genomic peak data. Provides separate modules for narrow and broad peak formats, extracting coordinates, signal strengths, and statistical scores. Used to load and process peak call results from ChIP-seq experiments directly into OCaml for downstream analysis.",
      "description_length": 334,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Igv",
      "library": "biotk",
      "description": "This module generates IGV script commands for genomic data visualization. It provides functions to set genome references and load data files such as BAM or VCF, allowing optional parameters for format, index, and track names. It operates on string-based representations of IGV statements to produce executable scripts.",
      "description_length": 318,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Dataframe",
      "library": "biotk",
      "description": "This module organizes and manipulates structured tabular data with typed columns, supporting operations like row and column access, column lookup by name or index, and construction from labeled column data. It handles data types such as integer, float, and string arrays, with optional variants for missing values, enabling precise type representation. It is used to load and process structured data from files, perform columnar analysis, and format tables into HTML with custom value rendering.",
      "description_length": 495,
      "index": 105,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.NarrowPeak",
      "library": "biotk",
      "description": "This module processes NarrowPeak files by parsing and manipulating genomic peak data. It provides functions to load, fold, and save items such as records, comments, and track definitions. Concrete use cases include analyzing ChIP-seq results to identify transcription factor binding sites or histone modifications from peak coordinates and associated scores.",
      "description_length": 358,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gene",
      "library": "biotk",
      "description": "This module models gene annotations with genomic coordinates, strand orientation, and associated transcripts. It supports operations to retrieve gene range, location, exons, introns, and flanking regions. Use cases include gene structure analysis, RNA-seq region extraction, and primer target selection.",
      "description_length": 303,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bed",
      "library": "biotk",
      "description": "This module reads, writes, and manipulates BED-formatted genomic data with varying field counts. It supports parsing and serialization of genomic intervals with optional name, score, and strand fields, working directly with `Biotk.GLoc.t` and string-based tab-separated lines. Use it to load BED data into typed structures for analysis, or export interval-based genomic features to standard BED files.",
      "description_length": 401,
      "index": 108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Sam",
      "library": "biotk",
      "description": "This module provides tools to parse, serialize, and validate SAM format data, focusing on structured conversion between genomic alignment records, headers, and S-expressions. It operates on SAM-specific data types such as CIGAR operations, alignment flags, reference sequences, and optional fields, enforcing validity through typed representations and error handling. Key use cases include processing high-throughput sequencing data, converting between textual and structured SAM components for analysis pipelines, and ensuring integrity of alignment metadata during serialization.",
      "description_length": 581,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Interval_union",
      "library": "biotk",
      "description": "This module manages a collection of non-overlapping intervals, supporting operations to add a range, remove a range, and represent the union as a list of ranges. It works with `Biotk.Range.t` values, ensuring intervals remain merged and non-overlapping after each operation. Concrete use cases include tracking genomic regions, managing file offsets, or handling time intervals where overlaps must be resolved.",
      "description_length": 410,
      "index": 110,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Dna_sequence",
      "library": "biotk",
      "description": "This module calculates GC content in DNA sequences and generates local GC distributions for sliding window analysis. It works with strings representing DNA sequences and produces histograms and statistical measures like average and false positive rate bounds. Use it to assess sequence composition for tasks like alignment accuracy or identifying genomic features based on GC variation.",
      "description_length": 386,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.GAnnot",
      "library": "biotk",
      "description": "This module provides set operations\u2014union, intersection, difference, and membership tests\u2014on genomic regions represented as ranges paired with abstract sequence identifiers. It supports both annotated and non-annotated regions through parameterized data types, enabling precise genomic interval analysis. Use cases include identifying overlapping genomic features, computing coverage, and querying nearest or intersecting regions in datasets such as gene annotations or ChIP-seq peaks.",
      "description_length": 485,
      "index": 112,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.GLoc",
      "library": "biotk",
      "description": "This module provides operations for genomic interval manipulation, including intersection, inclusion, resizing, and distance calculation using coordinates defined by chromosome, start, and end positions. It organizes these intervals into set and map structures for efficient interval arithmetic, key-based mappings, and merging operations. These tools are designed for bioinformatics workflows such as annotation tracking, interval merging, and interoperability between genomic data formats.",
      "description_length": 491,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gff",
      "library": "biotk",
      "description": "This module handles parsing, manipulation, and structured representation of GFF2 and GFF3 transcript annotation data. It provides direct operations on genomic feature records and comment lines through typed values, supporting format-specific parsing, attribute handling, and annotation hierarchy construction. Concrete use cases include converting between GFF2/GFF3 attribute formats, filtering transcript features by genomic location or metadata, and building gene-transcript hierarchies from annotation files.",
      "description_length": 511,
      "index": 114,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Ibed",
      "library": "biotk",
      "description": "This module represents and processes chromosomal interaction data from CHiCAGO's `ibed` files, organizing each interaction as a record with bait and target genomic locations, read count, and interaction score. It provides operations to sort interactions by genomic coordinates, group by bait region or chromosome, and read/write from file. Concrete use cases include analyzing Hi-C data to study chromatin interactions and preparing interaction datasets for downstream statistical analysis.",
      "description_length": 490,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.ISet",
      "library": "biotk",
      "description": "This implementation handles integer sets using range-based encoding, supporting operations like union, intersection, complement, and range-aware iteration. It works with an abstract type `t` optimized for contiguous intervals, offering efficient membership checks, slicing, and transformations through functions like filtering and partitioning. Designed for scenarios involving large ranges\u2014such as genomic intervals or time spans\u2014it balances performance for dense ranges against overhead for sparse point elements.",
      "description_length": 515,
      "index": 116,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Macs2",
      "library": "biotk",
      "description": "This module processes MACS2 output files into structured data for genomic analysis. It includes functions to parse XLS-formatted results into records and comments, and to handle broad peak data as genomic intervals with scores. Use it to extract and filter peak regions from ChIP-seq experiments based on location or statistical values.",
      "description_length": 336,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Encode",
      "library": "biotk",
      "description": "Handles parsing and validation of ENCODE experiment lists from string input, extracting structured metadata for biological experiments. Works directly with lists of experiment items, each containing dataset URLs and annotations. Enables programmatic access to human and mouse ENCODE datasets from files or remote sources.",
      "description_length": 321,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Bgzf",
      "library": "biotk",
      "description": "This module provides low-level I/O operations for BGZF-compressed files, enabling reading and writing of raw data (bytes, integers, strings) with virtual offset support and scoped resource management for safe file handling. It operates on custom `in_channel` and `out_channel` types that abstract BGZF block boundaries and compression/decompression logic, catering to applications requiring efficient processing of large genomic datasets or random access in compressed streams. Key use cases include bioinformatics workflows involving indexed genomic data and tools needing precise control over compressed file I/O.",
      "description_length": 615,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Gcf",
      "library": "biotk",
      "description": "This module parses and transforms genomic coordinate data in TSV format, where each row starts with a location string like `<chr>:<start>-<end>`. It converts rows into a structured format (`row` type) and supports exporting to BED format via the `to_bed` function. Use it to process and convert genomic interval data for downstream analysis tools that require BED input.",
      "description_length": 370,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.List1",
      "library": "biotk",
      "description": "This module implements a non-empty list structure with operations for creation, transformation, and iteration. It supports functions like `map`, `filter_map`, `fold`, and `iter`, and provides access to elements via `hd` and `to_list`. Use cases include processing sequences that must contain at least one element, such as parsing non-empty inputs or aggregating results with guaranteed presence.",
      "description_length": 395,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Pwm_stats",
      "library": "biotk",
      "description": "Computes score distributions for position weight matrices using a dynamic programming approach, working with PWMs and background frequency models. It generates a list of (score, probability) pairs to evaluate the statistical significance of sequence motifs. Used to determine p-values and score thresholds for DNA motif analysis in bioinformatics applications.",
      "description_length": 360,
      "index": 122,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Utils",
      "library": "biotk",
      "description": "Performs uniqueness checks on lists using a custom equality function or string representation. Extracts a unique value or string from a list, returning an error if multiple distinct values are found. Useful for validating consistency of attributes across a collection, such as ensuring all elements have the same identifier or tag.",
      "description_length": 331,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Ncbi_genome",
      "library": "biotk",
      "description": "This module provides functions to parse and serialize NCBI genome assembly summary records, supporting operations to filter and process assembly metadata by attributes such as taxid and assembly level. It works with structured types representing assembly data and handles input/output through CSV files. Concrete use cases include analyzing NCBI assembly datasets and generating customized assembly reports.",
      "description_length": 407,
      "index": 124,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk.Phylo_tree_draw",
      "library": "biotk",
      "description": "This module constructs and renders phylogenetic trees with styled leaves and colored branches. It supports building trees using leaves with customizable text, style, and color, and nodes with optional tags, combined through branches that carry length and color. Use cases include visualizing evolutionary relationships with annotated tree structures in graphical output.",
      "description_length": 370,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk.Alphabet",
      "library": "biotk",
      "description": "This module implements a type-safe alphabet abstraction with validation, encoding, and cardinality operations. It works with a custom character type `t` derived from `char`, restricted to a defined set of valid symbols. It is used to represent DNA, RNA, or protein sequences where only specific characters are allowed.",
      "description_length": 318,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk",
      "library": "biotk",
      "description": "This module provides operations for genomic sequence analysis, alignment processing, and interval-based data manipulation, with support for motif discovery and quality score transformations. It works with structured representations of DNA/RNA/protein sequences, alignment records (SAM/BAM), genomic annotations (BED/GFF), and interval trees for efficient range queries. Designed for bioinformatics workflows, it enables tasks like variant calling, peak detection in ChIP-seq data, and visualization of sequence motifs through position weight matrices.",
      "description_length": 551,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Croquis.Font",
      "library": "biotk.croquis",
      "description": "This module defines font metrics and provides access to predefined font styles. It supports operations to retrieve typographic dimensions such as ascender, descender, and bounding box coordinates for a given font. The module is used to select and configure specific fonts like DejaVu Sans Mono and Liberation Sans in their various stylistic variants for rendering text in graphical applications.",
      "description_length": 395,
      "index": 128,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk_croquis.Croquis.Viewport",
      "library": "biotk.croquis",
      "description": "This module defines a 2D viewport for transforming and visualizing data within specified axis limits and canvas dimensions. It supports creating a viewport with labeled axes, scaling coordinates to fit the viewport, and rendering axes on a canvas. Concrete use cases include plotting scientific data with precise axis alignment and coordinate transformations for graphical output.",
      "description_length": 380,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Croquis.Plot",
      "library": "biotk.croquis",
      "description": "This module constructs geometric elements for plots, including points, lines, horizontal and vertical lines, regression lines, and function graphs. It operates on float arrays for coordinate data and supports customizable visual properties like color, thickness, and markers. Use it to define visual components of a plot, such as overlaying a regression line or plotting a series of data points.",
      "description_length": 395,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Croquis.Axis",
      "library": "biotk.croquis",
      "description": "This module implements axis drawing operations for 2D plots, specifically providing functions to render horizontal and vertical axes with customizable projection, position, and tick length. It works with a concrete axis type that encapsulates range bounds and an optional label. Use this module to draw labeled axes with custom scaling in data visualization applications, such as scientific plots or interactive graphing tools.",
      "description_length": 427,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Croquis.Colormap",
      "library": "biotk.croquis",
      "description": "This module defines colormaps as arrays of colors and provides functions to generate specific color gradients. The `greys` function creates a grayscale colormap with a specified number of steps, while `hsl` generates a colormap using HSL color space with fixed saturation and lightness. These functions are useful for visualizing data in plots or heatmaps where color encoding is required.",
      "description_length": 389,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis.Croquis",
      "library": "biotk.croquis",
      "description": "This module enables the creation of structured 2D data visualizations through operations like composing geometric primitives (lines, points, shapes), applying transformations (scaling, cropping), and arranging elements with layout directives (stacking, framing). It works with typed graphics elements, coordinate systems defined by axis and viewport modules, and colormap gradients to encode data values via color. Typical applications include rendering line or scatter plots with labeled axes, generating heatmaps using color gradients, and assembling complex visual narratives by grouping and layering graphical components.",
      "description_length": 625,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_croquis",
      "library": "biotk.croquis",
      "description": "This module implements structured 2D visualizations using typed graphics elements, supporting operations such as composing geometric primitives, applying transformations, and arranging elements with layout directives. It works with coordinate systems, colormaps, and text rendering to produce line plots, scatter plots, heatmaps, and layered visual compositions. Specific use cases include rendering data plots with labeled axes, encoding values via color gradients, and assembling complex visual narratives.",
      "description_length": 508,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Biotk_pipes_unix.Pipe.Monad_infix",
      "library": "biotk_pipes_unix",
      "description": "Implements monadic bind for composing pipelines that process input and output streams. Works with the `Pipe` type, which represents stream transformations with input, output, and result values. Enables chaining operations like data parsing, filtering, and serialization in a pipeline while handling I/O effects.",
      "description_length": 311,
      "index": 135,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Biotk_pipes_unix",
      "library": "biotk_pipes_unix",
      "description": "Handles inter-process communication and data streaming through Unix pipes. Provides functions for creating, reading from, and writing to pipes, as well as managing subprocesses. Works with file descriptors and process IDs, enabling use cases like redirecting command output or chaining external processes.",
      "description_length": 305,
      "index": 136,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 140,
    "meaningful_modules": 137,
    "filtered_empty_modules": 3,
    "retention_rate": 0.9785714285714285
  },
  "statistics": {
    "max_description_length": 673,
    "min_description_length": 222,
    "avg_description_length": 400.46715328467155,
    "embedding_file_size_mb": 1.9856786727905273
  }
}