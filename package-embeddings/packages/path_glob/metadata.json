{
  "package": "path_glob",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:33.401650",
  "modules": [
    {
      "module_path": "Path_glob.Lexer",
      "library": "path_glob",
      "description": "This module provides a lexer function that breaks down globbing formulas into individual tokens such as atoms, logical operators (AND, OR, NOT), and parentheses. It operates on lexing buffers and returns tokens representing components of glob patterns, including TRUE, FALSE, and EOF markers. It is useful for integrating glob parsing into larger grammars or custom parsing workflows.",
      "description_length": 384,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Path_glob.Ast",
      "library": "path_glob",
      "description": "This module defines a recursive algebraic data type for representing glob pattern abstract syntax trees, including operations for constructing and deconstructing patterns such as concatenation, union, and character classes. It works with strings and character ranges to model file path matching logic. Concrete use cases include parsing glob expressions into structured patterns and evaluating them against file paths for filtering or routing.",
      "description_length": 443,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Path_glob.Formula",
      "library": "path_glob",
      "description": "Represents propositional logic formulas with variables of any type. Supports evaluating formulas using a function that assigns boolean values to atoms, iterating over all atoms in a formula, and transforming atoms using a mapping function. Useful for symbolic manipulation and logical analysis tasks, such as simplifying or interpreting logical expressions over custom variable types.",
      "description_length": 384,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Path_glob.Glob",
      "library": "path_glob",
      "description": "This module evaluates glob patterns against pathnames using boolean combinations of basic expressions with operators like `or`, `and`, `not`, and parentheses for grouping. It supports literal strings, shell-like glob syntax (`*`, `?`, `{}`), and path-specific patterns for matching directory structures. Use cases include filtering file paths based on complex inclusion/exclusion rules, such as matching all `.ml` files except those in test directories.",
      "description_length": 453,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Path_glob",
      "library": "path_glob",
      "description": "This module processes glob patterns by breaking them into tokens, representing them as logical formulas, and evaluating them against file paths. It centers on glob syntax trees with operations for constructing expressions like concatenation, union, and character ranges, and supports logical operations such as AND, OR, and NOT. The module enables parsing and evaluating complex glob expressions, including shell-like patterns with `*`, `?`, and `{}` syntax, against pathnames for filtering. Example usage includes selecting all `.ml` files while excluding those in test directories using logical combinations of patterns.",
      "description_length": 622,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 622,
    "min_description_length": 384,
    "avg_description_length": 457.2,
    "embedding_file_size_mb": 0.018604278564453125
  }
}