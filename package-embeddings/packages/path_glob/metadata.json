{
  "package": "path_glob",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:59:19.608357",
  "modules": [
    {
      "module_path": "Path_glob.Ast",
      "library": "path_glob",
      "description": "This module defines a recursive algebraic data type for representing glob pattern abstract syntax trees, including operations for constructing and deconstructing patterns such as concatenation, union, and character classes. It works with strings and character sets to model file path matching logic. Concrete use cases include parsing glob expressions and building pattern matchers for file system traversal.",
      "description_length": 408,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Path_glob.Formula",
      "library": "path_glob",
      "description": "Represents propositional logic formulas with variables of any type. Supports evaluating formulas using a given assignment function, applying side effects to all variables, and transforming variables using a mapping function. Useful for implementing logic-based filtering or configuration systems where formulas determine behavior based on variable states.",
      "description_length": 355,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Path_glob.Glob",
      "library": "path_glob",
      "description": "This module processes glob patterns for matching file paths, supporting logical operators like `or`, `and`, and `not`, as well as grouping with parentheses. It compiles glob expressions into an optimized internal representation for efficient evaluation and works directly with strings representing file paths. It is used to filter or match file paths against complex glob patterns, particularly in build systems or file traversal tools where performance matters after initial parsing.",
      "description_length": 484,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Path_glob.Lexer",
      "library": "path_glob",
      "description": "This module provides a lexer function that breaks down globbing formulas into individual tokens such as logical operators (AND, OR, NOT), parentheses, boolean literals, and pattern atoms. It operates on lex buffers and returns one token at a time, enabling integration with custom parsers or larger grammars. It is useful when building parsers that need to handle glob expressions as part of a more complex language.",
      "description_length": 416,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Path_glob",
      "library": "path_glob",
      "description": "This module implements a glob pattern matching system for file paths, combining parsing, logical operations, and efficient evaluation. It works with strings representing file paths and glob expressions, using algebraic data types and propositional logic formulas to model and evaluate complex patterns. Concrete use cases include filtering files during build processes, implementing include/exclude rules in deployment tools, and optimizing path-based searches in file system utilities.",
      "description_length": 486,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 486,
    "min_description_length": 355,
    "avg_description_length": 429.8,
    "embedding_file_size_mb": 0.07288455963134766
  }
}