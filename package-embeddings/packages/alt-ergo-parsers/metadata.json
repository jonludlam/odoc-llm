{
  "package": "alt-ergo-parsers",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:44.598908",
  "modules": [
    {
      "module_path": "AltErgoParsers.Parsers.PARSER_INTERFACE",
      "library": "alt-ergo-parsers",
      "description": "This module defines the core parsing operations for processing input languages, specifically handling files, expressions, and triggers. It works with lexing buffers and produces structured parsed data such as files, logical expressions, and trigger annotations. It is used to integrate new input languages by implementing parsers that consume lexed input and generate internal AST representations for further processing.",
      "description_length": 420,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "AltErgoParsers.Native_lexer.Parser",
      "library": "alt-ergo-parsers",
      "description": "This module provides functions to parse input files, expressions, and triggers into structured data used for formal verification tasks. It operates on lexing buffers and produces parsed representations such as files, logical expressions, and trigger annotations. It is used to translate user-provided logical formulas and annotations into an internal format suitable for theorem proving.",
      "description_length": 387,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers.Psmt2_to_alt_ergo",
      "library": "alt-ergo-parsers",
      "description": "This module integrates the psmt2-frontend library to enable parsing of SMT-LIB2 and psmt2 input formats. It provides a function to register the frontend parser for handling files with smt2 and psmt2 extensions. The primary use case is to allow Alt-Ergo to accept and process SMT-LIB2-compliant and extended polymorphic input files directly.",
      "description_length": 340,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers.Parsers",
      "library": "alt-ergo-parsers",
      "description": "This module coordinates parsing across multiple input languages and formats, handling files, expressions, and triggers through lex buffers and producing structured results like `Parsed.file` or `lexpr`. It directly supports parsing logic expressions from strings or files, while its child module implements core parsing logic for custom input languages. Together, they enable registering parsers for new formats, converting lexed input into ASTs, and processing problem definitions with varied extensions. Example uses include parsing SMT-LIB files, extracting annotated triggers, and evaluating logical expressions from user input.",
      "description_length": 632,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers.Native_parser",
      "library": "alt-ergo-parsers",
      "description": "This module defines a set of lexical tokens and parsers for processing input files in a formal verification system. It includes functions to parse triggers, logical expressions, and entire files into structured data used for theorem proving. The parsers operate on lexbuf input and produce typed expressions and file structures consumed by the verification engine.",
      "description_length": 364,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers.Native_lexer",
      "library": "alt-ergo-parsers",
      "description": "This module implements a lexer for parsing input tokens, handling keywords, numeric literals, and string and comment processing, while integrating structured parsing capabilities from its child modules. It operates on lexing buffers to produce tokens and higher-level constructs such as logical expressions and trigger annotations, supporting tasks like reading decimal/hexadecimal numbers into rational values or managing escaped characters in strings. Main data types include lexing buffers and tokens, with operations for input stream processing and structured data extraction. Example uses include lexing source code for the AltErgo theorem prover and translating user-provided logical formulas into internal representations for formal verification.",
      "description_length": 753,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers",
      "library": "alt-ergo-parsers",
      "description": "This module enables parsing and lexing of logical expressions and input files for formal verification, supporting multiple formats including SMT-LIB2 and custom languages. It provides structured data types such as `Parsed.file` and `lexpr`, along with operations to convert lexed input into abstract syntax trees, handle triggers, and process numeric and string literals. Key functionality includes registering parsers for new formats, extracting annotated triggers from input, and translating logical expressions from strings or files into internal representations. Example uses include parsing SMT-LIB files, evaluating user-provided formulas, and converting hexadecimal literals into rational values for theorem proving.",
      "description_length": 723,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 753,
    "min_description_length": 340,
    "avg_description_length": 517.0,
    "embedding_file_size_mb": 0.02584075927734375
  }
}