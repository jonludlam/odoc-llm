{
  "package": "alt-ergo-parsers",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T23:01:21.543964",
  "modules": [
    {
      "module_path": "AltErgoParsers.Native_lexer.Parser",
      "library": "alt-ergo-parsers",
      "description": "This module provides functions to parse input from a lexing buffer into structured data used by the AltErgo theorem prover. It includes operations to parse entire files, expressions, and triggers, producing typed intermediate representations. These parsers are used during the initial stages of processing input files or interactive commands to convert raw text into semantic structures for further analysis.",
      "description_length": 408,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "AltErgoParsers.Native_parser",
      "library": "alt-ergo-parsers",
      "description": "This module defines a set of lexical tokens and parsers for processing input files in a formal verification system. It includes functions to parse triggers, logical expressions, and entire files into structured data used for theorem proving. The parsers operate on lexbuf input and produce typed expressions and file structures consumed by the verification engine.",
      "description_length": 364,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers.Native_lexer",
      "library": "alt-ergo-parsers",
      "description": "This module implements low-level lexing operations for parsing input in the AltErgo theorem prover. It handles token recognition, string and number literal parsing, and comment skipping, operating directly on lexing buffers and producing tokens consumed by the parser. It is used to transform raw character streams into structured lexical elements during input processing.",
      "description_length": 372,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers.Parsers",
      "library": "alt-ergo-parsers",
      "description": "This module manages parsing operations for different input languages and formats, providing functions to parse files, expressions, triggers, and problem definitions. It works with lex buffers and produces structured parsed data such as `AltErgoLib.Parsed.file`, `lexpr`, and trigger lists. Concrete use cases include parsing Alt-Ergo input files with specific extensions, handling inline expressions, and processing problem statements with optional preludes.",
      "description_length": 458,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers.Psmt2_to_alt_ergo",
      "library": "alt-ergo-parsers",
      "description": "Converts SMT-LIB2 and PSMT2 input into Alt-Ergo's internal format using the `psmt2-frontend` library. It enables parsing of SMT-LIB2 files and a polymorphic extension, supporting concrete use cases like verifying programs with SMT solvers and integrating Alt-Ergo into tools expecting SMT-LIB2 input. The module works directly with string-based input and Alt-Ergo's abstract syntax tree.",
      "description_length": 387,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers",
      "library": "alt-ergo-parsers",
      "description": "This module provides low-level lexing and parsing capabilities for the AltErgo theorem prover, handling token recognition, string and number literal parsing, and conversion of SMT-LIB2 and PSMT2 input into AltErgo's internal format. It operates on lex buffers and string-based input, producing structured data such as logical expressions, triggers, and parsed files used in formal verification tasks. Concrete use cases include parsing Alt-Ergo input files, processing inline expressions, and integrating with SMT solvers via SMT-LIB2 input.",
      "description_length": 541,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 541,
    "min_description_length": 364,
    "avg_description_length": 421.6666666666667,
    "embedding_file_size_mb": 0.08739566802978516
  }
}