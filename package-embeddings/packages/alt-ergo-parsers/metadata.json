{
  "package": "alt-ergo-parsers",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:29:06.266560",
  "modules": [
    {
      "module_path": "AltErgoParsers.Native_lexer.Parser",
      "description": "Parses input streams into structured representations of Alt-Ergo logic files, expressions, and triggers. It processes lexing buffers to extract abstract syntax trees and trigger lists with boolean flags. Used to convert raw input into internal data formats for theorem proving and validation.",
      "description_length": 292,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers.Native_lexer",
      "description": "Processes input streams to generate abstract syntax trees and trigger lists from Alt-Ergo logic files, enabling structured analysis and validation. It handles lexing buffers and extracts boolean-flagged expressions and triggers for theorem proving. Key data types include AST nodes, trigger lists, and boolean flags, with operations for parsing and transforming input. Examples include parsing a logic file to extract constraints or validating input against a defined syntax.",
      "description_length": 475,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers.Native_parser",
      "description": "Parses lexical expressions, formulas, and files from a lexing buffer using a provided token generator. Operates on lexing buffers and custom token types to construct abstract syntax trees represented as lists of expressions or single file structures. Used to process input streams in theorem proving contexts, such as reading input files for automated reasoning tools.",
      "description_length": 368,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers.Parsers",
      "description": "Parses input files into structured abstract syntax trees, extracts expressions with type annotations, and processes triggers into lists of expressions paired with boolean flags. Works with lexing buffers and custom parsed data types representing program files, expressions, and triggers. Used to convert raw input text into internal representations for analysis and validation.",
      "description_length": 377,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "AltErgoParsers.Psmt2_to_alt_ergo",
      "description": "Registers a parser to handle SMT-LIB2 and PSMT2 formats, enabling support for polymorphic extensions. Processes logical formulas and annotations specific to these formats. Used to integrate PSMT2 syntax into Alt-Ergo for theorem proving tasks.",
      "description_length": 243,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "alt-ergo-parsers",
      "description": "Parses Alt-Ergo's native language using a custom parser interface with the psmt2-frontend library. Processes abstract syntax trees and input streams for logical formulas. Enables dynamic loading of parser implementations at runtime for flexible analysis.",
      "description_length": 254,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "AltErgoParsers",
      "description": "Combines lexing and parsing capabilities to convert input streams into structured abstract syntax trees, trigger lists, and annotated expressions for theorem proving. Processes custom token types, boolean flags, and logical formulas, supporting SMT-LIB2 and PSMT2 formats. Enables extraction of constraints, validation of syntax, and transformation of raw input into internal representations. Examples include parsing logic files to identify triggers or analyzing annotated expressions for automated reasoning.",
      "description_length": 510,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 510,
    "min_description_length": 243,
    "avg_description_length": 359.85714285714283,
    "embedding_file_size_mb": 0.02584075927734375
  }
}