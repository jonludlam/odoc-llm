{
  "package": "httpun-ws-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:46.620029",
  "modules": [
    {
      "module_path": "Httpun_ws_lwt.Client",
      "library": "httpun-ws-lwt",
      "description": "This module implements a WebSocket client that connects to a server using a provided HTTP configuration, host, port, and resource path. It handles WebSocket handshakes, message reception, and error handling through user-defined callbacks. The client works with Lwt threads, supports asynchronous I/O, and tracks connection state with a `t` type that includes a socket and lifecycle status. Use cases include real-time communication with a WebSocket server, such as receiving live updates or sending and receiving structured messages over a persistent connection.",
      "description_length": 562,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws_lwt.Server",
      "library": "httpun-ws-lwt",
      "description": "Implements WebSocket server connections using Lwt for asynchronous I/O. Accepts TCP sockets and connection handlers to manage WebSocket upgrades, message routing, and client communication. Designed for building real-time services like chat servers or live data feeds over HTTP and WebSocket protocols.",
      "description_length": 301,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws_lwt",
      "library": "httpun-ws-lwt",
      "description": "This module enables WebSocket communication with Lwt-based asynchronous networking, supporting both client and server implementations. It defines core types like `t` for connection state and operations for message handling, connection management, and protocol upgrades, applicable to real-time applications such as chat services or live data feeds. The client module connects to WebSocket servers using HTTP configuration parameters and handles bidirectional messaging with callbacks, while the server module accepts TCP sockets, upgrades them to WebSockets, and routes messages between clients. Together, they allow establishing, managing, and interacting with WebSocket endpoints in an event-driven, asynchronous manner.",
      "description_length": 722,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 722,
    "min_description_length": 301,
    "avg_description_length": 528.3333333333334,
    "embedding_file_size_mb": 0.011311531066894531
  }
}