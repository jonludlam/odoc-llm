{
  "package": "caqti-mirage",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:36.648548",
  "modules": [
    {
      "module_path": "Caqti_mirage.Make.Pool",
      "library": "caqti-mirage",
      "description": "This module manages a pool of database connections in MirageOS unikernels, supporting operations like acquiring and releasing connections. It works with database drivers that use the PGX protocol and handles connection lifecycle management asynchronously using Lwt. Concrete use cases include efficiently handling concurrent database queries in a MirageOS service without exceeding resource limits.",
      "description_length": 398,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Caqti_mirage.Make",
      "library": "caqti-mirage",
      "description": "This module connects to PostgreSQL databases in MirageOS unikernels using PGX drivers, offering both direct and pooled connection management. It supports establishing connections, executing queries, and cleaning up resources, with built-in handling of asynchronous operations via Lwt. The connection pool submodule enables acquiring and releasing connections safely, ensuring efficient and concurrent access without exhausting database resources. Example usage includes running parameterized queries over a persistent connection or serving multiple HTTP requests concurrently using a shared connection pool.",
      "description_length": 607,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Caqti_mirage",
      "library": "caqti-mirage",
      "description": "This module connects to PostgreSQL databases in MirageOS unikernels using PGX drivers, offering both direct and pooled connection management. It supports establishing connections, executing queries, and cleaning up resources, with built-in handling of asynchronous operations via Lwt. The connection pool submodule enables acquiring and releasing connections safely, ensuring efficient and concurrent access without exhausting database resources. Example usage includes running parameterized queries over a persistent connection or serving multiple HTTP requests concurrently using a shared connection pool.",
      "description_length": 607,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 607,
    "min_description_length": 398,
    "avg_description_length": 537.3333333333334,
    "embedding_file_size_mb": 0.0077304840087890625
  }
}