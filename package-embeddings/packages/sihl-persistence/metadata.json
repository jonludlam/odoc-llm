{
  "package": "sihl-persistence",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-06-18T16:33:52.847972",
  "modules": [
    {
      "module_path": "Sihl_persistence.Migration.Logs",
      "description": "Provides logging operations for different severity levels, including error, warning, info, and debug, with support for formatted messages and error handling. Works with log levels, formatted strings, and result types to capture and process errors. Enables structured logging and safe error recovery in applications.",
      "description_length": 315,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_persistence.Migration.Map",
      "description": "This module offers operations for managing associative maps with string keys and polymorphic values, including insertion, deletion, lookup, and traversal. It supports transformations, filtering, and conversions between maps and sequences or lists, enabling tasks like dynamic data restructuring or processing hierarchical information. Specific use cases involve building maps from iterative data sources or merging complex key-value structures with custom logic.",
      "description_length": 462,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_persistence.Migration.PostgreSql",
      "description": "Handles database lifecycle management and migration execution using predefined steps. Operates on migration definitions consisting of strings and lists of migration steps. Registers and runs migrations, ensuring database schema updates are applied in sequence.",
      "description_length": 260,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Migration.MariaDb",
      "description": "Handles database schema versioning through migration registration and execution, supporting sequential step definitions for schema changes. Operates on migration tuples consisting of a name and a list of step operations. Used to apply pending database changes during application startup or on demand.",
      "description_length": 300,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Database.Logs",
      "description": "Provides logging operations for different severity levels, including error, warning, info, and debug, with support for formatted messages and error handling. Works with log levels, formatted strings, and result types to capture and process errors. Enables structured logging and safe error recovery in applications.",
      "description_length": 315,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_persistence.Database",
      "description": "Manages logging with severity-based message handling, supporting error, warning, info, and debug levels. Processes formatted strings and result types to track and recover from errors. Enables structured logging and controlled error flow through configurable log levels. Examples include logging debug information during data retrieval and capturing errors in database transactions.",
      "description_length": 381,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Migration",
      "description": "provides logging, map manipulation, and database migration capabilities. it includes log severity handling, associative map operations, and migration execution with versioning. users can generate structured logs, transform key-value data, and apply database schema updates in sequence. examples include capturing error details, merging configuration maps, and executing predefined migration steps.",
      "description_length": 397,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Migration_repo",
      "description": "provides a framework for managing repository migrations through a set of defined operations includes types for migration steps, version identifiers, and error handling supports applying, rolling back, and checking the status of migrations allows developers to define custom migration logic and integrate it into a structured workflow",
      "description_length": 333,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "sihl-persistence",
      "description": "Provides functions for routing HTTP requests, parsing query parameters, and generating JSON responses. Works with request objects, response builders, and associative lists for query data. Handles endpoint mapping in web applications and constructs structured API outputs.",
      "description_length": 271,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence",
      "description": "handles logging, data transformation, and database migrations with structured severity-based logging, map operations, and versioned migration workflows. it defines types for log levels, migration steps, and versioned schemas, enabling operations like logging errors, merging key-value data, and applying schema updates. users can track application state through detailed logs, manipulate configuration maps, and manage database evolution with rollback and status checks. examples include logging debug data during API calls, combining configuration maps, and executing incremental database migrations.",
      "description_length": 601,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 10,
    "filtered_empty_modules": 8,
    "retention_rate": 0.5555555555555556
  },
  "statistics": {
    "max_description_length": 601,
    "min_description_length": 260,
    "avg_description_length": 363.5,
    "embedding_file_size_mb": 0.033181190490722656
  }
}