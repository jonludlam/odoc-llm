{
  "package": "sihl-persistence",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 10,
  "creation_timestamp": "2025-08-14T23:13:51.506036",
  "modules": [
    {
      "module_path": "Sihl_persistence.Migration.MariaDb",
      "library": "sihl-persistence",
      "description": "This module handles database schema migrations specifically for MariaDB. It provides functions to register individual or multiple migration scripts, execute them in sequence, and run all registered migrations. The module works directly with migration definitions, allowing structured schema updates through versioned SQL operations.",
      "description_length": 332,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Migration_repo.MariaDb",
      "library": "sihl-persistence",
      "description": "This module provides functions to manage database migrations in a MariaDB environment. It supports creating a migration table if it doesn't exist, retrieving a migration by namespace, and upserting a migration's state. It works directly with `Migration.t` values, which represent individual migration records, and is used to ensure consistent schema evolution in applications relying on MariaDB as a persistence layer.",
      "description_length": 418,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Migration.PostgreSql",
      "library": "sihl-persistence",
      "description": "This module handles database migration lifecycle management for PostgreSQL. It provides functions to register individual or multiple migrations, execute them asynchronously, and run all registered migrations. It works with migration data structures defined in `Sihl_contract__Migration` and integrates PostgreSQL-specific execution logic. Use cases include setting up database schemas, applying versioned migrations, and ensuring database state consistency during application startup.",
      "description_length": 484,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Migration.Map",
      "library": "sihl-persistence",
      "description": "This implementation provides a functional map structure for managing associations between string keys and arbitrary values, supporting operations like insertion, deletion, ordered traversal, and safe key-value access via optional returns. It includes utilities for transforming maps through folding, filtering, and mapping, as well as converting between maps and sequences or lists, enabling efficient data restructuring and ordered processing in scenarios like configuration management or dynamic state transitions.",
      "description_length": 516,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Migration_repo.Migration",
      "library": "sihl-persistence",
      "description": "This module defines a data structure representing a database migration with a namespace, version, and dirty flag. It provides functions to manipulate migration states, such as marking as dirty or clean, incrementing the version, and extracting steps to apply based on a migration tuple. Concrete use cases include tracking applied database schema changes and determining necessary migration steps during application startup.",
      "description_length": 424,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Migration_repo.PostgreSql",
      "library": "sihl-persistence",
      "description": "Implements PostgreSQL-backed storage for migration state management. Provides operations to create a migration tracking table, retrieve stored migration records by namespace, and persist or update migration states. Used to ensure idempotent database schema evolution by tracking applied migrations in a PostgreSQL database.",
      "description_length": 323,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Database",
      "library": "sihl-persistence",
      "description": "This module manages database connections and query execution using Caqti, handling connection pooling, transaction control, and request preparation. It works with SQL queries and connection pools, supporting operations like running parameterized queries, managing transactions, and configuring database connections via URLs and pool sizes. Concrete use cases include executing CRUD operations with typed SQL requests, handling database lifecycle events, and logging connection usage for monitoring.",
      "description_length": 498,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Migration_repo",
      "library": "sihl-persistence",
      "description": "This module provides concrete implementations for managing database schema migrations in MariaDB and PostgreSQL environments. It works with a structured representation of migrations, including namespace, version, and dirty state, allowing operations like version incrementing, state updates, and migration step extraction. It is used to track applied schema changes and determine necessary migration actions during application startup, ensuring consistent database evolution.",
      "description_length": 475,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_persistence.Migration",
      "library": "sihl-persistence",
      "description": "This module manages database schema migrations for PostgreSQL and MariaDB. It allows registering, executing, and sequencing versioned migrations, working directly with migration definitions to apply structured schema updates. Use cases include initializing database schemas and ensuring consistency during application startup through ordered migration runs.",
      "description_length": 357,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_persistence",
      "library": "sihl-persistence",
      "description": "This module provides database connection management, schema migration handling, and migration state tracking for SQL-based persistence. It supports executing typed SQL queries, managing transaction lifecycles, and applying versioned schema migrations with PostgreSQL and MariaDB. Concrete use cases include initializing and evolving database schemas, running CRUD operations with connection pooling, and ensuring migration consistency during deployment.",
      "description_length": 453,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 516,
    "min_description_length": 323,
    "avg_description_length": 428.0,
    "embedding_file_size_mb": 0.14531326293945312
  }
}