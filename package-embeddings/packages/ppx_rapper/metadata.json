{
  "package": "ppx_rapper",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:22:45.632797",
  "modules": [
    {
      "module_path": "Ppx_rapper",
      "library": "ppx_rapper",
      "description": "This module processes SQL query extensions in OCaml code, parsing arguments and generating corresponding expressions for database operations. It handles both labeled and record-style query parameters, producing executable code for queries like `get_one` or `execute`. It supports embedding SQL directly in OCaml source files, transforming it into appropriate function calls and data structure manipulations.",
      "description_length": 407,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rapper.Internal.Dynparam",
      "library": "ppx_rapper.runtime",
      "description": "This module represents dynamic SQL query parameters using a GADT to store typed values. It supports creating and combining parameter packs with `add`, and provides an empty base case for building parameter lists. It is used to construct type-safe dynamic queries by accumulating typed parameters incrementally.",
      "description_length": 310,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rapper.Make_helper",
      "library": "ppx_rapper.runtime",
      "description": "This module implements functions for transforming and handling I/O operations within a result context. It provides `map` to apply a function to a successful I/O value and `fail` to produce an I/O operation that immediately fails with a given error. These operations are useful for composing error-prone I/O actions, such as reading or writing data, where transformations and error injection are needed directly within the I/O monadic flow.",
      "description_length": 439,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rapper.Internal",
      "library": "ppx_rapper.runtime",
      "description": "This module implements a GADT-based system for representing and composing typed SQL query parameters. It provides operations to build and combine parameter packs incrementally, enabling type-safe dynamic query construction. Concrete use cases include safely assembling SQL queries with variable WHERE clauses or INSERT statements with optional fields.",
      "description_length": 351,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rapper",
      "library": "ppx_rapper.runtime",
      "description": "This module handles hierarchical data assembly from flat database rows using relational mapping combinators. It provides `load_many` to construct parent-child data trees by specifying row-to-parent and row-to-child conversion functions, supporting nested data aggregation. Useful for reconstructing polymorphic object graphs from SQL query results with joined associations.",
      "description_length": 373,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 439,
    "min_description_length": 310,
    "avg_description_length": 376.0,
    "embedding_file_size_mb": 0.0728769302368164
  }
}