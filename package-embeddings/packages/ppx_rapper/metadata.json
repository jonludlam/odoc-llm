{
  "package": "ppx_rapper",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-06-18T16:32:54.088385",
  "modules": [
    {
      "module_path": "Rapper.Internal.Dynparam",
      "description": "Provides operations to construct and manipulate parameter lists for database queries, including adding typed values and initializing empty parameter sets. Works with the `t` type, representing a collection of parameters bound to specific database types. Used to safely pass structured data to SQL statements with type-checked bindings.",
      "description_length": 335,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rapper.Make_helper.Stream",
      "description": "Processes streams by folding over elements, iterating with side effects, and converting to lists in forward or reverse order. Operates on delayed, potentially error-prone sequences represented as thunks returning nodes. Converts finite lists into streams, accumulates values while handling errors, and processes elements one by one with error tracking.",
      "description_length": 352,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rapper.Make_helper.Response",
      "description": "Provides operations to retrieve row counts, track affected rows, and process query results. Works with database response types that decode to a specific row type 'b and manage different result modes 'm. Used to validate query outcomes, process single or multiple rows, and stream results for further handling.",
      "description_length": 309,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rapper.Internal",
      "description": "manages parameterized database queries by allowing the creation and modification of typed parameter sets. it supports operations like adding values with explicit types and initializing empty collections, all working with the `t` type. users can build safe, structured SQL queries by binding values to specific database types. examples include inserting a string and integer into a query or preparing a parameterized select statement.",
      "description_length": 433,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rapper.Make_helper",
      "description": "handles row count retrieval, affected rows tracking, and query result processing across various database response types. it operates on row types 'b and result modes 'm, enabling validation of query outcomes and efficient handling of single or multiple rows. it supports streaming of results for continued processing, allowing for flexible database interaction. examples include counting returned rows, checking affected rows after updates, and iterating through query results.",
      "description_length": 477,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rapper.Stream",
      "description": "Processes streams by folding over elements, iterating with side effects, and converting to lists in forward or reverse order. Operates on delayed, potentially error-prone sequences represented as thunks returning nodes. Used to accumulate results from asynchronous data sources, process elements with error handling, and materialize streams into ordered collections.",
      "description_length": 366,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rapper.Response",
      "description": "Returns the number of rows affected by a database operation and the number of rows returned, executes statements that expect no results, retrieves single or optional rows, folds over result sets, iterates asynchronously, and converts results to streams. Works with database response types that decode rows into a specific type 'b and track the type of response expected. Used to process query results, validate execution outcomes, and handle large datasets efficiently.",
      "description_length": 469,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "ppx_rapper",
      "description": "Provides functions to parse and validate SQL queries with type inference for named parameters, using Caqti for database interactions. Works with SQL strings and record types to map parameters securely. Enables safe query construction for PostgreSQL with syntax checks and supports other databases via optional configuration.",
      "description_length": 324,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rapper",
      "description": "provides low-level control over database interactions by exposing row counts, result sets, and execution status, while supporting custom decoding of rows into type 'b. It enables execution of statements without results, retrieval of single or optional rows, and efficient processing of large data through folding, iteration, and streaming. Operations include asynchronous execution and conversion of responses into streams for scalable data handling. Examples include counting affected rows in an update, extracting a single user record, or processing a large result set in a memory-efficient manner.",
      "description_length": 600,
      "index": 8,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 9,
    "filtered_empty_modules": 2,
    "retention_rate": 0.8181818181818182
  },
  "statistics": {
    "max_description_length": 600,
    "min_description_length": 309,
    "avg_description_length": 407.22222222222223,
    "embedding_file_size_mb": 0.03312969207763672
  }
}