{
  "package": "erssical",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 14,
  "creation_timestamp": "2025-08-14T23:16:27.489110",
  "modules": [
    {
      "module_path": "Erssical.Types.ItemSet",
      "library": "erssical",
      "description": "This module implements a functional set abstraction for ordered collections of RSS items, supporting insertion, deletion, union, intersection, and extremum queries while maintaining elements in sorted order via `Ord.compare`. It provides transformations like mapping, filtering, partitioning, and conversions to/from lists and sequences, preserving physical equality to optimize sharing during operations. Typical applications include managing hierarchical RSS data with strict ordering requirements and enabling efficient set manipulation with ordered traversal or bulk sequence ingestion.",
      "description_length": 590,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Do.UMap",
      "library": "erssical",
      "description": "This module offers operations for manipulating immutable maps with ordered URI keys, supporting insertion, deletion, value updates, and merging. It enables ordered traversal, filtering, and transformation of key-value pairs using predicates or functions, with utilities to convert between maps and sequences. These capabilities are suited for scenarios requiring deterministic ordering, such as routing based on hierarchical URIs or analyzing datasets with monotonic key ranges.",
      "description_length": 478,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Types.SMap",
      "library": "erssical",
      "description": "This module provides ordered string-keyed map operations for efficient key-value management, including insertion, deletion, merging, and ordered traversal. It supports ordered processing of bindings, sequence-based transformations, and functional manipulation patterns like filtering and folding, all maintaining key ordering via `Ord.compare`. Designed for scenarios requiring hierarchical data organization, ordered event stream processing, or dynamic map updates from sequences, it underpins structured data handling in event-driven RSS workflows.",
      "description_length": 550,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Filter.S",
      "library": "erssical",
      "description": "This module implements ordered set operations for managing collections of comparable elements, supporting set algebra (union, intersection, difference), element queries (membership, min/max selection), and ordered traversal. It works with immutable sets structured as balanced trees, emphasizing functional transformations through mapping, filtering, and folding operations. Typical applications include filtering hierarchical data, maintaining sorted collections with efficient lookups, and implementing domain-specific set logic requiring ordered iteration or partial subset operations.",
      "description_length": 588,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Erssical.Types",
      "library": "erssical",
      "description": "This module defines core data structures and types for representing RSS channels with event metadata, including operations for constructing and manipulating event data with optional links, dates, locations, and categories. It provides typed representations for RSS items and channels augmented with event-specific fields, along with set operations for ordered collections of items and map operations for string-keyed data. Concrete use cases include parsing and filtering event RSS feeds based on date ranges, keywords, or event types, and merging multiple feeds with optional default metadata per source.",
      "description_length": 605,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Ical",
      "library": "erssical",
      "description": "Converts RSS event channels into ICal format strings. Works with RSS channel data structures containing event items. Useful for generating downloadable calendar files from event-based RSS feeds.",
      "description_length": 194,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Do",
      "library": "erssical",
      "description": "This module handles channel and query operations, including retrieving source and target channels, merging channels, and executing queries. It works with channels, queries, and immutable maps ordered by URI keys. Concrete use cases include fetching and combining RSS feed data, routing based on hierarchical URIs, and deterministic processing of query results.",
      "description_length": 360,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Fetch",
      "library": "erssical",
      "description": "This module fetches content from URLs using CoHTTP, handling both raw string retrieval and RSS channel data. It supports caching with a configurable time-to-live (TTL) and provides functions to fetch and parse RSS channels. Concrete use cases include retrieving RSS feeds from a given URI and logging associated network requests.",
      "description_length": 329,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Auth",
      "library": "erssical",
      "description": "This module manages URL authorization through file-based configuration. It provides functions to load and refresh authorization data from a file, and to validate URLs against the loaded authorization rules. It works with a custom type `t` representing authorization data and `Uri.t` for URL parsing and comparison. A concrete use case is restricting access to specific web resources based on dynamic authorization rules stored in a file.",
      "description_length": 437,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Filter",
      "library": "erssical",
      "description": "Implements set-based filtering logic using ordered sets and filter expressions to process event streams. It provides `compile_filter_exp` to build set filters from expressions and `filter` to apply them to event channels. Used for refining RSS event streams based on predefined filter criteria while maintaining set ordering and structure.",
      "description_length": 339,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Io",
      "library": "erssical",
      "description": "This module provides operations for parsing and serializing structured text data, specifically handling iCalendar and RSS/XML formats. It works with XML trees, channels, queries, and string/file representations, offering utilities to extract attributes, split/normalize strings, and convert between formats with indentation and error handling. Key use cases include processing calendar data, transforming XML structures, and managing structured text workflows.",
      "description_length": 460,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Extmpl",
      "library": "erssical",
      "description": "Applies a channel value to an Xtmpl template tree, transforming the structure based on the provided channel data. Works directly with `Xtmpl.Rewrite.tree` and `Erssical.Types.channel`. Useful for rendering dynamic content in templates using channel-specific values.",
      "description_length": 265,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Log",
      "library": "erssical",
      "description": "This module handles logging output to both standard output and files. It supports creating loggers, writing messages, and closing log resources asynchronously. Use it to record application events during execution for debugging or auditing purposes.",
      "description_length": 248,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical",
      "library": "erssical",
      "description": "Erssical is a collection of modules for building and transforming event-based RSS pipelines with authorization, fetching, filtering, and templating capabilities. It works with RSS channels, URI-based routing, event streams, and structured text formats like XML and iCalendar. Concrete use cases include securing URL access with file-based rules, merging and routing RSS feeds, filtering event streams using set logic, rendering templates with channel data, and exporting calendar feeds from event RSS sources.",
      "description_length": 509,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 605,
    "min_description_length": 194,
    "avg_description_length": 425.14285714285717,
    "embedding_file_size_mb": 0.20326995849609375
  }
}