{
  "package": "erssical",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-07-15T23:07:52.162693",
  "modules": [
    {
      "module_path": "Erssical.Filter.S",
      "library": "erssical",
      "description": "This set implementation supports element insertion, deletion, and set-theoretic operations (union, intersection, difference) alongside ordered traversal and transformation functions like `map`, `filter`, and sequence conversion. It operates on sets of `Erssical.Types.item` values maintained in a comparator-defined order, enabling use cases such as filtering hierarchical data structures, deduplicating streams, or processing time-ordered event logs. Key features include safe element access via optional returns, bidirectional iteration, and set construction from sequences for pipeline-friendly data manipulation.",
      "description_length": 616,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Do.UMap",
      "library": "erssical",
      "description": "This module provides functional, persistent map operations for URI-keyed data, supporting ordered traversal, predicate-based filtering, and bulk transformations. It works with maps that maintain key order and associated values, enabling efficient range queries, sequence conversions, and iteration in ascending or descending key order.",
      "description_length": 335,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Types.SMap",
      "library": "erssical",
      "description": "This module implements string-keyed maps with ordered, immutable transformations for merging, filtering, and querying collections of key-value data. It provides ordered traversal, bulk operations like `map` and `filter`, and conversions to/from sequences/lists, ensuring consistent key-order processing. These maps are particularly useful for handling RSS feed metadata, such as parsing channel headers, aggregating feed entries, or transforming structured query parameters.",
      "description_length": 474,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Types.ItemSet",
      "library": "erssical",
      "description": "This module offers a functional interface for managing immutable ordered sets of RSS feed items, supporting standard set operations like union, intersection, and difference, along with element queries using monotonic predicates. It provides transformations such as map, filter, and partition, and enables efficient iteration, bulk conversion to and from lists or sequences, and structural operations like splitting or checking subsets. These capabilities are particularly useful for handling collections of RSS items where ordered traversal, batch processing, or maintaining persistent data structures are required.",
      "description_length": 615,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Log",
      "library": "erssical",
      "description": "This module handles logging output to both standard output and files. It supports creating log streams, writing messages, and closing them asynchronously. Concrete use cases include capturing application events for debugging or auditing, and redirecting log output to persistent storage.",
      "description_length": 287,
      "index": 4,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Erssical.Extmpl",
      "library": "erssical",
      "description": "Applies a channel value to an Xtmpl template tree, transforming the structure based on the provided channel data. It processes the template by substituting or modifying nodes according to the channel's content. This function is useful for generating customized output from generic templates in contexts like HTML rendering or configuration generation.",
      "description_length": 351,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Erssical.Ical",
      "library": "erssical",
      "description": "Converts RSS event channels into ICal format strings. Works with RSS channels containing event data. Useful for exporting event feeds to calendar applications that support ICal imports.",
      "description_length": 185,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Types",
      "library": "erssical",
      "description": "This module represents and processes Event RSS channels with rich data structures for event metadata, including location, time ranges, and event types. It supports parsing, filtering, and transforming RSS items based on keywords, date ranges, and logical expressions, enabling operations like merging feeds and generating output in formats such as iCal or RSS. The module's core functionality is complemented by a map module for structured key-value transformations and a set module for managing ordered collections of RSS items with efficient set operations and ordered traversal. Together, these components allow precise manipulation of event feeds, from parsing and filtering to aggregation and output formatting.",
      "description_length": 716,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Auth",
      "library": "erssical",
      "description": "This module manages URL authorization through file-based configuration. It provides functions to load and refresh authorization data from a file, and to validate URLs against the loaded authorization rules. It works with a custom type `t` representing authorization data and `Uri.t` for URL checking, enabling dynamic access control based on file content changes.",
      "description_length": 363,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Erssical.Io",
      "library": "erssical",
      "description": "This module enables parsing and serializing iCalendar and RSS/XML data through string manipulation, XML tree traversal, and attribute extraction. It operates on channels, queries, and hierarchical XML structures, converting between file, string, and tree representations with error resilience. Typical use cases include extracting calendar event details from raw iCalendar strings, transforming RSS feeds into structured queries, and persisting XML data with proper indentation.",
      "description_length": 478,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Do",
      "library": "erssical",
      "description": "This module orchestrates channel and query operations while integrating persistent URI-keyed map functionality for structured data handling. It supports retrieving and merging channels, executing parameterized queries with optional return types, and managing RSS feeds dynamically. The core types include channels, queries, logs, and ordered maps with URI keys, enabling operations like filtering, transformation, and ordered traversal. You can use it to fetch RSS data based on query criteria, merge channel results, and process URI-mapped values with precise ordering and bulk operations.",
      "description_length": 590,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Filter",
      "library": "erssical",
      "description": "This module processes filter expressions to build predicate functions that selectively retain items in RSS channels, using `filter_exp` and `filter` types to define and apply filtering logic. It directly supports operations like trimming feeds based on keywords or date ranges, while its child module provides set-theoretic operations and ordered traversal over collections of RSS items. Together, they enable complex filtering pipelines that combine logical expressions with efficient set manipulation and transformation. Example use cases include deduplicating item streams, applying hierarchical filters, and retaining only the most recent or relevant entries from a feed.",
      "description_length": 675,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical.Fetch",
      "library": "erssical",
      "description": "This module fetches URLs and RSS channels using CoHTTP, handling caching with a configurable time-to-live (TTL). It operates on URIs and returns raw string content or parsed RSS channel data. Concrete use cases include retrieving and parsing RSS feeds from remote servers with automatic caching based on TTL settings.",
      "description_length": 317,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Erssical",
      "library": "erssical",
      "description": "This module processes and transforms event-based data across multiple formats, enabling integration between RSS, iCal, and templated output. It supports structured parsing, filtering, and serialization of event feeds, with rich data types for channels, queries, logs, and URI-mapped values. You can filter RSS items by keywords or date ranges, convert event feeds to iCal format, apply channel data to templates, and manage authorization rules for URL access. Specific operations include merging RSS channels, generating HTML from templates, exporting event calendars, and dynamically fetching and caching remote feeds.",
      "description_length": 619,
      "index": 13,
      "embedding_norm": 1.0000001192092896
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 716,
    "min_description_length": 185,
    "avg_description_length": 472.92857142857144,
    "embedding_file_size_mb": 0.051265716552734375
  }
}