{
  "package": "uri",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:05:15.969083",
  "modules": [
    {
      "module_path": "Uri_services",
      "library": "uri.services",
      "description": "This module maps common IANA well-known ports to and from their textual service names, providing bidirectional lookups for both TCP and UDP protocols. It includes functions to extract TCP or UDP port numbers from a URI, using a default service name if needed, and exposes lists of known services for each protocol. Concrete use cases include resolving service names to port numbers for network configuration or validating URI schemes against known port assignments.",
      "description_length": 465,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uri_services_full",
      "library": "uri.services_full",
      "description": "This module maps IANA well-known ports to service names and vice versa, providing bidirectional lookups for both TCP and UDP protocols. It supports extracting port numbers from URIs based on service names and includes lists of known services for TCP, UDP, and combined protocols. Concrete use cases include resolving service names from port numbers in network analysis tools or validating URI schemes against standard port assignments.",
      "description_length": 435,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uri.Parser",
      "library": "uri",
      "description": "Parses IPv6 addresses and URI references according to RFC3986. Works with Angstrom parsers and Uri.t values. Used to construct and validate URIs from string inputs, particularly handling complex cases like IPv6 literals and relative references.",
      "description_length": 244,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uri.Absolute_http",
      "library": "uri",
      "description": "This module provides functions to construct, deconstruct, and manipulate absolute HTTP/HTTPS URIs, including parsing from strings, converting to strings with optional percent-encoding, and accessing components like host and scheme. It works with a dedicated type `t` representing absolute HTTP/HTTPS URIs, built upon the base `Uri.t` type. Concrete use cases include building valid HTTP URLs from components, extracting hostnames for routing, and safely serializing URIs for network requests.",
      "description_length": 492,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uri",
      "library": "uri",
      "description": "This module offers operations for constructing, parsing, and normalizing URIs, including component manipulation, percent-encoding, query handling, and resolution, adhering to RFC3986 standards. It primarily works with the `Uri.t` type, enabling granular access to components like scheme, host, path, and query parameters. The module supports tasks such as building valid HTTP(S) URLs, modifying URI fragments, parsing IPv6 addresses, and ensuring consistent URI formatting across applications.",
      "description_length": 493,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 493,
    "min_description_length": 244,
    "avg_description_length": 425.8,
    "embedding_file_size_mb": 0.07287979125976562
  }
}