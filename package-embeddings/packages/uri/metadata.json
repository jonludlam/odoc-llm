{
  "package": "uri",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:06:15.213268",
  "modules": [
    {
      "module_path": "Uri_services_full",
      "library": "uri.services_full",
      "description": "This module maps IANA well-known ports to service names and vice versa, supporting direct lookups for TCP and UDP protocols. It provides functions to convert port numbers to service names, extract ports from URIs using optional default services, and list all known services by protocol. Use cases include network diagnostics, URI parsing, and service identification based on port numbers.",
      "description_length": 388,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uri.Parser",
      "library": "uri",
      "description": "Parses IPv6 addresses and URI references according to RFC3986. Uses Angstrom parsers to process string inputs into structured data. Useful for validating and decomposing URIs in network-related applications.",
      "description_length": 207,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uri.Absolute_http",
      "library": "uri",
      "description": "This module provides functions to construct, deconstruct, and manipulate absolute HTTP/HTTPS URIs according to RFC9110. It works with a specialized type `t` representing HTTP or HTTPS URIs, built from components like scheme, host, port, path, query, and fragment. Concrete use cases include parsing HTTP URLs from strings, building URLs programmatically, and extracting host or scheme information for routing or validation purposes.",
      "description_length": 432,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uri",
      "library": "uri",
      "description": "This module handles Uniform Resource Identifiers in a way that conforms to RFC3986, allowing for the creation, parsing, and modification of URIs with support for percent-encoding, query parameters, and relative reference resolution. It represents URIs as structured data\u2014such as scheme, host, path, and query\u2014where operations like adding a query parameter or resolving a relative path produce new, updated URIs rather than modifying existing ones. One submodule specializes in parsing IPv6 addresses and general URI references using precise Angstrom-based parsers, enabling robust validation and breakdown of complex URI structures. Another submodule focuses specifically on HTTP and HTTPS URIs, offering typed operations to construct, deconstruct, and inspect URLs commonly used in web services, such as extracting hosts for routing or building request URLs from components.",
      "description_length": 875,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uri_services",
      "library": "uri.services",
      "description": "This module maps common IANA well-known ports to and from their service names for TCP and UDP protocols. It provides functions to convert port numbers to service names, extract ports from URIs using service defaults, and list known services. Concrete use cases include resolving service names to ports in network configuration tools or validating URI schemes against standard port assignments.",
      "description_length": 393,
      "index": 4,
      "embedding_norm": 0.9999998807907104
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 875,
    "min_description_length": 207,
    "avg_description_length": 459.0,
    "embedding_file_size_mb": 0.01861572265625
  }
}