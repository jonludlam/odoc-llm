{
  "package": "ppx_module_timer",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:01.572526",
  "modules": [
    {
      "module_path": "Ppx_module_timer_runtime.Duration.Format",
      "library": "ppx_module_timer.runtime",
      "description": "Converts string representations to duration values and formats lists of durations into strings using their original units. Works with lists of duration values. Useful for parsing and displaying timing data consistently.",
      "description_length": 219,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_module_timer_runtime.Duration",
      "library": "ppx_module_timer.runtime",
      "description": "This module represents time durations with nanosecond precision, offering conversion to and from nanoseconds and customizable formatting via a mutable module reference. It enables consistent parsing and display of timing data, especially when benchmarking or reading durations from environment variables. The child module handles string parsing and formatting of individual and lists of duration values, preserving original units. For example, it can parse \"1.5s\" into a duration and format a list like [1_500_000_000; 2_500_000] into [\"1.5s\"; \"2.5ms\"].",
      "description_length": 553,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_module_timer_runtime",
      "library": "ppx_module_timer.runtime",
      "description": "This module records initialization times of other modules when enabled through an environment variable, printing a summary at process exit to help identify performance bottlenecks. It uses the `Duration` module to represent and manipulate timing intervals with nanosecond precision, supporting conversions, parsing, and customizable formatting of durations. For example, it can parse human-readable durations like \"1.5s\" into nanoseconds or format a list of durations into a sequence of strings preserving original units. The integration of timing capture and duration manipulation enables detailed profiling of module load times and environment-driven performance tuning.",
      "description_length": 672,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 3,
    "filtered_empty_modules": 1,
    "retention_rate": 0.75
  },
  "statistics": {
    "max_description_length": 672,
    "min_description_length": 219,
    "avg_description_length": 481.3333333333333,
    "embedding_file_size_mb": 0.011323928833007812
  }
}