{
  "package": "splittable_random",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 3,
  "creation_timestamp": "2025-08-14T22:54:31.522165",
  "modules": [
    {
      "module_path": "Splittable_random.State",
      "library": "splittable_random",
      "description": "This module provides functions to create, copy, and split pseudo-random number generator states. It works with the `t` type representing random states, allowing operations like initialization from an integer or another state, perturbation with a seed, and splitting to generate independent streams. Concrete use cases include generating deterministic random values in simulations or parallel computations where independent streams are required.",
      "description_length": 444,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Splittable_random.Log_uniform",
      "library": "splittable_random",
      "description": "This module generates random integers within specified ranges using a log-uniform distribution, ensuring that the number of bits used to represent the result is chosen uniformly. It supports 32-bit, 63-bit, and 64-bit integers, as well as native integers, making it suitable for applications requiring efficient random number generation with specific bit-width constraints. Use this module when you need random integers with controlled bit-width distribution for simulations or probabilistic algorithms.",
      "description_length": 503,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Splittable_random",
      "library": "splittable_random",
      "description": "This module generates pseudo-random values including booleans, integers, and floats within specified ranges, and supports splitting to produce independent random streams. It works with a state type `t` initialized from a seed or another state, allowing perturbation and copying for controlled randomness. Concrete use cases include simulations requiring deterministic random sampling and parallel computations needing independent streams without statistical interference.",
      "description_length": 471,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 503,
    "min_description_length": 444,
    "avg_description_length": 472.6666666666667,
    "embedding_file_size_mb": 0.04389476776123047
  }
}