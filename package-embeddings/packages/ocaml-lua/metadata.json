{
  "package": "ocaml-lua",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:30:01.031774",
  "modules": [
    {
      "module_path": "ocaml-lua",
      "description": "Provides functions to convert OCaml values to and from Lua types, including integers, floats, strings, tables, and functions. Works with OCaml's polymorphic variants, lists, and records to interface with Lua's dynamic data structures. Enables embedding Lua scripts in OCaml applications for scripting or configuration purposes.",
      "description_length": 327,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lua_aux_lib",
      "description": "This module provides operations for managing Lua states, including buffer manipulation, type checking, argument validation, and value retrieval, with OCaml implementations of Lua C API functionalities. It works with Lua states, strings, integers, and custom types like `buffer` and `reg`, enabling safe interactions with Lua stacks and error handling. Use cases include executing Lua code, registering functions, and managing user data within OCaml applications.",
      "description_length": 462,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_api_lib",
      "description": "The module offers low-level Lua state manipulation, including stack operations, type conversion, and garbage collection integration, alongside thread management and userdata handling. It works with Lua states, stack indices, and OCaml values, enabling direct interaction with Lua's virtual machine and OCaml's garbage collector. Use cases include embedding Lua scripting in OCaml applications, extending Lua with OCaml functions, and managing memory between the two environments.",
      "description_length": 479,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lua_api",
      "description": "Provides low-level access to the Lua 5.1.5 runtime, including functions to manipulate Lua states, push and retrieve values, and manage tables. Offers higher-level utilities for common tasks, such as loading scripts and handling errors, built on top of the basic API. Supports operations like executing Lua code, converting OCaml values to Lua and vice versa, and managing function calls between the two languages. Examples include embedding Lua scripts in OCaml applications, exposing OCaml functions to Lua, and performing type-safe interactions between the two environments.",
      "description_length": 576,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 4,
    "filtered_empty_modules": 3,
    "retention_rate": 0.5714285714285714
  },
  "statistics": {
    "max_description_length": 576,
    "min_description_length": 327,
    "avg_description_length": 461.0,
    "embedding_file_size_mb": 0.014933586120605469
  }
}