{
  "package": "ocaml-lua",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:52:34.151139",
  "modules": [
    {
      "module_path": "Lua_aux_lib",
      "library": "ocaml-lua",
      "description": "This module facilitates stack management, type validation, and execution of Lua scripts from OCaml, operating on Lua states, strings, integers, floats, and userdata. It supports metaprogramming via metatable operations, error handling, and buffer manipulations, enabling use cases such as embedding Lua interpreters in applications or extending OCaml with Lua-based plugins. Key patterns include safe API interoperability, input validation, and structured state management.",
      "description_length": 473,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lua_api_lib",
      "library": "ocaml-lua",
      "description": "This module provides low-level bindings for converting between OCaml and Lua types, manipulating Lua stacks and tables, and invoking Lua functions, with operations like `pushinteger`, `pcall`, and `getfield` mirroring Lua's C API. It works directly with Lua states, stack indices, and userdata, enabling precise control over the Lua virtual machine's execution and memory management. Typical use cases include embedding Lua scripts within OCaml applications, extending OCaml programs with Lua-based plugins, and bidirectional data exchange between the two languages.",
      "description_length": 566,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 2,
    "filtered_empty_modules": 2,
    "retention_rate": 0.5
  },
  "statistics": {
    "max_description_length": 566,
    "min_description_length": 473,
    "avg_description_length": 519.5,
    "embedding_file_size_mb": 0.029392242431640625
  }
}