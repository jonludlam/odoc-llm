{
  "package": "json_of_jsonm",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:12:01.920706",
  "modules": [
    {
      "module_path": "Json_of_jsonm_lib.Json_of_jsonm_monad.Make",
      "library": "json_of_jsonm",
      "description": "This module provides functions to decode and encode JSON values using a monadic IO interface. It supports reading from and writing to byte streams with custom IO operations, along with converting JSON values to and from strings, including human-readable formatting. Use cases include parsing JSON from files or network streams and serializing JSON data for storage or transmission.",
      "description_length": 381,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Json_of_jsonm_lib.Json_channel.Json_of_channel",
      "library": "json_of_jsonm",
      "description": "This module provides functions to decode and encode JSON values from and to byte streams or strings, supporting standard JSON types like null, booleans, numbers, strings, lists, and associative lists. It includes both exception-raising and result-returning variants for handling parsing and serialization errors. Concrete use cases include reading JSON from a file descriptor, transmitting JSON over a network socket, or converting in-memory JSON structures to human-readable strings.",
      "description_length": 484,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Json_of_jsonm_lib.Json_string.Json_of_string",
      "library": "json_of_jsonm",
      "description": "This module provides functions to decode and encode JSON values from and to strings or byte sequences. It supports standard JSON data types like null, booleans, numbers, strings, lists, and associative lists. Use it to parse JSON input from a buffer or string, or to serialize JSON data structures into string representations, optionally in human-readable format.",
      "description_length": 363,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_of_jsonm_lib.Json_string",
      "library": "json_of_jsonm",
      "description": "This module decodes and encodes JSON values to and from strings, handling standard JSON types including null, booleans, numbers, strings, lists, and associative lists. It offers functions to parse JSON from a string, serialize JSON data into compact or human-readable string formats, and raises exceptions on failure for simplified error handling. Use it to directly convert JSON payloads in network protocols, configuration files, or data interchange formats.",
      "description_length": 460,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_of_jsonm_lib.Json_channel",
      "library": "json_of_jsonm",
      "description": "This module decodes and encodes JSON values from and to byte streams or strings, handling standard JSON types such as null, booleans, numbers, strings, lists, and associative lists. It offers `json_of_channel` and `json_to_channel` for safe parsing and serialization with result types, and `json_of_channel_exn` and `json_to_channel_exn` for exception-raising variants. Use this module to read JSON from files, send JSON over network sockets, or convert JSON structures to readable string formats.",
      "description_length": 497,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_of_jsonm_lib.Json_of_jsonm_monad",
      "library": "json_of_jsonm",
      "description": "This module decodes and encodes JSON values using a monadic IO interface, supporting operations on byte streams with custom IO handlers. It works with a recursive JSON type that includes null, boolean, float, string, list, and association list variants. Concrete use cases include parsing JSON from network sockets or files and serializing structured data to JSON strings with optional pretty-printing.",
      "description_length": 402,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_of_jsonm_lib",
      "library": "json_of_jsonm",
      "description": "This module provides three submodules for JSON parsing and serialization. Json_of_jsonm_monad handles JSON values using a monadic IO interface for byte streams, Json_string encodes and decodes JSON to and from strings with strict error handling, and Json_channel reads and writes JSON from and to channels with both result and exception-based APIs. They support standard JSON types including null, boolean, float, string, list, and association list variants, and are used for tasks like processing JSON from network sockets, reading configuration files, or converting structured data to human-readable formats.",
      "description_length": 610,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 610,
    "min_description_length": 363,
    "avg_description_length": 456.7142857142857,
    "embedding_file_size_mb": 0.101806640625
  }
}