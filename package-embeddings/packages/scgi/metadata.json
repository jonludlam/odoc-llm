{
  "package": "scgi",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 10,
  "creation_timestamp": "2025-08-14T23:04:47.019022",
  "modules": [
    {
      "module_path": "Scgi.Response",
      "library": "scgi",
      "description": "This module constructs and manipulates HTTP responses for SCGI applications. It supports setting response status, headers, and body content using either a string or a streaming interface. Common use cases include generating dynamic HTTP responses and streaming large content efficiently.",
      "description_length": 287,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Headers",
      "library": "scgi",
      "description": "This module parses SCGI request headers from a string into a list of key-value pairs. It handles the conversion of raw header data into a structured format for easy access to fields like `CONTENT_LENGTH` or `REQUEST_METHOD`. Use it when processing SCGI input to extract and work with individual headers in a web application or server.",
      "description_length": 334,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Http_header",
      "library": "scgi",
      "description": "This module defines a polymorphic variant type for representing HTTP headers, including common headers like content length, content type, location, and cookies, as well as custom headers and status codes. It provides a `to_string` function to convert these header values into their string representations. Use this module when constructing or serializing HTTP responses with specific headers and status codes.",
      "description_length": 409,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Client",
      "library": "scgi",
      "description": "This module sends SCGI requests over an internet socket or a Unix domain socket. It handles communication with an SCGI server, returning responses asynchronously using Lwt. Use it to interact with SCGI-based services, such as web applications or backend servers, by sending formatted requests and receiving structured responses.",
      "description_length": 328,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Http_status",
      "library": "scgi",
      "description": "This module defines an enumerated type representing HTTP status codes, including standard statuses and a custom code constructor. It provides functions to convert between status values and their integer-string representations, as well as extracting the numeric or string form directly. Useful for handling HTTP responses in web applications where precise status code management is required.",
      "description_length": 390,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Server",
      "library": "scgi",
      "description": "This module implements SCGI servers that handle requests over Internet or Unix-domain sockets. It provides handler functions to process incoming connections with customizable timeouts, buffer sizes, and connection backlogs, using Lwt for asynchronous I/O. Concrete use cases include building lightweight web services or backend APIs that communicate via SCGI, where handlers process each request and generate responses asynchronously.",
      "description_length": 434,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Netstring",
      "library": "scgi",
      "description": "This module handles netstring encoding and decoding for network communication. It consumes character streams to decode netstrings and converts strings into properly formatted netstrings. Used in SCGI request parsing and response generation.",
      "description_length": 240,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Request",
      "library": "scgi",
      "description": "This module constructs and processes SCGI request values from streams, supporting HTTP methods, URIs, headers, and body content. It provides accessors for request components like cookies, parameters, and headers, along with serialization to and from strings. Concrete use cases include parsing incoming HTTP requests, extracting form data, and retrieving client metadata such as user agent or remote address.",
      "description_length": 408,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Http_method",
      "library": "scgi",
      "description": "This module defines an enumerated type representing HTTP methods, including standard operations like `GET`, `POST`, and `DELETE`. It provides functions to convert between string representations and the corresponding type values. Useful for parsing and serializing HTTP request methods in web applications.",
      "description_length": 305,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi",
      "library": "scgi",
      "description": "This module implements SCGI clients and servers for asynchronous communication over network or Unix-domain sockets, handling request/response cycles with Lwt. It works with HTTP methods, headers, and status codes, and supports netstring encoding for SCGI protocol compliance. Concrete use cases include building SCGI-based web services, reverse proxies, or clients that interact with SCGI-backed applications.",
      "description_length": 409,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 434,
    "min_description_length": 240,
    "avg_description_length": 354.4,
    "embedding_file_size_mb": 0.145294189453125
  }
}