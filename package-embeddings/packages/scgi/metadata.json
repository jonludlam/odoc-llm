{
  "package": "scgi",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-07-15T23:06:09.624250",
  "modules": [
    {
      "module_path": "Scgi.Http_header",
      "library": "scgi",
      "description": "This module defines a polymorphic variant type for representing HTTP headers, including common headers like content length, content type, location, and cookies, as well as custom headers and status codes. It provides a `to_string` function to convert these header values into their string representations. Use this module to construct and serialize HTTP headers when building HTTP responses in a web application.",
      "description_length": 412,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Scgi.Http_status",
      "library": "scgi",
      "description": "This module defines an enumerated type representing HTTP status codes, including standard statuses and a custom code constructor. It provides functions to convert between status values and their integer-string representations, enabling precise handling of HTTP responses. Use cases include validating server response codes, generating appropriate HTTP headers, and mapping application logic to specific HTTP status semantics.",
      "description_length": 425,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Scgi.Server",
      "library": "scgi",
      "description": "This module implements SCGI servers that handle requests over Internet or Unix-domain sockets. It provides handler functions to process incoming connections with customizable timeouts, buffer sizes, and connection backlogs, using Lwt for asynchronous I/O. Concrete use cases include deploying lightweight web applications or APIs where SCGI is used as the communication protocol between a web server and application server.",
      "description_length": 423,
      "index": 2,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Scgi.Client",
      "library": "scgi",
      "description": "This module sends SCGI requests over an internet socket or a Unix domain socket. It handles communication with an SCGI server, sending a request and returning the server's response. Use it to interact with SCGI-based services such as web applications or backend servers.",
      "description_length": 270,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Headers",
      "library": "scgi",
      "description": "This module parses SCGI request headers from a string into a list of key-value pairs. It processes raw header data into a structured format for easy lookup and manipulation. Use it to extract header fields like `CONTENT_LENGTH` or `REQUEST_METHOD` from incoming SCGI requests.",
      "description_length": 276,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Netstring",
      "library": "scgi",
      "description": "This module handles netstring encoding and decoding. It provides `encode` to convert a string into a netstring format and `decode` to read and parse a netstring from a character stream. It is used for communication protocols requiring netstring framing, such as SCGI.",
      "description_length": 267,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Request",
      "library": "scgi",
      "description": "This module constructs and processes SCGI request objects from streams or components like HTTP methods, URIs, headers, and body content. It provides accessors to retrieve request metadata such as method, URI path, headers, cookies, and query or POST parameters. Use cases include parsing incoming SCGI requests, extracting user input from query strings or form data, and inspecting headers for routing or authentication.",
      "description_length": 420,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi.Response",
      "library": "scgi",
      "description": "This module constructs and manipulates HTTP responses for SCGI applications. It supports setting response status, headers, and body content using either a string or a character stream. Concrete use cases include building custom HTTP responses with streaming content or debugging responses by converting them to human-readable strings.",
      "description_length": 334,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Scgi.Http_method",
      "library": "scgi",
      "description": "This module defines an enumerated type representing HTTP methods, including standard operations like `GET`, `POST`, and `DELETE`. It provides functions to convert between string representations and the corresponding type values. Useful for parsing and generating HTTP requests, particularly in web servers or clients handling method-specific logic.",
      "description_length": 348,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Scgi",
      "library": "scgi",
      "description": "This module handles SCGI protocol operations for building and processing web requests and responses. It provides data types for HTTP methods, status codes, and headers, along with utilities to encode and decode netstrings, parse SCGI headers, and construct request and response objects. You can use it to implement SCGI servers and clients, handle HTTP communication with precise status and header control, and extract or build request components like query parameters, cookies, and body content. Examples include deploying a lightweight web service over SCGI, sending requests to a backend server, or parsing and responding to HTTP methods with custom routing logic.",
      "description_length": 667,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 667,
    "min_description_length": 267,
    "avg_description_length": 384.2,
    "embedding_file_size_mb": 0.036746978759765625
  }
}