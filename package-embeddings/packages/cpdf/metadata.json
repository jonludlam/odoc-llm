{
  "package": "cpdf",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 57,
  "creation_timestamp": "2025-07-15T23:14:32.837033",
  "modules": [
    {
      "module_path": "Cpdfxmlm.String",
      "library": "cpdf",
      "description": "This module provides operations for creating, manipulating, and transforming strings in the context of XML document traversal. It supports string concatenation, case conversion, iteration over Unicode code points, and conversion between standard OCaml strings and UTF-8 encoded strings. These operations are used to process XML content efficiently during input parsing and output generation.",
      "description_length": 391,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfxmlm.S",
      "library": "cpdf",
      "description": "This module facilitates XML document encoding and decoding via sequences of `signal` values representing elements, attributes, and DTDs, enabling transformations between event streams and tree-like data structures. It supports output serialization to channels, buffers, or functions with options for indentation, namespace prefixes, and encoding handling (UTF-8, ISO-8859-1), making it suitable for streaming workflows and memory-efficient processing of large XML datasets.",
      "description_length": 473,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfyojson.Lexer_state",
      "library": "cpdf",
      "description": "This module manages the internal state of a JSON lexer, tracking buffer contents, line numbers, and file position during parsing. It provides functions to update and access the current parsing context, including line and character offsets. Concrete use cases include error reporting with precise source locations and maintaining input state during incremental JSON parsing.",
      "description_length": 373,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfxmlm.Make",
      "library": "cpdf",
      "description": "This module enables the transformation of XML document trees into sequences of signals (such as Dtd, El_start, and Data) for streaming input/output operations, supporting both parsing and generation of XML data. It operates on strings, buffers, and input sources like channels, handling encodings (UTF-8, ISO-8859-1), XML namespaces, and indentation, while providing detailed error reporting. Use cases include parsing XML from streaming data sources into hierarchical structures, generating XML documents to output destinations like files or memory buffers, and transforming XML trees with precise control over formatting and structure.",
      "description_length": 637,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfyojson.Safe",
      "library": "cpdf",
      "description": "This module provides a JSON representation that supports precise integer handling via `Intlit`, tuples, and variants, along with robust parsing and serialization to and from strings, files, and buffers. It includes operations for equality checks, sorting object fields, converting to basic JSON, and parsing sequences with error resilience. The `Parser` submodule enables fine-grained parsing with detailed error reporting, while `Serialize` offers customizable formatting options. You can parse JSON from a string, manipulate its structured data, and serialize it back with sorted fields or custom indentation.",
      "description_length": 611,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfxmlm.Buffer",
      "library": "cpdf",
      "description": "This module implements internal buffers for handling Unicode code points, providing operations to create, clear, add characters, and retrieve contents as strings. It works with a buffer type `t` and uses integers to represent Unicode code points. Concrete use cases include accumulating character data during XML parsing or serialization, where efficient buffer management is needed for streaming operations.",
      "description_length": 408,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfyojson.Raw",
      "library": "cpdf",
      "description": "This module handles JSON data with precise preservation of integer, float, and string literals, supporting operations like serialization, pretty-printing, and structural comparison. It works with JSON values containing variants and tuples, enabling robust parsing from strings, files, or streams with error recovery and customizable formatting. Typical use cases include processing JSON where literal accuracy is critical or interfacing with systems requiring strict JSON syntax adherence.",
      "description_length": 489,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfyojson.Basic",
      "library": "cpdf",
      "description": "This module provides core JSON processing capabilities centered around the `t` type, representing standard JSON structures such as objects, arrays, and primitives. It includes functions for parsing and serializing JSON to and from strings, files, and buffers, with support for pretty-printing, sorting, and equality checks. The module handles conversions to and from basic OCaml types like integers, strings, and lists, while omitting advanced features such as variant syntax or arbitrary-precision integers. It is ideal for simple JSON workflows, such as reading configuration files or exchanging structured data between systems.",
      "description_length": 630,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfremovetext",
      "library": "cpdf",
      "description": "This module provides functions to remove text from specific pages of a PDF document. It operates on `Pdf.t` documents and takes a list of page numbers to target. Use cases include stripping annotations or watermarks added with `Cpdfaddtext` or removing text from document sections for redaction.",
      "description_length": 295,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfdrawcontrol",
      "library": "cpdf",
      "description": "This module provides operations for manipulating PDF graphics state, constructing vector paths, and integrating text and images into documents. It works with PDF document structures, raw byte streams, and string-based parameters to control font rendering, color styling, transformation matrices, and page content assembly. Specific use cases include programmatically generating complex layouts with mixed media, applying clipping paths for precise rendering, and managing low-level drawing attributes like line styles or text spacing during document composition.",
      "description_length": 562,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfpresent",
      "library": "cpdf",
      "description": "Adds presentation transitions to PDF pages with customizable timing, direction, and effects. Operates on `Pdf.t` documents by applying visual transitions between specified page ranges. Useful for creating slide-like PDF presentations with controlled navigation behavior.",
      "description_length": 270,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfsqueeze",
      "library": "cpdf",
      "description": "Performs lossless compression and decompression of PDF streams. Works directly with `Pdf.t` documents, compressing or decompressing all streams using `/FlateDecode`. Useful for reducing PDF file size without altering content or metadata, and for inspecting or modifying compressed PDF data.",
      "description_length": 290,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfjpeg2000",
      "library": "cpdf",
      "description": "This module provides a function to extract the width and height from a JPEG2000 image stream. It operates directly on byte sequences representing JPEG2000-encoded images. A concrete use case is determining the dimensions of a JPEG2000 image embedded in a PDF without full decoding.",
      "description_length": 281,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdftype",
      "library": "cpdf",
      "description": "This module represents PDF content elements and provides operations to construct, render, and manipulate document structures. It works with character-based text, layout glue, font definitions, and page elements to support typesetting into PDF pages. Concrete use cases include building custom PDF documents from structured content, calculating text widths for precise layout, and injecting structural tags for accessibility.",
      "description_length": 424,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfpagespec",
      "library": "cpdf",
      "description": "This module handles parsing, validating, and manipulating page specifications for PDF documents. It supports operations like expanding ranges (e.g., \"1-5\"), handling labels (e.g., \"\\<iii>\"), filtering by orientation or parity (e.g., \"odd\", \"landscape\"), and inverting or duplicating ranges. It works directly with page numbers, string-based specifications, and PDF metadata to produce concrete page lists for processing.",
      "description_length": 420,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfextracttext",
      "library": "cpdf",
      "description": "This module extracts text content from PDF pages with optional scaling adjustments. It processes `Pdf.t` documents and `Pdfpage.t` objects, returning textual content as strings. Use it to retrieve text from specific pages or page ranges in a PDF, such as for indexing or content analysis tasks.",
      "description_length": 294,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfdraft",
      "library": "cpdf",
      "description": "Removes images from a PDF document, optionally replacing them with crossed boxes. Operates on PDF objects and supports specifying pages to process. Useful for redacting or simplifying PDFs by eliminating visual content.",
      "description_length": 219,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfimpose",
      "library": "cpdf",
      "description": "This module performs PDF page imposition, combining multiple logical pages into a single physical page with configurable layout options. It provides operations for arranging pages in a grid, stacking, or scaling, with control over direction, margins, spacing, and rotation. Use cases include generating booklets, creating multi-page handouts, and optimizing print layouts.",
      "description_length": 372,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfpage",
      "library": "cpdf",
      "description": "This module provides functions for inspecting and transforming PDF pages, including scaling, rotating, cropping, and adjusting page geometry (mediabox, bleed, etc.). It operates on PDF documents and individual pages, handling page ranges for batch processing, with applications in print preparation, accessibility adjustments, and digital layout restructuring.",
      "description_length": 360,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdftexttopdf",
      "library": "cpdf",
      "description": "This module converts plain text into a formatted PDF document. It supports customizable layout through parameters like font, font size, and paper size, and allows optional metadata such as title and subformat. A typical use case is generating printable reports or documents directly from text content.",
      "description_length": 301,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfattach",
      "library": "cpdf",
      "description": "This module handles file attachments in PDF documents, providing functions to attach, list, remove, and extract embedded files. It works with PDF documents and attachment metadata, including file names, page numbers, and lazy-loaded data. Concrete use cases include embedding supporting documents into a PDF, extracting attached files to disk, and inspecting or stripping attachments for compliance or analysis.",
      "description_length": 411,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdferror",
      "library": "cpdf",
      "description": "This module provides a single function `error` that raises a `SoftError` exception with a custom error message. It works with string inputs to convey descriptive error information during exceptional conditions. Use this function to signal recoverable errors in PDF processing workflows, such as invalid file formats or malformed input data.",
      "description_length": 340,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdftoc",
      "library": "cpdf",
      "description": "This module generates and appends a formatted table of contents to a PDF document. It allows customization of appearance through font, font size, title, and formatting options like dot leaders and bookmarks. It operates directly on `Pdf.t` documents, producing a modified PDF with the table of contents as the first page.",
      "description_length": 321,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfpng",
      "library": "cpdf",
      "description": "This module reads non-interlaced, non-alpha, non-palette PNG files, extracting image data and metadata such as width, height, bit depth, and color type. It produces a structured representation of the PNG data suitable for embedding in PDF files. A typical use case is processing PNG images for inclusion in PDF documents without support for advanced PNG features like transparency or interlacing.",
      "description_length": 396,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfcreate",
      "library": "cpdf",
      "description": "This module creates new PDF documents with specified page dimensions and number of pages. It supports operations to initialize documents using either explicit width and height values or predefined paper sizes. Concrete use cases include generating empty PDFs for dynamic content insertion or setting up templates with fixed page geometries.",
      "description_length": 340,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfbookmarks",
      "library": "cpdf",
      "description": "This module handles the creation, modification, and listing of PDF bookmarks. It supports operations such as parsing bookmark files, adding bookmarks to a PDF, exporting bookmarks in JSON or legacy formats, and adjusting bookmark destinations based on page reference changes. It works directly with PDF documents, bookmark specifications, and input/output streams for file handling. Use cases include generating a table of contents for a merged PDF document or extracting and editing existing bookmarks for external processing.",
      "description_length": 527,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfannot",
      "library": "cpdf",
      "description": "This module handles PDF annotations, providing functions to retrieve, set, remove, and copy annotations on specific pages. It works with PDF documents and supports operations like converting annotations to JSON, parsing them from JSON, and listing or copying annotations between documents. Concrete use cases include extracting annotations for external processing, restoring annotations from a backup, or transferring annotations between PDFs.",
      "description_length": 443,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfunicodedata",
      "library": "cpdf",
      "description": "This module provides access to parsed Unicode character data from the UnicodeData.txt file. It defines a record type representing Unicode character properties and a function to retrieve the full list of parsed records on demand. The data includes character names, categories, mappings, and numeric properties, enabling tasks like character classification, case conversion, and handling combining characters.",
      "description_length": 407,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfmetadata",
      "library": "cpdf",
      "description": "This library enables manipulation of PDF metadata including string encoding, document ID management, Info dictionary updates, ViewerPreferences, and XMP metadata handling (create, set, remove, extract). It operates on `Pdf.t` documents, strings, encodings, bytes, and date strings, supporting use cases like embedding metadata, setting document properties, and managing creation/modification timestamps through date expansion and direct metadata date assignment.",
      "description_length": 462,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfjson",
      "library": "cpdf",
      "description": "This module reads and writes PDF documents in CPDFJSON format, converting between PDF structures and JSON representations. It operates on `Pdf.t` and `Pdf.pdfobject` types, providing direct serialization and deserialization with configurable handling of streams, encodings, and content parsing. Use cases include inspecting PDF content, modifying PDF objects via JSON, and generating PDFs from JSON data.",
      "description_length": 404,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfchop",
      "library": "cpdf",
      "description": "This module provides functions to split PDF pages into smaller sections by specifying dimensions and layout options. It operates on PDF documents and page ranges, allowing precise control over horizontal or vertical cutting, column arrangement, and directionality. Use cases include extracting specific regions from PDFs, dividing multi-column documents, or preparing pages for reformatting.",
      "description_length": 391,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfaddtext",
      "library": "cpdf",
      "description": "This module adds text and rectangles to PDF pages with precise positioning, color, and styling options. It supports operations like text rendering with custom fonts, colors (Grey, RGB, CMYK), justification, and line spacing, as well as drawing colored rectangles with optional outlines. Concrete use cases include annotating PDFs with watermarks, headers, footers, or form fields, and highlighting specific areas with colored boxes.",
      "description_length": 432,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfspot",
      "library": "cpdf",
      "description": "Works with PDF documents to identify and list spot color information directly to standard output. Provides the `list_spot_colours` function, which outputs spot color names found in a given PDF. Useful for prepress validation or color analysis tasks where spot color usage must be explicitly known.",
      "description_length": 297,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfposition",
      "library": "cpdf",
      "description": "This module defines a variety of position types to describe spatial alignment and placement, such as `PosCentre`, `TopLeft`, and `Diagonal`. It includes functions to convert positions to debug strings and to calculate absolute text positions based on bounding boxes, orientation, and scaling. It is used to precisely place text elements within a PDF document layout, accounting for margins, alignment, and rotation.",
      "description_length": 415,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdffont",
      "library": "cpdf",
      "description": "This module handles font-related operations in PDF documents, including listing, copying, embedding, and extracting fonts. It works with PDF font objects, page numbers, and font metadata such as name, subtype, and encoding. Concrete use cases include reporting missing fonts, embedding missing fonts from a file, copying fonts between documents, and extracting embedded font files to disk.",
      "description_length": 389,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfembed",
      "library": "cpdf",
      "description": "This module handles embedding TrueType fonts into PDF documents by providing functions to create font packs, look up character codes, and collate text runs. It works with PDF documents, font data, and Unicode codepoints using types like `t`, `cpdffont`, and standard font encodings. Concrete use cases include embedding custom fonts for specific text content, substituting standard fonts, and preparing text for PDF rendering with accurate character mappings.",
      "description_length": 459,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfutil",
      "library": "cpdf",
      "description": "This module provides functions to manipulate dictionary entries in PDF objects, specifically allowing removal or replacement of entries within a PDF dictionary. It operates directly on `Pdf.t` and `Pdf.pdfobject` types, targeting dictionary structures. Use cases include modifying metadata or adjusting content streams in PDF documents by altering specific dictionary key-value pairs.",
      "description_length": 384,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfyojson",
      "library": "cpdf",
      "description": "This module processes JSON data with varying safety and type fidelity, centered on a core `t` type and extended by specialized submodules for safe integers and raw JSON. It supports parsing, serialization, equality checks, and pretty-printing, with direct operations for converting OCaml values to and from JSON. Submodules enable advanced use cases like error-resilient parsing, precise integer handling, and literal-preserving serialization, while the main module serves simpler workflows like configuration parsing or data interchange. You can parse JSON from a string, manipulate structured data with type-safe operations, and serialize with custom formatting or sorted fields.",
      "description_length": 681,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfcommand",
      "library": "cpdf",
      "description": "This module executes command line PDF tools using arguments from `Sys.argv` or a provided array. It directly processes PDF files through operations like merging, splitting, and metadata manipulation. Useful for automating PDF workflows without invoking shell commands manually.",
      "description_length": 277,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfpad",
      "library": "cpdf",
      "description": "Adds blank pages to PDF documents at specified positions or pads to a multiple of a given number. Operates on PDF documents represented as `Pdf.t` values. Useful for adjusting document layout, such as ensuring correct page counts for printing or binding.",
      "description_length": 254,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfxobject",
      "library": "cpdf",
      "description": "Stamps a PDF page as an XObject into another PDF document, returning the modified document and the name of the inserted XObject. Operates on PDF documents and page references. Useful for embedding reusable page content like watermarks or headers across multiple documents.",
      "description_length": 272,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfdraw",
      "library": "cpdf",
      "description": "This module supports drawing vector graphics, text, and images on PDF pages using low-level PDF drawing operations. It provides functions to define paths, apply colors and transformations, set text formatting, and embed fonts or images. Concrete use cases include annotating PDFs with shapes, adding watermarks, generating reports with custom layouts, and modifying existing PDF content programmatically.",
      "description_length": 404,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdftruetype",
      "library": "cpdf",
      "description": "This module parses TrueType font files and subsets them based on a list of required Unicode codepoints, producing font data suitable for embedding in PDFs. It works with TrueType font files represented as byte sequences and outputs font records containing metrics, width arrays, and subset glyph data. Use cases include generating minimal font subsets for PDF generation and extracting encoding information for PDF/UA compliance checks.",
      "description_length": 436,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfcolours",
      "library": "cpdf",
      "description": "This module defines a list of standard CSS color names paired with their corresponding integer representations. It provides direct access to common web color values for use in graphics or document processing tasks. The data structure is a list of tuples, where each tuple contains a lowercase color name and its integer RGB value.",
      "description_length": 330,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfpagelabels",
      "library": "cpdf",
      "description": "Adds page labels to a PDF document, allowing custom numbering styles, prefixes, and ranges. Works with PDF objects and label style enumerations. Useful for generating documents with non-sequential or styled page numbers in specific sections.",
      "description_length": 241,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfshape",
      "library": "cpdf",
      "description": "This module defines data types for representing 2D geometric shapes using points, segments, and paths, with support for both straight and B\u00e9zier curve segments. It provides functions to construct common shapes like circles and rectangles, and includes utilities for angle restriction and control point calculation for curves. Concrete use cases include building vector paths for PDF rendering or vector graphics manipulation.",
      "description_length": 425,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfimage",
      "library": "cpdf",
      "description": "This module handles image extraction, processing, and analysis within PDF documents. It provides functions to extract images to disk, report image resolutions, list images in JSON format, and reprocess images with configurable quality and compression settings. Concrete use cases include optimizing PDF image quality, analyzing image DPI per page, and converting images during PDF manipulation workflows.",
      "description_length": 404,
      "index": 46,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Cpdfocg",
      "library": "cpdf",
      "description": "This module manages optional content groups (OCGs) in PDF documents. It provides operations to list, rename, coalesce, and ensure ordering of OCGs, working directly with PDF structures and string identifiers. Use cases include maintaining layer visibility and organization after merging PDFs or preparing files for accessibility and print workflows.",
      "description_length": 349,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfprinttree",
      "library": "cpdf",
      "description": "This module prints tree structures to a buffer or string, using customizable functions to extract node names and child nodes. It takes a tree root and recursively formats it with optional line prefixes. Use it to visualize hierarchical data like file systems, XML nodes, or nested configurations.",
      "description_length": 296,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfcoord",
      "library": "cpdf",
      "description": "This module parses numerical values, coordinates, and rectangles from strings, returning tuples or lists of floats. It processes data like page sizes or positions, extracting structured geometric information from textual representations. Use it when converting string-encoded dimensions or points into usable numeric formats for layout or rendering tasks.",
      "description_length": 355,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfxmlm",
      "library": "cpdf",
      "description": "This module enables streaming XML parsing and serialization through sequences of structured signals representing XML elements, attributes, and DTDs, converting between character streams and hierarchical data with support for namespaces, encodings, and precise error handling. It provides core operations for transforming, traversing, and formatting XML data, along with submodules that manage string manipulation, buffer handling, and signal-based document transformation. You can parse large XML files incrementally, generate formatted XML output to channels or buffers, and manipulate tree structures with namespace-aware operations while maintaining efficient memory usage. Specific capabilities include Unicode-aware string iteration, signal-to-tree conversions, and streaming transformations with configurable indentation and encoding options.",
      "description_length": 848,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfstrftime",
      "library": "cpdf",
      "description": "This module implements C-style date and time formatting with the `strftime` function, which converts a time value into a string based on a given format. It operates on a custom time record type containing fields like seconds, minutes, hour, day of the month, month, year, and more. Use this module to generate timestamp strings for logging, file naming, or display in specific formats like \"2024-03-20 14:30:00\".",
      "description_length": 412,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfdebug",
      "library": "cpdf",
      "description": "Prints all PDF objects from a given PDF document to standard output. Works directly with the `Pdf.t` type representing parsed PDF files. Useful for inspecting the internal structure of PDFs during development or debugging.",
      "description_length": 222,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfua",
      "library": "cpdf",
      "description": "This module handles PDF/UA compliance operations, providing functions to mark, test, and manipulate PDF files according to PDF/UA-1 and PDF/UA-2 standards. It works with PDF documents using the `Pdf.t` type and supports structure tree extraction, modification, and reapplication via JSON. Concrete use cases include generating compliant PDFs, validating accessibility features using Matterhorn tests, and inspecting or repairing document structure trees.",
      "description_length": 454,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfjpeg",
      "library": "cpdf",
      "description": "This module provides a function to extract the width and height from a JPEG image represented as a byte sequence. It operates directly on raw JPEG data without requiring external libraries or full image decoding. Useful for quickly determining image dimensions in PDF processing or image analysis workflows.",
      "description_length": 307,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdftweak",
      "library": "cpdf",
      "description": "This module manipulates PDF content by adjusting line thickness, color, and text properties on specific pages. It supports operations like modifying dictionary entries, replacing or removing PDF objects and streams, and appending page content. Concrete use cases include enforcing minimum line widths, converting elements to black, and editing PDF metadata or content directly.",
      "description_length": 377,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfcomposition",
      "library": "cpdf",
      "description": "Prints or returns the structure of a PDF document in JSON format, including details like page count, object types, and file size. Operates on PDF documents represented as `Pdf.t` values. Useful for inspecting PDF internals, debugging, or integrating with tools that analyze or process PDF metadata.",
      "description_length": 298,
      "index": 56,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 59,
    "meaningful_modules": 57,
    "filtered_empty_modules": 2,
    "retention_rate": 0.9661016949152542
  },
  "statistics": {
    "max_description_length": 848,
    "min_description_length": 219,
    "avg_description_length": 395.7894736842105,
    "embedding_file_size_mb": 0.20753192901611328
  }
}