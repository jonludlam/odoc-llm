{
  "package": "cpdf",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 56,
  "creation_timestamp": "2025-06-18T16:42:16.776399",
  "modules": [
    {
      "module_path": "Cpdfyojson.Basic.Util",
      "description": "This module offers combinators for extracting and transforming values from JSON data, including field access, list iteration, and type conversion. It operates on JSON objects, arrays, and nodes, enabling tasks like filtering specific fields or handling nested structures. Use cases include parsing API responses to retrieve identifiers or titles while managing optional or malformed data.",
      "description_length": 388,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfyojson.Safe.Util",
      "description": "The module provides combinators for extracting and transforming values from JSON, including field access, list iteration, and type conversion, with support for handling nested structures and optional data. It operates on JSON objects, arrays, and nodes, enabling tasks like filtering specific fields from API responses or processing lists of structured data. Use cases include retrieving mandatory identifiers, collecting titles from nested arrays, or safely navigating malformed or incomplete JSON payloads.",
      "description_length": 508,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfyojson.Lexer_state",
      "description": "Provides functions to track and update the current position, line, and column within a source file during lexical analysis. Works with a record type containing integers for position, line, and column. Used to generate accurate error messages and track token locations during parsing.",
      "description_length": 283,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfyojson.Basic",
      "description": "provides utilities for navigating and manipulating JSON structures through combinators that support field extraction, list processing, and type conversion. it works with objects, arrays, and nodes, allowing precise access to nested data and handling of optional or invalid entries. operations include filtering fields, converting values, and iterating over lists, enabling tasks like isolating identifiers from API responses. examples include parsing JSON to retrieve specific values or transforming nested data into structured OCaml types.",
      "description_length": 540,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfyojson.Safe",
      "description": "provides combinators for safely extracting, transforming, and navigating JSON data, supporting nested structures, optional fields, and type conversions. It works with JSON objects, arrays, and nodes, allowing operations like filtering specific fields, collecting values from nested lists, or handling arbitrary integers as decimal strings. Users can retrieve mandatory identifiers, process structured API responses, or safely parse incomplete JSON. Operations include field access, list iteration, and type-safe conversions.",
      "description_length": 524,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfyojson.Raw",
      "description": "This module handles serialization and deserialization of JSON values, supporting operations to convert between JSON types\u2014such as objects, arrays, tuples, and variants\u2014and formats like strings, channels, and buffers, while preserving integer, float, and string literals. It enables parsing from diverse input sources, including line-by-line or sequence-based processing, with customizable error tracking and buffer management for efficient handling of large or structured JSON data. Use cases include robust JSON manipulation in applications requiring strict literal preservation or streaming input scenarios.",
      "description_length": 609,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfxmlm.Make",
      "description": "Provides operations to create, manipulate, and analyze strings, including concatenation, length calculation, case conversion, and iteration over Unicode code points. Works with a custom string type `t` that represents UTF-8 encoded sequences. Used to process and transform text data, such as generating normalized output from input strings or applying character-level transformations.",
      "description_length": 384,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "cpdf",
      "description": "Provides functions for parsing, modifying, and serializing PDF content streams, including operations to extract and replace objects, manipulate page elements, and handle binary data. Works with custom data types such as `pdf_obj`, `content_stream`, and `pdf_dict` to represent and transform PDF structures. Used to implement features like text extraction, page reordering, and object-level editing in PDF processing tools.",
      "description_length": 422,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfpagelabels",
      "description": "Adds page labels to a PDF document based on a specified style, starting number, and list of page indices. Works with PDF objects, label styles, and integer lists to define label sequences. Used to customize page numbering in exported or modified PDFs for specific formatting requirements.",
      "description_length": 288,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfcomposition",
      "description": "Displays the internal structure of a PDF document, including page hierarchy and object references. Operates on PDF data structures and outputs structured information in text or JSON format. Used to inspect and debug PDF content organization during processing or conversion tasks.",
      "description_length": 279,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfimpose",
      "description": "Imposes pages in a PDF according to specified layout parameters, including margins, spacing, and orientation, with options for fitting, centering, and direction. It works with PDF documents and modifies their page layout by rearranging and transforming page content. It supports legacy two-up layouts that either scale pages to fit the same media box or rotate them to create a larger one.",
      "description_length": 389,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfjpeg2000",
      "description": "Returns the width and height of a JPEG2000 image from a byte stream. Processes raw image data to extract geometric properties. Used to validate or prepare images for rendering in PDF contexts.",
      "description_length": 192,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfembed",
      "description": "Provides functions to embed TrueType fonts into PDFs and look up character mappings. Works with font data, Unicode codepoints, and PDF document structures. Embeds specific fonts, retrieves character information, and organizes font usage for consistent rendering.",
      "description_length": 262,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfcolours",
      "description": "Provides a list of standard CSS color names paired with their RGB integer values. Works with strings for color names and integers for RGB representations. Used to map CSS color names to their numeric values in graphics or styling applications.",
      "description_length": 243,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfremovetext",
      "description": "Removes specific or all text content from designated pages of a PDF document. Operates on page indices and PDF objects represented as `Pdf.t`. Used to clean up documents by eliminating previously added or all textual elements from selected pages.",
      "description_length": 246,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfua",
      "description": "Parses PDF/UA versions into a subformat type, marks PDFs for compliance, and manages structure trees through JSON serialization and replacement. Processes PDF documents to add, remove, or inspect PDF/UA markers and structure information. Creates new PDF/UA-1 and PDF/UA-2 files with specified metadata and layout.",
      "description_length": 313,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfyojson",
      "description": "provides tools for parsing, navigating, and manipulating JSON data with support for tracking source positions, extracting nested values, and converting between JSON and OCaml types. it includes record types for tracking line and column numbers, combinators for safe field and list operations, and functions for serializing and deserializing JSON from various input sources. users can extract specific fields from complex structures, handle optional or malformed data, and process large JSON streams efficiently. examples include parsing API responses to isolate identifiers or converting nested JSON arrays into OCaml lists.",
      "description_length": 624,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfspot",
      "description": "Provides functions to retrieve and output spot color definitions from a PDF document. Operates on PDF data structures and outputs color information in a formatted manner. Used to inspect and debug color definitions within PDF files during processing workflows.",
      "description_length": 260,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfdrawcontrol",
      "description": "The module offers operations for font management, text formatting, and PDF element rendering, including shape drawing, path manipulation, and graphics state control. It works with font data, text strings, byte arrays, and mutable graphics state, enabling tasks like embedding fonts, applying transformations, and rendering images or paragraphs. Specific use cases involve creating documents with complex layouts, managing stroke/fill properties, and handling XObjects or special text formatting.",
      "description_length": 495,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfcoord",
      "description": "Parses PDF coordinate and numerical data from strings, extracting floats for positions, rectangles, and single values. Processes input using a PDF context to ensure accurate interpretation of coordinate systems. Used to extract layout information from PDF content streams for rendering or analysis.",
      "description_length": 298,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfpagespec",
      "description": "Provides functions to parse, validate, and manipulate page specifications for PDFs, including converting between string representations and page number lists. Operates on integers and lists of integers to represent page ranges, and uses a PDF object to determine valid ranges. Used to generate human-readable page specs, validate user input, and adjust page ranges for processing or output.",
      "description_length": 390,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfprinttree",
      "description": "Prints hierarchical tree structures by recursively traversing nodes and formatting them with a specified prefix. Accepts any data type with defined name and child retrieval functions, producing a string or appending to a buffer. Used to visualize abstract syntax trees or directory structures with customizable indentation.",
      "description_length": 323,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfsqueeze",
      "description": "Recompresses PDFs by applying /FlateDecode to uncompressed streams and removing metadata, while decompressing all streams in unencrypted PDFs. Operates on PDF documents represented as `Pdf.t` values. Squeezes PDFs by optimizing internal structures, optionally logging results and including page data.",
      "description_length": 300,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdftexttopdf",
      "description": "Converts raw text content into a structured PDF document with customizable formatting options. It processes text data using specified fonts, paper sizes, and text dimensions, producing a Pdf.t value. Supports embedding titles and adjusting output for accessibility standards.",
      "description_length": 275,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfattach",
      "description": "Provides functions to manage file attachments within PDFs, including attaching files to specific pages or the document level, removing attachments, listing their names and locations, and dumping them to a directory. Operates on PDF objects and handles UTF-8 strings for filenames, ensuring safe character usage. Used to modify PDFs by adding or extracting embedded files while preserving version integrity when needed.",
      "description_length": 418,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfdraw",
      "description": "Provides functions to annotate and modify PDFs by drawing on specified pages, using structured operations and page ranges. Works with PDF documents, page ranges, and custom drawing operations defined in a list. Enables precise control over annotations, including artifact tagging and role mapping, for document enhancement tasks.",
      "description_length": 329,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfcommand",
      "description": "Provides functions to execute PDF command line tools using either the default system arguments or a custom argument array. Operates with string arrays to control tool execution. Enables direct invocation of PDF processing commands from within OCaml applications.",
      "description_length": 262,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdftype",
      "description": "Provides functions to generate and manipulate typographic content for PDFs, including converting content to strings, calculating text widths, and typesetting with margins and page sizes. Operates on custom element types and lists of elements, supporting font width tables and character code processing. Used to construct PDF pages with precise layout and to annotate content streams with artifacts.",
      "description_length": 398,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfshape",
      "description": "Provides functions to construct geometric paths, including circles and rectangles, using specific data types like fpoint, segment, and path. Includes a function to adjust angles to multiples of a given step, useful for creating symmetrical shapes. Operates on numeric parameters and path structures to generate vector graphics elements.",
      "description_length": 336,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfchop",
      "description": "Chops PDF pages into specified sections based on coordinates, orientation, and layout parameters. It operates on PDF documents and integer lists representing page ranges. Used to split large pages into smaller, manageable fragments for processing or layout adjustments.",
      "description_length": 269,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfcreate",
      "description": "Creates a new PDF document with specified dimensions or paper size, supporting multiple pages. Operates on page dimensions in points and paper size objects. Used to generate initial PDF structures for adding content or formatting.",
      "description_length": 230,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfocg",
      "description": "Returns a list of OCG names from a PDF document and allows renaming, reordering, and coalescing of OCGs. Operates on PDF objects and string identifiers for OCGs. Useful for managing optional content groups during PDF manipulation tasks.",
      "description_length": 236,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfannot",
      "description": "Extracts and manipulates PDF annotations, supporting JSON and legacy formats. Operates on PDF documents and page numbers to retrieve, remove, copy, or list annotations. Enables programmatic handling of annotation data within PDFs for processing or transformation tasks.",
      "description_length": 269,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfaddtext",
      "description": "Provides operations to apply color fills and strokes, and to add text and rectangles to PDF pages. Works with color specifications, text positioning, and page ranges. Used to annotate PDFs with labeled text, apply background colors, and overlay shapes on specific page areas.",
      "description_length": 275,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfpresent",
      "description": "Adds a presentation effect to specified pages of a PDF, allowing control over duration, direction, and visual style. Operates on page ranges, strings, floats, and boolean flags to customize transitions. Used to automate slide show animations in generated or modified PDF documents.",
      "description_length": 281,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfpng",
      "description": "Reads PNG image data from an input stream, processing non-interlaced, non-alpha, and non-palette formats into a structured image representation. Operates on binary input streams and produces a type containing pixel data, dimensions, and color information. Used to embed raster graphics into PDF documents with specific format constraints.",
      "description_length": 338,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfpad",
      "description": "Adds blank pages before or after specified page numbers in a PDF document, and ensures the total number of pages is a multiple of a given integer. Operates on PDF objects representing page sequences. Useful for adjusting document layouts to meet formatting requirements or printing constraints.",
      "description_length": 294,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfxmlm",
      "description": "Provides functions to create, modify, and query a buffer storing Unicode characters, including adding code points, clearing, and retrieving contents. Operates on an opaque buffer type and standard strings. Used to efficiently build and manage UTF-8 encoded text during XML parsing or generation.",
      "description_length": 295,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfunicodedata",
      "description": "Provides functions to access Unicode character data, including source information and parsed entries. Works with a list of records containing Unicode properties. Used to retrieve and inspect character details during PDF encoding and decoding processes.",
      "description_length": 252,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfstrftime",
      "description": "Provides functions to format time values using C-style format strings, with support for retrieving the current time and a predefined dummy time value. Works with a time record type containing date and time components. Formats timestamps for logging, report generation, or user-facing time displays.",
      "description_length": 298,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdftoc",
      "description": "Generates a table of contents by formatting a title with a specified font and size, including optional bookmarks and dot leaders, and inserts it at the beginning of a PDF document. Works with PDF objects, font configurations, and string-based titles. Used to dynamically create navigable tables of contents for multi-page PDFs.",
      "description_length": 327,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfdebug",
      "description": "Prints all PDF objects from a given document to the standard output for inspection. Works with the `Pdf.t` type, which represents a parsed PDF structure. Useful for analyzing object references and content streams during PDF parsing or manipulation tasks.",
      "description_length": 254,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfxobject",
      "description": "Creates and manipulates XObjects within PDF documents, enabling the embedding of graphics and content from one PDF into another. It operates on PDF objects and page references, allowing for the conversion of stamped content into reusable XObject resources. This supports advanced PDF composition tasks such as incorporating watermarks or recurring elements across multiple pages.",
      "description_length": 379,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfjson",
      "description": "Writes PDFs in CPDFJSON format by parsing page content streams, omitting stream data, decompressing streams, and converting string encodings. Reads CPDFJSON-formatted PDFs from input, automatically correcting /Length entries. Converts individual PDF objects to and from CPDFJSON, preserving or modifying string encodings as needed.",
      "description_length": 331,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfdraft",
      "description": "Removes images from a PDF document, optionally replacing them with crossed boxes based on a boolean flag. Operates on a list of page indices to target specific pages. Accepts an optional output file path and modifies the input PDF structure in place.",
      "description_length": 250,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfextracttext",
      "description": "Extracts text from specific pages of a PDF document using page indices or a range. Operates on PDF objects and page descriptors to retrieve raw text content. Useful for isolating text from targeted pages in multi-page documents.",
      "description_length": 228,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdferror",
      "description": "Handles error conditions by raising a structured soft error with a descriptive message. Operates on strings and generic types through the error function. Used to signal invalid PDF content or parsing issues during document processing.",
      "description_length": 234,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdftruetype",
      "description": "Provides functions to parse TrueType font files and extract character mapping tables. It processes byte sequences and returns font objects containing glyph data, along with functions to retrieve cmap information for PDF/UA compliance. Used to generate minimal font subsets for embedding in PDFs and validate font encoding structures.",
      "description_length": 333,
      "index": 47,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdfmetadata",
      "description": "This module handles PDF metadata operations such as encoding, copying IDs, setting versions, and outputting metadata in various formats, while managing XMP data, info dictionaries, and metadata streams. It works with PDF objects and date strings, enabling tasks like expanding \"now\" to current dates or adjusting viewer preferences. Use cases include preparing PDFs for compliance, automating metadata updates, and ensuring consistent formatting across documents.",
      "description_length": 463,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cpdffont",
      "description": "Provides functions to manipulate and analyze fonts within PDF documents. Works with PDF objects, font metadata, and font files, supporting operations like listing, extracting, embedding, and removing fonts. Enables detailed font reporting, table printing, and font file extraction for document customization and validation.",
      "description_length": 323,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfposition",
      "description": "Produces a debug string from a position and calculates absolute text positioning based on width, bounding box, orientation, and position parameters. Works with a custom position type and floating-point coordinates. Used to determine text placement in PDF layout calculations, adjusting for orientation and bounding box constraints.",
      "description_length": 331,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfbookmarks",
      "description": "Provides functions to parse, add, list, and modify PDF bookmarks using a custom format or JSON. Operates on PDF documents, bookmark lists, and page reference mappings. Enables tasks like expanding bookmark specifications, adjusting bookmark indentation, and verifying bookmark validity against page ranges.",
      "description_length": 306,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdftweak",
      "description": "Modifies PDF elements by adjusting line thickness, converting text and graphics to black, and manipulating page content and dictionary entries. Operates on PDF documents and page indices, supporting direct manipulation of visual and structural components. Used to standardize visual output, clean up graphics, and alter PDF metadata or layout.",
      "description_length": 343,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfpage",
      "description": "This module provides functions for transforming and adjusting PDF pages, including scaling, rotating, cropping, and modifying page boxes like media and crop. It operates on PDF objects, page indices, and geometric parameters to enable tasks such as layout adjustments, print preparation, and page combination. Specific use cases include optimizing document",
      "description_length": 356,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfjpeg",
      "description": "Returns the width and height of a JPEG image from a byte buffer. Operates on raw byte data to extract geometric information. Used to validate or process embedded JPEGs in PDF documents.",
      "description_length": 185,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cpdfimage",
      "description": "Provides functions to extract, process, and report image data from PDFs, including resolution details and JSON outputs. Works with PDF objects, integer lists, and floating-point parameters to manipulate image properties. Used to reprocess images with specific compression settings or extract image metadata for analysis.",
      "description_length": 320,
      "index": 55,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 56,
    "meaningful_modules": 56,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 624,
    "min_description_length": 185,
    "avg_description_length": 331.75,
    "embedding_file_size_mb": 0.20383644104003906
  }
}