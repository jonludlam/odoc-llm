{
  "package": "lsp",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 431,
  "creation_timestamp": "2025-07-16T00:30:50.264446",
  "modules": [
    {
      "module_path": "Lsp.Import.Json.O",
      "library": "lsp",
      "description": "This module provides a function `<|>` that combines two functions, returning the result of the first if it succeeds, or the second if the first raises an exception. It works with functions of the same input and output types, allowing fallback behavior in parsing or transformation pipelines. A concrete use case is handling optional JSON fields where one of two possible keys may contain a value.",
      "description_length": 396,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.String.Map",
      "library": "lsp",
      "description": "This module provides operations for managing associative collections with string keys and arbitrary value types, supporting insertion, deletion, lookup, and in-place updates. It includes advanced functionality for merging maps, extracting key-value pairs, filtering elements, and transforming data through iteration or ordered traversal, with capabilities to convert between maps and sequences or lists. These tools are suited for handling hierarchical or symbolic data, optimizing ordered access patterns, and integrating with external data formats requiring key-value mapping.",
      "description_length": 578,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json.Of",
      "library": "lsp",
      "description": "Converts JSON values into OCaml types using customizable decoders. It handles lists, pairs, integer pairs, untagged unions, and literal fields with specific key expectations. Useful for parsing structured JSON data from sources like LSP messages into typed OCaml representations.",
      "description_length": 279,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Private.Substring.Uutf",
      "library": "lsp",
      "description": "Handles UTF-8 decoding from a substring source, providing a function to create a Uutf decoder from a substring and a starting position. Works with `Lsp.Private.Substring.t` and `Uutf.decoder` types. Useful for processing UTF-8 encoded text in substring-based data structures, such as parsing LSP messages.",
      "description_length": 305,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Extension.DebugTextDocumentGet.Params",
      "library": "lsp",
      "description": "This module defines parameters for a debug text document request, including a position and text document identifier. It provides functions to create these parameters and convert them to and from JSON format. This module is used to handle custom debug requests in a language server, specifically identifying which document and position to debug.",
      "description_length": 344,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Import.Json.Void",
      "library": "lsp",
      "description": "This module defines a type `t` intended to represent JSON values that are explicitly absent or ignored. It includes functions to convert between this type and `Yojson.Safe.t`, enabling handling of optional or void JSON fields during serialization and deserialization. Concrete use cases include managing missing or null-like values in JSON payloads where strict schema adherence is required.",
      "description_length": 391,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json.Option",
      "library": "lsp",
      "description": "Converts between OCaml option types and JSON values, using `Null` to represent `None`. Provides functions to serialize and deserialize optional values with custom handling for JSON encoding/decoding. Useful when working with JSON APIs where optional fields may be omitted or explicitly set to null.",
      "description_length": 298,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Extension.DebugEcho.Params",
      "library": "lsp",
      "description": "Handles parsing and serialization of debug echo messages in the language server protocol. Works with JSON data using `Yojson.Safe.t` and the `t` record type containing a `message` string. Used to transmit diagnostic or logging messages during LSP extension debugging.",
      "description_length": 267,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Private.String_zipper.Private",
      "library": "lsp",
      "description": "This module implements a zipper structure for navigating and modifying lists of substrings with positional tracking. It provides precise operations for moving through the list, updating the current element, and maintaining absolute and relative position counters. Useful for text processing tasks like incremental parsing or cursor-based editing in a document model.",
      "description_length": 366,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Result.O",
      "library": "lsp",
      "description": "This module provides a single operation, `(let+)`, which maps a function over the successful value of a result type, propagating any error. It works with `Stdlib.result` values, transforming the `Ok` case while preserving the `Error` case. A concrete use case is chaining computations that may fail, such as parsing or file operations, where each step depends on the previous one's success.",
      "description_length": 390,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json.Object",
      "library": "lsp",
      "description": "This module provides functions to convert between a list of key-value pairs and JSON objects. It works with lists of string-JSON value pairs and JSON object representations. Use this module when constructing or parsing JSON objects from key-value data, such as serializing configuration settings or deserializing structured API responses.",
      "description_length": 338,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Extension.DebugTextDocumentGet.Result",
      "library": "lsp",
      "description": "This module defines the result type for a custom LSP extension that retrieves debug text documents. It includes serialization and deserialization functions for handling optional string results using Yojson. It is used to exchange textual debug content between a language server and a client, such as returning raw source code or diagnostic output on demand.",
      "description_length": 357,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Import.Json.To",
      "library": "lsp",
      "description": "This module serializes OCaml values into JSON structures for language server protocol messages. It includes functions to convert lists, construct JSON objects with string keys and typed values, and encode integer pairs into JSON arrays. Use it when transforming internal data types into JSON for LSP communication, such as sending positions, ranges, or configuration updates.",
      "description_length": 375,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentUri.Private",
      "library": "lsp",
      "description": "Controls whether file paths are treated as Windows-style (with backslashes) or Unix-style (with slashes) when parsing and formatting document URIs. Works with string values representing file paths and URIs. Used internally to ensure correct path handling during conversion between file system paths and document URIs in cross-platform environments.",
      "description_length": 348,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Private.Substring.Map",
      "library": "lsp",
      "description": "This module supports standard map operations like insertion, removal, and lookup, along with bulk transformations such as merging and union, all optimized for maps with keys of type `Lsp.Private.Substring.t`. It emphasizes ordered traversal, filtering, and conversion to or from sequences and lists, enabling efficient iteration in both forward and reverse directions while preserving key ordering. These capabilities are particularly useful for managing sorted key-value associations",
      "description_length": 484,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json.Nullable_option",
      "library": "lsp",
      "description": "This module provides functions for converting between JSON values and OCaml option types, specifically handling cases where a JSON value may be `null`. It works with JSON variants that include the `Null` constructor and OCaml options. Use it when parsing or serializing data structures that represent optional fields in JSON APIs, such as deserializing a JSON object field that may be absent or explicitly null.",
      "description_length": 411,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Header.Private.Key",
      "library": "lsp",
      "description": "This module defines constants for HTTP header fields used in LSP (Language Server Protocol) communication. It provides the `content_length` and `content_type` string values, which are essential for formatting and parsing LSP messages over standard input/output. These values are directly used when handling JSON-RPC requests and responses in LSP servers and clients.",
      "description_length": 366,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json.Assoc",
      "library": "lsp",
      "description": "This module serializes and deserializes association lists to and from JSON objects. It converts pairs with string keys into JSON associations and reconstructs lists from JSON objects. Use it when mapping dictionary-like structures between OCaml and JSON representations.",
      "description_length": 270,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json.Conv",
      "library": "lsp",
      "description": "This module enables bidirectional conversion between OCaml values and JSON representations, supporting primitives (booleans, numbers, strings), containers (lists, arrays, hash tables), and structured types (tuples, options). It provides composable conversion functions for building type-safe serializers and deserializers, including specialized handlers for abstract types, functions, and nested data structures. Typical use cases include parsing JSON configurations, implementing protocol message formats, or mapping complex domain models to and from JSON in a type-driven manner.",
      "description_length": 581,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Extension.DebugEcho.Result",
      "library": "lsp",
      "description": "Handles serialization and deserialization of debug echo response data in the LSP protocol. Works with `t` records containing a `message` string, using `Yojson.Safe.t` for JSON encoding and decoding. Used to transmit diagnostic messages between language servers and clients during debugging.",
      "description_length": 290,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TraceValues",
      "library": "lsp",
      "description": "This module defines a type `t` representing trace levels for logging in an LSP (Language Server Protocol) implementation, with variants `Compact`, `Off`, `Messages`, and `Verbose`. It includes functions to convert between this type and Yojson for serialization and deserialization. This module is used to configure trace output in LSP communication, such as determining the level of detail in server logs.",
      "description_length": 405,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RenameFilesParams",
      "library": "lsp",
      "description": "This module handles parameters for renaming multiple files in an LSP (Language Server Protocol) context. It works with a list of file rename operations, encapsulated in the `t` type. Concrete use cases include processing batch file rename requests from an editor or IDE, where each file move is represented as a structured operation.",
      "description_length": 333,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InsertTextFormat",
      "library": "lsp",
      "description": "This module defines an enumerated type with two variants, `PlainText` and `Snippet`, representing formats for insertion text in language server protocol communications. It includes functions to convert this type to and from Yojson representations for serialization and deserialization. This module is used when handling text insertion behavior in code completion or editing features within an LSP-based editor integration.",
      "description_length": 422,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DiagnosticRelatedInformation",
      "library": "lsp",
      "description": "This module defines a type for diagnostic-related information, consisting of a location and a message. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to associate diagnostic messages with specific source code locations in LSP (Language Server Protocol) implementations.",
      "description_length": 318,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineCompletionOptions",
      "library": "lsp",
      "description": "This module defines inline completion options for LSP (Language Server Protocol) with a single field indicating whether work done progress is supported. It provides functions to create an options record, and to convert to and from Yojson for serialization. This structure is used when configuring language server capabilities for inline completions in editor integrations.",
      "description_length": 372,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticWorkspaceClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure representing client capabilities related to diagnostic workspace features, specifically supporting an optional `refreshSupport` boolean. It provides functions to create instances, serialize to JSON, and deserialize from JSON using the Yojson library. This structure is used to communicate client support for refreshing diagnostics in language server protocol implementations.",
      "description_length": 412,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SelectionRange",
      "library": "lsp",
      "description": "This module defines a recursive data structure for representing nested selection ranges in a text document. It includes functions to construct a selection range with an optional parent, and to serialize and deserialize the structure using Yojson. A concrete use case is tracking hierarchical text selections in an editor, where each selection can contain or be contained within another.",
      "description_length": 386,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeHierarchyRegistrationOptions",
      "library": "lsp",
      "description": "This module defines options for registering type hierarchy capabilities in a language server, including document selector, registration ID, and progress reporting. It supports serialization to and from JSON using Yojson for configuration and communication. Use this to configure type hierarchy features in LSP servers with optional work done progress tracking.",
      "description_length": 360,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.VersionedTextDocumentIdentifier",
      "library": "lsp",
      "description": "This module defines a type `t` representing a versioned text document identifier, consisting of a document URI and an integer version. It provides functions to construct instances, convert to and from JSON using Yojson. Used to track specific versions of documents in language server protocol interactions, such as when sending text document changes or requests.",
      "description_length": 362,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeclarationRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a type `t` for storing options related to declaration registration in the context of the Language Server Protocol (LSP). It includes fields for specifying a document selector, an identifier, and whether work done progress is enabled. The module provides functions to create instances of this type and to serialize/deserialize it to and from JSON using the Yojson library.",
      "description_length": 391,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHintWorkspaceClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure representing client workspace capabilities related to inlay hints in an editor or IDE, specifically supporting optional refresh functionality. It provides functions to create instances, serialize to JSON, and deserialize from JSON using the Yojson library. This module is used to configure and communicate inlay hint behavior between a language server and a client.",
      "description_length": 402,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeLensWorkspaceClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure representing workspace client capabilities related to code lens operations, specifically supporting a refresh flag. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. This is used to communicate client-side code lens capabilities during language server protocol initialization.",
      "description_length": 355,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeLensParams",
      "library": "lsp",
      "description": "Handles parameters for code lens requests in the Language Server Protocol. It includes a text document identifier and optional progress tokens for partial results and work done tracking. Converts between JSON representations and the structured parameter type.",
      "description_length": 259,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ImplementationParams",
      "library": "lsp",
      "description": "This module defines a data structure for handling implementation parameters in the context of the Language Server Protocol. It includes fields for tracking progress and positioning within a text document, along with functions to construct instances and serialize to or from JSON. It is used to request and process implementation details in an editor or IDE integration.",
      "description_length": 369,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.HoverClientCapabilities",
      "library": "lsp",
      "description": "This module defines client capabilities for hover operations in the Language Server Protocol, specifically supporting dynamic registration and specifying markup formats for content rendering. It works with boolean and markup kind list types to configure client behavior. Concrete use cases include enabling or disabling dynamic hover feature registration and setting supported content formats like plain text or markdown.",
      "description_length": 421,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeActionContext",
      "library": "lsp",
      "description": "This module defines a data structure for contextual information used during code action requests. It includes diagnostics, an optional list of code action kinds to filter by, and an optional trigger kind indicating how the code action was initiated. The module provides functions to construct this context, along with serialization and deserialization to and from JSON.",
      "description_length": 369,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentHighlightParams",
      "library": "lsp",
      "description": "This module defines a type `t` representing parameters for document highlight requests in the context of language server protocol (LSP) operations. It includes fields for tracking progress and specifying the position and document identifier. The module provides functions to construct instances, and to convert to and from JSON format for serialization and deserialization.",
      "description_length": 373,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentSyncClientCapabilities",
      "library": "lsp",
      "description": "This module defines a type `t` representing client capabilities for text document synchronization in the context of the Language Server Protocol (LSP). It includes boolean options for handling save events, dynamic registration, and save notifications with and without wait-until semantics. The module provides functions to construct instances of `t`, and to convert to and from JSON format using the Yojson library.",
      "description_length": 415,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentChangeRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a type and functions for specifying how text document changes are registered and synchronized. It works with document selectors and text document sync kinds to determine which documents to monitor and the level of synchronization required. Use this module to configure change registration options for language server protocol clients or servers, ensuring proper document event handling.",
      "description_length": 406,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SelectionRangeOptions",
      "library": "lsp",
      "description": "This module defines configuration options for selection range functionality, specifically supporting the `workDoneProgress` flag to indicate progress reporting. It works with boolean values wrapped in an option type to represent optional configuration parameters. Concrete use cases include enabling or disabling progress notifications during selection range operations in language server protocol implementations.",
      "description_length": 414,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlineCompletionParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in inline completion requests, including context, position, text document identifier, and an optional progress token. It provides functions to construct instances, convert to and from JSON format using Yojson. This structure is used to request inline code completions at specific positions within a text document during language server interactions.",
      "description_length": 406,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeHierarchyClientCapabilities",
      "library": "lsp",
      "description": "This module defines capabilities related to type hierarchy support in a language server, specifically tracking whether dynamic registration is supported. It works with a single record type containing an optional boolean field. Use cases include configuring client-side behavior for type hierarchy features in language tools like IDEs or code analyzers.",
      "description_length": 352,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentColorParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in a document color request, including tokens for progress reporting and a text document identifier. It provides functions to construct instances, convert to and from JSON format using Yojson. This module is used to support features like extracting color information from a document in an editor integration scenario.",
      "description_length": 374,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RenameClientCapabilities",
      "library": "lsp",
      "description": "This module defines a type `t` representing client capabilities for rename operations in the Language Server Protocol, including dynamic registration, change annotation handling, and preparation support. It provides functions to construct instances of this type and to serialize or deserialize them using Yojson. Use cases include configuring and exchanging client capabilities during LSP initialization or runtime negotiation.",
      "description_length": 427,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SemanticTokensOptions",
      "library": "lsp",
      "description": "This module defines configuration options for semantic token handling in a language server, supporting full token synchronization with optional delta updates. It works with boolean flags, semantic token legends, and JSON serialization types. It is used to configure how semantic tokens are provided to clients, including whether to support incremental updates and range-based token requests.",
      "description_length": 391,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ImplementationOptions",
      "library": "lsp",
      "description": "This module defines a data structure for implementation options in the context of the Language Server Protocol (LSP). It includes a single field `workDoneProgress` to indicate whether progress reporting is supported. The module provides functions to create instances, and to convert to and from JSON format using Yojson.",
      "description_length": 320,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.UniquenessLevel",
      "library": "lsp",
      "description": "This module defines a type `t` representing levels of uniqueness for document identifiers in the context of language server protocol. It includes functions to convert values between JSON and the enumerated type, supporting Document, Project, Group, Scheme, and Global levels. These conversions enable proper serialization and deserialization of uniqueness levels when communicating with language servers or storing configuration data.",
      "description_length": 434,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ExecuteCommandRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a data structure for specifying command execution registration options in the context of the Language Server Protocol. It includes functions to create and serialize instances that list supported commands and indicate whether work done progress is supported. Use this module to configure command handling capabilities when initializing a language server.",
      "description_length": 373,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Range",
      "library": "lsp",
      "description": "This module defines a data structure representing a range in a text document, with start and end positions. It provides functions to create ranges and convert them to and from JSON format. It is used to describe regions of source code, such as the location of errors or edits.",
      "description_length": 276,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Definition",
      "library": "lsp",
      "description": "This module defines a type `t` that represents either a single location or a list of locations, typically used to indicate the definition site(s) of a symbol in a program. It provides serialization and deserialization functions to and from Yojson for use in JSON-based communication, such as with language servers. Concrete use cases include returning definition locations in response to LSP (Language Server Protocol) requests.",
      "description_length": 428,
      "index": 49,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.AnnotatedTextEdit",
      "library": "lsp",
      "description": "This module defines a record type representing a text edit with an associated annotation identifier, including the new text and the range to replace. It provides functions to construct such records and convert them to and from JSON format using Yojson. This module is used to associate text modifications with specific annotations in the context of the Language Server Protocol.",
      "description_length": 378,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CancelParams",
      "library": "lsp",
      "description": "This module defines a data structure for representing cancellation parameters in the context of the Language Server Protocol (LSP). It includes functions to create a cancellation request with a specific JSON-RPC identifier and to serialize/deserialize the structure to and from JSON using Yojson. A concrete use case is handling client-initiated cancellations of ongoing server operations, such as interrupting a long-running code analysis task.",
      "description_length": 445,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FoldingRangeWorkspaceClientCapabilities",
      "library": "lsp",
      "description": "This module defines capabilities related to folding range support in a language server protocol client. It includes a function to create a capability structure with optional refresh support and functions to serialize and deserialize the structure to and from JSON. A concrete use case is enabling or disabling dynamic refresh of code folding ranges in an editor based on client support.",
      "description_length": 386,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Header.Private",
      "library": "lsp",
      "description": "This module provides essential constants for HTTP headers used in LSP communication. It includes `content_length` and `content_type`, which are critical for correctly formatting and parsing JSON-RPC messages over standard input/output. These values are used directly when implementing LSP servers and clients to ensure proper message handling. For example, `content_type` ensures correct interpretation of JSON payloads, while `content_length` controls message framing.",
      "description_length": 469,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DefinitionOptions",
      "library": "lsp",
      "description": "This module defines configuration options for handling definition requests in a language server. It includes a boolean flag to enable or disable work done progress tracking. The module supports serialization and deserialization to and from JSON using Yojson.",
      "description_length": 258,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineCompletionRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a type `t` for inline completion registration options, including optional document selector, identifier, and work done progress flag. It provides functions to create instances, convert to and from JSON using Yojson. Used to configure inline completion features in language servers, specifying where and how completions should be registered.",
      "description_length": 360,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileOperationPattern",
      "library": "lsp",
      "description": "This module defines a file operation pattern with a glob string, optional match kind, and optional pattern options. It provides functions to construct the pattern, convert it to and from JSON. Concrete use cases include specifying file monitoring rules in language server configurations, such as tracking changes to specific file types or directories.",
      "description_length": 351,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Snippet.O",
      "library": "lsp",
      "description": "This module defines operations for combining and manipulating snippet values using infix operators. It provides concatenation of snippets with other snippets or raw strings, enabling the construction of complex text templates. Concrete use cases include building structured output for language server responses, such as formatted code suggestions or documentation.",
      "description_length": 364,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeConfigurationClientCapabilities",
      "library": "lsp",
      "description": "This module defines a type `t` with an optional `dynamicRegistration` boolean field, representing client capabilities for handling configuration changes in a language server. It provides functions to create instances, serialize to JSON, and deserialize from JSON. Used to configure how a language server client signals support for dynamic configuration updates during runtime.",
      "description_length": 376,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceDiagnosticReport",
      "library": "lsp",
      "description": "This module defines a structure for aggregating diagnostic reports across multiple documents in a workspace. It includes functions to construct a report from a list of document-specific diagnostics and to serialize or deserialize the report using JSON. It is used to efficiently bundle and transmit diagnostic data for tools like language servers analyzing entire projects.",
      "description_length": 373,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentOnTypeFormattingParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in document formatting triggered by typing. It includes the character typed, formatting options, cursor position, and the text document identifier. It supports operations to create instances and convert to and from JSON format.",
      "description_length": 284,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SemanticTokensClientCapabilities",
      "library": "lsp",
      "description": "This module defines data structures and functions for specifying client capabilities related to semantic token handling in a language server. It includes types for full and delta token requests, token formats, and modifiers, along with functions to construct and serialize these capabilities. It is used to configure how a language server provides semantic token information, such as supporting multiline or overlapping tokens, and specifying which token types and modifiers are recognized.",
      "description_length": 490,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentHighlightClientCapabilities",
      "library": "lsp",
      "description": "This module defines a type `t` with an optional `dynamicRegistration` boolean field and provides functions to create instances, convert to and from JSON. It works with the `Yojson.Safe.t` type for serialization and deserialization. Concrete use cases include handling client capabilities related to document highlighting in an LSP (Language Server Protocol) server, particularly for enabling or disabling dynamic registration of document highlight features.",
      "description_length": 457,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.PrepareRenameParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in preparing a rename operation within a text document. It includes fields for the position of the rename request, the document identifier, and an optional progress token. The module provides functions to construct the parameter record, and to convert it to and from JSON format for serialization and deserialization.",
      "description_length": 374,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MonikerOptions",
      "library": "lsp",
      "description": "This module defines a data structure for representing moniker options in the context of the Language Server Protocol (LSP). It includes a single field `workDoneProgress` that indicates whether work done progress is supported. The module provides functions to create instances, and to convert to and from JSON format using Yojson.",
      "description_length": 329,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.MarkdownClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure for specifying client capabilities related to Markdown rendering in an LSP (Language Server Protocol) implementation. It includes fields for allowed HTML tags, the Markdown parser name, and its version, along with functions to construct and serialize the structure to and from JSON using Yojson. It is used to communicate formatting support from a language client to a server, enabling features like rich hover documentation with controlled HTML output.",
      "description_length": 490,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CodeAction",
      "library": "lsp",
      "description": "This module defines data structures and functions for representing code actions in the context of the Language Server Protocol (LSP). It includes operations to create and manipulate code action objects with optional fields such as commands, diagnostics, workspace edits, and metadata like title and kind. The module supports serialization and deserialization to and from JSON using Yojson, enabling seamless integration with LSP message handling.",
      "description_length": 446,
      "index": 66,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.Declaration",
      "library": "lsp",
      "description": "This module defines a type `t` representing possible declaration results in a language server protocol, either a single location or a list of locations. It includes functions to convert this type to and from Yojson for serialization and deserialization. It is used to handle declaration requests in LSP servers, where a symbol's declaration can be returned as one or multiple locations.",
      "description_length": 386,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueText",
      "library": "lsp",
      "description": "This module defines a data structure representing inline value text annotations in the context of the Language Server Protocol. It includes operations to create and serialize inline value text objects, which associate a textual value with a specific source code range. Commonly used to provide inline hints or evaluations during code debugging or analysis.",
      "description_length": 356,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.GeneralClientCapabilities",
      "library": "lsp",
      "description": "This module defines client capabilities for an LSP (Language Server Protocol) client, including support for stale requests, position encodings, markdown rendering, and regular expressions. It provides functions to construct and serialize capability structures, such as `create_staleRequestSupport` and `create`, along with JSON serialization using `t_of_yojson` and `yojson_of_t`. Concrete use cases include configuring a language client's feature support during initialization and serializing capabilities for transmission over a JSON-RPC connection.",
      "description_length": 551,
      "index": 69,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FileChangeType",
      "library": "lsp",
      "description": "This module defines a polymorphic type `t` representing file change events with three variants: `Created`, `Changed`, and `Deleted`. It includes functions to convert values of type `t` to and from Yojson for serialization and deserialization. This module is used to handle file system change notifications in LSP (Language Server Protocol) implementations, where precise tracking of file events is required.",
      "description_length": 407,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DefinitionLink",
      "library": "lsp",
      "description": "This module defines a type `t` as an alias for `Lsp.Types.LocationLink.t` and provides functions to convert values of this type to and from Yojson representations. It supports serialization and deserialization of location link data, which represents definition targets in a codebase. Concrete use cases include handling definition requests in language server protocol implementations, where precise location mapping between source and target is required.",
      "description_length": 454,
      "index": 71,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ConfigurationParams",
      "library": "lsp",
      "description": "This module handles configuration requests in the Language Server Protocol by defining a structure for a list of configuration items. It provides functions to create and serialize these structures to and from JSON format. It is used to retrieve or update settings specific to a language server instance, such as editor preferences or tool-specific options.",
      "description_length": 356,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineCompletionTriggerKind",
      "library": "lsp",
      "description": "This module defines an inline completion trigger kind with two possible values: `Invoked` and `Automatic`. It provides functions to convert between these values and JSON representations using the Yojson library. This is used to handle inline code completion events in language server protocol implementations, specifically for distinguishing between user-triggered and automatic completions.",
      "description_length": 391,
      "index": 73,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.LinkedEditingRangeClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure for representing client capabilities related to linked editing ranges in a language server protocol. It includes functions to create instances with optional dynamic registration support and to serialize or deserialize these instances using Yojson. A concrete use case is enabling a language server to determine whether a client can handle dynamically registered linked editing range features during initialization.",
      "description_length": 451,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentFilter",
      "library": "lsp",
      "description": "This module defines a notebook document filter type used to specify criteria for matching notebook documents in the context of language server protocol interactions. It includes functions to convert the filter type to and from JSON representations, enabling serialization and deserialization for communication with language servers. Concrete use cases include filtering notebooks by language, file type, or other document properties during server initialization or dynamic registration.",
      "description_length": 486,
      "index": 75,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentSymbolClientCapabilities",
      "library": "lsp",
      "description": "This module defines client capabilities for document symbol features in the Language Server Protocol. It includes functions to create and manage structures for symbol kinds, tag support, and hierarchical document symbol options, all used to configure symbol handling in LSP clients. The module works directly with boolean flags and lists of symbol-related types, enabling precise control over document symbol discovery and representation.",
      "description_length": 438,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileOperationPatternOptions",
      "library": "lsp",
      "description": "This module defines options for file operation patterns, specifically supporting case-insensitive matching through the `ignoreCase` field. It provides functions to create and serialize these options, enabling configuration of file pattern behavior in LSP (Language Server Protocol) operations. Use cases include setting up file watchers or filtering file events with customizable case sensitivity.",
      "description_length": 397,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.UnregistrationParams",
      "library": "lsp",
      "description": "This module defines a data structure for handling a list of unregistration requests in the context of the Language Server Protocol (LSP). It includes functions to construct an unregistration parameters object, and to convert it to and from JSON format using the Yojson library. A concrete use case is managing the deactivation of LSP features or extensions by serializing and deserializing unregistration data during server-client communication.",
      "description_length": 445,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyIncomingCall",
      "library": "lsp",
      "description": "This module defines a type `t` representing incoming calls in a call hierarchy, containing a reference to the caller (`from`) and a list of ranges (`fromRanges`) indicating where the call originates. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to model and serialize call relationships between functions or methods in a codebase, specifically tracking where calls originate from in the source code.",
      "description_length": 450,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ImplementationClientCapabilities",
      "library": "lsp",
      "description": "This module defines client capabilities for implementation-related features in a language server. It includes functions to create capability records and serialize/deserialize them using Yojson. It is used to configure support for dynamic registration and link handling in implementation requests.",
      "description_length": 296,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressCancelParams",
      "library": "lsp",
      "description": "This module defines a data structure for handling work done progress cancellation in the context of the Language Server Protocol (LSP). It includes operations to create a cancellation parameter object and to serialize/deserialize it using Yojson. A concrete use case is managing client-initiated cancellation of long-running operations like code analysis or build tasks.",
      "description_length": 370,
      "index": 81,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SignatureHelpOptions",
      "library": "lsp",
      "description": "This module defines configuration options for signature help in a language server, including characters that trigger or retrigger help and whether work progress is reported. It supports serialization to and from JSON using Yojson. It is used to configure signature help behavior in language server protocol implementations.",
      "description_length": 323,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileOperationPatternKind",
      "library": "lsp",
      "description": "This module defines a type `t` with two variants, `File` and `Folder`, representing kinds of file operations. It provides functions to convert values of this type to and from Yojson format. This is used to serialize and deserialize file operation kinds when communicating with language servers via the Language Server Protocol.",
      "description_length": 327,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureHelpTriggerKind",
      "library": "lsp",
      "description": "This module defines a type `t` representing the possible trigger kinds for signature help in a language server protocol, including invocation, trigger characters, and content changes. It provides functions to convert between JSON and the `t` type. These conversions are used to serialize and deserialize signature help trigger events when communicating with a language server client.",
      "description_length": 383,
      "index": 84,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyIncomingCallsParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used to request incoming calls in a call hierarchy, including the target item and optional tokens for progress tracking. It provides functions to construct instances and convert to and from JSON representations. This is used when handling language server protocol requests to retrieve call hierarchy data for a specific symbol or function.",
      "description_length": 391,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHintParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in inlay hint requests, including the document range, text document identifier, and optional progress token. It provides functions to construct instances, convert to and from JSON format using Yojson. Concrete use cases include handling inlay hint queries in language server protocol implementations, where structured data is required for communication between client and server.",
      "description_length": 436,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FormattingOptions",
      "library": "lsp",
      "description": "This module defines a record type for formatting options used in text document processing, including settings for newlines, spacing, and trimming. It provides functions to construct instances with optional fields and to serialize/deserialize them using Yojson. Concrete use cases include configuring code formatters and managing document layout preferences in editors.",
      "description_length": 368,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceUnchangedDocumentDiagnosticReport",
      "library": "lsp",
      "description": "This module defines a type and associated functions for representing diagnostic reports for unchanged documents in a workspace. It includes operations to create a report with a result ID, document URI, and optional version, as well as serialization and deserialization to and from JSON. It is used to communicate diagnostic information for documents that have not changed since the last request.",
      "description_length": 395,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Extension.DebugTextDocumentGet",
      "library": "lsp",
      "description": "This module handles custom debug text document requests in a language server by defining both the parameters and result types for retrieving debug content. It includes data types for specifying text document identifiers and positions, along with operations to serialize and deserialize these values to and from JSON. The module supports exchanging textual debug information, such as source code or diagnostics, between a client and server based on specific document locations. For example, it can be used to request and return the content of a source file at a given position for debugging purposes.",
      "description_length": 599,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ParameterInformation",
      "library": "lsp",
      "description": "This module defines a type `t` representing parameter information in a language server protocol, including optional documentation and a label that can be a string or character range offset. It provides functions to construct instances, convert to and from JSON, and supports scenarios like documenting function parameters in IDEs. Concrete use cases include displaying parameter hints and hover documentation in code editors.",
      "description_length": 425,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeHierarchySubtypesParams",
      "library": "lsp",
      "description": "This module defines parameters for requesting type hierarchy subtypes in a language server protocol. It includes a type hierarchy item and optional tokens for tracking partial results and work progress. The module supports creating parameter objects and converting them to and from JSON format for communication between the client and server.",
      "description_length": 342,
      "index": 91,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CompletionList",
      "library": "lsp",
      "description": "This module defines data structures and functions for handling completion lists in a language server protocol. It includes types for edit ranges, item defaults, and completion lists, which are used to specify how code completions should be inserted and formatted. The module supports creating and serializing completion lists with customizable defaults and text insertion behavior for specific completion items.",
      "description_length": 411,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ExecuteCommandParams",
      "library": "lsp",
      "description": "This module defines a type for parameters used to execute a command, including the command string, optional arguments as JSON values, and an optional progress token. It provides functions to construct these parameters, and to convert them to and from JSON format. It is used to handle command execution requests in a language server, where commands may carry structured data and support progress tracking.",
      "description_length": 405,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionItemTag",
      "library": "lsp",
      "description": "This module defines a single enumerated type representing tags for completion items, specifically supporting serialization and deserialization to and from JSON. It includes two functions for converting between JSON values and the enumerated type. A typical use case involves handling language server protocol messages where completion item tags need to be parsed from or formatted into JSON during client-server communication.",
      "description_length": 426,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeleteFilesParams",
      "library": "lsp",
      "description": "This module defines a type `t` representing parameters for deleting multiple files, containing a list of file delete operations. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to handle bulk file deletion requests in language server protocol implementations.",
      "description_length": 307,
      "index": 95,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeleteFileOptions",
      "library": "lsp",
      "description": "This module defines options for file deletion operations, specifically handling whether to ignore non-existent files and whether to delete recursively. It works with boolean options to configure deletion behavior. Concrete use cases include specifying parameters for file system operations in language server protocols where conditional deletion is required.",
      "description_length": 358,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WatchKind",
      "library": "lsp",
      "description": "This module defines a type `t` representing file system event kinds in the context of the Language Server Protocol. It includes variants for file creation, modification, deletion, and an `Other` case for unrecognized events. The module provides functions to convert between this type and JSON, specifically for handling watch events in LSP communication.",
      "description_length": 354,
      "index": 97,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TypeHierarchyOptions",
      "library": "lsp",
      "description": "This module defines options for type hierarchy operations in the LSP protocol, specifically supporting work done progress tracking. It works with boolean values wrapped in an option type to represent optional configuration parameters. Concrete use cases include enabling or disabling progress reporting during type hierarchy resolution in an LSP server.",
      "description_length": 353,
      "index": 98,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ConfigurationItem",
      "library": "lsp",
      "description": "This module defines a configuration item with optional scope URI and section fields, used to identify settings in a specific document or global context. It provides functions to create instances and serialize/deserialize them using Yojson. A typical use case is retrieving or updating editor settings per document in an LSP server.",
      "description_length": 331,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureInformation",
      "library": "lsp",
      "description": "This module defines a type `t` representing signature information in a language server protocol, including fields for the active parameter index, documentation, label, and parameters. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to convey function signature details during code completion or hover interactions in an LSP server.",
      "description_length": 379,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ShowDocumentClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure for representing client capabilities related to showing documents in an LSP (Language Server Protocol) context. It includes functions to construct the structure, convert it to and from JSON format using Yojson. A concrete use case is enabling a language server to determine whether a client supports displaying documents through capability negotiation during initialization.",
      "description_length": 411,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InsertTextMode",
      "library": "lsp",
      "description": "This module defines an enumerated type with two values, `AsIs` and `AdjustIndentation`, representing modes for handling insert text operations. It provides functions to convert this type to and from Yojson representations for serialization and deserialization. This module is used to specify how inserted text should be adjusted in the context of language server protocol operations.",
      "description_length": 383,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentContentChangeEvent",
      "library": "lsp",
      "description": "This module defines a type `t` representing changes to a text document, including optional range and length information along with the new text. It provides functions to construct instances, and serialize/deserialize to and from JSON. It is used to communicate text modifications in language server protocol requests, such as when a client updates a file buffer.",
      "description_length": 362,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RelatedUnchangedDocumentDiagnosticReport",
      "library": "lsp",
      "description": "This module defines a type for diagnostic reports related to unchanged documents in the context of the Language Server Protocol. It includes operations to construct such reports, along with serialization and deserialization functions for JSON communication. The module is used to convey diagnostic results for multiple documents without changes, typically in response to a diagnostic request.",
      "description_length": 392,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ColorPresentation",
      "library": "lsp",
      "description": "This module defines a type `t` representing color presentation options in the context of language server protocol interactions. It includes operations to construct instances with optional text edits and labels, along with serialization to and from JSON. It is used to provide alternative ways to present a color value, such as a formatted string with associated editing instructions.",
      "description_length": 383,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentFormattingOptions",
      "library": "lsp",
      "description": "This module defines options for document formatting in the context of the Language Server Protocol. It includes a single field indicating whether work done progress is supported during formatting. The module provides functions to create an options record, and to convert to and from JSON representations, specifically for use in LSP communication.",
      "description_length": 347,
      "index": 106,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.RegistrationParams",
      "library": "lsp",
      "description": "This module defines a data structure for a list of registration requests and provides functions to create and serialize this structure. It works with lists of `Registration.t` values, enabling batch registration operations in LSP clients. Concrete use cases include sending multiple text document synchronization registrations in a single request.",
      "description_length": 347,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.PublishDiagnosticsClientCapabilities",
      "library": "lsp",
      "description": "This module defines data structures and serialization functions for client capabilities related to diagnostic publishing in the Language Server Protocol. It includes a `tagSupport` type for specifying supported diagnostic tags and a `t` type that represents optional diagnostic features like code descriptions, related information, and version support. These capabilities are used to configure how diagnostic notifications are handled between a language server and client.",
      "description_length": 472,
      "index": 108,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentSymbolParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in document symbol requests, including optional progress tokens and a text document identifier. It provides functions to create instances of this structure and to serialize or deserialize them using Yojson. Concrete use cases include handling symbol navigation in a language server, where document symbols are requested and processed incrementally.",
      "description_length": 405,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentRangeFormattingOptions",
      "library": "lsp",
      "description": "This module defines options for document range formatting in the context of the Language Server Protocol (LSP). It includes boolean flags to indicate support for formatting ranges and progress reporting during formatting operations. The module provides functions to construct, serialize, and deserialize these options using JSON.",
      "description_length": 329,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a data structure for configuring inline value registration options in the context of the Language Server Protocol. It includes fields for specifying a document selector, an identifier, and whether work done progress is supported. The module provides functions to create instances, and to convert instances to and from JSON format using Yojson.",
      "description_length": 363,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.GlobPattern",
      "library": "lsp",
      "description": "This module defines a type `t` that represents either a glob pattern or a relative glob pattern, using the `Pattern` and `RelativePattern` constructors. It provides functions to convert between this type and JSON representations, using `t_of_yojson` for parsing and `yojson_of_t` for serialization. These operations are useful when handling file matching and filtering logic in language server protocol implementations, particularly for processing workspace and file events.",
      "description_length": 474,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MonikerClientCapabilities",
      "library": "lsp",
      "description": "This module defines client capabilities related to moniker support in the Language Server Protocol. It includes a single capability, `dynamicRegistration`, indicating whether the client can dynamically register for moniker-related events. The module provides functions to construct, serialize, and deserialize these capabilities using Yojson.",
      "description_length": 342,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentDiagnosticReportPartialResult",
      "library": "lsp",
      "description": "This module defines a type and conversion functions for handling partial diagnostic reports in the context of the Language Server Protocol (LSP). It works with document diagnostics associated with specific document URIs, supporting both full and unchanged diagnostic report variants. It is used to serialize and deserialize diagnostic data during communication between a language server and a client.",
      "description_length": 400,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticSeverity",
      "library": "lsp",
      "description": "This module defines a type `t` representing diagnostic severity levels in the context of language server protocol communications. It includes functions for converting between JSON representations and the enumerated type values. It is used to categorize diagnostics such as errors, warnings, and informational messages during code analysis.",
      "description_length": 339,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.VersionedNotebookDocumentIdentifier",
      "library": "lsp",
      "description": "This module defines a type `t` representing a versioned notebook document identifier, consisting of a document URI and an integer version. It provides functions to construct such identifiers, convert them to and from JSON format using the Yojson library. This module is used to track specific versions of notebook documents in the context of the Language Server Protocol.",
      "description_length": 371,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensDelta",
      "library": "lsp",
      "description": "This module represents a delta update for semantic tokens in the context of the Language Server Protocol. It provides operations to construct and serialize a delta containing a list of token edits and an optional result identifier. The module works with semantic token edit structures and JSON representations, enabling efficient transmission of incremental token changes during language processing tasks.",
      "description_length": 405,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FoldingRangeClientCapabilities",
      "library": "lsp",
      "description": "This module defines client capabilities for handling code folding ranges in a language server. It includes types to specify supported folding range kinds, whether collapsed text is supported, and server capabilities like dynamic registration and line folding. Functions allow creating and serializing these capability structures for use in LSP initialization and configuration.",
      "description_length": 377,
      "index": 118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SelectionRangeRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for registering selection range capabilities in a language server. It includes fields for specifying document selectors, registration IDs, and progress reporting. It is used to configure how selection ranges are handled during language server initialization and subsequent requests.",
      "description_length": 324,
      "index": 119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RegularExpressionsClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure for representing client capabilities related to regular expressions, specifically capturing the engine name and an optional version. It provides functions to construct instances, convert to and from JSON, and is used to declare supported regex features in language server protocol communications. Concrete use cases include configuring language server clients with specific regex engine requirements during initialization.",
      "description_length": 459,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentHighlightOptions",
      "library": "lsp",
      "description": "This module defines configuration options for document highlighting in the LSP (Language Server Protocol). It includes a single field `workDoneProgress` to indicate whether progress reporting is enabled for document highlight operations. The module provides functions to create and serialize these options, specifically for use in LSP server implementations.",
      "description_length": 358,
      "index": 121,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ChangeAnnotationIdentifier",
      "library": "lsp",
      "description": "This module defines a type `t` as a string alias for change annotation identifiers used in the Language Server Protocol. It provides serialization and deserialization functions to and from Yojson for use in JSON-RPC communication. This type is used specifically to track and manage text document change annotations in LSP server implementations.",
      "description_length": 345,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RelativePattern",
      "library": "lsp",
      "description": "This module defines a type `t` that pairs a unit value with a pattern, used for representing relative file patterns in a project. It provides functions to construct instances, convert to and from JSON using Yojson, and is typically used to specify relative paths in language server configurations. Concrete use cases include defining include/exclude patterns for file watchers or search operations within a workspace.",
      "description_length": 417,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ImplementationRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a type `t` for implementation registration options in the context of the Language Server Protocol (LSP). It includes fields for specifying a document selector, an identifier, and whether work done progress is supported. The module provides functions to create instances, and to convert to and from JSON representations, facilitating configuration and communication in LSP servers.",
      "description_length": 400,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeWorkspaceFoldersParams",
      "library": "lsp",
      "description": "This module represents parameters for workspace folder change events in the Language Server Protocol. It includes a single field for the change event and provides functions to construct instances and convert to and from JSON format. It is used to handle dynamic updates to workspace folders during LSP session initialization or runtime.",
      "description_length": 336,
      "index": 125,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FileOperationClientCapabilities",
      "library": "lsp",
      "description": "This module defines a type `t` representing client capabilities for file operations, including flags for dynamic registration and notifications about file creation, deletion, and renaming. It provides functions to construct instances with optional fields and to serialize/deserialize them using Yojson. This is used to configure and communicate file operation support in language server protocol clients.",
      "description_length": 404,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressParams",
      "library": "lsp",
      "description": "This module defines a type `t` that represents parameters for tracking work done progress in the Language Server Protocol, specifically containing an optional `workDoneToken`. It provides functions to create instances, convert to and from JSON using Yojson, and is used to associate operations with a progress token during client-server communication. Concrete use cases include reporting progress for long-running tasks like code indexing or build operations.",
      "description_length": 460,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeWatchedFilesClientCapabilities",
      "library": "lsp",
      "description": "This module defines a type `t` representing client capabilities for handling changes to watched files in a language server protocol. It includes fields for optional dynamic registration and support for relative patterns. The module provides functions to create instances, and serialize/deserialize them to and from JSON, specifically tailored for configuring file watching behavior in LSP clients.",
      "description_length": 397,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineCompletionItem",
      "library": "lsp",
      "description": "This module defines a type `t` representing inline completion items in the context of language server protocol, with fields for optional command, filter text, insert text (as a string or string value), and range. It provides functions to create instances, convert to and from JSON. It is used to generate inline code suggestions in editors supporting LSP, such as IDEs or text editors during autocompletion.",
      "description_length": 407,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentChangeEvent",
      "library": "lsp",
      "description": "This module defines data structures and constructors for representing changes to notebook documents in the context of the Language Server Protocol (LSP). It includes types for tracking content changes, structural modifications (like cell additions or removals), and metadata updates, working with types such as `VersionedTextDocumentIdentifier`, `TextDocumentContentChangeEvent`, `NotebookCellArrayChange`, and JSON objects. It is used to encode and decode notebook change events during communication between a language server and a client, particularly when synchronizing notebook state in an editor environment.",
      "description_length": 613,
      "index": 130,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressOptions",
      "library": "lsp",
      "description": "This module defines a data structure for tracking work done progress in LSP (Language Server Protocol) operations. It includes functions to create and serialize the structure, which contains an optional boolean flag indicating whether progress should be reported. It is used to configure progress reporting in LSP server responses, such as during long-running requests like code indexing or build processes.",
      "description_length": 407,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticClientCapabilities",
      "library": "lsp",
      "description": "This module defines a type `t` representing client capabilities related to diagnostics in a language server protocol. It includes fields for dynamic registration, markup message support, and related document support, all optional boolean values. The module provides functions to construct a value of this type, and to convert it to and from JSON format using Yojson.",
      "description_length": 366,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MonikerParams",
      "library": "lsp",
      "description": "This module defines a data structure for representing moniker parameters in the context of the Language Server Protocol. It includes fields for tracking progress tokens, position within a document, and identifying the document itself. The module provides functions to construct instances, and serialize or deserialize them using JSON.",
      "description_length": 334,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceDiagnosticReportPartialResult",
      "library": "lsp",
      "description": "This module defines a type `t` that represents a partial result of workspace diagnostic reports, containing a list of workspace document diagnostic reports. It provides functions to create instances of this type, and to convert to and from JSON using the Yojson library. This module is used to handle incremental diagnostic updates in a language server protocol implementation, where diagnostics for multiple documents are reported in batches.",
      "description_length": 443,
      "index": 134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentRangeFormattingParams",
      "library": "lsp",
      "description": "This module defines a data structure for specifying parameters used in document range formatting requests. It includes fields for formatting options, a text document identifier, a range within the document, and an optional progress token. It supports operations for creating instances, and converting to and from JSON representations, specifically for use in language server protocol interactions.",
      "description_length": 397,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureHelpRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for signature help features in a language server, supporting dynamic registration based on document selectors, trigger characters, and retrigger behavior. It works with document selectors, string lists, and boolean flags to customize when and how signature help is activated. Concrete use cases include setting up signature assistance for function calls in specific programming languages or enabling context-sensitive parameter hints.",
      "description_length": 476,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeDefinitionClientCapabilities",
      "library": "lsp",
      "description": "This module defines client capabilities for type definition features in a language server. It includes fields to indicate support for dynamic registration and link navigation. The module provides functions to construct capabilities, and serialize/deserialize them to and from JSON.",
      "description_length": 281,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentHighlight",
      "library": "lsp",
      "description": "This module defines a data structure for representing document highlights in a text editor, including a kind and a range. It provides functions to create instances, convert to and from JSON, and specify the location and type of highlight. Use this module to manage and serialize document highlight information for features like symbol occurrences or references.",
      "description_length": 361,
      "index": 138,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.PrepareSupportDefaultBehavior",
      "library": "lsp",
      "description": "This module defines a single enumerated type `t` with one constructor `Identifier`, representing a default behavior option for prepare support in the LSP (Language Server Protocol). It includes functions to convert values between this type and Yojson representations, enabling serialization and deserialization for use in JSON-based communication. This is specifically used when handling LSP requests that require specifying how prepare support should behave by default.",
      "description_length": 470,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureHelpClientCapabilities",
      "library": "lsp",
      "description": "This module defines data structures and functions for specifying client capabilities related to signature help in a language server protocol. It includes types for parameter and signature information, supporting features like label offsets, documentation formats, and active parameter handling, along with serialization to and from JSON. It is used to configure how a client interacts with the server's signature help functionality during code editing.",
      "description_length": 452,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextEdit",
      "library": "lsp",
      "description": "Represents a text edit operation with a range and replacement string. Converts between JSON and the edit structure for serialization. Used to apply precise source code modifications in editors supporting the Language Server Protocol.",
      "description_length": 233,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentSymbolOptions",
      "library": "lsp",
      "description": "This module defines configuration options for document symbol requests in the LSP protocol. It includes fields to specify an optional label and whether work done progress is supported. These options are used to customize behavior when requesting symbol information from an LSP server.",
      "description_length": 284,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeleteFile",
      "library": "lsp",
      "description": "This module defines a type `t` representing parameters for a file deletion operation in the context of the Language Server Protocol (LSP). It includes functions to construct a deletion request with optional annotation and deletion options, and to serialize/deserialize the structure to and from JSON. It is used to communicate file deletion intentions between a language client and server, ensuring proper tracking and handling of deletions during workspace edits.",
      "description_length": 464,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileOperationOptions",
      "library": "lsp",
      "description": "This module defines a record type for configuring file operation notifications in the Language Server Protocol, with optional fields for handling file creation, deletion, and renaming events. It provides functions to construct instances with specific event handlers and to serialize or deserialize these configurations using JSON. Concrete use cases include setting up server-side responses to file system changes during development, such as triggering reanalysis or updating symbol indexes.",
      "description_length": 491,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeLensRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for code lens registration in the Language Server Protocol. It includes fields to specify document selectors, enable resolution providers, and support work done progress. These options are used to customize how code lenses are registered and processed by an LSP server.",
      "description_length": 311,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionItemKind",
      "library": "lsp",
      "description": "This module defines an enumeration type representing kinds of completion items in a language server protocol, such as `Function`, `Variable`, or `Class`. It includes functions to convert between the enumerated type and Yojson representations for serialization and parsing. This module is used to specify the type of code completions returned by a language server during autocompletion requests.",
      "description_length": 394,
      "index": 146,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FileSystemWatcher",
      "library": "lsp",
      "description": "This module defines a file system watcher configuration with a glob pattern and an optional watch kind. It provides functions to create instances and serialize or deserialize them using Yojson. Concrete use cases include setting up file monitoring in language servers, such as tracking changes to specific file types or directories.",
      "description_length": 332,
      "index": 147,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DidChangeConfigurationRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a type `t` that represents options for registering configuration change notifications, specifically allowing an optional configuration section to be specified either as a string or a list of strings. It provides functions to construct such registration options, and to convert them to and from JSON format using the Yojson library. This is used in the context of language server protocol implementations to manage dynamic configuration updates.",
      "description_length": 464,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Cli.Arg",
      "library": "lsp",
      "description": "This module parses standard LSP server command line arguments into a structured format using `Stdlib.Arg`. It provides access to the communication channel and client process ID, enabling servers to retrieve essential runtime configuration from CLI inputs. Use it to initialize LSP servers with command line parameters like stdin/stdout or socket connections.",
      "description_length": 358,
      "index": 149,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlayHintLabelPart",
      "library": "lsp",
      "description": "This module defines a data structure for representing parts of an inlay hint label in the context of language server protocol. It includes fields for an optional command, location, tooltip (as either a string or markup content), and a required string value. The module provides functions to construct instances, and to convert to and from JSON format.",
      "description_length": 351,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeDefinitionOptions",
      "library": "lsp",
      "description": "This module defines options for type definition requests, specifically supporting the `workDoneProgress` flag to indicate client support for progress reporting. It works with JSON values to enable serialization and deserialization of these options. It is used during language server initialization to configure how type definition requests are handled.",
      "description_length": 352,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceDiagnosticParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in workspace diagnostic requests, including optional identifiers, progress tokens, and a list of previous result IDs. It provides functions to construct instances, convert to and from JSON format. It is used to manage diagnostic data in a workspace, such as tracking progress and referencing prior diagnostic results.",
      "description_length": 374,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileOperationRegistrationOptions",
      "library": "lsp",
      "description": "This module defines options for registering file operations, primarily working with a list of file operation filters. It provides functions to create these options and convert them to and from JSON format using Yojson. Concrete use cases include configuring file system watchers or handling file rename events in an LSP server.",
      "description_length": 327,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentHighlightKind",
      "library": "lsp",
      "description": "This module defines a type `t` representing the kind of document highlight in a code editor, with variants for text, read, and write usages. It includes functions to convert between JSON values and the `t` type. This is used to communicate semantic highlighting information in language server protocol implementations.",
      "description_length": 318,
      "index": 154,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FullDocumentDiagnosticReport",
      "library": "lsp",
      "description": "This module defines a type for reporting diagnostics covering an entire document, including a list of diagnostic items and an optional result identifier. It provides functions to construct such reports, convert them to and from JSON format using Yojson. It is used to communicate comprehensive diagnostic results, such as those generated by linters or compilers, for a full document in the Language Server Protocol.",
      "description_length": 415,
      "index": 155,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TypeHierarchySupertypesParams",
      "library": "lsp",
      "description": "This module defines parameters for requesting type hierarchy supertypes in a language server protocol. It includes a type hierarchy item and optional tokens for tracking partial results and work progress. The module provides functions to construct these parameters and serialize or deserialize them using Yojson.",
      "description_length": 312,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentRangesFormattingParams",
      "library": "lsp",
      "description": "This module defines a type for parameters used to format specific ranges within a text document, including formatting options, a list of ranges, and a text document identifier. It provides functions to construct these parameters and convert them to and from JSON format. It is used to request formatting operations on specified regions of a document in language server protocols.",
      "description_length": 379,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeclarationParams",
      "library": "lsp",
      "description": "This module defines a data structure for handling parameters related to symbol declarations in a text document. It includes fields for tracking progress tokens, specifying a position in a document, and identifying the document itself. The module provides functions to construct instances, and serialize or deserialize them using JSON.",
      "description_length": 334,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentFilter",
      "library": "lsp",
      "description": "This module defines a polymorphic type `t` that represents either a text document filter or a notebook cell text document filter. It provides serialization and deserialization functions to and from Yojson for these filter types. Use this module when working with language server protocol configurations that require filtering documents based on type or notebook context.",
      "description_length": 370,
      "index": 159,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ExecuteCommandClientCapabilities",
      "library": "lsp",
      "description": "This module defines capabilities for executing commands in an LSP client, specifically supporting dynamic registration of commands. It works with boolean values wrapped in options to indicate whether dynamic registration is enabled. Use this to configure command execution behavior in LSP clients based on JSON-RPC messages.",
      "description_length": 324,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyOptions",
      "library": "lsp",
      "description": "This module defines options for configuring call hierarchy functionality in a language server. It includes a flag to enable or disable progress reporting during work execution. The module primarily works with boolean options and serializes to and from JSON for communication with client tools. A concrete use case is configuring the behavior of call hierarchy requests in an LSP-compliant editor integration.",
      "description_length": 408,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentFormattingRegistrationOptions",
      "library": "lsp",
      "description": "This module defines options for registering document formatting capabilities in a language server. It includes a document selector to specify which documents to format and a flag to enable progress reporting. These options are used during server initialization to configure formatting support for specific file types or projects.",
      "description_length": 329,
      "index": 162,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentSymbol",
      "library": "lsp",
      "description": "This module defines a data structure representing symbols within a document, such as functions, variables, or classes, using a recursive type with optional children. It includes operations to construct symbol instances with properties like name, kind, range, and metadata such as deprecation and tags. This structure is used to build hierarchical symbol outlines in editors, enabling features like code navigation and symbol listing.",
      "description_length": 433,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHintKind",
      "library": "lsp",
      "description": "This module defines an enumerated type with two variants, `Type` and `Parameter`, representing categories of inlay hints in language server protocol. It includes functions to convert values between this type and Yojson.Safe.t for serialization and deserialization. This module is used to communicate hint types over JSON in LSP implementations.",
      "description_length": 344,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeTextDocumentParams",
      "library": "lsp",
      "description": "Handles text document change events by capturing content modifications and document identifiers. It works with lists of content change events and versioned document identifiers to represent updates. This module is used when implementing features like real-time document synchronization in language servers.",
      "description_length": 306,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentOnTypeFormattingOptions",
      "library": "lsp",
      "description": "This module defines options for document formatting triggered by specific characters. It includes a record type with a primary trigger character and an optional list of additional triggers, along with functions to create instances and convert to and from JSON. It is used to configure formatting behavior in language servers based on user input, such as auto-formatting when typing a semicolon or closing brace.",
      "description_length": 411,
      "index": 166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.Pattern",
      "library": "lsp",
      "description": "This module defines a type alias for string patterns used in language server protocol messages. It includes functions to convert these patterns to and from Yojson representations. These conversions are essential for serializing and deserializing pattern data during communication between the language server and client.",
      "description_length": 319,
      "index": 167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceDocumentDiagnosticReport",
      "library": "lsp",
      "description": "This module defines a variant type for representing either a full or unchanged document diagnostic report in a workspace. It includes functions to convert between the type and Yojson representations for serialization and parsing. It is used to handle diagnostic data from language servers, supporting efficient updates and comparisons of document states.",
      "description_length": 354,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeActionClientCapabilities",
      "library": "lsp",
      "description": "This module defines data structures and serialization functions for code action client capabilities in the context of the Language Server Protocol (LSP). It includes types for resolve support, code action kinds, and literal support, all used to specify client-side feature compatibility. These capabilities are utilized during LSP initialization to negotiate supported code action features between the client and server, such as dynamic registration, data support, and resolve property handling.",
      "description_length": 495,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidOpenTextDocumentParams",
      "library": "lsp",
      "description": "This module defines a type `t` representing parameters for a text document open event, containing a `textDocument` field of type `Lsp.Types.TextDocumentItem.t`. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to handle document open notifications in an LSP server, where a client signals that a text document has been opened.",
      "description_length": 373,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.StaticRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a data structure for static registration options in the context of language server protocol (LSP) communications. It includes functions to create a registration option with an optional identifier, and to convert the structure to and from JSON format using Yojson. A concrete use case is configuring and serializing LSP server capabilities during initialization.",
      "description_length": 381,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentColorOptions",
      "library": "lsp",
      "description": "This module defines configuration options for document color operations in the LSP protocol. It includes a single field `workDoneProgress` to indicate whether progress reporting is supported for color operations. The module provides functions to create instances, and serialize/deserialize them using Yojson. It is used to configure how document color requests are handled in an LSP server.",
      "description_length": 390,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Position",
      "library": "lsp",
      "description": "This module defines a type `t` representing a position in a text document with `line` and `character` fields. It includes functions to create a position, and to convert to and from Yojson for serialization. It is used to represent cursor locations or text ranges in language server protocol messages, such as during code navigation or diagnostics reporting.",
      "description_length": 357,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RenameFileOptions",
      "library": "lsp",
      "description": "This module defines options for renaming files, specifically handling behaviors for existing files through `ignoreIfExists` and `overwrite` flags. It works with JSON data via `Yojson.Safe.t` to support serialization and deserialization of rename options. It is used to configure file renaming operations in language server protocol implementations where precise handling of file existence is required.",
      "description_length": 401,
      "index": 174,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.Color",
      "library": "lsp",
      "description": "This module defines a color representation with red, green, blue, and alpha components, each as integers. It provides functions to construct a color from component values and to serialize and deserialize colors using Yojson. It is used to handle color data in JSON-based communication, such as in language server protocol extensions that support rich text formatting or theme configuration.",
      "description_length": 390,
      "index": 175,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SemanticTokenModifiers",
      "library": "lsp",
      "description": "This module defines a set of semantic token modifiers used to annotate program elements in a structured way. It includes operations for converting these modifiers to and from JSON format using the Yojson library. These modifiers are typically used in language server implementations to convey additional information about symbols, such as whether they are static, deprecated, or part of documentation.",
      "description_length": 401,
      "index": 176,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InsertReplaceEdit",
      "library": "lsp",
      "description": "This module defines a type for representing text edits that combine insertion and replacement operations within a document. It includes functions to construct such edits and serialize them to and from JSON. It is used to precisely describe changes to source code in language server protocol implementations.",
      "description_length": 307,
      "index": 177,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ShowMessageRequestParams",
      "library": "lsp",
      "description": "This module defines a data structure for representing parameters of a show message request, including a message string, message type, and optional list of actionable items. It provides functions to construct instances, and serialize/deserialize to and from JSON format. It is used to send user-facing messages with optional actions in a language server protocol session.",
      "description_length": 370,
      "index": 178,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CreateFile",
      "library": "lsp",
      "description": "This module defines a type `t` representing a file creation operation in the context of the Language Server Protocol (LSP). It includes fields for an optional annotation identifier, creation options, and a document URI. The module provides functions to construct a `t` value, and to serialize and deserialize it using Yojson for use in LSP communication.",
      "description_length": 354,
      "index": 179,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.LogMessageParams",
      "library": "lsp",
      "description": "This module defines a data structure for logging messages with a severity type and a message string. It provides functions to construct instances, convert to and from JSON format. It is used to serialize and deserialize log messages for transmission over a language server protocol connection.",
      "description_length": 293,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceSymbolRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for workspace symbol registration in the context of the Language Server Protocol (LSP). It includes fields to enable symbol resolution and progress reporting during workspace symbol requests. It is used to customize how a language server handles symbol queries from clients, specifically controlling optional features like lazy resolution and progress tracking.",
      "description_length": 403,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Private.Substring",
      "library": "lsp",
      "description": "This module provides substring manipulation with slicing, concatenation, and cursor tracking, ideal for text editing and parsing tasks. It includes UTF-8 decoding via the `Uutf` submodule, which creates decoders from substrings for processing Unicode text, such as in LSP message parsing. The `Map` submodule offers ordered key-value maps with substring keys, supporting insertion, lookup, and ordered traversal for managing sorted associations. Together, these components enable efficient text handling, Unicode processing, and structured data management in applications like editors and parsers.",
      "description_length": 597,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentSymbolRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for registering document symbol capabilities in a language server. It includes fields for specifying which documents to handle, an optional label for the capability, and whether to support progress reporting. Use this module when setting up document symbol features in a language server implementation.",
      "description_length": 344,
      "index": 183,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.LinkedEditingRangeOptions",
      "library": "lsp",
      "description": "This module defines configuration options for linked editing range features in a language server, specifically supporting the `workDoneProgress` flag to enable progress reporting. It works with boolean values wrapped in an option type to represent optional configuration parameters. Concrete use cases include customizing server behavior during linked editing operations to track or suppress progress notifications.",
      "description_length": 415,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.LinkedEditingRanges",
      "library": "lsp",
      "description": "This module defines a data structure for representing linked editing ranges in a text document, including a list of ranges and an optional word pattern. It provides functions to construct instances, serialize to JSON, and deserialize from JSON. Concrete use cases include synchronizing edits across multiple locations in an editor, such as renaming variables or updating repeated text segments.",
      "description_length": 394,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RenameOptions",
      "library": "lsp",
      "description": "This module defines a data structure for rename options with two optional boolean fields: `prepareProvider` and `workDoneProgress`. It includes functions to create instances and convert to and from JSON format using Yojson. This module is used to configure rename operations in an LSP (Language Server Protocol) server, specifying whether to support prepare requests and progress reporting during renaming.",
      "description_length": 406,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Extension.DebugEcho",
      "library": "lsp",
      "description": "This module processes debug echo messages and responses in the language server protocol, enabling transmission of diagnostic and logging data between servers and clients. It operates on `t` records with `message` strings, using `Yojson.Safe.t` for JSON serialization and parsing. You can encode a message like `{ \"message\": \"debug info\" }` into a JSON value or decode a received JSON object back into a message record.",
      "description_length": 418,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeConfigurationParams",
      "library": "lsp",
      "description": "This module defines a type `t` that represents parameters for a configuration change notification, containing a `settings` field of type `Lsp.Import.Json.t`. It provides functions to construct a value of this type, convert it to and from JSON format using Yojson. This is used to handle dynamic configuration updates in a language server, where the new settings are passed as JSON data.",
      "description_length": 386,
      "index": 188,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CodeActionResult",
      "library": "lsp",
      "description": "This module represents a list of either commands or code actions, used to return possible actions from a code analysis request. It includes functions to convert the type to and from JSON format, enabling serialization for communication between the language server and client. Concrete use cases include returning quick fixes or refactorings in response to a code action request in an LSP-based editor integration.",
      "description_length": 413,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.BaseSymbolInformation",
      "library": "lsp",
      "description": "This module defines a record type for symbol information with optional container name, symbol kind, name, and tags. It provides functions to create instances, convert to and from JSON using Yojson. It is used to represent symbols like functions or variables in code, including metadata such as their kind and deprecation status via tags.",
      "description_length": 337,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SymbolKind",
      "library": "lsp",
      "description": "This module defines an enumeration type representing different kinds of symbols in a programming language, such as `Class`, `Function`, `Variable`, and `Enum`. It includes functions to convert between the symbol kind type and Yojson values for serialization and deserialization. This module is used to classify and transmit symbol information in language server protocol messages, such as during symbol indexing or code navigation requests.",
      "description_length": 440,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.StringValue",
      "library": "lsp",
      "description": "This module defines a wrapper type for string values with functions to create instances and serialize to and from JSON using Yojson. It works with the `Yojson.Safe.t` type for JSON representation and the `t` record type containing a single `string` field. Concrete use cases include handling string-based values in LSP (Language Server Protocol) messages where structured JSON serialization is required.",
      "description_length": 403,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentDiagnosticParams",
      "library": "lsp",
      "description": "This module defines a type and operations for parameters used in document diagnostic requests. It includes fields for tracking identifiers, progress tokens, and references to previous results, along with a required text document identifier. The module supports creation with optional parameters and conversion to and from JSON format.",
      "description_length": 334,
      "index": 193,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentLinkParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in document link requests, including tokens for progress reporting and a text document identifier. It provides functions to construct instances, convert to and from JSON format. Used to handle document link operations in language server protocol implementations.",
      "description_length": 319,
      "index": 194,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CompletionItemLabelDetails",
      "library": "lsp",
      "description": "This module defines a type `t` with optional `description` and `detail` string fields, representing additional information for completion items in a language server protocol. It provides functions to construct values of this type and to serialize and deserialize them using Yojson. It is used to enrich code completion suggestions with contextual metadata in LSP implementations.",
      "description_length": 379,
      "index": 195,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InitializeResult",
      "library": "lsp",
      "description": "This module defines data structures and serialization functions for representing the result of an LSP server initialization. It includes types for server capabilities and optional server metadata like name and version, along with functions to construct and serialize these types to and from JSON. It is used to send initialization responses in LSP communication, providing structured information about the server's capabilities and identity.",
      "description_length": 441,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentSaveReason",
      "library": "lsp",
      "description": "This module defines the possible reasons a text document was saved, including manual save, automatic save after a delay, and save on focus loss. It provides serialization and deserialization functions to convert between these reasons and JSON representations. This is used to communicate save events and triggers in language server protocol interactions.",
      "description_length": 354,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileEvent",
      "library": "lsp",
      "description": "This module defines a file event structure with a change type and URI, offering functions to create instances and convert to and from JSON. It works with file change types and document URIs, specifically handling events like file creation, modification, or deletion. Concrete use cases include tracking changes to files in an editor or synchronizing file system events in a language server.",
      "description_length": 390,
      "index": 198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyClientCapabilities",
      "library": "lsp",
      "description": "This module defines a type `t` representing client capabilities for call hierarchy in the Language Server Protocol. It includes functions to create a capability instance with optional dynamic registration support, and to serialize or deserialize instances using Yojson. It is used to configure whether a client can dynamically register for call hierarchy requests.",
      "description_length": 364,
      "index": 199,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Import.Result",
      "library": "lsp",
      "description": "This module provides tools for working with result values, which represent either success (`Ok`) or failure (`Error`). It supports operations like mapping, error handling, value extraction, and conversion to types like options and lists, enabling robust error handling in tasks like parsing and input validation. The included `(let+)` operator allows chaining result-returning operations, transforming successful values while preserving errors across steps. For example, it can sequence file reads or network requests, handling failures at any stage gracefully.",
      "description_length": 561,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ColorInformation",
      "library": "lsp",
      "description": "This module represents color information in a text document, capturing both the color value and its location range. It provides functions to construct color information instances, along with serialization and deserialization to and from JSON format. It is used to convey details about colors, such as those found in CSS or other styling languages, within language server protocol communications.",
      "description_length": 395,
      "index": 201,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Snippet.Var",
      "library": "lsp",
      "description": "This module defines a set of variables representing text document and environment properties, such as current line, word, and file information. It supports operations for expanding these variables into their corresponding values within text snippets. Concrete use cases include dynamic placeholder replacement in code templates and editor integrations for autocompletion and scaffolding.",
      "description_length": 387,
      "index": 202,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DeclarationOptions",
      "library": "lsp",
      "description": "This module defines a data structure for handling declaration-related options in the context of the Language Server Protocol (LSP). It includes a single field `workDoneProgress` to indicate whether progress reporting is supported for declaration operations. The module provides functions to create instances, and to serialize and deserialize them using Yojson for communication over LSP.",
      "description_length": 387,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CreateFileOptions",
      "library": "lsp",
      "description": "This module defines options for file creation operations, specifically handling flags to control behavior when the target file exists. It works with JSON data through serialization and deserialization functions, enabling configuration of file creation parameters in LSP (Language Server Protocol) requests. Concrete use cases include setting `ignoreIfExists` to skip errors when a file exists, and `overwrite` to control whether existing files should be replaced during creation.",
      "description_length": 479,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentColorRegistrationOptions",
      "library": "lsp",
      "description": "This module defines options for registering document color providers in the LSP protocol. It includes fields for specifying the document selector, registration ID, and whether work done progress is supported. These options are used when configuring server capabilities for color-related features like syntax highlighting or color pickers in editors.",
      "description_length": 349,
      "index": 205,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TextDocumentIdentifier",
      "library": "lsp",
      "description": "This module defines a type representing a text document identifier, consisting of a URI. It provides functions to create an identifier, convert it to and from JSON format. It is used to uniquely reference text documents in the context of language server protocol interactions.",
      "description_length": 276,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SelectedCompletionInfo",
      "library": "lsp",
      "description": "This module defines a data structure representing information about a selected completion item in the context of a language server protocol. It includes operations to create instances and convert to and from JSON format using Yojson. It is used to transmit details about code completions, such as the range of the completed text and the selected text itself, between a language server and a client.",
      "description_length": 398,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeActionParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in code action requests, including context, range, text document identifier, and optional progress tokens. It provides functions to construct instances, convert to and from JSON format. It is used to request code actions like quick fixes or refactorings in a specific document range.",
      "description_length": 340,
      "index": 208,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SignatureHelpParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used to request signature help in a text document. It includes fields for the cursor position, document identifier, optional context, and progress tracking token. The module provides functions to construct instances, convert to and from JSON, and is used specifically when handling signature help requests in language server protocols.",
      "description_length": 387,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure representing client capabilities related to workspace features in the Language Server Protocol. It includes boolean flags and nested capability structures for operations like applying edits, handling diagnostics, executing commands, and managing file changes. The module provides functions to construct, serialize, and deserialize these capabilities using optional fields for flexible configuration.",
      "description_length": 436,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ProgressToken",
      "library": "lsp",
      "description": "This module defines a polymorphic type `t` that represents progress tokens as either integers or strings. It includes functions to convert values between this type and Yojson.Safe.t for JSON serialization and deserialization. This is specifically used to handle progress reporting in the context of the Language Server Protocol (LSP) where tokens identify specific progress streams.",
      "description_length": 382,
      "index": 211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeHierarchyItem",
      "library": "lsp",
      "description": "This module defines a record type representing an item in a type hierarchy, with fields for metadata like name, kind, and location ranges. It provides functions to construct these records and serialize them to and from JSON. It is used to represent type hierarchy information in a language server, such as when navigating or analyzing code structure in an editor.",
      "description_length": 363,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MessageActionItem",
      "library": "lsp",
      "description": "This module defines a type `t` representing a message action item with a `title` string field. It provides functions to create a message action item, and to convert it to and from Yojson format. It is used to structure actionable messages in LSP (Language Server Protocol) communication, such as user prompts with selectable options.",
      "description_length": 333,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FoldingRangeKind",
      "library": "lsp",
      "description": "This module defines a variant type for categorizing different kinds of folding ranges in source code, such as comments, imports, and regions. It includes functions to convert between the variant type and Yojson representations. It is used to serialize and deserialize folding range kind data when communicating with language servers via the LSP protocol.",
      "description_length": 354,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RelatedFullDocumentDiagnosticReport",
      "library": "lsp",
      "description": "This module defines a type for reporting diagnostics related to a document, including a list of diagnostic items, optional related documents with their diagnostic reports, and an optional result ID. It provides functions to construct the type, convert it to and from JSON format using Yojson. It is used to structure diagnostic responses in language server protocol implementations where full or unchanged document diagnostics are reported alongside related files.",
      "description_length": 464,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ChangeAnnotation",
      "library": "lsp",
      "description": "This module defines a data structure for representing change annotations with optional description, label, and confirmation requirement. It provides functions to create instances and convert to and from JSON format. Used for tracking and applying source code modifications in language server protocols.",
      "description_length": 302,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.LinkedEditingRangeParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in linked editing range requests, including position, text document identifier, and an optional progress token. It provides functions to construct instances, and serialize/deserialize them using Yojson. It is used to support features like synchronized editing across multiple locations in a document.",
      "description_length": 357,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceEdit",
      "library": "lsp",
      "description": "This module defines a workspace edit structure that supports batched text document modifications, file creation, renaming, and deletion. It includes operations to construct workspace edits with optional change annotations, text edits per document, or document-level actions like create, rename, or delete. The module is used to represent complex multi-file edits in response to refactorings, code actions, or version control operations within an IDE.",
      "description_length": 450,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceFullDocumentDiagnosticReport",
      "library": "lsp",
      "description": "This module defines a type for representing full document diagnostic reports in a workspace, including diagnostics, document URI, version, and result ID. It provides functions to construct reports, and serialize/deserialize them using Yojson. It is used to communicate diagnostic results for specific documents in LSP (Language Server Protocol) implementations.",
      "description_length": 361,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyItem",
      "library": "lsp",
      "description": "This module defines a data structure representing an item in a call hierarchy, with fields for metadata like name, kind, and location ranges. It provides functions to construct instances and serialize to or from JSON. Useful for implementing code navigation features like \"Find All References\" or \"Call Hierarchy\" in language servers.",
      "description_length": 334,
      "index": 220,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SaveOptions",
      "library": "lsp",
      "description": "This module defines a data structure for save options in the context of language server protocol interactions. It includes a boolean flag to determine whether text content should be included when saving a document. The structure is used to configure document save behavior during LSP communication, such as in save requests sent from a language client.",
      "description_length": 352,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ApplyWorkspaceEditParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used to apply a workspace edit in an LSP (Language Server Protocol) context. It includes operations to create an instance with a required workspace edit and an optional label, and functions to serialize and deserialize the structure using Yojson. It is used when implementing LSP server responses that require applying edits to multiple files atomically.",
      "description_length": 406,
      "index": 222,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FoldingRangeRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for registering folding range capabilities in a language server. It includes fields for specifying which documents to apply the capability to, an optional registration ID, and whether to enable progress reporting. The module provides functions to construct these options and serialize/deserialize them to and from JSON.",
      "description_length": 361,
      "index": 223,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ProgressParams",
      "library": "lsp",
      "description": "This module handles progress reporting in the context of the Language Server Protocol (LSP). It provides functions to create progress parameters with a token and value, and to convert between JSON representations and typed values using Yojson. It is used to track and serialize incremental progress updates during long-running operations like code analysis or build processes.",
      "description_length": 376,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticTag",
      "library": "lsp",
      "description": "This module defines a type `t` representing diagnostic tags used in language server protocol messages, specifically for marking code as unnecessary or deprecated. It includes functions to convert between JSON values and the `t` type. These conversions are useful when processing diagnostics sent over the wire in a language server implementation.",
      "description_length": 346,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceSymbol",
      "library": "lsp",
      "description": "This module defines a workspace symbol type with fields for name, kind, location, container name, data, and tags. It provides functions to construct symbols, convert them to and from JSON, and specify their structure in the context of language server protocol operations. It is used to represent symbols across a workspace, such as functions or variables, with support for rich metadata like tags and location information.",
      "description_length": 422,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionContext",
      "library": "lsp",
      "description": "This module defines a data structure for representing the context in which a code completion request is triggered, including the optional character that initiated it and the kind of trigger. It provides functions to construct instances, and serialize or deserialize them using Yojson. It is used to convey completion context information in language server protocol implementations.",
      "description_length": 381,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokens",
      "library": "lsp",
      "description": "This module defines a data structure for representing semantic tokens in a text document, primarily used in language server implementations. It includes functions for creating and serializing semantic token data, which is essential for features like syntax highlighting and code analysis in editors. The module works directly with arrays of integers for token data and optional result identifiers for incremental updates.",
      "description_length": 421,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressReport",
      "library": "lsp",
      "description": "This module defines a data structure for reporting progress in a work-done notification, including optional fields for cancellation status, message, and percentage completion. It provides functions to create instances, and to convert to and from JSON format using Yojson. It is used to communicate progress updates in language server protocol interactions, such as during long-running operations like code indexing or compilation.",
      "description_length": 430,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for semantic token registration in a language server, supporting both full and delta synchronization modes. It works with document selectors, semantic token legends, and optional boolean flags to control token delivery behavior. Concrete use cases include setting up semantic highlighting in editors by specifying which documents to target and how tokens should be computed and updated.",
      "description_length": 428,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ShowMessageRequestClientCapabilities",
      "library": "lsp",
      "description": "This module defines data structures and serialization functions for handling client capabilities related to message request interactions in the Language Server Protocol. It includes types for `messageActionItem` and `t`, which represent optional client features and their encapsulation, respectively. The module supports JSON conversion using `Yojson.Safe.t` for both types, enabling seamless integration with LSP communication.",
      "description_length": 428,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensWorkspaceClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure representing client capabilities related to semantic tokens in a workspace, specifically supporting an optional refresh flag. It provides functions to create instances, serialize to JSON, and deserialize from JSON using Yojson. It is used to communicate client support for semantic token refreshing in language server protocol implementations.",
      "description_length": 380,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyOutgoingCall",
      "library": "lsp",
      "description": "This module defines a type `t` representing outgoing calls in a call hierarchy, containing a list of source ranges and a target call hierarchy item. It provides functions to construct instances, convert to and from JSON using Yojson. Used to serialize and deserialize call hierarchy relationships for tools like language servers.",
      "description_length": 329,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Private.String_zipper",
      "library": "lsp",
      "description": "This module provides a cursor-based editor for strings with support for insertion, navigation, and text transformation, integrating UTF-8/UTF-16 encoding handling and LSP position tracking. Its core zipper structure enables efficient traversal and modification of substring lists, maintaining positional counters for precise editing in document models or incremental parsers. You can move the cursor by lines or positions, apply text changes, and track absolute or relative offsets during edits. Submodules enhance list-based text processing with operations to update current elements and navigate structured content like token streams or document segments.",
      "description_length": 657,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensParams",
      "library": "lsp",
      "description": "This module defines a record type for parameters used in semantic token requests, including optional progress tokens and a text document identifier. It provides functions to construct instances and convert to and from JSON format. This supports features like syntax highlighting in editors by associating tokens with specific document positions during language server communication.",
      "description_length": 382,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileOperationFilter",
      "library": "lsp",
      "description": "This module defines a filter for file operations based on a pattern and an optional URI scheme. It includes functions to construct a filter, and to convert to and from JSON representations. It is used to specify which files a language server should monitor or process, such as tracking changes to files matching a glob pattern and scheme like \"file\" or \"untitled\".",
      "description_length": 364,
      "index": 236,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ExecuteCommandOptions",
      "library": "lsp",
      "description": "This module defines a data structure for specifying command execution options in the context of the Language Server Protocol. It includes fields for a list of command names and an optional flag indicating whether work done progress should be reported. The module provides functions to construct instances, and to convert to and from JSON format for serialization and deserialization.",
      "description_length": 383,
      "index": 237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MarkedString",
      "library": "lsp",
      "description": "This module represents a string with an optional associated programming language, commonly used to provide context-aware formatting or syntax highlighting in language server protocol communications. It includes functions to convert instances to and from JSON format, ensuring compatibility with LSP message serialization requirements. Typical use cases involve embedding source code snippets in responses like hover documentation or completion items where language-specific rendering is needed.",
      "description_length": 494,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidCloseTextDocumentParams",
      "library": "lsp",
      "description": "This module defines a data structure representing parameters for a text document close event, containing a `textDocument` field of type `Lsp.Types.TextDocumentIdentifier.t`. It provides functions to create instances of this structure, and to convert to and from JSON using the `Yojson.Safe.t` type. It is used to notify the language server when a text document has been closed by the client.",
      "description_length": 391,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ShowDocumentParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used to show a document in an editor, including options like focus behavior, selection range, and visibility. It supports serialization and deserialization to and from JSON using Yojson, enabling integration with LSP (Language Server Protocol) messages. It is used when handling document presentation requests in LSP servers or clients.",
      "description_length": 388,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHint",
      "library": "lsp",
      "description": "This module defines a type `t` representing inlay hints in the context of language server protocol, including fields like label, position, and optional text edits or tooltips. It provides functions to construct instances of this type and to serialize/deserialize them using Yojson. Concrete use cases include generating inline code annotations or type hints in an editor based on LSP.",
      "description_length": 384,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidSaveNotebookDocumentParams",
      "library": "lsp",
      "description": "This module defines a type and serialization functions for handling notebook document save events in the context of the Language Server Protocol. It works with the `NotebookDocumentIdentifier` type to represent the specific notebook that was saved. Use cases include tracking when a notebook document is saved and serializing or deserializing save events for communication between a language server and a client.",
      "description_length": 412,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentSelector",
      "library": "lsp",
      "description": "This module represents a list of document filters used to match specific documents in the Language Server Protocol. It provides functions to convert between JSON and the document selector type. It is used to determine which documents a language server should handle based on criteria like language, scheme, or pattern.",
      "description_length": 318,
      "index": 243,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.LogTraceParams",
      "library": "lsp",
      "description": "This module defines a data structure for log trace parameters, including a required message and an optional verbose description. It provides functions to construct instances, convert to and from JSON format using Yojson, and supports structured logging in LSP (Language Server Protocol) implementations. Use cases include capturing diagnostic logs with optional detailed output during language server operations.",
      "description_length": 412,
      "index": 244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a data structure for configuring call hierarchy registration in the Language Server Protocol. It includes fields for specifying document selectors, a registration ID, and whether work done progress is supported. The module provides functions to create instances and serialize/deserialize them to and from JSON.",
      "description_length": 330,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Location",
      "library": "lsp",
      "description": "This module defines a data structure representing a location in a text document, consisting of a range and a URI. It provides functions to construct locations, convert them to and from JSON format using Yojson. Concrete use cases include tracking positions in source files for features like go-to-definition or find-references in language server implementations.",
      "description_length": 362,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.OptionalVersionedTextDocumentIdentifier",
      "library": "lsp",
      "description": "This module defines a type for identifiers of text documents that may include a version number. It provides functions to create these identifiers, convert them to and from JSON format. It is used when referencing documents in language server protocol messages where optional versioning is required.",
      "description_length": 298,
      "index": 247,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.Moniker",
      "library": "lsp",
      "description": "This module defines a type `t` representing a moniker with fields for an identifier, kind, scheme, and uniqueness level. It provides functions to construct a moniker, convert it to and from JSON format using Yojson. This module is used to handle symbolic identifiers in the context of language server protocol operations, such as tracking symbols across different documents or projects.",
      "description_length": 386,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionItem",
      "library": "lsp",
      "description": "This module defines a completion item structure used to represent code completion suggestions in a language server protocol. It includes fields for labels, documentation, text edits, and metadata like kind and sorting, supporting precise control over completion behavior. Functions allow creating items with customizable properties and serializing them to and from JSON.",
      "description_length": 370,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressBegin",
      "library": "lsp",
      "description": "This module defines a data structure for representing the beginning of a work done progress notification in the context of the Language Server Protocol (LSP). It includes fields for whether the operation is cancellable, an optional message, a percentage indicator, and a required title. The module provides functions to create instances, and to convert to and from JSON format using Yojson.",
      "description_length": 390,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentLinkOptions",
      "library": "lsp",
      "description": "This module defines configuration options for document link features in a language server, specifically controlling whether link resolution is supported and if work progress notifications are enabled. It works with boolean values wrapped in options to represent optional settings. Concrete use cases include configuring the behavior of document link handling in a language server implementation based on client capabilities or user preferences.",
      "description_length": 444,
      "index": 251,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ShowMessageParams",
      "library": "lsp",
      "description": "This module defines a data structure for conveying messages with associated severity levels, typically used to display notifications in an editor or IDE. It includes functions to construct instances and serialize/deserialize them to and from JSON. The primary use case is to send user-facing messages, such as errors, warnings, or informational alerts, during language server communication.",
      "description_length": 390,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensDeltaParams",
      "library": "lsp",
      "description": "Handles parameters for requesting semantic token deltas in an LSP (Language Server Protocol) context. It includes operations to create and serialize/deserialize the parameters, which consist of optional progress tokens, a previous result ID, and a text document identifier. Used during incremental updates to semantic tokens to avoid reprocessing the entire document.",
      "description_length": 367,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Command",
      "library": "lsp",
      "description": "This module defines a record type for representing commands with a title, command identifier, and optional JSON arguments. It includes functions to construct command values, and to serialize and deserialize them using Yojson. It is used to encode editor commands that can be triggered by clients in the context of the Language Server Protocol.",
      "description_length": 343,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceEditClientCapabilities",
      "library": "lsp",
      "description": "This module defines data structures and functions for describing client capabilities related to workspace edits in the Language Server Protocol. It includes types for optional features like change annotations, document changes, failure handling, and resource operations, along with functions to construct and serialize these capabilities. It is used to communicate what editing and resource manipulation features a client supports during LSP initialization.",
      "description_length": 457,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SetTraceParams",
      "library": "lsp",
      "description": "This module defines a data structure for specifying trace parameters, primarily used in configuring logging or diagnostic tracing within a language server. It includes functions to create instances and convert to and from JSON format using Yojson. A typical use case involves setting trace levels when initializing or reconfiguring a language server's diagnostic output.",
      "description_length": 370,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.HoverRegistrationOptions",
      "library": "lsp",
      "description": "This module defines hover registration options for LSP (Language Server Protocol) by structuring configuration with an optional document selector and a work done progress flag. It provides functions to create instances and serialize/deserialize them using Yojson. It is used to configure how hover information is registered and processed in an LSP server.",
      "description_length": 355,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentDiagnosticReportKind",
      "library": "lsp",
      "description": "This module defines a type `t` with two variants, `Full` and `Unchanged`, representing the possible kinds of document diagnostic reports in the LSP (Language Server Protocol). It includes functions to convert values of this type to and from Yojson representations, enabling serialization and deserialization for use in JSON-based communication. This module is used when reporting diagnostic results to indicate whether a document's diagnostics have fully changed or remained unchanged.",
      "description_length": 485,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentFormattingClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure for representing client capabilities related to document formatting in the context of the Language Server Protocol (LSP). It includes functions to create instances with optional dynamic registration support, and to convert instances to and from JSON format using Yojson. It is used to configure and communicate formatting capabilities between a language client and server during LSP initialization.",
      "description_length": 435,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionOptions",
      "library": "lsp",
      "description": "This module defines data structures and functions for configuring code completion features in an editor. It includes types for completion options like trigger characters, commit characters, and whether to support detailed labels or resolve providers. These structures are used to serialize and deserialize configuration data for language server protocol (LSP) interactions.",
      "description_length": 373,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHintOptions",
      "library": "lsp",
      "description": "This module defines configuration options for inlay hints in a language server protocol implementation. It includes fields to enable a hint resolver and track work progress, both optional boolean values. The module provides functions to create instances, and serialize or deserialize them using Yojson for communication over the protocol.",
      "description_length": 338,
      "index": 261,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DefinitionClientCapabilities",
      "library": "lsp",
      "description": "This module defines client capabilities related to definition requests in the Language Server Protocol. It includes fields for dynamic registration and link support, both optional boolean values. The module provides functions to create instances, and to convert to and from JSON representations, specifically using the Yojson library.",
      "description_length": 334,
      "index": 262,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlineValueClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure for representing client capabilities related to inline value support in a language server. It includes functions to create instances, serialize to JSON, and deserialize from JSON. A concrete use case is configuring and exchanging inline value feature settings between a language server and client during protocol negotiation.",
      "description_length": 362,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineCompletionList",
      "library": "lsp",
      "description": "This module defines a structure for managing a list of inline completion items, primarily used in code editors to provide contextual suggestions. It supports creating a list from a collection of inline completion items and serializing or deserializing the list using Yojson. A typical use case involves handling editor requests for inline completions by packaging multiple suggestion items into a single response.",
      "description_length": 413,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentSyncOptions",
      "library": "lsp",
      "description": "This module defines serialization and deserialization functions for notebook document synchronization options using Yojson. It works with the unit type, representing empty or placeholder data during configuration parsing. Concrete use cases include converting notebook sync settings to and from JSON format for communication in language server protocols.",
      "description_length": 354,
      "index": 265,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.RenameParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used during symbol renaming in a language server. It includes fields for the new name, position, text document identifier, and an optional progress token. The module supports creating instances, and serializing or deserializing them using JSON.",
      "description_length": 296,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Private.Array_view",
      "library": "lsp",
      "description": "This module provides array slicing and manipulation operations without copying the underlying array, allowing efficient access to subarrays via indexing. It supports operations like creating views with specified start positions and lengths, element access and modification, iteration, folding, and copying to new arrays. Concrete use cases include efficient parsing of array-backed data structures, implementing sliding windows over arrays, and optimizing memory usage when working with large arrays.",
      "description_length": 500,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentClientCapabilities",
      "library": "lsp",
      "description": "This module defines a type `t` that includes notebook document synchronization capabilities. It provides functions to create instances of this type and convert them to and from JSON format using Yojson. It is used to specify client support for notebook document features in the context of the Language Server Protocol.",
      "description_length": 318,
      "index": 268,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CodeLensClientCapabilities",
      "library": "lsp",
      "description": "This module defines capabilities related to code lens functionality in a language server client. It includes a single field indicating whether dynamic registration of code lenses is supported. The module provides functions to construct, serialize, and deserialize these capabilities using JSON.",
      "description_length": 294,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueContext",
      "library": "lsp",
      "description": "This module defines a data structure representing the context in which inline values are evaluated during debugging. It includes functions to construct the context with a specific stack frame ID and source code range, and to serialize or deserialize the context using JSON. It is used to associate inline value evaluations with a precise location in the source code and a particular paused execution frame.",
      "description_length": 406,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FoldingRangeOptions",
      "library": "lsp",
      "description": "This module defines configuration options for folding range requests in a language server protocol implementation. It includes a single field `workDoneProgress` to indicate whether progress reporting is supported. The module provides functions to create instances, and serialize/deserialize them using Yojson for communication over the protocol.",
      "description_length": 345,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.LinkedEditingRangeRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for registering linked editing range features in a language server. It includes fields for specifying the document selector, registration ID, and whether work done progress is supported. These options are used to configure server capabilities when implementing linked editing range requests in a language server.",
      "description_length": 354,
      "index": 272,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DidChangeNotebookDocumentParams",
      "library": "lsp",
      "description": "This module represents parameters for a notebook document change event in the context of the Language Server Protocol. It includes a change event and a versioned notebook document identifier, enabling tracking of modifications to notebook documents. It supports serialization and deserialization to and from JSON, facilitating communication between the language server and client.",
      "description_length": 380,
      "index": 273,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DeclarationClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure for representing client capabilities related to declaration support in the Language Server Protocol. It includes fields for dynamic registration and link support, both optional boolean values. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 336,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentSyncClientCapabilities",
      "library": "lsp",
      "description": "This module defines capabilities for notebook document synchronization in an LSP client. It includes functions to create and serialize a capability structure with optional dynamic registration and execution summary support. It works directly with boolean options and Yojson for JSON serialization.",
      "description_length": 297,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ReferenceParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in handling reference requests within a language server protocol. It includes fields for context, position, text document identifier, and optional progress tokens, enabling precise tracking and response handling. It supports serialization and deserialization to and from JSON, facilitating communication between the client and server.",
      "description_length": 391,
      "index": 276,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TextDocumentPositionParams",
      "library": "lsp",
      "description": "This module defines a type for parameters specifying a text document and a position within it, used in language server protocol requests like hover or definition lookups. It includes functions to construct instances, and to convert to and from JSON format for communication. Concrete use cases include handling editor requests that require both a document identifier and a cursor position.",
      "description_length": 389,
      "index": 277,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.Locations",
      "library": "lsp",
      "description": "This module defines a type `t` that represents either a list of LSP locations or a list of location links, supporting precise navigation and symbol resolution in code editors. It includes functions to convert this type to and from Yojson for serialization and deserialization during LSP communication. This is used to handle \"go to definition\" or \"find references\" responses that return multiple locations or linked locations.",
      "description_length": 426,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure representing client capabilities for text document features in a language server protocol. It includes optional fields for specific capabilities like code actions, completion, hover, and document synchronization, each tied to their respective capability types. The module provides functions to construct the structure and serialize/deserialize it to and from JSON.",
      "description_length": 401,
      "index": 279,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookCellTextDocumentFilter",
      "library": "lsp",
      "description": "This module defines a filter for matching notebook cell text documents based on language and notebook criteria. It supports creating filters with an optional language string and a notebook identifier or filter, and includes serialization and deserialization to and from JSON. It is used to specify conditions under which a language server should handle specific notebook cells.",
      "description_length": 377,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentOnTypeFormattingRegistrationOptions",
      "library": "lsp",
      "description": "This module defines options for registering document-on-type formatting capabilities in a language server. It includes a document selector, the first trigger character, and optional additional trigger characters that initiate formatting. It works with document selectors and string-based triggers, primarily used when configuring language server responses to specific user input.",
      "description_length": 379,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MonikerRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for moniker registration in the Language Server Protocol. It includes a document selector to specify which documents to process and a flag to enable work done progress reporting. It is used to configure server capabilities for handling moniker-related requests in LSP implementations.",
      "description_length": 326,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionTriggerKind",
      "library": "lsp",
      "description": "This module defines a type `t` representing the different kinds of triggers for completion requests in a language server protocol. It includes three variants: `Invoked`, `TriggerCharacter`, and `TriggerForIncompleteCompletions`. The module provides functions to convert between this type and Yojson for serialization and deserialization, enabling use in JSON-based communication with language clients.",
      "description_length": 401,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.PreviousResultId",
      "library": "lsp",
      "description": "This module defines a data structure for tracking previous result identifiers associated with a document URI and a string value. It includes functions to construct instances, convert to and from JSON using Yojson. This is useful for maintaining state between successive language server requests tied to specific documents.",
      "description_length": 322,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeActionKind",
      "library": "lsp",
      "description": "This module defines a polymorphic variant type for representing different kinds of code actions in the context of the Language Server Protocol (LSP). It includes specific variants such as `QuickFix`, `Refactor`, and `SourceOrganizeImports`, along with serialization and deserialization functions to and from JSON using the Yojson library. It is used to communicate user-intent actions between an LSP client and server, such as triggering refactoring or organizing imports in a structured way.",
      "description_length": 492,
      "index": 285,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SelectionRangeClientCapabilities",
      "library": "lsp",
      "description": "This module defines capabilities for selection range support in a language server client. It includes a function to create a capability record with an optional dynamic registration flag, and functions to convert the record to and from JSON format. It is used to configure client-side selection range features in language server protocol implementations.",
      "description_length": 353,
      "index": 286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TextDocumentEdit",
      "library": "lsp",
      "description": "This module represents a single text document edit operation in the context of the Language Server Protocol. It provides functions to create and serialize text document edits, which include a list of text edits or annotated text edits along with an identifier for the target document. It is used to apply multiple changes to a specific version of a text document, typically during workspace edits or code refactoring operations.",
      "description_length": 428,
      "index": 287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceSymbolOptions",
      "library": "lsp",
      "description": "This module defines configuration options for workspace symbol handling in the LSP (Language Server Protocol). It includes boolean flags to enable symbol resolution and progress reporting during symbol queries. These options are used to customize symbol search behavior in language servers, directly influencing how symbol data is retrieved and processed.",
      "description_length": 355,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidSaveTextDocumentParams",
      "library": "lsp",
      "description": "This module defines a data structure representing parameters for a text document save event, including the saved text and document identifier. It provides functions to construct instances, convert to and from JSON format. It is used to handle document save notifications in language server protocol implementations.",
      "description_length": 315,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensLegend",
      "library": "lsp",
      "description": "This module defines a data structure for representing semantic token legends in a language server protocol implementation. It includes functions to create instances with specified token modifiers and types, and to serialize or deserialize these instances using Yojson. It is used to communicate syntax highlighting information between a language server and client.",
      "description_length": 364,
      "index": 290,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CodeLensOptions",
      "library": "lsp",
      "description": "This module defines configuration options for code lens features in the LSP protocol. It includes fields to enable a resolve provider and work done progress tracking, both optional boolean values. The module provides functions to construct these options, and serialize/deserialize them to and from JSON.",
      "description_length": 303,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueVariableLookup",
      "library": "lsp",
      "description": "This module defines a type `t` representing inline value variable lookup settings, including case sensitivity, a range, and an optional variable name. It provides functions to create instances, and serialize/deserialize them using Yojson. It is used to configure how variable values are resolved within a specific text range during inline value computation in a language server.",
      "description_length": 378,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RenameFile",
      "library": "lsp",
      "description": "This module defines a data structure representing a file rename operation, capturing the old and new URIs, optional annotation identifier, and rename options. It provides functions to construct instances, convert to and from JSON using Yojson, and supports precise file renaming in language server contexts. Concrete use cases include handling rename requests in IDEs, ensuring accurate file reference updates across projects.",
      "description_length": 426,
      "index": 293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureHelp",
      "library": "lsp",
      "description": "This module defines a data structure for representing signature help information in a language server protocol, including active parameter and signature indices along with a list of signature details. It provides functions to construct instances of this structure and to serialize/deserialize them using Yojson. Concrete use cases include supporting IDE features like displaying function parameter hints during code editing.",
      "description_length": 424,
      "index": 294,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WillSaveTextDocumentParams",
      "library": "lsp",
      "description": "This module defines a data structure for representing parameters sent when a text document is about to be saved, including the save reason and document identifier. It provides functions to construct instances, and to convert to and from JSON format using Yojson. This is used in LSP servers to handle the `textDocument/willSave` notification, allowing clients to react before a document is saved.",
      "description_length": 396,
      "index": 295,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ShowDocumentResult",
      "library": "lsp",
      "description": "This module defines a type `t` representing the result of a document display operation, with a single boolean field indicating success. It includes functions to create instances, convert to and from JSON using Yojson. Used to signal whether a document was successfully shown in an LSP (Language Server Protocol) implementation.",
      "description_length": 327,
      "index": 296,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FileDelete",
      "library": "lsp",
      "description": "This module defines a type `t` representing a file deletion operation with a URI. It includes functions to create a deletion record, and to convert to and from JSON format. It is used to handle file deletion events in the context of the Language Server Protocol (LSP).",
      "description_length": 268,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MarkupContent",
      "library": "lsp",
      "description": "This module defines a structured format for representing markup content with a specified kind and string value. It includes functions to serialize and deserialize instances to and from JSON, enabling seamless integration with JSON-based APIs. A typical use case involves encoding documentation or rich text responses in a language server protocol where both plain text and markdown formats are required.",
      "description_length": 403,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceFoldersChangeEvent",
      "library": "lsp",
      "description": "This module represents changes to workspace folders in the Language Server Protocol, tracking added and removed folders. It provides functions to construct events, serialize, and deserialize them using JSON. It is used to notify the language server when workspace folders change during a session.",
      "description_length": 296,
      "index": 299,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TextDocumentSyncOptions",
      "library": "lsp",
      "description": "This module defines configuration options for text document synchronization in an LSP server. It includes fields to specify when and how documents are synchronized, such as on change, save, or close events, and supports optional settings like save behavior and pre-save hooks. It is used to configure document sync behavior in LSP initialization and serialize to/from JSON for transport.",
      "description_length": 387,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InitializeError",
      "library": "lsp",
      "description": "This module defines a type `t` representing an initialize error in the context of the Language Server Protocol (LSP), specifically indicating whether the client should retry the initialization. It includes functions to create an error value, and to convert between JSON and the `t` type using Yojson. Concrete use cases include handling failed LSP initialization responses where a retry flag needs to be communicated between client and server.",
      "description_length": 443,
      "index": 301,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TypeDefinitionRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for type definition registration in a language server, including document scope, registration ID, and progress reporting. It supports serialization to and from JSON for communication with client tools. Used to configure type definition capabilities in LSP server initialization.",
      "description_length": 320,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensPartialResult",
      "library": "lsp",
      "description": "This module defines a data structure for representing partial results of semantic token requests in the context of language server protocol (LSP) communication. It includes functions for creating instances, and for converting to and from JSON format using Yojson. The primary use case is to efficiently encode and decode semantic token data during LSP interactions.",
      "description_length": 365,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InitializeParams",
      "library": "lsp",
      "description": "This module defines data structures and functions for handling initialization parameters in an LSP (Language Server Protocol) server. It includes types for client information, workspace settings, and capabilities, along with functions to construct and serialize these structures. It is used to configure the initial handshake between an LSP client and server, capturing details like client name, version, root directory, and supported features.",
      "description_length": 444,
      "index": 304,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Cli.Channel",
      "library": "lsp",
      "description": "This module defines the communication channels an LSP server can use to accept client connections, supporting standard input/output, Unix domain sockets/Windows pipes, and TCP sockets. It provides constructors for specifying these channels and is used to configure the server's listening endpoint based on command-line arguments. Concrete use cases include setting up a server to listen on a specific TCP port, a named pipe, or standard IO for integration with editors or IDEs.",
      "description_length": 477,
      "index": 305,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.MessageType",
      "library": "lsp",
      "description": "This module defines a variant type representing different levels of log messages, including error, warning, info, log, and debug. It provides functions to convert between this type and Yojson.Safe.t for serialization and deserialization. This type is commonly used to structure logging and diagnostic output in LSP (Language Server Protocol) implementations.",
      "description_length": 358,
      "index": 306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentRegistrationOptions",
      "library": "lsp",
      "description": "This module defines options for registering text document capabilities, primarily using a document selector to specify which documents the capability applies to. It includes functions to create registration options and serialize or deserialize them using Yojson. A typical use case involves configuring language server features like hover or completion to target specific file types or projects.",
      "description_length": 395,
      "index": 307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressEnd",
      "library": "lsp",
      "description": "This module defines a type `t` representing the end of a work done progress notification in the LSP (Language Server Protocol), containing an optional message. It provides functions to create instances, and to convert to and from JSON using the Yojson library. This is used to signal the completion of a long-running operation, such as indexing a project, with an optional final status message.",
      "description_length": 394,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ResourceOperation",
      "library": "lsp",
      "description": "This module defines a data structure for representing resource operations in the context of the Language Server Protocol (LSP). It includes fields for an optional annotation identifier and an operation kind, along with functions to construct instances and serialize to and from JSON using Yojson. It is used to track changes to resources, such as file modifications, during LSP sessions.",
      "description_length": 387,
      "index": 309,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SemanticTokensRangeParams",
      "library": "lsp",
      "description": "This module defines a data structure for specifying parameters used in a semantic tokens range request, including the document identifier, range, and optional progress tokens. It provides functions to construct instances and convert to and from JSON format. This is used to request semantic token information for a specific portion of a text document in a language server protocol context.",
      "description_length": 389,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokenTypes",
      "library": "lsp",
      "description": "This module defines a variant type representing semantic token types used in language server protocol for categorizing source code elements. It includes functions to convert between these token types and Yojson representations for serialization and deserialization. Concrete use cases include tagging identifiers in a source file with their semantic meaning, such as distinguishing variables from functions or types, and transmitting this information between a language server and client over JSON-RPC.",
      "description_length": 502,
      "index": 311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.NotebookCellArrayChange",
      "library": "lsp",
      "description": "This module represents changes to a notebook cell array, specifically tracking updated cells, the number of deleted cells, and the starting index of the change. It provides functions to construct such change records, and to serialize and deserialize them using Yojson. It is used to communicate incremental updates to notebook documents in an LSP server.",
      "description_length": 354,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentOnTypeFormattingClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure for representing client capabilities related to document formatting on type events in the context of the Language Server Protocol (LSP). It includes functions to construct the structure, serialize it to JSON, and deserialize it from JSON. A concrete use case is enabling or disabling dynamic registration of formatting capabilities in an LSP client implementation.",
      "description_length": 401,
      "index": 313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineCompletionClientCapabilities",
      "library": "lsp",
      "description": "This module defines capabilities for inline completion features in a language server client. It includes a boolean flag for dynamic registration support and functions to create, serialize, and deserialize capability instances. It is used to configure client-side behavior for inline code completions in language server protocol implementations.",
      "description_length": 344,
      "index": 314,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SelectionRangeParams",
      "library": "lsp",
      "description": "This module defines a type `t` for representing parameters used in a selection range request, including positions, a text document identifier, and optional progress tokens. It provides functions to construct instances of this type, along with serialization and deserialization to and from JSON using `Yojson`. This module is used to pass input data to selection range-related operations in a language server protocol implementation.",
      "description_length": 432,
      "index": 315,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ReferenceRegistrationOptions",
      "library": "lsp",
      "description": "This module defines options for registering reference-related capabilities in a language server, specifically supporting configuration through a document selector and work done progress flag. It works with LSP document selectors and boolean flags to control behavior. Use this to configure reference handling in an LSP server, such as enabling progress reporting or limiting scope to specific document types.",
      "description_length": 408,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeclarationLink",
      "library": "lsp",
      "description": "This module defines a type `t` as an alias for `Lsp.Types.LocationLink.t` and provides bidirectional conversion functions between this type and Yojson representations. It supports serialization and deserialization of location link data, which represents links from a declaration to its target locations in a codebase. Use this module when handling declaration links in LSP (Language Server Protocol) messages, such as when implementing \"Go to Declaration\" features in IDEs.",
      "description_length": 473,
      "index": 317,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentIdentifier",
      "library": "lsp",
      "description": "This module represents a notebook document identifier with a single field for the document URI. It provides functions to create an identifier, serialize it to JSON, and deserialize it from JSON. It is used to uniquely reference notebook documents in the context of the Language Server Protocol.",
      "description_length": 294,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FoldingRangeParams",
      "library": "lsp",
      "description": "Handles parameters for requesting folding ranges in a text document, including optional progress tokens. Works with text document identifiers and JSON serialization formats. Used to structure and parse LSP protocol messages for code folding operations.",
      "description_length": 252,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CreateFilesParams",
      "library": "lsp",
      "description": "This module defines a data structure for representing parameters used when creating files in an LSP (Language Server Protocol) context. It includes functions to construct instances, serialize to and from JSON format using Yojson. Concrete use cases include handling file creation requests in LSP servers, where clients specify a list of files to create.",
      "description_length": 353,
      "index": 320,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CodeDescription",
      "library": "lsp",
      "description": "This module defines a data structure representing a code description with a document URI. It includes functions to create instances, serialize to JSON, and deserialize from JSON. It is used to associate code references with their source locations in language server protocol implementations.",
      "description_length": 291,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeWatchedFilesParams",
      "library": "lsp",
      "description": "This module represents parameters for handling file change events in a language server protocol. It includes a list of file events and provides functions to construct instances and convert to and from JSON format. It is used to notify the server about changes to watched files, enabling real-time updates and synchronization.",
      "description_length": 325,
      "index": 322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentSyncRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a type `t` representing notebook document synchronization registration options for the Language Server Protocol. It includes functions to convert between JSON values and the `t` type. Use this module to register notebook document synchronization capabilities in an LSP server implementation.",
      "description_length": 311,
      "index": 323,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookCellKind",
      "library": "lsp",
      "description": "This module defines a type `t` representing the kind of a notebook cell, with variants `Markup` and `Code`. It provides functions to convert between this type and Yojson for serialization and deserialization. This module is used when handling notebook documents in the LSP protocol, specifically to distinguish between cells containing code and those containing markup.",
      "description_length": 369,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentLinkClientCapabilities",
      "library": "lsp",
      "description": "This module defines client capabilities related to document links in the context of the Language Server Protocol (LSP). It includes operations to construct capability records and serialize/deserialize them using Yojson. Concrete use cases include configuring and exchanging document link features between an LSP client and server.",
      "description_length": 330,
      "index": 325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Diagnostic",
      "library": "lsp",
      "description": "This module defines a diagnostic structure used to report issues in source code, including message, severity, and location via a range. It supports optional fields like code descriptions, related information, and source identifiers, enabling rich diagnostics with structured data. Concrete use cases include reporting syntax errors, type mismatches, and linting violations in language server implementations.",
      "description_length": 408,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InitializedParams_",
      "library": "lsp",
      "description": "This module defines data structures and serialization functions for handling LSP client initialization parameters. It includes types for client metadata, capabilities, and configuration options, along with helpers to construct and convert these types to and from JSON. It is used to process the `initialized` notification payload in an LSP server, capturing client identity, supported features, and runtime settings.",
      "description_length": 416,
      "index": 327,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceFoldersServerCapabilities",
      "library": "lsp",
      "description": "This module defines workspace folder capabilities for an LSP server, including whether the server supports workspace folders and how it handles change notifications. It works with boolean and string-based notification settings, serializing and deserializing configuration data to and from JSON. It is used to configure and communicate server capabilities during LSP initialization.",
      "description_length": 381,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FoldingRange",
      "library": "lsp",
      "description": "This module defines a data structure representing ranges of text that can be folded in an editor, such as code blocks or comments. It includes functions to create and serialize these ranges, supporting optional fields like start and end positions, collapsed text, and folding kind. It is used to communicate code folding information between a language server and a client like an IDE or text editor.",
      "description_length": 399,
      "index": 329,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FileCreate",
      "library": "lsp",
      "description": "This module defines a type `t` representing a file creation event with a `uri` field. It provides functions to construct a `t` value, convert it to and from JSON using `Yojson.Safe`. It is used to handle file creation notifications in the context of the Language Server Protocol (LSP), where the `uri` specifies the location of the newly created file.",
      "description_length": 351,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHintRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for registering inlay hint providers in a language server. It includes fields to specify the document selector, a unique identifier, whether the provider supports resolving hints, and whether it supports work done progress tracking. These options are used during server initialization to configure how inlay hints are provided and processed for specific documents.",
      "description_length": 406,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ServerCapabilities",
      "library": "lsp",
      "description": "This module defines data structures and functions for describing the capabilities of an LSP server. It includes types for workspace, text document, and diagnostic capabilities, along with a comprehensive `create` function to construct a `t` value representing the full set of server capabilities. Use cases include configuring an LSP server's feature set and serializing capabilities to or from JSON for communication with a client.",
      "description_length": 432,
      "index": 332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.PublishDiagnosticsParams",
      "library": "lsp",
      "description": "This module defines a type `t` for publishing diagnostics in an LSP (Language Server Protocol) context, including a list of diagnostics, a document URI, and an optional version. It provides functions to construct instances of this type, convert to and from JSON using Yojson. It is used to report errors, warnings, or hints for a specific document in an editor or IDE integration.",
      "description_length": 380,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensDeltaPartialResult",
      "library": "lsp",
      "description": "This module defines a data structure for representing partial results of semantic token delta edits, specifically used in the context of the Language Server Protocol (LSP). It includes operations to create instances of this structure and to serialize/deserialize them using Yojson. A concrete use case is efficiently transmitting incremental updates of semantic token information between a language server and a client.",
      "description_length": 419,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeActionOptions",
      "library": "lsp",
      "description": "This module defines configuration options for code actions in the LSP protocol, including supported kinds, resolution capability, and progress reporting. It provides functions to construct and serialize these options using `Lsp.Types.CodeActionKind`. Concrete use cases include setting up code action capabilities in an LSP server and parsing or generating JSON representations for communication with clients.",
      "description_length": 409,
      "index": 335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionClientCapabilities",
      "library": "lsp",
      "description": "This module defines data structures and creation functions for specifying client capabilities related to code completion in a language server protocol. It supports types like `completionItem`, `completionItemKind`, and `completionList`, which describe features such as snippet support, documentation format, and insert text modes. These types are used to configure how completion suggestions are presented and resolved in an LSP client.",
      "description_length": 436,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Int",
      "library": "lsp",
      "description": "The module handles integer values with functions for arithmetic, comparison, and conversion. It includes a submodule for bitwise operations and another for numeric type conversions. Main data types are integers and related conversion types, with operations like addition, subtraction, and bit shifting. Examples include adding two integers, converting an integer to a string, and performing bitwise AND on integer values.",
      "description_length": 421,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentLink",
      "library": "lsp",
      "description": "This module defines a type `t` representing document links in a text document, with fields for the link's range, optional target URI, optional tooltip, and optional JSON data. It provides functions to construct a link, convert to and from JSON using Yojson. Used to represent clickable links in a document, such as hyperlinks or cross-references, for integration with language servers or editors.",
      "description_length": 396,
      "index": 338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentItem",
      "library": "lsp",
      "description": "This module defines a record type representing a text document with fields for language identifier, content, document URI, and version. It provides functions to construct instances, and serialize or deserialize them using Yojson. It is used to manage document metadata and content in language server protocol implementations.",
      "description_length": 325,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.String",
      "library": "lsp",
      "description": "This module handles string manipulation and structured data mapping with string keys. It supports core operations like concatenation, substring extraction, and character traversal, while its child module manages associative collections with strings as keys, enabling efficient insertion, lookup, and transformation of key-value pairs. You can use it to parse configuration data, build dynamic string content, or process hierarchical structures like JSON objects. Advanced features include merging maps, filtering by key or value, and converting between mappings and ordered sequences.",
      "description_length": 584,
      "index": 340,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentDiagnosticReport",
      "library": "lsp",
      "description": "This module defines a type `t` that represents either a full or unchanged document diagnostic report, using variants that wrap specific diagnostic report types. It provides functions to convert between this type and Yojson for serialization and deserialization. It is used to handle diagnostic data in the context of language server protocol communications, specifically for reporting diagnostics in a structured and version-aware manner.",
      "description_length": 438,
      "index": 341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceFolder",
      "library": "lsp",
      "description": "This module defines a workspace folder structure with a name and a document URI, providing functions to create instances and convert to and from JSON. It works with string names and document URIs, using the Yojson library for serialization. Concrete use cases include managing workspace folder data in an LSP (Language Server Protocol) server, such as handling client requests to open or switch between multiple project folders.",
      "description_length": 428,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentFilter",
      "library": "lsp",
      "description": "This module defines a filter for text documents based on language, URI scheme, or file pattern. It includes a type `t` with optional fields for each criterion and a `create` function to construct filters. Use it to specify which documents a language server should handle, such as filtering by file extension or URI scheme.",
      "description_length": 322,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ColorPresentationParams",
      "library": "lsp",
      "description": "This module defines a type and functions for handling color presentation parameters in the context of a text document. It includes operations to construct the type with required and optional fields, and to convert to and from JSON format. It is used to specify how a color should be presented within a given range of a document, including progress tracking tokens.",
      "description_length": 364,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionParams",
      "library": "lsp",
      "description": "Handles parameters for completion requests in a language server protocol, providing functions to construct and serialize completion data. It works with structured types like position, text document identifiers, and optional context and progress tokens. Used to manage auto-completion triggers and track associated progress in editor integrations.",
      "description_length": 346,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentUri",
      "library": "lsp",
      "description": "This module represents document URIs with the type `t`, enabling conversion to and from strings and file paths, extraction of query and fragment components, and comparison, hashing, and equality checks. It integrates with `Yojson.Safe.t` for JSON serialization, supporting use cases like converting file paths to URIs for LSP document identification or parsing query parameters from URI strings. The child module configures path style (Windows or Unix) for accurate cross-platform URI parsing and formatting. Together, they provide a complete toolkit for manipulating URIs in both string and structured forms, tailored for use in language tools and editors.",
      "description_length": 657,
      "index": 346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.PositionEncodingKind",
      "library": "lsp",
      "description": "This module defines an enumerated type representing supported text encoding kinds, such as UTF8, UTF16, and UTF32, with a fallback for custom string-based encodings. It includes functions to convert between the encoding kind and Yojson representations, enabling JSON serialization and deserialization. This is used when handling text positions in LSP (Language Server Protocol) messages that require precise character encoding information.",
      "description_length": 439,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentHighlightRegistrationOptions",
      "library": "lsp",
      "description": "This module defines options for registering document highlight capabilities in a language server. It includes fields for specifying which documents to apply the capability to and whether to support progress reporting. The module provides functions to create these options and convert them to and from JSON format for use in protocol messages.",
      "description_length": 342,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DefinitionRegistrationOptions",
      "library": "lsp",
      "description": "This module defines options for registering definition handlers in an LSP server, including document selector and work done progress settings. It works with LSP document selectors and boolean flags, enabling configuration of definition request behavior. Concrete use cases include setting up definition providers with specific document filters and progress reporting options during LSP server initialization.",
      "description_length": 408,
      "index": 349,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.MarkupKind",
      "library": "lsp",
      "description": "This module defines a type `t` with two variants, `PlainText` and `Markdown`, representing possible markup formats. It includes functions to convert values of this type to and from Yojson representations. This module is used to serialize and deserialize markup kind data when communicating with language servers via the Language Server Protocol.",
      "description_length": 345,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureHelpContext",
      "library": "lsp",
      "description": "This module defines a data structure and operations for managing context during signature help in a language server. It includes fields to track the current signature help state, retrigger status, trigger character, and trigger kind, with functions to construct and serialize the context. It is used to handle dynamic signature assistance in code editors based on user input and server responses.",
      "description_length": 396,
      "index": 351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentRangeFormattingClientCapabilities",
      "library": "lsp",
      "description": "This module defines client capabilities for document range formatting in the context of the Language Server Protocol (LSP). It includes operations to create capability records and convert them to and from JSON format using Yojson. The module works with boolean options to indicate support for dynamic registration and range-based formatting, enabling clients to specify their formatting capabilities during LSP initialization.",
      "description_length": 426,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyOutgoingCallsParams",
      "library": "lsp",
      "description": "This module defines a data structure and associated operations for handling parameters related to outgoing call hierarchy requests in a language server protocol. It includes functions to construct the parameter object, and to serialize and deserialize it using Yojson. The structure contains a call hierarchy item and optional tokens for tracking partial results and work progress, used specifically during client-server communication for code navigation features.",
      "description_length": 464,
      "index": 353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ResourceOperationKind",
      "library": "lsp",
      "description": "This module defines an enumerated type representing the kinds of resource operations supported, such as file creation, renaming, and deletion. It includes functions for converting between JSON values and the enumerated type. This module is used to handle resource operation kinds in JSON-based communication, such as in language server protocol messages.",
      "description_length": 354,
      "index": 354,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ReferenceOptions",
      "library": "lsp",
      "description": "This module defines a data structure for configuring reference-related operations in the context of the Language Server Protocol (LSP). It includes a single field `workDoneProgress` that indicates whether progress reporting is enabled for reference operations. The module provides functions to construct instances, and to serialize and deserialize them using Yojson for communication over LSP.",
      "description_length": 393,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Uri.Private",
      "library": "lsp",
      "description": "This module defines a single mutable reference `win32` that indicates whether the system is running on a Windows operating system. It is used to handle platform-specific behavior related to file paths and URIs in the context of the Language Server Protocol (LSP). The module primarily supports operations that require distinguishing between Windows and Unix-style path formats.",
      "description_length": 377,
      "index": 356,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DidCloseNotebookDocumentParams",
      "library": "lsp",
      "description": "This module defines a type `t` representing parameters for a notebook document close event, containing a list of cell text document identifiers and a notebook document identifier. It provides functions to construct instances, convert to and from JSON using Yojson. Used to handle notebook document closure notifications in LSP (Language Server Protocol) implementations.",
      "description_length": 370,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.HoverParams",
      "library": "lsp",
      "description": "This module defines a data structure for handling hover request parameters in a language server protocol. It includes fields for the cursor position, the text document identifier, and an optional progress token. The module provides functions to construct the structure, and to serialize and deserialize it using Yojson for communication over JSON-based protocols.",
      "description_length": 363,
      "index": 358,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Io.Make",
      "library": "lsp",
      "description": "Implements reading and writing of JSON-RPC packets over input and output channels. Uses `Jsonrpc.Packet.t` for parsing and serializing messages, and interacts directly with channel abstractions for transport. Enables bidirectional communication for language server protocol implementations.",
      "description_length": 290,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.NotebookDocument",
      "library": "lsp",
      "description": "This module defines a type `t` representing a notebook document with cells, metadata, type, URI, and version. It provides functions to construct a notebook document, convert it to and from JSON. It is used to manage notebook content in a language server protocol implementation, handling structured data for notebooks and their properties.",
      "description_length": 339,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentFormattingParams",
      "library": "lsp",
      "description": "This module defines a data structure for document formatting parameters, including formatting options, a text document identifier, and an optional progress token. It provides functions to construct instances, convert to and from JSON using Yojson. It is used to pass parameters for formatting a document in an LSP server, such as when a user triggers a format action in an editor.",
      "description_length": 380,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticServerCancellationData",
      "library": "lsp",
      "description": "This module defines a data structure for handling diagnostic server cancellation requests in the context of the Language Server Protocol (LSP). It includes functions to construct, serialize, and deserialize a cancellation data record that indicates whether a retrigger request should be sent. Concrete use cases include managing cancellation signals between a language server and client during diagnostic processing.",
      "description_length": 416,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyPrepareParams",
      "library": "lsp",
      "description": "This module defines a type `t` representing parameters for preparing a call hierarchy request in the context of language server protocol. It includes fields for a position in a text document, the document identifier, and an optional progress token. The module provides functions to construct instances, and to convert to and from JSON format using Yojson.",
      "description_length": 355,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeLens",
      "library": "lsp",
      "description": "This module defines a type `t` representing a code lens in the Language Server Protocol, containing an optional command, optional metadata, and a range. It provides functions to construct a code lens, convert it to and from JSON format using Yojson. This module is used to implement features like showing references or executing commands inline within an editor.",
      "description_length": 362,
      "index": 364,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FileRename",
      "library": "lsp",
      "description": "This module defines a data structure representing a file rename operation with `oldUri` and `newUri` fields. It includes functions to create instances, and to convert to and from JSON using the Yojson library. It is used to represent file renaming events in the context of language server protocol messages.",
      "description_length": 307,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentSaveRegistrationOptions",
      "library": "lsp",
      "description": "This module defines options for registering text document save events, including whether to include the document text and which documents to monitor. It works with document selectors and boolean flags, serializing to and from JSON for protocol transmission. Use this to configure save event subscriptions in language server clients or editors.",
      "description_length": 343,
      "index": 366,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TextDocumentSyncKind",
      "library": "lsp",
      "description": "This module defines the synchronization kinds for text documents in the Language Server Protocol. It includes values for converting between JSON and the enumerated type representing sync modes. Use this module to determine or specify how text document changes are communicated between client and server.",
      "description_length": 303,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.LocationLink",
      "library": "lsp",
      "description": "This module defines a data structure representing a link between two locations in a document, including the origin and target ranges and the target document URI. It provides functions to construct a location link with optional origin selection range and to serialize or deserialize the link using Yojson. Concrete use cases include implementing \"go to definition\" or \"find references\" features in language servers by capturing and transmitting precise source code location relationships.",
      "description_length": 487,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineCompletionContext",
      "library": "lsp",
      "description": "This module defines a data structure for inline completion context with optional selected completion info and a trigger kind. It provides functions to create instances, convert to and from JSON format using Yojson. It is used to represent contextual information during inline code completion in language servers.",
      "description_length": 312,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceSymbolClientCapabilities",
      "library": "lsp",
      "description": "This module defines data structures and functions for specifying client capabilities related to workspace symbol handling in the Language Server Protocol. It includes types for supporting symbol tags, symbol kinds, and resolve capabilities, along with functions to construct and serialize these structures. Concrete use cases include configuring a language server's behavior for symbol resolution and filtering based on client-provided capabilities.",
      "description_length": 449,
      "index": 370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Hover",
      "library": "lsp",
      "description": "This module defines a type `t` representing hover information in a language server protocol, containing either markup content, a marked string, or a list of marked strings, along with an optional range. It provides functions to construct hover values, and to convert them to and from JSON format. It is used to return rich hover content in response to editor queries, such as displaying documentation or type information at a specific location in source code.",
      "description_length": 459,
      "index": 371,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure representing client capabilities in the Language Server Protocol, with optional fields for features like text document handling, workspace management, and window interactions. It provides functions to construct instances and serialize/deserialize them using JSON via the Yojson library. It is used to communicate supported features from a language client to a language server during initialization.",
      "description_length": 435,
      "index": 372,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.Unregistration",
      "library": "lsp",
      "description": "This module defines a data structure for representing unregistration requests in the context of the Language Server Protocol (LSP). It includes functions to create an unregistration object with a specific ID and method, and to convert between JSON and the corresponding OCaml type. It is used when a client or server needs to communicate the cancellation of a previously registered capability during LSP communication.",
      "description_length": 418,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.UnchangedDocumentDiagnosticReport",
      "library": "lsp",
      "description": "This module defines a type `t` representing a diagnostic report for an unchanged document, containing a `resultId` string. It provides functions to create instances of this type, as well as serialize and deserialize them using Yojson. This is used to track and persist diagnostic results across document versions in a language server protocol implementation.",
      "description_length": 358,
      "index": 374,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookCell",
      "library": "lsp",
      "description": "This module defines a notebook cell structure with fields for document URI, execution summary, cell kind, and optional metadata. It provides functions to create notebook cells and convert them to and from JSON format. It is used to represent individual cells within a notebook document, supporting features like tracking execution state and cell-specific metadata.",
      "description_length": 364,
      "index": 375,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlineValueParams",
      "library": "lsp",
      "description": "This module defines a data structure for inline value parameters used during code analysis, specifically handling contextual information, text document identifiers, and optional progress tracking. It includes functions to construct instances, and serialize or deserialize them using Yojson. Concrete use cases include passing inline value request data between language servers and clients during debugging or code inspection workflows.",
      "description_length": 435,
      "index": 376,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TypeDefinitionParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used in type definition requests, including position, text document identifier, and optional progress tokens. It provides functions to create instances and convert to and from JSON format. This is used to handle type definition queries in language server protocol implementations, such as when a user requests navigation to a type's definition in an editor.",
      "description_length": 409,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SymbolInformation",
      "library": "lsp",
      "description": "This module defines a data structure for representing symbol information in a codebase, including details like name, kind, location, and deprecation status. It provides functions to construct symbol information records and to serialize and deserialize them using Yojson. Concrete use cases include reporting symbols like functions, variables, or classes in language server implementations.",
      "description_length": 389,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHintClientCapabilities",
      "library": "lsp",
      "description": "This module defines data structures and serialization functions for inlay hint client capabilities in the context of language server protocol (LSP) communication. It includes types for resolution support with property lists and a top-level capability structure supporting dynamic registration and resolution features. The module enables parsing and generating JSON representations of these capabilities using Yojson, facilitating integration with LSP-compliant editors and tools.",
      "description_length": 479,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.HoverOptions",
      "library": "lsp",
      "description": "This module defines configuration options for hover functionality in the LSP (Language Server Protocol), specifically supporting the `workDoneProgress` field to indicate whether progress reporting is enabled. It provides functions to create options, serialize to JSON, and deserialize from JSON. Concrete use cases include configuring hover behavior in language servers and exchanging hover settings between clients and servers.",
      "description_length": 428,
      "index": 380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensEdit",
      "library": "lsp",
      "description": "This module defines a data structure for representing semantic token edits in a text document. It includes operations to create and manipulate these edits, which specify changes to token data by indicating a start position, the number of tokens to delete, and optionally new token data to insert. The module supports serialization to and from JSON for use in language server protocol communication.",
      "description_length": 398,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidOpenNotebookDocumentParams",
      "library": "lsp",
      "description": "This module defines a type `t` representing parameters for a notebook document open event, containing a list of cell text documents and the notebook document itself. It provides functions to construct instances, convert to and from JSON format. Used when handling notebook document lifecycle events in a language server, specifically for initializing notebook content from multiple text documents.",
      "description_length": 397,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MonikerKind",
      "library": "lsp",
      "description": "This module defines an enumeration type `t` with three variants: `Import`, `Export`, and `Local`, representing different kinds of monikers in the context of language server protocol operations. It provides functions `t_of_yojson` and `yojson_of_t` for converting between the `t` type and Yojson.Safe.t values. This module is used to serialize and deserialize moniker kind data when exchanging information between a language server and a client over JSON-RPC.",
      "description_length": 458,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionRegistrationOptions",
      "library": "lsp",
      "description": "This module defines data structures and functions for configuring completion features in a language server. It includes options for controlling commit characters, completion item details, document selectors, and progress handling. These configurations are used to set up and manage code completion capabilities in an LSP (Language Server Protocol) implementation.",
      "description_length": 363,
      "index": 384,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SymbolTag",
      "library": "lsp",
      "description": "This module defines a single type `t` representing symbol tags in the context of language server protocol, specifically supporting the `Deprecated` tag. It provides functions to convert values of type `t` to and from Yojson.Safe.t for serialization and deserialization. This module is used to annotate symbols with additional metadata, such as marking them as deprecated, in LSP-related tools.",
      "description_length": 393,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentLinkRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for document link registration, including document selector, resolve provider, and work done progress flags. It provides functions to create instances and convert to and from JSON format. It is used to specify how document links should be handled in language server protocol implementations.",
      "description_length": 333,
      "index": 386,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WindowClientCapabilities",
      "library": "lsp",
      "description": "This module defines capabilities related to window operations in an LSP client, including support for showing documents, displaying messages, and tracking work progress. It works with optional nested capability structures and a boolean flag for progress tracking. Concrete use cases include configuring client support for UI interactions and background task reporting during language server communication.",
      "description_length": 405,
      "index": 387,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentRangeFormattingRegistrationOptions",
      "library": "lsp",
      "description": "This module defines options for registering document range formatting capabilities in a language server. It includes fields for specifying which documents to format, whether range formatting is supported, and if progress reporting is enabled. Use this to configure formatting behavior in LSP servers handling source code edits.",
      "description_length": 327,
      "index": 388,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for diagnostic registration, including document selectors, dependency handling, and progress reporting. It supports creating and serializing diagnostic settings with fields like `interFileDependencies` and `workspaceDiagnostics`. Use it to specify how diagnostics should be registered and processed across files in a workspace.",
      "description_length": 369,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeActionRegistrationOptions",
      "library": "lsp",
      "description": "This module defines configuration options for registering code action capabilities in a language server. It includes fields to specify supported code action kinds, document selection criteria, and optional providers for resolving actions or tracking progress. Use this to configure code action features in an LSP server implementation.",
      "description_length": 335,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValue",
      "library": "lsp",
      "description": "This module defines a polymorphic type `t` representing different kinds of inline values used in debugging contexts, such as plain text, variable lookups, and evaluatable expressions. It provides serialization and deserialization functions to and from Yojson for these inline value types. This module is used to transmit inline value information between a debugger and an editor during runtime evaluation or variable inspection.",
      "description_length": 428,
      "index": 391,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Import.Json",
      "library": "lsp",
      "description": "This module handles conversion between OCaml values and JSON, supporting structured parsing, serialization, and handling of optional or missing fields. It provides combinators for fallback parsing, customizable decoders for structured data like lists and pairs, and types for representing absent or null JSON values. Operations include converting key-value lists to JSON objects, serializing LSP messages with typed fields, and mapping OCaml options to JSON nullability. Examples include decoding LSP position data into integer pairs, handling optional configuration fields with fallback logic, and transforming association lists into JSON dictionaries with precise key-value alignment.",
      "description_length": 686,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticOptions",
      "library": "lsp",
      "description": "This module defines a data structure for configuring diagnostic behavior in a language server. It includes fields to control inter-file dependency tracking, workspace-level diagnostics, and progress reporting, along with optional identifiers. The module provides functions to construct these configurations, and serialize/deserialize them to and from JSON.",
      "description_length": 356,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueEvaluatableExpression",
      "library": "lsp",
      "description": "This module represents inline value evaluatable expressions in the Language Server Protocol. It provides functions to create and serialize structured data containing an optional expression string and a range. It is used to convey executable code snippets and their positions in source files, typically for debugging or inline evaluation features in IDEs.",
      "description_length": 354,
      "index": 394,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ReferenceClientCapabilities",
      "library": "lsp",
      "description": "This module defines capabilities related to reference handling in a language server, specifically supporting dynamic registration of reference providers. It works with boolean options to indicate whether dynamic registration is enabled. Use cases include configuring a language server client to support or opt out of dynamically registered reference resolution features.",
      "description_length": 370,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FailureHandlingKind",
      "library": "lsp",
      "description": "This module defines a variant type `t` representing different strategies for handling failures in language server protocol operations. It includes functions to convert between the type and Yojson representations for serialization and deserialization. Concrete use cases include specifying failure handling behavior in LSP requests and responses, such as determining whether to abort, apply transactional changes, or perform undo operations.",
      "description_length": 440,
      "index": 396,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueWorkspaceClientCapabilities",
      "library": "lsp",
      "description": "This module defines a data structure with an optional boolean field `refreshSupport` and provides functions to create instances, serialize to JSON, and deserialize from JSON. It works with the `Yojson.Safe.t` type for JSON handling and the `t` record type for inline value workspace capabilities. Concrete use cases include configuring and exchanging client capability data in language server protocol implementations.",
      "description_length": 418,
      "index": 397,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DefinitionParams",
      "library": "lsp",
      "description": "This module defines a record type for handling definition request parameters in the context of the Language Server Protocol. It includes fields for tracking progress and specifying the document and position of interest. The module provides functions to construct instances, and to convert to and from JSON representations for communication purposes.",
      "description_length": 349,
      "index": 398,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CodeActionTriggerKind",
      "library": "lsp",
      "description": "This module defines a type `t` with two variants, `Invoked` and `Automatic`, representing how code actions are triggered in an editor. It includes functions to convert values of this type to and from Yojson for serialization and deserialization. This module is used to communicate the trigger context of code actions in LSP (Language Server Protocol) requests.",
      "description_length": 360,
      "index": 399,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeHierarchyPrepareParams",
      "library": "lsp",
      "description": "This module defines a data structure for parameters used to prepare a type hierarchy request in a language server. It includes the position in the document, the text document identifier, and an optional progress token. The module supports creating instances, converting to and from JSON, and is used to initiate type hierarchy operations in the context of language tools like code editors.",
      "description_length": 389,
      "index": 400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TokenFormat",
      "library": "lsp",
      "description": "This module defines a single type `t` representing token formatting options, specifically supporting a `Relative` variant. It provides functions to convert values of this type to and from Yojson representations. This is used to serialize and deserialize token format settings in the context of Language Server Protocol messages.",
      "description_length": 328,
      "index": 401,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Registration",
      "library": "lsp",
      "description": "This module defines a data structure for representing registration requests in the Language Server Protocol. It includes functions to construct registration objects with an ID, method name, and optional registration options, and to serialize or deserialize them using Yojson. Concrete use cases include registering text document synchronization or code completion capabilities in an LSP server.",
      "description_length": 394,
      "index": 402,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceSymbolParams",
      "library": "lsp",
      "description": "This module defines a data structure for workspace symbol query parameters, including the search query string and optional progress tokens. It provides functions to construct instances, convert to and from JSON format using Yojson. This module is used to handle symbol search requests in a language server, where clients can specify a query and track progress with tokens.",
      "description_length": 372,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentColorClientCapabilities",
      "library": "lsp",
      "description": "This module defines capabilities related to document color support in an LSP client. It includes a single field indicating whether dynamic registration is supported. The module provides functions to create instances, and serialize/deserialize them to and from JSON. It is used to configure client behavior for color-related features in language servers.",
      "description_length": 353,
      "index": 404,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlineValueOptions",
      "library": "lsp",
      "description": "This module defines a data structure for inline value options with a single field indicating whether work done progress is enabled. It provides functions to create instances, serialize to JSON, and deserialize from JSON. This is used to configure inline value handling in language server protocol implementations where progress tracking is required.",
      "description_length": 349,
      "index": 405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressCreateParams",
      "library": "lsp",
      "description": "This module defines a type `t` representing parameters for creating a work done progress token in the LSP protocol. It includes functions to construct a value of this type, and to convert it to and from JSON format using Yojson. It is used specifically for initializing progress tracking in LSP server operations that require a progress token.",
      "description_length": 343,
      "index": 406,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ApplyWorkspaceEditResult",
      "library": "lsp",
      "description": "This module defines a data structure for representing the result of applying a workspace edit in the context of the Language Server Protocol. It includes fields to indicate whether the edit was applied successfully, the index of a failed change if applicable, and an optional reason for failure. The module provides functions to construct such results and to serialize or deserialize them using Yojson for communication over JSON-based protocols.",
      "description_length": 446,
      "index": 407,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ReferenceContext",
      "library": "lsp",
      "description": "This module defines a type `t` that captures context for references in the language server protocol, specifically whether to include declarations. It provides functions to create instances, convert to and from JSON format using Yojson. Concrete use cases include handling reference requests in a language server where declaration inclusion affects the response data.",
      "description_length": 366,
      "index": 408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ExecutionSummary",
      "library": "lsp",
      "description": "This module defines a data structure representing the outcome of an execution step, with fields for ordering and success status. It provides functions to construct instances, convert to and from JSON, and is used to track the results of sequentially executed operations. Concrete use cases include logging and reporting on the execution of multi-step processes where order and outcome matter.",
      "description_length": 392,
      "index": 409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeWatchedFilesRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a data structure for managing file system watchers in the context of the Language Server Protocol. It includes functions to create an instance with a list of watchers and to serialize or deserialize the structure using Yojson. A concrete use case is configuring dynamic file monitoring in an LSP server to track changes to specific files or directories.",
      "description_length": 373,
      "index": 410,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.PartialResultParams",
      "library": "lsp",
      "description": "This module defines a type `t` that represents parameters for partial result handling in the context of the Language Server Protocol (LSP). It includes a function `create` to construct values with an optional `partialResultToken`, and serialization functions `t_of_yojson` and `yojson_of_t` for converting values to and from JSON format. It is used to manage progress tokens during LSP operations, such as handling incremental updates in long-running requests.",
      "description_length": 460,
      "index": 411,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.RenameRegistrationOptions",
      "library": "lsp",
      "description": "This module defines a data structure for configuring rename operations in a language server, including options for document selection, preparation, and progress tracking. It provides functions to create instances and convert to and from JSON format. It is used to specify how a language server should handle symbol renaming requests, such as enabling or disabling preparation steps or associating rename operations with specific document types.",
      "description_length": 444,
      "index": 412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceFoldersInitializeParams",
      "library": "lsp",
      "description": "This module defines a data structure for handling workspace folder initialization parameters in the context of the Language Server Protocol. It includes functions to construct the structure, optionally specifying a list of workspace folders, and to serialize or deserialize the structure using Yojson. A concrete use case is configuring a language server to support multiple root directories when initializing a client session.",
      "description_length": 427,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Progress",
      "library": "lsp",
      "description": "This module defines a variant type for representing progress events in the Language Server Protocol, including begin, report, and end states. It provides JSON serialization and deserialization functions for these progress events. It is used to communicate task progress between a language server and client during operations like code indexing or compilation.",
      "description_length": 359,
      "index": 414,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Server_request",
      "library": "lsp",
      "description": "This module defines a GADT for representing LSP server requests, each tied to specific LSP protocol operations like applying workspace edits, showing messages, or refreshing semantic tokens. It includes functions to serialize requests to JSON-RPC, parse incoming JSON-RPC requests, and handle responses. Concrete use cases include routing incoming LSP client requests to the appropriate handler and constructing structured server responses.",
      "description_length": 440,
      "index": 415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Text_document",
      "library": "lsp",
      "description": "This module manages text documents in the context of the Language Server Protocol, providing operations to create, update, and query document content, version, and metadata. It works with document URIs, position and range types, and supports applying content changes and text edits while handling encoding in either UTF-8 or UTF-16. Concrete use cases include synchronizing document state between a client and server, applying incremental edits, and converting between positional and absolute offsets for precise text manipulation.",
      "description_length": 531,
      "index": 416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Private",
      "library": "lsp",
      "description": "This module combines substring manipulation, cursor-based editing, and array slicing to support efficient text and array processing. It offers data types like substrings with cursor tracking, zipper-based editable text structures, and non-copying array views, enabling operations such as slicing, UTF-8 decoding, ordered map associations, and in-place modifications. You can parse Unicode text, manage structured content like token streams, or implement memory-efficient array algorithms using sliding windows and precise positional tracking.",
      "description_length": 542,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Client_notification",
      "library": "lsp",
      "description": "This module defines a variant type representing all possible notifications sent from an LSP client to a language server, including document lifecycle events, file changes, workspace updates, and progress handling. It provides serialization and deserialization functions to convert between these notification types and JSON-RPC messages. Concrete use cases include processing document open/close/change events, handling configuration updates, responding to file system changes, and managing notebook document interactions.",
      "description_length": 521,
      "index": 418,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Diff",
      "library": "lsp",
      "description": "Computes the differences between two string versions of text, generating a list of text edit operations needed to transform the original into the updated version. Works directly with string inputs and produces structured edit commands suitable for applying changes to text documents. Useful for implementing version control, collaborative editing, or code refactoring tools where precise text modifications must be tracked and applied.",
      "description_length": 435,
      "index": 419,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Io",
      "library": "lsp",
      "description": "This module handles bidirectional JSON-RPC communication over input and output channels, using `Jsonrpc.Packet.t` for message parsing and serialization. It provides functions to send and receive packets, enabling transport-level interaction for language server protocols. For example, it can read a JSON-RPC request from an input channel, parse it into a structured packet, and write a corresponding response back over the output channel.",
      "description_length": 438,
      "index": 420,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Header",
      "library": "lsp",
      "description": "This module handles the construction, manipulation, and parsing of LSP message headers, including essential fields like content length and content type. It provides functions to create headers, extract values, and convert headers to strings, with the primary data type `t` representing a header. The child module supplies key constants such as `content_length` and `content_type`, used to standardize header field names in LSP communication. For example, these constants are used when building or parsing LSP messages to ensure correct framing and interpretation over a communication channel.",
      "description_length": 592,
      "index": 421,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Client_request",
      "library": "lsp",
      "description": "This module defines a GADT for representing LSP client requests and their expected responses, including operations like text document hover, definition lookup, code completion, formatting, and symbol resolution. It works with LSP protocol types such as `InitializeParams`, `HoverParams`, `CompletionItem`, `TextEdit`, and other structured JSON-compatible data. Concrete use cases include handling incoming JSON-RPC requests from an LSP client, serializing and deserializing request/response data, and dispatching to appropriate handler functions based on the request type.",
      "description_length": 572,
      "index": 422,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Import",
      "library": "lsp",
      "description": "This module organizes functionality across results, integers, strings, and JSON to support error handling, numeric operations, text manipulation, and structured data interchange. It enables tasks like safely parsing JSON into typed values, transforming string-based configurations with precise key lookups, and chaining operations that may fail using result-aware combinators. Core data types include integers, strings, key-value mappings, and result-wrapped values, with operations such as bitwise arithmetic, substring extraction, JSON serialization, and error-preserving function application. For example, it can decode a JSON object into an integer pair with fallback defaults, process string templates with dynamic substitutions, or merge nested maps while preserving type integrity across transformations.",
      "description_length": 811,
      "index": 423,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Cli",
      "library": "lsp",
      "description": "This module handles command line argument parsing and generation for LSP servers, supporting channel configuration and client process ID management. It works with string lists, integers, and custom channel types to construct or interpret command line options, enabling servers to retrieve runtime configuration from CLI inputs and spawn clients with specific communication channels. The communication submodule defines available channels, including stdin/stdout, Unix domain sockets, Windows pipes, and TCP sockets, which can be used to configure the server's listening endpoint based on command-line arguments. Use these modules together to initialize an LSP server with options like a specific TCP port, a named pipe, or standard IO for integration with editors or IDEs.",
      "description_length": 772,
      "index": 424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Uri",
      "library": "lsp",
      "description": "This module represents and manipulates URIs, with support for conversions to and from strings, paths, and JSON. It enables comparison, equality checks, hashing, and extraction of components such as query and fragment, making it suitable for handling file paths in language server protocol messages or parsing URI strings for routing. A child module provides a mutable reference `win32` to indicate Windows platform context, influencing how file paths and URIs are interpreted for LSP operations. Together, they allow precise, platform-aware URI handling, such as normalizing paths or determining system-specific routing behavior.",
      "description_length": 629,
      "index": 425,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types",
      "library": "lsp",
      "description": "This module provides core data structures and serialization utilities for implementing Language Server Protocol (LSP) features. It includes enumerated types for trace levels, text formats, diagnostic severity, and token kinds, along with structured types for document identifiers, positions, ranges, and workspace edits. Each child module defines specific data models for LSP operations such as code completion, hover, diagnostics, renaming, and inline values, with support for JSON serialization and deserialization via Yojson. These types and functions enable precise communication between language servers and clients, handling tasks like document synchronization, symbol navigation, and capability negotiation. Example uses include configuring trace output levels, representing file rename operations, associating diagnostics with source locations, and serializing code completion items for transmission over LSP.",
      "description_length": 917,
      "index": 426,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Server_notification",
      "library": "lsp",
      "description": "This module defines server-side notifications for handling events like diagnostics, logging, and progress updates in an LSP (Language Server Protocol) implementation. It includes functions to convert between custom notification types and JSON-RPC representations. Concrete use cases include sending diagnostic results to a client, logging server messages, and reporting progress during long-running operations.",
      "description_length": 410,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Snippet",
      "library": "lsp",
      "description": "This module builds and transforms LSP snippet syntax trees using dynamic elements like tabstops, placeholders, and variables, enabling structured text generation for code templates and IDE features. It supports combining snippets with strings and document variables\u2014such as current line or file info\u2014allowing dynamic placeholder replacement and formatted code suggestions. Operations include concatenation, transformation, and variable expansion, used to generate parameterized templates for auto-completion, scaffolding, and refactoring. Submodules provide infix operators for template assembly and predefined variables for environment-aware text expansion.",
      "description_length": 658,
      "index": 428,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Extension",
      "library": "lsp",
      "description": "This module implements protocol extensions for debugging in a language server, focusing on custom text document requests and echo messages. It defines data types for text document identifiers, positions, and debug messages, along with serialization operations using JSON. These tools allow clients and servers to exchange source code snippets, diagnostics, and logging data at specific document locations. For instance, it can retrieve a file's content at a given position or encode and decode messages like `{ \"message\": \"debug info\" }`.",
      "description_length": 538,
      "index": 429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp",
      "library": "lsp",
      "description": "This module implements the core components of the Language Server Protocol, enabling structured communication between clients and servers through requests, notifications, and progress tracking. It defines key data types such as GADTs for server and client requests, variant types for notifications and progress events, and structured representations of documents, URIs, and text edits with support for UTF-8/UTF-16 encoding. Operations include JSON-RPC serialization, diff computation, snippet generation, and document synchronization, allowing use cases like code completion, hover documentation, diagnostics, collaborative editing, and semantic token refresh. It also supports transport-level messaging, command line configuration, and platform-aware URI handling for robust LSP integration across different environments.",
      "description_length": 823,
      "index": 430,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 432,
    "meaningful_modules": 431,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9976851851851852
  },
  "statistics": {
    "max_description_length": 917,
    "min_description_length": 233,
    "avg_description_length": 393.7819025522042,
    "embedding_file_size_mb": 1.565704345703125
  }
}