{
  "package": "lsp",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 433,
  "creation_timestamp": "2025-06-18T17:09:03.586122",
  "modules": [
    {
      "module_path": "Lsp.Import.Json.O",
      "description": "Combines two functions into a single function that applies both to the same input and returns the result of the second. Operates on functions with the same input and output types. Useful for chaining transformations where the second function should take precedence.",
      "description_length": 265,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Import.Json.Object",
      "description": "Converts a list of string-value pairs to and from a JSON representation using Yojson. Operates on lists of tuples where each tuple contains a string and a value of the same type as the list. Used to serialize and deserialize structured data in JSON format.",
      "description_length": 256,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json.Option",
      "description": "Converts between OCaml option values and JSON null representations, using Yojson. Handles serialization and deserialization of optional values, ensuring null is correctly mapped to None and non-null values to Some. Works with any type wrapped in an option, enabling safe JSON parsing and generation.",
      "description_length": 299,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json.Of",
      "description": "Extracts and transforms JSON values into structured data. Processes lists, pairs, and tagged unions using custom parsing functions. Enables precise access to specific fields and ensures type-safe handling of JSON inputs.",
      "description_length": 220,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json.To",
      "description": "Processes lists by mapping elements and wrapping results in a tagged list structure. Modifies records by injecting literal fields with custom transformations. Converts pairs of integers into a structured list representation with explicit type tagging.",
      "description_length": 251,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json.Nullable_option",
      "description": "Converts between JSON values representing null and OCaml options, handling `null` as `None` and non-null values as `Some`. Works with JSON parsing and serialization, specifically transforming `yojson` values into optional types and vice versa. Enables safe handling of missing data in JSON-based data exchange.",
      "description_length": 310,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Import.Json.Assoc",
      "description": "Converts a list of key-value pairs into a JSON association list, using custom serializers for keys and values. Parses JSON objects into key-value lists by extracting string keys and applying deserializers to nested values. Designed for handling structured data in formats requiring explicit key-value mapping.",
      "description_length": 309,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json.Void",
      "description": "Provides conversion between a custom type `t` and Yojson values, enabling serialization and deserialization. Operates on the `t` type and Yojson's `t` structure. Used to parse and generate JSON from a specific data model.",
      "description_length": 221,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.String.Map",
      "description": "This module provides operations for inserting, deleting, and updating key-value pairs, along with merging, querying, and inspecting map structures. It works with maps featuring string keys and integrates with sequences and lists for transformations, conversions, and bulk operations. Specific use cases include managing configuration settings, processing structured data, or building dynamic dictionaries from sequential inputs.",
      "description_length": 428,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Result.O",
      "description": "Provides a binding operation for result types, allowing sequential computation where the first result's value is passed to a function, preserving any error. Works with the `( 'a, 'b ) result` type, enabling safe error propagation. Used to chain operations that may fail, such as parsing and validating data in a pipeline.",
      "description_length": 321,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Int.Map",
      "description": "This module offers operations for manipulating key-value maps, including insertion, deletion, lookup, traversal, and combination, with support for transforming and filtering bindings. It works with general key-value maps and specialized integer-keyed maps, enabling conversions to and from sequences or lists for data processing. Use cases include dynamic data aggregation, configuration management, and structured data transformations where efficient key-based access and sequence-based operations are required.",
      "description_length": 512,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Private.String_zipper.Private",
      "description": "Reflects a zipper structure back into its original form, reconstructing the full data tree from a navigated state. Works with nested data structures represented as zippers, preserving hierarchical context during traversal. Used to finalize transformations applied during tree navigation, ensuring consistent state restoration.",
      "description_length": 326,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Private.Substring.Uutf",
      "description": "Encodes UTF-8 byte sequences into Unicode code points using a stateful decoding process. It operates on byte arrays and a decoder state, advancing the position as it processes input. This is used to parse UTF-8 encoded data incrementally, such as in network protocols or file reading.",
      "description_length": 284,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Private.Substring.Map",
      "description": "The module provides operations for creating, modifying, and querying maps with specific key types and generic values, including adding, removing, and updating bindings, as well as searching and filtering based on keys or predicates. It supports ordered traversal and manipulation of elements in increasing or decreasing key order, enabling efficient processing of sorted data structures. Additionally, it includes functions to build and iterate over maps using sequences, facilitating batch operations and incremental construction from iterable sources.",
      "description_length": 553,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Header.Private.Key",
      "description": "Provides functions to retrieve the content length and content type from a string representation of HTTP headers. Operates on raw string data formatted as key-value pairs. Used to extract metadata during HTTP request parsing or response generation.",
      "description_length": 247,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Io.Make.O",
      "description": "Provides monadic binding operations for sequencing computations within a context, where `let+` maps a value inside the context and `let*` binds a value to a function that returns a new context. Works with any type that implements the `t` type constructor, enabling chained transformations and compositions. Used to handle asynchronous or effectful computations in a structured, sequential manner.",
      "description_length": 396,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentUri.Private",
      "description": "Provides a reference to a boolean flag indicating Windows platform detection. Works with the `bool ref` data type to track system-specific configurations. Used to conditionally execute code paths tailored for Windows environments.",
      "description_length": 230,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Extension.DebugTextDocumentGet.Params",
      "description": "Creates a structured representation from a position and text document identifier, enabling precise tracking of code locations. Handles serialization and deserialization to and from JSON format for data exchange. Used to encode editor state or cursor positions in language server protocols.",
      "description_length": 289,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Extension.DebugTextDocumentGet.Result",
      "description": "Converts between a JSON value and an optional string, enabling serialization and deserialization of string-based results. Works with the `string option` type to represent success or failure states. Used to parse and generate JSON from operations that may return a string or nothing.",
      "description_length": 282,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Extension.DebugEcho.Params",
      "description": "Provides serialization and deserialization between a record type and JSON values using Yojson. Works with a structured data type containing fields for configuration parameters. Used to convert configuration settings to and from JSON for storage or communication.",
      "description_length": 262,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Extension.DebugEcho.Result",
      "description": "Provides serialization and deserialization between a custom type and JSON values using Yojson. Works with a structured data type containing parameters and nested fields. Used to convert configuration objects to and from JSON format in API responses and input parsing.",
      "description_length": 267,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Result",
      "description": "Combines error-handling and value transformation for sequential operations, using the `( 'a, 'b ) result` type to pass successful values forward while maintaining errors. Supports chaining functions that return results, ensuring failures halt the pipeline without explicit checks. For example, parsing a string, validating the parsed data, and converting it to another format can be done in a single, readable flow. Operations include mapping, binding, and error propagation across multiple steps.",
      "description_length": 497,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Import.String",
      "description": "This module offers operations for manipulating maps with string keys, including inserting, deleting, updating, and merging entries. It supports querying, inspecting, and transforming maps using sequences and lists, enabling efficient handling of configuration data or structured information. Functions allow decoding 32-bit and 64-bit integers from strings in little-endian, big-endian, or native-endian formats, while 8-bit and 16-bit integers are decoded into int values with appropriate sign or zero extension. Examples include parsing binary data, building dynamic dictionaries from input streams, and extracting numeric values from encoded string representations.",
      "description_length": 668,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Int",
      "description": "manages key-value mappings with operations for insertion, deletion, lookup, and traversal, supporting both general and integer-keyed maps. It enables transformations, filtering, and conversion between maps, sequences, and lists for flexible data manipulation. Users can aggregate dynamic data, manage configurations, or restructure nested data through efficient key-based access. Examples include building lookup tables from lists, merging multiple maps, or extracting filtered subsets of data.",
      "description_length": 494,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Import.Json",
      "description": "combines function composition, JSON serialization, and data transformation capabilities. it supports converting lists of key-value pairs, option types, and custom data structures to and from JSON, while enabling function chaining and structured parsing. operations include mapping elements, injecting fields, and handling null values safely. examples include serializing a list of strings to JSON, parsing a JSON object into a record, and transforming optional values during deserialization.",
      "description_length": 491,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Private.Array_view",
      "description": "Provides operations to create and manipulate views of arrays without copying data, including accessing elements, iterating, folding, and extracting subviews. Works with array views represented as a type 'a t, which reference a base array and a starting position. Enables efficient manipulation of array segments, such as extracting a suffix, blitting to another array, or creating a new view from a portion of an existing array.",
      "description_length": 428,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Private.Substring",
      "description": "Processes UTF-8 byte arrays into Unicode code points through a stateful decoder, enabling incremental parsing of encoded data. Supports map operations with custom key types, including insertion, deletion, and traversal in ordered or arbitrary sequences. Allows for efficient key-based queries and transformations, as well as batch processing of data through sequences. Can be used to parse incoming network data while building structured maps from streamed input.",
      "description_length": 463,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Private.String_zipper",
      "description": "Reconstructs full data structures from navigated zipper states, maintaining hierarchical context through nested representations. Operates on tree-like structures by reversing traversal steps and applying accumulated changes. Supports operations such as finalizing edits, restoring original forms, and merging modifications back into the base structure. Example uses include undoing tree transformations or persisting changes after navigating complex data hierarchies.",
      "description_length": 467,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Header.Private",
      "description": "Extracts metadata from HTTP headers by parsing raw string data into structured information. Key operations include retrieving content length and content type from formatted key-value pairs. Supports tasks such as validating response headers or preparing request payloads. Examples include parsing \"Content-Length: 2048\" or extracting \"Content-Type: application/json\".",
      "description_length": 367,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Snippet.Var",
      "description": "Provides functions to create, compare, and hash variables, along with operations to check for equality and generate unique identifiers. Works with the `t` type, representing symbolic variables in a program analysis context. Used to track variable assignments and detect name clashes during code transformation.",
      "description_length": 310,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Snippet.O",
      "description": "Concatenates two values of type `t` using `^^`, prepends a string to a `t` with `+@`, and appends a string to a `t` with `@+`. Works with custom string-like data structures supporting these operations. Used to build and modify log messages, error descriptions, or formatted output dynamically.",
      "description_length": 293,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Io.Make",
      "description": "Reads lines or exact byte counts from input sources and writes lists of strings to output destinations. Operates on custom input and output types representing data streams. Used for parsing structured text input and generating formatted output in I/O-bound applications.",
      "description_length": 270,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.MarkedString",
      "description": "Represents a string with associated formatting metadata, supporting conversion to and from JSON using Yojson. Works with the `t` type, which includes a string and optional styling information. Used to serialize and deserialize formatted text in API responses and configuration files.",
      "description_length": 283,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentUri",
      "description": "Encapsulates platform-specific logic through a boolean reference, enabling conditional execution based on system type. Supports operations on `bool ref` to manage and query environment settings. Allows developers to toggle behavior between Windows and non-Windows systems. For example, it can control the loading of Windows-specific libraries or file path formatting.",
      "description_length": 367,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ProgressToken",
      "description": "Encodes and decodes values between a custom type and JSON using Yojson. Works with a variant type representing different progress states. Used to serialize progress tracking data in a persistent storage system.",
      "description_length": 210,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ProgressParams",
      "description": "Encapsulates progress tracking with a token and a value, supporting serialization and deserialization to and from JSON. Works with a polymorphic type that pairs a progress token with a user-defined value. Used to transmit structured progress updates in a format compatible with JSON-based communication protocols.",
      "description_length": 313,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentSyncOptions",
      "description": "Provides serialization and deserialization between JSON and a unit type. Accepts a JSON value and converts it to a unit, and vice versa. Used to handle empty or placeholder data in JSON-based communication protocols.",
      "description_length": 216,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentSyncRegistrationOptions",
      "description": "Handles serialization and deserialization of document synchronization registration options using Yojson, converting between JSON values and unit type. Works with the unit data type to represent empty or placeholder values in JSON interactions. Used in scenarios where a JSON structure is required but no actual data is present.",
      "description_length": 327,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentFilter",
      "description": "Converts between a unit type and JSON representations using Yojson. Parses and serializes JSON values into and from a placeholder data structure. Used to validate and transform JSON inputs in contexts where the presence of data is significant, such as in form submissions or configuration checks.",
      "description_length": 296,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentFilter",
      "description": "Creates a filter based on language, scheme, or pattern matching for text documents. Operates on document metadata and file paths to determine inclusion criteria. Used to selectively process files in an editor or build system based on specific identifiers.",
      "description_length": 255,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SymbolTag",
      "description": "Converts between a custom type and JSON representations using Yojson. Handles structured data with specific encoding and decoding routines. Used to serialize and deserialize symbolic tags in configuration and data exchange scenarios.",
      "description_length": 233,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SymbolKind",
      "description": "Handles conversion between a custom type `t` and JSON representations using Yojson. Provides parsing from JSON values to `t` and serialization from `t` to JSON values. Used to encode and decode symbolic identifiers in a structured format.",
      "description_length": 238,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ResourceOperationKind",
      "description": "Handles conversion between JSON values and a custom resource operation type, supporting serialization and deserialization. Works with a sealed type representing distinct operation kinds such as create, update, or delete. Used to encode and decode operation identifiers in API requests and responses.",
      "description_length": 299,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FailureHandlingKind",
      "description": "Handles conversion between a custom type `t` and JSON representations using Yojson. Provides parsing from JSON values into `t` and serialization of `t` to JSON values. Used to encode and decode structured error information in API responses.",
      "description_length": 240,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MarkupKind",
      "description": "Converts between a custom type and JSON representations using Yojson. Handles structured data for markup formats by serializing and deserializing values. Used to parse and generate JSON payloads in systems processing formatted text.",
      "description_length": 232,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TokenFormat",
      "description": "Converts between a custom token type and JSON representations using Yojson. Handles structured token data with specific encoding and decoding routines. Used to serialize and deserialize token objects in API responses and request parsing.",
      "description_length": 237,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.PrepareSupportDefaultBehavior",
      "description": "Converts between a custom type and JSON representations using Yojson, enabling serialization and deserialization. Works with a specific opaque type defined in the module. Used to parse configuration data from JSON files and generate JSON output for API responses.",
      "description_length": 263,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticTag",
      "description": "Converts between a custom type and JSON representations using Yojson, enabling serialization and deserialization. Works with a structured data type that encapsulates diagnostic information. Used to parse and generate JSON payloads for logging or communication protocols.",
      "description_length": 270,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FoldingRangeKind",
      "description": "Provides serialization and deserialization between a custom type and JSON using Yojson. Works with a type representing different kinds of folding ranges in code. Used to encode and decode folding range information in language server protocols.",
      "description_length": 243,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InsertTextMode",
      "description": "Handles serialization and deserialization of text insertion mode data between JSON and an internal representation. Works with a custom type `t` that encapsulates mode-specific configuration. Used to persist and load user input settings in a structured format.",
      "description_length": 259,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionItemKind",
      "description": "Converts between a custom type and JSON representations using Yojson. Works with a sealed type representing different kinds of completion items. Used to serialize and deserialize completion item metadata in language server protocols.",
      "description_length": 233,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionItemTag",
      "description": "Converts between a structured data type and its JSON representation, enabling serialization and deserialization. Works with a custom type that encapsulates information for code completion suggestions. Used to exchange completion item data between a language server and client.",
      "description_length": 276,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CodeActionKind",
      "description": "Handles conversion between a custom type and JSON data using Yojson, enabling serialization and deserialization. Works with a polymorphic variant type representing different code action kinds. Used to encode and decode structured code action information in language server protocols.",
      "description_length": 283,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.PositionEncodingKind",
      "description": "Encodes and decodes values between a custom type and JSON format using Yojson. Works with a sealed type representing positional encoding configurations. Used to serialize and deserialize configuration data in a data interchange context.",
      "description_length": 236,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticSeverity",
      "description": "Converts between a custom type and JSON representations using Yojson. Handles structured data for diagnostic severity levels in a static, type-safe manner. Used to serialize and deserialize severity information in logging or configuration systems.",
      "description_length": 247,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeActionTriggerKind",
      "description": "Handles conversion between JSON values and a custom type representing code action trigger kinds. Works with the `t` type and JSON objects using Yojson. Used to serialize and deserialize code action triggers in language server protocols.",
      "description_length": 236,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionTriggerKind",
      "description": "Converts between a custom type and JSON representations using Yojson. Handles serializing and deserializing values for use in configuration files or API responses. Works with a type representing different trigger kinds in a completion system.",
      "description_length": 242,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InsertTextFormat",
      "description": "Handles conversion between a custom text formatting type and JSON data, using Yojson for serialization and deserialization. Works with a structured representation of text formatting options, including styles and annotations. Used to persist and load formatted text configurations in a data exchange context.",
      "description_length": 307,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.NotebookCellKind",
      "description": "Handles serialization and deserialization of notebook cell kinds between OCaml values and JSON. Operates on a type representing different cell categories, such as code or markdown. Used to convert cell data for storage or transmission in JSON format.",
      "description_length": 250,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileChangeType",
      "description": "Handles serialization and deserialization of file change types between JSON and an internal representation. Operates on a custom type `t` that encodes different kinds of file modifications. Used to parse and generate JSON data in systems tracking version control or file synchronization events.",
      "description_length": 294,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WatchKind",
      "description": "Converts between a custom type and JSON representations using Yojson. Handles structured data with specific serialization and deserialization logic. Used to parse and generate JSON from a domain-specific data structure.",
      "description_length": 219,
      "index": 60,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Lsp.Types.DocumentDiagnosticReportKind",
      "description": "Handles serialization and deserialization of document diagnostic report kinds between OCaml values and JSON format. Works with the opaque type `t` representing different diagnostic report categories. Used to convert diagnostic data for storage or transmission in JSON-based systems.",
      "description_length": 282,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentHighlightKind",
      "description": "Converts between a custom type and JSON representations using Yojson. Handles structured data for document highlighting information. Used to serialize and deserialize highlight kind definitions in text processing workflows.",
      "description_length": 223,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FileOperationPatternKind",
      "description": "Handles serialization and deserialization of file operation patterns between JSON and an internal representation. Works with the `t` type, which encodes specific file operation behaviors. Used to parse and generate JSON configurations for file processing workflows.",
      "description_length": 265,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TraceValues",
      "description": "Converts between a custom type and JSON representations using Yojson, enabling serialization and deserialization. Works with a structured data type that encapsulates trace information. Used to persist and retrieve trace data in a format compatible with JSON-based systems.",
      "description_length": 272,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentSyncKind",
      "description": "Handles serialization and deserialization of text document synchronization kinds between OCaml values and JSON. Operates on a custom type representing synchronization modes used in language server protocols. Used to convert between JSON data received from clients and internal representations during document updates.",
      "description_length": 317,
      "index": 65,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlayHintKind",
      "description": "Provides serialization and deserialization between a custom type and JSON using Yojson. Works with a polymorphic variant type representing different inlay hint categories. Used to encode and decode inlay hint information in language server protocol interactions.",
      "description_length": 262,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineCompletionTriggerKind",
      "description": "Handles conversion between JSON representations and an internal type for inline completion trigger kinds. Works with the `t` type, which encodes specific trigger conditions in an editor context. Used to serialize and deserialize trigger configurations in language server protocols.",
      "description_length": 281,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MessageType",
      "description": "Converts between a custom type and JSON representations using Yojson. Handles structured data exchange in applications requiring serialization and deserialization. Used to parse and generate JSON messages in networked systems.",
      "description_length": 226,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.UniquenessLevel",
      "description": "Handles conversion between a custom type and JSON data using Yojson. Provides parsing from and serialization to JSON objects. Used to ensure consistent representation of uniqueness levels in data exchange scenarios.",
      "description_length": 215,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MonikerKind",
      "description": "Converts between a custom type and JSON representations using Yojson, enabling serialization and deserialization. Works with a sealed type that encapsulates identifier metadata. Used to persist and retrieve structured moniker information in configuration files.",
      "description_length": 261,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokenModifiers",
      "description": "Provides serialization and deserialization between a custom type and JSON using Yojson. Works with a opaque type representing semantic token modifiers. Used to convert between JSON data received from a language server and internal representation during parsing.",
      "description_length": 261,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokenTypes",
      "description": "Converts between a custom type and JSON values using Yojson, enabling serialization and deserialization. Works with a type representing semantic token categories and modifiers. Used to encode and decode language server protocol tokens in editor integrations.",
      "description_length": 258,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureHelpTriggerKind",
      "description": "Provides serialization and deserialization between a custom type and JSON using Yojson. Works with a type representing different trigger kinds for signature help in interactive environments. Used to encode and decode trigger information in language server protocols.",
      "description_length": 266,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentSaveReason",
      "description": "Handles serialization and deserialization of document save reasons between OCaml values and JSON format. Works with a custom type representing different reasons a text document might be saved. Used to encode save triggers in editor state persistence and communication with external tools.",
      "description_length": 288,
      "index": 74,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Position",
      "description": "Creates a position with specified character and line numbers. Converts between the position type and JSON representations using Yojson. Works with a record type containing integer-based character and line fields. Used to track cursor positions in text editors or parser error reporting.",
      "description_length": 286,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Range",
      "description": "Creates a range from a start and end position, representing a span in a source file. Works with Position.t to define boundaries and provides serialization to and from JSON. Used to track code segments for highlighting or error reporting.",
      "description_length": 237,
      "index": 76,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ChangeAnnotationIdentifier",
      "description": "Converts between a string-based identifier and its JSON representation using Yojson. Processes values that are strictly strings, ensuring consistent serialization and deserialization. Used to handle identifier transformations in data exchange scenarios, such as API responses or configuration files.",
      "description_length": 299,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.AnnotatedTextEdit",
      "description": "Provides operations to create and serialize annotated text edits, including converting between JSON and an internal representation. Works with strings, ranges, and custom annotation identifiers. Used to represent changes in text editors that include both content and metadata.",
      "description_length": 276,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeleteFileOptions",
      "description": "Provides functions to create and serialize options for file deletion, including flags to ignore missing files and recursively delete directories. Works with a record type containing boolean flags. Used to configure file removal behavior in system operations and configuration parsing.",
      "description_length": 284,
      "index": 79,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DeleteFile",
      "description": "Creates a deletion operation with optional annotation ID and options, associated with a specific document URI. Works with `ChangeAnnotationIdentifier.t` and `DeleteFileOptions.t` to define deletion context. Used to generate structured deletion requests for document management systems.",
      "description_length": 285,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RenameFileOptions",
      "description": "Provides functions to create and serialize options for file renaming, including flags to ignore existing files or force overwrites. Works with a record type containing boolean flags for file operation behavior. Used to configure file rename actions in command-line tools or script interfaces.",
      "description_length": 292,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RenameFile",
      "description": "Provides operations to construct and serialize a file rename action, including creating a rename event with annotations, URIs, and options. Works with types such as ChangeAnnotationIdentifier.t, DocumentUri.t, and RenameFileOptions.t. Used to generate structured data for tracking file renames in a language server context.",
      "description_length": 323,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CreateFileOptions",
      "description": "Provides functions to construct and serialize configuration options for file creation, including handling existence checks and overwriting behavior. Works with a record type containing boolean flags for ignoring existing files and overwriting. Used to generate structured file creation settings from JSON and initialize default options.",
      "description_length": 336,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CreateFile",
      "description": "Creates a file structure with optional annotation ID and options, based on a document URI. Works with `ChangeAnnotationIdentifier.t`, `CreateFileOptions.t`, and `DocumentUri.t` types. Used to generate file creation requests in a language server context.",
      "description_length": 253,
      "index": 84,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.OptionalVersionedTextDocumentIdentifier",
      "description": "Provides operations to construct a versioned document identifier from a URI and optional version, and to serialize/deserialize it using Yojson. Works with the DocumentUri.t type and a record type containing a URI and integer version. Used to represent documents in a versioned state for language server protocols or persistent storage.",
      "description_length": 335,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextEdit",
      "description": "Provides operations to create a text edit from a string and range, and to serialize/deserialize the edit to and from JSON. Works with the `Range.t` type to define edit boundaries and a record type representing the edit content. Used to apply changes in text documents during code editing or transformation workflows.",
      "description_length": 316,
      "index": 86,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentEdit",
      "description": "Provides operations to construct and serialize structured text edits, including both standard and annotated text edits, using a list of edit variants. Works with `TextEdit.t` and `AnnotatedTextEdit.t` to represent changes in text documents. Used to generate JSON-compatible representations for language server protocol interactions.",
      "description_length": 332,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ChangeAnnotation",
      "description": "Represents changes with labels, descriptions, and confirmation requirements, supporting JSON serialization and deserialization. Works with strings, booleans, and nested JSON structures. Used to track user-initiated modifications in a version control system, ensuring proper logging and validation before applying updates.",
      "description_length": 321,
      "index": 88,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceEdit",
      "description": "Provides operations to construct and serialize a workspace edit structure, including text edits, file creation, renaming, and deletion. Works with types such as DocumentUri, TextEdit, and custom file operation variants. Used to apply structured changes to a workspace in an editor or IDE context.",
      "description_length": 296,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ApplyWorkspaceEditParams",
      "description": "Provides functions to construct and serialize a workspace edit structure, including a constructor that accepts a workspace edit and an optional label. Works with the `WorkspaceEdit.t` type and JSON representations using Yojson. Used to prepare and transmit workspace modification requests in editor communication protocols.",
      "description_length": 323,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ApplyWorkspaceEditResult",
      "description": "Provides operations to construct and serialize a workspace edit result, including a constructor that takes a boolean for success, an optional integer for failed change index, and an optional string for failure reason. Works with a record type containing these fields. Used to encode the outcome of applying workspace edits in a format suitable for JSON serialization and deserialization.",
      "description_length": 387,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.BaseSymbolInformation",
      "description": "Provides functions to construct and serialize symbol information, including a constructor that accepts a container name, symbol kind, name, and tags, and converters between the type and JSON. Works with a record type containing symbol kind, name, container name, and tags. Used to encode symbol metadata for language server protocol interactions.",
      "description_length": 346,
      "index": 92,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyClientCapabilities",
      "description": "Provides functions to create and serialize a structure representing client capabilities for call hierarchy, including dynamic registration support. Works with a record type containing optional boolean fields. Used to encode and decode client capabilities in JSON format for communication with language servers.",
      "description_length": 310,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyItem",
      "description": "Provides functions to construct and serialize objects representing items in a call hierarchy, including creating instances with specific symbols, ranges, and metadata, and converting between JSON and internal representations. Works with types such as SymbolKind.t, Range.t, DocumentUri.t, and SymbolTag.t list. Used to build structured call hierarchy data for tools like IDEs or code analysis systems.",
      "description_length": 401,
      "index": 94,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CallHierarchyIncomingCall",
      "description": "Provides operations to construct and serialize a call hierarchy incoming call structure, including creating instances from a source item and ranges, and converting between JSON and internal representation. Works with `CallHierarchyItem.t` and `Range.t` to model call relationships. Used to track which functions call a specific symbol in code analysis tools.",
      "description_length": 358,
      "index": 95,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CallHierarchyIncomingCallsParams",
      "description": "Provides functions to create and serialize/deserialize a call hierarchy incoming calls parameter structure, including support for progress tokens. Works with `CallHierarchyItem.t` and `ProgressToken.t` to represent call relationships and tracking. Used to request incoming call information from a language server, such as identifying callers of a specific function or method.",
      "description_length": 375,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyOptions",
      "description": "Provides functions to create a configuration object for call hierarchy features, convert it to and from JSON format. Works with a record type containing optional work done progress flags. Used to serialize and deserialize settings for language server call hierarchy requests.",
      "description_length": 275,
      "index": 97,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CallHierarchyOutgoingCall",
      "description": "Provides operations to construct and serialize a call hierarchy outgoing call structure, including creating instances from range lists and call items, and converting between JSON and internal representations. Works with Range.t and CallHierarchyItem.t to represent code call relationships. Used to track function calls in static analysis tools for code navigation and dependency visualization.",
      "description_length": 393,
      "index": 98,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CallHierarchyOutgoingCallsParams",
      "description": "Provides functions to construct and serialize/deserialize a structured representation of outgoing call information from a code item, including support for progress tokens. Works with `CallHierarchyItem.t` and `ProgressToken.t` to encode and decode data in JSON format. Used to transmit call hierarchy details in language server protocols.",
      "description_length": 338,
      "index": 99,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentIdentifier",
      "description": "Represents a text document identifier using a URI, with conversion functions for JSON serialization and deserialization. Works with the DocumentUri.t type to uniquely reference documents. Used to encode and decode document identifiers in language server protocol messages.",
      "description_length": 272,
      "index": 100,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CallHierarchyPrepareParams",
      "description": "Provides functions to construct and serialize a structure representing parameters for call hierarchy preparation, including a position and text document identifier. Works with Position.t and TextDocumentIdentifier.t types, and supports JSON serialization via Yojson. Used to prepare data for call hierarchy requests in language server protocols.",
      "description_length": 345,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.NotebookCellTextDocumentFilter",
      "description": "Filters text documents based on notebook language and structure, supporting both string literals and nested notebook document filters. Operates on JSON representations using Yojson for serialization and deserialization. Used to refine document processing pipelines by applying language-specific or structured filtering rules.",
      "description_length": 325,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentFilter",
      "description": "Encodes and decodes values between a custom type and JSON format using Yojson. Works with a variant type that represents structured document metadata. Used to serialize and deserialize document configurations in a parsing pipeline.",
      "description_length": 231,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentSelector",
      "description": "Handles conversion between JSON representations and a list of document filters, enabling serialization and deserialization of filter configurations. Operates on a list of DocumentFilter values, allowing structured storage and retrieval of filtering criteria. Used to persist or transmit sets of document selection rules in a format compatible with JSON-based systems.",
      "description_length": 367,
      "index": 104,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CallHierarchyRegistrationOptions",
      "description": "Provides functions to construct and serialize a structure representing options for call hierarchy registration, including document filtering, unique identifiers, and progress tracking. Works with document selectors, strings, and booleans to define registration parameters. Used to configure language server behavior when handling call hierarchy requests in code analysis tools.",
      "description_length": 377,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CancelParams",
      "description": "Creates a structured representation from a JSON-RPC ID, converts between the structure and JSON format using Yojson, and supports serialization and deserialization for RPC parameter handling. Works with JSON-RPC ID values and JSON data structures. Used to manage cancellation requests in RPC communication by encoding and decoding parameter payloads.",
      "description_length": 350,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceEditClientCapabilities",
      "description": "Provides functions to construct and serialize a workspace edit client capabilities object, including support for change annotations, document changes, and resource operations. Works with types representing capability configurations and JSON serialization. Used to configure client-side handling of workspace edits in language server protocols.",
      "description_length": 343,
      "index": 107,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceSymbolClientCapabilities",
      "description": "Provides functions to construct and serialize objects representing client capabilities for workspace symbols, including support for symbol tags, kinds, and resolution. Works with types such as `tagSupport`, `symbolKind`, `resolveSupport`, and a generic `t` type. Used to configure language client behavior in LSP implementations, ensuring symbols are correctly annotated and resolved.",
      "description_length": 384,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensWorkspaceClientCapabilities",
      "description": "Provides functions to create a configuration object, serialize it to JSON, and deserialize it from JSON. Works with a record type containing optional refresh support settings. Used to manage client capabilities for semantic token requests in a language server context.",
      "description_length": 268,
      "index": 109,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlineValueWorkspaceClientCapabilities",
      "description": "Provides operations to create a configuration object, convert it to and from JSON format. Works with a record type containing optional refresh support. Used to serialize and deserialize client capabilities in a language server protocol context.",
      "description_length": 244,
      "index": 110,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHintWorkspaceClientCapabilities",
      "description": "Provides operations to create a configuration object, serialize it to JSON, and deserialize it from JSON. Works with a record type containing optional boolean fields. Used to manage client capabilities for inlay hint support in a language server protocol context.",
      "description_length": 263,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FoldingRangeWorkspaceClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a structure representing client capabilities for folding ranges in a workspace. Works with a record type containing optional boolean fields. Used to encode and decode client support for dynamic folding range updates in language server protocols.",
      "description_length": 302,
      "index": 112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileOperationClientCapabilities",
      "description": "Provides methods to construct and serialize a client capabilities object for file operations, including creation, deletion, and renaming. Works with a record type containing boolean flags for each operation and dynamic registration support. Used to configure client behavior in LSP-based editors when handling file system changes.",
      "description_length": 330,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ExecuteCommandClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a command client capabilities structure, supporting dynamic registration settings. Works with a record type containing optional dynamic registration flags. Used to configure command execution behavior in language client implementations.",
      "description_length": 293,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeWatchedFilesClientCapabilities",
      "description": "Provides functions to create and serialize a configuration object for handling file change notifications, including dynamic registration and relative pattern support. Works with a record type containing boolean flags for these features. Used to configure client behavior in language server protocols when monitoring file system changes.",
      "description_length": 336,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeConfigurationClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a configuration client capabilities object. Works with a record type containing optional dynamic registration support. Used to handle language client configuration updates in a JSON-based protocol.",
      "description_length": 254,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticWorkspaceClientCapabilities",
      "description": "Provides functions to create a configuration object, convert it to and from JSON format. Works with a record type containing optional refresh support. Used to serialize and deserialize client capabilities in a diagnostic workspace context.",
      "description_length": 239,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeLensWorkspaceClientCapabilities",
      "description": "Provides functions to create a configuration object, serialize it to JSON, and deserialize it from JSON. Works with a record type containing optional refresh support. Used to manage client capabilities in a code lens workspace context.",
      "description_length": 235,
      "index": 118,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceClientCapabilities",
      "description": "Provides methods to construct and serialize client capabilities for a workspace, including support for code lenses, diagnostics, file operations, and workspace symbols. Works with specific record types representing various client capability subsets. Used to configure and communicate workspace features in a language server protocol context.",
      "description_length": 341,
      "index": 119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ShowMessageRequestClientCapabilities",
      "description": "Provides functions to construct and serialize message action items and request capabilities, working with record types for structured data. Includes conversion between JSON and OCaml types using Yojson. Used to encode client support for message actions in protocol interactions.",
      "description_length": 278,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ShowDocumentClientCapabilities",
      "description": "Provides operations to create a document client capability structure, convert it to and from JSON format using Yojson. Works with a record type containing a boolean flag representing support status. Used to serialize and deserialize client capability settings in a JSON-based communication protocol.",
      "description_length": 299,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WindowClientCapabilities",
      "description": "Provides functions to construct and serialize client capabilities for window-related features, including show document, show message, and work done progress. Works with a record type containing optional fields for specific capability configurations. Used to initialize and encode client capabilities in JSON format for communication with language servers.",
      "description_length": 355,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeHierarchyClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a type hierarchy client capability structure. Works with a record type containing optional dynamic registration settings. Used to encode and decode client capabilities in JSON format for communication with language servers.",
      "description_length": 280,
      "index": 123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TypeDefinitionClientCapabilities",
      "description": "Provides functions to construct and serialize a type definition client capability structure, including support for dynamic registration and link handling. Works with a record type containing boolean flags for specific capabilities. Used to encode and decode client capabilities in JSON format for language server communication.",
      "description_length": 327,
      "index": 124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentSyncClientCapabilities",
      "description": "Provides operations to create and serialize a document synchronization client capability structure, including flags for save and save wait until behavior. Works with a record type containing boolean fields for specific synchronization features. Used to configure client support for text document synchronization in language server protocols.",
      "description_length": 341,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureHelpClientCapabilities",
      "description": "Provides functions to construct and serialize objects representing signature help client capabilities, including parameter and signature information with optional documentation formats and active parameter support. Works with types such as parameterInformation, signatureInformation, and a generic t type for client capabilities. Used to encode and decode JSON representations of client support for language server protocol features like parameter labels and dynamic registration.",
      "description_length": 480,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensClientCapabilities",
      "description": "Provides functions to construct and serialize objects representing client capabilities for semantic tokens, including full updates and request configurations. Works with types such as `full`, `requests`, and `t`, which encapsulate settings like token formats, dynamic registration, and support for range requests. Used to configure client-side support for language server protocol features like token augmentation and cancellation.",
      "description_length": 431,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SelectionRangeClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a structured data type representing client capabilities for selection ranges. Works with a record type containing optional dynamic registration settings. Used to encode and decode client support information in JSON format for communication protocols.",
      "description_length": 307,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RenameClientCapabilities",
      "description": "Provides functions to construct and serialize a client capabilities structure used in language server protocols, supporting dynamic registration, change annotations, and prepare support settings. Works with a record type containing boolean flags and a specific prepare support behavior enum. Used to configure client behavior in JSON-based communication with language servers.",
      "description_length": 376,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ReferenceClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a structured data type representing client capabilities, including optional dynamic registration support. Works with a record type containing configuration flags and settings. Used to encode and decode client capabilities in communication protocols, such as during language server initialization.",
      "description_length": 353,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentRangeFormattingClientCapabilities",
      "description": "Provides functions to create and serialize a document range formatting client capability structure, supporting dynamic registration and range formatting. Works with a record type containing boolean flags for capability configuration. Used to configure language client behavior in JSON-based communication protocols.",
      "description_length": 315,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.PublishDiagnosticsClientCapabilities",
      "description": "Provides functions to construct and serialize a data structure representing client capabilities for diagnostic support, including tag, code description, data, related information, and version support. Works with custom types such as `tagSupport` and `t`, and supports JSON serialization via Yojson. Used to configure and exchange diagnostic client capabilities in language server protocols.",
      "description_length": 390,
      "index": 132,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentOnTypeFormattingClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a structured representation of client capabilities related to document on-type formatting. Works with a record type containing optional dynamic registration settings. Used to exchange configuration details between a language server and client in a JSON-compatible format.",
      "description_length": 328,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MonikerClientCapabilities",
      "description": "Provides functions to create a configuration object with optional dynamic registration support, and to serialize/deserialize the object to and from JSON. Works with a record type containing a boolean flag for dynamic registration. Used to handle client capabilities in a protocol where configuration needs to be both instantiated and encoded for transmission.",
      "description_length": 359,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.LinkedEditingRangeClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a structured data type representing client capabilities for linked editing ranges. Works with a record type containing optional dynamic registration settings. Used to encode and decode configuration data for language client interactions in editor extensions.",
      "description_length": 315,
      "index": 135,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a structured data type representing client capabilities for inline value requests. Works with a record type containing optional dynamic registration settings. Used to encode and decode configuration data for language client interactions in a JSON-based protocol.",
      "description_length": 319,
      "index": 136,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlineCompletionClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a structure representing client capabilities for inline completion, including support for dynamic registration. Works with a record type containing optional boolean fields. Used to encode and decode client capability data in JSON format for communication with language servers.",
      "description_length": 334,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHintClientCapabilities",
      "description": "Provides functions to construct and serialize a structure representing client capabilities for inlay hints, including support for resolving hint details. Works with a `resolveSupport` record containing property names and a `t` type encapsulating client settings. Used to parse and generate JSON representations for communication with language servers.",
      "description_length": 351,
      "index": 138,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ImplementationClientCapabilities",
      "description": "Provides functions to create and serialize client capability data structures, including dynamic registration and link support flags. Works with a record type containing boolean fields for configuration settings. Used to generate and parse JSON representations for communication with language servers.",
      "description_length": 300,
      "index": 139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.HoverClientCapabilities",
      "description": "Provides functions to construct and serialize a structure representing client capabilities for hover features, including support for markup content formats and dynamic registration. Works with a record type containing optional fields for markup kinds and a boolean flag. Used to parse and generate JSON representations of client capabilities in a language server protocol context.",
      "description_length": 380,
      "index": 140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentFormattingClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a document formatting client capabilities structure, including support for dynamic registration. Works with a record type containing configuration options for client capabilities. Used to handle JSON-based client capability data in language server protocols.",
      "description_length": 315,
      "index": 141,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FoldingRangeClientCapabilities",
      "description": "Provides functions to construct and serialize data structures for client capabilities related to code folding, including creating folding range kinds, folding ranges, and the overall capability object. Works with types such as foldingRangeKind, foldingRange, and t, which represent specific aspects of folding behavior and limits. Used to configure and serialize client support for language server protocol features like range-based folding and collapsed text.",
      "description_length": 460,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentSymbolClientCapabilities",
      "description": "Provides functions to construct and serialize objects representing client capabilities for document symbols, including tag support, symbol kinds, and hierarchical symbol support. Works with types such as `tagSupport`, `symbolKind`, and a generic `t` structure for client capabilities. Used to configure and serialize client support for symbol operations in language servers.",
      "description_length": 374,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentLinkClientCapabilities",
      "description": "Provides functions to create and serialize a document link client capabilities structure, supporting dynamic registration and tooltip features. Works with a record type containing boolean flags for client-side configuration. Used to encode and decode capability settings in language server protocols.",
      "description_length": 300,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentHighlightClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a document highlight client capability structure. Works with a record type containing optional dynamic registration settings. Used to encode and decode configuration data for client-side document highlighting features in a JSON-based protocol.",
      "description_length": 300,
      "index": 145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticClientCapabilities",
      "description": "Provides functions to construct and serialize a structure representing client capabilities for diagnostics, including support for dynamic registration, markup messages, and related documents. Works with a record type containing boolean flags for specific features. Used to encode and decode client capability data in JSON format for communication with language servers.",
      "description_length": 369,
      "index": 146,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DefinitionClientCapabilities",
      "description": "Provides functions to construct and serialize a structure representing client capabilities, including dynamic registration and link support. Works with a record type containing boolean flags for specific features. Used to parse and generate JSON representations for communication with language clients.",
      "description_length": 302,
      "index": 147,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeclarationClientCapabilities",
      "description": "Provides functions to construct and serialize a configuration object for client capabilities, supporting dynamic registration and link support. Works with a record type containing boolean flags for specific features. Used to encode and decode client capability settings in JSON format for communication with language servers.",
      "description_length": 325,
      "index": 148,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CompletionClientCapabilities",
      "description": "Provides functions to construct and serialize JSON objects representing client capabilities for code completion, including completion lists, item kinds, insert text modes, and item details. Works with types like completionList, completionItem, and insertTextModeSupport to model structured data for language server protocols. Used to generate precise client capability configurations for integrating with editors supporting intelligent code completion.",
      "description_length": 452,
      "index": 149,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentColorClientCapabilities",
      "description": "Provides functions to create and serialize a document color client capability structure, including parsing from and converting to JSON. Works with a record type containing optional dynamic registration settings. Used to configure client support for document color features in language server protocols.",
      "description_length": 302,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeLensClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a structure representing client capabilities for CodeLens, including optional dynamic registration support. Works with a record type containing configuration flags and settings. Used to exchange client capability data between the editor and language server in a structured, serializable format.",
      "description_length": 351,
      "index": 151,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CodeActionClientCapabilities",
      "description": "Provides functions to construct and serialize objects representing client capabilities for code actions, including support for resolving code actions, defining valid kinds, and specifying literal support. Works with types such as resolveSupport, codeActionKind, codeActionLiteralSupport, and a generic t type for client capabilities. Used to configure language client behavior in LSP-based tools, ensuring compatibility with servers that require specific code action features.",
      "description_length": 476,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentClientCapabilities",
      "description": "Provides a structured way to represent client capabilities for various text document features, including code actions, completion, formatting, and diagnostics. Works with nested record types that encapsulate specific client behavior for each feature. Used to serialize and deserialize client capabilities between OCaml and JSON formats for communication in language server protocols.",
      "description_length": 383,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentSyncClientCapabilities",
      "description": "Provides functions to create and serialize a document synchronization client capability structure, including dynamic registration and execution summary support. Works with a record type containing boolean flags for specific capabilities. Used to configure client behavior in notebook document synchronization protocols.",
      "description_length": 319,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentClientCapabilities",
      "description": "Provides functions to create, serialize, and deserialize a structured representation of client capabilities for notebook document synchronization. Works with a record type containing synchronization-specific settings. Used to exchange configuration data between client and server in a JSON-compatible format.",
      "description_length": 308,
      "index": 155,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.RegularExpressionsClientCapabilities",
      "description": "Provides functions to create and serialize a regular expression client capability structure, including parsing from and converting to JSON. Works with a record type containing an engine name and optional version string. Used to configure and exchange regex engine details in a language server protocol context.",
      "description_length": 310,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MarkdownClientCapabilities",
      "description": "Provides functions to construct and serialize client capabilities for a Markdown processor, including parsing configuration and version control. Works with a record type containing allowed tags, parser name, and version. Used to initialize and persist settings for rendering Markdown in a controlled environment.",
      "description_length": 312,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.GeneralClientCapabilities",
      "description": "Provides functions to construct and serialize client capabilities objects, including support for stale request handling with cancellation and content modification policies. Works with types such as markdown capabilities, position encodings, regular expressions, and custom stale request configurations. Used to generate structured data for client-server communication in language tools.",
      "description_length": 386,
      "index": 158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ClientCapabilities",
      "description": "Provides functions to construct and serialize client capability objects, including parsing from and converting to JSON. Works with nested records representing specific LSP client capabilities such as text document, window, and workspace features. Used to initialize and transmit client support for language server protocol extensions and features.",
      "description_length": 347,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Location",
      "description": "Provides functions to construct a location from a range and document URI, and to serialize/deserialize locations to and from JSON. Works with range and document URI data structures to represent code positions. Used to encode source locations in language server protocols and JSON-based configuration files.",
      "description_length": 306,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticRelatedInformation",
      "description": "Provides functions to construct a diagnostic-related information record from a location and message, and to serialize/deserialize it to and from JSON. Works with the Location.t type and a structured record containing a location and a message string. Used to encode error context for transmission in JSON-based diagnostic protocols.",
      "description_length": 331,
      "index": 161,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MarkupContent",
      "description": "Provides operations to construct a structured content object from a markup kind and string value, and to convert between the object and JSON representations. Works with a record type containing a markup kind and a string value. Used to encode and decode rich text content in a format compatible with language server protocols.",
      "description_length": 326,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeDescription",
      "description": "Provides functions to construct a code description from a document URI, parse a code description from a JSON value, and serialize a code description to a JSON value. Works with the DocumentUri.t type and a custom record type representing code metadata. Used to initialize and exchange code information in a structured, serialized format.",
      "description_length": 337,
      "index": 163,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Diagnostic",
      "description": "Provides functions to construct and serialize diagnostic information used in language servers, including creating diagnostics with messages, ranges, codes, and related information. Works with types such as `Range.t`, `MarkupContent.t`, and `CodeDescription.t` to represent structured error or warning data. Used to generate detailed error reports for integration with IDEs and linters.",
      "description_length": 385,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Command",
      "description": "Creates a command structure with a name, title, and optional arguments, using JSON for serialization and deserialization. Operates on JSON values and a custom command record type. Used to encode and decode command configurations for CLI interactions or configuration files.",
      "description_length": 273,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeAction",
      "description": "Provides functions to construct and serialize code action objects with optional command, edit, diagnostics, and disabled status. Works with types including Command.t, WorkspaceEdit.t, Diagnostic.t, and CodeActionKind.t. Used to generate actionable suggestions in IDEs during code analysis.",
      "description_length": 289,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeActionContext",
      "description": "Provides functions to construct a context for code actions using a list of diagnostics, optional filtering by action kind and trigger kind, and serializes/deserializes the context to and from JSON. Works with diagnostic lists, code action kinds, and trigger kinds. Used to generate actionable insights during code analysis or editor extensions.",
      "description_length": 344,
      "index": 167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CodeActionOptions",
      "description": "Provides functions to create and serialize code action options, including support for code action kinds, resolve providers, and work done progress. Works with a record type containing optional boolean flags and a list of code action kinds. Used to configure code action behavior in language server protocols.",
      "description_length": 308,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeActionParams",
      "description": "Provides functions to construct and serialize/deserialize a structured code action parameter object, including a range, text document identifier, and contextual information. Works with types such as Range, TextDocumentIdentifier, ProgressToken, and CodeActionContext. Used to encode request data for code actions in language server protocols, ensuring precise formatting and transmission of editing context.",
      "description_length": 407,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeActionRegistrationOptions",
      "description": "Provides functions to create and serialize a configuration object for code action registration, including code action kinds, document selectors, and flags for resolution and progress tracking. Works with lists of code action kinds, document selectors, and boolean flags. Used to configure language server support for code actions in specific file types and enable client-side resolution of action details.",
      "description_length": 405,
      "index": 170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeLens",
      "description": "Provides operations to construct and serialize code lens data, including creating instances with a command, range, and arbitrary data, and converting between JSON and internal representations. Works with range structures, command objects, and JSON values. Used to embed actionable metadata within code sources for IDE integration.",
      "description_length": 330,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeLensOptions",
      "description": "Provides functions to create and serialize a configuration object for CodeLens features, including resolving providers and work done progress flags. Works with a record type containing boolean fields for optional settings. Used to initialize and persist CodeLens options in a structured, serializable format.",
      "description_length": 308,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeLensParams",
      "description": "Provides functions to construct and serialize a structured data type representing parameters for code lens operations, including creating instances with document identifiers and progress tokens, and converting between JSON and the internal representation. Works with text document identifiers and progress tokens as part of its data structure. Used to transmit and process code lens request parameters in a language server context.",
      "description_length": 431,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeLensRegistrationOptions",
      "description": "Provides functions to construct and serialize a configuration object for code lens registration, including document selector filtering, resolution support, and progress tracking. Works with document selectors and boolean flags to customize behavior. Used to define how code lenses are fetched and updated in an editor extension.",
      "description_length": 328,
      "index": 174,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.Color",
      "description": "Creates color values from RGBA components and converts between color objects and JSON representations. Operates on a record type containing red, green, blue, and alpha channels. Used to serialize and deserialize color data in applications handling image formats or UI configurations.",
      "description_length": 283,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ColorInformation",
      "description": "Provides functions to construct an object from a color and range, and to convert between the object and JSON representations. Works with color values and range structures typically used in text editors. Used to encode visual properties of code elements for language server protocols.",
      "description_length": 283,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ColorPresentation",
      "description": "Creates a color presentation with a label and optional text edits or additional edits. Works with string labels and text edit structures to represent color formatting in code. Used to generate structured color data for editor extensions or syntax highlighting.",
      "description_length": 260,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ColorPresentationParams",
      "description": "Provides functions to construct and serialize/deserialize a structured representation of color presentation parameters, including a color, range, text document identifier, and progress tokens. Works with types such as Color.t, Range.t, TextDocumentIdentifier.t, and ProgressToken.t. Used to encode details for color-related language server requests and responses.",
      "description_length": 363,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionContext",
      "description": "Provides functions to create a context for code completion, including parsing and serializing the context to and from JSON. Works with a record type containing trigger information and kind. Used to track user input patterns in an editor's completion system.",
      "description_length": 257,
      "index": 179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InsertReplaceEdit",
      "description": "Provides operations to create and serialize edit objects representing text insertions and replacements, using Range.t for position tracking and string for content. Works with structured data types including a record type containing insert and replace ranges along with new text. Used to generate precise text modifications in code editors or document processors.",
      "description_length": 362,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CompletionItemLabelDetails",
      "description": "Provides functions to construct and serialize a structured label with optional description and detail fields. Works with a record type containing string fields for description and detail. Used to format rich labels in completion suggestions for code editors or IDEs.",
      "description_length": 266,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionItem",
      "description": "Provides functions to construct and serialize completion items used in language servers, supporting text edits, command associations, and rich formatting. Works with types like TextEdit, Command, MarkupContent, and custom JSON structures. Used to generate structured responses for auto-completion suggestions in IDEs and code editors.",
      "description_length": 334,
      "index": 182,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.CompletionList",
      "description": "Provides functions to construct and serialize completion data structures, including edit ranges, item defaults, and a complete list of completion items. Operates on types like `editRange`, `itemDefaults`, and `CompletionItem.t` to represent code completion metadata. Used to generate structured completion responses for IDE features like autocompletion and snippet insertion.",
      "description_length": 375,
      "index": 183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionOptions",
      "description": "Provides functions to construct and serialize completion options and completion items for language server protocols. Works with custom types `completionItem` and `t` that encapsulate settings like commit characters, resolve providers, and trigger characters. Used to configure autocompletion behavior in editor extensions or IDE integrations.",
      "description_length": 342,
      "index": 184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionParams",
      "description": "Provides functions to construct and serialize a completion request parameter structure, including position, text document identifier, and optional context or progress tokens. Works with Position, TextDocumentIdentifier, CompletionContext, and ProgressToken types. Used to encode and decode JSON representations of language server completion requests.",
      "description_length": 350,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CompletionRegistrationOptions",
      "description": "Provides functions to construct and serialize completion options and completion items, including support for label details, document selectors, and trigger characters. Works with custom types `completionItem` and `t` that encapsulate editor completion settings. Used to configure language server responses for auto-completion features in code editors.",
      "description_length": 351,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ConfigurationItem",
      "description": "Provides methods to construct and serialize configuration data, including creating instances with optional scope and section, and converting between JSON and internal representation. Works with a record type containing optional URI and string fields. Used to parse and generate configuration settings from JSON documents.",
      "description_length": 321,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ConfigurationParams",
      "description": "Provides functions to construct a configuration from a list of items, parse a configuration from a JSON value, and serialize a configuration to a JSON value. Works with a record type containing configuration items and JSON representations. Used to load and save configuration settings from and to files in a structured format.",
      "description_length": 326,
      "index": 188,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FileCreate",
      "description": "Creates a file structure from a URI string, converts between the file type and JSON representations, and supports serialization and deserialization. Works with a structured type containing file metadata and content. Used to generate and process file objects in data exchange workflows.",
      "description_length": 285,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CreateFilesParams",
      "description": "Provides operations to construct a parameter structure from a list of file creation objects, parse a JSON representation into this structure, and serialize it back to JSON. Works with a record type containing file creation details and a JSON type from the Yojson library. Used to handle file generation parameters in a structured, serializable format for configuration or API interactions.",
      "description_length": 389,
      "index": 190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Declaration",
      "description": "Converts between a custom type and JSON representations using Yojson. Handles structured data with specific encoding and decoding logic. Used to serialize and deserialize configuration objects in a parser.",
      "description_length": 205,
      "index": 191,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.LocationLink",
      "description": "Provides operations to construct and serialize a location link structure, including creating a link with specific ranges and a URI, and converting between JSON and the internal representation. Works with range and URI data types to represent code navigation targets. Used to encode jump-to-definition or find-references information in language server protocols.",
      "description_length": 361,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeclarationLink",
      "description": "Converts between a JSON representation and a location link structure, enabling serialization and deserialization of code navigation data. Operates on a type representing links between declarations and their references in source code. Used to persist or transmit information for IDE features like jump-to-definition or symbol lookup.",
      "description_length": 332,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeclarationOptions",
      "description": "Provides functions to create a configuration object with an optional work done progress flag, and to convert between the configuration type and JSON representations. Works with a record type containing a boolean field. Used to serialize and deserialize declaration options in a language server protocol context.",
      "description_length": 311,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeclarationParams",
      "description": "Provides functions to construct and serialize/deserialize a structured data type containing position, text document identifier, and progress tokens. Works with Position, TextDocumentIdentifier, and ProgressToken types to support incremental parsing or analysis tasks. Used to initialize and transmit parameter states in a language server context.",
      "description_length": 346,
      "index": 195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeclarationRegistrationOptions",
      "description": "Provides functions to create and serialize a configuration object for declaration registration, including parsing from and to JSON. Works with a record type containing optional fields for document selection, an identifier, and work progress tracking. Used to configure language server capabilities for handling declaration requests in specific document types.",
      "description_length": 359,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Definition",
      "description": "Converts between a custom type and JSON representations using Yojson. Handles nested structures and ensures type-safe serialization and deserialization. Used to parse configuration files and transmit data over networks.",
      "description_length": 219,
      "index": 197,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DefinitionLink",
      "description": "Converts between a custom type representing code navigation links and JSON values, enabling serialization and deserialization. Works with the `LocationLink.t` type to encode and decode structured link data. Used to persist or transmit link information between systems or store it in configuration files.",
      "description_length": 303,
      "index": 198,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DefinitionOptions",
      "description": "Provides functions to create a configuration object with an optional work done progress flag, and to convert between the configuration type and JSON representations. Works with a record type containing a boolean field. Used to serialize and deserialize configuration settings in a JSON-based protocol.",
      "description_length": 301,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DefinitionParams",
      "description": "Provides functions to construct and serialize/deserialize a structured representation of definition request parameters, including position, text document identifier, and progress tokens. Works with Position, TextDocumentIdentifier, and ProgressToken types. Used to handle language server protocol requests for locating symbol definitions in code.",
      "description_length": 346,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DefinitionRegistrationOptions",
      "description": "Provides functions to create and serialize a configuration object for tracking symbol definitions, including a constructor with optional document selection and work progress flags. Works with a record type containing these configuration parameters. Used to encode and decode definition registration settings in language server protocols.",
      "description_length": 337,
      "index": 201,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FileDelete",
      "description": "Provides functions to create and serialize/deserialize a file deletion request object. Works with a record type containing a URI string and implements JSON conversion using Yojson. Used to generate and process structured deletion commands in networked applications.",
      "description_length": 265,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DeleteFilesParams",
      "description": "Provides operations to construct, serialize, and deserialize a structured list of file deletion requests. Works with a custom type containing a list of `FileDelete.t` values. Used to encode parameters for deleting multiple files in a consistent, serializable format.",
      "description_length": 266,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticOptions",
      "description": "Provides functions to create and serialize configuration objects for diagnostic processing, including handling file dependencies, work progress, and workspace diagnostics. Works with a record type containing optional and required boolean flags and an identifier. Used to initialize and persist diagnostic settings in a structured, serializable format.",
      "description_length": 351,
      "index": 204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DiagnosticRegistrationOptions",
      "description": "Provides functions to construct and serialize a configuration object for diagnostic registration, including handling document selectors, identifiers, and progress flags. Works with custom types such as DocumentSelector and JSON representations for data interchange. Used to configure language server diagnostics with specific workspace and file dependency settings.",
      "description_length": 365,
      "index": 205,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DiagnosticServerCancellationData",
      "description": "Provides functions to create, serialize, and deserialize a data structure representing cancellation information for a diagnostic server, including a flag indicating whether a request should be retriggered. Works with a record type containing a single boolean field. Used to encode and decode cancellation data during communication with a server process.",
      "description_length": 353,
      "index": 206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DidChangeConfigurationParams",
      "description": "Provides functions to create and serialize/deserialize configuration parameters using JSON, with a focus on importing settings from a JSON structure. Works with the `Import.Json.t` type and the `Yojson.Safe.t` type for JSON parsing and generation. Used to handle updates to configuration settings in a language server context.",
      "description_length": 326,
      "index": 207,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DidChangeConfigurationRegistrationOptions",
      "description": "Provides functions to create and serialize configuration change options, supporting string or list sections. Works with a record type containing configuration section details. Used to handle language server configuration updates in JSON format.",
      "description_length": 244,
      "index": 208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.VersionedNotebookDocumentIdentifier",
      "description": "Creates a structured identifier for a notebook document with a specific URI and version, enabling precise tracking of changes. Works with a record type containing a document URI and an integer version. Used to serialize and deserialize document identifiers in a format suitable for storage or transmission.",
      "description_length": 306,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentContentChangeEvent",
      "description": "Provides operations to construct and serialize/deserialize text document content change events, including creating instances with optional range and text length, and converting between JSON and internal representation. Works with the `Range.t` type and a structured record type containing text and optional range information. Used to represent edits in a text document for synchronization or logging purposes.",
      "description_length": 409,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.VersionedTextDocumentIdentifier",
      "description": "Encapsulates a document identifier with a URI and a version number, enabling tracking of changes over time. Supports serialization and deserialization to and from JSON using Yojson. Used to uniquely reference document states in collaborative editing or version control systems.",
      "description_length": 277,
      "index": 211,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ExecutionSummary",
      "description": "Tracks execution status and order with a boolean success flag and integer sequence number. Processes and serializes data using Yojson for structured data exchange. Used to log and transmit execution results in distributed task systems.",
      "description_length": 235,
      "index": 212,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookCell",
      "description": "Provides functions to construct a notebook cell with a document URI, cell kind, optional execution summary, and metadata. Works with types including DocumentUri.t, NotebookCellKind.t, and JSON objects for serialization. Used to parse and generate notebook cell data from and to JSON format.",
      "description_length": 290,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentItem",
      "description": "Provides functions to construct and serialize/deserialize a structured text document representation. Works with strings, integers, and custom URI types to encapsulate language, content, and location data. Used to convert between JSON data and internal document state in language server protocols.",
      "description_length": 296,
      "index": 214,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookCellArrayChange",
      "description": "Provides operations to create a structured representation of changes to a notebook's cell array, including the start index, number of cells to delete, and an optional list of new cells. Works with integers, lists of notebook cells, and JSON data through Yojson serialization. Used to encode and decode delta updates for notebook content in a format suitable for transmission or storage.",
      "description_length": 386,
      "index": 215,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentChangeEvent",
      "description": "Provides functions to construct and serialize objects representing changes in a notebook document, including text content updates, cell structure modifications, and cell data adjustments. Works with types such as versioned text documents, cell arrays, and structured notebook data. Used to build incremental updates for notebook documents in an editor or synchronization system.",
      "description_length": 378,
      "index": 216,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DidChangeNotebookDocumentParams",
      "description": "Provides functions to construct and serialize/deserialize a notebook document change parameter structure. Works with `NotebookDocumentChangeEvent.t` and `VersionedNotebookDocumentIdentifier.t` to encapsulate document updates. Used to encode and decode JSON representations of notebook modifications in a language server context.",
      "description_length": 328,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeTextDocumentParams",
      "description": "Provides functions to construct and serialize/deserialize a document state based on content changes and versioned identifiers. Works with lists of content change events and versioned text document identifiers. Used to process updates from a text editor's change notifications in a language server context.",
      "description_length": 305,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileEvent",
      "description": "Provides constructors and serialization functions for file change events, including creating instances from a file change type and document URI, and converting between JSON and internal representations. Works with `FileChangeType.t` and `DocumentUri.t` to represent changes in document files. Used to encode and decode event data in language server protocols.",
      "description_length": 359,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeWatchedFilesParams",
      "description": "Provides operations to construct and serialize/deserialize a file change notification structure. Works with a list of file events and JSON representations using Yojson. Used to process updates from file system watchers in editor or build tools.",
      "description_length": 244,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Pattern",
      "description": "Converts between a string type and JSON values, enabling serialization and deserialization. Works directly with the string data type for structured data exchange. Used to parse and generate JSON from string representations in data-driven applications.",
      "description_length": 251,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceFolder",
      "description": "Provides operations to construct a workspace folder from a name and URI, and to serialize/deserialize it using Yojson. Works with the `DocumentUri.t` type and a record type containing name and URI fields. Used to persist or transmit workspace folder information in JSON format within editor or build systems.",
      "description_length": 308,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RelativePattern",
      "description": "Encapsulates a base URI and a pattern for matching file paths, supporting serialization and deserialization via JSON. Works with URI strings and pattern matching structures. Used to define and persist relative file matching rules in configuration files or build systems.",
      "description_length": 270,
      "index": 223,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.GlobPattern",
      "description": "Represents and converts glob pattern expressions between JSON and an internal structured format. Handles pattern matching operations such as wildcard expansion and character set interpretation. Used to parse and serialize user-specified file inclusion/exclusion rules in configuration files.",
      "description_length": 291,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileSystemWatcher",
      "description": "Monitors file system changes based on a glob pattern and watch kind, triggering events when files are added, modified, or removed. It handles structured data for configuration and serialization using JSON. Used to dynamically track changes in project directories or log files for real-time processing.",
      "description_length": 301,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeWatchedFilesRegistrationOptions",
      "description": "Provides functions to create and serialize a file system watcher configuration, including converting between the internal representation and JSON. Works with a list of file system watchers and a record type containing watcher settings. Used to register file change listeners in editor extensions or monitoring tools.",
      "description_length": 316,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceFoldersChangeEvent",
      "description": "Handles creation and serialization of workspace folder change events. Works with lists of WorkspaceFolder.t and JSON representations. Used to track folder additions and removals in a development environment's state.",
      "description_length": 215,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidChangeWorkspaceFoldersParams",
      "description": "Provides functions to create and serialize a workspace folders change event, including conversion to and from JSON. Works with the `WorkspaceFoldersChangeEvent.t` type and the `t` record structure. Used to handle updates to workspace folders in editor extensions or language servers.",
      "description_length": 283,
      "index": 228,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookDocumentIdentifier",
      "description": "Represents a document identifier using a URI, with serialization and deserialization to and from JSON. It handles operations to construct an instance from a URI and convert between the internal type and JSON format. Used to uniquely reference documents in a notebook context, such as in editor state synchronization.",
      "description_length": 316,
      "index": 229,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DidCloseNotebookDocumentParams",
      "description": "Provides functions to create and serialize/deserialize a structured representation of notebook document closure events, including associated cell text documents and the notebook identifier. Works with lists of text document identifiers and a single notebook document identifier. Used to encode and decode parameters for notebook closure notifications in a language server protocol context.",
      "description_length": 389,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidCloseTextDocumentParams",
      "description": "Provides functions to create, serialize, and deserialize a structured representation of text document close parameters. Works with the `TextDocumentIdentifier.t` type and JSON data through the Yojson library. Used to handle protocol messages in language server interactions when a text document is closed.",
      "description_length": 305,
      "index": 231,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.NotebookDocument",
      "description": "Provides operations to construct a notebook from a list of cells, metadata, type, URI, and version, and to serialize/deserialize it using Yojson. Works with lists of NotebookCell.t, JSON objects, strings, and document URIs. Used to load and save notebook content in a structured format for editor or IDE integration.",
      "description_length": 316,
      "index": 232,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DidOpenNotebookDocumentParams",
      "description": "Provides functions to construct and serialize/deserialize a notebook document structure containing a list of text cell documents and a main notebook document. Works with `TextDocumentItem.t` and `NotebookDocument.t` types. Used to encode parameters for opening a notebook in a language server protocol context.",
      "description_length": 310,
      "index": 233,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DidOpenTextDocumentParams",
      "description": "Provides functions to create, serialize, and deserialize a structured representation of an opened text document, including its URI, language ID, and content. Works with the `TextDocumentItem.t` type and JSON data through the Yojson library. Used to process and exchange document state in language server protocols.",
      "description_length": 314,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidSaveNotebookDocumentParams",
      "description": "Provides functions to create and serialize/deserialize a notebook document parameter structure. Works with the `NotebookDocumentIdentifier.t` type and a record type `t` representing saved notebook document parameters. Used to encode and decode parameters for notebook save events in a JSON-based communication protocol.",
      "description_length": 319,
      "index": 235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DidSaveTextDocumentParams",
      "description": "Provides functions to create and serialize/deserialize a document save parameter structure, including a constructor with optional text and a text document identifier. Works with a record type containing a text document identifier and optional text content. Used to handle save events in a language server, preserving document state and changes.",
      "description_length": 344,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentColorOptions",
      "description": "Provides functions to create a document color options object, convert it to and from JSON format using Yojson. Works with a record type containing optional work done progress information. Used to serialize and deserialize document color configuration data in JSON-based communication protocols.",
      "description_length": 294,
      "index": 237,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentColorParams",
      "description": "Provides functions to create and serialize/deserialize a document color parameter structure, including optional progress tokens and a text document identifier. Works with `ProgressToken.t` and `TextDocumentIdentifier.t` to encapsulate request details. Used to handle color information requests in language servers with precise tracking of progress and document context.",
      "description_length": 369,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentColorRegistrationOptions",
      "description": "Provides functions to create and serialize a document color registration option structure, including parsing from and converting to JSON. Works with a record type containing optional fields for document selectors, identifiers, and work done progress flags. Used to configure color support in language servers based on specific document types and progress tracking needs.",
      "description_length": 370,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentDiagnosticParams",
      "description": "Provides functions to construct and serialize a document diagnostic parameters object, including creating instances with optional fields like identifier, progress tokens, and text document references. Works with types such as TextDocumentIdentifier.t, ProgressToken.t, and string. Used to transmit diagnostic request data in language server protocols, including partial results and tracking.",
      "description_length": 391,
      "index": 240,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.UnchangedDocumentDiagnosticReport",
      "description": "Provides functions to construct, serialize, and deserialize a structured diagnostic report containing a result identifier. Works with a record type storing a string-based result ID. Used to generate and exchange diagnostic data in a standardized JSON format within a processing pipeline.",
      "description_length": 287,
      "index": 241,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FullDocumentDiagnosticReport",
      "description": "Provides operations to construct a report from a list of diagnostics and optional result ID, and to serialize/deserialize the report to and from JSON. Works with a record type containing diagnostic items and an optional string identifier. Used to generate structured diagnostic outputs for tools requiring JSON-based communication.",
      "description_length": 331,
      "index": 242,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.RelatedUnchangedDocumentDiagnosticReport",
      "description": "Provides operations to construct and serialize a diagnostic report structure that includes related documents and a result ID, using JSON associations and Yojson serialization. Works with DocumentUri.t and nested diagnostic report types, including FullDocumentDiagnosticReport.t and UnchangedDocumentDiagnosticReport.t. Used to generate structured diagnostic outputs for document analysis tools.",
      "description_length": 394,
      "index": 243,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.RelatedFullDocumentDiagnosticReport",
      "description": "Provides operations to construct and serialize/deserialize a structured diagnostic report containing a list of diagnostics and related document information. Works with diagnostic data, document URIs, and custom report types for full or unchanged documents. Used to generate and exchange detailed diagnostic information in language server protocols.",
      "description_length": 348,
      "index": 244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentDiagnosticReport",
      "description": "Handles conversion between JSON representations and a structured document diagnostic record. Works with a variant type that encodes specific diagnostic statuses and metadata. Used to serialize and deserialize detailed error reports from document processing pipelines.",
      "description_length": 267,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentDiagnosticReportPartialResult",
      "description": "Provides functions to construct and serialize/deserialize a structured diagnostic report containing either a full or unchanged document diagnostic, using a map of document URIs to their respective report types. Works with associative arrays of document URIs and custom diagnostic report variants. Used to transmit partial diagnostic results in a standardized JSON format for document processing systems.",
      "description_length": 403,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentFormattingOptions",
      "description": "Provides functions to create and serialize a document formatting options structure, including support for work done progress tracking. Works with a record type containing boolean flags and other formatting-related settings. Used to initialize and convert formatting configurations between JSON and internal representation in language server protocols.",
      "description_length": 351,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FormattingOptions",
      "description": "Provides functions to create and serialize formatting configurations, including options for newline insertion, space usage, tab size, and whitespace trimming. Works with a record type containing boolean and integer fields for text formatting settings. Used to parse and generate JSON representations of code style preferences in a linter or formatter tool.",
      "description_length": 356,
      "index": 248,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentFormattingParams",
      "description": "Provides functions to construct and serialize a document formatting parameter structure, including a constructor that takes formatting options and a text document identifier, along with JSON serialization and deserialization routines. Works with formatting options, text document identifiers, and progress tokens. Used to encode and decode parameters for document formatting requests in a language server protocol context.",
      "description_length": 422,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentFormattingRegistrationOptions",
      "description": "Provides functions to create and serialize a document formatting registration option structure, including parsing from and converting to JSON. Works with a record type containing optional document selector and work done progress flags. Used to configure language server behavior for document formatting requests.",
      "description_length": 312,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentHighlight",
      "description": "Provides operations to construct a document highlight with a specified kind and range, and to serialize/deserialize the structure to and from JSON. Works with a record type containing a range and an optional highlight kind. Used to represent syntax elements in a document for rendering or analysis tools.",
      "description_length": 304,
      "index": 251,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentHighlightOptions",
      "description": "Provides functions to create a configuration object for document highlight options, convert it to and from JSON format. Works with a record type containing optional work done progress settings. Used to serialize and deserialize highlight configuration in a language server protocol context.",
      "description_length": 290,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentHighlightParams",
      "description": "Provides functions to create and serialize a document highlight parameters structure, including a position, text document identifier, and optional progress tokens. Works with Position, TextDocumentIdentifier, and ProgressToken types. Used to transmit document highlight request details in language server protocols.",
      "description_length": 315,
      "index": 253,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentHighlightRegistrationOptions",
      "description": "Provides functions to create and serialize a document highlight registration option structure, including parsing from and converting to JSON. Works with a record type containing an optional document selector and a boolean for work done progress. Used to configure language server behavior for document highlight requests based on specific file types and progress tracking.",
      "description_length": 372,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentLink",
      "description": "Provides functions to construct and serialize document link data, including a constructor that accepts range, target, tooltip, and arbitrary data. Operates on Range.t, DocumentUri.t, and Import.Json.t types. Used to represent hyperlinks within documents, such as in IDEs or text editors for navigation.",
      "description_length": 302,
      "index": 255,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentLinkOptions",
      "description": "Provides functions to create and serialize a document link options structure, including a constructor with optional boolean parameters and JSON conversion utilities. Works with a record type containing fields for resolve provider and work done progress. Used to configure document link behavior in language server protocols.",
      "description_length": 324,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentLinkParams",
      "description": "Provides functions to construct and serialize/deserialize a document link parameters structure, including support for progress tokens and text document identifiers. Works with `TextDocumentIdentifier.t` and `ProgressToken.t` to represent document links in a structured format. Used to transmit document link request parameters in language server protocols.",
      "description_length": 356,
      "index": 257,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentLinkRegistrationOptions",
      "description": "Provides functions to create and serialize a document link registration configuration, including a document selector, resolve provider flag, and work done progress flag. Works with the DocumentSelector.t type and JSON representations using Yojson. Used to configure language server support for document links in specific file types.",
      "description_length": 332,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentOnTypeFormattingOptions",
      "description": "Provides functions to create and serialize a configuration object for document on-type formatting, including a constructor that accepts trigger characters and a JSON serialization layer. Works with a record type containing trigger character information. Used to configure editor behavior for automatic formatting during typing.",
      "description_length": 327,
      "index": 259,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentOnTypeFormattingParams",
      "description": "Provides functions to construct and serialize a document formatting parameter structure, including a constructor that takes a character string, formatting options, position, and text document identifier. Works with a record type containing these fields and supports JSON serialization via Yojson. Used to encode parameters for type-based document formatting requests in language server protocols.",
      "description_length": 396,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentOnTypeFormattingRegistrationOptions",
      "description": "Provides functions to create and serialize a configuration for document-on-type formatting registration, including a constructor with optional document selectors and trigger characters. Works with a record type containing document selectors and strings for trigger characters. Used to define language server behavior for auto-formatting on input in specific file types.",
      "description_length": 369,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentRangeFormattingOptions",
      "description": "Provides functions to create and serialize a document range formatting options structure, supporting range-specific formatting and work done progress. Works with a record type containing boolean flags for ranges and work progress. Used to configure language server behavior for precise text modifications and progress tracking during formatting.",
      "description_length": 345,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentRangeFormattingParams",
      "description": "Provides functions to create and serialize a structured representation of document range formatting parameters, including formatting options, a specific text range, and a text document identifier. Works with custom types such as `FormattingOptions.t`, `Range.t`, and `TextDocumentIdentifier.t`. Used to encode and decode formatting requests in language server protocols, ensuring precise control over text transformations within defined document regions.",
      "description_length": 454,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentRangeFormattingRegistrationOptions",
      "description": "Provides functions to create and serialize a document range formatting configuration, including support for document selectors, range formatting, and work done progress. Works with the DocumentSelector type and a structured record type containing optional flags. Used to configure language server behavior for formatted document range updates.",
      "description_length": 343,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentRangesFormattingParams",
      "description": "Provides functions to create and serialize a structured representation of document ranges and formatting options, including conversion to and from JSON. Works with `FormattingOptions.t`, `Range.t`, and `TextDocumentIdentifier.t` to encapsulate document-specific formatting parameters. Used to transmit and process formatting requests in a language server context.",
      "description_length": 363,
      "index": 265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentSymbol",
      "description": "Provides functions to construct and serialize document symbols with attributes like name, range, kind, and tags. Works with structured data including ranges, symbol kinds, and tags. Used to generate and parse symbol information for code navigation in editors.",
      "description_length": 259,
      "index": 266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentSymbolOptions",
      "description": "Provides functions to create and serialize a document symbol options structure, including a constructor with optional label and work done progress flags. Works with a record type containing string and boolean fields. Used to configure symbol retrieval settings in language server protocols.",
      "description_length": 290,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.DocumentSymbolParams",
      "description": "Provides functions to construct and serialize/deserialize a document symbol parameters structure, including a constructor with optional progress tokens and text document identifier. Works with TextDocumentIdentifier and ProgressToken types. Used to encode request data for retrieving symbols from a document in a language server protocol context.",
      "description_length": 346,
      "index": 268,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.DocumentSymbolRegistrationOptions",
      "description": "Provides operations to construct and serialize a document symbol registration configuration, including parsing from and converting to JSON. Works with a record type containing optional fields for document selectors, labels, and work done progress flags. Used to configure language server support for document symbol indexing in editor environments.",
      "description_length": 348,
      "index": 269,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ExecuteCommandOptions",
      "description": "Provides functions to create and serialize command execution options, including a work done progress flag. Works with a record type containing a list of commands and a boolean for progress tracking. Used to configure and persist command execution settings in a structured, serializable format.",
      "description_length": 293,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ExecuteCommandParams",
      "description": "Provides functions to construct and serialize command execution parameters, including command strings, arguments, and progress tokens. Works with JSON-encoded data and progress token structures. Used to prepare and convert command execution requests for inter-process communication or API interactions.",
      "description_length": 302,
      "index": 271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ExecuteCommandRegistrationOptions",
      "description": "Provides functions to create and serialize command registration options, including a constructor that takes a list of commands and an optional work done progress flag. Works with the `t` type, which encapsulates command registration settings. Used to configure command execution parameters in a structured, serializable format.",
      "description_length": 327,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileOperationPatternOptions",
      "description": "Provides operations to create and serialize configuration options for file operation patterns, including case sensitivity settings. Works with a record type containing optional case sensitivity flags. Used to parse and generate JSON representations of pattern matching configurations in file processing workflows.",
      "description_length": 313,
      "index": 273,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FileOperationPattern",
      "description": "Provides functions to create and serialize file operation patterns, including a constructor that accepts glob patterns, match kinds, and options. Works with custom type `t` representing file operation configurations and JSON data through Yojson serialization. Used to define and persist rules for file matching and processing in build or deployment workflows.",
      "description_length": 359,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileOperationFilter",
      "description": "Provides functions to create and serialize filter configurations based on file operation patterns and optional schemes. Works with custom types representing operation patterns and serialized JSON data. Used to define and persist rules for filtering file operations in a system.",
      "description_length": 277,
      "index": 275,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FileOperationRegistrationOptions",
      "description": "Provides functions to create and serialize/deserialize a configuration structure for file operation filters. Works with a record type containing a list of file operation filters. Used to initialize and persist settings for file system operations in a structured, JSON-compatible format.",
      "description_length": 286,
      "index": 276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileOperationOptions",
      "description": "Handles configuration for file operation callbacks in a language server, supporting registration options for create, delete, and rename events both before and after they occur. Works with `FileOperationRegistrationOptions.t` and serializes/deserializes instances to and from JSON. Used to configure how file changes are monitored and reported in real-time editing environments.",
      "description_length": 377,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FileRename",
      "description": "Provides operations to create and serialize/deserialize a file rename record, including converting between JSON and an internal structure. Works with strings representing file URIs and a record type containing new and old URI fields. Used to encode and decode rename events in a file management system.",
      "description_length": 302,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FoldingRange",
      "description": "Provides operations to construct and serialize a folding range data structure, including setting start and end positions, optional text, and a kind. Works with integers for line and character positions and a custom type for range kind. Used to represent code folding regions in editor state or language server protocols.",
      "description_length": 320,
      "index": 279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FoldingRangeOptions",
      "description": "Provides operations to create and serialize a structure representing folding range options, including work done progress support. Works with a record type containing optional boolean fields. Used to encode configuration for text document folding features in language server protocols.",
      "description_length": 284,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.FoldingRangeParams",
      "description": "Provides functions to create and serialize a structure representing ranges for code folding, including support for progress tokens and text document identifiers. Works with text document identifiers and progress tokens to manage folding range requests. Used to encode and decode folding parameters in language server protocols.",
      "description_length": 327,
      "index": 281,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.FoldingRangeRegistrationOptions",
      "description": "Provides functions to create and serialize a structure representing options for folding range registration, including document selector, identifier, and work done progress flag. Works with document selectors, strings, and booleans to configure folding behavior. Used to define settings for language server features that support code folding ranges.",
      "description_length": 348,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Hover",
      "description": "Provides functions to construct a hover object with content as markup, marked strings, or a list of marked strings, and optionally associate it with a range. Works with types like MarkupContent, MarkedString, and Range to represent hover information. Used to generate structured hover data for IDE integrations or documentation tools.",
      "description_length": 334,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.HoverOptions",
      "description": "Provides functions to create a configuration object with an optional work done progress flag, and to serialize/deserialize this object to and from JSON. Works with a record type containing a boolean field. Used to manage hover request settings in a language server protocol implementation.",
      "description_length": 289,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.HoverParams",
      "description": "Provides functions to construct and serialize/deserialize a structured representation of hover request parameters, including a position and text document identifier, with optional progress token support. Works with custom types Position.t and TextDocumentIdentifier.t, and integrates with JSON serialization via Yojson. Used to process language server protocol requests for hover information in editor extensions.",
      "description_length": 413,
      "index": 285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.HoverRegistrationOptions",
      "description": "Provides functions to create and serialize/deserialize options for hover registration, including a constructor with optional document selector and work done progress flag. Works with DocumentSelector.t and JSON representations using Yojson. Used to configure hover behavior in language servers with specific document filters and progress support.",
      "description_length": 346,
      "index": 286,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ImplementationOptions",
      "description": "Provides functions to create an object with a workDoneProgress flag, convert the object to and from JSON using Yojson. Works with a record type containing a boolean field. Used to serialize and deserialize configuration settings in a JSON-based protocol.",
      "description_length": 254,
      "index": 287,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ImplementationParams",
      "description": "Provides functions to construct a structured data object from a position, text document, and optional progress tokens, and to serialize/deserialize this object using JSON. Works with Position, TextDocumentIdentifier, and ProgressToken types. Used to encapsulate parameters for text document processing tasks with progress tracking.",
      "description_length": 331,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ImplementationRegistrationOptions",
      "description": "Provides functions to construct and serialize/deserialize configuration objects for implementation registration, including document selector, ID, and work done progress flags. Works with the DocumentSelector.t type and JSON representations using Yojson. Used to define and encode settings for language server implementation features.",
      "description_length": 333,
      "index": 289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InitializeError",
      "description": "Provides functions to create an error type with a retry flag, convert between the error type and JSON representations. Works with a record type containing a boolean for retry status. Used to handle initialization failures with structured error data in JSON serialization workflows.",
      "description_length": 281,
      "index": 290,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InitializeParams",
      "description": "Provides functions to construct and serialize initialization parameters for a client, including client information, capabilities, and workspace settings. Works with types such as clientInfo, ClientCapabilities.t, DocumentUri.t, and ProgressToken.t. Used to configure a client's environment and capabilities during startup in a language server protocol context.",
      "description_length": 360,
      "index": 291,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceSymbolOptions",
      "description": "Provides functions to create and serialize a workspace symbol configuration, including optional resolve provider and work done progress flags. Works with a record type containing boolean fields for configuration settings. Used to initialize and encode/decode symbol search options in language server protocols.",
      "description_length": 310,
      "index": 292,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceFoldersServerCapabilities",
      "description": "Provides functions to create and serialize a workspace folders server capability structure, supporting configuration via boolean or string-based change notifications and a flag indicating support. Works with a record type containing optional fields for notification behavior and support status. Used to configure language server capabilities for workspace folder tracking and changes.",
      "description_length": 384,
      "index": 293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeHierarchyRegistrationOptions",
      "description": "Provides functions to create and serialize a type hierarchy registration option structure, including parsing from and converting to JSON. Works with a record type containing optional fields for document selection, an identifier, and a work done progress flag. Used to configure type hierarchy support in language servers with specific document filters and progress tracking.",
      "description_length": 374,
      "index": 294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeHierarchyOptions",
      "description": "Provides functions to create a configuration object with an optional work done progress flag, and to serialize/deserialize this object to and from JSON. Works with a record type containing a boolean field. Used to manage settings for type hierarchy operations in a JSON-based interface.",
      "description_length": 286,
      "index": 295,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TypeDefinitionRegistrationOptions",
      "description": "Provides functions to construct and serialize a type definition registration option structure, including parsing from and converting to JSON. Works with document selectors, strings, and boolean flags to configure type definition behavior. Used to define how language servers handle type definition requests in specific document contexts.",
      "description_length": 337,
      "index": 296,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeDefinitionOptions",
      "description": "Provides functions to create a configuration object with an optional work done progress flag, and to serialize/deserialize this object to and from JSON. Works with a record type containing a boolean field. Used to manage settings for type definition requests in a JSON-based communication protocol.",
      "description_length": 298,
      "index": 297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SaveOptions",
      "description": "Provides functions to create a configuration object with an option to include text, and to serialize/deserialize the object to and from JSON. Works with a record type containing a boolean flag. Used to persist user-specified settings in a structured, portable format.",
      "description_length": 267,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentSyncOptions",
      "description": "Provides functions to create and serialize a document synchronization configuration, including handling change detection, open/close events, save behavior, and pre-save actions. Works with a record type containing boolean flags and a variant for save options. Used to configure how text documents are synchronized with external systems during editing and saving.",
      "description_length": 362,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureHelpOptions",
      "description": "Provides functions to create and serialize a configuration object for signature help, including options for character-based triggers and work progress tracking. Works with a record type containing lists of characters and a boolean flag. Used to configure editor behavior during function call completion.",
      "description_length": 303,
      "index": 300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensLegend",
      "description": "Creates a structured representation of semantic token legends using lists of modifiers and token types. Operates on strings and a custom record type containing these lists. Used to serialize and deserialize legend data in language server protocols.",
      "description_length": 248,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensRegistrationOptions",
      "description": "Provides functions to construct and serialize semantic token registration options, including a full mode with optional delta support. Works with document selectors, semantic token legends, and boolean flags for range and progress tracking. Used to configure language server responses for semantic token requests with precise control over token types and document scope.",
      "description_length": 369,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensOptions",
      "description": "Provides functions to construct and serialize semantic token options, including a full configuration with delta support and a base configuration with legend, range, and work done progress flags. Works with custom types `full` and `t`, along with `SemanticTokensLegend.t` for token definitions. Used to generate structured data for language server protocol interactions involving token semantics.",
      "description_length": 395,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SelectionRangeRegistrationOptions",
      "description": "Provides functions to create and serialize a selection range registration option structure, including parsing from and converting to JSON. Works with document selectors, strings, and boolean flags to define registration parameters. Used to configure language server support for text selection ranges in specific document types.",
      "description_length": 327,
      "index": 304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SelectionRangeOptions",
      "description": "Provides functions to create and serialize a structured representation of selection range options, including work done progress support. Works with a record type containing optional boolean fields. Used to encode and decode configuration data for language server selection range requests.",
      "description_length": 288,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RenameOptions",
      "description": "Provides functions to create and serialize options for renaming operations, including a constructor with boolean flags for provider preparation and work progress. Works with a record type containing optional boolean fields. Used to configure and persist renaming settings in a structured, JSON-compatible format.",
      "description_length": 312,
      "index": 306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ReferenceOptions",
      "description": "Provides operations to create a configuration object with an optional work done progress flag, and to serialize/deserialize this object to and from JSON. Works with a record type containing a boolean field for work progress tracking. Used to manage reference resolution options in a language server protocol context.",
      "description_length": 316,
      "index": 307,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.MonikerRegistrationOptions",
      "description": "Provides functions to create and serialize configuration objects for moniker registration, including parsing from and converting to JSON. Works with document selectors and boolean flags to control progress reporting. Used to define settings for language server features that require unique identifier tracking.",
      "description_length": 310,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MonikerOptions",
      "description": "Provides functions to create an options object with an optional work done progress flag, and to serialize/deserialize the object to and from JSON. Works with a record type containing a boolean field for work progress status. Used to manage configuration settings in a language server protocol context.",
      "description_length": 301,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.LinkedEditingRangeRegistrationOptions",
      "description": "Provides functions to create and serialize a structured representation of linked editing range registration options, including document selector, ID, and work done progress flag. Works with document selectors, strings, and booleans to define editor configuration. Used to configure language server support for linked editing ranges in specific document types.",
      "description_length": 359,
      "index": 310,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.LinkedEditingRangeOptions",
      "description": "Provides functions to create and serialize a structured data type representing linked editing range options, including work done progress support. Works with a record type containing optional boolean fields. Used to encode and decode configuration settings for linked editing features in a JSON-compatible format.",
      "description_length": 313,
      "index": 311,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlineValueRegistrationOptions",
      "description": "Provides functions to construct and serialize/deserialize a configuration object for inline value registration, including document selector, unique identifier, and work done progress flag. Works with DocumentSelector.t and JSON representations using Yojson. Used to define settings for language server features that require inline value support during document processing.",
      "description_length": 372,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueOptions",
      "description": "Provides functions to create a value with an optional work done progress flag, and to convert between the value and JSON representations. Works with a record type containing a boolean field. Used to serialize and deserialize configuration options in a protocol-aware manner.",
      "description_length": 274,
      "index": 313,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlineCompletionOptions",
      "description": "Provides functions to create and serialize a configuration object for inline code completion, supporting work done progress tracking. Works with a record type containing boolean flags and serializable fields. Used to generate JSON representations for communication with language servers or client-side processing.",
      "description_length": 313,
      "index": 314,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlayHintRegistrationOptions",
      "description": "Provides functions to create and serialize a configuration object for inlay hint registration, including document selector, ID, resolve provider flag, and work done progress support. Works with document selectors and boolean flags to define registration parameters. Used to configure language server features that provide inline code suggestions during editing.",
      "description_length": 361,
      "index": 315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHintOptions",
      "description": "Provides functions to create and serialize a configuration object for inlay hints, supporting optional resolution and work done progress flags. Works with a record type containing boolean fields for configuration settings. Used to initialize and persist inlay hint preferences in editor extensions or language server protocols.",
      "description_length": 327,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ServerCapabilities",
      "description": "Provides functions to construct and serialize objects representing server capabilities in a language server protocol context. Works with types like workspace, diagnostic, textDocument, and t, which model server-side features and settings. Used to configure support for features such as code completion, diagnostics, and document synchronization in a structured, extensible way.",
      "description_length": 377,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InitializeResult",
      "description": "Provides functions to construct and serialize server information and result objects. Works with `serverInfo` records containing name and version, and `t` records holding server capabilities and optional server info. Enables JSON serialization and deserialization for data exchanged in server initialization protocols.",
      "description_length": 317,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InitializedParams_",
      "description": "Provides functions to construct and serialize initialization parameters for a client, including client information, capabilities, and trace settings. Works with types such as clientInfo, t, and JSON representations using Yojson. Used to prepare and convert initialization data for communication in a language server protocol context.",
      "description_length": 333,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHintLabelPart",
      "description": "Provides functions to create and serialize objects representing parts of inlay hints, including command, location, tooltip, and value. Works with types such as Command.t, Location.t, and MarkupContent.t. Used to construct structured inlay hint components for editor integration and JSON serialization.",
      "description_length": 301,
      "index": 320,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlayHint",
      "description": "Provides functions to construct and serialize inlay hint objects with specific labels, positions, text edits, and tooltips, using JSON data and position structures. Works with custom types for labels, hints, and markup content, enabling precise editor integration. Used to generate structured inlay hints for code analysis tools and language servers.",
      "description_length": 350,
      "index": 321,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlayHintParams",
      "description": "Provides functions to construct and serialize a structure representing inlay hint parameters, including a range and text document identifier. Works with Range.t and TextDocumentIdentifier.t types, and supports JSON serialization via Yojson. Used to transmit inlay hint request data in language server protocols.",
      "description_length": 311,
      "index": 322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SelectedCompletionInfo",
      "description": "Provides functions to construct an object from a range and text, and to convert between the object and JSON representations. Works with a record type containing a range and a string. Used to serialize and deserialize completion information in a language server protocol context.",
      "description_length": 278,
      "index": 323,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlineCompletionContext",
      "description": "Provides functions to create and serialize a context for inline code completion, including a constructor that takes a selected completion info and trigger kind. Works with a record type containing completion-related state and trigger information. Used to persist and reconstruct completion context during editor interactions.",
      "description_length": 325,
      "index": 324,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.StringValue",
      "description": "Provides functions to construct a value from a string, convert between JSON representations and the internal type, and serialize the internal type to JSON. Works with a record type containing a string value. Used to safely handle and serialize string-based data in JSON workflows.",
      "description_length": 280,
      "index": 325,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlineCompletionItem",
      "description": "Provides functions to construct and serialize inline completion items, including creating instances with optional command, filter text, insert text, and range. Works with custom types such as Command.t, Range.t, and StringValue.t. Used to generate structured data for editor auto-completion features.",
      "description_length": 300,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineCompletionList",
      "description": "Provides operations to construct a list of inline completion items, convert the list to and from JSON format using Yojson. Works with a list of `InlineCompletionItem.t` values and a custom type `t` representing the structured data. Used to serialize and deserialize completion data in a language server context.",
      "description_length": 311,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineCompletionParams",
      "description": "Provides functions to construct and serialize a structured representation of inline completion parameters, including a context, position, and text document identifier. Works with types such as InlineCompletionContext.t, Position.t, and TextDocumentIdentifier.t. Used to encode request data for language server protocols during code completion interactions.",
      "description_length": 356,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineCompletionRegistrationOptions",
      "description": "Provides functions to create and serialize a configuration object for inline completion registration, including parsing from and to JSON. Works with a record type containing optional fields for document selectors, identifiers, and work done progress flags. Used to configure language server behavior for inline completion features based on specific document types and progress tracking.",
      "description_length": 386,
      "index": 329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueEvaluatableExpression",
      "description": "Provides operations to create a structured representation from a string expression and range, convert between JSON and internal format. Works with string expressions, range objects, and a custom record type containing these elements. Used to serialize and deserialize expressions with positional data for code analysis tools.",
      "description_length": 325,
      "index": 330,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueVariableLookup",
      "description": "Provides functions to create and serialize a lookup structure for inline value variables, supporting case sensitivity and range constraints. Works with the `Range.t` type and string-based variable names. Used to parse and generate JSON representations of variable lookup configurations in code analysis tools.",
      "description_length": 309,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueText",
      "description": "Provides functions to construct a value from a range and text, and to serialize/deserialize between JSON and the internal representation. Works with the `Range.t` type and strings to encode positional text data. Used to store and exchange text segments with associated location information in a structured format.",
      "description_length": 313,
      "index": 332,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.InlineValue",
      "description": "Converts between a custom type and JSON representations using Yojson. Handles structured data with specific encoding and decoding logic. Used to serialize and deserialize internal values in a format compatible with JSON-based data exchange.",
      "description_length": 240,
      "index": 333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueContext",
      "description": "Provides functions to construct and serialize/deserialize a context object containing a frame ID and a stopped location range. Works with the `Range.t` type and a custom record type `t` representing inline value evaluation context. Used to encode debugging state for communication between client and server.",
      "description_length": 307,
      "index": 334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.InlineValueParams",
      "description": "Provides functions to construct a value with context, range, and document identifier, and to serialize/deserialize the value using JSON. Works with types representing code context, text ranges, and document identifiers. Used to encode parameters for inline value requests in language server protocols.",
      "description_length": 301,
      "index": 335,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.LinkedEditingRangeParams",
      "description": "Provides functions to create and serialize/deserialize a structured representation of linked editing ranges, including a position and text document identifier. Works with Position and TextDocumentIdentifier types, along with optional progress tokens. Used to transmit linked editing context in language server protocols.",
      "description_length": 320,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.LinkedEditingRanges",
      "description": "Provides operations to create and serialize linked editing range data, including parsing from and converting to JSON. Works with a list of range objects and optional word patterns. Used to manage and persist structured editing ranges in text editors or code analysis tools.",
      "description_length": 273,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.LogMessageParams",
      "description": "Encodes and decodes log messages with a specific string message and message type, using JSON serialization. Works with a record type containing a message string and a message type from MessageType. Used to serialize log data for storage or transmission in a structured format.",
      "description_length": 276,
      "index": 338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.LogTraceParams",
      "description": "Provides functions to construct a log trace object with a message and optional verbose data, and to serialize/deserialize it to and from JSON. Works with a record type containing a message string and an optional verbose string. Used to encode logging parameters for storage or transmission in a structured format.",
      "description_length": 313,
      "index": 339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MessageActionItem",
      "description": "Provides operations to create a structured data object from a title string, convert it to and from JSON format using Yojson. Works with a record type containing a title field. Used to serialize and deserialize action items in a messaging system.",
      "description_length": 245,
      "index": 340,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.Moniker",
      "description": "Provides functions to construct a moniker with an identifier, scheme, kind, and uniqueness level, and to serialize/deserialize it to and from JSON. Works with string identifiers, custom kinds, and uniqueness levels to ensure distinct naming contexts. Used to generate and manage unique resource references in distributed systems.",
      "description_length": 329,
      "index": 341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.MonikerParams",
      "description": "Provides functions to construct a structured data object from a position, text document, and progress tokens, and to serialize/deserialize it using JSON. Works with Position, TextDocumentIdentifier, and ProgressToken types. Used to encode request parameters for language server interactions involving text navigation and progress tracking.",
      "description_length": 339,
      "index": 342,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ParameterInformation",
      "description": "Provides functions to construct and serialize a structured parameter representation, including handling labeled parameters with string or offset-based identifiers and supporting documentation in string or markup formats. Works with a custom type that encapsulates parameter details and integrates with JSON serialization via Yojson. Used to parse and generate parameter data in language server protocols or similar structured data contexts.",
      "description_length": 440,
      "index": 343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.PartialResultParams",
      "description": "Provides operations to create a structured result container with an optional progress token, and to serialize/deserialize it using Yojson. Works with the `ProgressToken.t` type and a record type containing a partial result token. Used to transmit partial computation results in protocol-based communication, such as in language server implementations.",
      "description_length": 351,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.PrepareRenameParams",
      "description": "Provides functions to construct and serialize/deserialize a structured parameter object for renaming operations, working with Position and TextDocumentIdentifier types. Includes a constructor that accepts a position and text document identifier, along with JSON serialization utilities. Used to prepare parameters for language server rename requests based on cursor position and document context.",
      "description_length": 396,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.PreviousResultId",
      "description": "Encapsulates a document URI and a string value, providing creation and JSON serialization/deserialization. Works with the DocumentUri.t type and a string to represent previous result identifiers. Used to track and persist specific document states in a structured, serializable format.",
      "description_length": 284,
      "index": 346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.PublishDiagnosticsParams",
      "description": "Provides functions to construct a structured diagnostics payload from a list of diagnostics and a document URI, with optional versioning. Works with `Diagnostic.t` and `DocumentUri.t` types to encode and decode data using Yojson. Used to serialize diagnostic information for transmission in language server protocols.",
      "description_length": 317,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ReferenceContext",
      "description": "Provides operations to create a context object with a flag indicating whether to include declarations, and conversions between the context type and JSON representations. Works with a record type containing a boolean field. Used to serialize and deserialize context settings in data exchange scenarios.",
      "description_length": 301,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ReferenceParams",
      "description": "Provides functions to construct a reference parameter object with context, position, and document information, and to serialize/deserialize it using Yojson. Works with types like ReferenceContext.t, Position.t, and TextDocumentIdentifier.t. Used to encode request parameters for symbol reference queries in a language server protocol implementation.",
      "description_length": 349,
      "index": 349,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ReferenceRegistrationOptions",
      "description": "Provides operations to construct and serialize a configuration object for reference registration, including parsing from and converting to JSON. Works with a record type containing optional document selector and work done progress flags. Used to initialize and persist settings in language server protocols.",
      "description_length": 307,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Registration",
      "description": "Creates a registration entry with an ID, HTTP method, and optional JSON options, and converts between the internal representation and JSON. Works with string-based IDs, HTTP methods, and JSON values. Used to serialize and deserialize registration configurations for API endpoint management.",
      "description_length": 290,
      "index": 351,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.RegistrationParams",
      "description": "Provides functions to construct a structured representation from a list of registration objects, convert between JSON and the internal type, and serialize the internal type back to JSON. Works with a custom type encapsulating registration data and JSON values. Used to parse and generate JSON payloads for system registration configurations.",
      "description_length": 341,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RenameFilesParams",
      "description": "Provides operations to create a structured data container from a list of file rename operations, and to serialize/deserialize this container using JSON. Works with a list of `FileRename.t` values and a custom record type `t` that encapsulates these operations. Used to pass and process batch file renaming parameters in a format compatible with JSON-based configuration or API interactions.",
      "description_length": 390,
      "index": 353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.RenameParams",
      "description": "Provides functions to construct and serialize/deserialize objects representing parameter renames in a text document, including a constructor that takes a new name, position, and document identifier, along with JSON conversion utilities. Works with Position.t, TextDocumentIdentifier.t, and ProgressToken.t. Used to track and communicate changes to parameter names in language server protocols.",
      "description_length": 393,
      "index": 354,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.RenameRegistrationOptions",
      "description": "Provides functions to construct and serialize a configuration object for renaming operations, including setting a document selector and flags for preparation and progress tracking. Works with the DocumentSelector.t type and a structured record type containing optional boolean and selector fields. Used to define settings for language server rename actions in editor extensions.",
      "description_length": 378,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ResourceOperation",
      "description": "Provides operations to construct and serialize/deserialize resource objects with optional annotations, using a string-based kind identifier. Works with a record type containing an optional annotation ID and a string kind. Used to generate structured resource representations for data exchange or persistence.",
      "description_length": 308,
      "index": 356,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SelectionRange",
      "description": "Provides operations to construct and serialize a selection range structure, including creating instances with optional parent references and converting between JSON and internal representations. Works with a custom type `t` that includes a `range` field of type `Range.t` and an optional `parent` of the same type. Used to represent and persist hierarchical selection data in a structured format.",
      "description_length": 396,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SelectionRangeParams",
      "description": "Provides operations to construct and serialize a structured representation of selection ranges, including creating instances from positions, text document identifiers, and progress tokens. Works with Position.t lists, TextDocumentIdentifier.t, and ProgressToken.t. Used to encode client-side selection range requests for language servers.",
      "description_length": 338,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokens",
      "description": "Provides operations to construct a token structure from an integer array and an optional result ID, and to serialize/deserialize the structure to and from JSON. Works with an integer array and a string for result identification. Used to encode semantic token data for transmission or storage in a structured format.",
      "description_length": 315,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensEdit",
      "description": "Provides operations to construct and serialize/deserialize a structured representation of text edits, including start position, delete count, and optional data array. Works with integers and arrays to encode semantic token modifications. Used to generate and parse edit instructions for text document updates.",
      "description_length": 309,
      "index": 360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensDelta",
      "description": "Provides operations to construct and serialize/deserialize a structured representation of semantic token changes, including methods to build instances from a list of edits and optional result ID, and to convert between the type and JSON format. Works with a custom type encapsulating semantic token edits and an optional identifier. Used to efficiently transmit and reconstruct token modification data in language server protocols.",
      "description_length": 431,
      "index": 361,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SemanticTokensDeltaParams",
      "description": "Provides operations to construct and serialize/deserialize a structured token delta parameter, including creating instances with document identifiers, progress tokens, and result IDs. Works with types such as ProgressToken.t, TextDocumentIdentifier.t, and string. Used to manage incremental updates in semantic token data during language server interactions.",
      "description_length": 358,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensDeltaPartialResult",
      "description": "Provides operations to construct and serialize/deserialize a structured representation of semantic token changes, using a list of edits. Works with the `SemanticTokensEdit.t` type and a custom record type `t` for storing token deltas. Used to encode incremental updates in language server protocols, such as tracking changes in code syntax highlighting.",
      "description_length": 353,
      "index": 363,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SemanticTokensParams",
      "description": "Provides functions to construct and serialize/deserialize a structured representation of semantic tokens, including support for progress tracking and document identification. Works with `ProgressToken.t` and `TextDocumentIdentifier.t` to encapsulate request parameters. Used to handle semantic token requests in language server protocols, enabling efficient tokenization and progress reporting.",
      "description_length": 394,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensPartialResult",
      "description": "Provides operations to construct a token data structure from an integer array, convert it to and from JSON format using Yojson. Works with integer arrays and JSON values to represent semantic token information. Used to serialize and deserialize partial semantic token results in language server protocols.",
      "description_length": 305,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SemanticTokensRangeParams",
      "description": "Provides operations to construct and serialize/deserialize a structured representation of semantic token ranges, including a text document identifier, a range, and optional progress tokens. Works with `Range.t`, `TextDocumentIdentifier.t`, and `ProgressToken.t` to encode request parameters for semantic token retrieval. Used to transmit precise document range information alongside progress tracking in language server protocols.",
      "description_length": 430,
      "index": 366,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SetTraceParams",
      "description": "Provides operations to construct and serialize/deserialize trace parameter objects. Works with the `TraceValues.t` type and a record type `t` containing trace configuration data. Used to parse and generate JSON representations of tracing settings for system monitoring tools.",
      "description_length": 275,
      "index": 367,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ShowDocumentParams",
      "description": "Provides functions to construct and serialize/deserialize document parameters including URI, selection range, focus state, and external flag. Works with DocumentUri.t and Range.t to represent document locations and user selections. Used to transmit document state in language server protocols, such as when showing a document with specific focus or selection.",
      "description_length": 359,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ShowDocumentResult",
      "description": "Provides operations to create a result structure, convert it to and from JSON format using Yojson. Works with a record type containing a boolean success flag. Used to serialize and deserialize document processing outcomes in a structured, JSON-compatible format.",
      "description_length": 262,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.ShowMessageParams",
      "description": "Provides functions to construct a message parameter record with a string and message type, and to convert between the record and JSON representations. Works with a record type containing a message string and a message type from the MessageType module. Used to serialize and deserialize message parameters in a JSON-based communication protocol.",
      "description_length": 344,
      "index": 370,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.ShowMessageRequestParams",
      "description": "Provides functions to construct and serialize message request parameters, including creating instances with a message, type, and optional actions. Works with custom types for message content, action items, and message types. Used to generate structured data for sending messages with specific behaviors in a messaging system.",
      "description_length": 325,
      "index": 371,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureInformation",
      "description": "Provides functions to construct and serialize a structured representation of function or method signatures, including labels, parameters, and documentation. Works with strings, lists of parameter information, and markup content. Used to generate and parse signature data for IDE features like hover tooltips or auto-completion.",
      "description_length": 327,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureHelp",
      "description": "Provides functions to construct and serialize a signature help structure, including creating an instance with active parameters and signatures, and converting between JSON and the internal representation. Works with signature information lists and JSON values. Used to generate and transmit function signature details in an interactive development environment.",
      "description_length": 360,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureHelpContext",
      "description": "Provides functions to construct and serialize a context for signature help in an editor, including creating instances with specific trigger details and converting between JSON and internal representation. Works with types representing signature help state, trigger kind, and character information. Used to manage and persist signature help context during code editing interactions.",
      "description_length": 381,
      "index": 374,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.SignatureHelpParams",
      "description": "Provides functions to construct and serialize a structure representing parameters for signature help in an editor, including creating instances from a position, text document, and context, and converting between JSON and the internal representation. Works with types such as Position, TextDocumentIdentifier, and ProgressToken. Used to transmit detailed information about function signatures during code completion in language servers.",
      "description_length": 435,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SignatureHelpRegistrationOptions",
      "description": "Provides functions to create and serialize a configuration object for signature help registration, including document selector, trigger and retrigger characters, and work done progress support. Works with document selectors, strings, and boolean values. Used to configure language server behavior for real-time function signature assistance during code editing.",
      "description_length": 361,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.StaticRegistrationOptions",
      "description": "Provides functions to create a configuration object with an optional ID, and to convert between the configuration type and JSON representations. Works with a record type containing an optional string ID. Used to serialize and deserialize configuration data in a structured format.",
      "description_length": 280,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.SymbolInformation",
      "description": "Provides operations to construct and serialize symbol information, including location, kind, name, and metadata. Works with types such as SymbolKind.t, Location.t, and SymbolTag.t list. Used to encode language server protocol symbols for transmission or storage.",
      "description_length": 262,
      "index": 378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentChangeRegistrationOptions",
      "description": "Provides operations to create and serialize a document change registration option structure, including a document selector and synchronization kind. Works with DocumentSelector.t and TextDocumentSyncKind.t to define document-specific change tracking settings. Used to configure how text document changes are monitored and reported in an editor extension.",
      "description_length": 354,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentPositionParams",
      "description": "Provides functions to create and serialize/deserialize a structured representation of a text document position, including a position within the document and a document identifier. Works with `Position.t` and `TextDocumentIdentifier.t` to encode contextual information for language server interactions. Used to transmit client-side cursor positions and document references in LSP-compatible workflows.",
      "description_length": 400,
      "index": 380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentRegistrationOptions",
      "description": "Provides functions to create and serialize/deserialize a document registration configuration, including a constructor that accepts a document selector and a default value. Works with the `DocumentSelector.t` type and a structured record type `t`. Used to configure text document handling in language servers, such as specifying which files to monitor.",
      "description_length": 351,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TextDocumentSaveRegistrationOptions",
      "description": "Provides functions to create and serialize/deserialize document save registration options, including a document selector and a flag to include text. Works with the DocumentSelector.t type and a record type containing configuration for text document saving. Used to configure language server behavior when saving files, such as specifying which file types to monitor and whether to include file content in notifications.",
      "description_length": 419,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeDefinitionParams",
      "description": "Provides functions to construct and serialize/deserialize a structured data type representing parameters for type definition requests, including position, text document identifier, and progress tokens. Works with Position, TextDocumentIdentifier, and ProgressToken types. Used in language server protocols to exchange type definition metadata between client and server.",
      "description_length": 369,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeHierarchyItem",
      "description": "Provides operations to construct and serialize/deserialize objects representing symbols in a code hierarchy, including their kind, name, ranges, and metadata. Works with structured data types like SymbolKind.t, Range.t, DocumentUri.t, and SymbolTag.t list. Used to generate and process symbol information for language server protocols or code analysis tools.",
      "description_length": 358,
      "index": 384,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.TypeHierarchyPrepareParams",
      "description": "Provides functions to construct and serialize/deserialize a structured parameter object containing a position, text document identifier, and optional progress token. Works with Position.t, TextDocumentIdentifier.t, and ProgressToken.t. Used to prepare parameters for type hierarchy requests in language server protocols.",
      "description_length": 320,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeHierarchySubtypesParams",
      "description": "Provides functions to construct and serialize a structure representing type hierarchy subtypes, including a creation function with optional progress tokens and JSON conversion utilities. Works with a record type containing a type hierarchy item and optional progress tokens. Used to encode and decode subtype information in language server protocol interactions.",
      "description_length": 362,
      "index": 386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.TypeHierarchySupertypesParams",
      "description": "Provides functions to construct and serialize a structure representing type hierarchy supertypes, including a constructor that takes a type hierarchy item and optional progress tokens, and conversions between the structure and JSON. Works with `TypeHierarchyItem.t` and `ProgressToken.t` to encode hierarchical type relationships. Used to transmit and parse type hierarchy data in language server protocols.",
      "description_length": 407,
      "index": 387,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Unregistration",
      "description": "Provides functions to construct an object with an ID and method, and to convert between the object and JSON representations. Works with a record type containing a string ID and a string method. Used to serialize and deserialize unregistration data in API interactions.",
      "description_length": 268,
      "index": 388,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.UnregistrationParams",
      "description": "Provides functions to create a structured representation from a list of unregistration records, parse this structure from JSON, and serialize it back to JSON. Works with a record type containing unregistration data and JSON values. Used to handle incoming and outgoing data in API requests involving service unregistrations.",
      "description_length": 324,
      "index": 389,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WillSaveTextDocumentParams",
      "description": "Provides functions to construct, serialize, and deserialize a structured representation of text document save parameters, including a reason for saving and a document identifier. Works with `TextDocumentSaveReason.t` and `TextDocumentIdentifier.t` to encode and decode data in JSON format. Used to process incoming save requests in a language server, ensuring consistent handling of document state changes.",
      "description_length": 406,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressBegin",
      "description": "Provides functions to construct and serialize a progress notification with a title, optional message, percentage, and cancellation status. Works with a record type containing string, int, and bool fields. Used to communicate initial progress state in a structured format during long-running tasks.",
      "description_length": 297,
      "index": 391,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressCancelParams",
      "description": "Provides functions to create, serialize, and deserialize a progress cancellation parameter using a progress token. Works with the `ProgressToken.t` type and JSON representations via Yojson. Used to handle client-side cancellation requests in a language server protocol context.",
      "description_length": 277,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressCreateParams",
      "description": "Provides functions to construct a progress token object, convert it to and from JSON format using Yojson. Works with the ProgressToken.t type and a record type t containing progress-related data. Used to initialize and serialize progress tracking parameters in a language server protocol context.",
      "description_length": 296,
      "index": 393,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressEnd",
      "description": "Provides operations to construct a progress end object with an optional message, and to serialize/deserialize it to and from JSON. Works with the `t` type representing a progress end notification. Used to signal completion of a task in a structured JSON format within a protocol.",
      "description_length": 279,
      "index": 394,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressOptions",
      "description": "Provides functions to create and serialize a progress tracking configuration, including a constructor that accepts a boolean flag for work done progress. Works with a record type containing a single boolean field. Used to configure progress reporting in language server protocols.",
      "description_length": 280,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressParams",
      "description": "Provides functions to create a progress parameter structure, convert it to and from JSON format using Yojson. Works with a record type containing an optional progress token. Used to track and serialize progress updates in a client-server communication context.",
      "description_length": 260,
      "index": 396,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkDoneProgressReport",
      "description": "Provides functions to construct and serialize a work progress report, including creating instances with optional cancellation status, message, and percentage. Operates on a record type containing these fields. Used to communicate real-time status updates in a structured JSON format during long-running tasks.",
      "description_length": 309,
      "index": 397,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceDiagnosticParams",
      "description": "Provides functions to construct and serialize a structured data type representing workspace diagnostic parameters, including support for identifiers, progress tokens, and previous result IDs. Works with custom types such as ProgressToken.t and PreviousResultId.t, and integrates with JSON serialization via Yojson. Used to manage and transmit diagnostic state in language server protocols.",
      "description_length": 389,
      "index": 398,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceUnchangedDocumentDiagnosticReport",
      "description": "Provides functions to create and serialize diagnostic reports for documents that have not changed in a workspace. Works with a record type containing a result ID, document URI, and optional version. Used to generate structured diagnostic data for unchanged files in language server protocols.",
      "description_length": 292,
      "index": 399,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceFullDocumentDiagnosticReport",
      "description": "Provides operations to construct and serialize diagnostic reports containing a list of diagnostics, a document URI, optional version, and result ID. Works with diagnostic items, document URIs, and JSON representations using Yojson. Used to generate full document diagnostic responses in language server protocols.",
      "description_length": 313,
      "index": 400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceDocumentDiagnosticReport",
      "description": "Handles conversion between JSON representations and internal diagnostic data structures. Processes error and warning information associated with document content. Supports serialization and deserialization for diagnostic reports in a structured format.",
      "description_length": 252,
      "index": 401,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceDiagnosticReport",
      "description": "Provides operations to construct a report from a list of document diagnostic reports, and to serialize/deserialize the report using Yojson. Works with the WorkspaceDocumentDiagnosticReport.t type and a record type containing diagnostic data. Used to generate structured diagnostic outputs for workspace analysis and JSON-based communication.",
      "description_length": 341,
      "index": 402,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceDiagnosticReportPartialResult",
      "description": "Provides operations to construct a report from a list of document diagnostic reports and to serialize/deserialize the report using Yojson. Works with lists of WorkspaceDocumentDiagnosticReport.t and JSON values. Used to generate partial diagnostic results for workspace-wide analysis and exchange data between systems.",
      "description_length": 318,
      "index": 403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceFoldersInitializeParams",
      "description": "Provides functions to create and serialize a workspace configuration object, including converting between JSON and a structured type. Works with a list of workspace folder objects and JSON values. Used to initialize and persist workspace settings in a structured format.",
      "description_length": 270,
      "index": 404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceSymbol",
      "description": "Provides operations to construct and serialize workspace symbols, including creating symbols with location, kind, and optional metadata, and converting between JSON and internal representations. Works with symbol kinds, locations, and JSON data structures. Used to represent and exchange symbol information in language server protocols.",
      "description_length": 336,
      "index": 405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.WorkspaceSymbolParams",
      "description": "Provides functions to construct and serialize a workspace symbol request, including handling progress tokens and query strings. Works with a record type containing optional progress tokens and a query string. Used to initialize and encode requests for symbol searches within a workspace.",
      "description_length": 287,
      "index": 406,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Types.WorkspaceSymbolRegistrationOptions",
      "description": "Provides functions to create and serialize a workspace symbol registration configuration, including optional resolve provider and work done progress flags. Works with a record type containing boolean fields for configuration settings. Used to initialize and encode/decode symbol registration options in language server protocols.",
      "description_length": 329,
      "index": 407,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.CodeActionResult",
      "description": "Converts between a JSON structure and a list of either command or code action values. Operates on OCaml's `t` type, which represents optional lists of tagged variants. Used to serialize and deserialize structured execution results in a language server context.",
      "description_length": 260,
      "index": 408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types.Locations",
      "description": "Encodes and decodes location data between JSON and a structured type using specific serialization functions. Works with a tagged type representing geographic or logical positions. Used to parse and generate JSON responses in API interactions.",
      "description_length": 242,
      "index": 409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Cli.Channel",
      "description": "Provides functions to create, configure, and manage network channels for server listening, including setting port and address bindings. Works with socket structures and configuration parameters for network communication. Used to initialize server endpoints and handle incoming connection requests.",
      "description_length": 297,
      "index": 410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Cli.Arg",
      "description": "Provides functions to create and manage command line argument structures, extract specifications for parsing, retrieve a channel from provided arguments, and extract a client process ID. Works with a custom type `t` that encapsulates parsed command line data. Used to configure communication channels and track client processes in a language server setup.",
      "description_length": 355,
      "index": 411,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Uri.Private",
      "description": "Provides a reference to a boolean indicating Windows platform detection. Works with the `bool ref` data type to track system-specific configurations. Used to conditionally execute code paths for Windows-based environments.",
      "description_length": 222,
      "index": 412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Extension.DebugEcho",
      "description": "Serializes and deserializes structured data types to and from JSON using Yojson, supporting configuration parameters and nested fields. Handles record types and custom types with defined fields for consistent data conversion. Converts configuration settings to JSON for storage and parses JSON back into structured data for processing. Enables seamless data exchange in APIs and configuration management.",
      "description_length": 404,
      "index": 413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Extension.DebugTextDocumentGet",
      "description": "Encodes and decodes structured code location data using position and document identifier, supporting JSON serialization for language server communication. Handles optional string values through a dedicated conversion layer, enabling reliable parsing and generation of string-based results. Together, they allow for precise tracking of editor states and safe handling of potentially missing string outputs. Examples include encoding cursor positions for server requests and decoding response strings with error handling.",
      "description_length": 519,
      "index": 414,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Progress",
      "description": "Converts between a custom type and JSON using Yojson, with a specific method string embedded in the structure. Works with a type encapsulating a method name and associated data. Used to serialize and deserialize progress states in a system that tracks task execution details.",
      "description_length": 275,
      "index": 415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Client_notification",
      "description": "Converts between a custom notification type and JSON-RPC notification objects, enabling serialization and deserialization. Works with JSON-RPC notification structures and a domain-specific notification type. Used to process incoming notifications from a client and send them in a standardized format over a network protocol.",
      "description_length": 324,
      "index": 416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Client_request",
      "description": "Handles conversion between custom result types and JSON-RPC structures, including serialization to and from JSON and mapping of text document identifiers. Operates on JSON values, JSON-RPC requests, and structured parameters. Used to process JSON-RPC responses and extract document identifiers from request data.",
      "description_length": 312,
      "index": 417,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Extension",
      "description": "Handles JSON serialization and deserialization of structured data, including configuration settings and code location information, with support for nested fields and optional values. Main data types include records, custom types, and position-based identifiers, with operations for encoding, decoding, and error-aware parsing. It enables API data exchange, configuration management, and language server communication by converting between in-memory structures and JSON. Examples include storing settings as JSON and reconstructing them, or encoding cursor positions for server interaction.",
      "description_length": 589,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Header",
      "description": "Processes HTTP header data by converting raw strings into structured metadata, enabling precise access to fields like content length and content type. Provides functions to parse, validate, and extract specific key-value pairs from header strings. Operations include retrieving numeric values, checking content types, and inspecting header formats. Examples include parsing \"Content-Length: 1024\" or extracting \"Accept: text/html\".",
      "description_length": 431,
      "index": 419,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Lsp.Import",
      "description": "provides a set of utilities for handling error-prone computations, map manipulations, and data serialization. it includes result-based sequencing for error-aware function chaining, map operations for key-value management, and JSON conversion for structured data. users can parse and transform data, manage configurations, and serialize complex types with minimal boilerplate. examples include chaining validation steps, merging configuration maps, and converting records to JSON.",
      "description_length": 479,
      "index": 420,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Server_notification",
      "description": "Converts between a notification object and a JSON-RPC notification, enabling message serialization and deserialization. Works with the `Jsonrpc.Notification.t` type and an opaque internal representation. Used to process incoming notifications from a server and format responses for client communication.",
      "description_length": 303,
      "index": 421,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Server_request",
      "description": "Converts request data to JSON-RPC format, serializes results to JSON, and parses JSON into structured responses. Operates on request types and JSON values, handling error states through result types. Used to process incoming JSON-RPC requests and generate appropriate server-side responses.",
      "description_length": 290,
      "index": 422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Snippet",
      "description": "Manages symbolic variables and string-like structures through operations for creation, comparison, concatenation, and modification. The `t` type represents variables or custom strings, supporting equality checks, hashing, and dynamic manipulation with operators like `^^`, `+@`, and `@+`. It enables tracking of variable states during analysis and construction of flexible, formatted output. Examples include detecting duplicate variable names and assembling error messages with embedded values.",
      "description_length": 495,
      "index": 423,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Text_document",
      "description": "Provides operations to create and manipulate text documents with specific position encodings, including applying content changes, calculating absolute positions, and extracting document metadata. Works with document state represented as a type `t`, UTF-8 or UTF-16 encoded text, and LSP types like `Position` and `Range`. Used to track document versions, apply edits in a precise order, and convert positions to byte offsets for processing.",
      "description_length": 440,
      "index": 424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Types",
      "description": "The module provides a cohesive set of utilities for handling structured data serialization and deserialization, primarily using Yojson. It includes types like `t` for formatted text, `bool ref` for platform-specific logic, variant types for progress states, and polymorphic types for progress tokens and values. It supports operations such as converting between JSON and custom types, managing document positions and ranges, handling file operations, and encoding diagnostic and symbol information. Examples include serializing formatted text for API responses, managing platform-specific behavior, tracking progress in document updates, and encoding language server protocol data like code actions, diagnostics, and workspace edits.",
      "description_length": 733,
      "index": 425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Uri",
      "description": "Encapsulates platform-specific behavior through a boolean reference, enabling conditional execution based on the operating system. Supports manipulation and inspection of the `bool ref` type to adapt functionality dynamically. Allows developers to toggle features or alter execution flow depending on whether the code runs on Windows. Example uses include loading Windows-specific libraries or modifying file path handling.",
      "description_length": 423,
      "index": 426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Io",
      "description": "Handles low-level input and output operations by reading structured text and writing formatted data through custom stream types. Supports line-based or byte-count-based reading and provides methods for transforming and routing data between sources and sinks. Can parse JSON-RPC packets by processing incoming streams and generating corresponding output. Enables direct manipulation of I/O streams in applications requiring precise control over data transmission.",
      "description_length": 462,
      "index": 427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Cli",
      "description": "Handles server network configuration and command line argument parsing for language server protocols. Exposes a custom type `t` for storing parsed command line data and functions to derive network channels and client identifiers. Supports setting up listening sockets on specified ports and addresses, and extracting process IDs from input arguments. Enables initialization of server endpoints and tracking of connected clients through structured configuration data.",
      "description_length": 466,
      "index": 428,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp.Diff",
      "description": "Calculates the differences between two strings and returns a list of text edit operations. It processes raw string inputs and generates structured changes representing insertions, deletions, or replacements. This is useful for implementing features like real-time code synchronization or version control diffs.",
      "description_length": 310,
      "index": 429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lsp.Private",
      "description": "Combines array manipulation, UTF-8 decoding, and zipper-based data reconstruction into a unified toolkit. It handles array views with efficient slicing and modification, decodes and processes UTF-8 streams into structured maps, and restores complex data hierarchies from navigated states. Operations include extracting subviews, parsing incremental byte sequences, and reassembling modified trees. Users can efficiently manage array segments, build maps from streamed data, and revert or apply changes to hierarchical structures.",
      "description_length": 529,
      "index": 430,
      "embedding_norm": 1.0
    },
    {
      "module_path": "lsp",
      "description": "Provides functions for parsing and analyzing OCaml source code, including type checking and symbol resolution. Works with abstract syntax trees (ASTs) and type information from the OCaml compiler. Enables features like code navigation and error reporting in text editors.",
      "description_length": 271,
      "index": 431,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lsp",
      "description": "Handles JSON serialization and deserialization across multiple domains, including progress states, notifications, requests, and document data. It manages custom types like method strings, JSON-RPC objects, text documents, and symbolic variables, with operations for encoding, decoding, and transforming structured data. Examples include parsing HTTP headers, tracking document edits, and converting diagnostic information for language servers. It supports error-aware processing, platform-specific logic, and efficient I/O stream manipulation.",
      "description_length": 543,
      "index": 432,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 441,
    "meaningful_modules": 433,
    "filtered_empty_modules": 8,
    "retention_rate": 0.981859410430839
  },
  "statistics": {
    "max_description_length": 733,
    "min_description_length": 205,
    "avg_description_length": 326.8752886836028,
    "embedding_file_size_mb": 1.573195457458496
  }
}