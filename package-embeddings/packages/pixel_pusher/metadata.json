{
  "package": "pixel_pusher",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:06:03.800886",
  "modules": [
    {
      "module_path": "Pixel_pusher.Color.Fields.Direct",
      "library": "pixel_pusher",
      "description": "This module provides operations to manipulate and inspect individual RGB color fields of a Pixel Pusher color value. It supports iteration, folding, filtering, mapping, and bulk updates over the red, green, and blue components, each treated as a mutable field. Concrete use cases include adjusting brightness per channel, validating color ranges, or converting color values to other representations by processing each component individually.",
      "description_length": 441,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pixel_pusher.Color.Fields",
      "library": "pixel_pusher",
      "description": "This module enables direct manipulation of the red, green, and blue components of a color value, supporting operations like mapping, folding, and filtering across the individual fields. It provides functions to create colors from RGB values, adjust brightness per channel, convert colors to grayscale, and validate or transform each component during bulk processing. Submodules extend this functionality with more specialized operations for inspecting and modifying each color field independently. Examples include scaling the red channel to adjust hue intensity, clamping green values to a valid range, or extracting blue values for transmission to LED hardware.",
      "description_length": 663,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pixel_pusher.Color",
      "library": "pixel_pusher",
      "description": "This module represents colors as red, green, and blue components and provides tools to create, manipulate, and convert colors for LED output. It supports parsing and conversion from hexadecimal integers, OpenGL tuples, and string representations, along with shading operations to adjust brightness. The RGB submodule allows fine-grained manipulation of individual color channels, enabling operations like scaling red intensity, clamping green values, or extracting blue for hardware transmission. Examples include setting LED pixels to predefined colors, generating random hues, or applying grayscale transformations during dynamic lighting sequences.",
      "description_length": 651,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pixel_pusher.Strip",
      "library": "pixel_pusher",
      "description": "This module directly manages individual LED strips by setting specific pixel colors and tracking strip state, including pixel count and controller identifiers. It operates on a `t` type that holds the strip's configuration and a matrix of colors. Use this module to update visual output on connected LED strips by modifying pixel values at specific indices.",
      "description_length": 357,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pixel_pusher.Controller_report",
      "library": "pixel_pusher",
      "description": "This module processes and tracks status reports from Pixel Pusher devices, handling updates to controller state such as ID, group membership, and timing metrics. It works with the `t` type to store controller metadata and integrates with the Async event loop to manage beacon reception and update intervals. Concrete use cases include synchronizing lighting updates across multiple strips and ensuring timely communication with attached Pixel Pusher hardware.",
      "description_length": 459,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pixel_pusher",
      "library": "pixel_pusher",
      "description": "This module manages communication with LED-controlling devices over UDP, tracking connected controllers and strips while enabling pixel-level color control and synchronized updates. It provides types to represent devices, LED strips, and colors, with operations to set pixel values, retrieve hardware state, and send updates at a target frame rate. The color submodule supports creating and manipulating RGB values from multiple formats, while the strip submodule maintains pixel arrays and handles per-strip updates. Example uses include animating gradients across multiple strips, applying color transformations in real time, and integrating lighting control into both Async and non-Async applications by sending buffered updates or direct pixel commands.",
      "description_length": 757,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 757,
    "min_description_length": 357,
    "avg_description_length": 554.6666666666666,
    "embedding_file_size_mb": 0.02222156524658203
  }
}