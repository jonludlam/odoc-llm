{
  "package": "diffast-langs-common",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:32:20.866344",
  "modules": [
    {
      "module_path": "Langs_common.Astloc",
      "description": "This module handles operations for managing location data, including creating, serializing, and merging objects that represent file positions and ranges, with emphasis on path normalization and lexical position arithmetic. It provides utilities for converting between location types and Lexing.position structures, supporting tasks like range analysis, containment checks, and debugging through string representation and line counting. Key use cases involve source code navigation, error reporting, and syntactic analysis where precise positional tracking is required.",
      "description_length": 568,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Langs_common.Fname",
      "description": "Handles filename and path manipulation with specific separators and extension management. Operates on strings and a hash table cache for extension mappings. Enables escaping characters, extracting extensions, and formatting filenames with options for display.",
      "description_length": 259,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Langs_common.Parserlib_base",
      "description": "Provides functions for parsing and manipulating environment variables, including retrieval and transformation of values. Works with strings, options, and custom environment structures. Used to safely extract and process configuration values from system or application environments.",
      "description_length": 281,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Langs_common.Ranges",
      "description": "Maintains a list of integer intervals, allowing for dynamic updates and queries. It supports operations to merge overlapping ranges, check for overlaps, and compute total covered values. Used in scenarios like scheduling time slots or managing memory allocation regions.",
      "description_length": 270,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Langs_common.Regions",
      "description": "Maintains a list of coordinate pairs representing spatial regions and a global offset value used for positioning. It supports updating and accessing these values during runtime. Used to dynamically adjust object positions in a 2D layout system.",
      "description_length": 244,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Langs_common.Unparsing_base",
      "description": "Provides a formatter for generating human-readable output from abstract syntax trees. Works with Format.formatter and custom data structures representing parsed input. Used to produce source code representations during compilation or analysis phases.",
      "description_length": 250,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "diffast-langs-common",
      "description": "Compares abstract syntax trees (ASTs) of programming languages like Python, Java, and C/C++ by analyzing node-level differences using a tree edit distance (TED) algorithm, with optimizations to handle large inputs. Generates structured outputs in XML or N-Triples format, capturing syntactic and semantic changes between code versions. These outputs enable querying in RDF stores for tasks such as identifying code similarities, tracking changes, and supporting code comprehension.",
      "description_length": 481,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Langs_common",
      "description": "Manages location data, filename manipulation, environment variables, interval ranges, coordinate regions, and AST formatting. Provides types for positions, paths, intervals, coordinates, and formatted output, with operations for merging, parsing, transforming, and querying these structures. Enables tasks such as tracking code positions, handling file paths, extracting configuration values, managing time or memory ranges, adjusting spatial layouts, and generating readable code output. Examples include parsing error locations, normalizing file paths, merging overlapping intervals, and formatting ASTs for debugging.",
      "description_length": 620,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 21,
    "meaningful_modules": 8,
    "filtered_empty_modules": 13,
    "retention_rate": 0.38095238095238093
  },
  "statistics": {
    "max_description_length": 620,
    "min_description_length": 244,
    "avg_description_length": 371.625,
    "embedding_file_size_mb": 0.029468536376953125
  }
}