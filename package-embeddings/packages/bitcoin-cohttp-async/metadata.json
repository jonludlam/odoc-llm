{
  "package": "bitcoin-cohttp-async",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:29:08.921546",
  "modules": [
    {
      "module_path": "Bitcoin_cohttp_async.Httpclient.Monad",
      "description": "Provides operations to sequence computations with error handling, including lifting values into the monadic context, chaining operations with binding, and catching exceptions. Works with asynchronous deferred results that can either resolve to a value or an exception. Used to manage asynchronous workflows with structured error recovery, such as handling API calls that may fail unpredictably.",
      "description_length": 394,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bitcoin_cohttp_async.Httpclient",
      "description": "Sequences asynchronous operations with error handling, enabling safe chaining of API calls and recovery from failures. Supports lifting values into a monadic context and binding results through deferred computations. Key data types include deferred values and error-wrapped results, with operations like bind, return, and catch. Examples include fetching data from an API, retrying failed requests, and processing responses with guaranteed error handling.",
      "description_length": 455,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "bitcoin-cohttp-async",
      "description": "Provides asynchronous HTTP request handling and response parsing for Bitcoin protocol interactions. Works with byte sequences, JSON structures, and custom protocol buffers for message encoding and decoding. Used to fetch blockchain data, submit transactions, and interact with Bitcoin nodes over HTTP.",
      "description_length": 301,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bitcoin_cohttp_async",
      "description": "Provides a framework for sequencing asynchronous Bitcoin API operations with robust error handling. Key data types include deferred values and error-wrapped results, supporting operations like binding, returning, and catching errors. It enables safe API call chaining, retry logic, and guaranteed error recovery. Examples include fetching block data, retrying failed transactions, and processing responses with structured error handling.",
      "description_length": 437,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 4,
    "filtered_empty_modules": 3,
    "retention_rate": 0.5714285714285714
  },
  "statistics": {
    "max_description_length": 455,
    "min_description_length": 301,
    "avg_description_length": 396.75,
    "embedding_file_size_mb": 0.014933586120605469
  }
}