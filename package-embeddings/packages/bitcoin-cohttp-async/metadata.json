{
  "package": "bitcoin-cohttp-async",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:35.247859",
  "modules": [
    {
      "module_path": "Bitcoin_cohttp_async.Httpclient.Monad",
      "library": "bitcoin-cohttp-async",
      "description": "This module implements a monadic interface for handling asynchronous HTTP requests in the context of Bitcoin operations. It provides core monadic primitives like `bind`, `return`, `fail`, and `catch` to sequence and error-handle computations that return HTTP client results. It is used to build composable, asynchronous workflows when interacting with Bitcoin nodes over HTTP.",
      "description_length": 376,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bitcoin_cohttp_async.Httpclient",
      "library": "bitcoin-cohttp-async",
      "description": "This module performs asynchronous HTTP POST requests with custom headers, host, port, and URI configurations, working with low-level networking data types like `Unix.inet_addr` and string-based payloads. Its monadic interface sequences and error-handlers asynchronous computations returning HTTP client results, enabling composable workflows for interacting with Bitcoin nodes. Main data types include HTTP request and response structures, with operations for sending raw Bitcoin protocol messages or JSON-RPC requests over HTTP. Example uses include querying remote Bitcoin nodes for blockchain data or submitting transactions asynchronously.",
      "description_length": 643,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bitcoin_cohttp_async",
      "library": "bitcoin-cohttp-async",
      "description": "This module implements an asynchronous Bitcoin HTTP client using Cohttp for low-level network communication. It provides data types for HTTP requests and responses, supporting custom headers, hosts, ports, and URIs, and enables sending raw Bitcoin protocol messages or JSON-RPC payloads to Bitcoin nodes. Operations include asynchronous POST requests with error handling and composability via Lwt promises. Example uses include fetching blockchain data or broadcasting transactions to a Bitcoin node over HTTP.",
      "description_length": 510,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 643,
    "min_description_length": 376,
    "avg_description_length": 509.6666666666667,
    "embedding_file_size_mb": 0.011312484741210938
  }
}