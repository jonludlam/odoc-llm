{
  "package": "lambda_streams_async",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:03:53.819367",
  "modules": [
    {
      "module_path": "Lambda_streams_async.Async",
      "library": "lambda_streams_async",
      "description": "This module provides functions to convert between lambda streams and async values, lists, streams, and pipe readers. It supports extracting the first or last value from a stream, collecting all values into a list, and bridging to and from async streams and pipes. Concrete use cases include integrating stream processing with async workflows, such as consuming async data sources or feeding async pipelines.",
      "description_length": 407,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lambda_streams_async",
      "library": "lambda_streams_async",
      "description": "This module bridges lambda streams with async values and streams, enabling seamless integration of stream processing into asynchronous workflows. It supports conversions to and from async lists, streams, and pipe readers, with operations to extract the first or last value, or collect all elements into a list. For example, it can consume an async data source as a stream or feed values into an async pipeline. Specific uses include transforming a lambda stream into an async stream for further processing or retrieving the final result of an async stream as a value.",
      "description_length": 567,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 567,
    "min_description_length": 407,
    "avg_description_length": 487.0,
    "embedding_file_size_mb": 0.007701873779296875
  }
}