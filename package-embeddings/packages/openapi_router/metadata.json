{
  "package": "openapi_router",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:03:34.489021",
  "modules": [
    {
      "module_path": "Openapi_router.Json_Schema.Helpers",
      "library": "openapi_router",
      "description": "This module enables type-safe construction and manipulation of JSON Schema objects through operations like property assignment, structural composition (e.g., `any_of`, `properties`), and constraint application (e.g., `enum`, `format`). It works with `schema` and `or_ref` types, offering predefined schemas for common data formats (e.g., `email`, `datetime`, `ipv4`) and utilities to build array schemas. These tools are used to define and validate data structures for OpenAPI endpoints, ensuring correctness in request/response handling.",
      "description_length": 538,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Openapi_router.Make",
      "library": "openapi_router",
      "description": "This module facilitates constructing and refining OpenAPI specifications by managing metadata (e.g., title, version) and components (e.g., responses, parameters, security schemes) through a fluent interface that accumulates changes in a `t` type encapsulating the spec and route list. It enables route registration with HTTP methods (GET, POST, DELETE) and generates JSON references to named components, supporting dynamic API documentation and server router integration. Use cases include programmatically building OpenAPI-compliant APIs and automating schema generation for modular applications.",
      "description_length": 597,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Openapi_router.Json_Schema",
      "library": "openapi_router",
      "description": "This module enables structured manipulation of JSON Schema representations through type-safe constructors and transformations, working with schema definitions composed of primitive types (string, null), complex structures (object, array), and polymorphic variants (or_ref, map). It supports schema validation logic via constraints, logical compositions (all_of, any_of, one_of), and property definitions, while integrating bidirectional serialization with Yojson for data interchange. Typical use cases include validating OpenAPI document structures, transforming schema definitions between formats, and handling reference resolution or polymorphic type representations in API specifications.",
      "description_length": 692,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Openapi_router.Spec",
      "library": "openapi_router",
      "description": "This module provides serialization, deserialization, construction, and pretty-printing operations for OpenAPI specification components modeled as OCaml records. It handles types representing API metadata (contact, license), parameters, responses, security schemes, request bodies, servers, and path operations, along with their JSON representations. These utilities enable programmatic manipulation of OpenAPI documents, supporting tasks like API validation, code generation, and dynamic specification assembly through bidirectional JSON conversion and structured data modeling.",
      "description_length": 578,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Openapi_router",
      "library": "openapi_router",
      "description": "This module builds and manipulates OpenAPI specifications programmatically, using a fluent interface to register routes, manage components, and generate JSON references. It works with OCaml records representing API metadata, parameters, responses, and security schemes, along with JSON Schema definitions for data validation. Concrete use cases include generating OpenAPI-compliant API documentation from application routes, validating schema structures, and integrating dynamic API descriptions with server routers.",
      "description_length": 516,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 692,
    "min_description_length": 516,
    "avg_description_length": 584.2,
    "embedding_file_size_mb": 0.07283973693847656
  }
}