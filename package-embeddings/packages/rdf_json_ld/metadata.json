{
  "package": "rdf_json_ld",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-07-15T23:08:09.018155",
  "modules": [
    {
      "module_path": "Rdf_json_ld.T.SSet",
      "library": "rdf_json_ld",
      "description": "This module implements standard set operations (union, intersection, difference) and transformations (map, filter, fold) for collections of strings, using an abstract type to represent sets. It supports conversions between sets and ordered sequences or lists, enabling use cases like managing unique identifiers in RDF data, ordered traversal of string collections, and bulk data manipulation during JSON-LD serialization or graph merging tasks.",
      "description_length": 445,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.AnyMap.O",
      "library": "rdf_json_ld",
      "description": "This module defines a type `t` as an alias for `Rdf_json_ld.AnyMap.k`, which represents keys used in a map structure for handling JSON-LD data. It provides a `compare` function to order these keys, enabling their use in ordered data structures like sets or maps. This is useful when manipulating JSON-LD documents where key comparison and ordering are required for efficient lookups or merges.",
      "description_length": 393,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.T.SMap",
      "library": "rdf_json_ld",
      "description": "This module provides a string-keyed map with polymorphic values, supporting standard dictionary operations like insertion, deletion, and lookup, as well as ordered traversal and conversion to/from sequences. It includes functions for transformation, filtering, and aggregation, with equality checks and structural queries. Useful for handling JSON-LD data structures where key-value associations require efficient manipulation and ordered processing, such as merging contexts or transforming RDF graphs.",
      "description_length": 503,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.J",
      "library": "rdf_json_ld",
      "description": "This module offers JSON parsing, manipulation, and serialization with precise source location tracking, enabling robust error handling and transformations. It operates on JSON values (null, booleans, floats) and structured types like maps and arrays, providing utilities for safe field access (`(-->)`, `(-?>)`), normalization, and comparison. Designed for JSON-LD processing, it supports tasks like data conversion, schema validation, and document transformation where maintaining source context and structural integrity is critical.",
      "description_length": 534,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rdf_json_ld.Log",
      "library": "rdf_json_ld",
      "description": "This module provides logging functionality using the `Logs` library, exposing standard log levels such as error, warning, info, and debug. It works with log message formatters and logging sources to emit structured log output. Concrete use cases include tracking parsing errors, reporting conversion progress, and debugging RDF data handling operations.",
      "description_length": 353,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.Json_ld",
      "library": "rdf_json_ld",
      "description": "This module processes JSON-LD data through context initialization, expansion, and conversion to and from RDF datasets. It supports operations like initializing expansion contexts from IRIs, expanding JSON-LD with custom options, and serializing RDF graphs to flat JSON-LD. Concrete use cases include parsing JSON-LD into RDF graphs, embedding linked data in web APIs, and extracting structured data from RDF datasets using JSON-LD format.",
      "description_length": 438,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.AnyMap",
      "library": "rdf_json_ld",
      "description": "This module implements a polymorphic map structure with customizable key comparison, enabling ordered traversal, list-valued aggregation, and structural transformations such as merging and filtering. It supports key-value pairs where keys use a flexible ordering mechanism and values can be arbitrary, allowing bulk updates from sequences or lists. The child module defines a key type `t` as an alias for `Rdf_json_ld.AnyMap.k` and provides a `compare` function, enabling efficient manipulation of JSON-LD keys within ordered data structures. Together, they support operations like merging JSON-LD contexts, transforming RDF term mappings, and aggregating values under ordered keys.",
      "description_length": 682,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.Serialize",
      "library": "rdf_json_ld",
      "description": "This module handles the conversion of RDF data structures into JSON-LD format. It provides functions to construct and manipulate specialized maps (`smap` and `map`) that associate keys like IRIs, blank nodes, and terms with JSON-LD values. Key operations include serializing RDF terms and datasets into JSON-LD objects, resolving node references, and handling empty or singleton map constructions for structured JSON output.",
      "description_length": 424,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.Deserialize",
      "library": "rdf_json_ld",
      "description": "Converts JSON-LD data into RDF triples, handling datatypes, lists, and nested objects. Processes JSON values into RDF terms and quads, supporting context-aware parsing and term mapping. Used to ingest JSON-LD documents into RDF datasets for semantic web applications.",
      "description_length": 267,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rdf_json_ld.T",
      "library": "rdf_json_ld",
      "description": "This module offers core tools for working with JSON-LD structures, enabling IRI resolution, context processing, schema validation, and data conversion between JSON values, IRIs, and identifiers. It includes utilities for parsing node objects, managing blank nodes, and fetching remote JSON documents via cURL, supporting tasks like directional data transformation and graph merging. A child module handles set operations and transformations on string collections, useful for managing unique RDF identifiers and ordered traversal. Another provides a string-keyed map with polymorphic values, supporting efficient dictionary operations and ordered processing of JSON-LD key-value associations, such as context merging and graph transformations.",
      "description_length": 742,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.Flatten",
      "library": "rdf_json_ld",
      "description": "This module implements the flattening of JSON-LD data structures into a normalized graph representation. It provides operations to generate blank nodes, manage graph nodes, and serialize JSON-LD into a flat format suitable for RDF processing. Key data types include `graph`, `node_object`, and `node_map`, which track node mappings and support operations like node retrieval and graph initialization. Concrete use cases include transforming nested JSON-LD into a subject-predicate-object format and handling blank node generation during RDF graph construction.",
      "description_length": 560,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld",
      "library": "rdf_json_ld",
      "description": "This module processes JSON-LD data through parsing, transformation, and serialization into RDF datasets, supporting context initialization, expansion, and flattening operations. It provides structured JSON manipulation with source tracking, ordered polymorphic maps for key-value transformations, and utilities for converting between JSON-LD and RDF triples or quads. Logging and error handling are integrated for robust data conversion, schema validation, and structured output generation. Examples include parsing JSON-LD into RDF graphs, merging contexts, extracting structured data, and serializing RDF datasets into normalized JSON-LD.",
      "description_length": 640,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 12,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9230769230769231
  },
  "statistics": {
    "max_description_length": 742,
    "min_description_length": 267,
    "avg_description_length": 498.4166666666667,
    "embedding_file_size_mb": 0.044002532958984375
  }
}