{
  "package": "rdf_json_ld",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 12,
  "creation_timestamp": "2025-08-14T23:17:33.933877",
  "modules": [
    {
      "module_path": "Rdf_json_ld.AnyMap.O",
      "library": "rdf_json_ld",
      "description": "This module defines a type `t` as an alias for `Rdf_json_ld.AnyMap.k` and provides a `compare` function to order values of this type. It works with keys used in the `Rdf_json_ld.AnyMap` module, typically representing identifiers or terms in an RDF JSON-LD context. Use this module when managing key-based mappings specific to RDF JSON-LD data, such as indexing nodes or attributes by their expanded IRIs.",
      "description_length": 404,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.T.SMap",
      "library": "rdf_json_ld",
      "description": "This module provides associative map operations for string-keyed collections with polymorphic values, supporting key-based manipulation (insertion, removal, lookup), transformation (mapping, filtering, merging), and traversal (iteration, folding, sequence conversion). It works with maps structured as `Rdf_json_ld.T.SMap.t`, where keys are strings and values can be arbitrary types, emphasizing functional transformations and ordered key-value pair processing. It is particularly useful in JSON-LD RDF contexts for managing resource representations, converting between maps and sequences during data serialization, or handling hierarchical key-value relationships in graph data.",
      "description_length": 679,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.T.SSet",
      "library": "rdf_json_ld",
      "description": "This module implements a set abstraction for string-based RDF terms, offering creation, modification, and querying operations such as union, intersection, membership testing, and element selection. It works with an abstract set type containing string elements, supporting functional patterns like iteration, folding, and filtering while providing safe variants for partial operations through optional return values. Key use cases include managing RDF term collections, performing set-theoretic data processing, and converting between sets and sequences for efficient traversal or bulk updates.",
      "description_length": 593,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.T",
      "library": "rdf_json_ld",
      "description": "This module provides foundational utilities for manipulating IRIs, managing JSON-LD processing options, and validating data structures through string maps and sets. It handles JSON values, language tags, and directionality to support tasks like context resolution, compaction, and remote resource retrieval, while including robust error handling for parsing and transformation workflows. Key operations include IRI resolution, keyword detection, blank node identifier handling, and JSON normalization, all designed to enforce correctness during JSON-LD expansion and semantic graph construction.",
      "description_length": 595,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.Log",
      "library": "rdf_json_ld",
      "description": "This module provides logging functionality using the `Logs` library, exposing standard severity-level logging functions such as `err`, `warn`, `info`, and `debug`. It works with formatted log messages using the `Logs.msgf` type, which supports type-safe message formatting. Concrete use cases include logging errors during JSON-LD parsing, emitting warnings for malformed input, and tracing execution flow for debugging purposes.",
      "description_length": 429,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.Serialize",
      "library": "rdf_json_ld",
      "description": "This module provides functions for constructing and manipulating JSON-LD representations of RDF data, including mappings for terms, IRIs, and blank nodes. It supports operations to create and modify associative maps (`smap` and `map`) that bind keys like IRIs or terms to JSON-LD values, and includes utilities to serialize RDF datasets and graphs into JSON-LD format. Concrete use cases include exporting RDF data in JSON-LD for web APIs, embedding linked data in web applications, and converting RDF triples into structured JSON for storage or transmission.",
      "description_length": 559,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.Json_ld",
      "library": "rdf_json_ld",
      "description": "This module processes JSON-LD data through context initialization, expansion, and conversion to and from RDF datasets. It operates on JSON values, IRIs, RDF graphs, and datasets, supporting operations like contextual expansion, RDF serialization, and root-based JSON-LD generation. Concrete use cases include parsing JSON-LD into RDF datasets, serializing RDF data into JSON-LD format, and expanding JSON-LD documents using custom base IRIs and processing options.",
      "description_length": 464,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.Expand",
      "library": "rdf_json_ld",
      "description": "This module enables the processing and expansion of JSON-LD contexts through operations such as term definition management, IRI expansion, remote context resolution, and context propagation during data transformation. It operates on JSON-LD documents, context maps, term definitions, and IRI mappings, serving use cases like semantic data normalization, language mapping, and initializing validated contexts in linked data workflows.",
      "description_length": 433,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.AnyMap",
      "library": "rdf_json_ld",
      "description": "This module supports a wide range of map operations tailored for handling JSON-LD identifiers or terms, including key-based queries, value transformations, and structural manipulations like merging, filtering, and partitioning. It operates on polymorphic maps with ordered keys of a specialized type, enabling customizable comparisons and ordered traversal, which is critical for maintaining RDF data consistency. These capabilities are particularly useful for tasks like RDF dataset merging, term resolution in linked data, and validating JSON-LD structures with dynamic key ordering requirements.",
      "description_length": 598,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld.Deserialize",
      "library": "rdf_json_ld",
      "description": "Converts JSON-LD data into RDF triples, handling datatypes, lists, and nested objects. Processes JSON values into RDF terms and quads, supporting context resolution and term mapping. Used to import JSON-LD documents into RDF datasets for semantic data processing.",
      "description_length": 263,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rdf_json_ld.Flatten",
      "library": "rdf_json_ld",
      "description": "This module implements the flattening of JSON-LD data structures into a normalized graph representation. It manages node objects, blank node generation, and graph construction using maps and references to track identifiers and relationships. Key operations include creating and manipulating graphs, extracting nodes, and generating unique blank nodes during the flattening process.",
      "description_length": 381,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rdf_json_ld",
      "library": "rdf_json_ld",
      "description": "This module processes JSON-LD data for conversion to and from RDF datasets, supporting context expansion, flattening, and serialization. It operates on JSON values, IRIs, RDF graphs, and maps to enable semantic data transformation with customizable handling of blank nodes, term mappings, and context propagation. Concrete use cases include importing JSON-LD into RDF stores, normalizing linked data for semantic reasoning, and exporting RDF as structured JSON for web APIs.",
      "description_length": 474,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 12,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9230769230769231
  },
  "statistics": {
    "max_description_length": 679,
    "min_description_length": 263,
    "avg_description_length": 489.3333333333333,
    "embedding_file_size_mb": 0.17430591583251953
  }
}