{
  "package": "gpiod",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:29:34.164605",
  "modules": [
    {
      "module_path": "Gpiod_bindings.Stubs",
      "description": "Provides functions to bind and invoke foreign code, with @-> linking C types to function signatures, returning defining return types, and foreign enabling direct calls to shared library functions. Works with Ctypes types, function pointers, and memory pointers to interface with C libraries. Used to create typed wrappers for C functions and access global variables from OCaml.",
      "description_length": 377,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gpiod.Gpiod",
      "description": "This module offers low-level GPIO chip and line management, enabling operations like value reading/writing, direction configuration, event detection, and bulk processing. It works with GPIO chip and line structures, along with bulk line groups, to support precise control and resource management. Use cases include real-time sensor monitoring, peripheral device interfacing, and system-level GPIO enumeration for diagnostics.",
      "description_length": 425,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "gpiod",
      "description": "Provides functions to open, configure, and manipulate GPIO lines using the libgpiod library, including setting direction, reading and writing values, and handling edge events. Works with GPIO line objects and associated configuration structures exposed by the libgpiod API. Used to control hardware peripherals like sensors and actuators on embedded systems running Linux with gpiod support.",
      "description_length": 391,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gpiod_bindings",
      "description": "Exports functions for binding and invoking C code through Ctypes, enabling typed wrappers for C functions and access to global variables. Supports C type mapping, function pointers, and memory operations to interface with shared libraries. Allows direct calls to C functions with defined return types and argument handling. Example: calling a C library function with a specified signature or reading a global variable from a shared library.",
      "description_length": 440,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gpiod",
      "description": "Manages GPIO hardware through chip and line abstractions, supporting real-time input/output, configuration, and event handling. It processes individual and grouped lines, enabling efficient interaction with hardware peripherals and sensor systems. Operations include setting direction, reading values, and detecting changes. Examples include controlling LED outputs, reading switch inputs, and monitoring multiple GPIO lines for interrupts.",
      "description_length": 440,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 440,
    "min_description_length": 377,
    "avg_description_length": 414.6,
    "embedding_file_size_mb": 0.01860332489013672
  }
}