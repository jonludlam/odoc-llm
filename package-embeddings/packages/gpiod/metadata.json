{
  "package": "gpiod",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:51.734045",
  "modules": [
    {
      "module_path": "Gpiod_bindings.Stubs",
      "library": "gpiod.bindings",
      "description": "This module provides low-level GPIO access and manipulation capabilities through direct bindings to `libgpiod`, enabling operations such as opening GPIO chips by name or number, querying and setting line values, and configuring lines for input/output or edge-triggered events. It operates on structured representations of GPIO chips (`gpiod_chip`) and individual or bulk lines (`gpiod_line`, `gpiod_line_bulk`), handling file descriptors, hardware offsets, and configuration flags. These functions are designed for direct hardware interaction in embedded systems, such as reading sensor data, controlling peripherals, or monitoring GPIO state changes via event-driven patterns.",
      "description_length": 677,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gpiod_bindings",
      "library": "gpiod.bindings",
      "description": "This module enables direct GPIO hardware control through structured types like `gpiod_chip`, `gpiod_line`, and `gpiod_line_bulk`, supporting operations to open chips, configure lines for input/output, and handle edge-triggered events. It allows precise manipulation of GPIO states, such as setting line values or waiting for signal changes, using low-level `libgpiod` bindings. Example uses include reading button presses, driving LEDs, or monitoring hardware interrupts on embedded devices.",
      "description_length": 491,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gpiod.Gpiod",
      "library": "gpiod",
      "description": "This module provides low-level operations for managing GPIO hardware, including opening and inspecting chips, configuring line directions and events, and reading/writing values with support for bulk operations. It works directly with GPIO chips and lines through structures like `gpiod_chip` and `gpiod_line_bulk`, enabling precise control over input/output states, edge detection, and bias settings. Typical use cases involve embedded systems development where direct GPIO manipulation is required for tasks like sensor interfacing, real-time event monitoring, or hardware peripheral control.",
      "description_length": 593,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gpiod",
      "library": "gpiod",
      "description": "This library enables direct control and configuration of GPIO hardware through operations like chip management, line value retrieval, and bulk line manipulation. It works with GPIO chips, individual lines, and bulk line groups, exposing properties such as direction, edge detection, and usage labels, while supporting use cases like sensor data acquisition, interrupt-driven input handling, and parallel control of multiple GPIO pins. The core module manages chip lifecycle and line configuration, while child modules provide low-level access to features like event monitoring, file descriptor management, and atomic updates through structures like `gpiod_chip` and `gpiod_line_bulk`. Specific operations include setting line direction, reading input values in bulk, waiting for edge events, and applying bias settings for precise hardware interaction.",
      "description_length": 852,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 852,
    "min_description_length": 491,
    "avg_description_length": 653.25,
    "embedding_file_size_mb": 0.014935493469238281
  }
}