{
  "package": "gpiod",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:57:26.051801",
  "modules": [
    {
      "module_path": "Gpiod_bindings.Stubs",
      "library": "gpiod.bindings",
      "description": "This module provides low-level operations for interacting with GPIO hardware through the `libgpiod` library, including chip management, line configuration, and event monitoring. It works with GPIO chips, lines, and bulk line groups, enabling tasks like opening devices by label, setting pin directions, and handling edge-triggered interrupts. Specific capabilities include querying line metadata, performing atomic bulk value updates, and monitoring asynchronous events with file descriptor integration.",
      "description_length": 503,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gpiod_bindings",
      "library": "gpiod.bindings",
      "description": "This module enables direct GPIO hardware manipulation using the `libgpiod` library, offering operations to open and manage GPIO chips, configure individual or bulk lines, and monitor edge events. It supports data structures representing GPIO chips, lines, and line groups, allowing precise control over pin direction, values, and event triggers. Concrete use cases include reading/writing pin states atomically, setting up interrupt-driven input detection, and managing GPIO resources by device label or hardware index.",
      "description_length": 519,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Gpiod.Gpiod",
      "library": "gpiod",
      "description": "This module provides low-level hardware abstraction for GPIO manipulation through operations like chip discovery, line configuration, and event handling. It works with C-style structures representing GPIO chips, individual lines, and bulk line groups to support tasks like direction control, value reading/writing, and edge-triggered interrupt monitoring. Typical use cases include embedded systems programming, hardware diagnostics, and real-time device control where direct GPIO access and precise timing are required.",
      "description_length": 520,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Gpiod",
      "library": "gpiod",
      "description": "This module enables low-level GPIO hardware control through operations for chip discovery, line configuration, and event polling. It works with GPIO chips, individual lines, and bulk line groups to support real-time device control and sensor interfacing, providing capabilities like direction/edge configuration, value manipulation, and event-driven I/O via C bindings to libgpiod structures. Key patterns include atomic bulk operations and hardware state management for embedded systems requiring direct pin-level access.",
      "description_length": 522,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 522,
    "min_description_length": 503,
    "avg_description_length": 516.0,
    "embedding_file_size_mb": 0.05838966369628906
  }
}