{
  "package": "awsm",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 47,
  "creation_timestamp": "2025-07-15T23:14:27.322434",
  "modules": [
    {
      "module_path": "Awsm.Cfg.S3_custom_command_settings.Fields.Direct",
      "library": "awsm",
      "description": "This module directly manipulates fields of S3 custom command settings, such as `max_concurrent_requests`, `multipart_threshold`, and `addressing_style`, all represented as optional strings. It provides operations to iterate, fold, map, and check conditions across these fields, enabling bulk transformations and inspections. Concrete use cases include applying validation functions to each field, collecting field values into lists, or updating multiple fields in a structured way.",
      "description_length": 481,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Cfg.S3_custom_command_settings.Fields",
      "library": "awsm",
      "description": "This module manages S3 command configuration settings, both directly and through its child modules, offering structured access to optional string-valued fields like `addressing_style`, `use_dualstack_endpoint`, and `max_bandwidth`. It supports operations to read, map, fold, and transform individual and multiple fields, enabling precise control over transfer behavior and endpoint selection. Specific use cases include validating configurations, collecting field values into lists, and updating multiple fields in bulk. Together with its submodules, it provides a cohesive interface for inspecting and modifying S3 command settings programmatically.",
      "description_length": 650,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Http.Io.S",
      "library": "awsm",
      "description": "This module defines the `s` type representing a monadic effect for handling HTTP requests and responses. It provides functions to inject and project values into and out of this monad, construct response streams, and create HTTP call handlers. Concrete use cases include defining asynchronous or Lwt-based HTTP clients that conform to a unified interface for request execution and response processing.",
      "description_length": 400,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http.Monad.Make",
      "library": "awsm",
      "description": "This module defines a monadic structure for handling HTTP applications using a specified monad `T`. It provides injection and projection functions to wrap and unwrap values within the monadic context, enabling composition of HTTP handlers that carry additional effects. It is used to build and manipulate HTTP applications that operate within a custom monadic stack, such as those involving error handling or state management.",
      "description_length": 426,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http.Monad.S",
      "library": "awsm",
      "description": "This module defines a monadic structure for handling HTTP operations with a uniform interface across different concurrency models. It provides injection and projection functions to work with HTTP application values, enabling seamless integration of request and response handling. Concrete use cases include building and manipulating HTTP clients and servers that can switch between async and Lwt backends without changing core logic.",
      "description_length": 433,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http.Io.Error",
      "library": "awsm",
      "description": "This module defines error types for handling HTTP responses, including structured errors like bad responses with status codes and Amazon error types, and conditions such as too many redirects. It provides functions to convert these error types to and from S-expressions for serialization and debugging. Concrete use cases include decoding AWS service errors and managing HTTP client error propagation in a consistent format.",
      "description_length": 424,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Http.S-Pipe-Flushed",
      "library": "awsm",
      "description": "This module provides functions for handling HTTP requests and responses using a pipe-based interface that supports flushed writes. It works with Cohttp's HTTP types, including request, response, and headers, along with pipes for streaming body content. Concrete use cases include sending and receiving HTTP messages with precise control over body streaming and response flushing, particularly in server and client implementations requiring correct message framing and early response handling.",
      "description_length": 492,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Data.S",
      "library": "awsm",
      "description": "This module defines a data type `t` with operations for serialization and deserialization to and from S-expressions, JSON, XML, and string formats. It provides functions to convert values to AWS-specific representations like query parameters, headers, and JSON values. Use this module when handling data transformations for AWS service interactions, such as sending requests or parsing responses.",
      "description_length": 396,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Arn.Exn",
      "library": "awsm",
      "description": "This module defines functions for constructing Amazon Resource Name (ARN) values with specific service and resource parameters, and raises exceptions on invalid inputs. It operates on string identifiers, service types, regions, and account IDs to build structured ARN values. Concrete use cases include generating ARNs for AWS resources like S3 buckets and objects, ensuring correct formatting and validation during construction.",
      "description_length": 429,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http.Request",
      "library": "awsm",
      "description": "This module constructs and inspects HTTP request values, supporting operations to set and retrieve the HTTP version, headers, method, and body. It works with request values (`t`), header maps (`Headers.t`), and HTTP methods (`Meth.t`). Concrete use cases include building custom HTTP requests for API calls, parsing incoming request metadata, and formatting requests for logging or debugging.",
      "description_length": 392,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Arn.Error",
      "library": "awsm",
      "description": "This module defines error types for invalid ARN qualifiers and account IDs, providing serialization and deserialization functions for these error cases. It works with string inputs that fail ARN parsing or validation, producing structured error values. Concrete use cases include handling malformed ARN components during resource name parsing or validation in AWS-related code.",
      "description_length": 377,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http.S",
      "library": "awsm",
      "description": "This module defines a uniform interface for HTTP operations, focusing on handling requests and responses with support for asynchronous execution. It works with data types like `Response.t`, `Body.t`, and `Client.t`, enabling concrete use cases such as sending HTTP requests, streaming response bodies, and managing connections. Specific functions include initiating GET/POST requests, reading headers, and processing streamed content.",
      "description_length": 434,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Http.Status",
      "library": "awsm",
      "description": "This module defines OCaml polymorphic variant types representing HTTP status codes, grouped into standard classifications such as informational, successful, redirection, client_error, and server_error. It provides `sexp_of_*` functions to convert each status code type to S-expressions for serialization and debugging. These types are used to ensure correctness when constructing or matching HTTP responses, particularly in applications that require precise handling of HTTP semantics, such as web servers or HTTP clients.",
      "description_length": 522,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Http.S-Client",
      "library": "awsm",
      "description": "This module defines a uniform interface for HTTP clients, supporting standard methods like `get`, `post`, `put`, and `delete`. It works with `Uri.t` for request targets, `Cohttp.Header.t` for headers, and handles responses via `Response.t` and `Body.t` types, all operating asynchronously using `Deferred.t`. It is used to make HTTP requests in a consistent way across different asynchronous backends, enabling direct interaction with REST APIs, external services, and web resources.",
      "description_length": 483,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http.Monad",
      "library": "awsm",
      "description": "This module defines a monad type class using higher-kinded polymorphism, enabling abstract manipulation of monadic values across effect systems like Async and Lwt. It provides core operations such as bind, return, and sequence, allowing code to be written in an effect-agnostic manner\u2014such as building HTTP clients and servers that work seamlessly with different concurrency backends. The first child module extends this structure to HTTP applications, adding injection and projection functions for composing handlers with effects like error handling or state. The second child module further generalizes HTTP operations, offering a consistent interface for request and response handling across concurrency models.",
      "description_length": 714,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Http.Range",
      "library": "awsm",
      "description": "Represents and manipulates HTTP byte range specifications for efficient partial content retrieval. It supports creating ranges from start and end positions, from the start or end of a resource, and converting ranges to HTTP header values. This module is used to construct byte range requests for streaming or downloading specific portions of large resources like files or media.",
      "description_length": 378,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Cfg.Config_file",
      "library": "awsm",
      "description": "Parses AWS CLI\u2013formatted configuration files into structured data, handling region and access key settings. Works with strings and returns parsed config values or errors. Use to load AWS parameters from standard config files when initializing SDK clients.",
      "description_length": 255,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Auth.Date_header",
      "library": "awsm",
      "description": "Formats timestamps for AWS Signature Version 4 authentication headers. Converts `Core.Time.t` values to ISO 8601-formatted strings suitable for HTTP date headers. Used to generate and validate the `Date` header in AWS API requests.",
      "description_length": 231,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Http.S-Response",
      "library": "awsm",
      "description": "This module defines the interface for handling HTTP responses, including operations to retrieve the response status code and headers. It works with a response type `t` that encapsulates HTTP response data. Concrete use cases include inspecting response metadata such as status codes and header fields when processing HTTP requests in both Async and Lwt environments.",
      "description_length": 366,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http.Io",
      "library": "awsm",
      "description": "This module orchestrates HTTP communication by composing request construction, execution, and response handling with support for headers, cookies, and streaming bodies. It centers around the `s` monadic type for defining composable HTTP call semantics, working with Cohttp's request and response types, and structured error handling via dedicated error variants. You can use it to build authenticated API clients, handle paginated resources with streaming, and decode service-specific errors like AWS responses into typed failures. Submodules refine its behavior by structuring effect handling and providing precise error modeling with serialization capabilities.",
      "description_length": 663,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Botodata.Json",
      "library": "awsm",
      "description": "Converts Boto specification values to JSON format, handling both scalar and structured data types. It operates on `Awsm.Botodata.value` representations of service metadata, operation parameters, and shape definitions. This module is used to serialize AWS service definitions into JSON for external processing or debugging.",
      "description_length": 322,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http.Headers",
      "library": "awsm",
      "description": "This module manages HTTP headers as a collection of key-value pairs. It supports creating headers from a list of strings, converting them back to lists, and provides empty header initialization. Use cases include constructing and inspecting HTTP request or response headers with proper formatting and serialization.",
      "description_length": 315,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Import.String",
      "library": "awsm",
      "description": "This module provides comprehensive character-sequence operations for string processing, including indexed iteration, transformation, and substring manipulation. It supports functions for case conversion, prefix/suffix handling, pattern-based search/replace, and conversions to collections like lists or arrays, while emphasizing ASCII-centric text processing without Unicode support. Typical use cases involve text analysis, data validation, string sanitization, and structured transformations requiring precise character-level control or custom comparison logic.",
      "description_length": 563,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Client.Query",
      "library": "awsm",
      "description": "This module transforms query values into a structured format suitable for HTTP requests. It supports serialization of complex data types like lists, maps, and nested structures, converting them into key-value pairs. Use it when preparing AWS API requests that require query string parameters with nested or structured data.",
      "description_length": 323,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http.Meth",
      "library": "awsm",
      "description": "This module defines HTTP method types, including standard methods like `GET`, `POST`, and custom methods via `Other`. It provides serialization to S-expressions and pretty-printing for debugging and logging. Useful for handling and inspecting HTTP requests in a type-safe manner.",
      "description_length": 279,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http.S-Pipe",
      "library": "awsm",
      "description": "Handles streaming HTTP request and response bodies using push-based pipes. It supports folding over a stream of values with asynchronous processing, and constructing streams from lists. Useful for processing large HTTP payloads incrementally without loading the entire body into memory.",
      "description_length": 286,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http.Response",
      "library": "awsm",
      "description": "This module handles HTTP response parsing and construction, providing access to response metadata and body streams. It works with response types that encapsulate status, headers, version, and body streams, supporting both Async and Lwt execution models. Concrete use cases include extracting response status codes, reading headers, streaming response bodies, and building custom HTTP responses with specified versions, headers, and body content.",
      "description_length": 445,
      "index": 26,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Awsm.Auth.Session_token_header",
      "library": "awsm",
      "description": "Adds an AWS session token to HTTP headers for authenticated requests. Works with Cohttp headers and string session tokens. Used when making API calls to AWS services that require temporary credentials.",
      "description_length": 201,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Import.Test",
      "library": "awsm",
      "description": "This module provides `pass` and `fail` functions that output test results with descriptive messages and contextual key-value pairs. It works with strings and association lists to log test outcomes directly to stdout. Use it to validate expected behavior in test cases by signaling success or failure with structured diagnostic output.",
      "description_length": 334,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Cfg.Shared_credentials_file",
      "library": "awsm",
      "description": "This module parses shared credentials files used by the AWS CLI, supporting operations to load and interpret credential data from standard file formats. It works with string-based file contents and returns structured credential configurations. Use this module to read AWS access keys and region settings from user-specific or system-wide credentials files.",
      "description_length": 356,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Arn.Default",
      "library": "awsm",
      "description": "This module constructs and manipulates default ARNs for AWS resources, handling common patterns for service-specific identifiers. It works with string-based ARN components and predefined service namespaces. Use it to generate ARNs for services like S3, Lambda, or DynamoDB without manually concatenating strings.",
      "description_length": 312,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Http.S-Body",
      "library": "awsm",
      "description": "Handles HTTP message bodies with support for streaming and in-memory representations. It provides functions to convert between strings and streaming pipes, enabling efficient processing of large payloads. Use cases include reading request/response content in web applications or APIs where body data may be processed incrementally or as a whole.",
      "description_length": 345,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Cfg.S3_custom_command_settings",
      "library": "awsm",
      "description": "This module configures S3 command behavior in AWS with settings like `max_concurrent_requests`, `multipart_threshold`, and `use_accelerate_endpoint`, offering accessors and S-expression serialization. It supports structured manipulation of optional string and boolean fields, including `addressing_style` and `max_bandwidth`, through operations that enable reading, transforming, and validating configurations. Submodules extend this functionality to handle bulk updates, field enumeration, and endpoint selection logic. Example uses include tuning transfer concurrency, enforcing dualstack endpoints, and serializing settings for storage or inspection.",
      "description_length": 653,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Cfg",
      "library": "awsm",
      "description": "This module processes AWS configuration parameters from multiple sources\u2014config files, credentials files, environment variables, and explicit values\u2014applying precedence rules to build a unified configuration record with optional string and region fields. It includes submodules for parsing AWS CLI\u2013formatted config and credentials files, enabling structured access to region, access key, and credential data, and supports use cases like initializing SDK clients with standardized settings. A separate submodule configures S3-specific behavior with tunable parameters such as concurrency limits and endpoint styles, allowing structured manipulation, validation, and serialization of optional fields. Together, these components enable precise control over AWS client configuration, mirroring the AWS CLI's behavior while supporting custom overrides and programmatic transformations.",
      "description_length": 880,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Auth",
      "library": "awsm",
      "description": "This module implements AWS Signature Version 4 signing for HTTP requests, enabling authentication with AWS credentials, including support for session tokens. It provides functions to sign URLs and requests using Cohttp headers, requests, and URIs, incorporating AWS regions, services, and time values to generate secure authentication data. The included timestamp formatting module converts `Core.Time.t` values to ISO 8601 strings for use in AWS date headers, while the session token module adds temporary credential support by inserting session tokens into HTTP headers. Example uses include generating pre-signed S3 URLs and authenticating API Gateway requests with temporary access keys.",
      "description_length": 691,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Service",
      "library": "awsm",
      "description": "This module defines a type `t` representing AWS service identifiers as strings, offering conversions to/from string and S-expression formats along with comparison operations. It includes predefined constants for services like S3, EC2, IAM, and specialized ones like SageMaker or CloudWatch, enabling programmatic interaction with AWS APIs. These identifiers facilitate resource management, service configuration, and operations such as data ingestion or analytics across infrastructure, databases, and machine learning platforms.",
      "description_length": 529,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Http",
      "library": "awsm",
      "description": "This module defines a uniform interface for HTTP operations, standardizing request and response handling across asynchronous frameworks like Async and Lwt. It includes core data types such as `Request.t`, `Response.t`, `Body.t`, and `Headers.t`, along with operations for managing methods, status codes, and IO with support for range requests and custom monadic contexts. Submodules refine this interface with specialized functionality: building and inspecting requests, handling headers as key-value pairs, streaming bodies with push-based pipes, and defining effect-agnostic monadic operations. Concrete use cases include constructing authenticated API clients, streaming large payloads, handling partial content requests, and decoding service-specific errors with consistent semantics across concurrency models.",
      "description_length": 814,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Import",
      "library": "awsm",
      "description": "This module extends the Core library with validation and conversion utilities for parsing structured data from external sources like APIs or config files. It provides functions to check sizes and patterns of strings, numbers, and lists, and to extract values from XML and JSON into typed OCaml values such as booleans, timestamps, or association lists. The string processing submodule enables precise text manipulation with ASCII-centric operations for tasks like sanitization or pattern replacement, while the test result submodule supports structured logging of pass/fail outcomes with diagnostic context. Together, these components enable robust data parsing, validation, and testing workflows.",
      "description_length": 697,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Xml",
      "library": "awsm",
      "description": "This module handles XML parsing and manipulation, providing functions to extract specific child elements, retrieve text content, and construct XML fragments from values. It works with XML trees represented as `Xmlm.frag` and supports operations like element lookup by tag name, text extraction with error handling, and conversion from structured data. Concrete use cases include processing AWS XML responses, building XML payloads from key-value pairs, and navigating XML documents to access nested elements.",
      "description_length": 508,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Botocore_endpoints",
      "library": "awsm",
      "description": "This module resolves AWS credential scopes and constructs service endpoint URIs based on region, service, and protocol. It directly handles `Awsm.Region.t` and `Awsm.Service.t` types, mapping them to scoped regions and fully qualified URIs. Concrete use cases include determining the correct signing region for cross-region requests and generating endpoint URLs for AWS service clients.",
      "description_length": 386,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Client",
      "library": "awsm",
      "description": "This module coordinates client-side request construction for AWS APIs, combining query parameter handling with content integrity checks via MD5 hashing. It directly supports signing requests and managing string-based payloads, while its child module enables structured serialization of complex query data like lists and maps into key-value pairs. Use it to generate signed HTTP requests with nested query parameters or verify request content integrity using MD5 hashes. Example workflows include building authenticated API calls with encoded query strings or preparing requests with signed headers and structured parameters.",
      "description_length": 624,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Data",
      "library": "awsm",
      "description": "This module provides a unified interface for manipulating structured data, with core operations for encoding, decoding, and transforming values between formats like JSON, XML, and S-expressions. It centers around the `t` type, which supports serialization to and from strings, binary blobs, and key-value representations, enabling tasks like preparing data for storage or network transmission. Submodules extend this functionality to AWS-specific transformations, allowing conversion of values into query parameters, headers, or AWS-compatible JSON. Use this module to handle data serialization, API response parsing, or request construction in AWS service integrations.",
      "description_length": 670,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Arn",
      "library": "awsm",
      "description": "This module parses, constructs, and manipulates Amazon Resource Names (ARNs) according to AWS specifications, offering structured access to components such as service, region, account ID, and resource. It supports operations like validating ARN strings, extracting and modifying fields programmatically, and generating S3 ARNs from bucket and key inputs. The child modules handle ARN construction with strict validation, error handling for malformed components, and generation of service-specific ARNs using predefined patterns. Together, they enable robust ARN processing, from low-level parsing to high-level construction for services like Lambda and DynamoDB.",
      "description_length": 662,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Awsm.Botodata",
      "library": "awsm",
      "description": "This module processes Boto specifications of Amazon services, converting structured OCaml types to and from S-expressions for code generation and service implementation. It handles service metadata, operation definitions, and composite data shapes, supporting operations like parsing specifications into executable code and serializing data models for external use. The JSON conversion submodule translates Boto values into JSON, enabling debugging and integration with other systems. Together, they facilitate building and manipulating AWS client libraries for services like S3 and DynamoDB.",
      "description_length": 592,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Region",
      "library": "awsm",
      "description": "This module provides operations for representing AWS regions as strings, converting between string and region values, serializing/deserializing to S-expressions, comparing regions, and enumerating predefined region constants. It defines a type `t` as the core representation, alongside individual region identifiers (e.g., `us_east_1`) and an exhaustive list of all supported regions. Such functionality is useful for applications requiring region validation, dynamic region selection, or iterating over AWS regions in service configuration or multi-region deployments.",
      "description_length": 569,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm.Json",
      "library": "awsm",
      "description": "This module defines a JSON data type with variants for primitive values, lists, and key-value objects. It provides functions to convert JSON values to and from S-expressions and string representations. Use this module to parse JSON strings into structured data, serialize JSON structures to strings, or interface with systems that use S-expressions.",
      "description_length": 349,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Awsm",
      "library": "awsm",
      "description": "This module suite provides comprehensive tooling for building, configuring, and authenticating AWS service clients by unifying configuration handling, request signing, data serialization, and resource parsing. It centers around core types like AWS services, regions, ARNs, and JSON/XML data, offering structured access, validation, and transformation. Operations include signing HTTP requests with AWS credentials, constructing service endpoints, parsing config files, and serializing query parameters for API calls. Example workflows include initializing S3 clients with region and credential overrides, generating pre-signed URLs, processing XML responses from AWS APIs, and validating ARNs for Lambda or DynamoDB resources.",
      "description_length": 726,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 50,
    "meaningful_modules": 47,
    "filtered_empty_modules": 3,
    "retention_rate": 0.94
  },
  "statistics": {
    "max_description_length": 880,
    "min_description_length": 201,
    "avg_description_length": 476.1063829787234,
    "embedding_file_size_mb": 0.17110538482666016
  }
}