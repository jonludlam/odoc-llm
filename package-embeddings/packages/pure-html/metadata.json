{
  "package": "pure-html",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:13:22.260386",
  "modules": [
    {
      "module_path": "Pure_html.Aria",
      "library": "pure-html",
      "description": "This module provides functions to define and manage ARIA attributes like `aria-live`, `aria-selected`, and `aria-rowspan`, which control accessibility states, relationships, and behaviors for HTML elements. It operates on primitive values (strings, booleans, integers) and enumerated types to construct `Pure_html.attr` attributes, enabling accessible interfaces for dynamic content, tables, and interactive widgets. Specific use cases include signaling live region updates, managing table row states, and ensuring screen reader compatibility for custom UI components.",
      "description_length": 568,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pure_html.RSS",
      "library": "pure-html",
      "description": "This module offers functions to construct RSS 2.0 feed elements (e.g., `channel`, `item`, `pub_date`, `enclosure`) and attributes (e.g., `url_`, `domain`, `protocol`), primarily operating on strings and integers to define structured metadata. It models RSS-specific HTML tags and attributes, enabling the creation of syndication feeds for content like blogs, podcasts, or news updates. The design supports direct embedding of RSS feeds into HTML documents without requiring external web framework dependencies.",
      "description_length": 510,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pure_html.HTML",
      "library": "pure-html",
      "description": "This module enables constructing HTML elements and attributes programmatically using type-safe values, with support for form handling, accessibility features, and media properties. It operates on strings, integers, floats, and polymorphic variants to model HTML attributes (e.g., `method_`, `draggable`, `srcset`) and categorizes tags into content-bearing (`std_tag`), text-escaped (`text_tag`), and self-closing (`void_tag`) variants. Specific use cases include generating secure HTML markup for forms, interactive elements, and modern features like popover UIs or shadow DOM properties without relying on web frameworks.",
      "description_length": 622,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pure_html.MathML",
      "library": "pure-html",
      "description": "This module provides a domain-specific language for embedding MathML in HTML, offering constructors for mathematical elements like equations, fractions, and roots through tags such as `mfrac`, `msqrt`, and `msub`. It supports attributes like `accent`, `displaystyle`, and `mathvariant` to control rendering behavior and styling of mathematical notation. These tools enable precise layout and visual customization of mathematical expressions in web documents without relying on external frameworks, making them ideal for applications requiring programmatic generation of mathematical content.",
      "description_length": 591,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pure_html.Atom",
      "library": "pure-html",
      "description": "This module defines atomic HTML elements and attributes for building static HTML content. It includes operations for creating standard tags like `link` and specifying attributes such as `xmlns`. It works with `Pure_html.attr` and `Pure_html.std_tag` to construct valid HTML fragments without runtime dependencies on web frameworks. Use this module when generating standalone HTML documents or components that require strict namespace or metadata declarations.",
      "description_length": 459,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pure_html.SVG",
      "library": "pure-html",
      "description": "This module provides functions to create and manipulate SVG elements and attributes such as `path`, `svg`, `d`, `fill`, `stroke`, and `viewbox`. It works with standard HTML tags and attributes, specifically tailored for inline SVG construction. Use it to generate scalable vector graphics directly within HTML output, like custom icons, charts, or illustrations with precise control over shape and style.",
      "description_length": 404,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pure_html.Hx",
      "library": "pure-html",
      "description": "This module provides functions to construct HTML attributes that enable dynamic client-server interactions through htmx, supporting operations like issuing HTTP requests, handling DOM events, manipulating browser history, and swapping content fragments. It works with standard HTML elements, using string values to configure behavior for scenarios like form validation, real-time updates via SSE/WebSockets, or event-driven UI changes, while offering low-level control over attributes like `hx-on` for Hyperscript integration. Specific use cases include building single-page application (SPA)-like experiences with partial page updates, progressive enhancement of forms with AJAX, and declarative event handling without full page reloads.",
      "description_length": 738,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pure_html",
      "library": "pure-html",
      "description": "The module enables programmatic construction and manipulation of HTML elements using `node` and `attr` types, supporting safe escaping, URI encoding, and typed attributes (boolean, numeric, string) for creating structured content like text nodes, void tags, and nested elements. It includes domain-specific submodules for SVG graphics, MathML equations, ARIA accessibility attributes, and htmx-driven dynamic interfaces, catering to use cases such as server-rendered UIs, syndication feeds, or embeddable vector graphics without runtime framework dependencies. Operations like attribute merging, conditional rendering, and node concatenation allow composing complex HTML trees through type-safe combinators.",
      "description_length": 707,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 738,
    "min_description_length": 404,
    "avg_description_length": 574.875,
    "embedding_file_size_mb": 0.11635398864746094
  }
}