{
  "package": "sihl-facade",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-07-15T23:07:32.834812",
  "modules": [
    {
      "module_path": "Sihl_facade.Random",
      "library": "sihl-facade",
      "description": "This module generates random byte sequences and base64-encoded strings of specified lengths. It provides direct access to random data generation and encoding operations. Typical use cases include creating secure tokens, random identifiers, or initializing cryptographic operations with random input.",
      "description_length": 299,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Migration",
      "library": "sihl-facade",
      "description": "This module manages database schema migrations through structured steps. It allows creating, registering, and executing migrations with support for labeling steps, handling foreign key constraints, and formatting migration data. Concrete use cases include defining versioned database schemas, applying incremental changes to databases, and ensuring migration consistency across environments.",
      "description_length": 391,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Session",
      "library": "sihl-facade",
      "description": "This module handles session management with operations to create, retrieve, and manipulate session data, including setting and finding key-value pairs. It works with session types defined in `Sihl_contract.Session`, along with time values using `Ptime.t`, and provides serialization via `to_sexp` and pretty-printing via `pp`. Concrete use cases include managing user sessions with expiration checks, storing session-specific data, and integrating session handling into a service container lifecycle.",
      "description_length": 500,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Queue",
      "library": "sihl-facade",
      "description": "This module defines queues for asynchronous job processing with support for job serialization, retries, and delayed execution. It works with job handlers that process inputs of a specific type, converting them to and from strings for storage. Concrete use cases include dispatching background tasks like sending emails or processing uploads with configurable retry policies and delays.",
      "description_length": 385,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Password_reset",
      "library": "sihl-facade",
      "description": "This module handles password reset operations by creating and validating reset tokens tied to user emails and updating passwords securely. It works with strings for email, tokens, and passwords, and returns optional or result types for safe error handling. Concrete use cases include initiating a password reset flow and applying new passwords after token verification.",
      "description_length": 369,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Storage",
      "library": "sihl-facade",
      "description": "This module handles file metadata manipulation and storage operations, providing functions to upload, download, update, and delete files using base64 encoding. It works with `file` and `stored` data types representing file metadata and persisted files. Concrete use cases include managing file attachments in a web application, modifying metadata like MIME type or filename, and persisting or retrieving file content from storage.",
      "description_length": 430,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Email_template",
      "library": "sihl-facade",
      "description": "This module handles email template serialization, modification, and rendering. It provides functions to convert templates to and from JSON and S-expressions, update template fields like label, text, and HTML, and render templates with variable substitutions. It supports creating, retrieving, and updating email templates, as well as integrating them into an email sending workflow.",
      "description_length": 382,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Token",
      "library": "sihl-facade",
      "description": "This module creates, validates, and manages signed tokens with expiration and activation state. It operates on string-based key-value pairs stored within tokens, allowing reading individual or all values, verifying signatures, checking expiration, and deactivating or reactivating tokens. Concrete use cases include handling authentication tokens, password reset tokens, and session management with fine-grained control over token validity and security.",
      "description_length": 453,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Schedule",
      "library": "sihl-facade",
      "description": "This module schedules and manages the execution of background tasks at specified intervals. It provides functions to register scheduled tasks, start their execution, and manage their lifecycle as part of a service container. It works with schedule definitions and service implementations conforming to the schedule contract.",
      "description_length": 324,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Email",
      "library": "sihl-facade",
      "description": "This module handles email creation, modification, and delivery, providing functions to set text and HTML content, send emails individually or in bulk, and manage a development in-memory mailbox for testing. It works with a custom email type that includes sender, recipient, subject, and content fields, and supports serialization to S-expressions and JSON. Concrete use cases include sending transactional emails, verifying sent emails during tests, and clearing intercepted emails between test runs.",
      "description_length": 500,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.User",
      "library": "sihl-facade",
      "description": "This component offers utilities for managing user data with operations spanning authentication, role enforcement, and structured data manipulation. It centers on user records containing email, password, and role attributes, supporting tasks like secure password updates, role-based access checks, and filtered user searches with sorting capabilities. Key scenarios include enforcing password complexity policies, validating user permissions during registration, and transforming user data between storage formats (e.g., Sexp, Yojson).",
      "description_length": 534,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade",
      "library": "sihl-facade",
      "description": "This module provides a comprehensive set of tools for handling security, data persistence, background processing, and communication in web applications. It includes primitives for generating secure tokens and random data, managing database schemas, handling user sessions, and scheduling background tasks. Key data types include sessions, jobs, files, emails, and users, with operations for serialization, storage, and transformation. Examples include creating password reset tokens, applying database migrations, queuing email delivery, and managing user roles with access control.",
      "description_length": 582,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 582,
    "min_description_length": 299,
    "avg_description_length": 429.0833333333333,
    "embedding_file_size_mb": 0.044005393981933594
  }
}