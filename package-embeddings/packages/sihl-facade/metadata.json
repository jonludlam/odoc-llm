{
  "package": "sihl-facade",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 12,
  "creation_timestamp": "2025-08-14T23:18:07.915063",
  "modules": [
    {
      "module_path": "Sihl_facade.Queue",
      "library": "sihl-facade",
      "description": "This module provides functions to create, configure, and dispatch typed queue jobs with retry policies and optional delayed execution. It works with job queues that process inputs of arbitrary type `'a`, converting them to and from strings for serialization. Concrete use cases include enqueueing background tasks like sending emails or processing uploads, where each job must handle its input and specify failure behavior.",
      "description_length": 423,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Migration",
      "library": "sihl-facade",
      "description": "This module manages database migrations through operations like creating, registering, and executing migration steps. It works with migration data structures that include steps with labels and SQL statements, supporting tasks like schema evolution and data initialization. Concrete use cases include defining versioned database schemas, applying incremental updates, and ensuring database consistency across deployments.",
      "description_length": 420,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.User",
      "library": "sihl-facade",
      "description": "The functions focus on user data manipulation (creation, validation, modification, querying, including serialization to Sexp/Yojson and pretty-printing) with password policy enforcement, authentication, and lifecycle management (registration, confirmation, state transitions). They operate on user records (`Sihl_contract.User.t`), supporting secure administration tasks like role assignment, password updates, and detail changes, alongside filtered/sorted data retrieval for policy-compliant user management and authentication workflows.",
      "description_length": 538,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Storage",
      "library": "sihl-facade",
      "description": "This module handles file metadata manipulation and storage operations, providing functions to upload, download, update, and delete files using base64 encoding. It works with `file` and `stored` types representing file metadata and persisted files, respectively. Concrete use cases include storing and retrieving file data from a storage backend, modifying metadata like filename, size, and MIME type, and managing file lifecycles within a service container.",
      "description_length": 457,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Token",
      "library": "sihl-facade",
      "description": "This module creates, validates, and manages signed tokens with configurable expiration and secret keys, storing arbitrary key-value data. It supports operations to read specific values, verify integrity, check expiration or activity status, and deactivate or reactivate tokens. Typical use cases include generating short-lived authentication tokens with embedded user data and validating them later while ensuring signature and expiration checks.",
      "description_length": 446,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Random",
      "library": "sihl-facade",
      "description": "This module generates random byte sequences and base64-encoded strings of specified lengths. It provides direct access to random data production and encoding, supporting use cases like token generation, password salts, and unique identifier creation. The module also handles service lifecycle management and implementation registration for random data generation.",
      "description_length": 363,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Schedule",
      "library": "sihl-facade",
      "description": "This module schedules and manages the execution of background tasks using a predefined schedule configuration. It provides functions to register scheduled services, start their execution, and manage their lifecycle within a container. Concrete use cases include running periodic database cleanups or sending scheduled emails at fixed intervals.",
      "description_length": 344,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_facade.Email_template",
      "library": "sihl-facade",
      "description": "This module handles email template serialization, modification, and rendering. It provides functions to convert templates to and from S-expressions and JSON, update template fields like label, text, and HTML, and render templates with variable substitutions. It supports creating, retrieving, and updating email templates, as well as integrating them into an email sending workflow.",
      "description_length": 382,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Email",
      "library": "sihl-facade",
      "description": "This module provides functions to construct, modify, and serialize email messages, supporting operations like setting text or HTML content, sending emails, and managing an in-memory mailbox for testing. It works with a custom email type representing message metadata and content. Concrete use cases include sending transactional emails, capturing sent emails during tests, and serializing emails for logging or storage.",
      "description_length": 419,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade.Session",
      "library": "sihl-facade",
      "description": "This module handles session management with operations to create, retrieve, and manipulate session data, including setting and finding key-value pairs. It works with session types defined in `Sihl_contract.Session.t`, using `Ptime.t` for time-based expiration checks and `string` identifiers for session keys. Concrete use cases include managing user authentication sessions, storing temporary session data, and checking session expiration in web applications.",
      "description_length": 460,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sihl_facade.Password_reset",
      "library": "sihl-facade",
      "description": "This module handles password reset operations by creating and managing reset tokens linked to user emails and validating them to update passwords. It works with strings for email, token, and password data, and returns optional or result types for safe error handling. Concrete use cases include initiating a password reset flow and applying new passwords after token verification.",
      "description_length": 380,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sihl_facade",
      "library": "sihl-facade",
      "description": "This module provides core functionality for application development, including email construction and delivery, password reset flows, background job queuing, random data generation, session management, and scheduled task execution. It operates on specialized data types such as email messages, user records, session data, and job payloads, enabling concrete use cases like sending transactional emails, managing authentication sessions, enqueuing background tasks, and generating secure tokens or salts. The module supports direct integration into web application workflows for user management, data persistence, and system scheduling.",
      "description_length": 635,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 635,
    "min_description_length": 344,
    "avg_description_length": 438.9166666666667,
    "embedding_file_size_mb": 0.1742992401123047
  }
}