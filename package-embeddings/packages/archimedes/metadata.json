{
  "package": "archimedes",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 21,
  "creation_timestamp": "2025-08-15T12:16:51.863055",
  "modules": [
    {
      "module_path": "Archimedes_cairo.B",
      "library": "archimedes.cairo",
      "description": "This module provides low-level 2D graphics operations for path construction, styling, and rendering, including line property configuration, B\u00e9zier curves, shape drawing, and text layout with rotation support. It operates on Cairo backend handles to manage transformation matrices, clipping regions, and rendering state for tasks like scientific visualization or vector graphics generation. Key capabilities include path manipulation, stroke/fill operations, and backend lifecycle control for rendering workflows.",
      "description_length": 512,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes_cairo",
      "library": "archimedes.cairo",
      "description": "This module implements 2D graphics operations for path construction, styling, and rendering, supporting B\u00e9zier curves, shape drawing, and text layout with rotation. It works directly with Cairo backend handles to manage transformation matrices, clipping regions, and rendering state. Use it for scientific visualization, vector graphics generation, and custom rendering workflows requiring precise control over graphical output.",
      "description_length": 428,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Backend.Register",
      "library": "archimedes",
      "description": "This module registers backend functions under a specified name, enabling dynamic loading of the backend `B` from a corresponding library file. It works with backend modules that conform to a specific interface, requiring the backend's implementation to be declared in a file named `archimedes_B.name`. A concrete use case is initializing a custom rendering backend for on-demand loading during application startup.",
      "description_length": 414,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Matrix.Homothety",
      "library": "archimedes",
      "description": "This module implements homothety transformations, which combine translation and axis-aligned scaling with independent x and y scale factors. It operates on 2D points, distances, and rectangles using an internal affine matrix representation that enforces the absence of rotation. Concrete use cases include scaling and translating graphical objects uniformly or anisotropically, transforming coordinate systems for rendering, and computing inverse transformations for input mapping.",
      "description_length": 481,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archimedes.Viewport",
      "library": "archimedes",
      "description": "This module provides tools for constructing and manipulating graphical plotting areas, enabling layout composition (grids, rows, columns, borders), coordinate system management (axis scaling, range synchronization), and styling operations (colors, line widths, fonts). It operates on viewports, coordinate mappings, and graphical primitives like paths and text, supporting use cases such as creating multi-panel visualizations with linked axes, generating styled plots for publications, and implementing interactive rendering workflows with direct state control. The module also facilitates dynamic adjustments to visual properties and precise rendering through low-level instruction queuing.",
      "description_length": 692,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.List",
      "library": "archimedes",
      "description": "This module provides functions to plot lists of floating-point values as Y-only or XY data series, supporting line and marker styles with optional fill. It operates directly on float lists for Y values and pairs of float lists or list tuples for XY coordinates. Use it to visualize numerical datasets like time series, mathematical functions, or experimental measurements.",
      "description_length": 372,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Color",
      "library": "archimedes",
      "description": "This library handles color creation, manipulation, and blending using a concrete type representing four-channel RGBA values with components normalized between 0.0 and 1.0. It supports constructing colors from RGB, integer, or hue-based inputs, extracting individual channels, calculating luminance, and applying transformations like lightening, darkening, or blending with operators such as Over and Add. The implementation includes predefined constants for standard named colors and utilities for generating high-contrast text pairs or compositing transparent elements in graphical rendering contexts.",
      "description_length": 602,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Vec",
      "library": "archimedes",
      "description": "This module provides functions for plotting one-dimensional Fortran-layout bigarrays of floating-point values. It supports line and stacked area plots with customizable styles, fill colors, and viewport configurations. Typical use cases include visualizing numerical data series and comparative datasets in scientific computing workflows.",
      "description_length": 338,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Marker",
      "library": "archimedes",
      "description": "This module manages customizable point styles for rendering, allowing users to define and register new styles with a drawing function and bounding box. It works with strings as style identifiers, functions for rendering, and rectangle structures to define mark dimensions. Use this to create distinct visual markers like circles, squares, or custom glyphs in plots or diagrams.",
      "description_length": 377,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Backend",
      "library": "archimedes",
      "description": "This module provides low-level vector graphics operations for path construction, transformation, and text rendering, including primitives for strokes, fills, clipping, and matrix manipulations. It works with backend contexts (`t`), transformation matrices, and font configuration data to enable tasks like rendering custom shapes, applying geometric transformations, and handling text layout with precise styling. These capabilities are primarily used when implementing new graphics backends or requiring direct control over rendering pipelines beyond high-level plotting abstractions.",
      "description_length": 585,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archimedes.Coordinate",
      "library": "archimedes",
      "description": "This module enables managing hierarchical coordinate systems with transformations like translation, scaling, and matrix operations, maintaining relationships between parent and child systems. It supports automatic propagation of changes through dependencies, allowing conversions between coordinate spaces (e.g., device or custom systems) and tracking modifications via monitors. Key applications include dynamic graphical layouts and interactive visualizations where coordinate adjustments must ripple consistently through nested transformations.",
      "description_length": 547,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.CVec",
      "library": "archimedes",
      "description": "This module provides functions for plotting 2D data using C bigarrays, specifically supporting line plots (`y`, `xy`) and stacked area plots (`stack`) with customizable styles and fill options. It operates on one-dimensional bigarrays of floats and supports viewport-based rendering for visualizing numerical data series. Concrete use cases include plotting time series data, histograms, and layered datasets directly from memory-efficient bigarray structures.",
      "description_length": 460,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Tics",
      "library": "archimedes",
      "description": "This module defines types and constructors for specifying tick mark positions and labels on axes. It supports fixed tick locations with custom labels, equidistant ticks with minor divisions, and automatic tick placement. Use cases include configuring axis ticks in plots with precise control over label formatting and spacing.",
      "description_length": 326,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Sampler",
      "library": "archimedes",
      "description": "Performs adaptive sampling of parametric and scalar functions using customizable strategies and cost functions. It works with floating-point numbers and arrays, evaluating functions over intervals to generate sampled points. Useful for plotting or numerical analysis where precise function representation is needed with dynamic resolution adjustments.",
      "description_length": 351,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Piechart",
      "library": "archimedes",
      "description": "This module draws pie charts and multilevel pie charts, supporting flat, highlighted, and 3D relief styles. It works with labeled numeric data and hierarchical data structures, allowing custom color schemes, key placements, and label formats. Concrete use cases include visualizing proportional data distributions and nested data breakdowns with customizable aesthetics and annotations.",
      "description_length": 386,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Path",
      "library": "archimedes",
      "description": "This module provides operations for constructing and modifying 2D geometric paths using floating-point coordinates, supporting primitives like lines, B\u00e9zier curves, arcs, and circles. It works with abstract path representations and dense numeric arrays (including Fortran/C layouts) to enable tasks like path concatenation, closure, and affine transformations via matrix operations. Typical applications include vector graphics rendering, geometric path analysis, and numerical computations requiring precise shape manipulation.",
      "description_length": 528,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Archimedes.Matrix",
      "library": "archimedes",
      "description": "This module provides functions for constructing and manipulating 2D affine transformations, including identity, translation, scaling, rotation, inversion, and composition, as well as specialized operations like homothety (translation with independent x/y scaling) and shear detection. It works with mutable 6-float affine matrices, axis-aligned rectangles with float coordinates, and 2D points/vectors. These tools are used for geometric computations requiring precise transformations, such as scaling and translating objects without rotation, composing complex transformations, or mapping rectangles under constrained affine operations.",
      "description_length": 637,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Axes",
      "library": "archimedes",
      "description": "This module draws 2D axes systems using customizable configurations for grid lines, tics, and arrow styles. It supports individual axis placement with relative or absolute offsets and offers predefined layouts like boxed or cross-shaped axes. Concrete use cases include plotting mathematical functions with labeled axes, visualizing data ranges with grid lines, and creating coordinate systems for geometric diagrams.",
      "description_length": 417,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Array",
      "library": "archimedes",
      "description": "This module provides functions to plot 2D data using float arrays, including plotting Y values against indices, plotting X-Y pairs from separate or combined arrays, and stacking multiple Y datasets. It supports customizable visual styles such as fill colors, line styles, and markers. Concrete use cases include visualizing time series data, scatter plots, and cumulative data distributions.",
      "description_length": 391,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes.Arrows",
      "library": "archimedes",
      "description": "This module defines arrow styles like `Simple`, `Double`, and `Custom` for rendering arrows on paths or viewports. It provides functions to draw arrowed lines and arcs with configurable head and tail styles, directly or through queued instructions. Concrete use cases include annotating diagrams with directional indicators or creating styled connectors in vector graphics.",
      "description_length": 373,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Archimedes_toploop",
      "library": "archimedes.top",
      "description": "This module provides direct evaluation of OCaml code strings and module loading capabilities, primarily supporting interactive plotting in the toplevel environment. It works with strings representing OCaml expressions and lists of module names. Concrete use cases include dynamically executing user input and loading required modules for immediate plotting without prior handle setup.",
      "description_length": 384,
      "index": 20,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 22,
    "meaningful_modules": 21,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9545454545454546
  },
  "statistics": {
    "max_description_length": 692,
    "min_description_length": 326,
    "avg_description_length": 457.1904761904762,
    "embedding_file_size_mb": 0.30480289459228516
  }
}