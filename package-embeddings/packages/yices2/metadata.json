{
  "package": "yices2",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 17,
  "creation_timestamp": "2025-07-15T23:09:35.073104",
  "modules": [
    {
      "module_path": "Yices2.Term.Int",
      "library": "yices2",
      "description": "This module converts integer values of various types into Yices2 terms, enabling their use in logical expressions and constraints. It supports conversions from standard OCaml integer types (`int`, `int32`, `int64`, `nativeint`) as well as arbitrary-precision integers via `Z.t`. These functions are essential when constructing arithmetic constraints in SMT solving workflows.",
      "description_length": 375,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yices2.Term.Bool",
      "library": "yices2",
      "description": "This module constructs Boolean expressions using logical connectives, quantifiers, and equality predicates, operating on terms and types to model constraints for SMT solving. It supports encoding conditions like conditional branching, universal/existential quantification, and value distinctness in formal verification tasks. Key applications include specifying logical formulas with variables and building verification conditions for program analysis.",
      "description_length": 452,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yices2.Context.Config",
      "library": "yices2",
      "description": "Manages configuration settings for SMT solver contexts. It provides functions to create a configuration object, set key-value pairs, and apply default settings for a given logic. Use this module to customize solver behavior, such as enabling preprocessing or setting timeout limits, before creating a solver instance.",
      "description_length": 317,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yices2.Term.Ratio",
      "library": "yices2",
      "description": "This module constructs rational number terms from various integer types and string representations. It supports creating terms from pairs of integers (numerator and denominator) as well as parsing rational and floating-point numbers from strings. Concrete use cases include building rational constants for SMT formulas from integer literals or string inputs.",
      "description_length": 358,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yices2.Term.Bitvector",
      "library": "yices2",
      "description": "This module's operations center on constructing and transforming fixed-size bitvector terms through arithmetic (addition, multiplication, division), bitwise logic (AND, OR, shifts, rotations), and structural manipulations (concatenation, extraction, sign extension). It exclusively works with `Yices2.term` values representing bitvectors, often combining them with integer parameters for shift/rotate amounts or bitwidth specifications. These capabilities are particularly useful for modeling low-level system behaviors such as CPU instruction semantics, cryptographic algorithms, or hardware circuit verification where precise bit-level control and overflow-aware arithmetic are critical.",
      "description_length": 689,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yices2.Term.Poly",
      "library": "yices2",
      "description": "This module constructs integer polynomial terms from coefficient arrays and term arrays, supporting operations with various integer types such as `int`, `int32`, `int64`, `nativeint`, and `Z.t`. Each function takes an array of coefficients and an array of terms, returning a combined term representing the polynomial. It is used to build linear or polynomial expressions for SMT solving, such as encoding arithmetic constraints over integer variables.",
      "description_length": 451,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yices2.Term.Fun",
      "library": "yices2",
      "description": "This module constructs and manipulates function terms in Yices2, supporting operations for applying functions to arguments, updating function definitions, and creating lambda expressions. It works with function terms, arrays of terms representing arguments, and lambda abstractions over typed variables. Concrete use cases include building symbolic representations of functions, modifying function behavior in SMT expressions, and encoding higher-order logic constructs for formal verification tasks.",
      "description_length": 500,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yices2.Term.Tuple",
      "library": "yices2",
      "description": "This module provides operations to construct, access, and modify tuples within the Yices2 SMT solver. It supports creating a tuple from an array of terms, selecting a specific element by index, and updating a tuple element at a given position. These functions are used when modeling structured data in SMT problems, such as representing records or fixed-size collections of related values.",
      "description_length": 389,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yices2.Term.Arith",
      "library": "yices2",
      "description": "This module supports arithmetic manipulations and comparisons on numerical expressions represented as `Yices2.term` values, including addition, multiplication, exponentiation, division, and ordering relations. It provides specialized operations for constructing constraints, such as zero-comparison predicates (`leq0`, `gt0`), which are critical for modeling equations, inequalities, and logical conditions in SMT solver workflows.",
      "description_length": 431,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yices2.Context.Params",
      "library": "yices2",
      "description": "This module manages configuration parameters for a context, allowing creation of parameter records and setting individual parameter values by key. It operates on a `params` type, which stores key-value pairs as strings. Use this module to customize context behavior, such as adjusting solver settings or enabling specific features during initialization.",
      "description_length": 353,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yices2.Term.RatioPoly",
      "library": "yices2",
      "description": "Constructs rational polynomial terms from coefficient arrays and variable arrays using various numeric types (int, int32, int64, nativeint, Q.t). Supports creating polynomials with integer or rational coefficients over a given set of terms representing variables. Useful for encoding mathematical expressions in SMT solving contexts where precise rational arithmetic is required.",
      "description_length": 379,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yices2.Error",
      "library": "yices2",
      "description": "This module defines error codes and detailed error reports for invalid operations or malformed inputs in term and type manipulations. It includes specific errors for arithmetic, bitvectors, tuples, and solver constraints, along with contextual issues like unsupported logics or configuration problems. Use cases include handling invalid term construction, type mismatches, and solver-specific errors with precise diagnostic information.",
      "description_length": 436,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yices2.Term",
      "library": "yices2",
      "description": "This module enables constructing and transforming terms with support for constants, uninterpreted functions, and substitutions, operating on `Yices2.term` and string representations. It provides utilities for inspecting term properties, managing symbolic names, and serializing terms to and from Yices syntax, with core applications in building and debugging SMT expressions for verification tasks. Child modules extend this functionality by supporting integer and rational conversions, Boolean expressions, bitvector operations, polynomial construction, function manipulation, tuple handling, and arithmetic constraints, enabling precise modeling of low-level behaviors, structured data, and mathematical expressions. Specific capabilities include converting OCaml integers to terms, encoding logical formulas with quantifiers, constructing bitvector arithmetic for hardware verification, and building polynomials with rational coefficients over symbolic variables.",
      "description_length": 966,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yices2.Experimental",
      "library": "yices2",
      "description": "Resets the Yices solver state to its initial configuration, clearing all assertions and variables. This operation is used to reuse the same solver instance for multiple solving tasks without reallocating resources. It is particularly useful in iterative workflows where repeated constraint solving is required with varying inputs.",
      "description_length": 330,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yices2.Model",
      "library": "yices2",
      "description": "This module provides functions to extract values from a model, including booleans, integers, rationals, floats, and bitvectors, all based on a `Yices2.model` and `Yices2.term`. It supports precise value retrieval in various numeric types like `int`, `int64`, `nativeint`, and arbitrary-precision types like `Z.t` and `Q.t`. Use cases include interpreting results from SMT solver queries, debugging constraints, and extracting concrete solutions from models after solving.",
      "description_length": 471,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Yices2.Context",
      "library": "yices2",
      "description": "This module orchestrates the solving process for logical formulas using the Yices SMT solver, offering direct control over assertion stacks, solver configurations, and satisfiability checks. It supports incremental solving through push/pop operations, model extraction, and customizable solving parameters, working with core types like contexts, terms, and models. The configuration submodule allows fine-grained adjustment of solver behavior, such as setting timeouts or enabling preprocessing, while the parameters submodule enables dynamic tuning of context-specific settings during initialization. Examples include asserting a formula, configuring a solver for a specific logic, and querying a model after a satisfiability check.",
      "description_length": 733,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Yices2",
      "library": "yices2",
      "description": "This module integrates SMT solver interaction with rich term construction, error handling, and model extraction capabilities, enabling formal verification and constraint solving tasks. It supports key data types like `term`, `model`, and `context`, with operations to build expressions, assert constraints, check satisfiability, and retrieve solutions. Users can construct complex logical formulas using integers, bitvectors, and functions, handle errors precisely during term manipulation, and extract concrete values from solved models. The module supports workflows that require iterative solving, model inspection, and direct control over solver configuration and state.",
      "description_length": 674,
      "index": 16,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 17,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9444444444444444
  },
  "statistics": {
    "max_description_length": 966,
    "min_description_length": 317,
    "avg_description_length": 488.47058823529414,
    "embedding_file_size_mb": 0.06222820281982422
  }
}