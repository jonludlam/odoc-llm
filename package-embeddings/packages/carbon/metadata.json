{
  "package": "carbon",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 15,
  "creation_timestamp": "2025-06-18T16:33:17.508928",
  "modules": [
    {
      "module_path": "Carbon.Gb.Period",
      "description": "Converts a period type to its ISO8601 start and end string representations. Operates on an abstract time interval type, capturing temporal ranges. Used to generate standardized time markers for logging or data serialization.",
      "description_length": 224,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carbon.Gb.Error",
      "description": "type t = { message : string; code : int; backtrace : string list } Provides functions to create error instances with messages, error codes, and stack traces, and to format errors for logging or display. Works with structured error data including strings, integers, and lists of strings. Used to track and report application failures with detailed diagnostic information.",
      "description_length": 370,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carbon.Gb.Intensity",
      "description": "Provides functions to retrieve the valid period, forecast, and actual carbon intensity values, along with an index extractor and a pretty printer. Works with a custom type `t` representing intensity data and a variant type `index` for categorizing intensity levels. Used to analyze and display real-time or projected carbon impact metrics for energy consumption.",
      "description_length": 362,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carbon.Gb.Factors",
      "description": "Provides functions to factorize integers into their prime components, compute divisors, and check for primality. Works with the integer type and returns lists of prime factors and divisors. Used to analyze number properties in mathematical algorithms and cryptography.",
      "description_length": 268,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carbon.Intensity.Gb",
      "description": "Returns the current gCO2/kWh value as an integer option, allowing for optional presence of the measurement. Operates on the internal representation of energy intensity data. Used to retrieve real-time environmental impact metrics for energy consumption reports.",
      "description_length": 261,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carbon.Intensity.Fr",
      "description": "Returns the current gCO2/kWh value as an integer option, allowing for optional presence of emission data. Operates on the `t` type, which encapsulates emission rate information. Used to retrieve and handle emission rates in energy consumption calculations.",
      "description_length": 256,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carbon.Intensity.Co2_signal",
      "description": "Provides access to a pre-defined zone configuration, enabling precise control over sensor data aggregation and threshold evaluation. Operates with zone-specific data structures that encapsulate spatial and temporal parameters. Used to initialize and manage co2 level monitoring within a defined environmental area.",
      "description_length": 314,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Carbon.Co2_signal.Zone",
      "description": "This module provides functions to define and manipulate geographic zones, including country-level and sub-regional divisions, with a focus on structured identifiers like ISO codes and custom naming conventions. It operates on a custom type `t` representing zones, supporting operations such as string conversion and hierarchical regional categorization. Use cases include precise geographic mapping for the Electric Map API, utility grid operations, and regional data aggregation across locations like Australia, the U.S., and Vietnam.",
      "description_length": 535,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Carbon.Co2_signal.Intensity",
      "description": "Calculates CO2-eq intensity in grams per kilowatt-hour, retrieves associated zone codes, and extracts datetime strings from data entries. It operates on a custom type representing environmental energy data. Used to generate reports with localized emission factors and time-stamped values.",
      "description_length": 288,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carbon.Gb",
      "description": "Encapsulates tools for handling time intervals, errors, carbon intensity data, and number theory. Offers operations to convert time periods to ISO strings, manage structured errors with codes and traces, query and format carbon intensity metrics, and perform prime factorization and divisor calculations. Enables precise time-based data handling, robust error tracking, real-time environmental impact analysis, and mathematical computations. Supports tasks like logging time ranges, debugging with stack traces, monitoring energy efficiency, and implementing cryptographic algorithms.",
      "description_length": 584,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Carbon.Fr",
      "description": "Creates a configuration value with network capabilities and retrieves the latest carbon intensity data in gCO2/kWh. Works with an opaque type representing network-enabled settings. Used to fetch real-time environmental impact metrics for energy consumption analysis.",
      "description_length": 266,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carbon.Co2_signal",
      "description": "Combines geographic zone definitions with environmental data processing, enabling precise regional analysis and emission tracking. It handles custom types for zones and energy data, supporting operations like ISO code retrieval, time-stamped value extraction, and CO2-eq intensity calculation. Users can map utility grids, aggregate regional data, and generate localized emission reports. For example, it can calculate emissions for a U.S. state or track changes in Vietnam's energy efficiency over time.",
      "description_length": 504,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Carbon.Intensity",
      "description": "Retrieves and manages energy and emission intensity data through zone-specific configurations. It handles `t`-typed emission rate structures and provides real-time gCO2/kWh values as optional integers. Users can initialize monitoring systems, aggregate sensor data, and evaluate thresholds within defined zones. Operations include fetching current metrics, processing emission rates, and configuring environmental parameters for accurate energy impact analysis.",
      "description_length": 461,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "carbon",
      "description": "Provides functions to fetch and process carbon intensity data from regional and global energy grid APIs, including methods to retrieve and aggregate generation mix statistics. Works with geographic identifiers, time ranges, and structured API responses containing energy source percentages and intensity values. Used to inform real-time energy scheduling decisions and monitor environmental impact of computational workloads.",
      "description_length": 425,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Carbon",
      "description": "Provides tools for querying and analyzing carbon intensity data across geographic zones, handling time intervals, and performing mathematical operations. It includes types for zones, emission rates, and time-stamped data, with operations to retrieve real-time CO2-eq values, calculate emissions for specific regions, and manage error states. Functions support prime factorization, ISO time formatting, and zone-specific data aggregation. For example, it can compute emissions for a U.S. state or track changes in energy efficiency over time.",
      "description_length": 541,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 15,
    "meaningful_modules": 15,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 584,
    "min_description_length": 224,
    "avg_description_length": 377.26666666666665,
    "embedding_file_size_mb": 0.05494403839111328
  }
}