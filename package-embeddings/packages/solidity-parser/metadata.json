{
  "package": "solidity-parser",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:28:46.498508",
  "modules": [
    {
      "module_path": "solidity-parser",
      "description": "Parses Solidity source code into an abstract syntax tree using lexical and syntactic analysis functions. Processes contract definitions, expressions, and type annotations from source files. Enables validation of Solidity code structure and semantics during compilation workflows.",
      "description_length": 279,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Solidity_lexer",
      "description": "Resets the internal state of the lexer to begin parsing a new input stream. Processes input using a lexing buffer and returns tokens defined by the Solidity language grammar. Designed to work with raw source code strings to identify keywords, operators, and identifiers during compilation.",
      "description_length": 289,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Solidity_raw_parser",
      "description": "Parses Solidity source code into an abstract syntax tree, processing lexed input to extract module-level constructs. It handles tokens representing keywords, identifiers, and symbols specific to Solidity's grammar. Used to analyze contract definitions, import statements, and top-level declarations in smart contract files.",
      "description_length": 323,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Version",
      "description": "Provides functions to retrieve the version string, optional commit hash, and optional commit date. Works with string and option types to expose build-time metadata. Used to display application version information and track build origins in logs or user interfaces.",
      "description_length": 264,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Main",
      "description": "Handles application entry point by initializing system components and launching the primary execution loop. Operates with unit type to signal start and completion. Used to bootstrap the application and manage its lifecycle.",
      "description_length": 223,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solidity_parser",
      "description": "Extracts imported file paths from a Solidity AST, parses source code into an abstract syntax tree with line number tracking, and converts raw source strings into structured program representations. Works with Solidity AST nodes, string inputs, and set structures for tracking dependencies. Used to analyze contract dependencies and build structured representations for static analysis tools.",
      "description_length": 391,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 391,
    "min_description_length": 223,
    "avg_description_length": 294.8333333333333,
    "embedding_file_size_mb": 0.022230148315429688
  }
}