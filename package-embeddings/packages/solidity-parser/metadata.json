{
  "package": "solidity-parser",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:06.483484",
  "modules": [
    {
      "module_path": "Version",
      "library": "solidity-parser",
      "description": "Stores and exposes version metadata including a version string, commit hash, and commit date. Works with string and option types to represent version information. Useful for embedding build-time details into applications for diagnostics or reporting.",
      "description_length": 250,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solidity_lexer",
      "library": "solidity-parser",
      "description": "This module provides a lexer for Solidity source code, converting character streams into lexical tokens recognized by the Solidity parser. It operates on `Lexing.lexbuf` input buffers and produces tokens compatible with the `Solidity_raw_parser`. Use it to tokenize Solidity smart contract files or code snippets before parsing.",
      "description_length": 328,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Main",
      "library": "solidity-parser",
      "description": "The module initializes and runs the primary application logic. It defines the `main` function, which serves as the entry point for execution, typically handling setup, workflow orchestration, and shutdown. This module directly coordinates core components and is invoked to start the program.",
      "description_length": 291,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solidity_parser",
      "library": "solidity-parser",
      "description": "Extracts imported file paths from Solidity AST modules and parses Solidity source code into abstract syntax trees. Operates on Solidity AST structures and string inputs. Used to analyze dependencies and structure of Solidity smart contracts during static analysis or toolchain processing.",
      "description_length": 288,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solidity_raw_parser",
      "library": "solidity-parser",
      "description": "This module provides a parser for Solidity smart contract source code, converting raw input into structured tokens and abstract syntax trees. It processes lexical elements like keywords, literals, operators, and identifiers, organizing them into module-level constructs such as contracts, functions, and variable declarations. Concrete use cases include analyzing or transforming Solidity code for tools like linters, compilers, or static analyzers.",
      "description_length": 449,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 449,
    "min_description_length": 250,
    "avg_description_length": 321.2,
    "embedding_file_size_mb": 0.01861286163330078
  }
}