{
  "package": "solidity-parser",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:54:38.940549",
  "modules": [
    {
      "module_path": "Solidity_lexer",
      "library": "solidity-parser",
      "description": "This module provides a lexer for Solidity source code, converting raw input into structured tokens for parsing. It operates on `Lexing.lexbuf` input buffers and produces tokens compatible with the `Solidity_raw_parser`. It is used to tokenize Solidity smart contracts during the initial stages of compilation or static analysis.",
      "description_length": 328,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Main",
      "library": "solidity-parser",
      "description": "The module initializes and runs the core application logic. It defines the entry point `main` that executes the program's primary workflow. This module directly coordinates data processing pipelines and handles command-line arguments to configure runtime behavior.",
      "description_length": 264,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Version",
      "library": "solidity-parser",
      "description": "Stores and exposes version metadata including a version string, commit hash, and commit date. Works with string and option types to represent version information. Useful for embedding build-time details into applications for diagnostics or reporting.",
      "description_length": 250,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solidity_raw_parser",
      "library": "solidity-parser",
      "description": "Parses Solidity source code into abstract syntax trees, handling lexical analysis and tokenization. It processes input using a lexer function to identify tokens such as keywords, literals, operators, and identifiers. This module is used to transform raw Solidity code into structured data for further analysis or compilation steps.",
      "description_length": 331,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Solidity_parser",
      "library": "solidity-parser",
      "description": "Extracts imported file paths from Solidity AST modules and parses Solidity source code into abstract syntax trees. Operates on Solidity AST structures and string inputs. Used to analyze dependencies and structure of Solidity contracts during static analysis or toolchain processing.",
      "description_length": 282,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 331,
    "min_description_length": 250,
    "avg_description_length": 291.0,
    "embedding_file_size_mb": 0.07286262512207031
  }
}