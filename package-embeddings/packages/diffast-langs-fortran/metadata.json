{
  "package": "diffast-langs-fortran",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 70,
  "creation_timestamp": "2025-08-15T15:57:33.945347",
  "modules": [
    {
      "module_path": "Mfortran.F_change.F.CB",
      "library": "diffast-langs-fortran",
      "description": "This module provides functions to retrieve a label from an object and check if an object is a phantom. It operates on objects with a `_label` field in their data structure. Use cases include analyzing or transforming labeled elements in a program representation where phantom nodes indicate temporary or synthetic constructs.",
      "description_length": 325,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mfortran.F_lib.Change.F",
      "library": "diffast-langs-fortran",
      "description": "This module provides functions to retrieve a label from an object and check if it is a phantom label. It operates on objects with a nested data structure containing a `_label` field of type `Obj.t`. Use this module when processing labeled data structures where label presence and type need validation.",
      "description_length": 301,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran.F_lib.Analyzing.Postprocessing",
      "library": "diffast-langs-fortran",
      "description": "This module provides operations for tree manipulation, move detection, and edit postprocessing in diff/merge scenarios, focusing on structural transformations like node relabeling, subtree pruning, and conflict resolution. It operates on hierarchical tree structures (`node_t`, `tree_t`, node arrays) enriched with metadata such as UIDs, move IDs, and positional information, leveraging hashtables for mapping nodes and tracking mutations. These tools are specifically applied to Fortran AST refactoring, edit synchronization, and complex diffing tasks requiring precise analysis of hierarchical changes.",
      "description_length": 604,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran.F_lib.Change.CB",
      "library": "diffast-langs-fortran",
      "description": "This module provides functions to retrieve label information and check phantom status from objects with labeled data fields. It operates on objects that have a `data` field containing a `_label` of type `Stdlib.Obj.t`. Use this module when analyzing or transforming labeled program elements, such as in compiler passes or static analysis tools.",
      "description_length": 344,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mfortran.F_lib.Analyzing",
      "library": "diffast-langs-fortran",
      "description": "This module implements tree analysis and comparison algorithms for detecting structural changes, relabeling, and move operations in Fortran AST diffing and merging. It works with hierarchical tree structures (`node_t`, `tree_t`, and node arrays) enriched with metadata like UIDs, move IDs, and positional information, using hashtables for node mapping and mutation tracking. It is used for tasks such as comparing subtrees, pruning irrelevant nodes, resolving conflicts, and generating edit sequences for AST refactoring and synchronization.",
      "description_length": 541,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran.F_lib.Change",
      "library": "diffast-langs-fortran",
      "description": "This module provides operations for modeling and transforming structured differences between Fortran AST nodes, including change classification (insertions, deletions, modifications), edit script generation, and node property analysis. It works with abstract syntax trees, labeled program entities, and location metadata to support tasks like code comparison, static analysis, and automated refactoring workflows. Key functionalities include node-type predicates, label validation, and utilities for extracting identifiers or constructing edit descriptions with contextual metadata.",
      "description_length": 582,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mfortran.F_change.F",
      "library": "diffast-langs-fortran",
      "description": "This module provides utilities for analyzing, transforming, and comparing Fortran abstract syntax trees (ASTs) through operations that classify nodes (e.g., statements, control structures), construct and query hierarchical code elements (like constructs and type definitions), and manage structural changes (insertions, deletions, relabeling) during differencing. It operates on AST nodes (`Diffast_core.Spec.node_t`), identifiers, and location metadata, with use cases in code refactoring, patch generation, and structural analysis of Fortran programs.",
      "description_length": 553,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran.F_lib",
      "library": "diffast-langs-fortran",
      "description": "This module implements algorithms for analyzing and transforming structural differences in Fortran abstract syntax trees, supporting precise detection of node changes, relabeling, and movement. It operates on hierarchical tree structures enriched with metadata such as UIDs and positional information, using hashtables for mapping and tracking mutations. It is used for tasks like comparing subtrees, resolving merge conflicts, generating edit scripts, and synchronizing ASTs during refactoring.",
      "description_length": 495,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran.F_change",
      "library": "diffast-langs-fortran",
      "description": "This module enables precise manipulation and comparison of Fortran ASTs by classifying nodes, constructing hierarchical elements, and managing structural modifications like insertions and relabeling. It operates directly on AST nodes, identifiers, and source location data to support tasks such as code refactoring, patch generation, and structural analysis of Fortran programs.",
      "description_length": 378,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mfortran",
      "library": "diffast-langs-fortran",
      "description": "This module provides operations for analyzing and modifying Fortran abstract syntax trees, including node classification, subtree comparison, relabeling, and structural synchronization. It works directly with AST nodes, identifiers, and metadata such as UIDs and source positions, using hashtables for tracking changes and relationships. Concrete use cases include refactoring Fortran code, generating edit scripts, resolving merge conflicts, and performing structural analysis across different versions of a program.",
      "description_length": 517,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mfortran_p",
      "library": "diffast-langs-fortran.p",
      "description": "This module parses Fortran code into an abstract syntax tree (AST), handling preprocessor directives and conditional compilation. It works with Fortran source files, tokenizing and structuring code elements such as declarations, loops, and subroutines. Concrete use cases include static analysis tools, code refactoring utilities, and generating intermediate representations for compilers targeting Fortran.",
      "description_length": 407,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.Dec.Clause",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing clause labels used in Fortran declarations, such as `Vectorlength`, `Private`, and `Reduction`, along with operations to convert these labels to strings, extract structured tags, and anonymize values. It supports processing and formatting of clause-specific data like integer lists and string annotations. Use cases include parsing and pretty-printing Fortran code with precise clause handling, and transforming directive annotations during analysis or optimization passes.",
      "description_length": 521,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_fact.F.FB",
      "library": "diffast-langs-fortran.base",
      "description": "This module supports creating and manipulating AST nodes for Fortran code analysis, including constructing entities, literals, and versioned resources with specific semantic roles. It operates on Diffast_core AST structures with parent-referenced hierarchies, enabling precise navigation (e.g., upward traversal to find annotated ancestors) and querying via node properties or labels. Typical use cases include semantic analysis, code transformation pipelines, and extracting structured metadata from Fortran source trees.",
      "description_length": 522,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Dec.Attribute",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing Fortran attribute declarations with specific tags like `Align`, `Allocatable`, `Inline`, and `Dllimport`. It includes functions to convert attributes to strings, extract names, anonymize values, and construct attributes from keywords paired with integers, strings, or names. These operations directly support parsing, analyzing, and transforming Fortran declarations with precise attribute handling.",
      "description_length": 447,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Xlf.Assertion",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for converting assertion tags used in Fortran parsing into various string representations. It works with the `t` type, which represents specific assertion kinds like `Itercnt`, `Minitercnt`, `Maxitercnt`, and `Nodeps`. These functions are used to generate labeled output for assertions in different formats required during Fortran code analysis and transformation.",
      "description_length": 395,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_lib_base.Fact.FB",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides utilities for constructing and manipulating hierarchical node structures, primarily working with `Diffast_core.Triple.node` and Fortran AST representations. It supports creating labeled nodes for version-controlled entities (e.g., Git/SVN revisions) and navigating tree-like data through parent-child relationships, metadata extraction, or label-based filtering. Key use cases include analyzing Fortran source code ASTs, resolving hierarchical dependencies, and traversing versioned data graphs with contextual metadata.",
      "description_length": 541,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Dec.Directive",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a concrete set of directive types used to represent Fortran compiler directives and annotations, such as `Alias`, `Unroll`, `Vector`, and `Parallel`. It provides operations to convert directives to string representations, extract names, and classify directives into specification or execution parts. These directives are used to control compiler behavior and code generation in Fortran source processing tools.",
      "description_length": 430,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Xlf.Directive",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines types and operations for handling Fortran compiler directives, including source form variants, execution frequency annotations, and directive tags. It provides functions to convert these types to string representations, extract names, determine code section placement, and anonymize directive values. Use cases include parsing and pretty-printing Fortran code with XLF compiler directives, analyzing directive effects on compilation, and transforming directive metadata during code processing.",
      "description_length": 513,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.WaitSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing different wait specification tags in Fortran, such as `End`, `Eor`, and `Err`, each optionally carrying a label. It provides functions to convert these tags to string representations, extract labels, and anonymize tag values. Use cases include parsing and processing Fortran code that involves labeled wait statements.",
      "description_length": 366,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.TypeAttrSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates type attribute specifications in Fortran code, supporting operations like converting attributes to strings, extracting tags with associated names, and anonymizing attribute values. It works directly with a variant type representing attributes such as `Private`, `Public`, `Abstract`, `Bind`, and `Extends` of a named entity. Concrete use cases include processing Fortran type declarations, generating intermediate representations, and supporting refactoring tools by identifying and transforming type attributes in parsed code.",
      "description_length": 563,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.DefinedOperator",
      "library": "diffast-langs-fortran.base",
      "description": "This module represents and manipulates user-defined Fortran operators, supporting operations to construct, deconstruct, and convert operator types. It works with a variant type `t` that distinguishes between defined, unary, and binary operators, each carrying a string identifier. Concrete use cases include parsing and pretty-printing Fortran code where custom operators need to be uniquely identified, anonymized, or converted to different string representations for analysis or transformation tasks.",
      "description_length": 502,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.PositionSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing different position specifications in Fortran, such as `Unit`, `Iostat`, `Iomsg`, and `Err` with a label. It provides functions to convert these specifications to strings, extract labels, and transform them into related Fortran AST node types like `F_inquire_spec` and `F_close_spec`. Use cases include handling Fortran I/O statements and error labels during parsing and code generation.",
      "description_length": 434,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.BindingAttr",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling binding attributes in Fortran labels, including converting attributes to strings, extracting names, and anonymizing values. It works with a variant type representing binding attributes such as Pass, Nopass, and Private, along with associated name data. Use cases include processing Fortran interface bindings and generating human-readable representations of attribute metadata.",
      "description_length": 421,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.InquireSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling Fortran `INQUIRE` statement specifiers, including conversions to strings, extraction of labels, and keyword parsing. It works with the variant type `t` representing different inquire specifiers, some of which carry labels. Concrete use cases include parsing and pretty-printing Fortran code involving file and unit inquiry operations.",
      "description_length": 378,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.FormatItem",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates format items used in Fortran's input/output statements. It supports operations to convert format item types to strings, anonymize values, and extract structured tags. Concrete use cases include parsing and pretty-printing Fortran format specifiers like `I5`, `$`, and `T10`.",
      "description_length": 310,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.CaseValueRange",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling case value range tags in Fortran parsing, including string representations and tag extraction. It works with the variant type `t` representing different case value range forms. Use this module to convert case value ranges to strings or extract their tags for further processing.",
      "description_length": 322,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Stmt",
      "library": "diffast-langs-fortran.base",
      "description": "This module supports operations for analyzing, classifying, and transforming Fortran statements that carry labels or names, including type checks (e.g., identifying control structures, declarations, or I/O operations), metadata extraction (labels, variables, raw statements), and string representation. It works with labeled or unlabeled Fortran statement types (`_t` and `Stmt.t`), enabling use cases like code refactoring, static analysis, or structured code generation where precise statement categorization and manipulation are required. Key patterns include predicate-based inspection (e.g., `is_end_do_stmt`, `is_call_stmt`) and transformations such as relabeling, anonymization, or obfuscation of identifiers.",
      "description_length": 716,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.CaseSelector",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines two variants, `CaseValueRangeList` and `Default`, representing possible case selectors in Fortran code. It provides functions to convert these selectors to various string formats, including full, simple, and short representations, as well as extracting a tag with associated data. These operations are used when processing and analyzing Fortran `SELECT CASE` constructs, particularly during parsing or transformation stages.",
      "description_length": 444,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.GenericSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates generic specification constructs in Fortran, supporting operations like converting specifications to string formats, extracting names, and anonymizing identifiers. It works with variant types representing record kinds and generic specifications, including formatted, unformatted, and custom-named forms. Concrete use cases include parsing and pretty-printing Fortran code elements such as operator definitions and input/output statements.",
      "description_length": 474,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.AccConstruct",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling accelerator construct labels in Fortran code, including conversion to various string representations and anonymization. It works with a variant type representing different OpenACC constructs such as `Atomic`, `Parallel`, `Loop`, and others. Concrete use cases include pretty-printing constructs, generating tags for analysis, and simplifying identifiers for comparison or debugging.",
      "description_length": 426,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.AccDirective",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines types and operations for handling OpenACC directive labels in Fortran code, including atomic suboperations and top-level directive kinds. It provides functions to convert these directives to string representations, extract names, determine context usage, and anonymize identifiers. Concrete use cases include parsing and processing OpenACC directives during code analysis or transformation tasks.",
      "description_length": 416,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.IntrinsicOperator",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling intrinsic operators in Fortran, including logical, relational, arithmetic, and string operations. It works with a variant type representing specific Fortran operators such as `AND`, `GT`, `Add`, and `Concat`. Concrete use cases include converting operators to string representations for code generation, pretty-printing, and symbolic manipulation during parsing or analysis of Fortran expressions.",
      "description_length": 441,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.ControlEditDesc",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling Fortran control edit descriptors, including parsing, string conversion, and anonymization. It works with a variant type representing different edit descriptor forms such as position control, end-of-record markers, and scale factors. Use cases include processing Fortran format specifications for input/output operations and generating simplified or anonymized representations of edit descriptors.",
      "description_length": 440,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.IoControlSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing Fortran I/O control specifiers, such as `Advance`, `Fmt`, and `Unit`, each optionally associated with labels or names. It provides functions to convert these specifiers to strings, extract names or labels, and transform them, such as anonymizing identifiers or converting to a tagged representation. Concrete use cases include parsing and pretty-printing Fortran I/O statements, handling I/O errors via `Err`, and managing asynchronous I/O with `Asynchronous`.",
      "description_length": 508,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.OclDirective",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides utilities for processing OpenCL directive annotations in Fortran code, focusing on conversion and manipulation of structured directive data. It handles variant types representing numeric/name pairs, alignment, prefetching, and vectorization scopes, along with helper functions to extract values, convert enums to concise strings, and anonymize identifiers. These operations support tasks like directive analysis, code transformation, and generating human-readable representations of OpenCL-annotated Fortran constructs.",
      "description_length": 540,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Format",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling Fortran format specifiers, including converting them to various string representations, extracting labels, and anonymizing identifiers. It works with the variant type `t` that represents different format kinds such as expressions, labeled formats, and list-directed input/output. Concrete use cases include parsing and pretty-printing Fortran code, where precise control over format strings and their metadata is required.",
      "description_length": 466,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Annotation",
      "library": "diffast-langs-fortran.base",
      "description": "This module manages annotations for Fortran labels, supporting operations to create and manipulate specifications such as `Require`, `Provide`, and `Spec`. It works with lists of these specification values, allowing construction, conversion to strings, iteration, and composition of annotation lists. Concrete use cases include tracking symbol requirements and definitions in Fortran code analysis and transformation tools.",
      "description_length": 423,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_fact.F",
      "library": "diffast-langs-fortran.base",
      "description": "This module supports creation and semantic-aware traversal of Fortran abstract syntax trees using `Diffast_core` AST structures with parent references, enabling precise context tracking through predefined semantic roles (e.g., subroutines, modules) and accessors like `getlab`. It provides operations to model syntactic constructs\u2014control blocks, preprocessor directives, OpenMP/ACC regions\u2014and includes utilities for pattern matching, fact extraction, and AST transformation pipelines. These capabilities are used for parsing Fortran code, analyzing semantic properties, and implementing code refactoring or optimization workflows.",
      "description_length": 632,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.ModuleSubprogram",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing different kinds of Fortran module subprograms, such as functions, subroutines, and separate module subprograms, each carrying a name. It provides operations to convert these subprogram types to various string representations, extract or modify their names, and optionally anonymize them. Concrete use cases include parsing and analyzing Fortran code structures, generating human-readable output, and supporting transformations in a compiler or refactoring tool.",
      "description_length": 509,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.IntentSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates intent specifications for Fortran variables, supporting conversions to various string representations and parsing from keywords. It works with the variant type `t` representing `In`, `Out`, and `Inout` intents. Use cases include generating human-readable labels and serializing intent data during code analysis or transformation tasks.",
      "description_length": 371,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.TypeSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing Fortran type specifiers, including built-in types like `Integer`, `Real`, and `Logical`, as well as derived and user-defined types. It provides functions to convert type specs to strings, extract names, and anonymize types, supporting precise type handling during Fortran code parsing and analysis. Use cases include type comparison, generating type representations for diagnostics, and processing Fortran source code constructs involving type declarations.",
      "description_length": 505,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Constant",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing different kinds of Fortran constants, such as integer, real, complex, logical, character, and named constants. It provides functions to construct these constants, extract their values or names, and convert them to various string representations. Use cases include parsing and manipulating Fortran source code elements like literal values and named parameters.",
      "description_length": 407,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_lib_base.Fact",
      "library": "diffast-langs-fortran.base",
      "description": "This module offers hierarchical traversal and context-aware filtering of Fortran abstract syntax trees (ASTs), enabling operations like navigating parent-child relationships and parsing structured language features (e.g., control blocks, type definitions, preprocessor branches). It works with `Diffast_core.Triple.node` structures and predefined AST node representations for Fortran constructs, including OpenMP directives, program units, and value expressions. These capabilities support use cases such as static code analysis, fact extraction for documentation, and transformation of Fortran source code through configurable pattern matching and metadata processing.",
      "description_length": 669,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.AttrSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing Fortran attribute specifications, such as `Parameter`, `Public`, `Allocatable`, and `Intent`, along with conversions to and from strings. It includes functions to convert attribute values to different string formats, including full names, simple names, and tagged representations. Use cases include parsing and pretty-printing Fortran declarations, mapping attribute keywords during compilation, and generating diagnostic messages with normalized attribute names.",
      "description_length": 511,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.PpDirective",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides functionality for parsing, pretty-printing, and manipulating Fortran preprocessor directives, including conditional branches (`If`, `Elif`, `Else`), error messages, and inclusion actions. It operates on labeled directives and their components\u2014such as branches, messages, and action parameters\u2014enabling tasks like metadata extraction, context tracking, and identifier anonymization. These operations are used to analyze, transform, or obfuscate preprocessor logic in Fortran code while maintaining structural correctness.",
      "description_length": 541,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.ProcAttrSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling Fortran procedure attribute specifications, including conversion to string formats, tagging with metadata, and anonymization. It works with a variant type representing attributes like `Public`, `Private`, `Intent`, and `Optional`, along with associated names. Concrete use cases include parsing and pretty-printing Fortran code elements such as subroutine and function declarations.",
      "description_length": 426,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.AccessSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates access specifiers (`Private` and `Public`) in Fortran code. It provides conversions to strings, attribute specifications, and tagged representations. Use cases include generating Fortran source from abstract syntax trees and analyzing module visibility settings.",
      "description_length": 298,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.ProcComponentAttrSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates procedure component attribute specifications in Fortran, supporting operations like converting attributes to strings, extracting names, and anonymizing values. It works with a variant type representing attributes such as `Pointer`, `Pass`, `Nopass`, `Private`, and `Public`, along with associated names. Use cases include processing Fortran procedure declarations, generating human-readable attribute representations, and handling symbol visibility and pass semantics during analysis or transformation tasks.",
      "description_length": 544,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.FlushSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling Fortran flush specification constructs, including converting values to strings, extracting labels, anonymizing identifiers, and generating tagged representations. It works with a variant type representing flush specification options like `Err`, `Iomsg`, `Iostat`, and `Unit`, each optionally carrying a label. Concrete use cases include processing and transforming Fortran code during parsing or analysis tasks, such as generating error messages tied to specific labels or preparing data for code generation.",
      "description_length": 552,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.Dec",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides functions to convert Fortran declaration labels to string representations, extract names, and produce structured tags with associated metadata. It operates on the `Labels.Dec.t` type, which encapsulates directive, clause, and attribute information used in Fortran declarations. Concrete use cases include pretty-printing Fortran code, analyzing directive placement, and transforming attribute annotations during compilation or optimization.",
      "description_length": 461,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.OmpConstruct",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates OpenMP construct labels in Fortran, supporting operations like converting constructs to strings, extracting names, and anonymizing identifiers. It works with a variant type representing different OpenMP directives such as `Parallel`, `Do`, `Critical`, and composite forms like `ParallelDo` or `TargetTeamsDistribute`. Use cases include parsing and pretty-printing Fortran code with OpenMP annotations, and transforming OpenMP constructs during analysis or refactoring.",
      "description_length": 504,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.OmpDirective",
      "library": "diffast-langs-fortran.base",
      "description": "This module supports manipulation and serialization of OpenMP directives in Fortran code through enumeration types for atomic operations, constructs, and directive variants. It provides utilities to convert these directives into string representations, anonymize identifiers, and classify directive components, operating on Fortran-specific OpenMP label structures. Typical use cases include parsing, transforming, or analyzing parallelized Fortran codebases that utilize OpenMP pragmas.",
      "description_length": 487,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.AccClause",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling OpenMP accelerator clause labels in Fortran parsing. It provides string conversion functions, anonymization, and structured tagging for a sum type representing various OpenMP directive clauses. Concrete use cases include pretty-printing clauses, anonymizing clause data for analysis, and extracting structured information for code transformation tools.",
      "description_length": 396,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.Ambiguous",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing different kinds of ambiguous labels in Fortran parsing, such as designators, named tuples, array accesses, and generic specs. It provides functions to convert these labels to strings, extract names, check properties like array specification, and anonymize identifiers. Use cases include handling Fortran source code analysis where label context is unclear, and generating concise or normalized representations of parsed labels for further processing.",
      "description_length": 498,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_lib_base.Tree",
      "library": "diffast-langs-fortran.base",
      "description": "This module implements tree construction and manipulation operations for abstract syntax trees, focusing on node creation with annotations, labels, and unique identifiers. It works with tree structures composed of nodes containing data objects that have fields like `label`, `orig_lab_opt`, and `_annotation`, and it uses auxiliary types like `ordinal_tbl`, `node_data`, and `node2`. Functions support building leaf and internal nodes, extracting labels and annotations, and comparing nodes, primarily used in parsing and unparsing Fortran ASTs.",
      "description_length": 545,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.HeaderFile",
      "library": "diffast-langs-fortran.base",
      "description": "This module represents and manipulates header file references in Fortran code, supporting operations like converting headers to strings, paths, or representations, extracting attributes, and constructing header values from user, system, macro, or generated sources. It works with a variant type that encodes different kinds of header files, including macros with optional content. Concrete use cases include parsing and generating Fortran header references, handling include directives, and managing macro expansions in preprocessing.",
      "description_length": 534,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.ConnectSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing Fortran connection specifications, such as `Access`, `Action`, `Asynch`, and `Err` with associated labels. It provides functions to convert these specifications to strings, extract labels, map to inquire specifications, and anonymize values. Use cases include parsing and processing Fortran I/O statements with labeled connect specifiers for analysis or transformation tools.",
      "description_length": 423,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.OmpClause",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides operations to manage OpenMP clause attributes in Fortran, handling data sharing modes, schedule kinds, mapping types, and dependence types. It defines a unified type `t` for OpenMP directives and clauses, offering conversions to string representations, anonymization, and compact serialization for debugging or logging. These features support analysis and processing of Fortran programs with OpenMP parallelism.",
      "description_length": 432,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.InternalSubprogram",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing internal Fortran subprograms, specifically functions and subroutines, each associated with a name. It provides operations to convert these subprogram representations into various string formats, extract or modify their names, and anonymize them. These capabilities are used to process and manipulate Fortran code during parsing and transformation tasks.",
      "description_length": 401,
      "index": 58,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.ProgramUnit",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing different Fortran program units such as main programs, functions, subroutines, modules, and block data. It provides operations to convert these units to various string representations, extract or modify their names, and anonymize identifiers. Use cases include parsing and analyzing Fortran code, generating human-readable output, and manipulating program unit metadata during compilation or refactoring tasks.",
      "description_length": 458,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.CloseSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling Fortran `CLOSE` statement specifiers, including conversion to strings, extraction of labels, and transformation into connect specs. It works with a variant type representing different close specifiers, each optionally carrying a label. Concrete use cases include parsing and manipulating Fortran code involving file closure operations, such as converting keyword strings to specifier values or anonymizing labels for analysis.",
      "description_length": 470,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.LindaCall",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for working with Linda call primitives in Fortran code, including converting call types to string representations and extracting tags with associated data. It handles values of type `t`, which represents different Linda operations such as `In`, `Out`, and `Eval`. Concrete use cases include parsing and pretty-printing Linda calls in Fortran source code.",
      "description_length": 385,
      "index": 61,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.Xlf",
      "library": "diffast-langs-fortran.base",
      "description": "This module handles Fortran compiler directives and assertion tags, providing operations to convert, extract, and manipulate label data. It works with the `t` type representing XLF labels, supporting concrete tasks like parsing, pretty-printing, and analyzing Fortran code metadata. Functions include string conversion, name extraction, and tag decomposition for use in code transformation and compilation analysis workflows.",
      "description_length": 425,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.PrefixSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module represents and manipulates Fortran prefix specifications such as type declarations, purity, and module attributes. It provides conversions to string formats, extraction of names, and construction from keywords, supporting precise handling of Fortran source constructs. Concrete use cases include parsing and pretty-printing Fortran code elements like function prefixes and variable declarations.",
      "description_length": 407,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_tree.Tree",
      "library": "diffast-langs-fortran.base",
      "description": "This module constructs and manipulates tree nodes with labeled data, annotations, and optional identifiers. It supports creating nodes with varying numbers of children, extracting labels and annotations from nodes, and comparing nodes based on their data. Concrete use cases include building abstract syntax trees with metadata for Fortran code analysis and transformation tasks.",
      "description_length": 379,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides operations for constructing, converting, and classifying syntactic labels and attributes in Fortran abstract syntax trees, with support for parsing, transformation, and analysis tasks. It works with variant types representing program structure elements (e.g., control constructs, declarations, preprocessor directives) and attributes (e.g., intent, access specifiers), enabling precise manipulation of Fortran code. Specific use cases include handling OpenMP/OpenACC directives, validating control structure boundaries, anonymizing identifiers for code obfuscation, and extracting metadata for static analysis or refactoring tools.",
      "description_length": 652,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_lib_base",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides operations for constructing and manipulating abstract syntax trees with annotated nodes, labels, and unique identifiers, working with tree structures that include data objects like `node_data` and `node2`. It supports specific use cases such as parsing, unparsing, and transforming Fortran source code, particularly for handling language features like control blocks, type definitions, and OpenMP directives. The module enables hierarchical traversal, context-aware filtering, and metadata processing on Fortran ASTs, primarily used in static analysis, documentation generation, and code refactoring tasks.",
      "description_length": 627,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_tree",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides functions for constructing and transforming abstract syntax trees with labeled nodes, annotations, and source location metadata. It includes utilities for creating specialized tree nodes such as include nodes, generating local identifiers, and checking for subprogram presence in Fortran AST structures. Key use cases involve translating Fortran source code into enriched abstract syntax trees for analysis, comparison, and transformation tasks.",
      "description_length": 466,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_fact",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides operations for constructing and traversing Fortran abstract syntax trees with semantic context tracking, using AST structures that include parent references. It supports modeling syntactic elements such as control blocks, preprocessor directives, and parallel regions, along with utilities for pattern matching and AST transformation. It is used for parsing Fortran code, extracting semantic facts, and implementing refactoring or optimization workflows.",
      "description_length": 475,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides functions for building and transforming Fortran abstract syntax trees with rich annotations, labels, and source location tracking. It works with tree structures that include parent references, semantic metadata, and language-specific constructs such as control blocks, OpenMP directives, and preprocessor elements. Concrete use cases include parsing Fortran code, extracting semantic facts, performing refactoring, generating documentation, and implementing static analysis tools.",
      "description_length": 501,
      "index": 69,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 97,
    "meaningful_modules": 70,
    "filtered_empty_modules": 27,
    "retention_rate": 0.7216494845360825
  },
  "statistics": {
    "max_description_length": 716,
    "min_description_length": 298,
    "avg_description_length": 469.95714285714286,
    "embedding_file_size_mb": 1.0148191452026367
  }
}