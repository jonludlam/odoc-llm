{
  "package": "diffast-langs-fortran",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 71,
  "creation_timestamp": "2025-07-15T23:18:52.238800",
  "modules": [
    {
      "module_path": "Fortran_base.F_fact.F.FB",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides utilities for constructing fact graph entities (like versioned objects, source resources, and typed literals) and navigating hierarchical data structures such as abstract syntax trees (ASTs). It operates on labeled nodes with parent-child relationships, leveraging types from `Diffast_core` and `Diffast_misc` to enable precise traversal, filtering by annotations, and location-based queries. Common use cases include static analysis of Fortran code, AST manipulation, and extracting structured metadata from parsed source files.",
      "description_length": 550,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Dec.Clause",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing clause labels in Fortran declarations, such as `Vectorlength`, `Private`, and `Reduction`, along with string conversion utilities. It provides functions to transform these clauses into different string formats, extract structured tags, and anonymize values. Use cases include parsing and pretty-printing Fortran code, handling compiler directives, and analyzing loop and memory behavior in performance-critical sections.",
      "description_length": 468,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_lib_base.Fact.FB",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides utilities for constructing and manipulating AST nodes in a Fortran abstract syntax tree, focusing on creating typed nodes from strings, traversing hierarchical relationships (parents, children, annotations), and querying nodes via label-based predicates. It operates on `Diffast_core.Triple.node` and labeled object hierarchies, enabling tasks like AST navigation, code analysis, and transformation by identifying specific syntactic constructs through semantic label properties.",
      "description_length": 499,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.Dec.Attribute",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing Fortran attribute declarations, such as `Alias`, `Align`, `Allocatable`, and `Inline`, along with operations to convert attributes to strings, extract names, and construct attributes from keywords. It works with string identifiers and `Label_common.name` values to represent metadata used in Fortran function and variable declarations. Concrete use cases include parsing and manipulating Fortran source attributes during compilation or code transformation tasks.",
      "description_length": 510,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Dec.Directive",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing Fortran compiler directives and labels, along with operations to convert directives to strings, extract names, and classify their usage context. It includes functions to simplify, anonymize, or format directives for diagnostics or code generation. Concrete use cases include parsing Fortran source files, analyzing directive placement in specification or execution parts, and emitting compiler-specific annotations.",
      "description_length": 463,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Xlf.Directive",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines types and operations for handling Fortran compiler directives, including source form variants, execution frequency annotations, and directive tags. It provides functions to convert these types to string representations, extract names, and determine part classifications such as specification or execution context. Use cases include parsing and printing Fortran code with XLF compiler directives, and analyzing or transforming directive-annotated code sections.",
      "description_length": 480,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Xlf.Assertion",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for converting assertion tags used in Fortran XLF annotations into various string representations. It works with the `t` type, which represents different assertion kinds such as `Itercnt`, `Minitercnt`, `Maxitercnt`, and `Nodeps`. These functions are used to generate labeled output for analysis or debugging tools that process Fortran code with XLF directives.",
      "description_length": 392,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.TypeSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing Fortran type specifiers, including built-in types like `Integer`, `Real`, and `Logical`, as well as derived and user-defined types. It provides functions to convert type specs to strings, extract names, and anonymize types, supporting precise handling of Fortran type information. Use cases include parsing and pretty-printing Fortran code, analyzing type declarations, and transforming type representations in a compiler or linter.",
      "description_length": 480,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_tree.Tree",
      "library": "diffast-langs-fortran.base",
      "description": "This module constructs and manipulates tree nodes with labeled data, annotations, and unique identifiers. It supports creating nodes with varying numbers of children, extracting labels and annotations from nodes, and comparing nodes based on their data. Concrete use cases include building abstract syntax trees for Fortran code analysis and transformation tasks.",
      "description_length": 363,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Format",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling Fortran format specifiers, including converting them to various string representations, extracting labels, and anonymizing identifiers. It works with the variant type `t` that represents different format kinds such as expressions, labeled formats, and list-directed input/output. Use cases include parsing and pretty-printing Fortran code, analyzing format statements for compiler transformations, and generating human-readable representations of format specifiers.",
      "description_length": 509,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.ControlEditDesc",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for manipulating and converting control edit descriptors used in Fortran parsing. It supports variant types representing different edit descriptor forms, such as position control, end-of-record markers, and scale factors. Functions include string conversion, anonymization, and structured tagging, primarily used for processing Fortran format specifications in compilers or analysis tools.",
      "description_length": 420,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.InternalSubprogram",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing internal subprograms in Fortran, specifically functions and subroutines, each associated with a name. It provides operations to convert these subprogram representations to strings in various formats, extract names, anonymize subprogram identifiers, and generate structured tags. Use cases include pretty-printing subprogram definitions, generating unique identifiers for analysis, and supporting transformations that require name manipulation or anonymization in Fortran code processing tools.",
      "description_length": 541,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.HeaderFile",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a labeled header file type with variants for user, system, macro, and generated files, supporting operations to create, transform, and extract information from these headers. It provides functions to convert headers to strings, paths, or representations, retrieve attributes, names, and lengths, and anonymize header content. Concrete use cases include processing Fortran header files during parsing or code generation, handling macro expansions, and managing include paths in a compiler or preprocessor context.",
      "description_length": 532,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.AccClause",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling OpenACC clause types in Fortran parsing, including string conversion, anonymization, and structured representation. It works directly with the variant type `t` representing OpenACC directives such as `Async`, `Copy`, `Device`, and `Reduction`. Concrete use cases include transforming and analyzing OpenACC annotations in Fortran code during parsing or refactoring tasks.",
      "description_length": 414,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.OmpConstruct",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling OpenMP construct labels in Fortran, including string conversion, name extraction, and anonymization. It works with a variant type representing different OpenMP constructs such as `Atomic`, `Critical`, `Do`, and `Parallel`. Concrete use cases include parsing and pretty-printing Fortran code with OpenMP directives, and transforming or analyzing labeled OpenMP regions in a compiler or static analysis tool.",
      "description_length": 450,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_lib_base.Tree",
      "library": "diffast-langs-fortran.base",
      "description": "This module implements tree construction and manipulation operations for abstract syntax trees, primarily working with node objects that carry labels, annotations, and metadata. It provides functions to create nodes (`mknode`, `mkleaf`), compare nodes (`compare_node`), and extract label and annotation data from node objects. Concrete use cases include building ASTs during parsing, managing node identity with UID generators, and handling tree transformations with customizable node creation.",
      "description_length": 494,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.FormatItem",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates Fortran format items, including data edits, control descriptors, character strings, and special edits like `$`, `\\`, `+`, `0`, `1`, and space. It provides functions to convert these format items and their components to string representations, check item types, anonymize values, and extract structured tags. Use cases include parsing and pretty-printing Fortran format specifications, handling input/output formatting in Fortran code analysis tools, and transforming format descriptors during compilation or refactoring.",
      "description_length": 556,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_lib_base.Fact",
      "library": "diffast-langs-fortran.base",
      "description": "This module processes Fortran AST nodes, focusing on control structures, program units, and preprocessor branches using `Diffast_core.Triple.node`. It manages parsing state for complex constructs like `SELECT TYPE` and `DO` loops, and supports filtering via predicates. Child modules enhance AST manipulation by enabling node creation, hierarchical traversal, and label-based queries. Together, they facilitate precise AST analysis, transformation, and conditional compilation workflows, such as identifying specific syntactic patterns or restructuring code based on semantic labels.",
      "description_length": 583,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.BindingAttr",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling binding attributes in Fortran code, such as `Pass`, `Nopass`, and `Private`. It provides functions to convert attributes to strings, extract names, and anonymize them, working directly with `Fortran_parsing.Label_common.name` and attribute tags. Concrete use cases include processing method bindings during Fortran code analysis and generating attribute representations for diagnostics or transformations.",
      "description_length": 449,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.FlushSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling Fortran flush specification constructs, including extracting labels, converting to string representations, and anonymizing labeled elements. It works with a variant type representing different flush specifiers like `Err`, `Iomsg`, `Iostat`, and `Unit`, each optionally carrying a label. Concrete use cases include formatting error labels in Fortran code and generating simplified string representations for diagnostic or logging purposes.",
      "description_length": 482,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.PositionSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling position specifications in Fortran parsing, including converting position specs to strings, extracting labels, and transforming them into other specification types like inquire, close, and io control specs. It works with the variant type `t` that represents different position-related labels and error states. Concrete use cases include processing Fortran I/O statements and error handling during parsing.",
      "description_length": 449,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.CloseSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module represents close statement specifiers in Fortran parsing, handling labels and identifiers like `Err`, `Iomsg`, and `Status`. It provides conversions to strings, tags, and related specifiers, along with label extraction and anonymization. Concrete use cases include processing Fortran `CLOSE` statements and transforming specifier representations for analysis or code generation.",
      "description_length": 390,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.IntentSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates intent specifications for Fortran variables, supporting conversion to various string formats and parsing from keywords. It works with the variant type `t` representing `In`, `Out`, or `Inout` intents. Use cases include formatting intent values for code generation, parsing intent keywords from Fortran source, and serializing intent data for analysis or debugging tools.",
      "description_length": 406,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.GenericSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates generic specification records for Fortran labels, supporting operations like converting record kinds and specifications to strings, extracting names, and anonymizing identifiers. It works with variant types representing record kinds and generic specifications, including formatted, unformatted, and custom-named forms. Use cases include parsing and pretty-printing Fortran code elements such as `read`, `write`, and operator assignments with precise label handling.",
      "description_length": 501,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.ConnectSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a labeled specification type for Fortran connection parameters, supporting operations like converting specifications to strings, extracting labels, and mapping to inquiry specifications. It works with string identifiers, label types, and structured tags that capture both the specification name and associated label data. It is used to handle file connection options in Fortran parsing, such as mapping keywords to typed values and anonymizing or formatting connection specifiers for output or analysis.",
      "description_length": 523,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.OclDirective",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides utilities for representing and transforming OpenMP-like compiler directives in Fortran optimization, focusing on alignment, prefetching, loop transformations, and parallelism controls. It operates on OCL directive structures, handling data extraction (e.g., variable names, numeric/named parameters), normalization, and string serialization, including predicates for directive classification and an anonymizer for identifier-agnostic representations. These capabilities support code analysis, optimization tools, and transformations requiring directive introspection or rewriting.",
      "description_length": 601,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.ProcAttrSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates procedure attribute specifications in Fortran, such as `Public`, `Private`, `Intent`, and `Optional`. It provides operations to convert attributes to strings, extract structured tags, anonymize values, and map keywords to attribute types. Use cases include parsing and printing Fortran procedure declarations with precise attribute handling.",
      "description_length": 377,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.Annotation",
      "library": "diffast-langs-fortran.base",
      "description": "This module manages annotations for Fortran labels, supporting operations to create and manipulate lists of specifications such as `Require`, `Provide`, and `Spec`. It works with string lists and structured name specifications to represent dependencies and declarations in Fortran code. Concrete use cases include tracking symbol requirements, defining interface specifications, and generating textual representations of label annotations for analysis or output.",
      "description_length": 462,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.CaseValueRange",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling case value range tags in Fortran parsing, including string representations and tag extraction. It works with the variant type `t` representing different case value range forms. Use this module to convert case value range constructs to strings or extract structured tag information for further processing.",
      "description_length": 348,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.LindaCall",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing different Linda coordination operations in Fortran code, such as `In`, `Out`, and `Eval`. It provides functions to convert these operations to string representations and extract tagged information. It is used for analyzing or transforming Fortran code that uses Linda parallel programming constructs.",
      "description_length": 348,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.WaitSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing different wait specification tags in Fortran, such as `End`, `Eor`, and `Err`, each optionally carrying a label. It provides functions to convert these tags to string representations, extract labels, and anonymize instances. Use cases include parsing and pretty-printing Fortran code that involves labeled wait statements.",
      "description_length": 370,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.PpDirective",
      "library": "diffast-langs-fortran.base",
      "description": "This module supports operations for representing and manipulating Fortran preprocessor directives, including conditional branching, macro definitions, file inclusion, and diagnostic messages, working with abstract syntax tree types like `branch`, `message`, and `_t`. It includes functions for inspecting directive labels, anonymizing identifiers, and converting between string and tagged representations, with utilities to manage parsing context and structural analysis. These capabilities are used for processing Fortran code during compilation, handling conditional logic, macro expansion, and preparing code for analysis or obfuscation.",
      "description_length": 640,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.TypeAttrSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates type attribute specifications in Fortran, such as `Private`, `Public`, `Abstract`, `Bind`, and `Extends`. It provides operations to convert these attributes to strings, extract structured tags, and anonymize them for use in code analysis or transformation tasks. Concrete use cases include processing Fortran type declarations during parsing or refactoring tools.",
      "description_length": 399,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.AccDirective",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines types and operations for handling OpenACC directive labels in Fortran code, including parsing and pretty-printing. It supports operations to convert directive types to strings, extract names, determine context (specification or execution), and anonymize identifiers. Concrete use cases include analyzing and transforming Fortran code that contains OpenACC parallelism directives such as `Atomic`, `Parallel`, `Kernels`, and `Loop`.",
      "description_length": 451,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Constant",
      "library": "diffast-langs-fortran.base",
      "description": "This module represents and manipulates various types of Fortran literal constants and named constants. It provides constructors for creating specific constant values such as integers, real numbers, characters, and complex or logical literals, along with accessors to retrieve their components or string representations. Use cases include parsing and processing Fortran source code elements like constant expressions, macro definitions, and symbolic references.",
      "description_length": 460,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.IntrinsicOperator",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing intrinsic operators in Fortran, such as logical, relational, and arithmetic operations. It provides functions to convert these operators to strings in various forms, including full names, short representations, and tagged formats. These conversions are used when generating code or debugging parser output involving intrinsic operations.",
      "description_length": 385,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.DefinedOperator",
      "library": "diffast-langs-fortran.base",
      "description": "This module represents and manipulates user-defined operators in Fortran, supporting operations to construct, convert, and query operator types. It works with a variant type `t` that distinguishes between general, unary, and binary defined operators, along with string-based identifiers. Concrete use cases include parsing and printing custom operators during Fortran code analysis or transformation tasks.",
      "description_length": 406,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.T",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides operations for manipulating and analyzing Fortran abstract syntax tree labels, focusing on equality checks, compatibility assessments, and classification of syntactic and semantic categories. It works with label values (type `t`) and annotations to support tasks like static code analysis, transformation of label identities, and extraction of identifiers or structured data from constructs such as control blocks, preprocessor directives, and program units. Specific predicates and accessors enable differentiation between literals, operators, statements, and scoped regions while enforcing constraints on label behavior for accurate AST comparison and refactoring.",
      "description_length": 687,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.AccessSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling access specifiers in Fortran declarations, supporting conversion of `Private` and `Public` values to various string representations and attribute types. It works with the `t` type, which represents access specifiers, and converts them into strings, attribute specifications, or tagged forms for further processing. Concrete use cases include formatting access modifiers for output, integrating with AST transformations, and mapping access control settings to Fortran attribute syntax.",
      "description_length": 528,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.IoControlSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing Fortran I/O control specifiers, such as `Advance`, `Fmt`, and `Unit`, each optionally carrying associated labels or names. It provides functions to convert these specifiers to strings in various formats, extract names or labels, and construct or modify them from keywords or identifiers. Use cases include parsing and pretty-printing Fortran I/O statements, handling labeled specifiers like `Err 10`, and managing named specifiers such as `Nml namelist_name`.",
      "description_length": 507,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.AttrSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing Fortran attribute specifications, such as `Parameter`, `Public`, `Allocatable`, and `Intent`, along with conversions to and from strings. It includes functions to generate string representations, extract tags with associated attributes, and parse keywords into the corresponding attribute values. It is used to handle attribute declarations in Fortran code analysis, transformation, or pretty-printing tasks.",
      "description_length": 456,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.ModuleSubprogram",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing different kinds of Fortran module subprograms, such as functions, subroutines, and separate module subprograms, each carrying a name. It provides operations to convert these subprogram types to strings in various forms, extract or modify their names, and serialize them with optional identifier stripping. Concrete use cases include parsing and pretty-printing Fortran code elements, supporting analysis or transformation tools that need to identify and manipulate subprogram constructs.",
      "description_length": 535,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.ProcComponentAttrSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates procedure component attribute specifications in Fortran, supporting operations like converting attributes to strings, extracting names, and anonymizing values. It works with a variant type representing attributes such as `Pointer`, `Pass`, `Nopass`, `Private`, and `Public`, along with associated names. Concrete use cases include processing Fortran procedure declarations, generating human-readable attribute representations, and handling pass-by-name semantics in interface definitions.",
      "description_length": 524,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.Stmt",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides operations to classify, inspect, and manipulate Fortran statements through predicates (e.g., identifying control structures, I/O operations, or type declarations), accessors for labels/variables, and utilities to relabel or anonymize statements. It operates on a variant type representing Fortran's abstract syntax tree (AST) nodes, supporting both labeled and unlabeled statements, with specific use cases in code analysis, transformation, and static inspection of Fortran programs.",
      "description_length": 504,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.PrefixSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module represents Fortran prefix specifications such as `type`, `recursive`, `pure`, and `elemental`, providing operations to convert them to strings, extract names, and construct from keywords. It works with the variant type `t` that encapsulates different kinds of prefix specifications, including type specs and attribute tags. Concrete use cases include parsing and pretty-printing Fortran declarations, handling attribute annotations, and converting between internal representations and source code syntax.",
      "description_length": 516,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Ambiguous",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing different kinds of ambiguous labels in Fortran parsing, such as designators, named tuples, array accesses, and generic specs. It provides functions to convert these labels to strings, extract names, check properties like array specification, and anonymize identifiers. Use cases include handling Fortran source code labels during parsing and analysis, particularly when resolving ambiguities in syntax constructs like data statements, array declarations, and subobject references.",
      "description_length": 528,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Xlf",
      "library": "diffast-langs-fortran.base",
      "description": "This module processes Fortran labels and annotations, offering operations to convert labels to string formats, extract names, and generate tagged representations using the `Labels.Xlf.t` type. It integrates support for compiler directives through submodules that handle source forms, execution annotations, and assertion tags like `Itercnt` and `Nodeps`. These tools enable parsing, transformation, and analysis of Fortran code with XLF annotations, supporting tasks such as generating labeled output for debugging or restructuring directive-annotated code sections.",
      "description_length": 566,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.InquireSpec",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling Fortran `INQUIRE` statement specifiers, including conversion to and from strings, extraction of labels, and anonymization. It works with the variant type `t` representing different inquire specifiers, some of which carry labels. Use cases include parsing and pretty-printing Fortran code, analyzing inquire statements, and generating error messages tied to specific specifiers.",
      "description_length": 421,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.CaseSelector",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines and manipulates case selectors in Fortran, supporting values like `CaseValueRangeList` and `Default`. It provides string representations for these selectors, including simplified, tagged, and short formats. Use cases include pretty-printing case statements and generating concise labels for control flow constructs in Fortran code.",
      "description_length": 351,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.AccConstruct",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines operations for handling accelerator construct labels in Fortran parsing, including conversion to various string representations, tagging, and anonymization. It works with a variant type representing different OpenACC constructs such as `Atomic`, `Parallel`, `Loop`, and `Data`. Concrete use cases include processing and transforming OpenACC directives during compiler analysis or code generation.",
      "description_length": 416,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.Dec",
      "library": "diffast-langs-fortran.base",
      "description": "This module processes Fortran declaration labels, working with the `Labels.Dec.t` type to convert, extract, and structure label information for use in syntax tree manipulation and analysis. It supports operations like pretty-printing declarations, extracting variable names, and generating tagged output, with core variants including clause labels, attribute declarations, and compiler directives. Submodules handle specific label kinds\u2014such as `Private`, `Allocatable`, and `Inline`\u2014along with their string representations, transformations, and context classifications. Examples include parsing and reformatting Fortran attributes, analyzing directive placement, and anonymizing clause values for diagnostics or code generation.",
      "description_length": 729,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.ProgramUnit",
      "library": "diffast-langs-fortran.base",
      "description": "This module defines a variant type representing different Fortran program units such as main programs, functions, subroutines, modules, and block data. It provides operations to convert these units to various string representations, extract or modify their names, and anonymize identifiers. Use cases include parsing and analyzing Fortran code, generating human-readable output, and manipulating program unit metadata during compilation or refactoring tasks.",
      "description_length": 458,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label.OmpDirective",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides operations for representing, parsing, and converting OpenMP directives in Fortran, focusing on atomic operations, constructs, and directive variants. It works with enumerations and a variant type (`t`) to model OpenMP pragmas, offering utilities to serialize directives to strings, extract names, determine context (specification vs. execution), and anonymize identifiers. These tools support compiler analysis, transformation, and optimization tasks involving parallelized Fortran code.",
      "description_length": 508,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_fact.F",
      "library": "diffast-langs-fortran.base",
      "description": "This module enables parsing and structural analysis of Fortran abstract syntax trees using a triple-based node system, with support for context tracking and syntactic markers for control blocks, preprocessor directives, and OpenMP/ACC regions. It includes utilities for filtering and processing AST nodes based on configuration parameters, facilitating tasks like code structure analysis and context-sensitive parsing validation. The child module extends this functionality by providing tools to construct fact graph entities and navigate hierarchical data structures, enabling precise traversal, annotation-based filtering, and location-aware queries on ASTs. Together, they support static analysis, AST manipulation, and structured metadata extraction from Fortran source files.",
      "description_length": 780,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_label.OmpClause",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides utilities for converting and manipulating OpenMP clause attributes in Fortran, focusing on string serialization and anonymization of directives. It operates on types like `data_sharing_attr`, `schedule_kind`, `map_policy`, and a unified `t` type encapsulating clauses with associated values, enabling precise representation and transformation of OpenMP pragmas. These capabilities are particularly useful for analyzing or refactoring Fortran code with parallelism directives, such as in compiler frontends or static analysis tools.",
      "description_length": 552,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_lib_base",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides tools for constructing, analyzing, and transforming abstract syntax trees, particularly for Fortran code. It centers around node objects that carry labels, annotations, and metadata, with operations to create, compare, and query nodes. Functions like `mknode`, `mkleaf`, and `compare_node` support AST building and manipulation, while label-based queries and hierarchical traversals enable precise analysis and transformation. Examples include parsing Fortran control structures, restructuring code using semantic labels, and managing conditional compilation branches.",
      "description_length": 589,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_label",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides utilities for constructing, transforming, and inspecting labeled syntactic elements in Fortran code, centered around the `t` type for representing Fortran labels. It supports operations like attribute conversion, dialect-specific directive handling, and syntactic classification, enabling tasks such as semantic analysis, AST transformation, and Fortran dialect interoperability (e.g., OpenMP, OpenACC, DEC). Submodules define variant types and operations for Fortran constructs including type specs, format items, control edit descriptors, subprograms, and directives, each offering string conversion, anonymization, and structured tagging. Examples include parsing and pretty-printing type declarations, transforming OpenMP and OpenACC directives, analyzing format statements, and manipulating procedure attributes or I/O specifiers in compiler tooling.",
      "description_length": 876,
      "index": 56,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Fortran_base.F_tree",
      "library": "diffast-langs-fortran.base",
      "description": "This module transforms and manipulates abstract syntax trees representing Fortran code, offering operations for node creation, location conversion, and tree traversal. It works with labeled, annotated tree nodes that carry contextual metadata, supporting tasks like AST construction, subprogram detection, and source-to-source translation. You can build localized AST nodes from parsed Fortran input, analyze tree structure using traversal functions, and compare nodes based on their semantic content. The module enables both direct manipulation of tree elements and structured processing through its node-handling submodules.",
      "description_length": 626,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base.F_fact",
      "library": "diffast-langs-fortran.base",
      "description": "This module provides tools for parsing and analyzing Fortran abstract syntax trees using a triple-based node system, with support for context tracking and recognition of control blocks, preprocessor directives, and OpenMP/ACC regions. It enables hierarchical traversal, annotation-based filtering, and location-aware queries on ASTs, facilitating static analysis, code transformation, and metadata extraction. Key operations include node navigation, structural pattern matching, and fact graph construction for representing program elements and their relationships. Example uses include extracting variable declarations within specific scopes, identifying parallel regions, and validating syntactic structures against configuration rules.",
      "description_length": 738,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Fortran_base",
      "library": "diffast-langs-fortran.base",
      "description": "This module processes Fortran abstract syntax trees through labeled, annotated nodes that support construction, traversal, and semantic analysis. It provides data types for representing Fortran constructs, labels, and metadata, with operations to build, compare, and query structured code elements. Functions enable AST manipulation, dialect-specific transformations, and static analysis tasks such as extracting declarations, identifying parallel regions, and rewriting control structures. Example uses include parsing and restructuring Fortran subprograms, transforming OpenMP directives, and analyzing format statements or conditional compilation branches.",
      "description_length": 659,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran_p",
      "library": "diffast-langs-fortran.p",
      "description": "The module offers no functionality due to its child module being empty. There are no data types or operations available for use. As a result, no meaningful operations or examples can be provided.",
      "description_length": 195,
      "index": 60,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mfortran.F_lib.Change.F",
      "library": "diffast-langs-fortran",
      "description": "This module provides functions to retrieve a label from an object and check if it is a phantom label. It operates on objects with nested data structures containing labels of type `L.t`. Useful for analyzing or transforming labeled data structures in specific domains like program analysis or data serialization.",
      "description_length": 311,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran.F_lib.Change.CB",
      "library": "diffast-langs-fortran",
      "description": "This module provides functions to retrieve label information and check phantom status from objects with labeled data. It operates on objects that have a `_label` field within their data structure. Use cases include analyzing program labels during compilation or transformation passes.",
      "description_length": 284,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran.F_lib.Analyzing.Postprocessing",
      "library": "diffast-langs-fortran",
      "description": "This module specializes in analyzing and refining tree transformations within structured code comparison, focusing on detecting node moves, deletions, insertions, and relabeling while resolving complex changes like crossing moves and enclave elimination. It operates on abstract syntax trees (ASTs) and their nodes (`node_t`, `node2`), leveraging metadata such as identifiers, positional information, and UID-based lookups to enable precise edit synchronization, similarity scoring, and subtree scanning. The functionalities are tailored for use cases in code refactoring, automated transformation systems, and program analysis tools where tracking hierarchical changes and generating optimized edit scripts are critical.",
      "description_length": 721,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran.F_change.F.CB",
      "library": "diffast-langs-fortran",
      "description": "This module provides functions to retrieve a label from an object and check if an object is marked as a phantom. It operates on objects with a nested `data` field containing a `_label`. Use cases include analyzing abstract syntax trees where nodes carry metadata labels or tracking special node types in a compiler intermediate representation.",
      "description_length": 343,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran.F_lib.Change",
      "library": "diffast-langs-fortran",
      "description": "This module represents and analyzes structured modifications between Fortran ASTs using change classification, semantic tagging, and significance scoring. It supports operations on AST nodes and triple-based changes, enabling precise diff generation and transformation tracking through predicates for node analysis and nested traversal. The module includes submodules for extracting and checking labels in nested data structures, particularly useful for program analysis and compilation tasks. Example uses include automated refactoring, version comparison, and impact analysis of Fortran code evolution.",
      "description_length": 604,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran.F_change.F",
      "library": "diffast-langs-fortran",
      "description": "This module represents and manipulates program changes in Fortran code through diff/patch processing, AST node classification, and transformation, working with AST nodes, triples, and specialized types like `node_t`. It supports identifying syntactic categories, analyzing node properties such as grafting and cardinality, and transforming code via edits, relabels, and moves. A key submodule provides functions to retrieve labels and check phantom status on objects with nested `_label` fields, enabling metadata-driven analysis of AST nodes. Together, these tools facilitate structural analysis, change tracking, and refactoring of Fortran codebases.",
      "description_length": 652,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran.F_lib.Analyzing",
      "library": "diffast-langs-fortran",
      "description": "This module performs structural analysis of abstract syntax trees, identifying isomorphic subtrees, pruning redundancy, and computing mappings between tree revisions. It operates on `tree_t` and `node_t` structures, using metadata like identifiers, digests, and positions to support tasks such as comparing Fortran code versions, mapping equivalent nodes, and generating diff statistics. The child module extends this by detecting structural edits\u2014moves, deletions, insertions, and relabeling\u2014resolving complex changes like crossing moves and enclaves for applications in code refactoring and transformation systems. Together, they enable precise synchronization, similarity scoring, and hierarchical change tracking across tree-based data.",
      "description_length": 740,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mfortran.F_change",
      "library": "diffast-langs-fortran",
      "description": "This module facilitates structural analysis and transformation of Fortran code by processing program changes through AST manipulation, diff/patch operations, and metadata extraction. It defines key data types such as `node_t` and triples to represent and classify AST nodes, supporting operations like relabeling, grafting, and cardinality analysis. The module enables precise code refactoring and change tracking by identifying syntactic categories, applying transformations, and inspecting node metadata such as labels and phantom status. For example, it can detect moved or modified code segments, relabel variables across scopes, or analyze the structural impact of edits in nested Fortran constructs.",
      "description_length": 705,
      "index": 68,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mfortran.F_lib",
      "library": "diffast-langs-fortran",
      "description": "This module coordinates tree node mappings and edits during code comparison, handling operations like finding, locking, and finalizing node matches while managing insertions, deletions, and relabeling edits. It works with tree structures from `Diffast_core.Spec`, maintaining mappings using tables and edit lists to align AST nodes during refactoring and generate structured edit scripts. The first child module classifies and analyzes structured modifications using semantic tagging and significance scoring, supporting precise diff generation and transformation tracking through node predicates and nested traversal. The second child module performs structural analysis, identifying isomorphic subtrees and computing mappings between revisions, while detecting complex edits like crossing moves and enclaves for code synchronization and change tracking.",
      "description_length": 855,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mfortran",
      "library": "diffast-langs-fortran",
      "description": "This module enables structural analysis and transformation of Fortran code through AST manipulation, diff/patch operations, and metadata extraction. It defines key data types like `node_t` and triples to represent and classify AST nodes, supporting operations such as relabeling, grafting, and cardinality analysis. The module coordinates tree node mappings during code comparison, identifies isomorphic subtrees, and tracks complex edits like crossing moves and enclaves. For example, it can detect moved or modified code segments, relabel variables across scopes, or generate structured edit scripts for synchronized code revisions.",
      "description_length": 634,
      "index": 70,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 98,
    "meaningful_modules": 71,
    "filtered_empty_modules": 27,
    "retention_rate": 0.7244897959183674
  },
  "statistics": {
    "max_description_length": 876,
    "min_description_length": 195,
    "avg_description_length": 510.5492957746479,
    "embedding_file_size_mb": 0.25832462310791016
  }
}