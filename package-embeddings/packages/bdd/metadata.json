{
  "package": "bdd",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:15.577956",
  "modules": [
    {
      "module_path": "Bdd.BddVarMap",
      "library": "bdd",
      "description": "This module supports ordered map operations over BDD variables, enabling efficient key-value pair manipulation with functions like `add`, `merge`, and `filter_map`, as well as traversal and transformation via `fold`, `map`, and `partition`. It works with maps where keys are BDD variables (maintaining strict ordering) and values can be arbitrary types, while also facilitating bulk updates through sequence conversions and ordered iteration. Specific use cases include managing variable-to-data associations during BDD simplification, combining partial results in logical operations, and maintaining ordered collections for deterministic traversal in propositional logic workflows.",
      "description_length": 682,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bdd.Make",
      "library": "bdd",
      "description": "This module provides operations for constructing and transforming binary decision diagrams through logical connectives, quantification, and variable manipulation, while supporting analysis via equivalence checks, solution enumeration, and structural statistics. It operates on BDDs represented by the abstract `t` type, working with propositional formulas and variable assignments constrained by a maximal variable index (`max_var`). Specific applications include formal verification tasks, constraint extraction, and visualization of BDD structures through formats like DIMACS and DOT.",
      "description_length": 586,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bdd.BDD",
      "library": "bdd",
      "description": "This module enables construction and manipulation of Binary Decision Diagrams through operations like node creation, Boolean logic, quantification, and constraint application. It works with abstract BDD representations, truth assignments, and propositional formulas to support tasks such as equivalence checking, satisfiability analysis, and model enumeration in symbolic computation. Visualization tools for diagram rendering and memory statistics further aid algorithm optimization and debugging in formal verification workflows.",
      "description_length": 531,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bdd",
      "library": "bdd",
      "description": "This module implements binary decision diagrams for propositional logic, supporting logical operations like conjunction, disjunction, and negation over boolean constants and variables. It provides core BDD manipulation through node creation, quantification, and equivalence checking, with support for truth assignments and constraint analysis, enabling tasks like satisfiability and model enumeration. The variable map submodule enables efficient ordered key-value storage with BDD variables as keys, allowing bulk updates and transformations useful during BDD simplification and result combination. Additional submodules handle logical transformation, quantification, and visualization, supporting formal verification tasks such as symbolic state representation, constraint extraction, and BDD structure analysis via DIMACS or DOT output.",
      "description_length": 839,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 839,
    "min_description_length": 531,
    "avg_description_length": 659.5,
    "embedding_file_size_mb": 0.014936447143554688
  }
}