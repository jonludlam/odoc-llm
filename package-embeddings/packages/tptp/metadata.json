{
  "package": "tptp",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T23:00:38.621082",
  "modules": [
    {
      "module_path": "Tptp.File",
      "library": "tptp",
      "description": "Handles reading from and writing to TPTP-formatted files, supporting FOF and CNF formulas. Processes include resolving includes, iterating over parsed inputs, and formatting output with configurable line width and rational number representation. Works directly with file paths and TPTP AST structures. Useful for batch processing logic formulas, exporting parsed results, or building TPTP-based theorem proving tools.",
      "description_length": 417,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tptp_parser",
      "library": "tptp",
      "description": "Parses TPTP input into an abstract syntax tree using a lexer function that generates tokens representing logical symbols, keywords, and literals. It processes lexbuf input streams to produce structured TPTP data, handling constructs like formulas, clauses, and arithmetic values. Useful for building theorem proving tools that consume TPTP-formatted logic problems.",
      "description_length": 365,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Tptp_printer",
      "library": "tptp",
      "description": "This module includes operations for converting TPTP abstract syntax tree elements\u2014including formulas, terms, atoms, literals, and file names\u2014into human-readable strings or formatted documents through structured AST traversal. These functions follow a consistent formatting pattern to produce standardized TPTP syntax, primarily used for output generation or debugging logic representations during development.",
      "description_length": 409,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tptp_ast",
      "library": "tptp",
      "description": "This module defines the abstract syntax tree for TPTP FOF and CNF formulas, including support for annotated formulas, include directives, and comments. It provides functions to construct and compare AST elements such as variables, words, strings, and input statements. Use cases include parsing and manipulating TPTP logic files, handling formula annotations, and managing include statements with optional formula selections.",
      "description_length": 425,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tptp_lexer",
      "library": "tptp",
      "description": "Reads tokens from a lexing buffer, using an inside-formula flag to control comment skipping. Operates on `Lexing.lexbuf` and returns `Tptp_parser.token` values. Useful for parsing TPTP formulas where comment handling depends on context.",
      "description_length": 236,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Tptp",
      "library": "tptp",
      "description": "This module handles parsing and printing of TPTP FOF and CNF formulas, providing direct access to the AST. It supports reading from lex buffers, writing to buffers with custom formatting, and converting AST nodes to strings. Concrete use cases include processing logic formulas for theorem proving, manipulating TPTP expressions programmatically, and integrating with tools that consume or generate TPTP files.",
      "description_length": 410,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 425,
    "min_description_length": 236,
    "avg_description_length": 377.0,
    "embedding_file_size_mb": 0.08737754821777344
  }
}