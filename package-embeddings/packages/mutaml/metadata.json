{
  "package": "mutaml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 10,
  "creation_timestamp": "2025-06-18T16:32:45.608078",
  "modules": [
    {
      "module_path": "Entry.CLI",
      "description": "Provides functions to configure and validate command line arguments for genetic algorithm parameters, including mutation rate, seed, and GADT usage. Works with integer and boolean options, and includes a predicate to check invalid mutation rates. Defines argument specifications for parsing command line inputs.",
      "description_length": 311,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Entry.Env",
      "description": "Provides functions to select and transform environment variables, parse seed values, mutation rates, and GADT flags. Works with options, strings, integers, and booleans. Used to configure genetic algorithms by extracting and converting environment parameters into runtime values.",
      "description_length": 279,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mutaml_ppx.Options",
      "description": "Provides access to configuration parameters through mutable references, including a seed value for random generation, a mutation rate for genetic algorithms, and a flag to enable GADT support. Works with integer and boolean values stored in mutable reference cells. Used to control stochastic behavior and type system features during program execution.",
      "description_length": 352,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mutaml_ppx.Match",
      "description": "Checks if a pattern matches an exception, identifies catch-all patterns, and determines if case lists contain catch-all or matching patterns. Operates on Ppxlib.pattern and Ppxlib.case types to analyze pattern structure and behavior. Used to validate pattern guards in match expressions and ensure exhaustive handling of exceptions.",
      "description_length": 332,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mutaml_common.Loc",
      "description": "Converts between JSON values and position/location data structures, supporting serialization and deserialization for lexical and source location information. Works with Lexing.position and Location.t types, commonly used in parser and compiler tooling. Enables precise tracking of source code positions in structured data formats.",
      "description_length": 330,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "mutaml",
      "description": "Performs syntactic transformations on OCaml source code, such as replacing operators, altering boolean conditions, and modifying pattern matches. It processes abstract syntax trees (ASTs) and generates modified versions of the code for testing. It is used to evaluate the effectiveness of test suites by identifying mutations that go undetected.",
      "description_length": 345,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Entry",
      "description": "Handles configuration and validation of genetic algorithm parameters through command line and environment inputs. Supports integer, boolean, and string operations to parse and convert values like mutation rate, seed, and GADT flags. Includes checks for invalid mutation rates and transforms environment variables into usable runtime settings. Enables flexible parameter setup by combining parsed arguments and environment values.",
      "description_length": 429,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "RS",
      "description": "Generates a random seed value and provides operations to create, manipulate, and duplicate instances of type `t`, which represents a random state. The `int` function extracts an integer from a state, while `init` initializes a new state with a given integer. This module is used to manage random number generation sequences in deterministic contexts.",
      "description_length": 350,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mutaml_ppx",
      "description": "Provides functions to track and manage mutation counts, temporary variable counts, and a list of mutants during program transformation. Operates on integers and lists of mutant records from the Mutaml_common module. Used to instrument code for mutation testing by maintaining state during parsing and rewriting.",
      "description_length": 311,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mutaml_common",
      "description": "Handles bidirectional conversion between JSON and location data, including lexical and source positions. Supports Lexing.position and Location.t types, enabling accurate source tracking in parser and compiler workflows. Allows serialization of code positions for storage or transmission and reconstruction of locations from structured data. Example uses include logging source positions in JSON logs or parsing structured error reports.",
      "description_length": 436,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 10,
    "filtered_empty_modules": 6,
    "retention_rate": 0.625
  },
  "statistics": {
    "max_description_length": 436,
    "min_description_length": 279,
    "avg_description_length": 347.5,
    "embedding_file_size_mb": 0.03676414489746094
  }
}