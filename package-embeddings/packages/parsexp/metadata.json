{
  "package": "parsexp",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 68,
  "creation_timestamp": "2025-08-15T15:10:55.993223",
  "modules": [
    {
      "module_path": "Parsexp.Private.Automaton.Stack.Just_positions",
      "library": "parsexp",
      "description": "This module implements a stack structure that tracks parsing positions implicitly, without storing them directly in the stack itself. It provides operations like `empty` to initialize the stack and supports push and pop actions tied to external position records. This is used during parsing to manage nested structures where position tracking is needed but handled separately.",
      "description_length": 376,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Private.Automaton.Stack.For_cst",
      "library": "parsexp",
      "description": "This module implements a stack structure used to track the parsing state when constructing concrete syntax trees (CSTs) from S-expressions. It supports operations like pushing and inspecting elements such as opened parentheses, comments, and completed S-expressions, with specific handling for nested structures and sexp comments. It is used internally during parsing to manage context and ensure correct nesting and commenting behavior.",
      "description_length": 437,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Private.Automaton.For_cst",
      "library": "parsexp",
      "description": "This module implements a tokenizer for parsing S-expressions by managing token buffer state and tracking token start positions during lexing. It works with `Buffer.t` for efficient string accumulation and `Position.t` to record source locations. It is used internally by the parser to construct concrete syntax trees with accurate token positions.",
      "description_length": 347,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_cst.State.Read_only",
      "library": "parsexp",
      "description": "This module provides access to the current parsing state during an s-expression parse, including the offset, line, and column positions. It works with the internal state type `t` and position tracking structures. Use it to track or report precise location information within an input stream as s-expressions are parsed.",
      "description_length": 319,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Private.Automaton.Stack",
      "library": "parsexp",
      "description": "This module implements a stack-based structure for managing parsing states during S-expression parsing, supporting operations to push and inspect elements like opened parentheses, comments, and completed S-expressions. It works with nested structures and includes specialized submodules for handling concrete syntax trees and position tracking. Use cases include tracking parsing context for correct nesting and comment handling, and managing implicit position data during sexp traversal.",
      "description_length": 488,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Private.Automaton_state.Context",
      "library": "parsexp",
      "description": "This module defines a simple state type used during parsing to track whether the parser is processing a regular s-expression or a comment. It includes basic operations to transition between these states, such as entering and exiting a comment context. The state is used internally to manage parsing behavior in the presence of comments and nested structures.",
      "description_length": 358,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Private.Automaton_stack.Just_positions",
      "library": "parsexp",
      "description": "This module implements a stack-like structure that tracks positions during parsing operations. It provides an `empty` value representing an initial state with no positions recorded. The module is used internally to manage positional information when parsing s-expressions, where positions are stored externally from the stack itself.",
      "description_length": 333,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_just_positions.State.Read_only",
      "library": "parsexp",
      "description": "This module provides access to the current parsing position, including offset, line, and column numbers, as well as a full position object. It works with the internal state of the parser to track where in the input stream the parsing currently is. Concrete use cases include reporting precise error locations or logging progress when parsing s-expressions from a stream.",
      "description_length": 370,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Private.Automaton_stack.For_cst",
      "library": "parsexp",
      "description": "This module implements a stack-based automaton for constructing concrete syntax trees (CSTs) during S-expression parsing. It tracks parsing state with variants like `Open`, `In_sexp_comment`, and `T_or_comment`, enabling precise handling of nested structures and comments. Use cases include recovering exact source positions and comment placement in parsed S-expressions.",
      "description_length": 371,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager.State.Read_only",
      "library": "parsexp",
      "description": "This module provides access to the current parsing position, including offset, line, and column numbers, as well as a full position object. It works with the internal state of an eager s-expression parser. Use it to track or report precise locations in input streams when parsing s-expressions incrementally.",
      "description_length": 308,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Private.Automaton_state.For_cst",
      "library": "parsexp",
      "description": "This module manages the state of a token during parsing, specifically tracking the token's buffer and its starting position. It provides operations to update and retrieve the token's position and buffer content. Useful for constructing concrete syntax trees by capturing token metadata during parsing.",
      "description_length": 301,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Private.Automaton.Context",
      "library": "parsexp",
      "description": "This module defines a context type used during parsing to track whether the parser is processing a regular s-expression or a comment. It includes functions to transition between these states and determine valid parsing behaviors based on the current context. The primary data type is a variant with two constructors: `Sexp` and `Sexp_comment`.",
      "description_length": 343,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_and_positions.State.Read_only",
      "library": "parsexp",
      "description": "This module provides access to the current parsing state, including the character offset, line number, column position, and full position information within the input stream. It works with the internal parsing state type `t` and the position type `Parsexp.Positions.pos`. Use this module to retrieve precise location metadata during s-expression parsing, such as reporting error positions or tracking the progress of a parser over a stream.",
      "description_length": 440,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Positions.Builder",
      "library": "parsexp",
      "description": "This module incrementally constructs compact position data by tracking absolute offsets, adding positions or newline markers with strict ordering constraints. It supports efficient updates through `add`, `add_twice`, and `add_newline`, all requiring increasing offset values. Use it to build line and column mappings during parsing, particularly when handling structured text formats like S-expressions.",
      "description_length": 403,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_just_positions.State",
      "library": "parsexp",
      "description": "This module manages the internal state of an eager s-expression parser, tracking the current position in the input stream using character offset, line, and column numbers. It provides functions to reset the state, retrieve position information, and halt parsing to prevent further input. Use cases include logging parsing progress, reporting precise error locations, and controlling parser lifecycle during stream processing.",
      "description_length": 425,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Many_and_positions.State",
      "library": "parsexp",
      "description": "This module manages the internal state of a parser that tracks both the progress of input consumption and positional information. It provides operations to create, reset, and query the parser's current position in terms of line, column, and character offset, as well as to halt further input processing. It is used when implementing custom parsers that need to maintain and manipulate precise source location metadata during parsing.",
      "description_length": 433,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Cst.Forget",
      "library": "parsexp",
      "description": "Converts concrete syntax trees of s-expressions into their corresponding s-expression values, handling both full expressions and comments. It operates on types representing raw s-expression nodes, including sequences and comments, and produces simplified s-expressions by discarding positional and formatting details. Useful for transforming parsed s-expression files into a normalized form suitable for further processing or analysis.",
      "description_length": 435,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_and_positions.Stack",
      "library": "parsexp",
      "description": "This module provides a stack-based interface for incrementally parsing s-expressions with positional tracking. It supports operations to push, pop, and inspect elements on the stack, enabling precise control over parsing state. Use it to build custom parsers that require immediate access to partially parsed s-expressions and their positions in the input.",
      "description_length": 356,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Eager_cst.Lexbuf_consumer",
      "library": "parsexp",
      "description": "This module provides functions to consume s-expressions from a `Lexing.lexbuf` input buffer, returning each parsed s-expression immediately upon completion. It supports parsing with `parse`, which consumes exactly one s-expression, and `parse_opt`, which returns `None` if the end of input is reached before an s-expression is fully read. It is useful for incrementally parsing streams where s-expressions are expected one at a time, such as reading from a file or network socket.",
      "description_length": 480,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Positions.Iterator",
      "library": "parsexp",
      "description": "This module provides functions to iterate over a compact set of positions, allowing precise navigation through position data. It supports advancing by a specified number of positions or over entire s-expressions, returning the corresponding position ranges. Use cases include parsing and traversing structured text data where exact position tracking is required, such as in compilers or syntax analyzers.",
      "description_length": 404,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_just_positions.Lexbuf_consumer",
      "library": "parsexp",
      "description": "This module provides functions to consume s-expressions from a `Lexing.lexbuf` input buffer, returning each parsed value immediately upon completion. It supports parsing a single s-expression with `parse` or attempting to parse one with `parse_opt`, which handles end-of-input gracefully. Use this to process streaming input where s-expressions are read incrementally, such as reading from a file or network stream one expression at a time.",
      "description_length": 440,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_and_positions.State",
      "library": "parsexp",
      "description": "This module manages the internal state of an eager s-expression parser with position tracking. It provides functions to reset the state, retrieve character offset, line, column, and full position information, and to stop further parsing. Use it to monitor parsing progress and report precise error locations when parsing s-expressions from a stream.",
      "description_length": 349,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_just_positions.Stack",
      "library": "parsexp",
      "description": "This module provides a stack-based interface for tracking positions during parsing. It supports operations to push, pop, and inspect position information associated with s-expressions. It is used to maintain context when parsing nested expressions, allowing precise location tracking within input streams.",
      "description_length": 305,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Many_and_positions.Stack",
      "library": "parsexp",
      "description": "This module provides a stack data structure with support for tracking positions in parsed expressions. It includes operations to push and pop elements while maintaining positional information, which is essential for accurate error reporting during parsing. The stack is specifically used to manage nested structures in S-expressions, ensuring correct context is maintained during traversal.",
      "description_length": 390,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Many_just_positions.Stack",
      "library": "parsexp",
      "description": "This module provides a stack-like structure for managing parsing contexts during the processing of s-expressions. It supports operations like pushing and popping context frames to track positions in the input. Use cases include maintaining accurate source location information while parsing nested or recursive s-expression structures.",
      "description_length": 335,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager.Lexbuf_consumer",
      "library": "parsexp",
      "description": "This module provides functions to consume s-expressions from a `Lexing.lexbuf` input buffer, returning each parsed s-expression immediately upon completion. It supports parsing with `parse`, which reads exactly one s-expression, and `parse_opt`, which returns `None` if the input ends prematurely. Use this to incrementally parse a stream of s-expressions, stopping at the first valid one or handling optional input.",
      "description_length": 416,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager.State",
      "library": "parsexp",
      "description": "This module manages the state of an incremental s-expression parser that returns expressions as soon as they are parsed. It provides functions to track position (offset, line, column), reset parsing state, and control input consumption. Use it to parse s-expressions from a stream and handle partial or malformed input with precise location tracking.",
      "description_length": 350,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Many_cst.State",
      "library": "parsexp",
      "description": "This module manages the internal state of a multi-expression parser, tracking position and progress during parsing. It provides functions to create, reset, and query the parser's current position in terms of line, column, and character offset. It is used when incrementally parsing multiple S-expressions from a stream, ensuring accurate error reporting and position tracking.",
      "description_length": 376,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Single_and_positions.Stack",
      "library": "parsexp",
      "description": "This module provides a stack data structure specifically designed to track positions during parsing operations. It supports operations like pushing and popping elements with associated positions, ensuring accurate location tracking in parsed expressions. Use cases include managing nested expression contexts and error reporting with precise positional information.",
      "description_length": 365,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Single.Stack",
      "library": "parsexp",
      "description": "A stack data structure for managing nested s-expression parsing contexts. It supports operations like pushing and popping elements to track hierarchical structure during parsing. Useful for implementing custom s-expression parsers that require context-sensitive handling of nested expressions.",
      "description_length": 293,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_cst.Stack",
      "library": "parsexp",
      "description": "This module provides a stack-based structure for managing the parsing state when extracting s-expressions eagerly from an input stream. It supports operations like pushing and popping parsing contexts to track nested expressions efficiently. Concrete use cases include incremental parsing of large input streams where early termination or partial results are needed, such as reading s-expressions from a file or network socket one at a time.",
      "description_length": 441,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Private.Automaton_state",
      "library": "parsexp",
      "description": "This module manages parsing states for handling s-expressions and comments, tracking token buffers, positions, and nesting levels. It supports operations to create, reset, and query parser state, including checking for unclosed parentheses and retrieving line/column positions. Used internally during parsing to maintain context and construct syntax trees with precise token metadata.",
      "description_length": 384,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Single_just_positions.State",
      "library": "parsexp",
      "description": "This module manages the internal state of a parser that tracks character positions during parsing. It provides functions to create, reset, and query the state, including current line, column, and offset positions. Use this module when implementing custom parsers that require precise tracking of input positions for error reporting or source mapping.",
      "description_length": 350,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Many.Stack",
      "library": "parsexp",
      "description": "A mutable stack for managing nested s-expression parsing states. It supports operations to push, pop, and access the current state during incremental parsing. This structure is used internally when building recursive parsers that handle multiple levels of nested s-expressions.",
      "description_length": 277,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_cst.State",
      "library": "parsexp",
      "description": "This module manages the internal state of an eager s-expression parser, providing functions to track position (offset, line, column) and control parsing flow (reset, stop). It works with the abstract state type `t` and position structures to enable precise location tracking during incremental parsing. Concrete use cases include implementing custom s-expression stream parsers that report accurate error positions or extract s-expressions one at a time from a larger input.",
      "description_length": 474,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Many_cst.Stack",
      "library": "parsexp",
      "description": "This module provides a stack data structure specifically designed to hold multiple `Parsexp` concrete syntax trees (CSTs). It supports operations like pushing and popping CSTs onto the stack, enabling efficient manipulation and tracking of nested or sequential parse results. Concrete use cases include managing recursive descent parsers or handling multi-expression input streams where individual expressions are parsed and stored incrementally.",
      "description_length": 446,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Single.State",
      "library": "parsexp",
      "description": "This module manages the internal state of a single-line parser, tracking position and progress through input data. It provides functions to create, reset, and query the parser's current offset, line number, column position, and full position record. Use this module when implementing custom parsers that require precise tracking of input consumption and location reporting.",
      "description_length": 373,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Single_and_positions.State",
      "library": "parsexp",
      "description": "This module manages the state of a parser that tracks positions in the input. It provides operations to create, reset, and query the parser's current position, including line, column, and character offset. Use it when implementing custom parsers that need to report precise source locations for errors or analysis.",
      "description_length": 314,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Many_just_positions.State",
      "library": "parsexp",
      "description": "This module manages the state of a parser that tracks character positions during multi-expression parsing. It provides functions to create, reset, and query the parser's current position in terms of line, column, and character offset. Use this when implementing custom parsers that need precise location tracking for error reporting or source mapping.",
      "description_length": 351,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager.Stack",
      "library": "parsexp",
      "description": "This module provides a stack-based parser for incrementally processing s-expressions from a character stream. It allows parsing to pause and resume, returning the first complete s-expression found at any step. The stack maintains partial parsing states, enabling efficient, line-by-line or chunked input processing, such as reading from a file or network stream.",
      "description_length": 362,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_and_positions.Lexbuf_consumer",
      "library": "parsexp",
      "description": "This module processes s-expressions from a lexing buffer, providing functions to parse a single s-expression immediately upon encountering it. It works directly with `Lexing.lexbuf` and returns parsed values or options when an s-expression is successfully read. Use it to incrementally parse input streams, such as reading s-expressions from standard input or a file one at a time.",
      "description_length": 381,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Many.State",
      "library": "parsexp",
      "description": "Tracks parsing position and state for multi-expression input streams. It provides functions to create, reset, and query the current position in terms of line, column, and character offset. Use this module when implementing custom parsers that need to maintain and update input position information dynamically during parsing.",
      "description_length": 325,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Single_just_positions.Stack",
      "library": "parsexp",
      "description": "This module provides a stack-like structure for managing positions during parsing, specifically tracking a single position context. It supports operations to push and pop positions, enabling precise error reporting and context tracking in parsers. Concrete use cases include maintaining the current parsing location in recursive descent parsers or error handlers that require contextual information.",
      "description_length": 399,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Private.Automaton",
      "library": "parsexp",
      "description": "This module supports incremental parsing of S-expressions through stack-based state management and context tracking, enabling precise handling of nested structures and comments. It operates on automata with customizable modes and kinds, processing character or byte input streams while maintaining position tracking and error handling. Typical applications include error recovery during lexing, parsing from substrings, and extracting continuation states for incremental parsing workflows.",
      "description_length": 489,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Private.Automaton_stack",
      "library": "parsexp",
      "description": "This module implements a stack-based automaton for managing the state of S-expression parsing, supporting operations to construct and validate nested expressions. It works with variants representing empty, open, or completed S-expressions, and is used to recover precise source positions and comment placement during parsing. Concrete use cases include parsing multi-expression files and tracking partial or complete S-expression states.",
      "description_length": 437,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Conv_many_and_locations",
      "library": "parsexp",
      "description": "This module parses and converts s-expressions with positional information into typed values, handling both string inputs and pre-parsed s-expressions. It works with s-expressions paired with source positions, applying a conversion function to each element and accumulating errors. Use it to load and process configuration files or structured data where precise error locations are needed.",
      "description_length": 388,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Many_just_positions",
      "library": "parsexp",
      "description": "Tracks character positions during multi-expression s-expression parsing, producing precise location data for each parsed value. It processes input character by character or in bulk using state and stack modules to maintain context, handling nested structures and reporting errors with exact positions. Use to implement custom s-expression parsers requiring accurate source location tracking for error reporting or tooling like IDEs and linters.",
      "description_length": 444,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Single_and_positions",
      "library": "parsexp",
      "description": "This module provides functions to parse S-expressions while tracking positional information in the input. It processes characters, strings, or bytes incrementally using a parser state and stack, returning parsed S-expressions paired with position data. Use it to implement precise error reporting or source analysis in custom parsers.",
      "description_length": 334,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Many",
      "library": "parsexp",
      "description": "This module implements an incremental parser for s-expressions that can handle multiple top-level values in a single input stream. It processes character streams using a state machine that tracks line and column positions, and a stack-based structure to manage nested s-expression parsing contexts. Feed characters one at a time using `feed`, or use `feed_string` and similar functions to process larger chunks, then call `feed_eoi` to finalize parsing and retrieve the list of parsed s-expressions.",
      "description_length": 499,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Parse_error",
      "library": "parsexp",
      "description": "This module defines a type `t` for representing parsing errors, along with functions to extract the position, message, and S-expression representation of an error. It works with parsed input streams and source positions to provide precise error diagnostics. Concrete use cases include reporting syntax errors in configuration files or data formats with accurate location information.",
      "description_length": 383,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Cst",
      "library": "parsexp",
      "description": "This module defines a concrete syntax tree (CST) for s-expressions, capturing detailed structure including atoms, lists, and comments with their source positions. It supports precise manipulation of s-expression files, such as rewriting or transforming code while preserving formatting and comments. Key operations include converting CST nodes to s-expressions and comparing nodes for structural equality.",
      "description_length": 405,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Private",
      "library": "parsexp",
      "description": "This module provides low-level components for incremental S-expression parsing, enabling precise control over state transitions, error recovery, and position tracking. It works with stack-based automata and parser states to handle nested structures, comments, and token buffering, supporting input streams such as characters or bytes. Concrete use cases include parsing S-expressions from substrings, recovering from syntax errors during lexing, and maintaining context for multi-expression files with accurate source positioning.",
      "description_length": 530,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Old_parser_cont_state",
      "library": "parsexp",
      "description": "This module represents parser states for handling different stages of S-expression parsing, including whitespace, atoms, lists, and comments. It provides functions to convert state values to S-expressions and strings. Useful for debugging or logging the current parsing context during lexing and parsing operations.",
      "description_length": 315,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Many_cst",
      "library": "parsexp",
      "description": "This module parses multiple S-expressions from a stream, handling incremental input one character or chunk at a time. It tracks parsing state and position, and builds up a stack of concrete syntax trees (CSTs) as expressions are parsed. Use it to implement custom S-expression parsers with precise error reporting and support for partial or streaming input.",
      "description_length": 357,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Single",
      "library": "parsexp",
      "description": "This module provides low-level parsing operations for s-expressions, including character-by-character input processing, stack-based context management, and error handling. It works with s-expression syntax trees, character streams, and position-tracking state. Use it to build custom s-expression parsers with precise control over input consumption and nested structure handling.",
      "description_length": 379,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_cst",
      "library": "parsexp",
      "description": "This module parses s-expressions from an input stream, returning each s-expression immediately upon completion. It works with character streams, strings, and lexing buffers, supporting incremental parsing through state and stack management. Concrete use cases include reading s-expressions one at a time from a file or network socket, and implementing custom parsers that require precise error reporting and partial results.",
      "description_length": 424,
      "index": 55,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Positions",
      "library": "parsexp",
      "description": "This module tracks and manipulates source code positions during parsing, providing precise line, column, and byte offset information. It supports structured data like S-expressions by mapping positions to specific ranges and enabling efficient lookup of sub-expressions. Key operations include building and navigating position data, finding ranges within parsed input, and calculating memory usage for position sets.",
      "description_length": 416,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Conv_error",
      "library": "parsexp",
      "description": "This module defines a combined error type for parsing and S-expression conversion errors, supporting precise error handling during input processing. It provides functions to convert errors to S-expressions and report them with context, including filename information. Concrete use cases include validating and debugging malformed input files in configuration or data serialization workflows.",
      "description_length": 391,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Conv_single",
      "library": "parsexp",
      "description": "This module parses and converts S-expressions from strings or pre-parsed input, producing values wrapped in `Parsexp.id` along with position information. It works directly with S-expressions, conversion functions, and error types for parsing and conversion. Use cases include loading and validating configuration files or data formats that use S-expressions with precise error reporting and source positions.",
      "description_length": 408,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Conv_many_at_once",
      "library": "parsexp",
      "description": "This module parses and converts multiple S-expressions from a string or pre-parsed input, producing values of a specified type wrapped in `Parsexp.id`. It works with S-expression lists and optional position information, supporting error handling during parsing and conversion. Use it to load and process configuration files or data formats that contain multiple S-expressions in a single input source.",
      "description_length": 401,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Many_and_positions",
      "library": "parsexp",
      "description": "This module parses S-expressions while tracking precise positional information for each parsed element. It provides low-level character feeding operations and higher-level string parsing functions, all maintaining detailed source positions through its state and stack modules. It is used to implement custom S-expression parsers that require accurate error reporting with line and column numbers.",
      "description_length": 396,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager",
      "library": "parsexp",
      "description": "This module parses s-expressions from character input incrementally, returning each complete s-expression immediately upon detection. It operates on streams of characters, strings, or bytes, using a stateful stack-based parser that supports partial input and resumable parsing. Concrete use cases include reading s-expressions from a file or network socket one at a time, handling incomplete or malformed input with position tracking, and parsing a stream where each s-expression is processed as it becomes available.",
      "description_length": 517,
      "index": 61,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Parsexp.Conv_many",
      "library": "parsexp",
      "description": "This module parses and converts lists of S-expressions from strings or pre-parsed input, applying a conversion function to each element. It handles errors in both parsing and conversion, combining them when necessary, and works directly with Sexp.t, position data, and custom result types. Use it to load and process multi-expression S-expression files or strings into typed OCaml values with precise error reporting.",
      "description_length": 417,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_and_positions",
      "library": "parsexp",
      "description": "This module parses s-expressions from character streams, strings, or bytes incrementally, returning each s-expression immediately upon completion along with its positional information in the input. It supports precise tracking of parsing progress through state and stack operations, enabling custom parser logic and accurate error reporting. Concrete use cases include reading s-expressions one-by-one from standard input, network streams, or large files without waiting for full input consumption.",
      "description_length": 498,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Single_just_positions",
      "library": "parsexp",
      "description": "This module parses input while tracking character positions, providing precise error reporting and source location data. It processes strings or byte sequences through stateful parsing functions, returning structured position data on success or errors. Use it to implement parsers that need exact input positioning, such as compilers or linters mapping errors to source locations.",
      "description_length": 380,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Eager_just_positions",
      "library": "parsexp",
      "description": "This module parses s-expressions from input streams, returning each expression immediately upon completion. It tracks character offsets, lines, and columns to provide precise position information during parsing. Use it to process input incrementally, such as reading s-expressions one at a time from a file or network stream.",
      "description_length": 325,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp.Of_sexp_error",
      "library": "parsexp",
      "description": "This module handles errors during S-expression parsing, providing detailed information about conversion failures. It includes functions to access the original exception, the problematic S-expression, and its location in the source. Use it to diagnose and report structured parse errors in configuration files or data serialization workflows.",
      "description_length": 341,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parsexp",
      "library": "parsexp",
      "description": "This module supports parsing S-expressions into typed OCaml values through incremental and batched operations, with robust error handling for both syntactic and semantic conversion failures. It operates on structured representations like concrete syntax trees (CSTs) and tracks source positions (lines, columns, offsets) to enable precise error diagnostics. Typical use cases include processing configuration files, serializing data formats, and building tools that require reliable parsing with actionable error feedback.",
      "description_length": 522,
      "index": 67,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 74,
    "meaningful_modules": 68,
    "filtered_empty_modules": 6,
    "retention_rate": 0.918918918918919
  },
  "statistics": {
    "max_description_length": 530,
    "min_description_length": 277,
    "avg_description_length": 391.45588235294116,
    "embedding_file_size_mb": 0.985753059387207
  }
}