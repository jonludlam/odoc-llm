{
  "package": "lwt-binio",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 11,
  "creation_timestamp": "2025-06-18T16:32:40.791754",
  "modules": [
    {
      "module_path": "Lwt_binio.Fd.Src",
      "description": "Reads a specified number of bytes from a file descriptor at a given offset, returning the data as a byte buffer. Writes a byte buffer to a file descriptor starting at a specified offset. Operates on file descriptors and byte buffers, suitable for low-level I/O tasks such as reading binary files or sending raw data over a network.",
      "description_length": 331,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lwt_binio.Fd.LittleEndian",
      "description": "Reads and writes numeric values in little-endian format from a file descriptor, supporting custom conversion functions and specific byte sizes. Handles 32-bit and 64-bit integers, as well as 32-bit and 64-bit floats, with direct access to memory buffers. Provides low-level control for serializing and deserializing binary data in network protocols or file formats.",
      "description_length": 365,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lwt_binio.Fd.BigEndian",
      "description": "Reads and writes numeric values in big-endian format from or to a file descriptor, supporting 32-bit and 64-bit integers, and 32-bit and 64-bit floats. Provides low-level byte manipulation with custom conversion functions and specialized routines for fixed-size data. Used for parsing binary file formats and network protocols that require precise byte ordering.",
      "description_length": 362,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lwt_binio.Io.Src",
      "description": "Reads a specified number of bytes from an input channel at a given offset and returns them as a Bytes.t value. Writes a Bytes.t value to an output channel starting at a specified offset. Operates on tuples of input and output channels, enabling low-level byte manipulation for file or network I/O.",
      "description_length": 297,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lwt_binio.Io.LittleEndian",
      "description": "Reads and writes numeric values in little-endian format from and to a byte stream, supporting 32-bit and 64-bit integers and floating-point numbers. Operates on a combined input/output channel structure, enabling direct manipulation of binary data at specific offsets. Provides specialized functions for handling IEEE 754 single and double-precision floats and arbitrary-sized numeric conversions.",
      "description_length": 397,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lwt_binio.Io.BigEndian",
      "description": "Reads and writes numeric values in big-endian format to and from a byte stream, supporting 32-bit and 64-bit integers and floating-point numbers. Operates on a combined input/output channel structure, allowing direct access to specific offsets within the data. Provides low-level control for serializing and deserializing binary data in network or file protocols.",
      "description_length": 363,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lwt_binio.Make",
      "description": "Extracts and inserts 32-bit and 64-bit integers from/to byte sequences, enabling low-level data manipulation. Operates on byte buffers and integer values of types int32 and int64. Used for parsing binary file formats and network protocols that require precise control over byte-level representations.",
      "description_length": 300,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lwt_binio.Fd",
      "description": "Provides low-level I/O operations for reading and writing binary data through file descriptors, supporting direct buffer manipulation and numeric serialization. Includes functions for reading and writing raw bytes, as well as little-endian and big-endian numeric types, with customizable conversion routines. Operations enable precise control over data representation, suitable for handling network protocols, binary files, and memory-mapped data. Examples include reading a 64-bit integer from a file descriptor, writing a byte buffer to a socket, and parsing a binary file header.",
      "description_length": 582,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lwt_binio.Io",
      "description": "Provides low-level byte and numeric I/O operations through input and output channels, supporting both endianness formats. Offers direct manipulation of binary data with functions for reading and writing integers, floats, and byte sequences at specific offsets. Enables efficient serialization and deserialization of structured data for network and file protocols. Examples include reading a 64-bit little-endian integer from a stream or writing a byte array to a specific position in a file.",
      "description_length": 491,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "lwt-binio",
      "description": "Provides functions for reading and writing binary data using Lwt for asynchronous I/O, including reading and writing integers, strings, and byte sequences. Operates on Lwt's promise-based I/O channels and byte arrays. Used to serialize and deserialize protocol messages in networked applications.",
      "description_length": 296,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lwt_binio",
      "description": "Reads and writes binary data to and from a source buffer, supporting custom parsing and serialization through callback functions. It handles numeric types like 32-bit and 64-bit integers and floats, with dedicated functions for direct access. Provides low-level control for reading and writing values at specific offsets in a byte stream.",
      "description_length": 338,
      "index": 10,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 11,
    "meaningful_modules": 11,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 582,
    "min_description_length": 296,
    "avg_description_length": 374.72727272727275,
    "embedding_file_size_mb": 0.04039287567138672
  }
}