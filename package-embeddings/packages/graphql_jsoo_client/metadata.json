{
  "package": "graphql_jsoo_client",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:52.568153",
  "modules": [
    {
      "module_path": "Graphql_jsoo_client.QuerySig.Query-Raw",
      "library": "graphql_jsoo_client",
      "description": "This module defines the low-level interface for constructing and executing GraphQL queries in client-side OCaml code using `graphql_ppx`. It includes operations for serializing query variables, parsing responses, and handling query execution errors. It works directly with GraphQL operation definitions, variables, and JSON-encoded responses, enabling precise control over network requests and data transformation. Use cases include custom query execution pipelines, integration with HTTP clients, and response preprocessing in web applications.",
      "description_length": 545,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Graphql_jsoo_client.QuerySig.Query",
      "library": "graphql_jsoo_client",
      "description": "This module defines the structure and behavior for GraphQL queries, including parsing and serializing query results and variables. It works with types `t` for query responses, `t_variables` for input variables, and a `Raw` submodule handling JSON representations. Concrete use cases include converting query responses from JSON, preparing variables for transmission, and ensuring type-safe interactions with GraphQL APIs.",
      "description_length": 421,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_jsoo_client.Client.Make",
      "library": "graphql_jsoo_client",
      "description": "This module implements a GraphQL client for handling subscriptions, queries, and WebSocket control messages. It works with GraphQL operations defined by the `Q` module, which includes variables and response types. Concrete use cases include sending authenticated queries, establishing real-time subscriptions, and managing connection keep-alive with ping/pong messages.",
      "description_length": 369,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_jsoo_client.Client",
      "library": "graphql_jsoo_client",
      "description": "This module manages client-side WebSocket connections to GraphQL servers, handling connection lifecycle events, message routing, and state tracking through dedicated handlers and tracers. It supports sending and receiving GraphQL operations\u2014such as queries, mutations, and subscriptions\u2014while maintaining active subscriptions and processing control messages like ping/pong for connection health. Key data types include connection state objects, operation handlers, and tracer callbacks, enabling precise control over message flow and debugging. Example uses include authenticating and querying a GraphQL API, subscribing to real-time data streams, and inspecting message routing by logging handler registrations and connection events.",
      "description_length": 734,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_jsoo_client.QuerySig",
      "library": "graphql_jsoo_client",
      "description": "This module provides an interface for executing GraphQL queries and processing their responses, combining both high-level operations and low-level utilities. It defines key types like `t` for query results and `t_variables` for input variables, along with functions to serialize variables, parse JSON responses, and handle execution errors. The module supports use cases such as sending typed queries to a GraphQL API, preprocessing responses, and integrating with custom HTTP clients. Its submodules offer fine-grained control over query construction and data transformation, enabling robust client-side interactions with GraphQL services.",
      "description_length": 640,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Graphql_jsoo_client",
      "library": "graphql_jsoo_client",
      "description": "This module enables client-side interaction with GraphQL servers through WebSocket connections and query execution. It manages connection lifecycle, message routing, and state tracking while supporting queries, mutations, and subscriptions. Key data types include connection state, operation handlers, query result wrappers, and variable serializers. You can use it to authenticate, send typed queries, subscribe to real-time updates, and integrate with custom HTTP or WebSocket transports.",
      "description_length": 490,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 734,
    "min_description_length": 369,
    "avg_description_length": 533.1666666666666,
    "embedding_file_size_mb": 0.022216796875
  }
}