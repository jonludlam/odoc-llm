{
  "package": "unionFind",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:06:58.364744",
  "modules": [
    {
      "module_path": "UnionFind.StoreMap.Make",
      "library": "unionFind",
      "description": "This module implements persistent stores using immutable integer maps, enabling efficient reference management with constant-time copy operations. It supports creating, reading, writing, and comparing references within a store, where each reference is associated with a value of arbitrary type. Concrete use cases include managing dynamic collections of values with fast duplication, such as in version control systems or backtracking algorithms.",
      "description_length": 446,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UnionFind.StoreMap",
      "library": "unionFind",
      "description": "This module implements stores using immutable integer maps, enabling constant-time store copying and efficient reference management. It supports creating, reading, writing, and comparing references within a store, with operations that modify the store in place, while its child module provides a persistent variant that avoids in-place updates, allowing for safe and efficient duplication in scenarios like version control or backtracking. The main data types include references and stores, with operations such as `copy`, `get`, and `set`. Specific examples include managing versioned state in union-find algorithms or maintaining branching collections in backtracking solvers.",
      "description_length": 678,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UnionFind.STORE",
      "library": "unionFind",
      "description": "This module manages mutable references within a store, supporting operations to create, read, write, and compare references. It works with store values and reference values, enabling dynamic storage management. Concrete use cases include tracking and updating elements in a union-find structure, where references represent nodes and the store maintains their parent and rank information.",
      "description_length": 387,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UnionFind.StoreTransactionalRef",
      "library": "unionFind",
      "description": "This module implements mutable stores with transactional references for managing dynamic, mutable state within a union-find data structure. It supports operations to create, read, write, and compare references, as well as to perform atomic transactions that can be committed or rolled back based on success or failure. Concrete use cases include tracking and modifying per-node data in the union-find structure during union and find operations, ensuring consistency through transactional semantics.",
      "description_length": 498,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UnionFind.StoreRef",
      "library": "unionFind",
      "description": "This module implements mutable stores using primitive references, supporting operations to create, read, write, and compare references within a store. It works with generic values of type `'a` and reference identifiers of type `'a rref`, maintaining an internal mapping between them. Concrete use cases include managing dynamic collections of mutable variables in algorithms like union-find, where references must be dynamically allocated, updated, and compared efficiently.",
      "description_length": 474,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UnionFind.StoreVector",
      "library": "unionFind",
      "description": "This module implements mutable stores using extensible arrays, supporting operations to create, read, write, and compare references within the store. It provides efficient reference management for disjoint set forests, particularly enabling mutable state updates and controlled copying of the entire store. It is used to maintain dynamic equivalence relations where elements are grouped and tracked through mutable references.",
      "description_length": 426,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UnionFind.Make",
      "library": "unionFind",
      "description": "This module implements a union-find data structure using disjoint set forests with path compression and union by rank. It operates on references within a user-defined store, supporting operations like `make` to create references, `get` and `set` to access and modify values, `eq` to compare references, and `union` or `merge` to combine equivalence classes. Concrete use cases include efficiently managing dynamic connectivity problems, such as tracking connected components in a graph or merging sets during type inference.",
      "description_length": 524,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "UnionFind",
      "library": "unionFind",
      "description": "This module implements a union-find data structure using disjoint set forests with path compression and union by rank, managing equivalence classes of values of any type `'a` through references. It supports operations like `make`, `find`, `union`, and `merge` for dynamic connectivity, while child modules provide store implementations\u2014using immutable maps, extensible arrays, or transactional references\u2014that manage mutable state, enable efficient copying, and support advanced use cases like version control or backtracking. Main data types include references and stores, with operations such as `get`, `set`, `copy`, and transactional updates, allowing for example, tracking connected components in a graph or maintaining mutable per-node data during type inference. Specific examples include managing versioned state in union-find algorithms or dynamically updating and merging sets in a network.",
      "description_length": 900,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 900,
    "min_description_length": 387,
    "avg_description_length": 541.625,
    "embedding_file_size_mb": 0.029453277587890625
  }
}