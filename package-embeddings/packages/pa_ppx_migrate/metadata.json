{
  "package": "pa_ppx_migrate",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:30:08.165333",
  "modules": [
    {
      "module_path": "Pa_deriving_migrate.Prettify",
      "description": "Generates and applies pretty-printing transformations to type declarations and expressions in OCaml abstract syntax trees. It processes tuples of values and type declarations, producing formatted strings and modified type structures. It supports matching and rewriting of type patterns based on predefined formatting rules.",
      "description_length": 323,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pa_deriving_migrate.Dispatch1",
      "description": "Extracts case branches from OCaml expressions, identifies type variables in type expressions, computes type substitutions, and manipulates module-qualified identifiers. Works with OCaml AST nodes such as expressions, patterns, and type expressions. Used to transform and analyze code during ppx rewriters, particularly for handling type arguments and module expansions.",
      "description_length": 369,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_deriving_migrate.Migrate",
      "description": "This module handles OCaml AST transformations, focusing on type declarations, expressions, and type expressions to generate dispatchers, manage migration rules, and perform substitutions or reductions, particularly for type argument handling and recursive dispatch. It enables ppx rewriter workflows by constructing dispatch tables, canonicalizing types, and generating code for type-based abstractions, such as transforming complex type structures into executable dispatch logic.",
      "description_length": 480,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "pa_ppx_migrate",
      "description": "Provides functions to parse and transform OCaml code structures, including type expressions, patterns, and module items. Works with abstract syntax tree nodes and ppx rewriters. Enables migration of code between different versions of ppx syntax by rewriting annotations and expanding macros.",
      "description_length": 291,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_deriving_migrate",
      "description": "Processes OCaml ASTs to generate pretty-printed representations, extract and manipulate type information, and apply migration rules. It handles type declarations, expressions, and patterns, supporting operations like pretty-printing, type substitution, and dispatch table generation. Examples include formatting type structures, rewriting type patterns, and generating code for type-based dispatch. Used in ppx rewriters to manage type arguments, module expansions, and recursive type transformations.",
      "description_length": 501,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 501,
    "min_description_length": 291,
    "avg_description_length": 392.8,
    "embedding_file_size_mb": 0.018589019775390625
  }
}