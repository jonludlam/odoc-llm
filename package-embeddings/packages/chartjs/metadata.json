{
  "package": "chartjs",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 32,
  "creation_timestamp": "2025-07-15T23:13:45.583151",
  "modules": [
    {
      "module_path": "Chartjs.Line_height",
      "library": "chartjs",
      "description": "This module defines a type `t` for representing line height values in Chart.js configurations. It provides conversions from strings and floats to the line height type, along with safe casts back to optional string or float values. This supports precise control over text rendering in chart elements like labels and annotations.",
      "description_length": 327,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Time_unit",
      "library": "chartjs",
      "description": "This module defines JavaScript bindings for time unit values used in date-based charting operations. It provides direct access to common time units like milliseconds, seconds, days, and months, each represented as a typed value compatible with Chart.js. These values are used to configure time scales and specify granularity when visualizing temporal data in charts.",
      "description_length": 366,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Line_join",
      "library": "chartjs",
      "description": "This module defines line join styles for canvas rendering, providing constants for common join types. It supports conversion from string identifiers to typed values. Use it to specify how lines are connected in chart visualizations.",
      "description_length": 232,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Padding",
      "library": "chartjs",
      "description": "This module handles padding configurations for chart elements by converting between integer values and JavaScript objects with top, right, bottom, and left fields. It provides functions to construct, deconstruct, and cast padding values, ensuring compatibility with Chart.js's expected input formats. Use this module to define consistent spacing around charts or within elements like axes and legends.",
      "description_length": 401,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Hover_axis",
      "library": "chartjs",
      "description": "This module defines hover axis configurations for chart interactions, providing predefined values for x, y, and xy axis behaviors. It works with string-labeled axis types that correspond to JavaScript Chart.js axis identifiers. Use these values to specify which axes trigger tooltips or hover interactions in chart visualizations.",
      "description_length": 330,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Tooltip_position",
      "library": "chartjs",
      "description": "This module defines positioning strategies for tooltips in a charting library. It supports two specific placement modes: `average`, which centers the tooltip across all relevant data points, and `nearest`, which aligns it with the closest data point to the cursor. These strategies are used to dynamically adjust tooltip display based on user interaction with chart elements.",
      "description_length": 375,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Axis",
      "library": "chartjs",
      "description": "Defines axis configurations for Chart.js charts, supporting cartesian axes with categorical, linear, logarithmic, and time scales. It works with axis type descriptors to specify how data maps to chart axes. Use to configure X or Y axes in a Chart.js visualization directly from OCaml.",
      "description_length": 284,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Interpolation_mode",
      "library": "chartjs",
      "description": "This module defines constants and conversions for interpolation modes used in chart rendering. It provides the default and monotone interpolation algorithms, which determine how data points are connected in a chart. The `of_string` function allows parsing string values into valid interpolation mode types.",
      "description_length": 306,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Point_style",
      "library": "chartjs",
      "description": "This module defines point style identifiers for chart elements, including geometric shapes like circle, triangle, and rectangle variants. It supports creating point styles from strings or HTML media elements such as images, videos, and canvases. These values are used to configure data point appearance in chart visualizations.",
      "description_length": 327,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Color",
      "library": "chartjs",
      "description": "This module defines a type `t` for representing colors in Chart.js, supporting conversion from strings, canvas gradients, and canvas patterns into color values. It provides functions to construct color values from these sources and functions to safely cast color values back into their original forms. Concrete use cases include specifying chart element colors using CSS strings, gradients, or patterns when configuring Chart.js visualizations.",
      "description_length": 444,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Scriptable_indexable",
      "library": "chartjs",
      "description": "This module handles values that can be either a single value, an array, or a function returning a value. It provides conversions between OCaml and JavaScript representations for these types, supporting direct values, arrays, and callable functions. It is used to configure chart elements where data may vary per item or be dynamically computed.",
      "description_length": 344,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Interaction_mode",
      "library": "chartjs",
      "description": "This module defines interaction modes for selecting data points in a chart based on user input coordinates. It includes functions like `point`, `nearest`, `index`, `dataset`, `x`, and `y`, which determine how items are selected relative to the cursor position. These operations are used to implement features like tooltips, hover effects, and crosshair cursors in charting interfaces.",
      "description_length": 384,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Or_false",
      "library": "chartjs",
      "description": "This module defines a type that represents a value which can either be a valid value of type `'a` or the JavaScript boolean `false`. It provides functions to construct such values, enabling precise handling of optional or falsy values in JavaScript interop scenarios. This is particularly useful when working with Chart.js APIs that accept `false` as a valid configuration option to disable features.",
      "description_length": 400,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Stepped_line",
      "library": "chartjs",
      "description": "This module defines step interpolation modes for line charts, providing constants like `_false`, `_true`, `before`, `after`, and `middle` to control how data points are connected. It works with the `t` type, which represents step behavior as either boolean or string values compatible with JavaScript. Use this module to configure stepped line appearance in Chart.js visualizations, such as setting steps between points or aligning steps before, after, or in the middle of data points.",
      "description_length": 485,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Easing",
      "library": "chartjs",
      "description": "This module offers mathematical functions to control animation pacing in visualizations, implementing transitions like linear, polynomial, and sinusoidal curves alongside elastic, bounce, and back effects with directional variants. It operates on time-normalized inputs to produce eased outputs, supporting both direct function application and string-based lookup for dynamic configuration. Typical applications include customizing chart animation behavior in user interfaces where timing curves affect perceived smoothness and responsiveness.",
      "description_length": 543,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Line_cap",
      "library": "chartjs",
      "description": "This module defines line cap styles for canvas rendering, providing constants for common styles: `butt`, `round`, and `square`. It supports converting string values to the corresponding line cap type. Use this module to specify how the ends of lines are drawn in graphical visualizations.",
      "description_length": 288,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Indexable",
      "library": "chartjs",
      "description": "This module provides functions to convert between OCaml values and JavaScript indexable types, handling single values, arrays, and lists. It supports data structures like OCaml lists, arrays, and JavaScript arrays, enabling seamless interoperation with JavaScript. Concrete use cases include passing data to JavaScript charting libraries that expect indexable types like arrays or array-like objects.",
      "description_length": 400,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Time_parser",
      "library": "chartjs",
      "description": "This module defines date parsing strategies for time-series data visualization by creating customizable date parsing configurations compatible with Moment.js. It supports two primary operations: parsing dates from strings using a specified format and parsing via a user-defined function that returns a Moment.js object. These capabilities enable precise control over how temporal data is interpreted and displayed in charting contexts.",
      "description_length": 435,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Time_bounds",
      "library": "chartjs",
      "description": "This module defines time bounds for chart axes using string representations. It provides two predefined bounds, `data` and `ticks`, which control visibility of data and tick marks, and a function `of_string` to create custom bounds. Use cases include setting axis display ranges in time-based charts to ensure specific data or ticks are fully visible.",
      "description_length": 351,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Time_ticks_source",
      "library": "chartjs",
      "description": "This module defines time tick sources for configuring time-based axes in Chart.js. It provides constants and a conversion function to specify whether ticks should be derived automatically, from data, or from labels. The type `t` represents JavaScript string values used to control axis tick generation in time-series charts.",
      "description_length": 324,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Pie_border_align",
      "library": "chartjs",
      "description": "This module defines alignment options for pie chart borders in Chart.js. It provides two values, `center` and `inner`, which control how arc borders are positioned relative to each other. These values are used to configure the visual appearance of pie chart segments, affecting whether adjacent borders overlap or remain distinct.",
      "description_length": 330,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Time_distribution",
      "library": "chartjs",
      "description": "This module defines time distribution strategies for chart data points, controlling how they are spaced along the time axis. It supports two primary distributions: linear, where points are spaced according to their actual time intervals, and series, where points are evenly spaced regardless of time differences. Use cases include configuring time-based visualizations where precise control over data point spacing is required, such as financial charts or time-series analytics.",
      "description_length": 478,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chartjs.Scriptable",
      "library": "chartjs",
      "description": "This module converts OCaml functions into JavaScript-compatible scriptable objects for use in Chart.js configurations. It specifically works with functions that map OCaml values to other OCaml values, wrapping them in a JavaScript object that Chart.js can execute. A typical use case is passing dynamic data callbacks to Chart.js options or datasets, such as generating tooltips or customizing axis labels at runtime.",
      "description_length": 417,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Axis_display",
      "library": "chartjs",
      "description": "This module defines and manipulates axis display settings for Chart.js in OCaml. It supports converting between OCaml values and JavaScript representations for axis display options, including boolean and string-based configurations. Use cases include setting whether an axis is visible, automatically displayed, or controlled via string values in Chart.js visualizations.",
      "description_length": 371,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Bar_thickness",
      "library": "chartjs",
      "description": "This module defines and manipulates bar thickness values used in Chart.js configurations. It supports creating thickness values from integers or floats, checking if a value is flexible, and casting thickness values to JavaScript numbers. It is used to configure the thickness of bars in bar charts, enabling precise control over visual appearance.",
      "description_length": 347,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chartjs.Chart",
      "library": "chartjs",
      "description": "This module defines specific chart types such as line, bar, horizontal bar, pie, and doughnut charts, along with a function to parse chart types from strings. It works with chart configuration data types like `lineChart`, `barChart`, and `pieChart`. Use this module to create and manipulate different visual chart representations based on structured data inputs.",
      "description_length": 362,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.CoerceTo",
      "library": "chartjs",
      "description": "This module provides type coercion functions for converting generic chart and axis objects into specific typed variants like line, bar, pie, and doughnut charts, as well as category, linear, logarithmic, and time axes. It works with JavaScript objects representing charts and axes from the Chart.js library, wrapped in OCaml types. Concrete use cases include safely casting a generic chart instance to a specific chart type to access type-specific methods or properties, and ensuring correct axis handling in typed chart configurations.",
      "description_length": 536,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Chartjs.Line_fill",
      "library": "chartjs",
      "description": "This module defines fill options for line charts using the Chart.js library. It provides constants and functions to specify fill behavior, such as `relative`, `absolute`, `start`, `_end`, and `origin`, which correspond to Chart.js fill modes. These values are used to control how areas under lines are filled in chart configurations.",
      "description_length": 333,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Position",
      "library": "chartjs",
      "description": "This module defines positional values for chart elements using a type `t` that corresponds to JavaScript string literals. It provides predefined positions\u2014`left`, `right`, `top`, and `bottom`\u2014and converts string values into typed positional values. Use this module to specify axis or legend placement in Chart.js configurations directly from OCaml.",
      "description_length": 348,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Fill",
      "library": "chartjs",
      "description": "This module defines and manipulates fill styles for chart areas using a type `t` that represents possible fill values. It provides constants like `zero`, `top`, `bottom`, and boolean and string conversions to configure how chart datasets are filled. Use this module to specify fill options in chart configurations, such as filling to the top of the chart or toggling fills on and off with boolean values.",
      "description_length": 404,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs.Time",
      "library": "chartjs",
      "description": "This module handles time values for charting libraries by converting various time representations\u2014such as floats, integers, strings, arrays, and JavaScript Date objects\u2014into a specialized time type. It supports direct construction from common data formats and provides safe casting back to those types. Use this module to prepare and manipulate time data for time-series visualizations in Chart.js bindings.",
      "description_length": 407,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Chartjs",
      "library": "chartjs",
      "description": "This module enables type-safe configuration of interactive, animated charts with support for time-series data, dynamic datasets, and customizable visual elements. It provides core types for colors, line styles, padding, and interpolation, along with operations to define axes, tooltips, and data point rendering. Child modules refine this functionality with precise controls like time units, step modes, and hover behaviors, allowing configurations such as time-based axes with custom tick sources, tooltips positioned using average or nearest strategies, and line charts with styled joins and caps. You can build responsive bar charts with flexible thickness, pie charts with inner or center-aligned borders, and time-distributed series with linear or series spacing, all while leveraging scriptable callbacks and easing functions for dynamic, smooth visual transitions.",
      "description_length": 871,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 102,
    "meaningful_modules": 32,
    "filtered_empty_modules": 70,
    "retention_rate": 0.3137254901960784
  },
  "statistics": {
    "max_description_length": 871,
    "min_description_length": 232,
    "avg_description_length": 392.1875,
    "embedding_file_size_mb": 0.11664485931396484
  }
}