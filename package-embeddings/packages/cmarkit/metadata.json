{
  "package": "cmarkit",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 40,
  "creation_timestamp": "2025-08-15T12:32:25.415891",
  "modules": [
    {
      "module_path": "Cmarkit.Block.Block_quote",
      "library": "cmarkit",
      "description": "This module represents block quotes in the abstract syntax tree, providing constructors and accessors for quoted blocks. It works with block elements and layout indentation values to model the structure and formatting of block quotes. Use it to create and manipulate block quote nodes during AST traversal or transformation, such as when processing quoted content in parsed Markdown documents.",
      "description_length": 393,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Blank_line",
      "library": "cmarkit",
      "description": "This module represents blank lines in the document structure, consisting solely of whitespace characters. It provides functions to create, validate, and manipulate blank line blocks within the AST. Useful when parsing or generating CommonMark documents to handle spacing and block separation accurately.",
      "description_length": 303,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Label.Map",
      "library": "cmarkit",
      "description": "This module provides dictionary operations for maps with keys of type `Cmarkit.Label.key`, enabling insertion, deletion, and lookup of label-data associations, alongside ordered map manipulations like filtering, folding, and key-based searches. It supports use cases such as resolving reference links, footnotes, and custom label interpretations in CommonMark documents by maintaining key order and enabling efficient traversal. Utilities for converting between maps and sequences streamline bulk operations, such as constructing label mappings from key-value pairs during document parsing.",
      "description_length": 590,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Block.Code_block",
      "library": "cmarkit",
      "description": "Handles creation and manipulation of CommonMark code blocks, supporting both indented and fenced layouts with optional info strings. Works with block lines, layout configurations, and string nodes for metadata. Useful for parsing or generating code blocks with specific formatting, extracting programming languages from info strings, or constructing fences programmatically.",
      "description_length": 374,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Raw_html",
      "library": "cmarkit",
      "description": "This module represents raw HTML inline elements parsed from CommonMark input. It stores the HTML content as a list of tight block lines, preserving the exact syntax encountered during parsing. Use this module to handle inline HTML fragments, such as embedded `<span>` tags or inline scripts, within CommonMark documents.",
      "description_length": 320,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Autolink",
      "library": "cmarkit",
      "description": "This module represents autolinks in the abstract syntax tree, specifically handling absolute URIs and email addresses. It provides functions to construct autolink nodes, check if a link is an email, and retrieve the link target. Use this module when processing or generating inline autolinks during AST manipulation or custom node rendering.",
      "description_length": 341,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Text",
      "library": "cmarkit",
      "description": "This module represents text content within inline elements of a CommonMark document. It provides functions to create, manipulate, and access plain string values that hold unescaped and resolved character data. Use this module when handling raw textual content embedded in inline nodes like emphasis, links, or code spans.",
      "description_length": 321,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Paragraph",
      "library": "cmarkit",
      "description": "This module constructs and manipulates paragraph blocks containing inline content, with configurable leading indentation and trailing whitespace. It provides functions to create paragraphs, extract inline elements, and access layout details like indentation and trailing blanks. Useful for handling CommonMark paragraphs with precise formatting control, such as parsing indented text or preserving spacing in document conversions.",
      "description_length": 430,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Block.Thematic_break",
      "library": "cmarkit",
      "description": "This module represents thematic break blocks in CommonMark documents. It provides functions to create and inspect thematic breaks, including their indentation and layout. Use it to construct or analyze horizontal rules in parsed Markdown content.",
      "description_length": 246,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Math_span",
      "library": "cmarkit",
      "description": "This module represents inline or display math spans containing TeX code. It provides functions to create math spans with layout-preserving TeX content, check if a span is in display mode, and access the TeX code or its structured layout. It works with `Cmarkit.Block_line.tight list` to preserve formatting while handling mathematical expressions in documents.",
      "description_length": 360,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Code_span",
      "library": "cmarkit",
      "description": "This module constructs and manipulates code spans in CommonMark documents. It handles the delimiters and layout required to represent inline code, preserving spacing and backtick escaping. Use it to generate properly formatted inline code elements from strings or custom layouts.",
      "description_length": 279,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Inline.Break",
      "library": "cmarkit",
      "description": "This module represents hard and soft line breaks in CommonMark inline elements. It provides functions to create breaks with optional layout information and to access the layout before and after the break. It is used to model line breaks in the abstract syntax tree, preserving whitespace and formatting details for accurate rendering or transformation.",
      "description_length": 352,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Inline.Strikethrough",
      "library": "cmarkit",
      "description": "This module represents inline text with a strikethrough formatting in a CommonMark document. It wraps an existing inline node to apply strikethrough formatting and provides access to the underlying inline content. Use this module to construct or deconstruct strikethrough elements, such as when parsing or rendering text with deletion marks.",
      "description_length": 341,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Inline.Emphasis",
      "library": "cmarkit",
      "description": "This module represents emphasis and strong emphasis inline elements in a parsed CommonMark document. It provides constructors and accessors for working with emphasized inlines, including the delimiter used (`*` or `_`) and the wrapped inline content. Use this module to inspect or construct emphasized text such as italics or bold in inline CommonMark nodes.",
      "description_length": 358,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.List'",
      "library": "cmarkit",
      "description": "This module represents structured lists in a CommonMark document, supporting both ordered and unordered list types. It provides operations to construct lists with specified markers and tightness, and to access their items and formatting details. Use this module when parsing or generating CommonMark lists, such as rendering bullet points or numbered lists with custom markers.",
      "description_length": 377,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Footnote",
      "library": "cmarkit",
      "description": "This module represents footnote definitions in a parsed CommonMark document. It provides operations to create and inspect footnotes, including accessing their label, defined label, indentation, and content block. Concrete use cases include processing footnote content during document rendering or analysis and resolving footnote references to their definitions.",
      "description_length": 361,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Block.Heading",
      "library": "cmarkit",
      "description": "This module constructs and manipulates heading blocks in a CommonMark document. It supports creating headings with specified levels, inline content, and optional identifiers, using either ATX (`#`) or setext (underline) syntax. Functions allow inspecting the heading's layout, level, inline content, and identifier.",
      "description_length": 315,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Table",
      "library": "cmarkit",
      "description": "This module constructs and manipulates CommonMark table blocks with precise layout control. It supports creating tables from rows of inline content, handling header, separator, and data rows with alignment and spacing metadata. Use it to generate formatted tables programmatically or process existing tables during AST transformations.",
      "description_length": 335,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.List_item",
      "library": "cmarkit",
      "description": "This module constructs and manipulates list items in a CommonMark document, handling indentation, markers, and optional task markers. It operates on blocks and represents list items with customizable layout properties. Use it to build or inspect list items, including task list items with checked/unchecked states.",
      "description_length": 314,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_renderer.Context.State",
      "library": "cmarkit",
      "description": "This module manages typed state values within a rendering context, enabling storage and retrieval of arbitrary data during document rendering. It provides operations to create state keys, set and get state values, and look up state by key in a context. Use this to track rendering-specific data like counters, formatting flags, or output buffers across different rendering stages.",
      "description_length": 380,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Inline.Link",
      "library": "cmarkit",
      "description": "This module constructs and manipulates link inline nodes in a CommonMark abstract syntax tree. It supports creating links with inline or reference styles, extracting link text and reference details, and checking URLs for common safety restrictions. Use cases include processing markdown links for rendering or analysis, resolving reference links against definitions, and filtering unsafe URLs in user-generated content.",
      "description_length": 419,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Html_block",
      "library": "cmarkit",
      "description": "Processes HTML block elements in CommonMark documents by parsing and representing sequences of block-level HTML lines. It handles structured HTML content that spans multiple lines, preserving tag integrity and nesting. Useful for rendering or analyzing raw HTML embedded within markdown documents.",
      "description_length": 297,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Label",
      "library": "cmarkit",
      "description": "This module implements label handling for reference links and footnotes in CommonMark documents. It provides operations to create and manipulate labels with keys and associated block text, including metadata attachment, key-based comparison, and text normalization. Concrete use cases include resolving link references during parsing and managing footnote definitions through key-value mappings.",
      "description_length": 395,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Link_definition",
      "library": "cmarkit",
      "description": "This module manages link definitions in a CommonMark document, handling both inline links and reference-style links. It provides operations to create and inspect link definitions, including their layout, destination, title, and associated labels. Concrete use cases include parsing and rendering link references with specific formatting, such as tracking indentation and delimiter placement around destinations and titles.",
      "description_length": 422,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline",
      "library": "cmarkit",
      "description": "This module defines types and operations for manipulating inline elements in a CommonMark abstract syntax tree, including text, emphasis, links, code spans, and line breaks. It supports concrete tasks like parsing and generating formatted text, handling autolinks and raw HTML inline fragments, and preserving layout during transformations. Each variant corresponds to a specific inline node type, enabling precise inspection, construction, and normalization of inline content during document processing or rendering.",
      "description_length": 517,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block",
      "library": "cmarkit",
      "description": "This module defines block-level elements in a CommonMark document, including blank lines, block quotes, code blocks, headings, HTML blocks, list items, paragraphs, and thematic breaks. It provides constructors, accessors, and layout controls for each block type, enabling precise manipulation of document structure during parsing or transformation. Concrete use cases include building custom AST transformations, extracting structured content from Markdown documents, and generating formatted output with controlled indentation and spacing.",
      "description_length": 540,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit_commonmark.Char_set",
      "library": "cmarkit",
      "description": "This module implements standard set operations for US-ASCII characters, including union, intersection, and difference, along with element insertion, removal, and membership checks. It works with sets of ASCII characters represented by the `Char_set.t` type, supporting ordered traversal and transformations like mapping or filtering. These capabilities are used in processing character sets for layout preservation during CommonMark rendering, such as handling whitespace normalization or tracking special characters that influence document structure fidelity.",
      "description_length": 560,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block_line",
      "library": "cmarkit",
      "description": "This module processes block lines in a CommonMark parser, handling operations like splitting strings into block lines, managing blank lines, and tracking text locations across line lists. It works with types like `t` for block lines, `tight` for lines with preceding blanks, and `blank` for blank lines, all incorporating text location metadata. Concrete uses include parsing indented code blocks and block quotes by stripping structural markers and preserving layout information.",
      "description_length": 480,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Layout",
      "library": "cmarkit",
      "description": "This module defines types and functions for representing layout information such as whitespace, indentation, and string metadata during parsing and rendering of CommonMark documents. It includes types like `blanks`, `indent`, and `count`, and functions to construct layout-aware nodes with optional metadata. Concrete use cases include preserving source formatting when roundtripping Markdown documents through the AST.",
      "description_length": 419,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Folder",
      "library": "cmarkit",
      "description": "This module provides functions to create and apply AST folders that traverse CommonMark documents, blocks, or inline elements while accumulating values. It supports customizable folding over `Cmarkit.Inline.t`, `Cmarkit.Block.t`, and `Cmarkit.Doc.t` types, with defaults for unhandled cases. A concrete use case is extracting metadata, such as code block languages, during a traversal without manually writing recursive fold logic.",
      "description_length": 431,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Mapper",
      "library": "cmarkit",
      "description": "This module provides functions to transform abstract syntax trees by defining mappers that selectively modify nodes while propagating changes through children. It works with `Cmarkit.Inline.t`, `Cmarkit.Block.t`, and `Cmarkit.Doc.t` structures, allowing deletion, replacement, or transformation of nodes during traversal. Concrete use cases include normalizing code blocks, filtering specific inline elements, or rewriting document structure based on node properties.",
      "description_length": 467,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Textloc",
      "library": "cmarkit",
      "description": "This module provides functionality for representing and manipulating text spans in UTF-8 files through byte positions, line/column markers, and normalized ranges. It supports operations like span boundary adjustments, validity checks, equality comparisons, and output formatting in conventions such as OCaml or GNU. These capabilities are particularly useful for parser error reporting, source code analysis, and generating diagnostics tied to precise file locations.",
      "description_length": 467,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Doc",
      "library": "cmarkit",
      "description": "This module represents parsed CommonMark documents, providing access to their structure and parsing metadata. It supports constructing and inspecting documents through operations like extracting blocks, newline characters, and label definitions, as well as parsing from strings with configurable options. Concrete use cases include processing Markdown content into structured blocks, resolving link references, and extracting document-wide metadata like heading IDs.",
      "description_length": 466,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Meta",
      "library": "cmarkit",
      "description": "This module manages metadata associated with abstract syntax tree nodes, including text locations and client-defined key-value pairs. It supports creating and modifying metadata with operations like `make`, `with_textloc`, `add`, `find`, and `remove`, while ensuring unique identifiers for tracking node identity. Concrete use cases include attaching source code positions to AST nodes and storing custom annotations during parsing or analysis.",
      "description_length": 444,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit_renderer.Context",
      "library": "cmarkit",
      "description": "This module provides functions to create and manage rendering contexts that direct output to in-memory buffers. It supports operations for rendering individual characters, strings, inline elements, blocks, and entire documents, while exposing access to the underlying renderer, buffer, and document state. It is used to build custom rendering pipelines that accumulate output in a buffer, enabling specialized formatting or transformations during document processing.",
      "description_length": 467,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit",
      "library": "cmarkit",
      "description": "This module implements a CommonMark parser and abstract syntax tree with rich support for text location tracking, metadata attachment, and layout preservation. It provides precise manipulation of block and inline elements like code blocks, links, emphasis, and lists, along with utilities for handling labels, link definitions, and custom extensions such as math and strikethrough. Concrete use cases include parsing Markdown into structured AST nodes, transforming documents with custom logic using mappers and folders, and roundtripping content while preserving formatting and source positions.",
      "description_length": 596,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit_html",
      "library": "cmarkit",
      "description": "This module converts CommonMark documents into HTML or XHTML fragments, handling elements like code blocks, headings, and math expressions. It operates on `Cmarkit.Doc.t` documents and supports customization through rendering options such as `safe` and `backend_blocks`. Use it to generate HTML for web display, integrate with syntax highlighters like highlight.js, or render mathematical content using KaTeX or MathJax.",
      "description_length": 420,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit_commonmark",
      "library": "cmarkit",
      "description": "This module renders CommonMark documents from an abstract syntax tree, preserving source layout when enabled. It provides functions for newline management, indentation control, and backslash escaping tailored to CommonMark syntax rules. Use cases include generating readable CommonMark output from parsed documents and customizing rendering behavior for extensions or specific formatting needs.",
      "description_length": 394,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_latex",
      "library": "cmarkit",
      "description": "This module converts CommonMark documents to LaTeX markup, handling headings, links, images, lists, and code blocks with customizable rendering. It operates on `Cmarkit.Doc.t` documents and supports extensions like autolinks, section labels, and language-specific code blocks. Concrete use cases include generating LaTeX reports from markdown files or embedding markdown content into LaTeX documents using `of_doc`, while advanced users can extend the renderer for custom formatting or escape handling.",
      "description_length": 502,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_renderer",
      "library": "cmarkit",
      "description": "This module implements customizable document rendering pipelines that output to in-memory buffers. It provides functions to render documents using pluggable block, inline, and document-level handlers, with support for fallback composition between renderers. Concrete use cases include extending HTML rendering to support custom media tags or modifying LaTeX output for specialized document structures.",
      "description_length": 401,
      "index": 39,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 40,
    "meaningful_modules": 40,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 596,
    "min_description_length": 246,
    "avg_description_length": 404.85,
    "embedding_file_size_mb": 0.5799112319946289
  }
}