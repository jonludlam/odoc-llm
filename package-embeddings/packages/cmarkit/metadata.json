{
  "package": "cmarkit",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 41,
  "creation_timestamp": "2025-06-18T16:40:34.424856",
  "modules": [
    {
      "module_path": "Cmarkit_renderer.Context.State",
      "description": "Provides operations to create, retrieve, and update context-specific state values. Works with context objects and typed state tokens to store and access arbitrary data. Used to manage per-context configuration or runtime values in a structured, type-safe manner.",
      "description_length": 262,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Label.Map",
      "description": "This module offers operations for constructing, modifying, and querying key-value maps with labeled keys, supporting additions, deletions, updates, merges, and ordered traversals. It works with generic key-value pairs and sequences, enabling tasks like dynamic data management, efficient lookups, and structured processing of ordered bindings. Specific use cases include building maps from iterative data sources, filtering or transforming mappings, and extracting minimum/maximum elements for priority-based workflows.",
      "description_length": 519,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Blank_line",
      "description": "Handles operations on blank line sequences within text layouts. Provides functions to create, merge, and split blank line structures. Used to manage vertical spacing in formatted output, such as adjusting line breaks between sections of a document.",
      "description_length": 248,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Block_quote",
      "description": "Creates a block quote structure with customizable indentation, allowing retrieval of the indentation level and the contained block. Operates on a `block` type representing the quoted content and an `t` type encapsulating the block quote. Used to generate formatted block quotes in text output with precise control over spacing and structure.",
      "description_length": 341,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Code_block",
      "description": "Provides functions to create and inspect code blocks with specific layouts and info strings. Works with block lines, layout configurations, and string nodes to represent structured code content. Used to generate fenced code blocks with language identifiers and to extract formatting details for rendering.",
      "description_length": 305,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Heading",
      "description": "Creates headings with specified levels, layouts, and inline content, supporting Atx and Setext formats. Operates on inline text elements and unique identifiers, allowing retrieval of layout, level, content, and ID. Used to generate structured document headings with controlled formatting and optional automatic ID assignment.",
      "description_length": 325,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Block.Html_block",
      "description": "Processes and renders HTML block elements by managing a list of block lines. It handles structured content such as paragraphs, headers, and lists, enabling precise control over HTML output. Used to generate valid HTML from a sequence of line-based elements in a document parser.",
      "description_length": 278,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.List_item",
      "description": "Provides functions to construct and inspect list items with customizable indentation and markers. Works with block structures, layout indents, and Unicode characters for task markers. Used to represent and process list items in markdown-like formats, including task status detection.",
      "description_length": 283,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Block.List'",
      "description": "Creates and manipulates lists with specific type and tightness attributes. Operates on lists of `List_item.t node` elements, allowing retrieval of type, tightness, and underlying items. Used to construct lists with controlled memory layout and access metadata for processing.",
      "description_length": 275,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Paragraph",
      "description": "Provides functions to create and inspect paragraphs with controlled indentation and trailing whitespace. Operates on inline content and layout parameters, returning a structured paragraph type. Used to format text blocks with precise line spacing and alignment settings.",
      "description_length": 270,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Thematic_break",
      "description": "Creates a thematic break with customizable indentation and layout string. Operates on a type representing the break's visual structure. Used to generate consistent section dividers in formatted text output.",
      "description_length": 206,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Block.Table",
      "description": "Provides functions to create and inspect tables with aligned columns, including setting indentation, determining column count, and accessing row data. Operates on row structures containing nodes and blank spaces, along with alignment and separator information. Used to generate formatted text tables with consistent spacing and alignment.",
      "description_length": 338,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Footnote",
      "description": "Provides functions to create and inspect footnotes, including setting indentation, retrieving the label and content, and determining the resolved label. Operates on `Label.t` and `block` types, where `block` represents the footnote content. Used to manage footnote labels and formatting in document rendering, ensuring correct association between source labels and their rendered content.",
      "description_length": 388,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Autolink",
      "description": "Creates and manipulates autolinks from CommonMark absolute URIs or email addresses. Provides checks to determine if an autolink is an email and extracts the underlying string value. Used to process and validate links in markdown parsing workflows.",
      "description_length": 247,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Break",
      "description": "Provides functions to create and inspect break nodes with specific formatting behavior, including layout before and after the break. Works with layout nodes representing text and whitespace. Used to control line breaks in formatted text output, such as inserting a newline with specific preceding or following spacing.",
      "description_length": 318,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Code_span",
      "description": "Creates code spans with precise backtick delimiters and preserves layout when converting to or from strings. Operates on lists of tight block lines and strings, handling backtick counting and spacing automatically. Used to generate valid code spans from raw strings or structured layout data, ensuring correct formatting for output.",
      "description_length": 332,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Emphasis",
      "description": "Creates emphasis nodes with specified delimiters, wrapping inline elements. Operates on inline elements and layout characters, using '*' or '_' as delimiters. Used to format text with italics or bold in markup generation.",
      "description_length": 221,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Link",
      "description": "Creates links connecting inline text to reference definitions, supporting both inline and referenced links. Operates on inline text, reference identifiers, and label definitions to manage link semantics. Used to generate valid CommonMark links and ensure reference definitions are properly resolved during rendering.",
      "description_length": 316,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Inline.Raw_html",
      "description": "Provides functions to construct and manipulate raw HTML content as a list of tight block lines. Operates on the `t` type, which represents a sequence of HTML elements in a structured format. Used to generate validated HTML output from parsed elements in a web rendering pipeline.",
      "description_length": 279,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Text",
      "description": "Provides functions for slicing, concatenating, and checking substrings within a string. Operates on the string type to perform efficient text manipulation. Used to extract specific portions of user input or parse structured text data.",
      "description_length": 234,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Strikethrough",
      "description": "Adds a strikethrough effect to inline text elements, returning a new inline object with the modification. Operates on inline text representations, preserving their structure while applying the visual change. Used to render text with a line through it in formatted output generators.",
      "description_length": 282,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Inline.Math_span",
      "description": "Creates and manipulates math spans with inline or display formatting. Operates on a list of tight block lines to represent TEX code and provides access to the display mode and raw TEX content. Used to generate structured math content for typesetting systems.",
      "description_length": 258,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit_commonmark.Char_set",
      "description": "The module provides set operations such as union, intersection, and difference, along with element addition, removal, and membership checks, specifically for US-ASCII characters. It handles ordered processing, returning sorted lists or options, and supports use cases like text validation, character frequency analysis, or symbolic computation where efficient set manipulation is critical. Operations include transformation, filtering, and iteration, enabling tasks such as parsing structured data or implementing lexical analyzers.",
      "description_length": 532,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_renderer.Context",
      "description": "manages context-specific state through typed tokens, enabling safe storage and retrieval of arbitrary data. It defines context objects and state tokens as core types, supporting creation, access, and modification of values. Users can store configuration parameters or runtime values per context, ensuring type safety and isolation. For example, a context might track a user ID or session data, with tokens providing controlled access.",
      "description_length": 434,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Textloc",
      "description": "The module handles operations for creating, querying, and modifying text locations through byte and line positions, along with file paths, supporting span computations and relocations. It includes formatting functions for output conventions and is applied in tasks like compiler error reporting and text analysis, where precise positional tracking of text ranges is required. Specific use cases involve managing text spans in files for tools requiring detailed positional data, such as linters or interactive editors.",
      "description_length": 517,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Meta",
      "description": "Provides operations to create, modify, and query metadata associated with nodes, including setting and retrieving text locations, managing unique identifiers, and handling custom key-value pairs. Works with text locations, integer identifiers, and typed keys to store and access client-defined data. Used to track source positions in parsed code and annotate nodes with additional information during processing.",
      "description_length": 411,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Layout",
      "description": "Provides functions to create and manipulate layout information using strings, characters, and counts. Works with types like blanks, string, char, count, and indent to represent and preserve source formatting. Used to maintain whitespace and structure in document processing where the AST does not capture layout details.",
      "description_length": 320,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block_line",
      "description": "Extracts and manipulates text lines from block structures, preserving associated metadata. Processes strings by splitting on newlines and constructing line-based nodes with text locations. Handles both standard lines and lines with preceding blank spaces, supporting precise text location tracking.",
      "description_length": 298,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Label",
      "description": "provides a set of operations for managing labeled key-value mappings, including insertion, deletion, update, and ordered traversal. it supports generic key types and sequences, enabling dynamic data structuring and efficient lookup. users can build maps from iterative sources, transform existing mappings, and extract extremal elements for priority-based processing. examples include creating footnotes from input streams, organizing reference links by label, and maintaining ordered dictionaries for structured output.",
      "description_length": 520,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Link_definition",
      "description": "Computes layout settings based on destination strings and constructs link definitions with optional labels, destinations, and titles. Operates on custom types including `layout`, `Label.t`, and `string node` to represent link properties. Used to generate structured link references with specific formatting and label resolution rules.",
      "description_length": 334,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Inline",
      "description": "creates and manages various inline text elements, including autolinks, breaks, code spans, emphasis, links, raw HTML, string operations, strikethroughs, and math spans. it handles operations like extracting values, preserving layout, applying formatting, and generating structured content from raw data. it supports tasks such as validating email links, inserting controlled line breaks, generating code formatting, and rendering mathematical expressions. key data types include inline elements, strings, and structured HTML or TEX sequences.",
      "description_length": 542,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block",
      "description": "Manages structured text elements including block quotes, code blocks, headings, lists, paragraphs, thematic breaks, and tables, with precise control over indentation, layout, and formatting. Key types include `block`, `t`, `List_item.t`, and `Label.t`, supporting operations like creating, merging, splitting, and inspecting elements. Functions enable generating formatted document sections, extracting metadata, and rendering HTML or text with consistent spacing and structure. Examples include creating block quotes with custom indentation, generating code blocks with language info, and constructing tables with aligned columns.",
      "description_length": 631,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Doc",
      "description": "Provides operations to extract newline characters, block content, and label definitions from a document. Works with block structures, label definitions, and layout strings. Used to create documents from Markdown strings with customizable newline handling, label resolution, and metadata tracking.",
      "description_length": 296,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Mapper",
      "description": "Provides functions to transform abstract syntax trees by mapping nodes to new values, deleting nodes, or expanding them into multiple nodes. Works with inline and block elements, documents, and their extensions, using a depth-first, document-centric approach. Enables custom handling of specific node types while defaulting others, supporting operations like inline expansion, block deletion, and document restructuring.",
      "description_length": 420,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Folder",
      "description": "Provides functions to fold abstract syntax trees, handling inline and block elements with customizable behavior. Works with `Inline.t`, `Block.t`, and `Doc.t` types, allowing depth-first traversal and defaulting unhandled nodes. Enables efficient tree processing by propagating folds to children or using provided handlers for specific elements.",
      "description_length": 345,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "cmarkit",
      "description": "Parses UTF-8 encoded CommonMark documents, supporting custom link label resolution and non-strict parsing for extended syntax like strikethrough and tables. Operates on an abstract syntax tree that tracks source locations and preserves layout during transformations. Enables rendering to HTML, LaTeX, and CommonMark while maintaining original formatting.",
      "description_length": 354,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_latex",
      "description": "Generates LaTeX fragments from CommonMark documents and provides utilities for escaping Unicode characters and strings in LaTeX contexts. It works with CommonMark document structures, UTF-8 encoded characters, and buffer objects. It is used to produce LaTeX output from structured text, ensuring special characters are properly escaped and handling code blocks with specific formatting rules.",
      "description_length": 392,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_commonmark",
      "description": "Handles set operations on US-ASCII characters, including union, intersection, and difference, with support for ordered processing and efficient membership checks. Provides functions for transforming, filtering, and iterating over character sets, enabling tasks like text validation and lexical analysis. Operations maintain sorted results or options, ensuring predictable behavior in structured data parsing. Examples include analyzing character frequency in a document or validating input against a defined set of allowed characters.",
      "description_length": 534,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit_renderer",
      "description": "manages context-specific state through typed tokens, enabling safe storage and retrieval of arbitrary data. It defines context objects and state tokens as core types, supporting creation, access, and modification of values. Users can store configuration parameters or runtime values per context, ensuring type safety and isolation. For example, a context might track a user ID or session data, with tokens providing controlled access.",
      "description_length": 434,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit",
      "description": "Handles text positioning, metadata, layout, and content manipulation for CommonMark documents. Provides types for locations, metadata maps, layout strings, lines, and inline/block elements, with operations to create, modify, and traverse these structures. Supports tasks like tracking source positions, preserving whitespace, generating links, and transforming ASTs. Examples include creating block quotes with custom formatting, extracting footnotes, and rendering mathematical expressions.",
      "description_length": 491,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_html",
      "description": "Generates HTML fragments from CommonMark documents using a configurable renderer that handles inline and block elements, with options to sanitize output by replacing unsafe content with comments. It supports escaping Unicode characters and strings into HTML entities, and percent-encoding strings for URI compatibility while preserving certain reserved characters. The module allows fine-grained control over code block rendering and ensures XML validity when required.",
      "description_length": 469,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 41,
    "meaningful_modules": 41,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 631,
    "min_description_length": 206,
    "avg_description_length": 360.9512195121951,
    "embedding_file_size_mb": 0.14940166473388672
  }
}