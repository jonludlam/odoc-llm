{
  "package": "cmarkit",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 40,
  "creation_timestamp": "2025-07-15T23:13:12.823296",
  "modules": [
    {
      "module_path": "Cmarkit.Block.Heading",
      "library": "cmarkit",
      "description": "This module constructs and manipulates heading blocks in a CommonMark document. It supports creating headings with ATX (`# heading`) or Setext (`heading\\n===`) syntax, specifying indentation, spacing, and identifiers. Concrete use cases include generating properly formatted headings with custom levels, inline content, and optional IDs for document structure or linking purposes.",
      "description_length": 380,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Block_quote",
      "library": "cmarkit",
      "description": "This module represents block quotes in the abstract syntax tree, providing access to the quoted block and its indentation. It works with the `block` type to represent the content being quoted and `t` for the block quote structure. Use it to construct or deconstruct block quotes during AST traversal or manipulation, such as extracting quoted content or adjusting indentation in parsed CommonMark documents.",
      "description_length": 407,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Emphasis",
      "library": "cmarkit",
      "description": "This module represents emphasis and strong emphasis inlines in a parsed CommonMark document. It provides constructors and accessors for emphasis nodes, allowing the creation of emphasized text using either asterisks or underscores as delimiters. The module works with inline elements and stores the emphasized content along with the delimiter used.",
      "description_length": 348,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Code_block",
      "library": "cmarkit",
      "description": "This module constructs and manipulates code blocks in a CommonMark document, supporting both indented and fenced layouts. It handles code blocks with optional info strings, extracting language identifiers and managing fence characters and indentation. Use it to build or analyze code blocks during parsing or transformation of markdown content.",
      "description_length": 344,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_renderer.Context.State",
      "library": "cmarkit",
      "description": "Manages per-context state in a renderer using `Stdlib.Buffer.t` for document rendering. Provides operations to create, retrieve, and update typed state values within a rendering context. Useful for maintaining rendering-specific data like indentation levels or output buffers during document generation.",
      "description_length": 303,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Thematic_break",
      "library": "cmarkit",
      "description": "This module represents thematic break blocks in CommonMark documents. It provides functions to create and inspect thematic breaks, including their indentation and layout. Use it to construct or analyze horizontal rules in parsed markdown content.",
      "description_length": 246,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Inline.Strikethrough",
      "library": "cmarkit",
      "description": "This module represents inline text with a strikethrough annotation in a CommonMark document. It provides functions to wrap an inline element in a strikethrough container and to extract the contained inline element from a strikethrough. Use this module when processing or constructing strike-through formatted text in a parsed CommonMark AST.",
      "description_length": 341,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Label.Map",
      "library": "cmarkit",
      "description": "This module offers finite map operations for managing key-value associations with label keys, supporting insertion, deletion, merging, and ordered queries like range-based traversal or filtered transformations. It works with label keys and their associated values, leveraging their inherent ordering for efficient lookups, sequence conversions, and incremental updates. It is particularly useful in parsing contexts for tracking reference link definitions, footnote mappings, or resolving label-based dependencies during document processing.",
      "description_length": 541,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Text",
      "library": "cmarkit",
      "description": "Represents text content within inline elements, storing strings with resolved entities and character references. Provides functions to create, manipulate, and access raw text values directly. Useful for extracting or modifying plain text segments in parsed CommonMark documents, such as handling emphasis, links, or code spans.",
      "description_length": 327,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Table",
      "library": "cmarkit",
      "description": "This module represents and constructs CommonMark tables with aligned columns. It defines rows as headers, separators, or data cells, each with layout information for rendering. Concrete use cases include parsing and pretty-printing tables with specified column alignments and spacing.",
      "description_length": 284,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Blank_line",
      "library": "cmarkit",
      "description": "Represents blank lines in CommonMark documents as sequences of whitespace characters. Provides functions to parse and validate blank lines according to the CommonMark specification. Useful for handling paragraph separation and block-level structure during document parsing.",
      "description_length": 273,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Code_span",
      "library": "cmarkit",
      "description": "This module creates and manipulates code spans in CommonMark documents. It handles the delimiters and layout required to represent inline code, preserving spacing and backtick escaping. Use it to generate properly formatted inline code elements from strings or custom layouts.",
      "description_length": 276,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Block.List_item",
      "library": "cmarkit",
      "description": "This module represents list items in a parsed CommonMark document, providing constructors and accessors to manipulate their layout and content. It works with blocks, indentation, and optional task markers to model list items with precise formatting. Concrete use cases include building and inspecting bullet or numbered list items, handling task list extensions with checked/unchecked status, and preserving whitespace around markers during rendering or transformation.",
      "description_length": 469,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Autolink",
      "library": "cmarkit",
      "description": "This module represents autolink inline nodes in a CommonMark document, specifically handling links that are either absolute URIs or email addresses. It provides functions to construct autolink nodes, check if an autolink is an email, and retrieve the underlying link string. Use this module when processing or transforming inline autolinks in an abstract syntax tree, such as rendering them into HTML anchor tags or validating link formats.",
      "description_length": 440,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Break",
      "library": "cmarkit",
      "description": "This module represents hard and soft line breaks in CommonMark inline content. It provides functions to create and inspect break nodes, including layout information before and after the break. Useful for parsing and rendering line breaks with precise spacing and line wrapping behavior according to the CommonMark specification.",
      "description_length": 328,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Block.Html_block",
      "library": "cmarkit",
      "description": "This module represents HTML blocks in the CommonMark abstract syntax tree, consisting of a list of block lines. It provides functions to construct, manipulate, and render HTML blocks from parsed CommonMark documents. Use this module when working with raw HTML embedded in markdown content, such as including custom HTML elements or scripts in a document.",
      "description_length": 354,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Raw_html",
      "library": "cmarkit",
      "description": "This module represents raw HTML content within inline elements of a CommonMark document. It stores the HTML data as a list of tight block lines, preserving the exact syntax encountered during parsing. Use this module to access or manipulate inline HTML fragments, such as embedded `<span>` or `<img>` tags, found within CommonMark documents.",
      "description_length": 341,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.List'",
      "library": "cmarkit",
      "description": "This module represents structured CommonMark lists, supporting creation of ordered and unordered lists with customizable markers and tightness. It operates on list items and provides accessors to retrieve list tightness and item contents. Concrete use cases include constructing parsed list nodes from CommonMark input and analyzing list formatting per the specification.",
      "description_length": 371,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Math_span",
      "library": "cmarkit",
      "description": "Handles math spans in CommonMark inline nodes, providing constructors and accessors for TeX content with layout preservation. Works with `Cmarkit.Block_line.tight list` to represent structured TeX code and `t` for math span values. Used to create and manipulate inline or display math expressions, preserving formatting for accurate rendering.",
      "description_length": 343,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Paragraph",
      "library": "cmarkit",
      "description": "This module constructs and manipulates paragraph blocks containing inline content, with support for leading indentation and trailing whitespace. It provides functions to create paragraphs, extract inline elements, and access layout details like indentation and trailing blanks. Use this module to build or analyze CommonMark paragraphs with precise control over their formatting.",
      "description_length": 379,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block.Footnote",
      "library": "cmarkit",
      "description": "This module represents footnote definitions in a parsed CommonMark document. It provides operations to create and inspect footnotes, including accessing their label, defined label, indentation, and content block. Concrete use cases include processing footnote content during document rendering or analysis and resolving footnote references to their definitions.",
      "description_length": 361,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline.Link",
      "library": "cmarkit",
      "description": "This module represents links in CommonMark documents, handling both inline and reference-style links through structured types like `reference` and `reference_layout`. It provides operations to construct links, retrieve their text and reference components, and resolve link definitions from a collection of labels. Use cases include parsing and manipulating link nodes in a CommonMark AST, such as extracting link URLs or resolving reference links against defined labels.",
      "description_length": 470,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_commonmark.Char_set",
      "library": "cmarkit",
      "description": "This module supports efficient immutable set operations, iteration, and transformation over US-ASCII character collections, including union, intersection, filtering, and sequence-based construction. It works with abstract character sets represented as `t` values, optimized for physical equality preservation and ordered element traversal. Typical use cases include managing character groups for CommonMark syntax parsing, layout-preserving rendering rules, and performance-sensitive text processing tasks requiring compact set representations.",
      "description_length": 544,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit_renderer.Context",
      "library": "cmarkit",
      "description": "This module coordinates rendering contexts for transforming documents into output formats, combining state management with element processing to support custom rendering pipelines. It offers core operations to initialize contexts, emit raw content, and apply rendering rules to document structures, while its submodules handle typed state storage and buffer management during traversal. You can use it to build HTML generators that track indentation levels or LaTeX converters that manage output buffers dynamically. Specific functions allow direct byte emission, state updates, and rule-based processing of blocks and inline elements.",
      "description_length": 635,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Block_line",
      "library": "cmarkit",
      "description": "This module processes block lines in a CommonMark document, handling operations like converting strings to block lines, combining lines into text locations, and managing metadata. It works with block lines, tight lines (which include leading whitespace), and blank lines, each paired with metadata or layout information. Concrete use cases include parsing indented code blocks, handling block quotes by stripping markers, and tracking source locations for rendering or error reporting.",
      "description_length": 485,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Doc",
      "library": "cmarkit",
      "description": "This module represents parsed CommonMark documents, providing access to their structure and metadata. It includes operations to construct documents from blocks, extract label definitions, and retrieve newline characters used during parsing. Key use cases include processing Markdown content into structured blocks, managing reference links via label definitions, and preserving source-specific formatting like newline characters.",
      "description_length": 429,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Meta",
      "library": "cmarkit",
      "description": "This module manages metadata for abstract syntax tree nodes, including text locations and client-defined key-value pairs. It supports creating and modifying metadata with operations like `add`, `find`, and `remove`, and provides identifiers and source locations for tracking node identity and origin. Use cases include attaching source position information to parsed elements and storing custom annotations during document processing.",
      "description_length": 434,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Textloc",
      "library": "cmarkit",
      "description": "This module provides utilities for representing and manipulating text spans in UTF-8 files using byte ranges and line positions, with support for creating, adjusting, and comparing these ranges. It operates on structured records combining file paths, byte offsets, and line/column numbers, prioritizing byte-level precision while retaining line context. Typical applications include tracking source code locations in CommonMark parsing, generating error diagnostics with precise file positions, and formatting location metadata for tools like linters or formatters.",
      "description_length": 565,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Link_definition",
      "library": "cmarkit",
      "description": "This module represents and manipulates link definitions in a CommonMark document. It provides operations to construct and access link definitions, including their layout, label, destination, and title. Use cases include parsing and rendering link references with specific formatting, such as handling indentation, destination delimiters, and title placement.",
      "description_length": 358,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Mapper",
      "library": "cmarkit",
      "description": "This module provides functions to transform CommonMark abstract syntax trees by mapping over nodes with customizable behavior for deletion, modification, or expansion. It operates on `Doc.t`, `Block.t`, and `Inline.t` structures, allowing precise control over node traversal and transformation. Concrete use cases include rewriting code blocks, filtering or modifying inline elements, and restructuring documents based on node properties.",
      "description_length": 438,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Layout",
      "library": "cmarkit",
      "description": "This module defines types and functions for representing layout information such as whitespace, indentation, and string metadata in a CommonMark document. It includes types like `blanks`, `indent`, and `count`, along with functions to create layout-aware string nodes with optional metadata. These values help preserve source formatting during parsing and rendering, particularly when roundtripping document layout is required.",
      "description_length": 427,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Block",
      "library": "cmarkit",
      "description": "This module organizes block-level elements in CommonMark documents, such as headings, block quotes, code blocks, lists, and thematic breaks, enabling structured parsing and transformation of markdown content. It provides data types like `block` and `t` to represent and manipulate these elements, with operations to normalize block structures, collect definitions, and manage metadata. Child modules refine this functionality with specific support for headings, lists, tables, and inline content, allowing tasks like constructing code blocks with custom fences, extracting quoted content, or generating properly aligned tables. Together, they enable precise document analysis, restructuring, and rendering with attention to layout and reference resolution.",
      "description_length": 756,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Folder",
      "library": "cmarkit",
      "description": "This module provides combinators to create and manipulate AST folders that traverse CommonMark documents, blocks, and inline elements. It supports customizable folding logic for block and inline nodes, with default behaviors for unhandled cases, enabling operations like extracting metadata or transforming specific node types. A concrete use case is collecting programming languages used in code blocks across a document by defining a custom block folder.",
      "description_length": 456,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit.Label",
      "library": "cmarkit",
      "description": "This module organizes label keys and their associated values using ordered maps, enabling efficient insertion, deletion, and query operations. It supports custom resolution strategies for handling undefined references, such as synthesizing link targets or preloading definitions across documents. You can use it to track reference links, manage footnote mappings, or resolve dependencies during CommonMark parsing. Operations include merging label sets, filtering by metadata, and traversing labels in key order.",
      "description_length": 512,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit.Inline",
      "library": "cmarkit",
      "description": "This module handles inline elements in CommonMark documents, such as text, links, emphasis, code spans, and breaks, offering operations to inspect, normalize, and convert these structures into plain text or identifiers while supporting extensions like strikethrough and math spans. It includes submodules for specific inline types: emphasis and strong emphasis with delimiter handling, strikethrough wrappers, raw text with resolved entities, code spans with layout preservation, autolinks for URIs and emails, line breaks with spacing control, embedded HTML, TeX math spans, and structured links with reference resolution. You can use it to extract emphasized text, wrap content in strikethrough formatting, construct valid code spans with escaped backticks, or resolve link references against a label database. The module also supports text manipulation, line break inspection, and math expression handling within inline content.",
      "description_length": 931,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit",
      "library": "cmarkit",
      "description": "This module parses CommonMark documents into structured abstract syntax trees, enabling precise manipulation of block and inline elements, metadata, and layout information. It provides core data types for blocks, inlines, documents, labels, and text spans, along with operations to transform, traverse, and extract content while preserving source formatting and reference links. You can parse Markdown into structured blocks, track source locations for error reporting, rewrite code blocks, extract link definitions, or collect metadata across a document. Specific examples include normalizing indentation in block quotes, resolving reference links using label databases, and transforming inline elements like emphasis or code spans during document processing.",
      "description_length": 760,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_renderer",
      "library": "cmarkit",
      "description": "This module provides stateful rendering into buffers, coordinating document traversal with customizable inline, block, and document-level transformations. It operates on `Cmarkit.Doc.t`, `Cmarkit.Block.t`, and `Cmarkit.Inline.t`, supporting predicate-based overrides to tailor output generation. Use it to extend HTML rendering with custom tags, inject formatting rules, or manage dynamic buffer state during LaTeX conversion. Submodules handle context initialization, raw content emission, and structured state management for complex rendering pipelines.",
      "description_length": 555,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmarkit_latex",
      "library": "cmarkit",
      "description": "This module converts CommonMark documents to LaTeX using a customizable renderer. It handles text escaping, links, images, code blocks, and section labels with support for extensions like ordered lists and embedded LaTeX. Use it to generate LaTeX fragments from Markdown for inclusion in larger documents or automated report generation.",
      "description_length": 336,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_html",
      "library": "cmarkit",
      "description": "This module renders CommonMark documents to HTML fragments, handling elements like headings, code blocks, and inline math with specific attributes and escaping rules. It operates on `Cmarkit.Doc.t` documents and supports customization through renderers that control output features such as safe mode, XHTML compliance, and identifier generation for anchors. Concrete use cases include generating HTML for documentation pages, embedding math expressions with KaTeX or MathJax, and applying syntax highlighting via `highlight.js` for code blocks.",
      "description_length": 544,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmarkit_commonmark",
      "library": "cmarkit",
      "description": "This module renders CommonMark documents from abstract syntax trees, preserving source layout and handling extensions such as lists, footnotes, and block quotes. It supports newline management, indentation control, and character escaping, enabling generation of human-readable output that mirrors original formatting. The child module provides efficient immutable sets for US-ASCII characters, used to define parsing and rendering rules based on character groups. Together, they allow precise control over document structure and text processing, suitable for tasks like custom renderers or layout-preserving transformations.",
      "description_length": 624,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 40,
    "meaningful_modules": 40,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 931,
    "min_description_length": 246,
    "avg_description_length": 442.875,
    "embedding_file_size_mb": 0.1457233428955078
  }
}