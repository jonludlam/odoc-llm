{
  "package": "MlFront_Cache",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:55:43.152356",
  "modules": [
    {
      "module_path": "MlFront_Cache.InternalUse.Sqlite3Ops",
      "library": "MlFront_Cache",
      "description": "This module implements low-level SQLite operations for managing cache state, including schema creation, data insertion, and querying with strict result handling. It works directly with SQLite databases, statements, and data types, using typed error propagation via result types. Concrete use cases include executing DDL/DML statements, binding parameters to SQL queries, and retrieving singleton or optional scalar results like cache entries or metadata.",
      "description_length": 454,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MlFront_Cache.InternalUse",
      "library": "MlFront_Cache",
      "description": "This module implements low-level SQLite operations for managing cache state, including schema creation, data insertion, and querying with strict result handling. It works directly with SQLite databases, statements, and data types, using typed error propagation via result types. Concrete use cases include executing DDL/DML statements, binding parameters to SQL queries, and retrieving singleton or optional scalar results like cache entries or metadata.",
      "description_length": 454,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MlFront_Cache.MetaOps",
      "library": "MlFront_Cache",
      "description": "This module handles metadata operations for cache entries, providing functions to read and manipulate file and directory metadata. It works with `file_entry` and `dir_entry` types, which represent entries relative to a cache directory. Concrete use cases include extracting metadata from cache files and managing directory structures during cache updates.",
      "description_length": 355,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MlFront_Cache.MetaDb",
      "library": "MlFront_Cache",
      "description": "This module manages metadata for long-lived and transient data using an SQLite database. It provides functions to create and access a database that tracks storage locations for data and cache directories. Concrete use cases include coordinating file paths and metadata operations for persistent and temporary data in applications requiring structured caching.",
      "description_length": 359,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MlFront_Cache",
      "library": "MlFront_Cache",
      "description": "This module coordinates file path metadata and cache state management using SQLite, enabling efficient handling of versioned datasets or installations across transient and persistent storage regions. It provides operations to track cache entries, manage directory metadata, and perform cache-aware file operations to avoid redundant downloads or extractions. Concrete use cases include orchestrating dataset caching workflows where data is only downloaded and unzipped when necessary, based on presence in the data region.",
      "description_length": 522,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 522,
    "min_description_length": 355,
    "avg_description_length": 428.8,
    "embedding_file_size_mb": 0.05854606628417969
  }
}