{
  "package": "base64",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:49:26.831811",
  "modules": [
    {
      "module_path": "Base64",
      "library": "base64",
      "description": "This module encodes and decodes binary data to and from Base64 format using configurable alphabets, including standard and URI-safe variants. It operates on strings and provides functions to handle padding, partial input via offsets and lengths, and efficient memory usage through substring results. Concrete use cases include encoding binary payloads for transmission over text-based protocols or decoding Base64-encoded data embedded in URLs or JSON.",
      "description_length": 452,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Base64_rfc2045",
      "library": "base64.rfc2045",
      "description": "This module implements Base64 encoding and decoding according to RFC2045, handling input and output through manual buffers, channels, or strings. It provides precise control over encoding and decoding processes with support for partial data processing, error detection, and strict or lenient decoding modes. Concrete use cases include streaming Base64 transformations, in-place buffer manipulation, and decoding malformed or non-compliant Base64 streams with detailed error reporting.",
      "description_length": 484,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 484,
    "min_description_length": 452,
    "avg_description_length": 468.0,
    "embedding_file_size_mb": 0.02936553955078125
  }
}