{
  "package": "pa_ppx_unique",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:26.486989",
  "modules": [
    {
      "module_path": "Pa_ppx_unique_runtime.Unique",
      "description": "Generates unique identifiers by incrementing a shared counter, ensuring each generated value is distinct. It works with reference types and polymorphic variants to track uniqueness. Used to create distinct keys in concurrent data structures or to label elements in a non-conflicting way.",
      "description_length": 287,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pa_deriving_unique.UC",
      "description": "Processes and transforms type declarations, attribute handling, and AST elements for code generation. Operates on MLast type declarations, expressions, patterns, and location-aware structures. Constructs unique constructors, builds context for ppx extensions, and manages tuple creation and binding separation.",
      "description_length": 310,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "pa_ppx_unique",
      "description": "Provides functions to generate unique identifiers and manage their registration, ensuring no duplicates are created. Works with strings and sets of strings to track assigned identifiers. Used to create unique variable names in code generation pipelines.",
      "description_length": 253,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_unique_runtime",
      "description": "Manages unique identifier generation through a shared counter, supporting reference types and polymorphic variants to guarantee distinct outputs. Provides operations to create, retrieve, and manage unique values across concurrent or complex data structures. Examples include generating unique keys for thread-safe maps or labeling elements in a way that avoids collisions. The core data types include counters, identifiers, and variant tags.",
      "description_length": 441,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_deriving_unique",
      "description": "Processes and transforms type declarations, attributes, and AST elements to support code generation, handling MLast structures and location-aware data. Constructs unique constructors, manages tuple creation, and separates bindings for ppx extension contexts. Supports pattern matching, expression manipulation, and type-level transformations. Enables custom type representations, serialization hooks, and AST-based code rewriting.",
      "description_length": 430,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 441,
    "min_description_length": 253,
    "avg_description_length": 344.2,
    "embedding_file_size_mb": 0.01860332489013672
  }
}