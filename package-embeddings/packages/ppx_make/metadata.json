{
  "package": "ppx_make",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:01.389874",
  "modules": [
    {
      "module_path": "Ppx_make.Arg_type",
      "library": "ppx_make",
      "description": "This module processes and transforms function argument types with attributes and labels, handling default values and required flags. It works with OCaml's core type system and attribute syntax to generate labeled arguments and patterns for AST construction. Concrete use cases include parsing and rewriting function parameters during PPX processing, particularly for generating functions with optional or required arguments and defaults.",
      "description_length": 437,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_make.Deriver",
      "library": "ppx_make",
      "description": "This module generates OCaml expressions, type expressions, structure items, and signature items from type declarations, records, tuples, and variants. It constructs these elements based on provided type information and location data, enabling automatic derivation of types and related values. Concrete use cases include implementing custom type-driven code generation for libraries or extending OCaml syntax through PPX rewriters.",
      "description_length": 430,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_make.Utils",
      "library": "ppx_make",
      "description": "This module constructs and manipulates OCaml AST elements related to type declarations and expressions, providing functions to generate names, strip type wrappers, and build expressions with specific attributes. It works directly with OCaml's abstract syntax trees, including core types, expressions, and type declarations, often handling location-annotated identifiers. Concrete use cases include generating `make` functions for types, modifying expressions to include choice constructors, and extracting type parameters from declarations during PPX rewriting.",
      "description_length": 561,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_make",
      "library": "ppx_make",
      "description": "This module processes function arguments and type declarations to generate labeled, optional, and required parameters with defaults, while constructing and manipulating OCaml AST elements for expressions, types, and signatures. It provides operations to derive types, build expressions with attributes, and generate structure and signature items from type information. Examples include rewriting function parameters during PPX processing, automatically deriving `make` functions for records or variants, and modifying expressions to include custom constructors or attributes.",
      "description_length": 575,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 575,
    "min_description_length": 430,
    "avg_description_length": 500.75,
    "embedding_file_size_mb": 0.014944076538085938
  }
}