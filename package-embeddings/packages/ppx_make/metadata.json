{
  "package": "ppx_make",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:32.376792",
  "modules": [
    {
      "module_path": "Ppx_make.Arg_type",
      "description": "Handles parsing and transformation of OCaml core types and attributes, extracting default expressions and labeling information. Operates on core type representations, attributes, and labeled arguments within ppx rewriters. Used to process function parameters and their associated metadata during macro expansion.",
      "description_length": 312,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_make.Deriver",
      "description": "Generates AST nodes for type declarations, records, and variants, converting core types and label declarations into expressions and structure items. Works with OCaml's core_type, label_declaration, and constructor_declaration structures, along with location-aware strings. Constructs type definitions for both module structures and signatures, supporting option, tuple, and record types.",
      "description_length": 387,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_make.Utils",
      "description": "Converts type names to core types, strips options from types, and generates error messages for unsupported features. Processes OCaml type declarations, location-annotated strings, and expressions to support code generation and transformation. Constructs names for generated code, handles choice labels, and manages type parameters in ppx rewriters.",
      "description_length": 348,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "ppx_make",
      "description": "Generates constructor functions for record types based on annotations. Works with OCaml record types to automate instance creation. Simplifies initialization of complex data structures in configuration and parsing workflows.",
      "description_length": 224,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_make",
      "description": "Processes OCaml core types, attributes, and labels to extract metadata and generate AST nodes for type declarations, records, and variants. Converts type names to core types, handles option stripping, and constructs error messages for unsupported features. Supports function parameter processing, type definition generation, and label management in ppx rewriters. Enables creation of structured type representations, including option, tuple, and record types, with location-aware handling.",
      "description_length": 489,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 489,
    "min_description_length": 224,
    "avg_description_length": 352.0,
    "embedding_file_size_mb": 0.018589019775390625
  }
}