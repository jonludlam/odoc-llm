{
  "package": "httpun-ws",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 10,
  "creation_timestamp": "2025-08-14T23:07:30.539995",
  "modules": [
    {
      "module_path": "Httpun_ws.Websocket.Opcode",
      "library": "httpun-ws",
      "description": "This module defines types and functions for working with WebSocket opcodes, including standard non-control (`Continuation`, `Text`, `Binary`) and control (`Connection_close`, `Ping`, `Pong`) codes. It provides conversions between opcode values and integers, along with safe and unsafe lookup functions for parsing and serializing WebSocket frames. Use cases include handling WebSocket message types during frame processing and managing connection state transitions based on control codes.",
      "description_length": 488,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Websocket.Close_code",
      "library": "httpun-ws",
      "description": "This module defines and manipulates WebSocket close codes, including standard codes and custom integer-based codes. It provides functions to convert between close code values and their integer representations, as well as parsing from bigstrings at a given offset. Use cases include handling WebSocket connection closures with specific error codes during communication or protocol violations.",
      "description_length": 391,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Handshake",
      "library": "httpun-ws",
      "description": "This module handles WebSocket handshake operations by creating HTTP upgrade requests, validating headers, and responding to upgrade requests. It works with HTTP headers, methods, and request/response types to establish WebSocket connections. Concrete use cases include initiating client handshakes with a nonce, validating server headers using SHA-1, and upgrading server connections upon successful handshake verification.",
      "description_length": 423,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Server_connection",
      "library": "httpun-ws",
      "description": "This module manages WebSocket connections by handling the lifecycle and I/O operations for a server-side WebSocket. It provides functions to create and shutdown connections, process read and write operations, and handle errors and exceptions. Concrete use cases include accepting incoming WebSocket connections, reading and writing binary or text messages, and managing backpressure through yield operations.",
      "description_length": 408,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun_ws.Payload",
      "library": "httpun-ws",
      "description": "This module handles WebSocket payload management, providing functions to check if a payload is closed, schedule read operations with callbacks for data and end-of-file, and explicitly close a payload. It works directly with `Bigstringaf.t` for efficient binary data handling. Concrete use cases include streaming binary WebSocket messages and managing connection lifecycle events like closure detection and read scheduling.",
      "description_length": 423,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun_ws.Wsd",
      "library": "httpun-ws",
      "description": "This module manages WebSocket data transmission and connection lifecycle events. It provides functions to schedule or send binary or text frames, handle control messages like ping/pong, and manage connection closure with specific status codes. Designed for use with `Bigstringaf.t` and `Bytes.t` buffers, it supports efficient handling of WebSocket protocol framing and masking requirements in client or server modes.",
      "description_length": 417,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Websocket_connection",
      "library": "httpun-ws",
      "description": "Handles WebSocket connections by processing incoming frames and end-of-file events. It works with WebSocket frames, opcodes, and payloads to manage message transmission. Concrete use cases include implementing real-time communication protocols, handling binary or text messages, and managing connection termination gracefully.",
      "description_length": 326,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Websocket",
      "library": "httpun-ws",
      "description": "This module implements WebSocket protocol handling with specific operations for managing opcodes and close codes. It works with integer and bigstring data types to parse and serialize frame metadata, enabling precise control over message framing and connection lifecycle events. Concrete use cases include decoding incoming frame opcodes to route message payloads and encoding close frames with standardized status codes during connection termination.",
      "description_length": 451,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Client_connection",
      "library": "httpun-ws",
      "description": "This module manages WebSocket client connections, handling the lifecycle of reading from and writing to a WebSocket. It provides functions to connect, read and write data, handle errors, and manage handshake failures with specific response and body reader context. Concrete use cases include implementing WebSocket clients that process streaming data or bidirectional communication protocols.",
      "description_length": 392,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws",
      "library": "httpun-ws",
      "description": "This module implements WebSocket protocol handling with submodules for payload management, frame processing, data transmission, handshake negotiation, and client/server connection lifecycle management. It works with bigstrings, buffers, and HTTP types to enable efficient binary messaging, connection upgrades, and precise frame control. Concrete use cases include building real-time messaging systems, handling WebSocket handshakes with cryptographic validation, and implementing streaming data protocols with backpressure support.",
      "description_length": 532,
      "index": 9,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 10,
    "meaningful_modules": 10,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 532,
    "min_description_length": 326,
    "avg_description_length": 425.1,
    "embedding_file_size_mb": 0.1452798843383789
  }
}