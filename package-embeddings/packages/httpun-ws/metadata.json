{
  "package": "httpun-ws",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 11,
  "creation_timestamp": "2025-06-18T16:32:33.307025",
  "modules": [
    {
      "module_path": "Httpun_ws.Websocket.Opcode",
      "description": "Provides operations to convert between an opaque type and integers, including safe and unsafe constructors from integer values and a pretty-printing function for human-readable output. Works with a custom type representing opcodes, partitioned into control and non-control categories. Used to encode and decode instruction codes in a low-level interpreter or compiler backend.",
      "description_length": 376,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Websocket.Close_code",
      "description": "Provides conversion between integer values and a custom type, including safe and unsafe options for parsing and serialization. Works with integers, bigstrings, and a tagged type representing specific code values. Used to decode and encode structured error or status codes from binary data.",
      "description_length": 289,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Payload",
      "description": "Checks if a payload stream has reached its end and schedules asynchronous read operations with custom handlers for data and end-of-file events. Operates on an opaque stream type representing data sources. Used to manage network or file-based data ingestion with fine-grained control over reading and completion.",
      "description_length": 311,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Websocket",
      "description": "Encodes and decodes numeric and tagged values into custom types, supporting safe and unsafe conversions, integer mapping, and pretty printing. Handles opcodes and error/status codes through distinct tagged types, enabling low-level data manipulation and interpretation. Operations include parsing binary data, serializing values, and generating human-readable representations. Can be used to process WebSocket frames, interpret control signals, or validate error conditions in network protocols.",
      "description_length": 495,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Wsd",
      "description": "Provides functions to schedule WebSocket frames, send text or binary data, and manage control messages like ping and pong. Operates on `Bigstringaf.t`, `Bytes.t`, and `IOVec.t` for efficient data handling. Used to transmit fragmented messages, send application-specific control data, and handle connection closure with error tracking.",
      "description_length": 334,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Handshake",
      "description": "Provides functions to construct HTTP handshake requests, validate upgrade headers using a SHA-1 transformation, and respond to upgrade requests with custom headers. Operates on HTTP headers, methods, and request objects from the Httpun module. Used to establish WebSocket connections by generating and verifying handshake data.",
      "description_length": 327,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Websocket_connection",
      "description": "Handles message parsing, frame construction, and connection management for WebSocket protocols. Processes binary and text data, manages handshake negotiation, and routes incoming messages to registered handlers. Used to establish real-time communication between client and server, supporting event-driven interactions in networked applications.",
      "description_length": 344,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Client_connection",
      "description": "Handles WebSocket connections with custom read/write logic, error reporting, and yield management. Operates on `Bigstringaf.t` for efficient buffer handling and `Wsd.t` for WebSocket data. Used to manage real-time data streaming, handle protocol errors, and coordinate asynchronous I/O operations.",
      "description_length": 297,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_ws.Server_connection",
      "description": "Handles low-level HTTP and WebSocket communication, offering control over read/write operations, error reporting, and connection state. Operates on Bigstringaf.t for efficient buffer management and Wsd.t for WebSocket sessions. Used to manage asynchronous data flow in networked applications, such as streaming responses or handling real-time message exchanges.",
      "description_length": 361,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "httpun-ws",
      "description": "Provides functions for establishing and managing WebSocket connections, handling message framing, and processing binary or text data. Works with socket descriptors, byte sequences, and protocol-specific state machines. Used to build real-time communication layers in networked applications, such as chat systems or live data feeds.",
      "description_length": 331,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Httpun_ws",
      "description": "manages asynchronous data ingestion, WebSocket frame transmission, and HTTP handshake negotiation, operating on opaque stream types, buffers, and WebSocket session data. It supports parsing and serializing custom data types, handling control messages, and managing connection states with fine-grained control. Users can process WebSocket frames, send binary or text data, and validate handshake headers for real-time communication. Examples include streaming data from files, sending ping/pong messages, and constructing protocol-specific error responses.",
      "description_length": 555,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 11,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9166666666666666
  },
  "statistics": {
    "max_description_length": 555,
    "min_description_length": 289,
    "avg_description_length": 365.45454545454544,
    "embedding_file_size_mb": 0.04037761688232422
  }
}