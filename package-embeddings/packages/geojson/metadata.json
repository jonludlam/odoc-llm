{
  "package": "geojson",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 44,
  "creation_timestamp": "2025-07-15T23:13:48.382330",
  "modules": [
    {
      "module_path": "Geojson.Make.Accessor.Optics.Either",
      "library": "geojson",
      "description": "This module provides `left` and `right` functions to construct values of a polymorphic variant type representing either a left or right value. It works with the `('a, 'b) Accessor.Optics.Either.t` type, which encodes a choice between two types. Use cases include handling JSON parsing results that may return one of two possible types, such as optional or alternative schema fields in GeoJSON objects.",
      "description_length": 401,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Accessor.Optics.Optional",
      "library": "geojson",
      "description": "This module provides functions to create and compose optional accessors for navigating and modifying nested GeoJSON data structures. It supports lenses and prisms to access properties that may or may not exist, such as optional fields in GeoJSON objects. Use cases include safely reading or updating geometry types, feature properties, or coordinate sequences in a type-safe manner.",
      "description_length": 382,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Accessor.Optics.Infix",
      "library": "geojson",
      "description": "This module defines infix operators for composing and chaining optics\u2014lenses, prisms, and optionals\u2014enabling precise access and transformation of nested GeoJSON data structures. It works directly with GeoJSON objects such as features, geometries, and their properties, allowing safe and concise manipulation of optional and required fields. Concrete use cases include extracting coordinates from a geometry, updating a feature's properties, or traversing nested collections like geometry collections or multi-part geometries.",
      "description_length": 525,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Accessor.Optics.Prism",
      "library": "geojson",
      "description": "This module provides optics-based accessors for working with optional values in GeoJSON data structures. It includes prisms for extracting and setting values within option types, enabling precise manipulation of optional geometry or property fields. Use cases include safely accessing nested GeoJSON properties or constructing valid geometries with optional components.",
      "description_length": 369,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Accessor.Optics.Lens",
      "library": "geojson",
      "description": "This module provides optics-based accessors for manipulating GeoJSON data structures, enabling precise traversal and modification of nested geometric and feature data. It works with tuples, lists, and custom GeoJSON types to support operations like extracting coordinates, updating geometry types, or modifying feature properties. Concrete use cases include focusing on specific vertices in a polygon, updating the first coordinate pair in a point, or composing lenses to access deeply nested attributes within a GeoJSON hierarchy.",
      "description_length": 531,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Accessor.Optics",
      "library": "geojson",
      "description": "This module enables type-safe manipulation of GeoJSON data using optics such as lenses, prisms, and optionals, supporting operations on points, linestrings, polygons, and their multi-variants. It provides direct access to coordinates, properties, and nested geometries, with infix operators for composing and chaining accessors to navigate complex structures concisely. Submodules handle optional values, either types, and list-based data, allowing safe extraction and modification of fields like geometry types or feature properties. Examples include updating a point's coordinates, traversing a feature collection, or safely reading an optional bounding box field.",
      "description_length": 666,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Geojson.Make.Accessor.Geometry",
      "library": "geojson",
      "description": "This module provides lenses and prisms for accessing and manipulating geometry values and foreign members within GeoJSON data structures. It supports operations on specific geometry types such as points, linestrings, polygons, and their multi-variants, allowing precise traversal and transformation of geographic features. Concrete use cases include extracting coordinates from a polygon, updating metadata in foreign members, or constructing multi-point geometries from raw JSON input.",
      "description_length": 486,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Geometry.Polygon",
      "library": "geojson",
      "description": "Handles polygon geometries using linear rings, providing access to exterior and interior rings. Converts between polygons and arrays of positions or line strings. Useful for constructing and deconstructing polygon shapes with optional holes from coordinate data.",
      "description_length": 262,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Geojson.Make.Geometry.Position",
      "library": "geojson",
      "description": "Handles geographic coordinates with longitude, latitude, and optional altitude. Provides accessors for each component and a constructor to create positions. Useful for representing and comparing geographic points in GeoJSON data.",
      "description_length": 229,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Geojson.Make.Accessor.Feature",
      "library": "geojson",
      "description": "This module provides lenses to access and modify properties, foreign members, and geometry fields of GeoJSON feature objects. It works with `Feature.t` and associated JSON and geometry types to enable precise manipulation of feature data. Use it to extract or update geographic feature attributes and geometries directly within a parsed GeoJSON structure.",
      "description_length": 355,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Geometry.Point",
      "library": "geojson",
      "description": "Handles the creation and conversion of geographic points using a position type. Expects a position value containing coordinates and constructs a point geometry. Useful for representing single geographic locations in GeoJSON format.",
      "description_length": 231,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Geojson.Make.Geometry.LineString",
      "library": "geojson",
      "description": "This module provides functions to create and manipulate line string geometries using arrays of positions. It includes `v` for constructing a line string from at least two positions and `coordinates` for extracting the position array from a line string. It is used to represent linear paths in geographic data, such as roads or routes.",
      "description_length": 334,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Geometry.MultiPolygon",
      "library": "geojson",
      "description": "Handles multi-polygon geometries by providing direct conversion to and from arrays of polygons and their positional coordinates. Works with `Geometry.MultiPolygon.t`, `Geometry.Polygon.t`, and nested arrays of `Geometry.Position.t`. Use to construct or access multi-polygon data from raw coordinate structures or individual polygon components.",
      "description_length": 343,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Geometry.MultiLineString",
      "library": "geojson",
      "description": "Handles multi-line string geometries by providing functions to create, access, and convert between arrays of line strings and their coordinate positions. Works with arrays of `LineString.t` and nested arrays of `Position.t`. Use this to construct or deconstruct multi-line geometries directly from coordinate sequences.",
      "description_length": 319,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Geojson.Make.Geometry.MultiPoint",
      "library": "geojson",
      "description": "This module handles the creation and manipulation of MultiPoint geometry objects in GeoJSON. It provides functions to construct a MultiPoint from an array of positions and to retrieve the array of positions from a MultiPoint. It is used when representing geographic features that consist of multiple distinct points, such as a group of landmarks or coordinates of interest.",
      "description_length": 373,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Feature.Collection",
      "library": "geojson",
      "description": "Handles the creation and manipulation of GeoJSON feature collections by aggregating multiple features into a single structure. It supports extracting foreign members and constructing a feature collection from a list of features. This module is used when working with GeoJSON data that includes additional, non-standard properties alongside standard feature collections.",
      "description_length": 369,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Feature",
      "library": "geojson",
      "description": "This module provides tools to create and manage GeoJSON feature objects, allowing the association of geometric shapes with metadata through properties and foreign members. It supports operations like setting geometries, adding custom key-value pairs, and identifying features by string identifiers. The feature collection submodule extends this functionality by grouping multiple features into a single structure, enabling extraction of non-standard properties and building composite GeoJSON data. Use cases include assembling geographic datasets with embedded metadata for interchange or processing, such as representing cities with their boundaries and attributes.",
      "description_length": 666,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Geometry",
      "library": "geojson",
      "description": "This module represents geographic shapes through core types like `Point`, `LineString`, and `Polygon`, supporting construction, inspection, and GeoJSON serialization. It handles complex structures such as multi-polygons and linear paths, with operations to build from or extract to coordinate arrays. Child modules refine these capabilities, offering precise handling of polygon rings, coordinate components, and multi-part geometries like multi-points and multi-line strings. Use it to model geographic features, validate structures, or convert between GeoJSON and typed representations.",
      "description_length": 588,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Accessor",
      "library": "geojson",
      "description": "This module provides lenses and prisms for accessing and transforming GeoJSON data structures, enabling type-safe manipulation of features, geometries, and collections. It supports direct operations on coordinates, properties, and nested geometries, with infix operators for composing accessors to traverse complex structures\u2014such as updating a polygon's coordinates or extracting a feature's bounding box. Submodules handle optional and list-based data, foreign members, and specific geometry types, allowing safe and precise modifications across points, linestrings, and multi-variants. Example uses include validating geometry structures, transforming feature collections, and embedding metadata updates within geographic data pipelines.",
      "description_length": 740,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make.Random",
      "library": "geojson",
      "description": "This module generates random GeoJSON objects following a provided structural template. It creates valid geometries such as points, line strings, and polygons, using a user-defined random float generator. Concrete use cases include generating test datasets or populating mock maps with randomized geographic features.",
      "description_length": 316,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Accessor-Feature",
      "library": "geojson",
      "description": "This module provides lenses to access and modify specific fields of a GeoJSON feature, including properties, foreign members, and geometry. It works directly with `Feature.t` and related types like `json` and `Geometry.t`. Use these lenses to safely navigate or update a feature's optional components, such as extracting or setting its geometry or metadata properties.",
      "description_length": 368,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Geometry-Position",
      "library": "geojson",
      "description": "This module represents a geographic position with longitude, latitude, and optional altitude. It provides functions to construct a position, access its components, and compare positions for equality. Use this module when working with geographic coordinates in applications like mapping, geolocation services, or spatial analysis.",
      "description_length": 329,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Accessor-Optics-Optional",
      "library": "geojson",
      "description": "This module composes optics for accessing and modifying nested fields in GeoJSON data structures, specifically handling optional values. It provides functions to convert lenses and prisms into optionals, and combines them using operators to traverse complex data paths. Use cases include safely accessing geometry components or feature properties in GeoJSON objects where fields may be absent.",
      "description_length": 393,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S",
      "library": "geojson",
      "description": "This module defines types and operations for working with GeoJSON data, including parsing and constructing GeoJSON objects with optional bounding boxes. It supports concrete data types like `geojson`, `t`, and `json`, and provides functions to convert between them, extract geometry or features, and validate structures. Use cases include processing geographic data from files or APIs, manipulating GeoJSON features, and serializing data for storage or transmission.",
      "description_length": 466,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Geojson.S-Accessor-Optics-Either",
      "library": "geojson",
      "description": "This module provides functions to construct either left or right values of a sum type. It works with polymorphic variant types representing disjoint unions. Use it to explicitly wrap values into `Left` or `Right` cases when working with result-like structures or tagged unions.",
      "description_length": 277,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Accessor-Geometry",
      "library": "geojson",
      "description": "This module provides lenses and prisms for accessing and manipulating geometry values and foreign members within GeoJSON data structures. It supports operations on specific geometry types such as points, multipoints, linestrings, multilinestrings, polygons, and multipolygons. Use it to extract or update geometric shapes and custom metadata in GeoJSON objects.",
      "description_length": 361,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Make",
      "library": "geojson",
      "description": "This module generates a GeoJSON parser and constructor from a JSON implementation, defining core types for geometry, features, and bounding boxes while supporting conversion between GeoJSON and JSON. It enables building, validating, and serializing GeoJSON data structures, with operations to construct geometries from coordinates or extract metadata from features. The feature module manages geometric objects with properties and identifiers, while the geometry module provides typed representations of shapes like points and polygons. Lenses and prisms allow safe traversal and transformation of nested structures, and a random generator creates test GeoJSON data with customizable shapes and coordinate distributions.",
      "description_length": 720,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Accessor-Optics-Infix",
      "library": "geojson",
      "description": "This module defines infix operators for composing optional, lens, and prism accessors to navigate and manipulate nested data structures. It enables precise access and transformation of values within complex types like records and variants by chaining operations. Concrete use cases include querying and updating specific fields in deeply nested GeoJSON objects, such as modifying coordinates of a geometry or extracting properties from a feature.",
      "description_length": 446,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Geojson.S-Feature-Collection",
      "library": "geojson",
      "description": "This module handles the creation and manipulation of GeoJSON feature collections. It provides functions to construct a collection from a list of features, extract foreign members, and retrieve features from a collection. It works with GeoJSON features and JSON objects, specifically for handling geographic data in formats like maps or geospatial analysis tools.",
      "description_length": 362,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Geometry",
      "library": "geojson",
      "description": "This module defines a polymorphic type `geometry` that represents GeoJSON geometry objects, including points, lines, polygons, and collections. It provides constructors for creating geometry values with optional foreign members and functions to extract the underlying geometry or foreign key-value pairs. Use this module to parse, construct, and manipulate GeoJSON geometry data directly, such as representing geographic features in mapping applications or processing geospatial data from external sources.",
      "description_length": 506,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Accessor-Optics-Prism",
      "library": "geojson",
      "description": "This module provides operations for working with prisms in the context of optional values, enabling safe access and construction of values through combinators like `get`, `set`, and composition with `(>>)`. It defines prisms for handling `option` types, specifically `some` for extracting values from `Some` and `none` for handling `None`. Concrete use cases include safely accessing nested optional fields in data structures and constructing values conditionally based on optional inputs.",
      "description_length": 489,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Accessor-Optics-Lens",
      "library": "geojson",
      "description": "This module provides optics-based accessors for manipulating geometric data structures like tuples, lists, and custom types in a type-safe manner. It supports operations such as field access, modification, and composition of lenses for nested data updates. Concrete use cases include extracting coordinates from geographic features, updating specific vertices in a polygon, and composing transformations across nested geometric structures.",
      "description_length": 439,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Accessor",
      "library": "geojson",
      "description": "This module provides lenses and prisms for accessing and modifying specific fields within GeoJSON structures, such as `geojson`, `bbox`, `feature`, `geometry`, and `feature_collection`. It supports operations on data types like `t`, `geojson`, and nested types through function composition using infix operators. Concrete use cases include extracting geometries from features, updating bounding boxes, or focusing on specific parts of a GeoJSON value for transformation or analysis.",
      "description_length": 482,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Geometry-MultiLineString",
      "library": "geojson",
      "description": "This module represents a collection of line strings in a geographic context. It provides functions to create a multi-line string from an array of line strings or position arrays, and to access its constituent lines or positions. Use it when handling multiple connected or disconnected line features, such as representing road networks or geographic boundaries composed of multiple segments.",
      "description_length": 390,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Geometry-MultiPolygon",
      "library": "geojson",
      "description": "This module handles multi-polygon geometric data by providing functions to create, access, and convert multi-polygon structures. It works with arrays of polygons and their underlying position data, enabling direct manipulation of geographic coordinates. Use it when constructing or deconstructing complex polygonal shapes such as geographic regions or layered spatial data.",
      "description_length": 373,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.Json",
      "library": "geojson",
      "description": "This module defines a JSON type and provides functions to construct, deconstruct, and convert JSON values. It supports operations like creating JSON strings, numbers, arrays, and objects, as well as extracting values with type conversions to OCaml primitives. Use cases include parsing and serializing JSON data, building JSON structures from OCaml values, and navigating nested JSON objects.",
      "description_length": 392,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Feature",
      "library": "geojson",
      "description": "This module represents GeoJSON features with geometry, allowing creation and access to geometric data, properties, and foreign members. It supports operations to construct features with optional identifiers, properties, and extended fields, and to extract geometry, properties, or foreign key-value pairs. Concrete use cases include modeling geographic entities like points of interest, administrative boundaries, or spatial data overlays.",
      "description_length": 439,
      "index": 36,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Geojson.S-Geometry-Point",
      "library": "geojson",
      "description": "This module defines a point geometry with conversion to and from a position. It operates on `Geometry.Point.t` and `Geometry.Position.t` types. Useful for representing geographic points in a coordinate system and converting between different geometric representations.",
      "description_length": 268,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Geojson.S-Geometry-LineString",
      "library": "geojson",
      "description": "This module represents a GeoJSON LineString geometry, working with arrays of geographic positions. It provides functions to create a LineString from an array of positions and to extract the coordinates as an array. It ensures valid geometry by requiring at least two positions for construction.",
      "description_length": 294,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Accessor-Optics",
      "library": "geojson",
      "description": "This module provides optics-based accessors for working with GeoJSON data structures, enabling precise traversal and manipulation of nested geometric and feature data. It supports operations like focusing on specific properties within GeoJSON objects, handling optional fields, and working with either/or data variants. Concrete use cases include extracting coordinates from geometries, updating properties in feature collections, and safely accessing nested data in GeoJSON structures.",
      "description_length": 486,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Geometry-MultiPoint",
      "library": "geojson",
      "description": "This module represents a GeoJSON multipoint geometry, storing an array of geographic positions. It provides functions to create a multipoint from an array of coordinates and to extract the coordinate array from an existing multipoint. Use this module when handling GeoJSON data that represents multiple distinct points, such as a collection of city locations or GPS waypoints.",
      "description_length": 376,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Geometry-Polygon",
      "library": "geojson",
      "description": "This module handles polygon geometries by providing operations to access and construct linear rings. It works with `Geometry.Polygon.t` and arrays of `Geometry.LineString.t` and `Geometry.Position.t`. Use it to extract exterior and interior rings, create polygons from closed line strings, or convert polygons to and from position arrays.",
      "description_length": 338,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson.S-Random",
      "library": "geojson",
      "description": "This module generates random GeoJSON objects based on a provided structure, using a custom float generator. It supports constructing points, lines, polygons, and their multi-variants, as well as feature collections with optional properties. Concrete use cases include generating test data for GIS applications or populating mock APIs with valid GeoJSON structures.",
      "description_length": 364,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Geojson",
      "library": "geojson",
      "description": "This module provides geometric data structures and operations for handling GeoJSON data, including points, lines, and polygons, with support for parsing, constructing, and transforming geographic features and their properties. It defines core types like `geojson`, `geometry`, and `feature`, along with operations to validate, filter, and convert geospatial data, often in conjunction with lenses, prisms, and optics from submodules for safe and precise manipulation of nested fields. Use it to extract or update a feature's geometry using lenses, transform coordinates in a polygon with optics, or generate test GeoJSON data with customizable shapes and properties. Submodules handle specific tasks like coordinate representation, feature collections, and multi-geometry types, enabling applications such as mapping, geolocation services, and spatial analysis.",
      "description_length": 861,
      "index": 43,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 44,
    "meaningful_modules": 44,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 861,
    "min_description_length": 229,
    "avg_description_length": 425.09090909090907,
    "embedding_file_size_mb": 0.16020870208740234
  }
}