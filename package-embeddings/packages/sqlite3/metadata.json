{
  "package": "sqlite3",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:54:41.233513",
  "modules": [
    {
      "module_path": "Sqlite3.Backup",
      "library": "sqlite3",
      "description": "Handles incremental backups between SQLite databases by copying pages from a source to a destination. It provides functions to initialize a backup session, execute page transfers in steps, and finalize the process. This module is ideal for implementing live database backups or migrations without blocking database access.",
      "description_length": 322,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sqlite3.Data",
      "library": "sqlite3",
      "description": "This module provides type conversion operations between OCaml's primitive values (integers, floats, strings, booleans) and SQLite's data representation, including explicit handling of optional values via `None` to `NULL` mapping. It defines a variant type to encapsulate SQLite data and offers both safe (returning `option`) and unsafe (raising exceptions) coercion functions for precise type transformations. These utilities are essential for database interactions such as query result parsing, where robust handling of absent or invalid data is required.",
      "description_length": 556,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sqlite3.Rc",
      "library": "sqlite3",
      "description": "This module defines return codes for SQLite operations, including success and error conditions. It provides functions to convert return codes to integers or strings, check for success, and raise exceptions on errors. Use cases include handling database operation outcomes and debugging failed queries.",
      "description_length": 301,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sqlite3.Aggregate",
      "library": "sqlite3",
      "description": "This module enables defining custom aggregate and window functions for SQLite databases. It supports operations with step, final, inverse, and value functions, handling data types like `'a` and `Sqlite3.Data.t`. Concrete use cases include implementing custom aggregations like averages or windowed sums directly in SQL queries.",
      "description_length": 327,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 4,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8
  },
  "statistics": {
    "max_description_length": 556,
    "min_description_length": 301,
    "avg_description_length": 376.5,
    "embedding_file_size_mb": 0.05835437774658203
  }
}