{
  "package": "markup",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:07.551033",
  "modules": [
    {
      "module_path": "Markup.Error",
      "description": "Handles error representation and conversion to strings, incorporating location details when available. Works with a variant type `t` that encapsulates different error cases. Used to generate informative error messages during parsing or validation processes.",
      "description_length": 257,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Markup.Encoding",
      "description": "Decodes a stream of characters into a sequence of integers using a specified encoding, with optional error reporting. It processes character streams and outputs integer streams, supporting asynchronous execution. This is used to transform raw byte data into meaningful numeric representations during data parsing.",
      "description_length": 313,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Markup.Ns",
      "description": "Provides string values for standard XML namespace URIs, including HTML, SVG, MathML, XML, XMLNS, and XLink. Works with string data types to represent namespace identifiers in XML-based formats. Used to construct and validate XML documents requiring proper namespace declarations.",
      "description_length": 279,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "markup",
      "description": "Parses byte streams into structured signals using HTML5 and XML parsing logic, handling incomplete input and errors gracefully. Processes raw data sequences and emits incremental output as input is received. Enables real-time processing of network or file data without requiring full input upfront.",
      "description_length": 298,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Markup",
      "description": "Encodes and decodes character streams into integer sequences using specified encodings, supporting asynchronous processing. It handles raw data transformation, allowing for error reporting and non-blocking execution. Functions accept and return I/O promises, enabling integration with monadic I/O libraries. For example, it can convert UTF-8 byte streams into Unicode code points or process CSV data asynchronously.",
      "description_length": 415,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 415,
    "min_description_length": 257,
    "avg_description_length": 312.4,
    "embedding_file_size_mb": 0.018609046936035156
  }
}