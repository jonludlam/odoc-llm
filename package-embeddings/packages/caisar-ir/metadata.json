{
  "package": "caisar-ir",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 13,
  "creation_timestamp": "2025-07-15T23:08:27.095660",
  "modules": [
    {
      "module_path": "Ir.Nier_cfg.NierCFG.V",
      "library": "caisar-ir",
      "description": "This module implements a labeled vertex structure with support for comparison, hashing, and equality checks. It works with vertices of type `V.t` that carry labels of type `V.label`, enabling efficient identification and manipulation of nodes in a control flow graph. Concrete use cases include representing and managing nodes during the transformation and verification of neural network models from ONNX into a formal intermediate representation.",
      "description_length": 447,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFGFloat.E",
      "library": "caisar-ir",
      "description": "This module implements directed edges for a graph structure where nodes hold float values stored in Bigarray. It provides functions to create edges with labels, retrieve source and destination nodes, and compare edges based on their direction. Concrete use cases include constructing and manipulating computational graphs derived from ONNX models for verification purposes.",
      "description_length": 373,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFG.E",
      "library": "caisar-ir",
      "description": "This module implements directed edges for a control flow graph, where each edge connects two vertices and carries a label. It supports creating edges between vertices with a specified label, retrieving the source and destination vertices, and comparing edges based on their direction. This module is used to represent labeled transitions between nodes in a neural intermediate representation.",
      "description_length": 392,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFGFloat.V",
      "library": "caisar-ir",
      "description": "This module represents vertices in a graph structure where each vertex holds a label containing a float value stored in a `Bigarray.float64_elt`. It provides operations to create vertices, retrieve their labels, and compare, hash, and check equality of vertices based on their labels. It is used to construct and manipulate intermediate graph representations of neural networks, specifically handling floating-point data during conversion from ONNX models.",
      "description_length": 456,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.VInput",
      "library": "caisar-ir",
      "description": "This module handles input-specific transformations and mappings for intermediate representation nodes, focusing on converting low-level input data into structured string formats. It operates on types `l` and `r`, which represent input and result states, and provides the `convert_f` function to translate input values into string representations. Concrete use cases include preparing input data for verification processes and formatting model inputs for further analysis or logging.",
      "description_length": 482,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.Edge",
      "library": "caisar-ir",
      "description": "This module defines a concrete edge type for representing connections between nodes in a neural intermediate representation. It provides comparison and equality operations for edge values, along with a default edge instance. It is used to construct and manipulate control flow graphs derived from ONNX models during verification.",
      "description_length": 329,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ir.Nier_cfg.Tensor",
      "library": "caisar-ir",
      "description": "This module implements multi-dimensional tensor operations for a neural intermediate representation, handling shape manipulation, indexing, and element-wise comparisons. It works with a tensor type parameterized over two types and an integer array shape type, supporting concrete operations like tensor creation, coordinate-based access, flattening, transposition, and shape inference for unsqueezing. Specific use cases include representing and transforming neural network layer outputs during ONNX model verification.",
      "description_length": 519,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFGFloat",
      "library": "caisar-ir",
      "description": "This module provides imperative control flow graphs for neural network intermediate representations with float-typed nodes, supporting structural operations like edge manipulation, traversal, and shape inference. It works with vertices holding float64 values in Bigarrays and directed edges that define computational relationships between nodes. You can build and modify computational graphs derived from ONNX models, track data dependencies, and verify structural properties during model translation. Vertex and edge submodules enable precise label handling, comparison, and graph construction based on directional flow and numeric data.",
      "description_length": 638,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.MakeVertex",
      "library": "caisar-ir",
      "description": "This module implements vertex management for a neural intermediate representation, providing operations to create, compare, and label vertices. It works with a node type parameterized by input and result types, supporting concrete use cases like building and analyzing computational graphs from ONNX models. Key functions include vertex creation, label extraction, and standard comparison operations for use in graph algorithms and verification pipelines.",
      "description_length": 455,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFG",
      "library": "caisar-ir",
      "description": "This module provides a directed control flow graph structure tailored for neural network intermediate representations, combining polymorphic graph operations with labeled vertices and edges to support precise input dependency tracking. It enables dynamic graph construction and analysis through vertex/edge membership checks, degree calculations, and predecessor/successor traversal, while its vertex module handles labeled node identification and its edge module manages directed, labeled transitions between nodes. Use cases include ONNX model verification via structured graph traversal and transformation, such as mapping over vertices to update node labels or folding over edges to accumulate control flow properties. The integration of typed graph elements with comparison, hashing, and directional semantics allows for efficient manipulation and analysis of neural network control flows.",
      "description_length": 894,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.Node",
      "library": "caisar-ir",
      "description": "This module provides operations for constructing and inspecting computational graph nodes in a neural intermediate representation, focusing on tensor shapes, neural operators (e.g., convolution, activation functions), and associated parameters. It works with polymorphic node types that encapsulate data, input/output states, and operator-specific configurations, enabling introspection of node properties like neuron counts and custom string serialization. These capabilities support use cases such as translating ONNX models into verifiable terms, analyzing neural network architectures, and debugging graph transformations during compilation or optimization.",
      "description_length": 661,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg",
      "library": "caisar-ir",
      "description": "This module organizes a neural intermediate representation as a control flow graph, enabling the translation of ONNX models into verifiable forms. It supports construction and manipulation of graphs made of nodes and edges, where nodes encapsulate tensor data and neural operators, and edges represent computational or control dependencies; tensor operations handle shape transformations and element-wise manipulations, while input mappings convert low-level data into structured formats. You can build graphs with float-typed nodes, inspect and modify tensor shapes, track input dependencies, and perform graph traversals to analyze or transform neural network structures during verification. Concrete tasks include mapping ONNX layers to labeled graph nodes, converting input tensors into string representations for logging, and verifying control flow properties through directed graph analysis.",
      "description_length": 897,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir",
      "library": "caisar-ir",
      "description": "This module represents neural networks as control flow graphs, where nodes contain tensor data and operations, and edges define computational or control dependencies. It provides data types for nodes with float tensors, edges for dependencies, and operations to construct, traverse, and modify graphs. You can map ONNX layers to labeled nodes, transform tensor shapes, convert tensor inputs to strings for logging, and analyze control flow properties through graph traversal. Specific uses include translating ONNX models into structured graphs, inspecting input dependencies, and performing verification tasks using directed graph analysis.",
      "description_length": 641,
      "index": 12,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 897,
    "min_description_length": 329,
    "avg_description_length": 552.6153846153846,
    "embedding_file_size_mb": 0.04763507843017578
  }
}