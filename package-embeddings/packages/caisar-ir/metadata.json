{
  "package": "caisar-ir",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 12,
  "creation_timestamp": "2025-08-14T23:20:01.638382",
  "modules": [
    {
      "module_path": "Ir.Nier_cfg.NierCFGFloat.V",
      "library": "caisar-ir",
      "description": "This module implements a vertex type for a graph structure where each vertex holds a label of type `Node.t` with float values stored in a float64 Bigarray. It provides operations to create vertices, retrieve their labels, and compare, hash, or check equality of vertices based on their labels. It is used to represent and manipulate nodes in a computational graph derived from ONNX models, specifically for handling floating-point data during intermediate transformations.",
      "description_length": 472,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFG.E",
      "library": "caisar-ir",
      "description": "This module implements directed edges for a control flow graph (CFG) used in transforming ONNX models into verifiable intermediate representations. Each edge connects two vertices with a label, supporting creation, comparison, and access to source and destination vertices. It is used to represent and manipulate labeled transitions between nodes in the NIER CFG structure.",
      "description_length": 373,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFG.V",
      "library": "caisar-ir",
      "description": "This module defines comparable vertex types for a neural intermediate representation, where vertices are labeled and support equality, comparison, and hashing operations. It works with vertex values of type `V.t` and their associated labels of type `V.label`, using them to construct and inspect vertex instances. Concrete use cases include managing control flow graph nodes during translation from ONNX models into verifiable terms.",
      "description_length": 433,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFGFloat.E",
      "library": "caisar-ir",
      "description": "This module implements directed edges for a graph structure where nodes hold float values stored in Bigarrays. Each edge connects two vertices and carries a label, supporting creation, comparison, and access to source and destination vertices. It is used to construct and manipulate computational graphs derived from ONNX models for verification purposes.",
      "description_length": 355,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFG",
      "library": "caisar-ir",
      "description": "This module provides control flow graph (CFG) manipulation operations, including structural queries, vertex/edge modification, and traversal utilities for directed labeled graphs. It works with a graph type `t` composed of vertices and edges, supporting labeled/unlabeled edge iterations, predecessor/successor analysis, and container-like transformations (`map`, `fold`, `copy`). Specific use cases include translating ONNX models into verifiable terms, analyzing neural network input nodes, and managing control flow structures during intermediate representation transformations.",
      "description_length": 581,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.Node",
      "library": "caisar-ir",
      "description": "This module provides operations for constructing and analyzing computational graph nodes in a neural intermediate representation, focusing on tensor shapes, neural operators (e.g., convolution, activation functions), and their configuration parameters. It supports structural manipulation, property extraction (e.g., neuron counts, node type checks), and customizable string serialization, primarily for translating ONNX model components into verifiable symbolic terms. Key use cases include intermediate representation generation, graph analysis, and formal verification workflows.",
      "description_length": 582,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ir.Nier_cfg.MakeVertex",
      "library": "caisar-ir",
      "description": "This module implements vertex management for a neural intermediate representation, providing operations to create, compare, and label vertices. It works with a parameterized intermediate representation that includes left and right annotations. Concrete use cases include constructing and manipulating nodes during the translation of ONNX models into a verifiable form.",
      "description_length": 368,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFGFloat",
      "library": "caisar-ir",
      "description": "This module implements a mutable directed graph structure for computational graphs extracted from ONNX models, where vertices encapsulate float64 values stored in Bigarrays and edges represent data dependencies between operations. It provides operations to query graph topology (vertex/edge counts, adjacency lists), modify structure imperatively (insert/remove nodes/edges, iterative traversal), and perform neural network-specific analyses like tensor shape inference and data flow propagation. The design supports iterative graph construction and transformation tasks critical for translating ONNX models into verifiable intermediate representations while preserving numerical precision and data dependencies.",
      "description_length": 712,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ir.Nier_cfg.Edge",
      "library": "caisar-ir",
      "description": "This module defines a concrete edge type for a neural intermediate representation, based on strings, with comparison and equality operations. It provides a default edge value and supports direct string-based identification and ordering. Used to represent and manipulate connections between nodes in a neural graph during translation from ONNX models.",
      "description_length": 350,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.Tensor",
      "library": "caisar-ir",
      "description": "This module implements a tensor structure with shape management, indexing, and transformation operations for representing and manipulating multi-dimensional data in a neural intermediate representation. It supports creating, accessing, and modifying tensor elements, comparing tensors, flattening tensors, and performing dimension transpositions and unsqueezing operations. Concrete use cases include handling tensor shapes during ONNX model conversion, validating tensor indices, and preparing tensor data for verification processes.",
      "description_length": 534,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg",
      "library": "caisar-ir",
      "description": "This module implements a neural intermediate representation with tensor manipulation, computational graph construction, and control flow graph analysis. It provides tensor operations for shape management and transformation, graph components for representing neural network operations and data dependencies, and mutable graph structures for preserving numerical precision during ONNX model translation. Concrete use cases include converting ONNX models into verifiable symbolic terms, analyzing tensor shapes during translation, and managing data flow dependencies in neural network graphs.",
      "description_length": 589,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir",
      "library": "caisar-ir",
      "description": "This module implements a neural intermediate representation for tensor manipulation, computational graph construction, and control flow analysis. It provides operations for tensor shape management, graph node creation, and mutable graph traversal, working with tensors, graph nodes, and control flow structures. It is used to translate ONNX models into symbolic representations, analyze tensor shapes during conversion, and manage data dependencies in neural network graphs.",
      "description_length": 474,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 712,
    "min_description_length": 350,
    "avg_description_length": 485.25,
    "embedding_file_size_mb": 0.17427444458007812
  }
}