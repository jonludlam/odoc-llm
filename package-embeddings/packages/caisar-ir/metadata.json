{
  "package": "caisar-ir",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 13,
  "creation_timestamp": "2025-06-18T16:32:16.692018",
  "modules": [
    {
      "module_path": "Ir.Nier_cfg.NierCFG.V",
      "description": "Compares, hashes, and checks equality of vertex instances based on their internal representation. Constructs vertices from labels and retrieves labels from vertex objects. Used to manage unique vertex identifiers in graph algorithms requiring ordered and hashable elements.",
      "description_length": 273,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFG.E",
      "description": "Provides operations to compare edges, extract source and destination vertices, retrieve labels, and construct edges from vertices and labels. Works with edge structures composed of source and destination vertices paired with a label. Used to represent directed connections in graph algorithms where edge direction and labeling are critical.",
      "description_length": 340,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFGFloat.V",
      "description": "Provides operations to compare, hash, and check equality of vertices, and to create and extract labels from them. Works with vertex types represented as nodes with float-based elements and labels of the same structure. Used to manage and identify unique vertices in graph algorithms requiring precise equality and hashing.",
      "description_length": 322,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFGFloat.E",
      "description": "Provides operations to compare edges, extract source and destination vertices, retrieve labels, and construct edges from vertices and labels. Works with edge structures composed of vertices and labels, where vertices are represented as generic float arrays and labels are edges themselves. Used to model directed connections in graph-based data structures with precise vertex and label handling.",
      "description_length": 395,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.Tensor",
      "description": "Provides operations to create, access, and modify multi-dimensional arrays, including retrieving and setting values by coordinates, flattening tensors, transposing 2D dimensions, and computing the number of elements in a shape. Works with nested lists representing shapes and generic tensors that store values of any type. Enables precise manipulation of tensor data structures in machine learning and numerical computing contexts.",
      "description_length": 431,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.Node",
      "description": "This module handles operations for managing node metadata, including converting node data to strings, comparing nodes, and retrieving attributes like names, shapes, and operators. It works with structured data representing neural network parameters (e.g., kernel size, stride) and node relationships, enabling tasks such as model analysis and transformation. Specific use cases include configuring convolutional layers and inspecting operator dependencies during model construction.",
      "description_length": 482,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.MakeVertex",
      "description": "Converts a value of type `l` to a base string representation. Operates on custom data types `l` and `r` for specific transformation tasks. Used to generate unique identifiers from structured data in graph processing workflows.",
      "description_length": 226,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg.Edge",
      "description": "Compares and checks equality of string-based edge identifiers using base library primitives. Operates on strings to represent directed connections between nodes. Used to standardize edge comparisons in graph traversal algorithms.",
      "description_length": 229,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFG",
      "description": "Converts elements of type `l` to base strings using a predefined mapping. Operates on custom types `l` and `r` representing parsed configuration data. Used to generate human-readable output from internal configuration representations.",
      "description_length": 234,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ir.Nier_cfg.NierCFGFloat",
      "description": "manages graph structures with float-based vertices and labeled edges, offering operations to iterate over successors and predecessors, fold over edges, and infer shapes of neural network nodes. it supports vertex comparison, hashing, and labeling, along with edge construction, source/destination extraction, and label retrieval. examples include iterating over all predecessors of a node, inferring output shapes based on input shapes and operators, and extracting predecessor node names. it enables precise graph traversal and analysis, particularly in neural network contexts.",
      "description_length": 579,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir.Nier_cfg",
      "description": "Converts values of type `l` to base strings using a predefined configuration. Operates on custom types `l` and `r` derived from configuration data. Used to generate standardized string representations for logging and output in system diagnostics.",
      "description_length": 246,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "caisar-ir",
      "description": "Provides functions for analyzing model behavior, generating adversarial examples, and evaluating robustness metrics. Operates on neural network architectures, input data tensors, and performance evaluation reports. Used to test model resilience against perturbations and validate safety constraints in AI systems.",
      "description_length": 313,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ir",
      "description": "Converts custom types derived from configuration data into standardized string representations. Supports operations on types `l` and `r` to produce base strings for logging and diagnostics. Allows consistent formatting of complex values based on predefined rules. For example, transforms internal state representations into human-readable logs or error messages.",
      "description_length": 362,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 13,
    "meaningful_modules": 13,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 579,
    "min_description_length": 226,
    "avg_description_length": 340.9230769230769,
    "embedding_file_size_mb": 0.047690391540527344
  }
}