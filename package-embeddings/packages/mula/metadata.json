{
  "package": "mula",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 45,
  "creation_timestamp": "2025-07-15T23:14:55.811630",
  "modules": [
    {
      "module_path": "Internal.Matcher.Make.GBV",
      "library": "mula.internal",
      "description": "Implements character and bit vector operations for string matching tasks. Works with bit vectors, strings, and integer indices to support efficient pattern scanning. Used to extract characters, compute bit vector representations, and calculate size parameters for matching windows.",
      "description_length": 281,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.DFA.Make.DFA",
      "library": "mula.internal",
      "description": "This module implements a deterministic finite automaton (DFA) construction and manipulation system using sets of NFA states and bitvector-labeled transitions. It supports adding states and transitions, tracking marked and unmarked state sets, and iteratively building the DFA from an NFA using subset construction. Concrete use cases include converting NFAs to DFAs, minimizing state transitions, and printing the resulting automaton structure for analysis or code generation.",
      "description_length": 476,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Internal.DFA.Make.NFAStateSetMap",
      "library": "mula.internal",
      "description": "This module implements finite maps keyed by sets of NFA states, supporting efficient insertion, lookup, and traversal operations over these state sets. It provides transformation and filtering capabilities for maps with generic value types, along with ordered key handling and conversion to sequences or lists. Typical applications include representing state transitions during DFA construction and managing equivalence relations between NFA state configurations.",
      "description_length": 463,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.DFA.Make.NFAStateSetSet",
      "library": "mula.internal",
      "description": "This module provides operations for managing collections of NFA state sets, including union, intersection, difference, filtering, and transformations via iteration or folding. It works with sets of `NFA.StateSet.t` values, enabling efficient membership checks, comparisons, and conversions to lists or sequences. These capabilities are essential for automata processing tasks like subset construction in DFA generation, where tracking groups of NFA states is required.",
      "description_length": 468,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.LevBVNFA.StateSet",
      "library": "mula.internal",
      "description": "This module manages sets of states in a Levenshtein automaton, providing operations to initialize a state set from a start state, find indices in arrays using a predicate, and compute the minimum cost of a set of states. It works directly with arrays and a custom state type representing automaton states. Concrete use cases include tracking active states during automaton traversal and determining optimal state transitions based on cost.",
      "description_length": 439,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.Matcher.NFA_t",
      "library": "mula.internal",
      "description": "Handles non-deterministic finite automaton (NFA) operations for pattern matching. Works with states represented as integers and transitions stored as a map from states to sets of (character, state) pairs. Used to simulate NFA execution, track active states during matching, and expand transitions for regex-like pattern processing.",
      "description_length": 331,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.LevBVNFA.Transitions",
      "library": "mula.internal",
      "description": "Computes all reachable states in a bounded value NFA by applying transitions for a given bitvector and step count. Works with state sets and bitvectors to model NFA transitions under specific constraints. Useful for analyzing state reachability in formal verification tasks involving bitvector operations.",
      "description_length": 305,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.DemarauNFA.Transitions",
      "library": "mula.internal",
      "description": "This module computes state transitions for a Demarau-NFA, handling operations like deletions and substitutions/insertions. It works with states represented as bit vectors and state sets for tracking active states. Concrete use cases include advancing states in a non-deterministic automaton during approximate string matching with bounded edit distance.",
      "description_length": 353,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.LevNFA.Transitions",
      "library": "mula.internal",
      "description": "This module computes state transitions for a Levenshtein NFA, handling delete, substitute, and insert operations within a bounded edit distance. It operates on states and bit vectors, producing next states based on the current state and input bit vector. Concrete use cases include efficiently evaluating possible edits in approximate string matching algorithms.",
      "description_length": 362,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.DemarauNFA.StateSet",
      "library": "mula.internal",
      "description": "This module provides set-theoretic operations for managing collections of NFA states, including union, intersection, difference, and membership checks, alongside transformations like mapping and filtering. It operates on sets of `Internal.DemarauNFA.State.t` values, with support for sequence conversions, subsumption analysis, and cost-based reductions. These capabilities are particularly useful in automata processing tasks such as state optimization, path analysis, and efficient representation of non-deterministic transitions in parsing or pattern-matching applications.",
      "description_length": 576,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Internal.LevNFA.State",
      "library": "mula.internal",
      "description": "This module represents states in a Levenshtein NFA as pairs of lanes and error counts, providing comparison and pretty-printing operations. It works with tuples of type `Internal.LevNFA.lane` and `Internal.LevNFA.errors`. Use this module to manage and display state transitions within the Levenshtein NFA during string matching or error-tolerant parsing.",
      "description_length": 354,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Internal.DemarauBVNFA.Transitions",
      "library": "mula.internal",
      "description": "Computes all possible state transitions for a given state set and input bitvector, up to a specified edit distance `k`. Works with state sets and bitvectors to model approximate matching transitions in a bounded edit distance automaton. Useful for efficiently tracking possible state evolutions in approximate string matching algorithms.",
      "description_length": 337,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.NFA.NFA_t-Transitions",
      "library": "mula.internal",
      "description": "Handles transition logic for NFA states using bit vectors to represent state sets. It computes all reachable states from a given state set with a transition function applied to each state. Useful for implementing efficient NFA simulations in lexers or parsers.",
      "description_length": 260,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Internal.Matcher.NFA_t-StateSet",
      "library": "mula.internal",
      "description": "This module represents a set of states in a non-deterministic finite automaton (NFA) used for matching operations. It provides functions to initialize a state set with a starting state and to compute the minimum cost of transitions among active states. It is used during pattern matching to track possible states and determine the lowest cost path through the automaton.",
      "description_length": 370,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.Matcher.Make",
      "library": "mula.internal",
      "description": "This module implements a fuzzy matching algorithm using a bounded Levenshtein distance approach, processing input either character by character or as a whole string while tracking the minimum edit distance to match a prefix against a target pattern. It provides core operations such as initializing a match state, feeding input to update the state, and retrieving the current error distance or final result. The accompanying submodule handles low-level character and bit vector operations, enabling efficient pattern scanning through bit representations, string indexing, and window size calculations. Together, they support tasks like approximate string matching, error-tolerant parsing, and dynamic input analysis with controlled computational bounds.",
      "description_length": 753,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.StringOps.BitVecOps",
      "library": "mula.internal",
      "description": "This module provides functions to construct and manipulate bit vectors derived from string-like structures, particularly for representing character properties at specific positions. It supports operations like extracting characters, computing sizes for bit vector allocations, and building bit vectors for substrings or sentinel values. Concrete use cases include efficient substring matching and encoding character presence or absence patterns in parsing or search algorithms.",
      "description_length": 477,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.Matcher.NFA_t-Transitions",
      "library": "mula.internal",
      "description": "Handles state transitions in a non-deterministic finite automaton (NFA) by computing all reachable states from a given set of states and a bit vector representing input conditions. Works with StateSet.t for tracking states and Internal.BitVec.t for encoding transition conditions. Used during pattern matching to efficiently determine possible NFA state transitions based on input tokens.",
      "description_length": 388,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Internal.Matcher.S",
      "library": "mula.internal",
      "description": "This module implements character-level pattern matching operations over sequences of type `t`, where individual elements are of type `ch`. It provides direct access to elements via indexing, determines sequence length, and compares elements for equality. Concrete use cases include parsing input streams, tokenizing strings, and implementing custom lexers or scanners.",
      "description_length": 368,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.LevNFA.StateSet",
      "library": "mula.internal",
      "description": "This module enables efficient manipulation of NFA state collections through standard set operations like union, intersection, and membership checks, alongside transformations such as mapping, filtering, and partitioning. It works with sets of NFA states, incorporating specialized utilities for subsumption-based reduction, cost retrieval, and error state detection, while supporting conversions to and from lists and sequences. These operations are particularly valuable in automata processing scenarios, such as optimizing state transitions or analyzing error conditions in NFA-based systems.",
      "description_length": 594,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.DFA.Make",
      "library": "mula.internal",
      "description": "This module suite provides a system for constructing and manipulating deterministic finite automata from non-deterministic counterparts using set-based state representations. It centers around finite maps keyed by NFA state sets, supporting transitions, equivalence tracking, and transformations through operations like union, intersection, and filtering. You can convert an NFA to a DFA via subset construction, minimize states, and generate structured output for analysis or code generation. Specific operations include adding transitions between state sets, mapping over values associated with state configurations, and performing set algebra to manage automaton states during processing.",
      "description_length": 691,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.NFA.NFA_t",
      "library": "mula.internal",
      "description": "This module represents a non-deterministic finite automaton using states, transitions, and state sets. It supports operations such as adding transitions between states, evaluating input sequences to determine reachable states, and checking acceptance of input strings. Concrete use cases include implementing regular expression engines and parsing simple formal languages.",
      "description_length": 372,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.DemarauBVNFA.StateSet",
      "library": "mula.internal",
      "description": "This module manages sets of states in a Demarau-Levenshtein automaton, providing operations to initialize a state set from a start state, find indices in arrays using a predicate, compute the minimum cost of a set of states, and pretty-print state sets. It works directly with arrays and a custom state set type representing active states in the automaton. Concrete use cases include tracking possible automaton states during fuzzy matching and determining the lowest edit cost during approximate string search.",
      "description_length": 511,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.NFA.NFA_t-StateSet",
      "library": "mula.internal",
      "description": "This module facilitates functional manipulation of ordered sets of states, offering operations for union, intersection, difference, membership checks, and ordered iteration with extremal element queries. It leverages a typed ordered set structure (`t`) to enable efficient transformations like mapping, filtering, and sequence-based construction, alongside utilities for deterministic traversal and state set formatting. Common use cases include tracking reachable states in automata transitions, managing state subsets for NFA simulations, and generating human-readable state set representations.",
      "description_length": 597,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.DemarauNFA.State",
      "library": "mula.internal",
      "description": "This module defines two state types, `Std` and `Trans`, each carrying `lane` and `error` integer fields, representing states in a Demarau NFA automaton. It provides `compare` for ordering states and `pp_state` for pretty-printing them. These are used to track state transitions and error counts during pattern matching in a Demarau NFA implementation.",
      "description_length": 351,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.StringOps.S",
      "library": "mula.internal",
      "description": "This module defines core operations for working with strings and characters, including measuring string length, accessing characters by index, and comparing characters for equality. It works with two primary types: `t` representing a string-like structure and `ch` representing a character-like value. Concrete use cases include parsing text data, implementing custom string traversal, and building low-level text processing utilities.",
      "description_length": 435,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Internal.NFA.NFA_t-State",
      "library": "mula.internal",
      "description": "Represents states in a non-deterministic finite automaton (NFA) with a unique identifier and transition logic. Provides comparison operations to enable state ordering, essential for set and map operations during NFA manipulation. Used to track and manage state transitions in regular expression matching and automaton simulations.",
      "description_length": 330,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.NFA",
      "library": "mula.internal",
      "description": "This module provides a framework for constructing and simulating non-deterministic finite automata (NFAs), allowing users to define states, transitions, and accept states using integers and symbol mappings. It supports input evaluation to determine reachable states and assess language acceptance, enabling applications like regular expression matching and formal language parsing. Submodules enhance this core functionality by offering efficient state set manipulation using bit vectors, ordered state set operations for union and iteration, and structured state representations with transition logic. Together, they enable both high-level NFA construction and low-level optimization of simulation steps in lexers or pattern matchers.",
      "description_length": 735,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.BitVec",
      "library": "mula.internal",
      "description": "This module implements a compact bit vector representation using an integer type, supporting bitwise operations like OR, AND, and logical shifts. It provides functions to inspect and manipulate individual bits or ranges of bits, including utilities to append ones or zeros, check non-zero status, and fold over bit positions. Concrete use cases include efficient bit-level data processing, bitmask manipulation, and low-level protocol encoding/decoding.",
      "description_length": 453,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Internal.DFA",
      "library": "mula.internal",
      "description": "This module provides a system for building and transforming deterministic finite automata from non-deterministic ones using set-based state representations. It supports key operations such as subset construction, state minimization, and set algebra on transitions, enabling tasks like equivalence checking and structured output generation. Main data types include finite maps keyed by NFA state sets, with operations to add transitions, map over state configurations, and combine automata through union or intersection. Example uses include converting an NFA to a minimized DFA and analyzing state transitions using set-based filtering.",
      "description_length": 636,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Internal.LevNFA",
      "library": "mula.internal",
      "description": "This module implements a Levenshtein NFA for approximate string matching, tracking state transitions, error counts, and matching costs using custom types for lanes, errors, and state sets. It supports operations like evaluating transitions under insertions, deletions, and substitutions, and managing sets of states with efficient union, intersection, and filtering. You can use it to build fuzzy search algorithms that enforce bounded edit distances or optimize NFA state collections during error-tolerant pattern matching. The module combines core NFA logic with utilities for state manipulation, comparison, and transformation to enable efficient automaton processing.",
      "description_length": 671,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Internal.DemarauNFA",
      "library": "mula.internal",
      "description": "This module implements approximate string matching using a deterministic finite automaton with weighted transitions, modeling edit distance calculations through states, transition tables, and state sets. It supports insertions, deletions, substitutions, and transpositions with customizable integer costs, enabling fuzzy search and pattern matching with bounded error thresholds. The core functionality is complemented by submodules that handle state transitions with bit vector representations, perform set operations on state collections, and define state types with lane and error tracking. Specific capabilities include advancing automaton states, optimizing state paths, and pretty-printing state information during matching operations.",
      "description_length": 741,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.DemarauBVNFA",
      "library": "mula.internal",
      "description": "This module implements a finite automaton with bitvector-encoded states and transitions, optimized for efficient state manipulation and transition lookups using `BV.t` arrays. It computes state transitions under bounded edit distance and manages state sets with operations for initialization, cost tracking, and pretty-printing, enabling efficient approximate string matching and fuzzy search algorithms. The core supports fast union, intersection, and difference operations, while child modules handle transition enumeration up to a given edit distance and maintain active state sets with cost metrics. Example uses include regex engines for fuzzy matching and lexical analyzers tracking minimal edit costs during scanning.",
      "description_length": 724,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Internal.StringOps",
      "library": "mula.internal",
      "description": "This module treats strings as bit vectors to enable efficient bitwise operations like setting, clearing, and testing individual bits, along with bitwise arithmetic and comparisons. It supports low-level data processing tasks such as compression and cryptography, while its child modules handle bit vector construction, substring matching, and character property encoding. Core types include string-like `t` and character-like `ch`, with operations like length measurement, character access, and equality comparison. Examples include implementing custom parsing routines, optimizing text search with bit patterns, and encoding character presence in compact form.",
      "description_length": 661,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.LevBVNFA",
      "library": "mula.internal",
      "description": "This module implements a finite automaton with bitvector-encoded states and transitions, enabling efficient state set management and reachability analysis. It provides operations to add transitions, check state reachability, and compute minimal state costs, working directly with arrays and custom state types. The first child module supports tracking active states and determining optimal transitions by computing minimum costs, while the second explores reachable states under bitvector constraints, aiding formal verification tasks like model checking. Together, they enable efficient traversal and analysis of complex state spaces using bitvector operations and optimized state set representations.",
      "description_length": 702,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Internal.Matcher",
      "library": "mula.internal",
      "description": "This module provides core operations for pattern matching and NFA processing, enabling the compilation of patterns into NFAs, simulation of transitions, and matching against input streams. It works with string inputs and custom NFA representations, supporting lexical analysis and tokenization through direct APIs and submodules that manage state transitions, track active states, and compute transition costs. The fuzzy matching submodule enables approximate matching using bounded Levenshtein distance, while bit vector and character-level components optimize transition computation and input scanning. Examples include building regex matchers, implementing error-tolerant parsers, and tokenizing input streams with custom lexers.",
      "description_length": 732,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Internal",
      "library": "mula.internal",
      "description": "This module suite enables the construction, transformation, and simulation of finite automata for exact and approximate string matching. It centers on NFAs and DFAs with bitvector-encoded states and transitions, supporting operations like subset construction, state minimization, and error-tolerant matching through Levenshtein and weighted automata. Key data types include bit vectors for efficient state set manipulation, transition tables with cost metrics, and structured state representations for tracking errors and edit distances. You can use it to build regex engines, fuzzy search algorithms, and lexical analyzers that handle bounded edit distances, perform equivalence checks, and optimize state transitions using bitwise and set operations.",
      "description_length": 752,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mula.Match.Make.Dem",
      "library": "mula",
      "description": "This module implements a Demarau-Levenshtein automaton for approximate string matching up to a given edit distance *k*. It provides operations to initialize the automaton with a string and error limit, feed input characters incrementally, and query the current or final edit distance. The automaton works with strings represented as `St.t` and tracks error counts using internal state transitions that account for insertions, deletions, substitutions, and transpositions. Use cases include fuzzy search, spell checking, and real-time string similarity checks where partial matches are evaluated on-the-fly.",
      "description_length": 606,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mula.Match.Make.Lev",
      "library": "mula",
      "description": "This module implements a Levenshtein automaton for efficiently computing approximate string matches up to a given edit distance. It provides functions to initialize the automaton with a reference string and a maximum error limit, feed input characters incrementally, and query the current or final edit distance. It is useful for tasks like fuzzy string searching, where you need to determine if two strings are within a certain number of edits from each other.",
      "description_length": 461,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mula.Strings.Dem",
      "library": "mula",
      "description": "This module implements an NFA-based algorithm for computing the edit distance between strings with a bounded error threshold. It provides functions to initialize an automaton with a target string and error limit, feed input characters incrementally, and query the current or final error count. Concrete use cases include approximate string matching, spell checking, and fuzzy search where the maximum allowed edit distance is known in advance.",
      "description_length": 443,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mula.Match.S",
      "library": "mula",
      "description": "This module defines operations for matching over abstract string and character types. It provides functions to check character equality, retrieve characters by index, and compute string lengths. It supports use cases like pattern matching on encoded text or processing strings in a custom character encoding.",
      "description_length": 308,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mula.Strings.Lev",
      "library": "mula",
      "description": "This module implements an automaton for computing approximate string matches up to a given edit distance limit. It works with strings and a state type `nfa_state` to track edit operations as characters are processed incrementally. Concrete use cases include fuzzy matching, spell checking, and approximate substring search where the maximum allowed edit distance is known in advance.",
      "description_length": 383,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mula.Match.Make",
      "library": "mula",
      "description": "The module provides two automata-based implementations for approximate string matching with incremental processing. The main data types include `St.t` for string representations and internal state tracking structures that manage edit distances up to a given *k*. Operations allow initializing an automaton with a reference string and error bound, feeding input character by character, and querying the current or final edit distance. For example, you can check if a user's partial input is within 2 edits of a target string, or perform real-time fuzzy matching in a search interface.",
      "description_length": 583,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mula.Strings",
      "library": "mula",
      "description": "This module provides an NFA-based automaton for computing approximate string matches up to a specified edit distance limit. It supports initializing an automaton with a target string and error threshold, feeding input incrementally, and querying the current or final error count. The core data types include the target string, input characters, and the `nfa_state` type that tracks edit operations during processing. You can use it for fuzzy matching, spell checking, or approximate substring search where the maximum number of allowed edits is known in advance.",
      "description_length": 562,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mula.Match",
      "library": "mula",
      "description": "This module combines Levenshtein automata construction with abstract string processing to enable approximate string matching over custom character representations. It provides functions to build and run automata that track edit distances up to a specified bound, supporting incremental input evaluation and real-time fuzzy matching. The core operations include initializing automata from reference strings, feeding input characters sequentially, and querying current or final edit distances. For example, it can validate user input against a target string with up to two allowed edits, or perform fuzzy search over encoded text using custom character equality checks.",
      "description_length": 667,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mula",
      "library": "mula",
      "description": "This module enables approximate string matching using NFA-based automata that track edit distances up to a configurable limit. It supports incremental input processing, allowing real-time fuzzy matching and error tracking through core types like `nfa_state`. You can perform tasks like validating input with up to a fixed number of edits or searching for approximate substrings in encoded text. Custom character representations and equality checks further extend its use to specialized matching scenarios.",
      "description_length": 505,
      "index": 44,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 46,
    "meaningful_modules": 45,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9782608695652174
  },
  "statistics": {
    "max_description_length": 753,
    "min_description_length": 260,
    "avg_description_length": 501.4888888888889,
    "embedding_file_size_mb": 0.16392230987548828
  }
}