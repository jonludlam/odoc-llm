{
  "package": "github-jsoo",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 34,
  "creation_timestamp": "2025-06-18T16:38:57.773977",
  "modules": [
    {
      "module_path": "Github.Endpoint.Version",
      "description": "Provides functions to parse, compare, and format version strings according to semantic versioning conventions. Works with opaque version type and string representations to enable efficient cache validation and resource consistency checks. Used to determine if a resource has changed since a previous request by comparing version identifiers.",
      "description_length": 341,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Repo.Hook",
      "description": "Provides functions to retrieve, create, update, and delete GitHub repository hooks, as well as test hooks and parse webhook events. Operates on types like `Github_t.hook`, `Github_t.new_hook`, `Github_t.update_hook`, and `Github_t.event_hook_constr`. Used to manage post-receive hooks for repository events and process incoming webhook payloads.",
      "description_length": 345,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Organization.Hook",
      "description": "Retrieves, creates, updates, and deletes organization-level webhooks for GitHub, and processes webhook events and their metadata. Operates on types such as `Github_t.hook`, `Github_t.new_hook`, `Github_t.update_hook`, and `Github_t.event_hook_constr`. Used to manage notification configurations for repositories and trigger event testing within an organization.",
      "description_length": 361,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Response",
      "description": "Provides functions to extract the payload and redirect history from API responses, and to determine the final destination of a redirect chain. Operates on a private type representing API responses, including a list of redirect records. Used to process HTTP responses and determine the ultimate resource location after following redirects.",
      "description_length": 338,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Monad",
      "description": "Encapsulates Lwt threads with state management, enabling sequential API operations and exception handling. Provides binding and mapping operations to chain computations and transform results within the monadic context. Supports embedding raw Lwt threads and extracting the final result as an Lwt promise.",
      "description_length": 304,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Endpoint",
      "description": "Handles version comparisons and formatting for efficient cache validation and resource consistency checks. Operates on an opaque version type and string representations to determine if a resource has changed. Supports parsing \"1.2.3\", comparing versions for equality or precedence, and formatting versions for display. Enables precise control over API requests by ensuring only updated resources are fetched.",
      "description_length": 408,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Stream",
      "description": "Provides functions to lazily iterate over, transform, and process paginated API results, including fetching the next element, mapping over elements, folding across them, and finding specific items. Operates on a stream type that represents sequences of items from GitHub's API, with support for versioning and polling. Used to efficiently handle large datasets, perform incremental processing, and maintain state synchronization with remote API versions.",
      "description_length": 454,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Scope",
      "description": "Converts GitHub scope values to and from strings, and serializes lists of scopes for API use. Handles GitHub scope enumerations and their corresponding string representations. Parses and generates scope lists for API requests and permissions management.",
      "description_length": 253,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Token",
      "description": "Provides functions to generate, retrieve, and manage GitHub authorization tokens, including handling OAuth web flow codes and personal tokens. Works with types such as `Github_t.auth`, `string`, and `int64` to represent and manipulate token data. Used to create new authorizations with optional scopes, fetch existing authorizations by ID, and delete them, while supporting two-factor authentication via one-time passwords.",
      "description_length": 423,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.API",
      "description": "Provides HTTP method wrappers for GitHub API interactions, including GET, POST, DELETE, PATCH, and PUT with customizable headers, query parameters, and authentication tokens. Handles response parsing, error recovery, and rate limit tracking using monadic state for token and user agent configuration. Includes utilities for extracting error messages and cached rate limit data from API responses.",
      "description_length": 396,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.URI",
      "description": "Generates OAuth2 authorization and token endpoints using URI.t for web-based authentication flows. Constructs URLs for user redirection and token exchange with specific parameters like client ID, secret, and code. Used to implement GitHub OAuth2 workflows in web applications.",
      "description_length": 276,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Filter",
      "description": "Provides functions to construct and manipulate filter criteria for querying GitHub resources, including sorting options, date ranges, and qualifier-based constraints. Works with custom types such as `state`, `milestone`, `user`, and `date` to represent specific filter conditions. Used to refine issue, repository, and user searches with precise sorting and qualification rules.",
      "description_length": 378,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Rate_limit",
      "description": "Provides functions to retrieve rate limit details for different GitHub API regimes, including overall limits and specific core and search limits. Operates on token-based authentication and returns structured rate data. Used to monitor API usage constraints during request execution.",
      "description_length": 282,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.User",
      "description": "Provides functions to retrieve user information and repository data from GitHub. It works with user identifiers and authentication tokens to fetch structured user data and streams of repository details. Used to fetch authenticated user profiles and access public repository listings for specific accounts.",
      "description_length": 305,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Organization",
      "description": "Manages GitHub organization webhooks with operations to retrieve, create, update, and delete them, along with processing event data. Key types include `Github_t.hook`, `Github_t.new_hook`, `Github_t.update_hook`, and `Github_t.event_hook_constr`. It enables configuring notification systems and testing event triggers at the organization level. For example, it can set up a webhook to notify of repository pushes or update an existing hook to change its payload URL.",
      "description_length": 466,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Team",
      "description": "Provides functions to retrieve team information and associated repositories using a team ID and authentication token. Operates on integers for team identifiers and streams of repository data. Used to fetch detailed team metadata and list all repositories managed by a specific team.",
      "description_length": 282,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Event",
      "description": "Provides streams of GitHub events filtered by repository, organization, user activity, or public activity. Operates on user names, repository names, organization names, and authentication tokens. Retrieves event streams for a user's contributions, organization events, public GitHub activity, or a repository's fork network.",
      "description_length": 324,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Repo",
      "description": "Manages GitHub repository hooks with functions to retrieve, create, update, and delete them, along with testing and parsing webhook events. Key types include `Github_t.hook`, `Github_t.new_hook`, `Github_t.update_hook`, and `Github_t.event_hook_constr`. It enables handling post-receive hooks and processing incoming event payloads. Examples include setting up webhooks for repository updates and extracting event data from payloads.",
      "description_length": 433,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Stats",
      "description": "Provides functions to retrieve contributor statistics, commit activity by week, weekly code frequency, and commit counts by week and hour for a GitHub repository. Works with streams of contributor stats, commit activity, code frequency, and punch card data. Used to analyze contribution patterns, track weekly development trends, and identify peak commit times.",
      "description_length": 361,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Status",
      "description": "Provides operations to retrieve and create status reports for specific Git references in a GitHub repository. Works with Git SHAs, branch names, and tag names, along with status data structures. Used to fetch combined status information for a commit or post a new status update for a specific commit.",
      "description_length": 300,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Pull",
      "description": "Provides functions to retrieve, create, update, and merge GitHub pull requests, along with streams of associated commits and files. Operates on GitHub-specific data types such as pull requests, commits, and files. Enables programmatic interaction with pull requests in a repository, including checking merge status and applying updates.",
      "description_length": 336,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Issue",
      "description": "Provides functions to retrieve, create, and manage GitHub issues and their associated comments, labels, and events. Operates on issue data structures, including issue details, comments, labels, and event streams. Enables filtering issues by creator, assignee, labels, and state, and supports updating or deleting comments and labels on specific issues.",
      "description_length": 352,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Label",
      "description": "Retrieves, creates, updates, and deletes GitHub repository labels using a repository's owner and name. Operates on GitHub label data structures and authentication tokens. Fetches all labels from a repository, retrieves specific labels by name, adds new labels, modifies existing ones, and removes labels.",
      "description_length": 304,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Collaborator",
      "description": "Provides functions to retrieve, check, add, and remove GitHub repository collaborators. Operates on strings for user, repo, and collaborator names, and uses a token for authentication. Enables programmatic management of access control for specific repositories.",
      "description_length": 261,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Milestone",
      "description": "Provides functions to retrieve, create, update, and delete GitHub milestones, along with fetching associated labels. Operates on repository-specific milestones identified by user, repo, and milestone number, using streams for listing and responses for single entities. Enables programmatic management of milestone data and label associations within a repository.",
      "description_length": 362,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Release",
      "description": "Provides functions to retrieve, create, update, and delete GitHub releases and their assets. Operates on repository identifiers, release IDs, and asset metadata. Enables programmatic management of release versions, including fetching the latest release, creating new ones, and handling associated files.",
      "description_length": 303,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Deploy_key",
      "description": "Provides functions to retrieve, fetch, create, and delete deploy keys for specific GitHub repositories. Operates on repository identifiers, deploy key IDs, and key data structures such as `Github_t.deploy_key` and `Github_t.new_deploy_key`. Used to manage SSH keys for repository access control in automated deployment workflows.",
      "description_length": 329,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Gist",
      "description": "Provides functions to retrieve, create, update, and manage GitHub gists, including user-specific, public, and starred gists, along with operations for commits, stars, forks, and deletions. Works with stream and response types for gists, gist commits, and gist forks. Enables fetching a user's gists since a specific timestamp, creating new gists from structured data, and interacting with gist history and ownership.",
      "description_length": 416,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Emoji",
      "description": "Provides functions to retrieve GitHub's list of emojis, enabling integration of emoji data into applications. Works with token authentication and returns a structured response containing emoji mappings. Used to dynamically populate emoji options in text editors or chat interfaces.",
      "description_length": 281,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Check",
      "description": "Provides functions to interact with GitHub's check API, including creating, updating, and retrieving check runs and suites, listing annotations, and managing check suite preferences. Operates on data types such as check_run, check_runs_list, check_suite, and check_suite_list. Used to automate CI/CD pipeline status tracking, review check run details, and manage automated testing workflows via GitHub's API.",
      "description_length": 408,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Search",
      "description": "Provides functions to search for GitHub repositories and issues using specified qualifiers and keywords, with options to sort and order results. Works with custom types such as `Token.t`, `Filter.repo_sort`, `Filter.direction`, `Filter.qualifier list`, and `string list`. Used to fetch streamed search results for targeted repository and issue queries.",
      "description_length": 352,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Git_obj",
      "description": "Provides functions to convert Git object types to strings and split Git reference paths into directory and name components. Works with Git object types and string representations of references. Used to process Git object metadata and parse reference names for repository operations.",
      "description_length": 282,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "github-jsoo",
      "description": "Provides functions to interact with GitHub's REST API, including fetching repository data, listing commits, and managing pull requests. Works with OCaml types defined in `lib/github.atd`, such as repository metadata, commit hashes, and user information. Used to build tools for continuous integration, repository analysis, and token-based authentication workflows.",
      "description_length": 364,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github",
      "description": "Encapsulates GitHub API interactions through a suite of modules that handle HTTP requests, authentication, rate limiting, and response processing. Key data types include API response records, version strings, streams, and opaque token and scope representations, with operations for redirect resolution, version comparison, pagination, and OAuth2 flow management. It enables tasks such as fetching user data, managing repositories, tracking pull requests, and processing event streams, while supporting precise control over API rate limits and resource versioning. Examples include retrieving repository contributors, setting up webhooks, and analyzing commit activity patterns.",
      "description_length": 677,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 34,
    "meaningful_modules": 34,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 677,
    "min_description_length": 253,
    "avg_description_length": 354.61764705882354,
    "embedding_file_size_mb": 0.12393665313720703
  }
}