{
  "package": "github-jsoo",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 33,
  "creation_timestamp": "2025-08-15T12:25:41.058282",
  "modules": [
    {
      "module_path": "Github.Organization.Hook",
      "library": "github-jsoo",
      "description": "This module manages GitHub organization webhooks, providing functions to list, create, update, delete, and test hooks, as well as parse incoming webhook events. It operates on organization identifiers and hook data structures, supporting direct interaction with remote notification configurations. Concrete use cases include setting up CI/CD triggers, monitoring repository events, and integrating third-party services with GitHub organizations.",
      "description_length": 445,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Endpoint.Version",
      "library": "github-jsoo",
      "description": "This module defines types and functions for handling version metadata in HTTP responses, specifically using `Etag` and `Last_modified` values. It supports conditional requests by allowing comparison and serialization of version identifiers. Concrete use cases include validating cached API responses and making efficient HTTP requests using GitHub's versioning headers.",
      "description_length": 369,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Repo.Hook",
      "library": "github-jsoo",
      "description": "This module manages GitHub repository webhooks, providing functions to list, retrieve, create, update, delete, and test hooks. It works with repository identifiers, hook IDs, and serialized event data to interact with GitHub's webhooks API. Concrete use cases include setting up continuous integration triggers, monitoring repository events, and handling incoming webhook payloads.",
      "description_length": 381,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Rate_limit",
      "library": "github-jsoo",
      "description": "This module provides functions to retrieve rate limit information for different API regimes, specifically Core and Search. It works with authentication tokens to fetch detailed rate limit data from the API. Use this module to check remaining request quotas and avoid hitting rate limits when making API calls.",
      "description_length": 309,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Issue",
      "library": "github-jsoo",
      "description": "This module implements direct interactions with GitHub's issue tracking system, enabling retrieval, creation, and modification of issues and their associated comments, labels, and events. It operates on GitHub repositories and issues using identifiers like user, repo, and issue number, and handles structured data such as issue metadata, comments, and label lists. Concrete use cases include fetching a specific issue, listing all issues for a repository with custom filters, adding or removing labels from an issue, and posting or editing comments on an issue.",
      "description_length": 562,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Organization",
      "library": "github-jsoo",
      "description": "This module provides functions to retrieve teams, repositories, and organization memberships for users and the current token. It works with GitHub organization, team, repository, and user data structures through streaming operations. Concrete use cases include listing an organization's repositories for deployment automation, retrieving team members for access control, and fetching user organizations for permission management.",
      "description_length": 429,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Scope",
      "library": "github-jsoo",
      "description": "This module provides functions to convert between GitHub authorization scopes and their string representations, supporting both individual scopes and lists of scopes. It works with the `Github_t.scope` type and lists of that type, enabling precise handling of GitHub's API requirements. Concrete use cases include parsing scope strings from API responses and serializing scope lists for authentication requests.",
      "description_length": 411,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Response",
      "library": "github-jsoo",
      "description": "This module handles responses from direct GitHub API requests, providing access to the payload value, redirect chains, and final resource location. It works with response objects containing values of arbitrary type and lists of redirects, each carrying a URI and indicating temporary or permanent status. Concrete use cases include extracting the result of an API call, tracking redirect history, and determining the final destination of a redirected request.",
      "description_length": 459,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Gist",
      "library": "github-jsoo",
      "description": "This module implements direct interactions with GitHub's gist API, supporting operations like listing user, public, or starred gists, retrieving, creating, updating, forking, and deleting specific gists, as well as accessing their commit history and forks. It works with data types representing gists, gist commits, and gist forks, along with tokens for authentication. Concrete use cases include fetching a user's recent gists, creating a new gist with initial content, or forking and modifying an existing gist.",
      "description_length": 513,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Repo",
      "library": "github-jsoo",
      "description": "This module implements GitHub repository management and inspection operations, including creating, forking, and deleting repositories, fetching metadata, and accessing tags, branches, commits, and contributors. It works directly with repository identifiers (user/repo), Git references, and commit SHAs, returning structured data from GitHub's API. Concrete use cases include automating repository setup, retrieving commit history, listing contributors, and managing repository tags and branches.",
      "description_length": 495,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.URI",
      "library": "github-jsoo",
      "description": "This module generates URIs for GitHub OAuth2 authentication flows, including endpoints for authorizations, user redirection during authorization, and exchanging temporary codes for access tokens. It works with string identifiers like client IDs and secrets, optional scopes, and URIs for redirects. Concrete use cases include building redirect URLs for user authentication and finalizing OAuth2 token exchanges in web applications.",
      "description_length": 431,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Stats",
      "library": "github-jsoo",
      "description": "This module provides functions to retrieve detailed repository statistics from GitHub, including contributor activity, commit frequency, and commit counts. It works with data types like `contributor_stats`, `commit_activity`, `code_frequency`, `participation`, and `punch_card`, all representing different facets of repository activity. Concrete use cases include analyzing developer contributions over time, tracking weekly code changes, and visualizing commit patterns by hour and day.",
      "description_length": 487,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Label",
      "library": "github-jsoo",
      "description": "This module implements direct interactions with GitHub labels, offering retrieval, creation, update, and deletion of labels within specific repositories. It operates on repository identifiers and label data structures, handling authentication via optional tokens. Concrete use cases include managing issue categorization labels, synchronizing label metadata across repositories, and automating label-based workflows in CI/CD pipelines.",
      "description_length": 435,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.API",
      "library": "github-jsoo",
      "description": "This module implements direct interactions with GitHub's HTTP API, providing functions to send GET, POST, DELETE, PATCH, and PUT requests with customizable headers, query parameters, and authentication tokens. It works with data types such as `Uri.t` for endpoints, `Github.Token.t` for authentication, `Cohttp.Code.status_code` for status handling, and response parsers for structured data extraction. Concrete use cases include fetching paginated resources via `get_stream`, making authenticated API calls with `set_token`, handling rate limits using `get_rate_remaining`, and parsing error responses with `string_of_message`.",
      "description_length": 628,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Stream",
      "library": "github-jsoo",
      "description": "This module implements lazy, composable streams for consuming GitHub's paginated APIs, supporting operations like `next`, `map`, `fold`, and `find` for incremental, buffered traversal of large result sets. It works with generic data types `'a` and encapsulates HTTP-based pagination logic internally, allowing efficient traversal without loading all results into memory. Concrete use cases include iterating over GitHub repository events, user activity feeds, or issue lists where results span multiple API requests.",
      "description_length": 516,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Release",
      "library": "github-jsoo",
      "description": "This module implements direct interactions with GitHub's release management system, offering functions to list, create, update, delete, and inspect releases and their associated assets. It operates on repository identifiers and release data structures, supporting concrete workflows like retrieving the latest release, uploading binary assets, or deleting outdated release versions. Specific use cases include automating release creation for CI/CD pipelines, managing versioned software distributions, and synchronizing release assets across repositories.",
      "description_length": 555,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Emoji",
      "library": "github-jsoo",
      "description": "This module provides a function to retrieve the list of all emojis available for use on GitHub in GitHub-flavored markdown. It works with the `Github.Token.t` type for authentication and returns a response containing emoji data. A concrete use case is fetching emojis to display or process in a tool that integrates with GitHub's API.",
      "description_length": 334,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Git_obj",
      "library": "github-jsoo",
      "description": "This module provides functions for converting Git object types to strings and splitting Git reference paths into directory and name components. It operates on Git object types and string-based references. For example, it can parse a Git tag reference like \"refs/tags/v1.0\" into (\"tags\", \"v1.0\").",
      "description_length": 295,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Team",
      "library": "github-jsoo",
      "description": "This module provides functions to retrieve detailed information about a specific GitHub team and to list all repositories associated with that team. It works with team identifiers and interacts with GitHub's API to fetch team metadata and repository streams. Concrete use cases include fetching a team's description, members, and permissions, as well as enumerating the repositories the team has access to.",
      "description_length": 406,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Monad",
      "library": "github-jsoo",
      "description": "This module sequences GitHub API operations using a custom monad that threads state through Lwt-based asynchronous actions. It supports composing API requests with `bind` and `map`, handling errors with `catch`, and embedding raw Lwt threads with `embed`. Concrete use cases include chaining authenticated API calls, transforming response values with `map`, and safely handling exceptions within monadic workflows.",
      "description_length": 414,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Collaborator",
      "library": "github-jsoo",
      "description": "This module manages repository collaborators on GitHub by providing functions to list, check existence, add, and remove collaborators. It works with GitHub repositories and user identities, using tokens for authentication. Concrete use cases include synchronizing team access to a repository, enforcing access control, and auditing collaborator permissions.",
      "description_length": 357,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Deploy_key",
      "library": "github-jsoo",
      "description": "This module manages deploy keys for GitHub repositories, providing functions to list, retrieve, create, and delete deploy keys for a specific repository. It operates on repository identifiers, deploy key IDs, and new deploy key configurations, using GitHub's API to perform actions authenticated by an optional token. Concrete use cases include automating deploy key setup for CI/CD pipelines and managing repository access for external services.",
      "description_length": 446,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Search",
      "library": "github-jsoo",
      "description": "This module provides functions to search for repositories and issues on GitHub using keyword-based queries and filtering qualifiers. It supports sorting and direction options to refine result ordering. Concrete use cases include querying repositories by language or stars, and searching issues by label or assignee.",
      "description_length": 315,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Filter",
      "library": "github-jsoo",
      "description": "This module defines polymorphic variant types and associated qualifiers for constructing search and filter queries against the GitHub API. It supports filtering issues, repositories, and other resources by fields like state, author, label, date ranges, and numeric ranges. Concrete use cases include building precise GitHub issue search queries, filtering repositories by star count or update time, and specifying sorting and direction options for API requests.",
      "description_length": 461,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Pull",
      "library": "github-jsoo",
      "description": "This module provides functions to interact with GitHub pull requests, including listing, retrieving, creating, updating, and merging pull requests, as well as accessing their commits and files. It works with data types such as `Github_t.pull`, `Github_t.commit`, `Github_t.file`, and `Github_t.update_pull`, along with response and stream wrappers. Concrete use cases include automating pull request management, inspecting changes in a pull request, and merging pull requests programmatically.",
      "description_length": 493,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Endpoint",
      "library": "github-jsoo",
      "description": "This module defines types and functions for constructing and manipulating GitHub API endpoints, including path components, query parameters, and HTTP methods. It works with HTTP client libraries to enable precise API requests, such as fetching repository data or creating issues. Concrete use cases include building paginated requests and handling custom media types for GitHub's API versions.",
      "description_length": 393,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Event",
      "library": "github-jsoo",
      "description": "This module provides functions to retrieve streams of GitHub events filtered by repositories, organizations, users, and networks. It works with GitHub event data structures and token-based authentication to access public and private event streams. Concrete use cases include monitoring activity on specific repos, tracking organization events, or observing user-generated or received events.",
      "description_length": 391,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Token",
      "library": "github-jsoo",
      "description": "This module handles creation, retrieval, and deletion of GitHub OAuth and personal tokens using user credentials or OAuth flow codes. It works with token data structures and authorization responses, supporting two-factor authentication via OTP. Concrete use cases include exchanging an OAuth code for a token, listing user authorizations, and managing tokens through CRUD operations.",
      "description_length": 383,
      "index": 27,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github.Milestone",
      "library": "github-jsoo",
      "description": "This module implements direct interactions with GitHub milestones, offering retrieval, creation, deletion, and modification of milestones for a specific repository. It operates on milestone identifiers and structured milestone data, supporting filtering and sorting of result streams. Concrete use cases include listing all open milestones sorted by due date, fetching a specific milestone by number, updating milestone details like title or description, and managing associated labels.",
      "description_length": 486,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Check",
      "library": "github-jsoo",
      "description": "This module implements direct interactions with GitHub's Checks API, offering functions to create, update, retrieve, and manage check runs and check suites. It operates on data types representing check runs, check suites, and annotations, using identifiers such as commit SHA, check run ID, and check suite ID. Concrete use cases include automating CI/CD pipelines by creating check runs for specific commits, updating their status or output, listing all check runs for a reference, and re-triggering existing check suites without new code pushes.",
      "description_length": 547,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.User",
      "library": "github-jsoo",
      "description": "This module retrieves user information and repository data from GitHub. It provides functions to fetch the current user's details using an authentication token, get information about a specific user by username, and stream a list of repositories owned by a given user. These operations are useful for integrating GitHub user data into applications, such as displaying profile details or listing project repositories.",
      "description_length": 416,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.Status",
      "library": "github-jsoo",
      "description": "This module manages GitHub commit status checks for specific references in a repository. It provides functions to retrieve individual status checks, create new statuses, and get the combined status for a commit SHA. These operations work with GitHub's status API to track build or test results for commits, supporting continuous integration workflows.",
      "description_length": 351,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Github",
      "library": "github-jsoo",
      "description": "The module provides structured CRUD operations on GitHub entities like issues, repositories, and users, using asynchronous workflows and streaming to manage large datasets. It handles authentication via tokens, API endpoints, and event streams, supporting automation tasks such as CI/CD pipelines, access control, and repository management. Additional capabilities include rate limiting, Git object manipulation, and real-time event processing through typed data structures.",
      "description_length": 474,
      "index": 32,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 33,
    "meaningful_modules": 33,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 628,
    "min_description_length": 295,
    "avg_description_length": 435.969696969697,
    "embedding_file_size_mb": 0.4785499572753906
  }
}