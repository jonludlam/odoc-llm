{
  "package": "diffast-langs-verilog",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 47,
  "creation_timestamp": "2025-07-15T23:15:57.723588",
  "modules": [
    {
      "module_path": "Mverilog_p",
      "library": "diffast-langs-verilog.p",
      "description": "The module offers no functionality due to its empty child module. It lacks defined data types and operations. No meaningful tasks can be performed with this module. It appears to be a placeholder or incomplete implementation.",
      "description_length": 225,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_lib_base.Fact.FB",
      "library": "diffast-langs-verilog.base",
      "description": "This module supports constructing structured representations of entities, literals, and resources as `Diffast_core.Triple.node` values, with labeled hierarchical relationships, and provides operations to traverse and query these trees by labels, metadata, or structural properties. It enables navigating parent-child relationships, locating ancestor nodes matching label predicates, and extracting values or metadata in hierarchical data models, such as abstract syntax trees or semantic graphs.",
      "description_length": 495,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.NetType",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a concrete set of net type labels used in Verilog parsing, including standard types like `Wire`, `Tri`, and `Supply0`. It provides operations to convert these types to strings, simplify them, and anonymize instances for consistent representation. These functions directly support analysis and transformation of Verilog netlist data.",
      "description_length": 352,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_fact.F",
      "library": "diffast-langs-verilog.base",
      "description": "This module processes Verilog AST nodes to extract and filter facts, using types like `Diffast_core.Triple.node` and configuration objects for output settings such as compression and file paths. It supports operations to restrict nodes based on fact conditions and export encoded facts to storage backends. Submodules extend fact handling with format-specific serializers and database connectors, enabling workflows like generating structured fact files or populating analysis databases from Verilog modules and statements. Example uses include extracting signal dependencies during synthesis or logging transformation metadata to compressed files.",
      "description_length": 648,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.UnaryOperator",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of unary operators used in Verilog parsing, including arithmetic, logical, and bitwise operations such as Plus, Minus, Not, And, Or, and Xor. It provides functions to convert these operators to string representations, suitable for debugging, serialization, or user-facing output. The module is used to handle operator labels directly when processing Verilog expressions or generating code.",
      "description_length": 415,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.Strength",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of constants representing signal strength values in Verilog, such as `STRONG0`, `WEAK1`, and `HIGHZ0`. It provides functions to convert these values to strings, short representations, and tagged forms, as well as an `anonymize` function to normalize them. These operations are used when processing or analyzing Verilog netlist signals where strength annotations affect simulation behavior.",
      "description_length": 415,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.Statement",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a polymorphic type `t` representing various Verilog statement constructs, including assignments, control structures, and procedural operations, each optionally labeled with identifiers. It provides functions to convert statements to string representations, extract identifiers, anonymize labeled elements, and retrieve structured tags with associated metadata. Concrete use cases include parsing and analyzing Verilog code for simulation, synthesis, or transformation tasks where statement structure and labels must be preserved or manipulated.",
      "description_length": 564,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.AlwaysSpec",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines an enumeration type representing different kinds of always blocks in Verilog, including combinational, flip-flop, latch, and normal behaviors. It provides functions to convert each variant to a string, a short string, and a representation string, enabling precise labeling and identification of always block semantics in Verilog code analysis. These functions are used to generate human-readable and machine-parsable identifiers for Verilog constructs during parsing and transformation tasks.",
      "description_length": 512,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_label.CompilerDirective",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines operations for handling Verilog compiler directives, including parsing, string conversion, and identifier extraction. It works with a variant type representing directives such as `Define`, `Include`, `Timescale`, and others, along with identifier and string data. Use cases include processing Verilog source annotations, generating directive representations, and manipulating or inspecting Verilog compilation settings directly from OCaml code.",
      "description_length": 464,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.PropertyExpression",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a labeled property expression type used in Verilog parsing, including logical and temporal operators like `ImplicationOverlapped`, `Nexttime`, and `Eventually`. It provides operations to convert these expressions to various string representations, extract identifiers, and serialize with tags. These functions are used to process and analyze formal verification properties in Verilog code.",
      "description_length": 409,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.BinsSpec",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of labels used to classify bins in Verilog parsing, including `Normal`, `Illegal`, and `Ignore`. It provides functions to convert these labels into various string representations for debugging, display, or serialization purposes. These labels are used to specify how different bins should be treated during coverage analysis or parsing workflows.",
      "description_length": 372,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_label.SimpleImmediateAssertion",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a concrete type `t` with three variants: `Assert`, `Assume`, and `Cover`, representing labels for immediate assertions in Verilog. It provides functions to convert these labels to strings, extract a tag with associated data, and generate short or simple string representations. These operations are used to identify and manipulate assertion types during Verilog parsing and processing.",
      "description_length": 405,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.SequenceExpression",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines operations for handling sequence expressions in Verilog, including parsing and string conversion functions. It works with a variant type representing different sequence operators such as concatenation, repetition, and logical operations. Use cases include converting sequence expressions to human-readable strings, extracting identifiers, and serializing expressions for further processing or debugging.",
      "description_length": 423,
      "index": 12,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Verilog_base.V_label.SystemTask",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of labeled system tasks used in Verilog parsing, such as `Error`, `Warning`, and `Info`, along with operations to convert these labels to strings, extract names, generate tags, and anonymize instances. It works directly with the variant type `t` representing different system task labels. Concrete use cases include handling diagnostic messages, logging events, and generating unique identifiers during Verilog code analysis.",
      "description_length": 451,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_label.BinaryOperator",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a variant type representing binary operators in Verilog, including arithmetic, logical, comparison, bitwise, and shift operations. It provides functions to convert these operators to string representations, suitable for debugging, serialization, or pretty-printing. Use cases include parsing Verilog expressions, generating Verilog code, and analyzing operator semantics in a compiler or linter.",
      "description_length": 415,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_lib_base.Tree",
      "library": "diffast-langs-verilog.base",
      "description": "This module implements tree construction and manipulation operations for Verilog AST nodes, supporting node creation with annotations, identifiers, and ordinal tables. It works with object-oriented tree structures containing labels, annotations, and node data, along with XML-based input conversion. Concrete use cases include building Verilog syntax trees with unique identifiers, comparing tree nodes by label, and extracting annotations or original labels from node data.",
      "description_length": 474,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.AssignmentOperator",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of labeled assignment operators used in Verilog parsing, including standard operations like `Eq`, `AddEq`, and bitwise assignments. It provides functions to convert these operators to string representations, tags, and short names, facilitating their use in AST manipulation and code generation. Concrete use cases include pretty-printing Verilog code and analyzing assignment statements during static analysis.",
      "description_length": 436,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.OverloadOperator",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of constructors representing Verilog overloadable operators such as arithmetic, comparison, and assignment operations. It provides functions to convert these operators to various string representations, including full names, short forms, and tagged formats. These conversions are used to generate human-readable labels or structured output for Verilog code analysis and transformation tasks.",
      "description_length": 417,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.Qualifier",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of qualifiers used in Verilog labels, such as `Protected`, `Local`, and `Static`, and provides functions to convert these qualifiers into string representations. It supports operations like `to_string`, `to_simple_string`, and `to_short_string` for generating human-readable forms, and `to_tag` for structured output with associated attributes. These functions are used when generating or analyzing Verilog code to handle qualifier metadata in a consistent and standardized way.",
      "description_length": 504,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.TimingCheck",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of constants representing timing check types in Verilog, such as `Setup`, `Hold`, and `Period`, along with functions to convert these values to strings, extract names, and anonymize them. It operates specifically on the variant type `t`, which encodes different timing constraints used in digital circuit verification. Use cases include parsing and processing timing checks in Verilog code, generating human-readable labels, and normalizing identifiers for analysis or reporting tools.",
      "description_length": 511,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.IncOrDecOperator",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of increment and decrement operators used in Verilog parsing, including pre-increment, pre-decrement, post-increment, and post-decrement. It provides functions to convert these operators to various string representations, suitable for code generation or debugging. These operations are essential for handling Verilog expressions involving variable modification.",
      "description_length": 387,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_label.PortDirection",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines and manipulates port direction types such as `Input`, `Output`, and `Inout` for Verilog labels. It provides functions to convert directions to strings, extract tags, and anonymize values. Use cases include handling port declarations and generating concise direction representations in Verilog parsing and processing tasks.",
      "description_length": 342,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.JoinSpec",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of labels representing join behavior specifications in Verilog parsing. It includes variants for normal, any, and no join behavior. Functions convert these labels to string representations for debugging, serialization, or user output.",
      "description_length": 260,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.Gate",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a variant type representing different Verilog gate types, including basic logic gates and an anonymous placeholder. It provides functions to convert gate values to strings in various formats, extract tags with associated data, and anonymize gate labels. These operations are used to process and manipulate gate-level representations in Verilog parsing and transformation tasks.",
      "description_length": 397,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.Expression",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a labeled expression type for Verilog AST nodes, supporting operations like converting expressions to strings, extracting identifiers, and anonymizing node contents. It works with expression variants such as numbers, operators, method calls, and system tasks, along with identifier and string-based annotations. Use cases include AST traversal, expression transformation, and generating compact or normalized string representations of Verilog expressions.",
      "description_length": 475,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_lib_base.Fact",
      "library": "diffast-langs-verilog.base",
      "description": "This module processes Verilog AST nodes to extract and filter facts, working with structured node representations from its child module to build hierarchical relationships and metadata-rich trees. It supports operations to traverse, query, and filter nodes and node pairs based on labels, structural properties, or metadata, using types like `Diffast_core.Triple.node` and `Diffast_core.Spec.node_t`. Fact extraction can be configured with compression and output settings, enabling tasks like generating structured fact files for Verilog modules or analyzing semantic graphs. Example uses include exporting AST facts to a database, filtering statement nodes by parent module, or traversing hierarchical node trees to locate specific constructs.",
      "description_length": 744,
      "index": 25,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_label.DataType",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a variant type representing Verilog data types, including primitive types like `Int`, `Bit`, and `Real`, as well as complex types such as `Struct`, `Union`, and `Enum`. It provides functions to convert these types to strings, extract identifiers, and anonymize type names, supporting tasks like type inspection and code generation. Specific use cases include parsing Verilog code, type checking, and emitting type information in analysis tools.",
      "description_length": 464,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.DeferredImmediateAssertion",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a type `t` representing labels for deferred immediate assertions in Verilog, with constructors for `Assert`, `Assume`, `Cover`, and `Anonymous`. It provides functions to convert these labels to various string formats, extract tags, and anonymize labels. Use cases include handling assertion labels during Verilog parsing and generating concise identifiers for debugging or reporting.",
      "description_length": 403,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.ModuleSpec",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a variant type with two constructors, `NORMAL` and `MACRO`, representing different kinds of module specifications in a Verilog-like context. It provides functions to convert these values into string representations, including full, short, and alternate formats. These conversions are useful for generating human-readable output or machine-parsable identifiers based on the module's specification type.",
      "description_length": 421,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.T",
      "library": "diffast-langs-verilog.base",
      "description": "This module provides operations for analyzing and transforming label values in Verilog AST nodes, focusing on semantic equivalence checks, structural compatibility, and property inspection (e.g., named vs. boundary labels). It works with abstract label types (`t`) and Verilog AST nodes, supporting tasks like label anonymization, component extraction, and syntactic classification of constructs such as literals, statements, and control structures. Key use cases include AST traversal for diff/patch workflows, relabeling constraints in structured Verilog code, and categorizing syntactic elements during static analysis.",
      "description_length": 622,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_tree.Tree",
      "library": "diffast-langs-verilog.base",
      "description": "This module constructs and manipulates Verilog AST nodes with operations to create leaves, internal nodes, and trees, supporting precise labeling, annotations, and identifier handling. It works with node types that carry data such as labels, annotations, and source locations, using object-oriented tree structures from the `Diffast_misc.Otree` module. Concrete use cases include building Verilog parse trees with unique identifiers, managing node metadata during transformation passes, and preserving source code structure for unparsing or diffing.",
      "description_length": 549,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.EventExpression",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines and manipulates event expressions in Verilog, such as `posedge`, `negedge`, and `iff`. It provides functions to convert these expressions to strings, extract identifiers, and serialize them into tagged formats. Use cases include parsing and pretty-printing Verilog event controls in hardware descriptions.",
      "description_length": 325,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.ConcurrentAssertion",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a concrete variant type representing different kinds of concurrent assertion labels in Verilog, such as `AssertProp`, `AssumeProp`, and `CoverSeq`. It provides direct conversions of these variants to string formats, including full, simple, and short string representations, along with a function to extract a tag and associated data. These operations support precise labeling and identification of assertion constructs during parsing and processing of Verilog code.",
      "description_length": 485,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_lib_base",
      "library": "diffast-langs-verilog.base",
      "description": "This module provides tree construction and fact extraction capabilities for Verilog ASTs, combining node creation with annotation support and structured traversal for metadata-rich analysis. It defines core operations for building labeled, annotated trees from XML input, comparing nodes, and extracting facts based on structural and semantic criteria using types like `node` and `node_t`. Users can construct Verilog syntax trees with unique identifiers, filter nodes by parent module or label, and export hierarchical facts to structured files or databases. Example workflows include generating AST-based reports, comparing Verilog modules through annotated node structures, and extracting semantic graphs for downstream analysis.",
      "description_length": 732,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_fact",
      "library": "diffast-langs-verilog.base",
      "description": "This module processes Verilog AST nodes to extract, filter, and export structured facts using types like `Diffast_core.Triple.node`. It supports node restriction based on fact conditions and exports encoded facts to storage backends with configurable settings for compression and output paths. Submodules provide format-specific serialization and database integration, enabling workflows such as generating signal dependency graphs or logging transformation metadata. Example uses include extracting signal dependencies during synthesis or writing structured fact data to compressed files or analysis databases.",
      "description_length": 611,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_tree",
      "library": "diffast-langs-verilog.base",
      "description": "This module transforms Verilog AST nodes with location and label information into structured trees, enabling hierarchical representation and manipulation of source code. It supports operations to build and modify tree nodes with annotations, identifiers, and source regions, using typed node structures from `Diffast_misc.Otree`. With its submodules, it allows creating labeled Verilog parse trees, tracking transformations across hierarchical structures, and preserving source layout for tools like formatters or differencers. Example uses include constructing Verilog modules with positional metadata, annotating nodes during analysis passes, and reconstructing modified source trees.",
      "description_length": 686,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label",
      "library": "diffast-langs-verilog.base",
      "description": "This module organizes a comprehensive set of label-handling operations for Verilog ASTs, combining core utilities for label transformation and inspection with a rich hierarchy of concrete label types. It supports direct manipulation of polymorphic label variants through functions for anonymization, equivalence checks, and metadata extraction, while its submodules define specific label domains such as net types, operators, statements, and assertions. For example, users can analyze signal strengths, classify always blocks, extract identifiers from expressions, or convert gate types to string representations, enabling tasks like linting, synthesis, and formal verification. The integration of general-purpose label operations with domain-specific submodules ensures consistent handling of structured Verilog data across parsing, transformation, and analysis workflows.",
      "description_length": 873,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base",
      "library": "diffast-langs-verilog.base",
      "description": "This module processes Verilog abstract syntax trees to build, annotate, and analyze hierarchical node structures with rich metadata, supporting operations such as tree construction, fact extraction, label manipulation, and structured serialization. It provides core data types like `node`, `node_t`, and `Diffast_core.Triple.node` for representing and transforming Verilog elements with identifiers, labels, and source locations, enabling precise filtering, comparison, and export of semantic and structural facts. Users can extract signal dependencies, generate transformation logs, classify Verilog constructs, and reconstruct source trees with positional data, all while leveraging submodules for format-specific serialization, database integration, and domain-specific label handling. Example workflows include linting Verilog modules, synthesizing netlists, and analyzing hierarchical designs through annotated ASTs.",
      "description_length": 921,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog.V_change.F.CB",
      "library": "diffast-langs-verilog",
      "description": "This module provides functions to retrieve a label from an object with nested data structures and check if the object is marked as a phantom. It operates on objects that have a `_label` field within a `data` attribute, using the `L.t` type for labels. Use cases include analyzing or transforming Verilog AST nodes where labels and phantom markers are present.",
      "description_length": 359,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog.V_lib.Change.F",
      "library": "diffast-langs-verilog",
      "description": "This module provides functions to retrieve a label from an object and check if it is marked as a phantom. It operates on objects with a nested `data` field containing a `_label`. Useful for analyzing or transforming labeled structures in a Verilog-like intermediate representation.",
      "description_length": 281,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog.V_lib.Change.CB",
      "library": "diffast-langs-verilog",
      "description": "This module provides functions to retrieve a label from an object and check if the object is marked as a phantom. It operates on objects with a nested `data` field containing a `_label`. Use cases include analyzing or transforming labeled elements in a Verilog AST where phantom nodes indicate synthetic or temporary constructs.",
      "description_length": 328,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog.V_change.F",
      "library": "diffast-langs-verilog",
      "description": "This module tracks modifications in Verilog ASTs by classifying changes such as insertions, deletions, and updates, while analyzing node structure and converting between representations. It centers on `Diffast_core.Spec.node_t`, enabling extraction of semantic properties like nesting depth and cardinality, and supports use cases such as AST differencing and impact analysis. A key operation retrieves labels from nested data structures using `L.t` and identifies phantom-marked nodes, facilitating transformations and analyses on Verilog AST elements like always blocks and port declarations. Together with its submodules, it provides a structured way to inspect, compare, and metadata-generate over Verilog designs.",
      "description_length": 718,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mverilog.V_lib.Change",
      "library": "diffast-langs-verilog",
      "description": "This module models structural differences in Verilog ASTs by defining change types\u2014insertions, deletions, and modifications\u2014and quantifying their semantic impact through scoring. It operates on AST nodes and RDF triples using types like `Spec.node_t`, `Entity`, and `Loc.t`, enabling precise tracking of syntactic transformations in constructs such as procedural blocks, port declarations, and net types. The module supports tasks like code diffing, refactoring, and change reporting, with child modules offering utilities to extract labels and identify phantom nodes\u2014synthetic or temporary elements\u2014within the AST. Together, these components allow hierarchical analysis of changes, such as detecting logic modifications in `always` blocks or port reordering, while preserving context through labeled and annotated structures.",
      "description_length": 826,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog.V_lib.Analyzing",
      "library": "diffast-langs-verilog",
      "description": "This module provides advanced tree analysis capabilities for structured code representations, particularly Verilog ASTs, by combining tree comparison, transformation, and diff generation functionalities. It defines core operations for identifying isomorphic subtrees, computing adjacency-based node similarities, and generating detailed structural diffs, working primarily with annotated trees and node mappings from `Diffast_core`. Submodules extend this functionality with specialized metrics, visualization tools, and transformation scripts that leverage the computed analyses. Example uses include detecting structural differences between Verilog files, generating node mappings for visualization, and producing edit sequences for automated code transformation.",
      "description_length": 765,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mverilog.V_lib",
      "library": "diffast-langs-verilog",
      "description": "This module analyzes and transforms Verilog ASTs by modeling structural differences through change types like insertions, deletions, and modifications, quantifying their impact using semantic scoring. It operates on AST nodes and RDF triples with key types such as `Spec.node_t`, `Entity`, and `Loc.t`, enabling precise tracking of syntactic changes in constructs like procedural blocks and port declarations. Functionality includes code diffing, refactoring, and structural analysis, with utilities to detect logic changes in `always` blocks, identify phantom nodes, and generate edit sequences or visualizations for transformation tasks.",
      "description_length": 639,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog.V_change",
      "library": "diffast-langs-verilog",
      "description": "This module analyzes Verilog AST modifications by classifying structural changes like insertions, deletions, and updates, focusing on semantic properties such as nesting depth and cardinality of nodes. It operates on `Diffast_core.Spec.node_t`, extracting labels via `L.t` and identifying phantom nodes to support transformations and impact analysis. It enables specific tasks such as comparing always blocks, analyzing port declarations, and generating metadata across Verilog designs. The module provides structured inspection and comparison capabilities through its representation and submodules.",
      "description_length": 599,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog",
      "library": "diffast-langs-verilog",
      "description": "This module analyzes and transforms Verilog ASTs by modeling structural and semantic changes such as insertions, deletions, and modifications, with a focus on quantifying impact through scoring and tracking logic differences. It operates on key types like `Spec.node_t`, `Entity`, `Loc.t`, and `L.t`, supporting tasks like diffing, refactoring, and metadata generation for Verilog constructs including `always` blocks and port declarations. Specific capabilities include detecting phantom nodes, comparing nested structures, and generating edit sequences or visualizations to aid in design evolution and transformation workflows.",
      "description_length": 629,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 75,
    "meaningful_modules": 47,
    "filtered_empty_modules": 28,
    "retention_rate": 0.6266666666666667
  },
  "statistics": {
    "max_description_length": 921,
    "min_description_length": 225,
    "avg_description_length": 505.27659574468083,
    "embedding_file_size_mb": 0.1711139678955078
  }
}