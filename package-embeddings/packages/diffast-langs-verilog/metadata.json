{
  "package": "diffast-langs-verilog",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 47,
  "creation_timestamp": "2025-08-15T14:47:59.746557",
  "modules": [
    {
      "module_path": "Verilog_base.V_fact.F.FB",
      "library": "diffast-langs-verilog.base",
      "description": "This module provides utilities for constructing and manipulating nodes in a Verilog AST, focusing on creating typed entities, literals, and resource nodes with metadata like version control identifiers or source locations. It operates on `Diffast_core.Triple.node` structures and related hierarchical data types, enabling traversal of parent-child relationships, extraction of annotations, and querying of file/project context. Specific applications include AST generation for hardware description languages, contextual analysis of code elements via upward traversal to find labeled ancestors, and tool-specific resource management (e.g., C++/Verilog interop).",
      "description_length": 660,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.EventExpression",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines and manipulates event expressions in Verilog, such as `posedge`, `negedge`, and `iff`. It provides functions to convert these expressions to strings, extract identifiers, and serialize them into tagged formats. Use cases include parsing and pretty-printing Verilog event controls and sensitivity lists.",
      "description_length": 322,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.Gate",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a concrete type `t` representing Verilog gate types, including named and anonymous variants, and provides functions to convert these gate types to strings, tags, and shortened string representations. It includes operations for anonymizing gates and mapping specific gate variants to standardized string formats. Use cases include gate-level netlist processing, Verilog AST manipulation, and synthesis tool integration where precise gate type identification and transformation are required.",
      "description_length": 509,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.Qualifier",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of qualifiers used in Verilog labels, such as `Protected`, `Local`, and `Static`, and provides functions to convert these qualifiers to string representations, including full, simple, and short formats. It also includes a function to transform qualifiers into tagged values with associated attributes. These operations are used to represent and manipulate Verilog label qualifiers in a structured and consistent way during parsing and code generation tasks.",
      "description_length": 483,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.ModuleSpec",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a variant type representing different kinds of module specifications in Verilog, specifically `NORMAL` and `MACRO`. It provides functions to convert these specification values to string representations, including full and short formats. These conversions are used when generating or analyzing Verilog code to distinguish between regular modules and macro-expanded modules.",
      "description_length": 392,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.Strength",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of constants representing signal strength values in Verilog, such as `STRONG0`, `WEAK1`, and `HIGHZ0`. It provides functions to convert these strength values to string representations, anonymize them, and extract structured tags. These operations are used when processing or analyzing Verilog netlist signals where strength annotations affect simulation behavior.",
      "description_length": 389,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.SystemTask",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of system task labels used in Verilog parsing, including standard categories like error, warning, and info. It provides operations to convert these labels to strings, extract names, generate tags, and anonymize specific labels. These functions are used to handle system task identification and representation during Verilog AST processing.",
      "description_length": 365,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.IncOrDecOperator",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a type `t` representing increment and decrement operators in Verilog, including pre and post variants. It provides functions to convert these operators to various string representations, such as full names, short forms, and tagged formats. These functions are useful for generating Verilog code or parsing and analyzing operator expressions in a Verilog AST.",
      "description_length": 378,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.SequenceExpression",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines operations for handling sequence expressions in Verilog parsing, including string conversion functions like `to_string`, `to_simple_string`, and `to_short_string`. It works with the variant type `t` representing different sequence expression constructs such as concatenation, repetition, and logical operations. Use cases include translating parsed sequence expressions into string representations for debugging, analysis, or code generation.",
      "description_length": 462,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.Expression",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a labeled expression type for Verilog AST nodes, supporting operations to extract identifiers, names, and string representations. It works with expression variants like numbers, operators, method calls, and system functions, along with associated labels and metadata. Use cases include expression analysis, transformation, and pretty-printing in Verilog parsing and processing tools.",
      "description_length": 403,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_label.Statement",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a concrete type `t` representing various Verilog statement constructs, including assignments, control structures, and procedural operations, with support for labeled and identifier-bearing statements. It provides functions to convert statements to string representations, extract identifiers, and anonymize labeled elements. Use cases include parsing, analyzing, and transforming Verilog code structures directly, such as identifying loop constructs, extracting assignment targets, or normalizing labeled blocks for comparison.",
      "description_length": 547,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_label.JoinSpec",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of labels representing join behavior specifications in Verilog parsing. It includes variants for normal, any, and no join behavior. The module provides string conversion functions for debugging, representation, and short display purposes.",
      "description_length": 264,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.DeferredImmediateAssertion",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a variant type for representing deferred immediate assertion labels in Verilog, including `Assert`, `Assume`, `Cover`, and `Anonymous`. It provides functions to convert these labels to strings, extract tags, and anonymize them. These operations are used when processing and transforming Verilog code involving assertions, assumptions, and coverage points.",
      "description_length": 375,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.OverloadOperator",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of constructors representing Verilog overloadable operators such as arithmetic, comparison, and assignment operations. It provides functions to convert these operators to various string representations, including full names, short forms, and tagged formats. These conversions are useful for generating human-readable output or machine-parsed tags during Verilog code analysis or transformation tasks.",
      "description_length": 426,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_tree.Tree",
      "library": "diffast-langs-verilog.base",
      "description": "This module constructs and manipulates tree nodes with labeled data, annotations, and optional original labels. It supports creating nodes with varying numbers of children, including leaves, and provides comparison and extraction operations. Concrete use cases include building abstract syntax trees for Verilog parsing and transformation tasks.",
      "description_length": 345,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.SimpleImmediateAssertion",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a concrete type `t` with three variants: `Assert`, `Assume`, and `Cover`, representing labels for immediate assertions in Verilog. It provides functions to convert these labels to various string formats, including full, short, and tagged representations. These operations are used to generate precise textual identifiers for assertion statements in Verilog parsing and processing tasks.",
      "description_length": 406,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_label.NetType",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a concrete set of net type labels used in Verilog parsing, including standard types like `Wire`, `Trireg`, and `Supply0`. It provides operations to convert these types to strings, extract tags, and anonymize values, primarily supporting AST manipulation and code generation tasks. These functions are used when processing or transforming Verilog net declarations during compilation or analysis.",
      "description_length": 414,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.CompilerDirective",
      "library": "diffast-langs-verilog.base",
      "description": "This module represents Verilog compiler directives as a variant type, supporting operations like string conversion, tag extraction, and identifier anonymization. It works with string literals and identifiers to model directives such as `define`, `include`, `timescale`, and `pragma`. Concrete use cases include parsing and manipulating Verilog source-level compiler directives during preprocessing or AST transformations.",
      "description_length": 421,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_lib_base.Tree",
      "library": "diffast-langs-verilog.base",
      "description": "This module implements tree construction and manipulation operations for Verilog AST nodes, supporting node creation with annotations, identifiers, and ordinal tables. It works with objects representing tree nodes that carry labels, annotations, and optional original labels, using types like `Label.t`, `Diffast_misc.Otree.node2`, and `Diffast_misc.Loc.t`. Concrete use cases include building Verilog syntax trees with unique identifiers, comparing tree nodes by label, and extracting label data or annotations from nodes during parsing or transformation tasks.",
      "description_length": 562,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.BinsSpec",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of label specifications used to categorize bins in Verilog parsing. It includes variants for normal, illegal, and ignored bins, along with functions to convert these categories into string representations. These functions are used to generate output or reports that distinguish between valid, invalid, and excluded bin labels in Verilog code analysis.",
      "description_length": 377,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.AssignmentOperator",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines assignment operators used in Verilog parsing, including standard operations like `Eq`, `AddEq`, and bitwise or shift assignments. It provides functions to convert these operators to string representations, tags, or short names, facilitating their use in AST manipulation and code generation. Concrete use cases include pretty-printing Verilog code and analyzing assignment statements during compilation.",
      "description_length": 423,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.UnaryOperator",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of unary operators used in Verilog parsing, including arithmetic, logical, and bitwise operations. It provides functions to convert these operators to various string representations, supporting pretty printing and serialization. These operations are essential for constructing and manipulating Verilog abstract syntax trees.",
      "description_length": 350,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_fact.F",
      "library": "diffast-langs-verilog.base",
      "description": "This module constructs and manipulates Verilog AST nodes with typed entities, literals, and metadata such as source locations. It provides filters for node traversal, parent resolution, and context extraction, operating on `Diffast_core.Triple.node` structures. It is used for AST generation, contextual code analysis, and resource management in Verilog toolchains.",
      "description_length": 365,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.PropertyExpression",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a labeled property expression type used in Verilog parsing, including logical and temporal operators such as `ImplicationOverlapped`, `Nexttime`, and `Eventually`. It provides functions to convert these expressions to string representations, extract identifiers, and serialize them with tags. These operations support analysis and transformation of Verilog property specifications in formal verification workflows.",
      "description_length": 434,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.PortDirection",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines and manipulates port direction types such as `Input`, `Output`, and `Inout`, commonly used in Verilog parsing and AST representation. It provides functions to convert these types to strings, extract tags, and anonymize values, facilitating pretty-printing and analysis tasks. Concrete use cases include generating Verilog code from an AST and analyzing signal flow in hardware descriptions.",
      "description_length": 410,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_label.DataType",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a variant type representing Verilog data types, including built-in types like `Bit`, `Logic`, and `Real`, as well as complex types such as `Struct`, `Union`, and `Enum`. It provides operations to convert types to strings, extract identifiers, and anonymize type representations, supporting tasks like type inspection and code generation. Concrete use cases include processing Verilog AST nodes during parsing and analysis, and generating human-readable type representations for debugging or tool output.",
      "description_length": 523,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_lib_base.Fact",
      "library": "diffast-langs-verilog.base",
      "description": "This module implements fact extraction and filtering operations for Verilog AST nodes, working with `Diffast_core.Triple.node` and object-based data structures with `_label` fields. It provides `extract` to serialize and store facts about Verilog modules and statements, using configurable compression and encoding, and supports filtering via `node_filter` and `node_pair_filter` based on restriction flags. Concrete use cases include generating compressed fact files for Verilog source elements and selectively extracting facts during AST analysis.",
      "description_length": 549,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_label.ConcurrentAssertion",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a concrete variant type representing different kinds of concurrent assertion labels in Verilog, such as `AssertProp`, `AssumeProp`, and `CoverSeq`. It provides direct conversions to string representations, including full, simple, and short formats, along with a function to extract a tagged representation with associated data. These operations support precise labeling and identification of concurrent assertions during parsing and analysis of Verilog code.",
      "description_length": 478,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.TimingCheck",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a set of timing check types used in Verilog parsing, such as `Setup`, `Hold`, and `Period`, along with operations to convert these types to strings, extract names, and anonymize them. It supports data types like `t` which represents individual timing checks, and functions that process these values for use in reporting, analysis, or transformation tasks. Concrete use cases include formatting timing check constraints for output, identifying constraint types in a Verilog AST, and normalizing labels during code processing.",
      "description_length": 544,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.AlwaysSpec",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines an enumeration type representing different types of Verilog `always` block specifications, including combinational logic, flip-flop, and latch behaviors. It provides functions to convert each variant to a string representation, a short string, and a canonical representation string. This module is used to classify and serialize `always` block semantics in Verilog parsing and processing tasks.",
      "description_length": 414,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label.BinaryOperator",
      "library": "diffast-langs-verilog.base",
      "description": "This module defines a variant type representing binary operators in Verilog, including arithmetic, logical, comparison, bitwise, and shift operations. It provides functions to convert these operators to string representations, suitable for debugging, serialization, or pretty-printing. Use cases include parsing Verilog code into an abstract syntax tree and generating Verilog code from internal representations.",
      "description_length": 412,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_tree",
      "library": "diffast-langs-verilog.base",
      "description": "This module provides functions for converting and manipulating abstract syntax trees with location and label annotations, specifically tailored for Verilog parsing. It includes operations for constructing tree nodes with labeled data, setting and converting source locations, and extracting structured tree representations from AST nodes. Concrete use cases involve building and transforming Verilog syntax trees with precise location tracking for error reporting and code manipulation.",
      "description_length": 486,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base.V_lib_base",
      "library": "diffast-langs-verilog.base",
      "description": "This module implements tree manipulation and fact extraction for Verilog AST nodes. It provides operations for constructing and comparing tree nodes with labels and annotations, and for extracting and filtering facts from node structures. Use cases include building Verilog syntax trees with unique identifiers and generating compressed fact files for source analysis.",
      "description_length": 368,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_fact",
      "library": "diffast-langs-verilog.base",
      "description": "This module constructs and manipulates Verilog AST nodes with typed entities, literals, and source location metadata. It provides filters for node traversal, parent resolution, and context extraction on `Diffast_core.Triple.node` structures. Used for AST generation, contextual code analysis, and resource management in Verilog toolchains.",
      "description_length": 339,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Verilog_base.V_label",
      "library": "diffast-langs-verilog.base",
      "description": "This module enables parsing, manipulation, and analysis of Verilog abstract syntax tree (AST) labels, with operations for tagging, anonymization, and classification of syntactic elements. It centers on a polymorphic variant type `t` representing constructs like expressions, statements, operators, and declarations, providing utilities to extract identifiers, check structural compatibility, and convert between representations. These capabilities support code generation, assertion checking, and static analysis tasks such as coverage evaluation or transformation of Verilog/SystemVerilog code.",
      "description_length": 595,
      "index": 34,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Verilog_base",
      "library": "diffast-langs-verilog.base",
      "description": "This module provides precise Verilog AST construction and manipulation with typed entities, labels, and source location tracking. It supports node traversal, fact extraction, tree transformation, and label analysis on Verilog syntax structures. Used for generating, analyzing, and transforming Verilog code with accurate contextual and positional metadata.",
      "description_length": 356,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog.V_lib.Change.F",
      "library": "diffast-langs-verilog",
      "description": "This module provides functions to extract labels and check phantom status from objects with labeled data. It operates on objects that have a `data` field containing a `_label` of type `Obj.t`. Use this module when processing Verilog AST nodes to retrieve their labels or determine if they are phantom nodes.",
      "description_length": 307,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog.V_lib.Change.CB",
      "library": "diffast-langs-verilog",
      "description": "This module provides functions to retrieve a label from an object with labeled data and to check if an object is marked as a phantom. It operates on objects that have a `data` field containing a `_label` of type `Stdlib.Obj.t`. These functions are used to analyze and manipulate labeled hardware description elements in a Verilog-like intermediate representation.",
      "description_length": 363,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog.V_lib.Analyzing.Postprocessing",
      "library": "diffast-langs-verilog",
      "description": "This module enables tree node manipulation, traversal, and transformation for Verilog AST analysis, including move detection, edit script generation, subtree pruning, and visualization. It operates on annotated tree structures (`node_t`, `tree_t`, `node2`) and edit/move records (`Edit.t`, `move_id`), supporting tasks like comparing and synchronizing hierarchical data, validating node mappings, and refining transformations based on similarity metrics. Key applications include Verilog code differencing, structural refactoring, and automated edit synchronization in transformation workflows.",
      "description_length": 594,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog.V_change.F.CB",
      "library": "diffast-langs-verilog",
      "description": "This module provides functions to retrieve a label from an object and check if the object is marked as a phantom. It operates on objects with a nested `data` field containing a `_label`. Use cases include analyzing or transforming labeled elements in a Verilog AST where phantom nodes indicate synthetic or temporary constructs.",
      "description_length": 328,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mverilog.V_lib.Analyzing",
      "library": "diffast-langs-verilog",
      "description": "This module performs structural analysis and transformation of Verilog ASTs through tree comparison, edit script generation, and node mapping refinement. It operates on annotated tree structures (`node_t`, `tree_t`, `node2`) and edit records (`Edit.t`, `move_id`), enabling tasks like detecting isomorphic subtrees, pruning irrelevant nodes, and synchronizing hierarchical changes. It supports concrete use cases such as Verilog code differencing, refactoring validation, and automated transformation workflows with similarity-based matching and edit minimization.",
      "description_length": 564,
      "index": 40,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mverilog.V_change.F",
      "library": "diffast-langs-verilog",
      "description": "The module provides operations to represent and manipulate Verilog AST changes, including tracking deletions, insertions, and modifications with associated metadata. It works with AST nodes (`node_t`), triples, and source locations, offering functions to analyze structural properties, classify syntactic elements (e.g., case conditions, ports, declarations), and convert changes into string representations. These tools support use cases such as change extraction, code diffing, and structural transformations in Verilog designs.",
      "description_length": 530,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mverilog.V_lib.Change",
      "library": "diffast-langs-verilog",
      "description": "This module provides operations for tracking and analyzing changes in Verilog ASTs through semantic diffing, including change classification (insertions, deletions, modifications), significance scoring, and structured representation via triples. It works with labeled AST nodes (`Diffast_core.Spec.node_t`) and metadata-rich data structures to enable precise analysis of structural properties like declaration types, control flow, and nesting hierarchies. Use cases include code comparison tools, refactoring analysis, and semantic change visualization in hardware design workflows.",
      "description_length": 582,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mverilog.V_lib",
      "library": "diffast-langs-verilog",
      "description": "This module implements structural analysis and semantic diffing of Verilog ASTs through tree comparison, edit script generation, and change classification. It operates on annotated node and tree structures, along with edit records, to support concrete tasks like Verilog code differencing, refactoring validation, and automated transformation workflows. Key capabilities include detecting isomorphic subtrees, pruning irrelevant nodes, and analyzing structural changes with semantic significance scoring.",
      "description_length": 504,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mverilog.V_change",
      "library": "diffast-langs-verilog",
      "description": "This module represents and manipulates Verilog AST changes, tracking deletions, insertions, and modifications with metadata. It operates on AST nodes, triples, and source locations, providing functions to analyze structure, classify syntactic elements like case conditions and ports, and convert changes to strings. It supports change extraction, code diffing, and structural transformations in Verilog designs.",
      "description_length": 411,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Mverilog",
      "library": "diffast-langs-verilog",
      "description": "This module provides precise manipulation and analysis of Verilog AST changes, supporting operations like change classification, structural diffing, and transformation. It works with AST nodes, triples, source locations, and annotated tree structures to enable concrete use cases such as automated refactoring, semantic code comparison, and Verilog design transformation workflows. Key functions include change extraction, edit script generation, isomorphic subtree detection, and semantic significance scoring for structural modifications.",
      "description_length": 540,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Mverilog_p",
      "library": "diffast-langs-verilog.p",
      "description": "Parses and manipulates Verilog AST structures, providing functions to traverse and transform Verilog code elements. Works directly with Verilog abstract syntax trees, enabling operations like signal extraction, module instantiation analysis, and netlist manipulation. Useful for tasks such as hardware verification, circuit transformation, and custom linting tools targeting Verilog designs.",
      "description_length": 391,
      "index": 46,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 74,
    "meaningful_modules": 47,
    "filtered_empty_modules": 27,
    "retention_rate": 0.6351351351351351
  },
  "statistics": {
    "max_description_length": 660,
    "min_description_length": 264,
    "avg_description_length": 439.5744680851064,
    "embedding_file_size_mb": 0.681488037109375
  }
}