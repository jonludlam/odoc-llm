{
  "package": "savvy",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 12,
  "creation_timestamp": "2025-08-14T23:27:34.610760",
  "modules": [
    {
      "module_path": "Github.GitHubClient",
      "library": "savvy.github",
      "description": "Implements OAuth2 authentication flow for GitHub integration. It generates authorization URLs and exchanges OAuth2 codes for access tokens. Works with GitHub configuration and token response data structures.",
      "description_length": 207,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.DefaultInMemoryStorage",
      "library": "savvy.github",
      "description": "Implements an in-memory key-value store with time-to-live (TTL) expiration for caching GitHub configuration data. Provides operations to get, set, and expire entries based on a configured TTL. Useful for temporarily storing authenticated GitHub API clients or session data with automatic cleanup.",
      "description_length": 296,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github",
      "library": "savvy.github",
      "description": "Handles GitHub OAuth2 authentication flows with configurable prompts and token exchange. Works with `github_oauth_config`, `token_response`, and `config` types to manage authorization URLs, access tokens, and client settings. Used to authenticate GitHub API clients and cache session data with TTL-based cleanup via in-memory storage.",
      "description_length": 334,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Storage.MakeInMemoryStorage",
      "library": "savvy.storage",
      "description": "This module implements an in-memory key-value store with time-to-live (TTL) expiration. It supports operations to get, update, and remove entries by string keys, where stored values are paired with a remaining time-to-live. It is suitable for caching transient data with automatic expiration, such as session tokens or temporary user preferences.",
      "description_length": 346,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Storage",
      "library": "savvy.storage",
      "description": "This module implements an in-memory key-value store with time-to-live (TTL) expiration. It supports operations to get, update, and remove entries by string keys, where stored values are paired with a remaining time-to-live. It is suitable for caching transient data with automatic expiration, such as session tokens or temporary user preferences.",
      "description_length": 346,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Utils.Uri",
      "library": "savvy.utils",
      "description": "This module offers URI creation, parsing, and serialization alongside manipulation of components like query parameters, paths, and fragments using `Utils.Uri.t` values. It supports customizable encoding rules for safe URI handling in web applications or HTTP clients, with utilities for JSON conversion via Yojson to enable data interchange and configuration-driven transformations. Key use cases include dynamic URL construction, safe percent-encoding of user input, and structured serialization for storage or transmission.",
      "description_length": 525,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Utils",
      "library": "savvy.utils",
      "description": "This module generates OAuth-related tokens and challenges, encodes and decodes form data, and manipulates strings for URI-safe operations. It handles strings, key-value lists, and hash tables, integrating directly with Cohttp for HTTP body construction. Concrete use cases include preparing authorization requests, transforming user input for URLs, and parsing form responses into structured data.",
      "description_length": 397,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oauth2_client.OAuth2Client",
      "library": "savvy.oauth2_client",
      "description": "This module handles OAuth 2.0 flows including generating authorization URLs, exchanging authorization codes for tokens, obtaining tokens via client credentials, and refreshing existing tokens. It works with configuration data specifying client IDs, secrets, and endpoints, and returns token responses or error messages. Concrete use cases include authenticating users via third-party providers and managing service-to-service authentication.",
      "description_length": 441,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Oauth2_client.DefaultInMemoryStorage",
      "library": "savvy.oauth2_client",
      "description": "Stores OAuth 2.0 tokens in memory with time-to-live tracking. It uses a key-value structure where each token is associated with a configuration and expires after a set duration. Useful for short-lived token caching in single-process applications without persistent storage.",
      "description_length": 273,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_uri.Parser",
      "library": "savvy.json_uri",
      "description": "Parses IPv6 addresses and URI references according to RFC 3986. Works with Angstrom parsers and constructs `Json_uri.t` values from string inputs. Useful for validating and converting raw strings into structured URI data in network-related applications.",
      "description_length": 253,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_uri.Absolute_http",
      "library": "savvy.json_uri",
      "description": "This module constructs, deconstructs, and converts absolute HTTP/HTTPS URIs with explicit components like scheme, host, port, path, query, and fragment. It supports parsing from and formatting to standard string representations, including percent encoding. Use it to build valid URIs programmatically or extract components from existing URIs for routing, API requests, or configuration.",
      "description_length": 386,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_uri",
      "library": "savvy.json_uri",
      "description": "This module enables precise manipulation of URI components like paths, query parameters, and fragments, with support for encoding, resolution, and canonicalization. It operates on structured URI values, parsing from strings or HTTP(S) sources and converting to JSON formats, while handling IPv6 and RFC 3986 compliance. Typical applications include constructing URIs from dynamic components, safely encoding special characters, and serializing URIs for storage or API transmission.",
      "description_length": 481,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 12,
    "filtered_empty_modules": 2,
    "retention_rate": 0.8571428571428571
  },
  "statistics": {
    "max_description_length": 525,
    "min_description_length": 207,
    "avg_description_length": 357.0833333333333,
    "embedding_file_size_mb": 0.1600322723388672
  }
}