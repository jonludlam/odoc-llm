{
  "package": "savvy",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 17,
  "creation_timestamp": "2025-07-15T23:10:30.205223",
  "modules": [
    {
      "module_path": "Storage.STORAGE_KIND",
      "library": "savvy.storage",
      "description": "This module defines a type `value` representing stored data and a value `ttl` of type `float` indicating time-to-live duration. It is used to model storage entries with expiration times. Concrete use cases include caching systems and temporary data storage with automatic cleanup based on time constraints.",
      "description_length": 306,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Storage.MakeInMemoryStorage",
      "library": "savvy.storage",
      "description": "Implements an in-memory key-value store with time-to-live (TTL) expiration. It supports operations to get, update, and remove entries by string keys, storing values of type `V.value` along with their expiration time. Useful for caching transient data where entries expire after a fixed duration.",
      "description_length": 295,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Storage.STORAGE_UNIT",
      "library": "savvy.storage",
      "description": "This module manages key-value storage with time-to-live (TTL) expiration. It supports retrieving values with their remaining TTL, updating values with a fixed TTL, and removing keys. It is used for caching data with automatic expiration, such as session tokens or temporary files.",
      "description_length": 280,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Storage",
      "library": "savvy.storage",
      "description": "This module provides an in-memory key-value storage system with time-to-live (TTL) support, enabling efficient data caching and temporary storage. It defines a `value` type for stored data and a `ttl` field for expiration tracking, allowing operations like get, set, update, and delete with automatic cleanup of expired entries. The system supports string keys and arbitrary value types, making it suitable for use cases such as session management, temporary file handling, and caching with time-bound data. Submodules refine these capabilities by structuring expiration logic, storage mechanics, and access patterns into focused components.",
      "description_length": 641,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oauth2_client.OAuth2Client",
      "library": "savvy.oauth2_client",
      "description": "This module handles OAuth 2.0 flows by generating authorization URLs, exchanging authorization codes for tokens, obtaining tokens via client credentials, and refreshing existing tokens. It operates on configuration data, authorization codes, and tokens, returning structured responses or errors. Concrete use cases include implementing OAuth 2.0 authentication in web applications, managing token lifecycles, and integrating with third-party APIs requiring OAuth 2.0 authentication.",
      "description_length": 482,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oauth2_client.OAUTH2_CLIENT",
      "library": "savvy.oauth2_client",
      "description": "This module handles OAuth 2.0 flows including generating authorization URLs, exchanging authorization codes for tokens, obtaining tokens via client credentials, and refreshing existing tokens. It works with configuration data containing client IDs, secrets, and endpoints, returning parsed token responses or error messages. Concrete use cases include authenticating users via third-party providers and securing service-to-service communication using client credentials.",
      "description_length": 470,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oauth2_client.DefaultInMemoryStorage",
      "library": "savvy.oauth2_client",
      "description": "Stores OAuth2 tokens in memory with a time-to-live, associating them with client configurations. Uses a (string * Oauth2_client.config) tuple to track token values and their associated client data. Useful for short-lived token caching in single-node applications without persistent storage.",
      "description_length": 290,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Oauth2_client",
      "library": "savvy.oauth2_client",
      "description": "This module manages OAuth 2.0 token workflows, including authorization code exchange, token refresh, and device code handling, using in-memory storage for caching credentials with time-to-live. It provides record types for client configurations, token responses, and device authorization data, supporting flows like client credentials, web application authentication, and headless device authorization. Submodules handle flow orchestration\u2014generating URLs, exchanging codes, and refreshing tokens\u2014while the storage layer enables temporary credential persistence tied to client identifiers. Example uses include securing service-to-service calls, implementing third-party login, and managing tokens across distributed services with JSON-serializable data.",
      "description_length": 754,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_uri.Absolute_http",
      "library": "savvy.json_uri",
      "description": "This module constructs, deconstructs, and converts absolute HTTP/HTTPS URIs with explicit components like scheme, host, port, path, query, and fragment. It supports parsing from and formatting to string representations, with customizable percent encoding for output. Use cases include building validated URLs for web requests, extracting host and scheme for routing or security checks, and safely handling URI components without string manipulation.",
      "description_length": 449,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_uri.Parser",
      "library": "savvy.json_uri",
      "description": "Parses IPv6 addresses and URI references according to JSON URI specifications. Operates on string and `Json_uri.t` types using Angstrom parsers. Used for validating and constructing URIs from raw strings in network-related applications.",
      "description_length": 236,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Json_uri",
      "library": "savvy.json_uri",
      "description": "This module handles the construction, parsing, and manipulation of absolute HTTP/HTTPS URIs with explicit components such as scheme, host, port, path, query, and fragment. It supports string parsing and formatting with customizable percent encoding, enabling tasks like building validated URLs for web requests or extracting host and scheme for routing. A submodule provides Angstrom-based parsing of IPv6 addresses and URI references according to JSON URI specifications, enhancing validation and construction from raw strings. Together, they allow precise, safe URI operations while integrating structured parsing for network applications.",
      "description_length": 641,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.GITHUB_CLIENT",
      "library": "savvy.github",
      "description": "This module handles OAuth2 authentication flow for GitHub. It generates an authorization URL and exchanges an OAuth code for an access token. It works with configuration values, OAuth codes, and token responses. Use this to implement GitHub login or token-based authentication in web applications.",
      "description_length": 297,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.GitHubClient",
      "library": "savvy.github",
      "description": "This module handles OAuth2 authentication flows for GitHub. It generates authorization URLs and exchanges OAuth2 codes for access tokens. It works with configuration data, OAuth2 codes, and produces token responses. Use it to implement GitHub login or token-based API access in web applications.",
      "description_length": 295,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github.DefaultInMemoryStorage",
      "library": "savvy.github",
      "description": "Implements an in-memory storage backend for caching GitHub configuration values with a fixed time-to-live. Uses a hash table to map string keys to `Github.config` values, automatically expiring entries after the configured TTL. Suitable for short-term caching of authentication tokens or API rate limit data during batch operations.",
      "description_length": 332,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Github",
      "library": "savvy.github",
      "description": "This module orchestrates GitHub OAuth authentication workflows, managing token exchange and configuration through data structures like `oauth_params` and `token_response`. It enables concrete use cases such as generating authorization URLs, exchanging OAuth codes for tokens, and storing credentials temporarily with `DefaultInMemoryStorage`. The `GitHubClient` module extends these capabilities by enabling direct API interactions using authenticated tokens. Examples include implementing GitHub login flows, caching API rate limit data, and handling token-based API access in web applications.",
      "description_length": 595,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Utils.Uri",
      "library": "savvy.utils",
      "description": "Provides URI construction, parsing, and manipulation capabilities, including percent-encoding, query parameter handling, and resolution of components like paths, hosts, and fragments. Operates on structured URI values and string parts, supporting transformations and customizable encoding. Useful for web applications or APIs needing precise URI generation, modification, or JSON/Yojson serialization.",
      "description_length": 401,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Utils",
      "library": "savvy.utils",
      "description": "This module generates random state and code verifier strings, transforms code verifiers into code challenges, and encodes or decodes form data for OAuth flows. It handles strings, key-value lists, and hash tables, supporting operations like PKCE challenge generation and form handling. The child module provides URI construction, parsing, and manipulation with support for percent-encoding, query parameters, and component resolution. Together, they enable secure token management, precise URI handling, and seamless integration with web APIs and OAuth workflows.",
      "description_length": 563,
      "index": 16,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 18,
    "meaningful_modules": 17,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9444444444444444
  },
  "statistics": {
    "max_description_length": 754,
    "min_description_length": 236,
    "avg_description_length": 431.0,
    "embedding_file_size_mb": 0.062206268310546875
  }
}