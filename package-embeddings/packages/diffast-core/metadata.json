{
  "package": "diffast-core",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 68,
  "creation_timestamp": "2025-08-15T16:02:44.201988",
  "modules": [
    {
      "module_path": "Diffast_core.Delta_base.Fmt.Irr",
      "library": "diffast-core",
      "description": "This module defines a variant type `t` representing structured edit operations such as deletions, insertions, moves, and attribute changes on a tree-like structure. Each constructor captures specific metadata like paths, boundaries, subtree identifiers, and content dumpers to precisely describe transformations. The module includes functions to construct these edit operations and a function to output them to a channel, enabling serialization or logging of tree diffs.",
      "description_length": 470,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Analyzing.F.Postprocessing",
      "library": "diffast-core",
      "description": "This module specializes in advanced tree transformation analysis and edit refinement for structured data differencing. It operates on hierarchical node structures (`node_t`, `tree_t`) and node mappings, providing capabilities like move detection, relabeling optimization, and edit operation grouping through techniques such as subtree comparison, similarity scoring, and UID-based validation. Its functionality is particularly valuable in version control systems, code refactoring tools, and XML/AST differencing applications where precise tracking of structural changes and contextual edit reconciliation are critical.",
      "description_length": 619,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sites.Plugins.Lang_specs",
      "library": "diffast-core",
      "description": "This module manages the loading and listing of language specification files for a site generation system. It provides access to a predefined list of file paths, along with functions to load all specifications or load a specific one by name. The primary data type is a list of strings representing file paths, and it is used to initialize and access language-specific configuration data during site generation.",
      "description_length": 409,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sites.Plugins.Langs",
      "library": "diffast-core",
      "description": "This module manages the loading and listing of language plugins for a site generation system. It provides access to plugin paths, loads all plugins, or loads a specific plugin by name. Use it to dynamically initialize language-specific functionality during site processing.",
      "description_length": 273,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Delta_base.Fmt.Rev",
      "library": "diffast-core",
      "description": "This module implements functions to construct, manipulate, and output reverse delta operations for tree-like structures. It supports operations such as deletion, insertion, movement, and modification of nodes and attributes, with precise tracking of paths, boundaries, and content. Use cases include representing and applying structural changes in version control systems or document synchronization tools.",
      "description_length": 406,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Postprocessing.F",
      "library": "diffast-core",
      "description": "This module provides functionalities for tree node manipulation, transformation, and comparison, including accessors for node properties (names, labels, children), restructuring operations (insertions, deletions, replacements), and higher-level tasks like permutation detection, move generation, and edit refinement. It operates on complex tree structures enriched with metadata such as source locations, UIDs, and similarity scores, alongside mappings between trees, using hash tables to track node identities and relationships. These capabilities are applied in structured program diffing, code analysis tools, and scenarios requiring precise edit management with move decomposition, false move elimination, and enclave resolution.",
      "description_length": 733,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Node.Tbl",
      "library": "diffast-core",
      "description": "Implements imperative hash table operations for key-value storage with specialized handling of `Diffast_core.Node.M.t` keys, supporting efficient insertion, deletion, lookup, and traversal. The structure organizes key-value pairs where keys are constrained to a specific node type, enabling batch updates via sequence ingestion (`add_seq`, `replace_seq`) and sequence-driven initialization (`of_seq`). Useful for scenarios requiring bulk modifications or constructing tables from sequential data sources like parsed AST nodes or version-controlled document fragments.",
      "description_length": 567,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Misc.Tbl2",
      "library": "diffast-core",
      "description": "This module implements a two-level hash table structure that maps pairs of keys to values. It supports creating an empty table, adding and retrieving key-value pairs, clearing the table, and getting the number of key pairs stored. It is useful for scenarios requiring efficient lookups and updates based on two distinct key types, such as indexing data by category and identifier.",
      "description_length": 380,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Stat.File",
      "library": "diffast-core",
      "description": "This module offers utilities for analyzing and summarizing code difference metrics and file-level data from cache results. It operates on structured types like `diff_stat` and `info`, which capture granular metrics such as node changes, similarity scores, and file metadata (e.g., counts, timestamps, paths), and supports output in JSON or plain text formats. Key use cases include generating detailed diff reports for version control systems, aggregating file statistics from search caches, and formatting hierarchical tree structure analyses for code review or repository auditing tools.",
      "description_length": 589,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sites.Plugins",
      "library": "diffast-core",
      "description": "Manages language plugin and specification loading for site generation. Provides functions to list and load plugins or specification files by name, working with file paths and dynamic modules. Used to initialize language-specific configurations and functionality during site processing.",
      "description_length": 285,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Misc.Tbl3",
      "library": "diffast-core",
      "description": "This module implements a 3-layer nested hash table structure that maps three keys of arbitrary types to a value. It supports creating an empty table, adding and retrieving key-value pairs at three levels, clearing all entries, and checking the total number of stored entries. It is useful for scenarios requiring hierarchical lookups, such as caching results based on triple-key configurations or organizing data with multi-dimensional indexing.",
      "description_length": 445,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Delta_format.ReversibleFormat",
      "library": "diffast-core",
      "description": "This module provides functions to convert structured delta edits into string representations, reverse individual edits or entire delta sequences, and apply deltas to document structures. It operates on tree-like data structures representing XML or AST nodes, with specific handling for edits that can be reversed to reconstruct original documents. Use cases include version control for structured documents, bidirectional transformation of XML trees, and reversible patching of hierarchical data models.",
      "description_length": 503,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Sourcecode.Tree",
      "library": "diffast-core",
      "description": "This module constructs and manipulates abstract syntax trees with labeled nodes and annotations, supporting operations like node creation, comparison, and attribute extraction. It works with tree structures composed of nodes containing data such as labels, annotations, and optional original labels, using a provided module `L` for label handling. Concrete use cases include building ASTs from parsed code elements, comparing tree nodes for diffing, and generating unparsed output from trees.",
      "description_length": 492,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Node_mapping.Json",
      "library": "diffast-core",
      "description": "This module provides operations for manipulating and inspecting tree nodes, including adding, removing, and replacing children, managing node attributes and metadata, and handling node relationships such as parent-child and path tracking. It works with complex tree structures composed of node objects that carry rich data, including identifiers, digests, locations, and labels. Concrete use cases include building and modifying abstract syntax trees during code analysis, tracking node mutations, and generating structured output for visualization or serialization.",
      "description_length": 566,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta_base.Fmt",
      "library": "diffast-core",
      "description": "This module handles structured edit operations for tree-like data, supporting insertions, deletions, moves, and attribute modifications with precise path and boundary tracking. It provides functions to construct, serialize, and reverse these operations, enabling applications such as version control and document synchronization. Key operations include attribute diffing, path key generation, and delta serialization to output channels.",
      "description_length": 436,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Delta_format.Format",
      "library": "diffast-core",
      "description": "This module applies delta patches to tree structures and serializes the results, handling operations like node insertion, deletion, pruning, and expansion. It works with tree data structures composed of nodes that have unique identifiers (UIDs), global indexes (GIs), and hierarchical relationships. Concrete use cases include applying version-controlled changes to abstract syntax trees (ASTs) and generating XML or DOT representations of patched trees for visualization or further processing.",
      "description_length": 494,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sites.Sites",
      "library": "diffast-core",
      "description": "This module defines and provides access to language specifications and language lists, represented as lists of location-tagged values. It is used to manage and retrieve sets of languages and their associated configurations within a Dune site context. Concrete use cases include initializing site-specific language settings and supporting language-based routing or configuration lookups.",
      "description_length": 386,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Analyzing.F",
      "library": "diffast-core",
      "description": "This module implements advanced tree differencing algorithms with specialized operations for structural change detection, edit refinement, and mapping validation. It works with hierarchical tree structures (`tree_t`, `node_t`) and node mappings, supporting precise operations like subtree comparison, similarity scoring, UID-based validation, and adjacency analysis. It is used in version control systems, code refactoring tools, and structured data comparison applications where accurate tracking of complex changes such as node moves, relabeling, and subtree transformations is required.",
      "description_length": 589,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta_format.IrreversibleFormat",
      "library": "diffast-core",
      "description": "This module implements irreversible delta encoding operations for structured tree data, converting edit operations into compact string representations and applying patches to XML-like document trees. It works with node data types that include attributes, children, and positional information, along with tree structures that support traversal, mutation, and serialization. Concrete use cases include generating textual delta outputs for version control, applying structured edits to XML documents, and serializing tree transformations for storage or transmission.",
      "description_length": 563,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Stat.Dir",
      "library": "diffast-core",
      "description": "This module tracks and displays detailed statistics for directory structure comparisons. It provides functions to create and manipulate `diff_stat` records that capture counts of deletions, insertions, moves, and other changes between two directory states. Use it to generate formatted reports or logs showing the differences in directory contents after operations like synchronization or version control updates.",
      "description_length": 413,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Node.M",
      "library": "diffast-core",
      "description": "This module implements equality comparison and hashing operations for node objects in an abstract syntax tree. It directly supports the `node_t` type, which represents structured code elements like expressions and statements. These functions enable nodes to be compared for structural equivalence and used in hash-based data structures like sets and maps.",
      "description_length": 355,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Spec_base.OutChannel",
      "library": "diffast-core",
      "description": "This module defines a polymorphic type `t` that represents output channels, supporting both standard library and extended channel implementations. It provides functions to convert between these channel types, check if a channel is standard output, and close the channel. Concrete use cases include handling output streams in a unified way, such as writing to files or network sockets through a consistent interface.",
      "description_length": 415,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Misc.Tbl4",
      "library": "diffast-core",
      "description": "This module implements a 4-dimensional hash table for storing and retrieving values using combinations of four distinct keys. It supports operations to create, add, find, clear, and measure the size of these multi-key associations. Concrete use cases include caching results of functions with four parameters or managing sparse multi-dimensional data.",
      "description_length": 351,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta.Edit",
      "library": "diffast-core",
      "description": "This module handles operations related to edit representations, including converting node data to paths, stringifying move identifiers and edit operations, and determining permutation status of edits. It works with node data structures, path objects, and edit operations, providing functions to manipulate and analyze their relationships. Concrete use cases include flattening remote stable tables, aligning index maps, filtering paths by fractional offsets, and managing unique entries in hash tables.",
      "description_length": 502,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Misc.Tbl1",
      "library": "diffast-core",
      "description": "This module provides basic hash table operations including creation, insertion, lookup, clearing, and length retrieval. It works with polymorphic hash tables mapping keys of any type `'a` to values of any type `'b`. Concrete use cases include managing dynamic key-value mappings, such as tracking variable bindings in an interpreter or caching computed results during analysis.",
      "description_length": 377,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Change_base.F",
      "library": "diffast-core",
      "description": "This module provides functions to retrieve a label from an object and check if an object is phantom. It operates on objects with a nested `data` field containing a `_label`. Use it when processing abstract syntax trees or labeled data structures where distinguishing phantom nodes is necessary.",
      "description_length": 294,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Fact_base.F",
      "library": "diffast-core",
      "description": "This module provides functions to construct and manipulate triple-based nodes representing source code entities, literals (strings, integers, reals), and language-specific resources (e.g., Java, C++ files), alongside predicates to model hierarchical relationships (e.g., parent-child, version control revisions",
      "description_length": 310,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Parser_options",
      "library": "diffast-core",
      "description": "This module defines configuration and search paths for locating parser-related files and modules. It provides functions to resolve file paths based on specified search directories, specifically for configurations, parsers, and modules. Use cases include locating parser definitions and configuration files during initialization or dynamic loading of parsing components.",
      "description_length": 369,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Cache",
      "library": "diffast-core",
      "description": "This module manages cache file and directory operations, providing functions to generate cache names, create and prepare cache paths, and handle cache completion markers. It works with strings for file and directory names, Unix permissions, and a `search_result` type that pairs cache and source paths. Concrete use cases include preparing layered cache directories with specific permissions, searching for cached files with optional fuzzy matching, and marking or checking completion status via sentinel files.",
      "description_length": 511,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Delta_base",
      "library": "diffast-core",
      "description": "This module provides utilities for constructing and manipulating XML-like representations of structural deltas, focusing on string formatting for tags, paths, and metadata attributes that track changes like insertions, deletions, and moves. It operates on tree-like data structures with subtree keys, boundaries, and nested hash tables, enabling precise serialization, parsing, and transformation of hierarchical diffs. Key use cases include version control systems and collaborative document synchronization where structured change tracking and path-aware operations are required.",
      "description_length": 581,
      "index": 29,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Editop",
      "library": "diffast-core",
      "description": "This module defines operations for creating and manipulating edit operations such as insertions, deletions, relabels, and moves. It works with tagged values representing edits, including move identifiers, move kinds (normal, permutation, odd), and structured data containing source locations, group IDs, and unique identifiers. Concrete use cases include constructing and serializing edit scripts for structured data transformation, tracking move operations in a diff, and generating string representations of edit operations based on group identifiers.",
      "description_length": 553,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Adiff",
      "library": "diffast-core",
      "description": "Computes the differences between two arrays by identifying matching and non-matching elements. It returns a tuple containing lists of matched index pairs, unmatched index pairs, and indices of elements unique to each input array. This function is useful for comparing sequences in applications like version control, text editing, or data synchronization where precise element-level differences are required.",
      "description_length": 407,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Charpool",
      "library": "diffast-core",
      "description": "This module provides functions for encoding and transforming strings and characters, primarily using a shared character pool array. It supports operations like concatenating string lists, generating strings from integers, and encoding identifiers with optional ignoring of identifier flags. Use cases include efficient string manipulation, character encoding for compact representation, and generating identifier strings from structured data.",
      "description_length": 442,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Change_base",
      "library": "diffast-core",
      "description": "This module enables the representation and manipulation of AST node changes\u2014including insertions, deletions, and renames\u2014alongside metadata such as source locations and nesting depth. It supports semantic diff generation, transformation systems, and versioned data analysis through operations like change tagging, scoring, and phantom node detection in structured code transformations.",
      "description_length": 385,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Spec",
      "library": "diffast-core",
      "description": "This module defines core data structures and abstractions for representing and labeling nodes in a syntax tree. It includes a labeled node type that combines node data with a generic label structure, and a polymorphic label interface for associating metadata with tree nodes. It is used to build and manipulate abstract syntax trees with labeled elements, particularly in parsing and transformation workflows.",
      "description_length": 409,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Analyzing",
      "library": "diffast-core",
      "description": "This module implements advanced tree differencing algorithms for structural change detection, edit refinement, and mapping validation. It operates on hierarchical tree structures (`tree_t`, `node_t`) and supports specialized operations like subtree comparison, similarity scoring, UID-based validation, and adjacency analysis. It is used in version control systems, code refactoring tools, and structured data comparison applications to track complex changes such as node moves, relabeling, and subtree transformations.",
      "description_length": 519,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Spec_base",
      "library": "diffast-core",
      "description": "This module defines a polymorphic type `t` representing output channels, supporting both standard and extended channel implementations. It includes functions to convert between channel types, check if a channel is standard output, and close the channel. Use cases include unifying output stream handling across files, network sockets, or other output destinations through a consistent interface.",
      "description_length": 395,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Flattreediff",
      "library": "diffast-core",
      "description": "This module implements algorithms for comparing and synchronizing tree structures by identifying differences and mapping corresponding nodes. It operates on labeled tree data with features like node equality checks and child hierarchies, supporting operations such as finding glue candidates and eliminating duplicate entries. Concrete use cases include synchronizing abstract syntax trees during code diffing and merging hierarchical data with structural edits.",
      "description_length": 462,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Lang",
      "library": "diffast-core",
      "description": "This module defines core data types and operations for managing language-specific configurations and mappings during code comparison. It handles node mappings, change extraction, and fact generation with structured data like `extracted_change`, `nmapping_t`, and `opts_t`. It is used to register and search language handlers, extract mapping facts for storage or analysis, and configure options for diffing operations.",
      "description_length": 418,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Fact_base",
      "library": "diffast-core",
      "description": "Constructs and manages triple-based nodes for source code entities, literals, and language-specific resources, with support for hierarchical relationships and version control metadata. Exposes operations to create nodes (mkver, mklit), define predicates (p_is_a, p_version), and apply facts to virtual keys. Used to model codebases with precise semantic relationships for analysis or querying.",
      "description_length": 393,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sourcecode",
      "library": "diffast-core",
      "description": "This module facilitates source code analysis and abstract syntax tree manipulation through operations like detecting generated files, computing file digests with hash algorithms, serializing location mappings, and traversing annotated tree nodes. It works with strings, input/output channels, and tree structures featuring annotations, labels, and positional metadata to support tasks such as tree diffing, mapping, and unparsing. Specific applications include analyzing code provenance, comparing hierarchical AST data, and reconstructing source representations from parsed artifacts.",
      "description_length": 585,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta_common",
      "library": "diffast-core",
      "description": "This module provides utilities for string and path manipulation, tree traversal operations for structured ASTs, and logic for adjusting hierarchical paths during tree transformations. It works with strings, lists, optional values, and custom node types featuring parent-child relationships, unique identifiers, and positional indices. These tools support tasks like analyzing hierarchical data structures, generating structured string representations, and maintaining path consistency during subtree modifications.",
      "description_length": 514,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Edit_base",
      "library": "diffast-core",
      "description": "This module facilitates structural comparison and transformation of abstract syntax trees through operations like segment merging, edit construction, and hierarchical sorting of changes. It works with labeled AST nodes, unique identifiers (UIDs/GIDs), and color-coded diff representations to track modifications such as insertions, deletions, and moves. Key use cases include generating human-readable diff outputs, managing ghost nodes in transformed trees, and organizing edit operations by node metadata for precise structural analysis.",
      "description_length": 539,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Misc",
      "library": "diffast-core",
      "description": "This module combines tree manipulation, serialization, and navigation tools for hierarchical data with UID/GI labels, AST-like parent/child relationships, and object-like records. It provides utilities for pruning oversized trees, converting node metadata to strings, and analyzing scope boundaries using multi-level hash tables (Tbl1\u2013Tbl4) optimized for key-based lookups across one to four dimensions. Use cases include enforcing size thresholds, logging structured node data, and resolving positional relationships in abstract syntax trees.",
      "description_length": 543,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.GIDfragment",
      "library": "diffast-core",
      "description": "This module represents and manipulates genome interval fragments, supporting construction from lists of GIDs and loading from string-encoded fragment data. It defines fragment elements as either single GIDs or GID ranges, with conversion to string representation. Used to parse and handle genomic intervals in a compact, structured format for downstream analysis.",
      "description_length": 363,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Key",
      "library": "diffast-core",
      "description": "This module defines a key type that represents either a wildcard key (`Kany`) or a pair of objects (`Kpair`). It provides operations to construct and inspect keys, including checking their type and converting them to strings using a custom object printer. Keys are used to identify or compare structured data nodes with labeled fields in a tree-like hierarchy.",
      "description_length": 360,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Treediff",
      "library": "diffast-core",
      "description": "This module computes differences between tree structures by comparing nodes and their relationships, using semantic and structural cost functions to determine optimal mappings. It operates on tree data structures with nodes containing metadata like digests, labels, and weights, organized in an Otree index. Concrete use cases include identifying minimal edit sequences for tree transformations, matching subtrees during code refactoring, and detecting structural similarities in hierarchical data.",
      "description_length": 498,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta_interpret",
      "library": "diffast-core",
      "description": "This module implements comparison and traversal operations for tree-like structures, focusing on node relationships and path equivalence. It provides functions to compare elements, determine ancestor-descendant relationships, find common ancestors, and evaluate tree equality based on element data and structure. Use cases include diffing hierarchical data, synchronizing tree states, and validating structural consistency in transformation pipelines.",
      "description_length": 451,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Dirtree_base",
      "library": "diffast-core",
      "description": "This module supports manipulation of file paths, traversal of hierarchical directory structures, and caching via hash digests, operating on data representations like virtual files, nodes, and compressed file content. It facilitates version-controlled file tree management by encoding and persisting data to disk or Virtuoso storage backends, with configurable compression, hashing, and path resolution strategies. Key applications include efficient file structure synchronization, content-addressed storage, and cache-aware directory processing.",
      "description_length": 545,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Node",
      "library": "diffast-core",
      "description": "This module provides structural equality and hashing for abstract syntax tree nodes, enabling comparisons and use in hash-based collections. It works with the `node_t` type representing code elements like expressions and statements. Concrete use cases include tracking node equivalence during AST transformations and efficiently storing and retrieving nodes in hash tables keyed by node identity.",
      "description_length": 396,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Info",
      "library": "diffast-core",
      "description": "This module provides functions to create, modify, and query metadata-rich structures that track source locations, identifiers, and structural attributes. It supports operations like field extraction, updates, and string representation generation, primarily working with hierarchical nodes containing properties such as GID, UID, labels, and size. These capabilities enable use cases like debugging, visualizing, and analyzing tree-based data relationships through containment checks, node range segmentation, and hierarchical relationship mapping.",
      "description_length": 547,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Const",
      "library": "diffast-core",
      "description": "Sets the default threshold for the maximum number of child nodes allowed in a moderate node during AST comparison operations. This value is used to control granularity when analyzing or transforming abstract syntax trees.",
      "description_length": 221,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Proximity",
      "library": "diffast-core",
      "description": "Handles comparison and matching of abstract syntax tree nodes using a hash table to track potential node equivalences. It defines a confidence type to represent matching certainty levels and provides a hash table instance for mapping node identifiers. Useful for analyzing code similarity or detecting structural changes between different AST versions.",
      "description_length": 352,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Postprocessing",
      "library": "diffast-core",
      "description": "Performs postprocessing operations on tree structures, including identifying usage nodes, checking local definitions, and resolving definition nodes via UID lookups. Works with annotated tree nodes containing binding and UID metadata. Used for refining diffs by detecting and correcting moves, eliminating false positives, and resolving enclaves in structured code comparison tasks.",
      "description_length": 382,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Entity",
      "library": "diffast-core",
      "description": "This module defines types and functions for handling version kinds and encodings used in key generation and parsing. It supports operations like converting version kind and string pairs to formatted strings, identifying unknown versions, and determining encoding types. Concrete use cases include constructing and deconstructing versioned keys with separators specific to data storage or comparison workflows.",
      "description_length": 409,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta_format",
      "library": "diffast-core",
      "description": "This module handles delta encoding and decoding operations for structured tree data, providing functions to extract attributes, determine edit status, and parse key metadata from node structures. It works with XML-like tree data types that include attributes, child nodes, positional information, and boundary paths. Concrete use cases include generating and applying structured patches for version control, transforming XML documents, and serializing tree edits for storage or transmission.",
      "description_length": 491,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Comparison",
      "library": "diffast-core",
      "description": "The module provides functionalities for structural comparison and transformation of abstract syntax trees, including node equivalence checks, subtree mutation, similarity scoring, and boundary analysis. It operates on tree nodes with attributes like hierarchical data, unique identifiers, and weight values (`weight_t`), while supporting operations such as digest-based equality, label extraction, and traversal. These capabilities are applied in scenarios like code diffing, structural stability analysis, and weight-driven tree optimization.",
      "description_length": 543,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Dirtree",
      "library": "diffast-core",
      "description": "This module enables directory tree comparison, metadata-driven differencing, and file relationship analysis through operations like digest-based node comparison, path-aware tree traversal, and similarity computation. It operates on hierarchical tree structures augmented with cryptographic digests, file metadata, and versioned labels, while utilizing auxiliary files for logging changes and caching intermediate results. Key applications include detecting file renames/copies during version comparisons, generating structured diff statistics, and supporting customizable tree analysis workflows with configurable hashing and fact extraction strategies.",
      "description_length": 653,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sites",
      "library": "diffast-core",
      "description": "This module manages language specifications and plugins for site generation, providing operations to initialize and retrieve language configurations. It works with lists of location-tagged language values and file-based plugins, supporting dynamic loading of language-specific modules. Concrete use cases include setting up site language contexts and resolving language-based configurations during site processing.",
      "description_length": 414,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Triple",
      "library": "diffast-core",
      "description": "This module supports structured creation and manipulation of RDF-like triples, handling components such as URIs, typed literals, blank nodes, and namespaces. It operates on data structures including semantic nodes, entity metadata, and triple sets, enabling use cases like AST differencing, source code fact modeling, and exporting structured data to databases or visualization formats like DOT and Virtuoso. Key operations include node construction with type-specific encoding, namespace-aware resource naming, and semantic relationship tracking for versioned file hierarchies and transformational changes.",
      "description_length": 607,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta",
      "library": "diffast-core",
      "description": "This module provides functions for analyzing and manipulating node relationships and arrays. It includes operations for retrieving parent and sibling nodes, checking overlaps between ranges, and converting optional node data to strings. It works with node structures containing parent-child relationships, arrays of elements, and UID-based identifiers, supporting tasks like tree navigation, range comparison, and string representation of node states.",
      "description_length": 451,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Stat",
      "library": "diffast-core",
      "description": "Formats and serializes structured diff statistics and metadata, supporting operations like scanning code changes, summarizing differences at file and directory levels, and persisting versioning data. Works with file paths, `diff_stat` records, source metadata objects (version, parser name, path fields), and input/output channels to generate code comparison reports, cache parsed",
      "description_length": 380,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Moveid",
      "library": "diffast-core",
      "description": "This module defines a single data type `t` representing move identifiers in the form of an integer wrapper. It provides conversions to and from strings and integers, along with serialization and deserialization functions for input/output operations. Typical use cases include tracking and persisting move IDs in game states or version control systems.",
      "description_length": 351,
      "index": 62,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Lang_base",
      "library": "diffast-core",
      "description": "This module provides parser registration, configuration management, and identifier transformation operations. It handles hashtables, strings, and custom types like `opts_t` and `lang_t` for parser configurations, along with `tie_id` values that undergo hashing, anonymization, and conversion to attributes or tree structures. These features support tasks such as mapping parser names to external implementations, normalizing identifiers for analysis, and constructing hierarchical data representations from file inputs.",
      "description_length": 519,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Pruned",
      "library": "diffast-core",
      "description": "This module handles construction and string representation of pruned AST node comparisons, including isomorphic, migratory, and other kinds of structural changes. It operates on tuples containing positions, UIDs, and annotated data structures with fields like `gindex`, `label`, and `is_collapsed`. Functions support creating tagged comparison results and formatting them for debugging or reporting.",
      "description_length": 399,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Node_mapping",
      "library": "diffast-core",
      "description": "This module implements bidirectional node mappings with conflict detection for tree transformations. It handles node identity tracking, subtree relationship checks, and UID-based serialization through `nps` and `nups`. Core operations include `add` for mapping node transitions and `is_incompatible` to detect conflicting subtree modifications, used when synchronizing divergent tree versions.",
      "description_length": 393,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Astml",
      "library": "diffast-core",
      "description": "This module provides utilities for managing naming conventions, attributes, and XML-like element construction in AST processing workflows. It operates on strings, lists of strings, and location-annotated values (`Loc.t`), with a focus on handling prefixes, attribute names, and language-specific metadata. Key use cases include code generation, serialization tasks, and anonymization-resistant AST transformations where structured attribute manipulation and namespace consistency are critical.",
      "description_length": 493,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core",
      "library": "diffast-core",
      "description": "This module provides operations for hierarchical data comparison and transformation, including difference computation, edit scripting, and semantic graph manipulation across abstract syntax trees, XML-like structures, and file systems. It supports versioned key management, cost-based node mapping for tree differencing, and semantic triple generation, enabling use cases such as code synchronization, structured metadata analysis, and export to RDF-like formats. Key components optimize cache-efficient string encoding, hierarchical path manipulation, and diff statistics serialization for scalable data processing.",
      "description_length": 616,
      "index": 67,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 146,
    "meaningful_modules": 68,
    "filtered_empty_modules": 78,
    "retention_rate": 0.4657534246575342
  },
  "statistics": {
    "max_description_length": 733,
    "min_description_length": 221,
    "avg_description_length": 457.0735294117647,
    "embedding_file_size_mb": 0.9856910705566406
  }
}