{
  "package": "diffast-core",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 70,
  "creation_timestamp": "2025-07-15T23:19:39.737574",
  "modules": [
    {
      "module_path": "Diffast_core.Delta_base.Fmt.Rev",
      "library": "diffast-core",
      "description": "This module defines a type `t` representing reverse-format deltas for tree structures, including operations for deletions, insertions, moves, changes, and attribute modifications. Each variant captures detailed positional and content information, such as paths, boundaries, subtree keys, and optional integers and content dumpers. The module provides constructors like `mkdel`, `mkins`, and `mkchgattr` to create these delta operations, along with functions to output and reverse them.",
      "description_length": 485,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Analyzing.F.Postprocessing",
      "library": "diffast-core",
      "description": "This module provides postprocessing operations for tree-structured diffing systems, focusing on move detection, edit refinement, and consistency enforcement. It works with hierarchical tree nodes (carrying UIDs and metadata), edit records (`Edit.t`), move tables, and node mappings to resolve conflicts, eliminate invalid transformations, and generate synchronized edit scripts. Key applications include change tracking in version-controlled documents, patch generation for hierarchical data, and consistency maintenance during collaborative editing workflows.",
      "description_length": 560,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sites.Plugins.Langs",
      "library": "diffast-core",
      "description": "This module manages the loading and listing of language plugins for a site generation system. It provides access to plugin paths, retrieves available languages, and loads all or specific language plugins into the runtime. Concrete use cases include initializing language-specific configurations and dynamically loading language modules during site generation.",
      "description_length": 359,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sites.Plugins.Lang_specs",
      "library": "diffast-core",
      "description": "This module manages the loading and registration of language specification files for a site generation system. It provides operations to retrieve registered file paths, list available specs, and load all or individual specification files into the system. Concrete use cases include initializing language-specific configurations and dynamically loading site content based on file changes.",
      "description_length": 387,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta_base.Fmt.Irr",
      "library": "diffast-core",
      "description": "This module defines a type `t` representing structured edit operations such as deletions, insertions, moves, and attribute changes on a tree-like structure. It provides constructors like `mkdel`, `mkins`, and `mkchgattr` to create these operations, each capturing specific metadata including paths, boundaries, and content. These operations are used to represent and serialize fine-grained differences between tree versions, suitable for applications like version control or collaborative editing.",
      "description_length": 497,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Spec_base.OutChannel",
      "library": "diffast-core",
      "description": "This module defines a polymorphic type `t` that represents output channels, supporting both standard library and extended channel implementations. It provides functions to convert between these channel types, check if a channel is standard output, and close the channel. Concrete use cases include abstracting over different output channel implementations when writing cross-platform or library-agnostic I/O code.",
      "description_length": 413,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sites.Sites",
      "library": "diffast-core",
      "description": "Stores and provides access to language specifications and site configurations through two lists of location objects. It works directly with `Dune_site.Private_.Helpers.Location.t` to manage where languages and sites are defined. This module is used to retrieve predefined language and site data for processing build configurations in Dune projects.",
      "description_length": 348,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta_format.Format",
      "library": "diffast-core",
      "description": "This module applies delta patches to tree structures and serializes the results. It works with complex tree data types containing nodes, indexes, and metadata like BIDs, UIDs, and digests. Concrete use cases include applying version-controlled changes to XML documents and generating output files in XML or DOT formats for visualization or further processing.",
      "description_length": 359,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta_base.Fmt",
      "library": "diffast-core",
      "description": "This module handles formatting and transformation of structured deltas, supporting both irreversible and reversible changes across tree-like structures. It provides core operations to compute differences, reverse changes, serialize results, and manage attribute-value pairs and paths, with concrete applications in configuration diffs and bidirectional data transformations. The first child module introduces a type `t` for reverse-format deltas, offering detailed variants and constructors such as `mkdel`, `mkins`, and `mkchgattr` to manipulate and output tree modifications with positional and content metadata. The second child module defines structured edit operations like deletions, insertions, moves, and attribute changes, capturing fine-grained differences for use in version control and collaborative editing systems.",
      "description_length": 828,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Delta_format.ReversibleFormat",
      "library": "diffast-core",
      "description": "This module provides functions to convert structured delta edits into string representations, reverse individual edits or entire delta sequences, and apply deltas to document structures. It operates on tree-like data structures representing XML or AST nodes, with support for bidirectional transformations between document formats and delta encodings. Use cases include generating human-readable delta logs, applying version control patches to hierarchical data, and converting between document revisions while preserving structural integrity.",
      "description_length": 543,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Misc.Tbl4",
      "library": "diffast-core",
      "description": "This module implements a 4-layer nested hash table structure, allowing efficient storage and retrieval of values using four distinct keys. It supports operations to create, add, find, clear, and measure the size of the nested tables. Concrete use cases include managing multi-dimensional keyed data like sparse matrices or hierarchical mappings.",
      "description_length": 345,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Astml.Attr",
      "library": "diffast-core",
      "description": "This module provides functions to parse and extract typed attributes\u2014such as strings, integers, booleans, identifiers, and paths\u2014from association lists and string-based structures like comma-separated values or key-value pairs. It supports handling optional attributes, default values, and type conversions, with utilities for splitting strings, extracting variable IDs, and processing structured metadata fields like dimensions, arguments, or symbolic identifiers. These operations are used to process ASTML metadata representations, enabling robust traversal and interpretation of annotated abstract syntax trees.",
      "description_length": 615,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sourcecode.Tree",
      "library": "diffast-core",
      "description": "This module builds and manipulates abstract syntax trees with labeled nodes and annotations, supporting operations like node creation, comparison, and traversal. It works with tree structures composed of nodes containing data, labels, optional original labels, and annotations, along with ordinal tables for ordering. Concrete use cases include constructing ASTs from source code elements, comparing tree nodes for diffing, and generating unparsed output from trees.",
      "description_length": 466,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Misc.Tbl2",
      "library": "diffast-core",
      "description": "This module implements a two-level hash table structure that maps pairs of keys to values. It supports creating empty tables, adding and retrieving key-value pairs, clearing tables, and measuring their size. It is useful for scenarios requiring efficient lookups and updates on nested key pairs, such as symbol table management in compilers or caching systems with composite keys.",
      "description_length": 380,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Change_base.F",
      "library": "diffast-core",
      "description": "This module provides functions to retrieve a label from an object and check if an object is phantom. It operates on objects with a nested `data` field containing a `_label`. Useful for analyzing or transforming abstract syntax trees where nodes carry labels or phantom markers.",
      "description_length": 277,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Delta.Edit",
      "library": "diffast-core",
      "description": "This module handles operations related to edit representations, including converting node data to paths, stringifying move identifiers and edit operations, and determining permutation status of edits. It works with node data structures, path lists, and hash tables, providing functions to manipulate and analyze edit information. Concrete use cases include flattening remote stable tables, aligning index maps, filtering paths by index range, and extracting ancestor information for node reconciliation.",
      "description_length": 503,
      "index": 15,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Analyzing.F",
      "library": "diffast-core",
      "description": "This module implements tree comparison and diffing algorithms for structured data trees with rich metadata, producing detailed edit sequences and node mappings. It supports operations like pruning, expansion, and boundary detection, and works with hierarchical nodes carrying labels, digests, and positional info, enabling precise comparisons of abstract syntax trees and structural isomorphism detection. The child module enhances these results through move detection, edit refinement, and consistency enforcement, using UIDs, edit records, and move tables to resolve conflicts and generate synchronized scripts. Together, they enable applications such as code differencing, version control, and collaborative editing with accurate, actionable change descriptions.",
      "description_length": 765,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Postprocessing.F",
      "library": "diffast-core",
      "description": "This module performs tree diffing, move detection, and edit refinement on hierarchical syntax trees composed of `node_t` and `tree_t` structures, using UID-based mappings and hashtables to track structural changes. It resolves conflicts during edit synchronization, computes subtree similarities, and generates precise edit scripts for delta computation. Its capabilities are particularly useful in version control systems or refactoring tools where hierarchical data modifications need accurate tracking and transformation.",
      "description_length": 524,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Misc.Tbl1",
      "library": "diffast-core",
      "description": "This module provides a set of basic operations for working with single-argument hashtables, including creating a new table, adding and retrieving key-value pairs, clearing the table, and checking its length. It works directly with hashtables parameterized over key and value types. Concrete use cases include tracking mappings from identifiers to values in symbol tables or caching intermediate results during computation.",
      "description_length": 422,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Misc.Tbl3",
      "library": "diffast-core",
      "description": "This module implements a 3-layer nested hash table structure that maps three keys of arbitrary types to a value. It supports creating an empty table, adding or retrieving key-value entries, clearing the table, and measuring its size. It is useful for scenarios requiring efficient lookups and storage indexed by three distinct keys, such as caching results based on a triple of parameters.",
      "description_length": 389,
      "index": 19,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Sites.Plugins",
      "library": "diffast-core",
      "description": "This module coordinates the dynamic loading and management of language plugins and specification files for a site generation system. It enables runtime access to available languages, plugin paths, and registered file specs, supporting initialization of language-specific configurations and dynamic content updates. Key operations include loading all or specific plugins and specs, listing available languages, and retrieving registered file paths. For example, it can initialize configurations for a new language or reload content when specification files change.",
      "description_length": 563,
      "index": 20,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Spec.LABEL_T",
      "library": "diffast-core",
      "description": "The module provides operations for manipulating and classifying label values that represent nodes in abstract syntax trees during diffing processes. It works with a label type `t` to support structural introspection, property testing (e.g., collapsibility, scoping), and transformations like anonymization or metadata stripping. These capabilities are used to analyze, compare, and simplify hierarchical code structures in AST diffing workflows.",
      "description_length": 445,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Fact_base.F",
      "library": "diffast-core",
      "description": "This module provides operations for constructing triple-based data models representing source code facts, including nodes for entities, version control revisions, and resource types. It defines semantic predicates and utilities to extract structured metadata (e.g., source locations, annotations) from hierarchical, versioned ASTs, while supporting tree traversal to locate ancestor nodes matching specific criteria. The core data structures include labeled trees with versioned nodes and annotated triples, enabling use cases like source code analysis, fact graph construction, and hierarchical navigation with metadata tracking.",
      "description_length": 630,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Stat.File",
      "library": "diffast-core",
      "description": "This module offers utilities to compute and aggregate detailed metrics on code differences and tree structures, using `diff_stat` and `info` types to track node counts, changes (insertions, deletions, moves), similarity scores, and file metadata like LOC. It supports JSON and textual output formats for reporting, with functions to extract statistics from ASTs or cached search results. These capabilities are particularly suited for generating structured summaries of file-level changes and integrating into analysis pipelines or visualization tools.",
      "description_length": 552,
      "index": 23,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Node_mapping.Json",
      "library": "diffast-core",
      "description": "This module implements node manipulation and structural operations for a tree representation with support for mutation tracking, collapsing/expanding subtrees, and path management. It works with node objects containing metadata like identifiers, digests, and location information, along with tree-specific structures such as paths, child arrays, and parent references. Concrete use cases include tree diffing, visual representation generation (e.g., DOT format), and maintaining structural consistency during transformations.",
      "description_length": 525,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Node.Tbl",
      "library": "diffast-core",
      "description": "This module provides imperative hash table operations for managing key-value pairs with a specialized key type, supporting insertion, lookup, deletion, iteration, folding, and sequence conversion. It includes bulk processing functions like `add_seq`, `replace_seq`, and `of_seq` to efficiently handle sequences of key-value pairs for batch updates or table construction. These capabilities are particularly useful for scenarios requiring high-throughput manipulation of node-centric data mappings.",
      "description_length": 497,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Node.M",
      "library": "diffast-core",
      "description": "This module provides equality comparison and hashing operations for node objects. It works directly with the `node_t` type, which represents abstract syntax tree nodes. Concrete use cases include comparing nodes for structural equality and generating hash values for use in hash tables or memoization.",
      "description_length": 301,
      "index": 26,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Delta_format.IrreversibleFormat",
      "library": "diffast-core",
      "description": "This module provides functions to convert structured XML-like edit operations into string representations and apply patches to tree structures. It works with XML nodes, trees, and edit lists, handling transformations like node insertion, deletion, and attribute modification. Concrete use cases include generating human-readable diffs from edit scripts and applying those diffs to update document trees in a structured way.",
      "description_length": 423,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Stat.Dir",
      "library": "diffast-core",
      "description": "This module tracks and displays detailed statistics for tree differencing operations, including counts of deletions, insertions, moves, and relabels. It works with structured data types like trees and sequences, capturing metrics such as node counts, structural changes, and mapping information. Use cases include analyzing code refactoring impact, visualizing tree transformation differences, and generating summary reports for version comparisons.",
      "description_length": 449,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta_base",
      "library": "diffast-core",
      "description": "This module combines XML-based delta representation with structured edit operations to model hierarchical changes in tree-like data. It provides core types like XML elements, paths, and subtree keys, along with operations to generate, parse, and serialize deltas that capture additions, removals, moves, and attribute modifications. The first child module introduces a `t` type for reverse-format deltas with constructors such as `mkdel`, `mkins`, and `mkchgattr`, enabling reversible transformations and bidirectional diffs. The second child module defines structured edits like insertions and moves, supporting precise tracking of hierarchical changes for applications in version control and collaborative editing.",
      "description_length": 716,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta_format",
      "library": "diffast-core",
      "description": "This module processes XML node attributes and metadata to support diffing and formatting operations, enabling the extraction of move control flags, boundary paths, and key attributes during hierarchical data comparison. Its child modules extend this functionality by applying delta patches to tree structures, converting structured edits into string representations, and supporting bidirectional transformations between document formats. Together, they provide a cohesive toolkit for manipulating XML and tree-like data with operations such as node insertion, deletion, and attribute modification, while supporting use cases like version control, diff logging, and structured document updates. Key data types include nodes, trees, deltas, and edit lists, with operations for patch application, serialization, and bidirectional transformation.",
      "description_length": 842,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Spec",
      "library": "diffast-core",
      "description": "This module defines core abstractions for representing and labeling nodes in a tree structure, combining node data with a generic label to support creation, traversal, and comparison of labeled nodes. Its main data type pairs node content with a label of type `t`, enabling operations like structural introspection, property testing (e.g., collapsibility, scoping), and transformations such as anonymization or metadata stripping. It supports use cases like building and analyzing abstract syntax trees with customizable labels, and its child module extends this by enabling classification and manipulation of label values during AST diffing workflows. Together, they facilitate hierarchical code analysis, comparison, and simplification in structured data processing.",
      "description_length": 768,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Charpool",
      "library": "diffast-core",
      "description": "This module provides functions for encoding and transforming strings and characters, primarily using a shared character pool array. It includes utilities for concatenating string lists, generating strings from character data, and handling identifier encoding with configurable flags. Concrete use cases include string manipulation for serialization, character-based encoding schemes, and generating readable or compact string representations from structured data.",
      "description_length": 463,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Const",
      "library": "diffast-core",
      "description": "Controls threshold for node child count in AST comparisons, used to determine when to apply moderate comparison strategies. Works with integer values to influence structural equivalence checks in AST nodes. Useful for tuning comparison sensitivity in large codebases where child node counts affect performance or accuracy.",
      "description_length": 322,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Adiff",
      "library": "diffast-core",
      "description": "Performs array comparison, returning indices of matching, mismatching, added, and removed elements. Works with arrays of any type, identifying differences through index alignment. Useful for tracking changes between two versions of a list-based dataset, such as version-controlled files or dynamic UI elements.",
      "description_length": 310,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sourcecode",
      "library": "diffast-core",
      "description": "This module provides tools for constructing and manipulating abstract syntax trees with rich node annotations, enabling precise handling of source code structure. It supports key operations like node creation, comparison, and traversal, while its submodules handle tree composition, ordinal ordering, and annotation management. You can build ASTs from source elements, compare nodes for diffing purposes, and generate unparsed output while preserving original structure. The combination of labeled nodes, optional original labels, and annotation tracking makes it ideal for tasks like code transformation and analysis.",
      "description_length": 618,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Key",
      "library": "diffast-core",
      "description": "This module defines a key type that represents either a generic key (`Kany`) or a pair of objects (`Kpair`). It provides operations to construct pair keys from object pairs, check key types, and convert keys to strings using a custom object printer. The module is used to uniquely identify and compare structured data elements in a diffing or comparison context.",
      "description_length": 362,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Flattreediff",
      "library": "diffast-core",
      "description": "This module implements tree differencing algorithms that identify structural similarities between hierarchical data representations. It operates on object tree structures with labeled nodes and nested children arrays, performing operations to find glue candidates, eliminate duplicate node pairs, and compute edit sequences. Concrete use cases include comparing abstract syntax trees for code diffing, synchronizing hierarchical document structures, and analyzing version differences in nested data formats.",
      "description_length": 507,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Node_mapping",
      "library": "diffast-core",
      "description": "This module provides core operations for managing and manipulating AST nodes, including formatting, comparison, and table-based mapping of node structures. It supports node objects with attributes like `uid`, `gindex`, and source location, and includes a table type (`Nodetbl.t`) for mapping and tracking node relationships. The module enables tasks such as filtering incompatible nodes, generating string representations for debugging, and maintaining structural integrity during transformations. Submodule functionality extends to tree-level operations such as path management, subtree mutation tracking, and generating visual representations like DOT format.",
      "description_length": 661,
      "index": 38,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Delta_interpret",
      "library": "diffast-core",
      "description": "This module implements comparison and structural analysis operations for tree-like data structures, specifically handling nodes with parent-child relationships and associated data. It provides functions for determining node ancestry, comparing elements and paths, and checking tree equivalence based on named elements and origin data. Concrete use cases include diffing and merging hierarchical structures, such as abstract syntax trees or document models, where precise node positioning and identity are critical.",
      "description_length": 514,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.GIDfragment",
      "library": "diffast-core",
      "description": "This module represents and manipulates genomic interval fragments, supporting construction from lists of GIDs and loading from string-encoded data. It defines fragment elements as either single GIDs or GID ranges, with conversion to string representation. Concrete use cases include parsing and serializing genomic interval data for storage or transmission.",
      "description_length": 357,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Astml",
      "library": "diffast-core",
      "description": "This module combines string and XML manipulation with structured attribute handling to manage language-specific naming, metadata encoding, and AST node serialization. It provides core operations for generating XML tags, processing identifiers and paths, and preserving location data, while its child module extracts and converts typed attributes from key-value structures, supporting optional fields and default values. Together, they enable cross-language code generation, ASTML parsing, and structured metadata traversal\u2014such as decoding comma-separated dimensions or mapping symbolic identifiers to typed values.",
      "description_length": 615,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Sites",
      "library": "diffast-core",
      "description": "This module manages site and plugin configurations for dynamic environments, enabling runtime initialization and modification of site-specific parameters and plugins. It coordinates loading and validation of configurations through direct operations and submodules that handle language specifications, plugin paths, and file specs using location-based data structures. You can use it to enable or disable plugins, reload language configurations, or retrieve registered file paths for dynamic content updates. For example, it supports initializing settings for a new language or applying context-specific configurations during application runtime.",
      "description_length": 645,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Delta_common",
      "library": "diffast-core",
      "description": "This module provides string formatting, path manipulation, and tree traversal utilities for working with abstract syntax trees composed of nodes featuring `gindex` and `uid` identifiers. It supports operations like preorder traversal, ancestor/descendant queries, and postorder sorting of nodes, alongside path adjustments in diffing scenarios, enabling applications in code transformation pipelines or structured data differencing systems. Additional features include color-coded diagnostics and verbose logging helpers to aid debugging during complex tree manipulations.",
      "description_length": 572,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Fact_base",
      "library": "diffast-core",
      "description": "This module constructs and manages semantic triples for versioned entities using nodes and literals, forming a graph-like structure to represent facts. It supports creating version nodes, literal values, and predefined predicates for relationships like type, version, and location, enabling the encoding of entities and their attributes for storage or querying. Its child module extends this by providing operations to model source code facts as triples, including nodes for entities, revisions, and resource types, along with semantic predicates and tree traversal utilities to extract and navigate structured metadata. Together, they support use cases such as building versioned fact graphs, source code analysis, and hierarchical navigation with annotated triples.",
      "description_length": 767,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Treediff",
      "library": "diffast-core",
      "description": "This module implements tree differencing algorithms that compute edit sequences and mappings between tree structures using node metadata like digests, labels, and weights. It operates on trees represented with `Nodetbl.key` nodes and interfaces with `Otree.index`-based tree navigation structures to calculate differences with customizable cost functions. Concrete use cases include comparing abstract syntax trees for code refactoring or document structure analysis, where node identity and subtree similarity determine edit costs.",
      "description_length": 532,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Node",
      "library": "diffast-core",
      "description": "This module centers around the `node_t` type for representing abstract syntax tree nodes, complemented by the `Tbl` module for efficient node-keyed hash tables and the `M` module for metadata management. It supports creating, comparing, and hashing nodes, with `Tbl` enabling batch operations like `add_seq` and `of_seq` for high-throughput data mapping. Use it to track node identities during code comparison, build transformation pipelines with fast lookups, or manage metadata alongside structural AST manipulations.",
      "description_length": 519,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Pruned",
      "library": "diffast-core",
      "description": "This module handles the creation and manipulation of pruned tree structures with specific support for isomorphic, migratory, and other node types. It provides functions to generate string representations of nodes and their metadata, construct typed node records, and check structural properties like single-node status. Concrete use cases include tree differencing, node classification, and generating human-readable output for debugging or logging pruned tree elements.",
      "description_length": 470,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Spec_base",
      "library": "diffast-core",
      "description": "This module provides a polymorphic abstraction for output channels, enabling seamless interoperability between standard library channels and custom or extended channel implementations. It supports key operations such as type conversion, standard output detection, and channel closure. Use it to write I/O code that remains agnostic to the underlying channel type, facilitating cross-platform compatibility or integration across different I/O libraries. For example, a logging function can write to either a file descriptor or an in-memory buffer without changing its implementation.",
      "description_length": 582,
      "index": 48,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Entity",
      "library": "diffast-core",
      "description": "This module defines types and functions for handling version kinds and encodings used in representing structured data keys. It provides operations to convert version kinds and encodings to strings, identify unknown versions, and construct or deconstruct version-based keys using specific separators. Concrete use cases include parsing and formatting versioned identifiers for storage or comparison in a structured format.",
      "description_length": 421,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Editop",
      "library": "diffast-core",
      "description": "This module defines operations for creating and manipulating edit operations such as insertions, deletions, relabels, and moves. It works with tagged data structures that include identifiers, group indices, and source locations, producing string representations or hashable components. Concrete use cases include generating human-readable edit descriptions, hashing edit operations for comparison, and constructing move operations with specific move kinds and identifiers.",
      "description_length": 472,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Stat",
      "library": "diffast-core",
      "description": "This module handles formatting, serialization, and structured metadata management, offering direct operations for version keys, source paths, and parser names, with support for logging, metadata persistence, and resilient input parsing. Its submodules provide detailed code difference metrics and tree structure analysis using types like `diff_stat` and `info`, enabling JSON or textual reporting of file-level changes, node counts, and similarity scores. It includes utilities for file and directory management, channel-based data handling, and retry-driven input scanning, allowing structured output generation and integration into analysis pipelines or visualization tools. Specific uses include extracting statistics from ASTs, summarizing code refactoring impact, and visualizing tree transformation differences.",
      "description_length": 817,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Delta",
      "library": "diffast-core",
      "description": "This module analyzes tree structures and their modifications, offering utilities to compare nodes, detect overlaps, and traverse arrays in reverse. It supports operations like converting optional nodes to strings, finding siblings by position, and identifying structural changes in abstract syntax trees or collaborative edits. The edit representation submodule extends this by handling path conversions, edit stringification, and permutation checks, enabling tasks like reconciling node ancestry and aligning index maps. Together, they facilitate detailed structural analysis and conflict resolution in tree-based data.",
      "description_length": 620,
      "index": 52,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Moveid",
      "library": "diffast-core",
      "description": "This module defines a single data type representing move identifiers in a structured format, supporting conversions to and from strings and integers. It includes functions for serializing and printing move IDs, as well as a predefined value for an unknown move ID. Use this module when handling move identifiers in contexts such as parsing input, generating output, or tracking moves within a larger computation.",
      "description_length": 412,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Lang",
      "library": "diffast-core",
      "description": "This module defines core data types and operations for managing language-specific configurations and mappings during code analysis. It provides functions to register and search for language handlers, extract mapping facts with customizable filtering and iteration over settled and unsettled nodes, and supports external integration via registration hooks. The module works directly with node mappings, options, and change extraction structures to facilitate precise code transformation and comparison workflows.",
      "description_length": 511,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Analyzing",
      "library": "diffast-core",
      "description": "This module provides tools for comparing and analyzing abstract syntax trees with rich metadata, enabling precise structural diffs and node-level analysis. It supports configurable thresholds, move detection, and edit refinement to produce actionable change descriptions, working with hierarchical nodes that carry labels, digests, and positional information. You can use it to diff source files, generate readable node paths, and analyze AST changes with customizable formatting and caching. The integrated diffing algorithms and node mapping techniques facilitate applications like code versioning, collaborative editing, and structural isomorphism verification.",
      "description_length": 664,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Dirtree",
      "library": "diffast-core",
      "description": "This module facilitates hierarchical tree manipulation, file comparison, and version-aware directory analysis through operations like hashing, caching, and structured difference detection. It works with tree nodes, file metadata, versioned entities, and directory structures to support tasks like change tracking, rename detection, and fact-based comparison in version control systems or file synchronization tools. Key patterns involve digest computation, subtree transformation, and serialized difference logging for hierarchical data.",
      "description_length": 537,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Parser_options",
      "library": "diffast-core",
      "description": "This module defines configuration and search paths for locating parser-related files and modules. It provides functions to search for configuration files, parsers, and modules using predefined and custom paths. Concrete use cases include resolving parser specifications and module dependencies during parsing setup.",
      "description_length": 315,
      "index": 57,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Lang_base",
      "library": "diffast-core",
      "description": "This module provides functionality for registering parsers and managing mappings between identifiers and parser-related data using hashtables, alongside configuring parsing workflows through object-based methods. It also supports creating and transforming tie identifiers (string pairs) via hashing, anonymization, and attribute generation, with additional capabilities for constructing hierarchical trees from files. These features are applicable to tasks like parser configuration, cache handling, anonymizing identifier pairs, or modeling structured data hierarchies.",
      "description_length": 570,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Edit",
      "library": "diffast-core",
      "description": "This module facilitates structured tree manipulation through operations like edit script generation, segment sorting, and move/relabel construction, working with abstract syntax trees, node digests, and line match data. It manages complex edit representations using UID/GID identifiers, hash tables, and nested mappings to support code differencing, transformation workflows, and structural consistency enforcement. Key applications include AST node relocation, versioned data synchronization, and semantic-preserving code refactoring with precise tracking of deletions, insertions, and renames.",
      "description_length": 595,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Change_base",
      "library": "diffast-core",
      "description": "This module models structural changes in abstract syntax trees by analyzing typed triples, entity pairs, and semantic predicates across code versions, using significance scores and location data to quantify differences. It includes operations for retrieving node labels and identifying phantom nodes through a nested `data` field, enabling precise semantic diffing and hierarchical change tracking. You can use it to compare code structures, analyze patches, or extract meaningful transformations from version changes. The combination of direct analysis functions and label-based node inspection supports detailed AST comparison and manipulation.",
      "description_length": 646,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Misc",
      "library": "diffast-core",
      "description": "This module organizes a collection of hash-based data structures with varying levels of nesting, from single-layer tables to four-level deep mappings, enabling efficient storage and retrieval of values indexed by one to four keys. It includes utilities for managing tree structures with size constraints and node compression, converting metadata-rich objects into string representations, and analyzing hierarchical relationships through ancestor and descendant queries. Direct operations support tasks like optimizing traversal performance, generating debug logs with structured identifiers (UID.t, GI.t, Loc.t), and enforcing scoping rules, while submodules handle multi-dimensional keyed data such as sparse matrices and composite key caches. Specific use cases include symbol table management, hierarchical mapping, and result caching indexed by multiple parameters.",
      "description_length": 869,
      "index": 61,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Triple",
      "library": "diffast-core",
      "description": "This module provides operations for constructing and manipulating RDF-like triples with support for URIs, literals (strings, integers, real numbers), blank nodes, and qualified names. It works with triple-based data structures to model semantic relationships, versioned resources, and source code metadata, including hierarchical representations of AST changes, file hierarchies, and namespace-qualified entities. Specific use cases include encoding code differencing results (e.g., renames, deletions), managing versioned file bindings, and serializing structured data to RDF or external storage systems.",
      "description_length": 605,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Proximity",
      "library": "diffast-core",
      "description": "Handles comparison and matching of abstract syntax tree nodes using confidence levels and unique identifiers. It provides a hash table mapping UIDs to UIDs for tracking node equivalences, with operations to set, retrieve, and compare node relationships. Useful in code analysis tasks where structural similarity between AST nodes needs to be measured and recorded.",
      "description_length": 364,
      "index": 63,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Comparison",
      "library": "diffast-core",
      "description": "This module supports tree node manipulation, digest-based equality checks, and weight value comparisons for structured hierarchical data. It operates on richly attributed tree nodes (`node2`) with metadata, structural relationships, and nested digests, alongside `weight_t` values for cost metrics. Key use cases include subtree similarity analysis, boundary node stability checks, and diffing workflows requiring precise cost estimation or hierarchical change tracking.",
      "description_length": 470,
      "index": 64,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Info",
      "library": "diffast-core",
      "description": "This module enables the manipulation of metadata objects that encapsulate source locations, identifiers, and structural attributes like labels, sizes, and hierarchical inclusion relationships. It offers functions to resolve containment hierarchies, segment ranges from metadata pairs, and convert structured data to string representations or hierarchical nodes, supporting precise management of complex metadata in scenarios requiring detailed structural analysis.",
      "description_length": 464,
      "index": 65,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Diffast_core.Dirtree_base",
      "library": "diffast-core",
      "description": "This module enables directory tree manipulation through path operations, tree collapsing, and file object construction, combined with digest-based hashing and cache management. It operates on abstract syntax trees, digests, and hashtables, supporting use cases like tracking file changes via cryptographic hashes, compressing hierarchical data, and interfacing with storage backends such as Virtuoso for persistent file system representations.",
      "description_length": 443,
      "index": 66,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Diffast_core.Postprocessing",
      "library": "diffast-core",
      "description": "This module processes annotated AST nodes after structural comparison, identifying use sites, local definitions, and resolving cross-references through UID-based lookups. It integrates tree diffing and move detection from its child module to track changes in hierarchical syntax structures, enabling precise edit scripts and conflict resolution during synchronization. Key operations include determining definition-use relationships, retrieving definitions by unique identifier, and refining edits based on subtree similarity metrics. Example uses include tracking variable references across code revisions and generating accurate deltas for refactoring tools.",
      "description_length": 660,
      "index": 67,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core.Cache",
      "library": "diffast-core",
      "description": "This module manages cache file and directory operations, providing functions to generate cache names, create and prepare cache paths, and handle cache completion markers. It works with strings for paths and permissions, and a `search_result` type that pairs cache and source paths. Concrete use cases include searching for cached files with optional fuzzy matching, preparing cache directories with specific permissions, and marking or checking cache completion status.",
      "description_length": 469,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Diffast_core",
      "library": "diffast-core",
      "description": "This module provides a comprehensive toolkit for modeling, comparing, and transforming hierarchical data structures such as abstract syntax trees and XML documents. It introduces core data types like nodes, trees, deltas, edits, and keys, with support for structured operations including insertion, deletion, relabeling, moving, and attribute modification. These types enable reversible transformations, bidirectional diffs, and precise tracking of hierarchical changes across versions. Specific applications include code diffing, version control, collaborative editing, and structured document synchronization, with utilities for serialization, patch application, and semantic-preserving refactoring.",
      "description_length": 701,
      "index": 69,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 147,
    "meaningful_modules": 70,
    "filtered_empty_modules": 77,
    "retention_rate": 0.47619047619047616
  },
  "statistics": {
    "max_description_length": 869,
    "min_description_length": 277,
    "avg_description_length": 523.1,
    "embedding_file_size_mb": 0.2547121047973633
  }
}