{
  "package": "dunolint",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 55,
  "creation_timestamp": "2025-07-15T23:17:15.860670",
  "modules": [
    {
      "module_path": "Dunolint_vendor_git_pager.Git_pager",
      "library": "dunolint.vendor_git_pager",
      "description": "This module manages the behavior of a pager used for displaying colored git diff output when the color configuration is set to \"auto\". It provides a function to determine whether git commands should use `--color=always` to preserve colors when writing to the pager and an output channel to send lines to the pager. It is used to replicate git's default behavior of showing colored diffs in a custom pager setup.",
      "description_length": 411,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint_vendor_git_pager",
      "library": "dunolint.vendor_git_pager",
      "description": "This module controls the display of colored git diff output in a custom pager setup when color is configured to auto-detect. It determines whether to force color output with `--color=always` and provides an output channel for sending formatted lines to the pager. It supports replicating git's default behavior for colored diffs in external pagers. For example, it ensures colors are preserved when piping output through a custom pager like `less`.",
      "description_length": 448,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint_engine.Config.Running_mode",
      "library": "dunolint.dunolint_engine",
      "description": "This module defines a variant type `t` representing different running modes for a linter configuration, including `Dry_run`, `Check`, `Force_yes`, and `Interactive`. It provides comparison, equality checking, and S-expression serialization functions for this type. These operations support decision-making in linter execution workflows, such as determining user confirmation behavior or output verbosity.",
      "description_length": 404,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint_engine.Visitor_decision",
      "library": "dunolint.dunolint_engine",
      "description": "This module defines a set of decisions made during the traversal of a repository, controlling whether to break, continue, or skip subtrees. It works with directory structures and s-expressions, guiding the iteration behavior based on the presence of subdirectories. Concrete use cases include selectively skipping directories during a file tree analysis or halting traversal upon finding specific conditions.",
      "description_length": 408,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint_engine.Config",
      "library": "dunolint.dunolint_engine",
      "description": "This module defines a configuration type `t` that controls analysis settings, including a running mode that dictates how checks are applied. It provides a default configuration, a command-line parser, and functions to construct and query running modes, enabling use cases like configuring linting behavior for different execution contexts. The running mode type supports variants such as `Dry_run`, `Check`, `Force_yes`, and `Interactive`, with operations for comparison, equality, and S-expression serialization. These features allow fine-grained control over linter execution, such as determining user confirmation prompts or output verbosity.",
      "description_length": 645,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint_engine",
      "library": "dunolint.dunolint_engine",
      "description": "This module processes and enforces linting rules across dune project files and directories, offering functions to lint and format dune files, inspect directory structures during traversal, and apply or simulate file transformations based on configuration. The traversal module defines decisions that control iteration behavior, allowing selective skipping of directories or early termination based on directory structure and s-expression content. The configuration module provides a type `t` with a running mode that customizes analysis settings, supporting variants like `Dry_run`, `Check`, `Force_yes`, and `Interactive` to control execution flow and user interaction. Together, these components enable use cases such as validating dune file structure, autoformatting malformed files, and analyzing directory layouts with configurable output and confirmation prompts.",
      "description_length": 869,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint_cli",
      "library": "dunolint.dunolint_cli",
      "description": "Handles command-line interface parsing and execution for the Dunolint tool. Works with command-line arguments and configuration files to validate and process linter rules. Used to invoke linter checks, display results, and manage rule configurations directly from the terminal.",
      "description_length": 277,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint_vendor_prompt.Prompt.Arg",
      "library": "dunolint.vendor_prompt",
      "description": "Handles command-line argument parsing for user prompts, specifically providing a `yes` argument that returns a boolean value. Works with `Cmdlang.Command.Arg.t` types to integrate directly into command definitions. Useful for implementing interactive CLI tools where user confirmation is required through flags like `--yes`.",
      "description_length": 324,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint_vendor_prompt.Prompt.Choice",
      "library": "dunolint.vendor_prompt",
      "description": "This module represents a single choice in a terminal prompt, pairing a character input with a value. It supports marking a choice as the default option, ensuring only one default exists per prompt. Use it to define selectable options when prompting users for input in command-line interfaces.",
      "description_length": 292,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint_vendor_prompt.Prompt",
      "library": "dunolint.vendor_prompt",
      "description": "This module enables interactive user input in terminal applications, offering functions for free-form text entry, multiple-choice selection, and boolean confirmation. It supports styled output through customizable formatting and handles core data types like strings, lists of choices, and booleans, as seen in workflows requiring user confirmation or configuration. The child module for command-line argument parsing integrates prompts directly into CLI commands, allowing flags like `--yes` to pre-answer prompts, while the choice module structures selectable options with optional default selections. Together, they streamline building interactive command-line tools with rich input handling and structured responses.",
      "description_length": 719,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolint_vendor_prompt",
      "library": "dunolint.vendor_prompt",
      "description": "This module facilitates interactive terminal input with text entry, multiple-choice selection, and boolean confirmation, supporting structured workflows like configuration setup or user prompts. It handles core data types including strings, choice lists, and booleans, with styling options for formatted output. Command-line flags can pre-answer prompts, and choice structures allow default selections. Example uses include CLI tools that require user confirmation or guided setup steps.",
      "description_length": 487,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_linter.Pps.Arg",
      "library": "dunolint.dune_linter",
      "description": "This module represents arguments for preprocessors in Dune configuration files, supporting two forms: a simple preprocessor name or a flag with an optional parameter. It provides equality checking and S-expression conversion for these arguments. It is used to specify and compare preprocessor settings in linters and Dune rules.",
      "description_length": 328,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_linter.Library.Public_name",
      "library": "dunolint.dune_linter",
      "description": "This module handles the creation, parsing, rewriting, and evaluation of public name fields in Dune library stanzas. It works with s-expressions and custom types representing public names and predicates, enabling precise manipulation and validation of Dune file fields. It is used to enforce naming conventions and refactor existing Dune files while preserving accurate source locations for error reporting.",
      "description_length": 406,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_linter.Library.Linter",
      "library": "dunolint.dune_linter",
      "description": "This module evaluates and enforces linter rules over Dune configuration files using predicates and boolean logic. It operates on Dune linter rule definitions and predicate expressions to produce or validate expected configurations. Concrete use cases include checking that library dependencies match expected patterns or ensuring specific build flags are set across projects.",
      "description_length": 375,
      "index": 13,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_linter.Executable.Name",
      "library": "dunolint.dune_linter",
      "description": "This module handles the creation, parsing, and rewriting of executable name fields in Dune configuration files. It provides functions to convert names to and from S-expressions, read and write them in existing or new stanzas, and enforce or evaluate predicates against a given name. It works directly with Dune executable name types and integrates with S-exp rewriting for linting and refactoring tools.",
      "description_length": 403,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_linter.Executable.Linter",
      "library": "dunolint.dune_linter",
      "description": "This module evaluates and enforces linting rules on Dune executable configurations using predicates and boolean logic. It operates on Dune linter rule types and predicate structures to validate or restrict specific configuration patterns. Concrete use cases include checking for disallowed fields in executable stanzas or enforcing consistent build settings across projects.",
      "description_length": 374,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_linter.Library.Private",
      "library": "dunolint.dune_linter",
      "description": "Rewrites library fields using a provided sexp rewriter, with an optional flag to load existing libraries before rewriting. It operates on library configurations represented as S-expressions. Used internally for modifying library definitions during configuration processing.",
      "description_length": 273,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_linter.Executable.Public_name",
      "library": "dunolint.dune_linter",
      "description": "This module handles the creation, parsing, and rewriting of public name fields in Dune executable stanzas. It works with S-expressions and provides functions to read, write, and refactor public name values within existing Dune file structures. It is used to enforce and evaluate predicates on public names during Dune file linting and transformation.",
      "description_length": 350,
      "index": 17,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_linter.Library.Name",
      "library": "dunolint.dune_linter",
      "description": "This module handles the creation, parsing, rewriting, and evaluation of Dune library name fields in sexp format. It provides functions to read, write, and refactor existing Dune stanza fields, ensuring correct structure and location tracking for error reporting. It is used to enforce naming conventions and evaluate predicates against library names in linting rules.",
      "description_length": 367,
      "index": 18,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_linter.Libraries.Entry",
      "library": "dunolint.dune_linter",
      "description": "This module represents individual entries in a list of library dependencies within a Dune stanza. It provides functions to construct and serialize entries, specifically working with library names and S-expressions. It is used to model and manipulate dependencies in Dune configuration files.",
      "description_length": 291,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_linter.Executable.Private",
      "library": "dunolint.dune_linter",
      "description": "This module provides a `rewrite` function that modifies executable configuration by integrating existing library dependencies into the in-memory representation before applying a sexp-based transformation. It operates on `Dune_linter.Executable.t` values and uses a `Sexps_rewriter.t` to alter the underlying S-expression structure. It is used internally to adjust dune file executables with an optional pre-pass that loads and merges existing libraries.",
      "description_length": 453,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_linter.Lint",
      "library": "dunolint.dune_linter",
      "description": "This module defines and manipulates lint configuration values, primarily through creation, parsing, rewriting, and evaluation of lint fields in dune stanzas. It works with s-expressions and custom types representing lint settings, integrating with sexp rewriters for error reporting and transformation. It is used to enforce lint rules during dune file processing and to merge or update existing lint configurations in source files.",
      "description_length": 432,
      "index": 21,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_linter.Library",
      "library": "dunolint.dune_linter",
      "description": "This module represents and manipulates Dune library stanzas, handling core fields such as name, public name, inline tests, flags, and dependencies. It supports reading, writing, and rewriting configurations in S-expression format, enabling tasks like linting, policy enforcement, and automated refactoring of Dune files. The public name and name submodules handle parsing, validation, and transformation of respective fields with precise location tracking, while the linter submodule evaluates and enforces rules using predicate logic. A rewriting submodule modifies library fields using sexp rewriters, optionally loading existing libraries to guide transformations.",
      "description_length": 667,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_linter.Pps",
      "library": "dunolint.dune_linter",
      "description": "This module manages preprocessor specifications in dune configuration stanzas, handling creation, parsing, evaluation, and rewriting with precise error handling. It centers on the `t` type, representing preprocessor configurations, and supports operations like reading and writing s-expressions, rewriting fields, and evaluating conditions against predicates. The child module handles preprocessor arguments, supporting both simple names and flags with optional parameters, with conversions to and from s-expressions and equality checks. Together, they enable structured manipulation of dune preprocessing rules, such as enforcing linter configurations or transforming preprocessor stanzas during refactoring.",
      "description_length": 709,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_linter.Instrumentation",
      "library": "dunolint.dune_linter",
      "description": "This module manages instrumentation settings for Dune stanzas, providing functions to create, parse, evaluate, and enforce instrumentation policies based on predicates. It operates on Dune instrumentation data types, including backend names and predicate expressions, and works with S-expressions for reading and writing field values. It is used to introduce or update instrumentation fields in Dune files, validate their conditions, and integrate with linting rules that require instrumentation enforcement.",
      "description_length": 508,
      "index": 24,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_linter.Stanza",
      "library": "dunolint.dune_linter",
      "description": "This module defines a polymorphic type `t` for representing Dune configuration stanzas, supporting operations to parse, manipulate, and serialize structured Dune file contents. It works with abstract syntax trees derived from Dune's s-expression format, enabling precise transformations and validations of build configuration data. Concrete use cases include linting Dune files for correctness, enforcing project-specific syntax rules, and programmatically generating or modifying Dune configurations during build system automation.",
      "description_length": 532,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_linter.Preprocess",
      "library": "dunolint.dune_linter",
      "description": "This module handles preprocessing configurations in Dune stanzas, supporting creation, parsing, rewriting, and evaluation of preprocessor settings. It works with s-expressions and custom types representing preprocessors, predicates, and rewrite rules. It is used to enforce and modify preprocessor fields in existing Dune files based on linting rules.",
      "description_length": 351,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_linter.Libraries",
      "library": "dunolint.dune_linter",
      "description": "This module manages library dependencies in Dune stanzas, handling parsing, rewriting, and manipulation of dependency lists while preserving location data for accurate error reporting. It supports reading, writing, and refactoring library entries in S-expression format, enabling tasks like linting and automated dependency correction. The child module models individual dependency entries, providing construction and serialization functions for working with library names and structured S-expressions. Together, they allow precise, programmatic modification of Dune configuration files while maintaining format integrity.",
      "description_length": 622,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_linter.Flags",
      "library": "dunolint.dune_linter",
      "description": "This module manages OCaml compiler flags represented as S-expressions, providing operations to create, read, write, and rewrite flag fields within Dune configuration stanzas. It supports parsing and modifying existing flag values, enforcing consistency during refactoring, and evaluating or enforcing conditions on flags. Concrete use cases include linting Dune files by validating, updating, or inserting compiler flags in a structured way.",
      "description_length": 441,
      "index": 28,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_linter.Executable",
      "library": "dunolint.dune_linter",
      "description": "This module manages executable configurations in Dune files, handling core fields like name, public name, libraries, and linting rules through S-expression serialization and rewriting. It supports reading, writing, and transforming executable stanzas, with direct operations for enforcing predicates, evaluating linting policies, and integrating library dependencies during rewriting. The name and public name submodules handle parsing, conversion, and predicate evaluation for their respective fields, while the linting submodule applies boolean logic to enforce configuration rules. Example uses include rewriting executable names, checking for disallowed fields, and merging library dependencies into existing stanzas during automated refactoring.",
      "description_length": 750,
      "index": 29,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Dune_linter",
      "library": "dunolint.dune_linter",
      "description": "This module processes Dune configuration files by parsing stanzas into structured S-expressions, enabling linting, rewriting, and validation of project metadata. It provides core types for stanzas, lint configurations, preprocessors, and dependencies, with operations to read, evaluate, and transform them based on predicates and rewrite rules. Submodules handle specific concerns like library and executable configurations, compiler flags, and instrumentation policies, supporting tasks such as automated refactoring, policy enforcement, and structured editing of Dune files. Examples include rewriting library dependencies, validating preprocessor settings, and updating instrumentation backends while preserving file structure and location data.",
      "description_length": 748,
      "index": 30,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolinter.Handler.Predicate",
      "library": "dunolint.dunolinter",
      "description": "This module defines predicates used to evaluate and enforce conditions on values of type `t`. It includes functions for composing and applying boolean checks, such as validating properties or filtering based on specific criteria. Concrete use cases include checking invariants, enforcing constraints during data processing, and validating structured values against expected forms.",
      "description_length": 380,
      "index": 31,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolinter.Sexp_handler.Make_sexps",
      "library": "dunolint.dunolinter",
      "description": "Handles creation and modification of generic fields in dune stanzas by working directly with S-expressions. It provides functions to read, write, and rewrite fields with a predefined name, operating on lists of S-expressions without parsing their contents. Useful for managing unstructured fields like custom extensions or raw configuration entries in dune files.",
      "description_length": 363,
      "index": 32,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolinter.Sexp_handler.Make_sexpable",
      "library": "dunolint.dunolinter",
      "description": "This module creates a handler for a specific field in a dune stanza using a sexpable type. It defines how to read, write, and rewrite a single field's value using S-expression parsing and serialization. It is used to enforce correct formatting and content of individual fields like `name`, `libraries`, or `flags` in dune files during linting or rewriting.",
      "description_length": 356,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolinter.Sexp_handler.Make_atom",
      "library": "dunolint.dunolinter",
      "description": "This module defines a handler for a dune stanza field that expects exactly one required argument as an Sexp atom. It provides functions to parse, write, and rewrite the field value as a string, ensuring correct S-expression formatting and location handling for errors. It is used to manage simple, single-value fields in dune files, such as flags or identifiers.",
      "description_length": 362,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolinter.Stanza_linter.S",
      "library": "dunolint.dunolinter",
      "description": "This module defines operations for parsing, rewriting, and enforcing constraints on a specific field within an S-expression-based configuration stanza. It works with S-expressions and a predicate type to validate or transform field values, handling both initial field creation and in-place modifications. Concrete use cases include validating and refactoring Dune file fields during linting, such as ensuring correct syntax or merging existing values with new constraints.",
      "description_length": 472,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolinter.Sexp_handler.S",
      "library": "dunolint.dunolinter",
      "description": "This module defines how to parse, rewrite, and generate a specific field in a dune stanza, handling its in-memory representation and its conversion to and from S-expressions. It operates on values of type `t` and interacts with S-expressions using `Sexplib0.Sexp.t`, alongside a `Sexps_rewriter.t` for tracking and modifying existing syntax. It is used to enforce correct field structure during dune file parsing and rewriting, such as validating and updating fields like `(type ...)` or `(libraries ...)`.",
      "description_length": 506,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolinter.Linter.S",
      "library": "dunolint.dunolinter",
      "description": "This module defines a linter that evaluates and enforces rules on a target data structure using a predicate. It provides `eval` to generate a report based on a predicate, and `enforce` to apply a rule, raising an error if the condition is not met. It works with a target type `t` and a predicate type, integrating with the `Dunolint.Trilang` and `Dunolint.Std.Blang` rule description languages for concrete linting logic.",
      "description_length": 421,
      "index": 37,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolinter.Sexp_handler",
      "library": "dunolint.dunolinter",
      "description": "This module processes named fields in dune stanzas, manipulating S-expressions to read, write, and transform configuration entries with precise control over syntax and structure. It supports both untyped operations on raw S-expressions and typed handling of structured fields using sexpable types, enabling tasks like validating field values, inserting missing entries, or reformatting stanzas. Submodules specialize in handling generic fields, single-atom fields, and fields with structured values, allowing operations such as rewriting a `name` field as a string, parsing `libraries` as a list, or modifying custom extensions in dune files. By combining direct Sexp manipulation with typed abstractions and a rewriter for tracking changes, it ensures consistent field ordering, correct syntax, and proper validation during linting or transformation.",
      "description_length": 851,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolinter.Linter",
      "library": "dunolint.dunolinter",
      "description": "This module provides a linter interface for evaluating and enforcing boolean conditions on code structures using predicates and trilang expressions. It supports operations like `eval` to generate validation reports and `enforce` to trigger errors when constraints fail, working with a target type `t` and predicate logic defined through `Dunolint.Trilang` and `Dunolint.Std.Blang`. It enables concrete use cases such as validating naming conventions, structural constraints, and code property checks during static analysis. Submodules extend this functionality by implementing specific linting rules and evaluation strategies tailored to different code structures.",
      "description_length": 664,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolinter.S",
      "library": "dunolint.dunolinter",
      "description": "This module processes and rewrites stanzas in a Dune file by parsing the original contents into S-expressions, applying linting rules to each stanza, and generating updated file contents. It operates on a sequence of stanzas, enabling transformations such as field reordering, value normalization, or consistency checks across Dune configuration files. Concrete use cases include formatting Dune files, enforcing project-specific style rules, or validating stanza structures during CI/CD pipelines.",
      "description_length": 498,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolinter.Private",
      "library": "dunolint.dunolinter",
      "description": "This module assembles structured stanza values from validated intermediate data, supporting polymorphic stanza types during construction. It transforms parsed and checked configuration inputs into finalized stanza objects by mapping validated fields to stanza components and resolving dependencies between them. The core data types include stanza definitions and validated configuration inputs, with operations to construct and link stanza components. For example, it can convert a validated configuration block into a fully resolved stanza object with interdependent fields correctly initialized.",
      "description_length": 597,
      "index": 41,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolinter.Stanza_linter",
      "library": "dunolint.dunolinter",
      "description": "This module processes and validates configuration stanzas in OCaml projects, analyzing syntax, structure, and consistency using abstract syntax trees and string-based representations. It supports linting operations that enforce correctness and style, particularly for S-expression-based files like Dune configurations. The child module extends this functionality by focusing on individual fields, applying predicates to validate or transform values during parsing or rewriting. Examples include ensuring proper syntax in Dune file fields or merging existing values with new constraints while maintaining overall stanza integrity.",
      "description_length": 629,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolinter.Linters",
      "library": "dunolint.dunolinter",
      "description": "This module organizes linters into a structure that allows efficient retrieval by field name using binary search. It accepts a list of linter data and a function to extract field names, then builds an indexed structure for fast lookups. Use this when you need to quickly access specific linters by their field names in a static analysis toolchain.",
      "description_length": 347,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dunolinter.Handler",
      "library": "dunolint.dunolinter",
      "description": "This module evaluates and enforces predicates during linting, using effect handlers to manage enforcement failures, and supports both non-fatal error reporting and exception raising in tests. It works with boolean checks defined in its child module, which provides predicates for validating properties, filtering values, and enforcing constraints on structured data. Main operations include applying predicates to values of type `t`, composing checks into complex boolean expressions, and triggering enforcement actions based on evaluation results. Examples include checking invariants during data processing, filtering values against expected forms, and combining multiple validation rules into a single linter pass.",
      "description_length": 717,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolinter.S-Stanza",
      "library": "dunolint.dunolinter",
      "description": "This module defines a polymorphic variant type `t` representing different stanza types in a Dune configuration file, such as `Library`, `Executable`, or `Test`. It provides functions to classify, compare, and convert stanza types, primarily used for parsing and analyzing Dune files. Concrete use cases include determining the kind of stanza during configuration processing and validating stanza-specific fields.",
      "description_length": 412,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dunolinter",
      "library": "dunolint.dunolinter",
      "description": "This module processes Dune configuration files by analyzing and rewriting s-expressions that represent stanzas such as `library` or `executable`. It provides functions to access stanza metadata, apply linters, and manipulate s-expressions through rewriters, enabling tasks like enforcing Dune file conventions, rewriting deprecated syntax, and validating stanza structures. The module includes submodules for field manipulation, linting rule evaluation, stanza rewriting, and structured stanza construction, supporting both untyped and typed operations on Dune configurations. Specific capabilities include normalizing field values, validating naming conventions, reordering stanza components, and assembling fully resolved stanza objects from validated inputs.",
      "description_length": 761,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_project_linter.Generate_opam_files.Linter",
      "library": "dunolint.dune_project_linter",
      "description": "This module evaluates and enforces conditions on Dune project configurations using predicates and boolean logic. It operates on `predicate` values representing project constraints and `t` values encapsulating linting rules. Concrete use cases include validating opam file generation rules and enforcing project structure requirements during build configuration checks.",
      "description_length": 368,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_project_linter.Implicit_transitive_deps.Linter",
      "library": "dunolint.dune_project_linter",
      "description": "This module evaluates and enforces rules related to implicit transitive dependencies in Dune projects. It works with predicate and rule types defined in the `Dunolint.Std.Dune_project.Predicate` and `Dune_project_linter.Implicit_transitive_deps` modules. Concrete use cases include checking and restricting implicit transitive dependency chains in Dune project configurations using custom logic expressed through `Trilang` and `Blang`.",
      "description_length": 435,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_project_linter.Name.Linter",
      "library": "dunolint.dune_project_linter",
      "description": "This module evaluates and enforces naming rules for Dune projects using predicates and linters. It works with Dune project names and predicate expressions to define and apply linting conditions. Concrete use cases include validating naming conventions and enforcing project-specific naming policies during build configuration.",
      "description_length": 326,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_project_linter.Name",
      "library": "dunolint.dune_project_linter",
      "description": "This module manages project names in Dune configuration files, supporting parsing, validation, and transformation using S-expressions. It includes core operations for reading and writing name fields, along with predicates to enforce naming policies during project setup or refactoring. The linting submodule evaluates and applies naming rules using predicate expressions, enabling concrete use cases like validating naming conventions and checking project-specific policies. Together, they allow developers to define, enforce, and automatically correct naming standards across Dune projects.",
      "description_length": 591,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_project_linter.Stanza",
      "library": "dunolint.dune_project_linter",
      "description": "This module defines a private extensible type `t` used to represent and process individual stanzas in a Dune project configuration. It provides operations for parsing, validating, and manipulating stanza data structures, which correspond to logical blocks in Dune files such as libraries, executables, or tests. Concrete use cases include checking stanza consistency, extracting metadata, and transforming stanza values during project analysis or linting.",
      "description_length": 455,
      "index": 51,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Dune_project_linter.Implicit_transitive_deps",
      "library": "dunolint.dune_project_linter",
      "description": "This module manages the `implicit_transitive_deps` field in Dune project stanzas, handling creation, parsing, and rewriting of its S-expression value. It supports evaluating and enforcing rules based on predicates that define expected conditions, enabling linting and automatic correction of implicit transitive dependency settings. The child module provides concrete rule evaluation using `Trilang` and `Blang`, allowing checks that restrict dependency chains based on custom logic. Together, they enable precise control and validation of implicit transitive dependencies during project analysis or auto-fix workflows.",
      "description_length": 619,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_project_linter.Generate_opam_files",
      "library": "dunolint.dune_project_linter",
      "description": "This module generates, parses, and rewrites `opam` file fields within Dune project stanzas, using S-expressions and custom predicates to enforce field structures during linting or setup. It supports reading, writing, and rewriting fields while preserving location data for precise error reporting. The child module evaluates and enforces configuration conditions using predicates and boolean logic, ensuring constraints on project structure and opam generation rules. Together, they enable validating and transforming opam metadata based on project configuration and linting policies.",
      "description_length": 584,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Dune_project_linter",
      "library": "dunolint.dune_project_linter",
      "description": "This module parses and rewrites Dune project files by analyzing and modifying S-expressions in memory, focusing on top-level stanzas such as `generate_opam_files`, `implicit_transitive_deps`, and `name`. It provides data types for representing stanzas and project metadata, along with operations to read, validate, transform, and enforce project-wide conventions programmatically. Specific use cases include automatically correcting naming policies, validating and rewriting opam fields with precise location tracking, and enforcing rules on implicit transitive dependencies using custom logic. Submodules handle core aspects like stanza structure, project naming, dependency policies, and opam generation, enabling comprehensive linting and transformation workflows.",
      "description_length": 767,
      "index": 54,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 58,
    "meaningful_modules": 55,
    "filtered_empty_modules": 3,
    "retention_rate": 0.9482758620689655
  },
  "statistics": {
    "max_description_length": 869,
    "min_description_length": 273,
    "avg_description_length": 493.54545454545456,
    "embedding_file_size_mb": 0.20019245147705078
  }
}