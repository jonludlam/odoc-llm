{
  "package": "rresult",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:39.338971",
  "modules": [
    {
      "module_path": "Rresult.R.Infix",
      "description": "Provides bind and map operations for result types, enabling sequential computation and transformation while preserving error states. Works with the ('a, 'b) result type, allowing chaining of functions that may fail. Used to handle error-prone computations in a readable, compositional way, such as parsing and validation pipelines.",
      "description_length": 331,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rresult.R",
      "description": "Provides bind and map operations for result types, enabling sequential computation and transformation while preserving error states. It works with the ('a, 'b) result type, allowing functions that may fail to be chained and composed. For example, it can be used to build a parsing pipeline where each step transforms or propagates errors. Operations include chaining computations, applying functions to successful outcomes, and managing failure states gracefully.",
      "description_length": 463,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "rresult",
      "description": "Provides functions for chaining and transforming results, including mapping, binding, and error handling. Works with the `Result` type, enabling safe propagation of success or failure states. Used to handle I/O operations and API calls where error recovery is essential.",
      "description_length": 270,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rresult",
      "description": "Provides bind and map operations for result types, enabling sequential computation and transformation while preserving error states. It works with the ('a, 'b) result type, allowing functions that may fail to be chained and composed. For example, it can be used to build a parsing pipeline where each step transforms or propagates errors. Operations include chaining computations, applying functions to successful outcomes, and managing failure states gracefully.",
      "description_length": 463,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 463,
    "min_description_length": 270,
    "avg_description_length": 381.75,
    "embedding_file_size_mb": 0.011354446411132812
  }
}