{
  "package": "rresult",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:05:04.406045",
  "modules": [
    {
      "module_path": "Rresult.R.Infix",
      "library": "rresult",
      "description": "This module provides infix operators `>>=` and `>>|` for chaining and transforming result values. It works with the `result` type, allowing for concise error handling and value manipulation. Use it to sequence operations that return results, handling success and error cases inline without nested pattern matching.",
      "description_length": 314,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rresult.R",
      "library": "rresult",
      "description": "This module provides a declarative interface for working with result values, enabling mapping, binding, and error transformation over computations that may fail. It supports operations like converting between results and options, trapping exceptions into typed errors, and enriching error messages with context. The child module adds infix operators `>>=` and `>>|` for fluent chaining and transformation of result values. Example uses include sequencing file operations with error propagation, rewording parse errors, or safely extracting values from external inputs.",
      "description_length": 568,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rresult",
      "library": "rresult",
      "description": "This module enables explicit error handling through a result type and combinators for chaining and transforming computations that may fail. It provides core operations like `>>=` for monadic binding and `>>|` for mapping successes, along with utilities to convert between results and options, trap exceptions, and enrich error messages. The child module adds infix operators for fluent composition, supporting use cases like sequencing file operations, rewording parse errors, or safely extracting external input. Together, they form a cohesive interface for declarative error propagation and transformation with support for custom error types and context-aware messaging.",
      "description_length": 672,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 672,
    "min_description_length": 314,
    "avg_description_length": 518.0,
    "embedding_file_size_mb": 0.011322021484375
  }
}