{
  "package": "feat",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:43.182559",
  "modules": [
    {
      "module_path": "Feat.Enum",
      "library": "feat",
      "description": "This module implements enumerations of values indexed by size, supporting operations to construct, combine, and transform them. It provides primitives for building basic enumerations like `empty`, `just`, and `finite`, and combinators like `sum`, `product`, and `map` to merge or modify existing enumerations. Concrete use cases include generating all possible values of a given type up to a certain size, sampling values for testing, and defining recursive enumerations of complex data structures like lists and environments.",
      "description_length": 526,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Feat.IFSeq",
      "library": "feat",
      "description": "This module implements implicit finite sequences with operations including concatenation, Cartesian product, mapping, and element access by index. It supports data types like integers, pairs, and arbitrary elements through functions that generate sequences on demand without full in-memory representation. Concrete use cases include generating test data, sampling large datasets, and working with indexed collections where elements are computed lazily.",
      "description_length": 452,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Feat.Num",
      "library": "feat",
      "description": "This module provides arithmetic operations, comparisons, and bitwise manipulations for big integers using the `Z.t` type. It includes functions for addition, subtraction, multiplication, division with remainder, equality checks, and shifting. Concrete use cases include handling large integer values in cryptographic calculations, precise financial computations, and numeric processing where standard integers are insufficient.",
      "description_length": 427,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Feat",
      "library": "feat",
      "description": "This module combines enumerations, sequences, and big integers to support structured generation and manipulation of complex data. It offers enumerations for size-indexed value generation, sequences for lazy indexed collections, and big integer operations for precise numeric computation. Use it to generate test cases for recursive data structures, work with large on-demand datasets, or perform arithmetic beyond standard integer limits. For example, you can define an enumeration of all lists up to a given length, create a sequence of million-element tuples without full in-memory storage, or compute exact financial totals with arbitrary precision.",
      "description_length": 652,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 652,
    "min_description_length": 427,
    "avg_description_length": 514.25,
    "embedding_file_size_mb": 0.014943122863769531
  }
}