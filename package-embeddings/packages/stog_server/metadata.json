{
  "package": "stog_server",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:39.701652",
  "modules": [
    {
      "module_path": "Stog_server.Ws",
      "library": "stog_server",
      "description": "This module manages WebSocket connections for a preview server, enabling real-time updates and communication with connected clients. It provides functions to send error and warning messages, transmit document patches, and handle incoming WebSocket messages. It works with WebSocket frames, document state data, and client connection lists, specifically supporting document preview synchronization and client-side updates during document processing.",
      "description_length": 448,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog_server.Run",
      "library": "stog_server",
      "description": "This module manages the execution and monitoring of document processing in a preview server. It provides functions to run document computations, watch for file changes, and refresh document content dynamically. It works with document states, module configurations, and error tracking structures to handle updates and notifications during document processing.",
      "description_length": 358,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog_server.Main",
      "library": "stog_server",
      "description": "Handles the setup and registration of a single preview server instance. Works with server configuration data types to bind and manage network endpoints. Used to launch and maintain a local server process for real-time content previews during development.",
      "description_length": 254,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog_server.Http",
      "library": "stog_server",
      "description": "Handles HTTP connections for a preview server, providing functions to generate preview URLs and process HTTP requests. It works with URL configurations, HTTP requests, and server state to serve content dynamically. Used to preview generated content over HTTP with real-time state updates.",
      "description_length": 288,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog_server.Files",
      "library": "stog_server",
      "description": "This module provides direct access to embedded server-side JavaScript and CSS files as string values. It works with string data representing static web assets. Concrete use cases include serving client-side scripts and stylesheets directly from the application binary without external file dependencies.",
      "description_length": 303,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Stog_server.Preview",
      "library": "stog_server",
      "description": "This module serves static JavaScript and CSS assets for a document preview interface and handles HTTP requests to render preview pages. It works with Cohttp request/response types, embedded server files, and WebSocket connections to deliver client-side code that dynamically loads content. Concrete use cases include serving the client JavaScript that connects to a WebSocket for live document updates and delivering styled preview pages with embedded assets.",
      "description_length": 459,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Stog_server",
      "library": "stog_server",
      "description": "This module coordinates real-time document preview functionality through WebSocket and HTTP communication, dynamic content processing, and embedded asset delivery. It supports document state synchronization, client connection management, and live updates via operations like sending patches, handling file changes, and serving embedded JavaScript and CSS. Specific capabilities include launching a preview server instance, streaming document changes to connected clients, and dynamically refreshing content based on file updates.",
      "description_length": 529,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 529,
    "min_description_length": 254,
    "avg_description_length": 377.0,
    "embedding_file_size_mb": 0.02585887908935547
  }
}