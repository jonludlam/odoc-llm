{
  "package": "wu-manber-fuzzy-search",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 19,
  "creation_timestamp": "2025-08-15T12:23:53.816374",
  "modules": [
    {
      "module_path": "Wu_Manber.Matcher.MakeSlowMatcher",
      "library": "wu-manber-fuzzy-search",
      "description": "This module implements a matcher that recalculates mismatch bitvectors on each match attempt using the `mismatch_bv` function from the `SimpleMismatch` functor. It works with pattern sets and input strings, supporting incremental matching operations. It is suitable for scenarios where memory usage must be minimized, and performance is not a primary concern.",
      "description_length": 359,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wu_Manber.Matcher.MakeHashTblMatcher",
      "library": "wu-manber-fuzzy-search",
      "description": "This module implements a fast string matcher using precomputed mismatch bitvectors stored in a randomized hash table. It works with patterns and target strings, supporting efficient substring search by leveraging bitwise operations and hash table lookups. Concrete use cases include high-performance text filtering and pattern matching in large data streams.",
      "description_length": 358,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wu_Manber.FirstMatch.Make",
      "library": "wu-manber-fuzzy-search",
      "description": "This module implements fuzzy search algorithms to find the first match of a pattern in a sequence, returning the error count, match position, and internal state. It operates on sequences of elements defined by the `P` module and supports patterns of up to 63 elements. The module is used to efficiently detect approximate matches in text streams with a bounded number of errors.",
      "description_length": 378,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber.WuManber.RightLeaningWuManber",
      "library": "wu-manber-fuzzy-search",
      "description": "This module implements a right-leaning variant of the Wu-Manber shift-or algorithm for approximate string matching. It operates on arrays of 63-bit integers (`Optint.Int63.t`) representing bitvectors, updating them as characters are processed, and requires feeding sentinel characters at the end of the input to detect matches near the end. It is used in scenarios where matches must be identified incrementally, such as streaming text processing with bounded errors.",
      "description_length": 467,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wu_Manber.Matcher.MakeArrayMatcher",
      "library": "wu-manber-fuzzy-search",
      "description": "This module implements a fast pattern matcher using precomputed mismatch bitvectors stored in an array. It works with patterns and targets represented as sequences of elements, typically strings or arrays, and uses bitwise operations to efficiently determine matches. It is particularly useful in scenarios requiring high-speed pattern matching, such as intrusion detection systems or bioinformatics.",
      "description_length": 400,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber.WuManber.BitOps",
      "library": "wu-manber-fuzzy-search",
      "description": "This module implements bitwise operations for matching patterns with error tolerance in the shift-or variant of the Wu and Manber algorithm. It works with arrays of 63-bit integers (`Optint.Int63.t`) to represent bitvectors, supporting approximate string matching by checking for matches with up to a specified number of errors. Concrete use cases include fast substring searches in text processing where a certain number of mismatches are allowed.",
      "description_length": 448,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber.StringSearch.Pattern",
      "library": "wu-manber-fuzzy-search",
      "description": "This module defines operations and types for working with strings and characters in the context of fuzzy searching. It provides functions for folding over characters, comparing characters, and converting between characters and integers, with a focus on supporting pattern matching algorithms. Concrete use cases include implementing search algorithms that require character-level manipulation and error counting in string matching tasks.",
      "description_length": 437,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wu_Manber.Utils.Int63",
      "library": "wu-manber-fuzzy-search",
      "description": "This module provides arithmetic, bitwise, and conversion operations for 63-bit signed integers, enabling precise control over low-level bit manipulation and platform-specific representations. It supports conversions between various integer types and strings, along with serialization and optimized FFI interactions through direct access to internal representations. These capabilities are particularly useful in systems programming, data encoding, and scenarios requiring strict 63-bit arithmetic guarantees, such as handling overflow-defined behaviors or bit-level protocol implementations.",
      "description_length": 591,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber.WuManber.WuManber",
      "library": "wu-manber-fuzzy-search",
      "description": "Implements the core shift-or variant of the Wu and Manber algorithm using bitvector operations. It provides functions to initialize and update arrays of bitvectors (`Optint.Int63.t array`) based on pattern matching states. This module is used for efficient multiple pattern matching in large texts, particularly when working with large alphabet sizes and performance-critical applications.",
      "description_length": 389,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber.StringSearch.FirstMatch",
      "library": "wu-manber-fuzzy-search",
      "description": "This module implements efficient fuzzy string matching algorithms that return upon finding the first valid match in a sequence of characters. It provides two search variants: `first_match` for standard matching and `first_right_leaning_match` which prioritizes matches ending closer to the start of the input. These functions take a preprocessed pattern, a maximum allowed error count, and a character sequence, returning match details including error count, position, and internal state representation, with `report` formatting the result for output.",
      "description_length": 551,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber.Matcher.SimpleMismatch",
      "library": "wu-manber-fuzzy-search",
      "description": "This module provides functions to compute mismatch information for pattern matching. It works with pattern and element types defined in the parameter module `P`. The `push_mismatch` function updates a bitmask based on element mismatches, while `mismatch_bv` generates a bitmask representing mismatches for a given pattern and element. These operations support efficient substring search algorithms by tracking character mismatches in a bitwise manner.",
      "description_length": 451,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wu_Manber.Utils.Array",
      "library": "wu-manber-fuzzy-search",
      "description": "This module provides array creation, transformation, and manipulation operations such as element-wise mapping, folding, sorting, and slicing, alongside utilities for conversion to and from lists and sequences. It operates on polymorphic arrays (`'a array`), supporting both structural and physical equality checks, and enables use cases like data processing pipelines, in-place memory-efficient modifications, and randomized algorithms via shuffling. Key features include indexed operations, predicate-driven searches, and customizable comparisons for tasks ranging from algorithmic optimizations to sequence interoperation.",
      "description_length": 624,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber.WuManber",
      "library": "wu-manber-fuzzy-search",
      "description": "This module implements the shift-or variant of the Wu and Manber algorithm for approximate string matching using bitvectors. It provides functions to initialize and update bitvector arrays (`Optint.Int63.t array`) to track pattern matching states with up to a specified number of errors. It is used for high-performance multiple pattern matching in large texts, especially with large alphabets and when incremental or streaming processing is required.",
      "description_length": 451,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber.Utils",
      "library": "wu-manber-fuzzy-search",
      "description": "This module combines low-level integer manipulation with array processing capabilities. It offers precise 63-bit signed integer arithmetic and bit operations alongside polymorphic array transformations, including mapping, sorting, and slicing. Use it for systems programming tasks requiring strict integer size constraints or for implementing efficient, index-based array algorithms like in-place updates and custom sorting.",
      "description_length": 424,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber.FirstMatch",
      "library": "wu-manber-fuzzy-search",
      "description": "This module implements fuzzy searching to find the first matching substring in a sequence using the low-level `WuManber` functions. It operates on strings and byte sequences, providing efficient approximate matching with customizable error thresholds. Concrete use cases include searching for typos in log files, matching user input against command lists, and identifying similar DNA subsequences.",
      "description_length": 397,
      "index": 14,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Wu_Manber.Patterns",
      "library": "wu-manber-fuzzy-search",
      "description": "This module defines interfaces for pattern matching and element manipulation, focusing on equality, indexing, and folding operations. It works with patterns composed of elements that support equality checks and index-based access. Concrete use cases include implementing custom pattern matchers, optimizing substring searches, and structuring data for efficient comparison and traversal.",
      "description_length": 387,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber.StringSearch",
      "library": "wu-manber-fuzzy-search",
      "description": "This module implements the Wu and Manber fuzzy string search algorithm, providing `search` and `search_right_leaning` functions that find the first match in a string with up to `k` errors. It works with standard OCaml strings and uses a preprocessed pattern of bounded length to compute matches, returning detailed results including error count, position, and internal state. Concrete use cases include approximate text search in large documents and implementing efficient pattern matching with tolerance for typos or variations.",
      "description_length": 529,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber.Matcher",
      "library": "wu-manber-fuzzy-search",
      "description": "This module provides functors for creating pattern matchers with support for Levenshtein distance calculations. It works with patterns and target sequences such as strings or arrays, using bitvectors to track mismatches efficiently. Concrete implementations include a slow matcher for low-memory substring search, an array-based matcher for high-speed bioinformatics or intrusion detection, and a hash table-based matcher for fast text filtering in large data streams.",
      "description_length": 468,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Wu_Manber",
      "library": "wu-manber-fuzzy-search",
      "description": "This module implements the Wu and Manber algorithm for approximate string matching, supporting operations to search for patterns with up to `k` errors using bitvectors and preprocessed pattern data. It works with strings and byte sequences, offering detailed match information such as position and error count. Concrete use cases include fuzzy text search in documents, approximate command matching in interactive shells, and identifying similar DNA sequences in bioinformatics.",
      "description_length": 478,
      "index": 18,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 24,
    "meaningful_modules": 19,
    "filtered_empty_modules": 5,
    "retention_rate": 0.7916666666666666
  },
  "statistics": {
    "max_description_length": 624,
    "min_description_length": 358,
    "avg_description_length": 451.94736842105266,
    "embedding_file_size_mb": 0.2757844924926758
  }
}