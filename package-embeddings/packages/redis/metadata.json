{
  "package": "redis",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 56,
  "creation_timestamp": "2025-06-18T16:45:11.633993",
  "modules": [
    {
      "module_path": "Redis.Pool.Make.StringBound",
      "description": "Provides operations to convert internal representations to string format, with a focus on bounded string handling. Works with custom type t, designed to enforce length constraints during string manipulation. Used to generate safe, truncated outputs for logging and user interface displays.",
      "description_length": 289,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.Pool.Make.FloatBound",
      "description": "Converts a bounded floating-point value to a string representation, handling edge cases like overflow and underflow. Works with a custom type representing a float constrained within a defined range. Used to safely serialize configuration values that must remain within specified numerical limits.",
      "description_length": 296,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.Pool.Make.SlotMap",
      "description": "The module provides operations for managing maps with integer keys, including adding, removing, and merging entries, as well as ordered traversal, min/max retrieval, and safe lookups. It works with polymorphic value types, enabling efficient key-based access and transformations for scenarios like configuration management or data indexing. Functions support both exception-based and option-based results, along with splitting and filtering capabilities for structured data manipulation.",
      "description_length": 487,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Pool.Make.ConnectionSpecMap",
      "description": "This module provides operations for managing ordered key-value maps, including insertion, deletion, modification, and traversal of entries, with support for filtering, folding, and merging. It works with maps structured around connection specifications as keys and generic values, leveraging ordered semantics for efficient key-based access and transformations. Use cases include configuration management, session tracking, or stateful operations where connection-specific data needs structured storage and retrieval.",
      "description_length": 517,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.Pool.Make.MassInsert",
      "description": "Provides batch command construction for database operations, including setting, deleting, and modifying key-value and hash data. Works with strings, integers, and lists to build sequences of commands for efficient execution. Used to prepare and send multiple database interactions in a single transaction, such as updating multiple records or managing expiration times.",
      "description_length": 369,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.Client.IO",
      "description": "This module offers asynchronous operations for network and file I/O, including socket management, channel reading/writing, and stream processing, alongside concurrency primitives like mutexes. It works with sockets, file descriptors, I/O channels, lists, and streams to enable tasks such as real-time data handling or parallel computation. Use cases include building network servers, managing concurrent file operations, and processing large datasets with sequential or parallel workflows.",
      "description_length": 489,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.Client.StringBound",
      "description": "Provides operations to convert internal representations to string format. Works with custom data types encapsulating string-bound values. Used to generate human-readable output from structured string data.",
      "description_length": 205,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.S.Client.FloatBound",
      "description": "Converts a floating-point bound representation to a string, supporting both finite values and special cases like positive/negative infinity. Operates on a custom type that encapsulates numeric bounds with precision. Used to generate human-readable output for logging or user interfaces dealing with numerical ranges.",
      "description_length": 316,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.Client.SlotMap",
      "description": "This module offers operations for managing integer-keyed maps, enabling insertion, deletion, modification, and traversal of key-value pairs with efficient key-specific ordering. It supports polymorphic value types and includes functions for filtering, folding, and transforming data, along with utilities to extract minimum/maximum bindings or split maps. Use cases include scenarios requiring fast lookup and dynamic data organization, such as symbol tables, caches, or configuration systems with numeric identifiers.",
      "description_length": 518,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.Client.ConnectionSpecMap",
      "description": "This module offers operations for managing ordered maps with connection specifications as keys and generic values, enabling tasks like insertion, deletion, and merging of entries. It supports advanced manipulations such as finding extremal keys, splitting maps, and predicate-based queries, alongside traversal and comparison functions. Use cases include dynamically handling connection configurations or structured data where key-ordering and efficient lookup are critical.",
      "description_length": 474,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.Client.MassInsert",
      "description": "Provides batch command construction for database operations, including setting, deleting, and modifying keys and hash fields. Works with strings, integers, and lists to build structured commands for bulk execution. Used to efficiently manage large-scale data insertion and updates in a single transaction.",
      "description_length": 305,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.Mutex.Make.StringBound",
      "description": "Converts a custom string-like type to a standard string, enabling direct use in output and logging. Operates on an abstract type representing bounded string values with length constraints. Used to safely generate error messages from validated user input.",
      "description_length": 254,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Mutex.Make.FloatBound",
      "description": "Converts a floating-point bound representation to a string, supporting both finite values and special cases like infinity. Works with a custom type that encapsulates float values and their bounds. Used to generate human-readable output for numerical limits in scientific computations.",
      "description_length": 284,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Mutex.Make.SlotMap",
      "description": "This module provides operations for managing associative data structures with integer keys, including insertion, deletion, lookup, and traversal. It supports advanced manipulations like finding extremal entries, splitting maps, and merging collections, tailored for scenarios requiring efficient key-based access. Use cases include managing indexed resources, symbolic tables, or configurations where integer identifiers map to dynamic values.",
      "description_length": 443,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Mutex.Make.ConnectionSpecMap",
      "description": "This module provides operations for managing ordered maps with customizable key ordering and value equality, including adding, removing, merging, and querying key-value bindings. It works with a generic map structure where keys represent connection specifications, enabling efficient manipulation of associations between connections and arbitrary values. Use cases include dynamic configuration management, state tracking, and efficient lookup operations in systems requiring ordered data traversal or predicate-based searches.",
      "description_length": 527,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Mutex.Make.MassInsert",
      "description": "Provides batch operations for inserting and manipulating key-value data, including setting, deleting, and incrementing values. Works with strings, hashes, and lists through a command type that encapsulates database actions. Used to efficiently execute multiple Redis-like commands in a single transaction.",
      "description_length": 305,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Client.Make.StringBound",
      "description": "Provides operations to convert internal representations to string format. Works with custom data types encapsulating string-bound values. Used to generate human-readable output from structured string data.",
      "description_length": 205,
      "index": 16,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.Client.Make.FloatBound",
      "description": "Converts a floating-point bound representation to a string, supporting both finite values and special cases like infinity. Operates on a custom type that encapsulates float values with additional boundary information. Used to generate human-readable output for numerical limits in logging or user interfaces.",
      "description_length": 308,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Client.Make.SlotMap",
      "description": "This module offers operations for managing maps with integer keys, enabling insertion, deletion, lookup, and transformation of key-value pairs. It supports advanced manipulations like folding, filtering, and splitting maps, along with utilities to retrieve extremal values or arbitrary entries. It is suited for applications requiring efficient integer-indexed data handling, such as resource tracking or configuration management.",
      "description_length": 430,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.Client.Make.ConnectionSpecMap",
      "description": "The module offers operations for managing ordered maps with keys of type `connection_spec` and values parameterized by `'a`, including insertion, deletion, merging, and transformation of key-value pairs. It enables querying minimum/maximum keys, splitting maps, and iterating through bindings, supporting use cases like dynamic configuration management or resource allocation where connection-specific data needs structured manipulation.",
      "description_length": 437,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Client.Make.MassInsert",
      "description": "Provides batch command construction for database operations, including setting keys with expiration, deleting keys, manipulating hash fields, and incrementing/decrementing values. Works with strings, lists, and command structures to build sequences of database interactions. Used to efficiently execute multiple database writes in a single transaction.",
      "description_length": 352,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Client.MakeCluster.StringBound",
      "description": "Converts a custom string-like type to its canonical string representation. Operates on an abstract type encapsulating string data with internal bounds checking. Used to generate output for logging or user-facing messages where string integrity is critical.",
      "description_length": 256,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Client.MakeCluster.FloatBound",
      "description": "Converts a bounded floating-point value to a string representation, ensuring proper formatting of min and max constraints. Works with a custom type representing a float that is constrained within a defined range. Used to generate human-readable output for validated user input or configuration parameters.",
      "description_length": 305,
      "index": 22,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.Client.MakeCluster.SlotMap",
      "description": "This module provides operations for creating, modifying, and querying key-value maps with integer keys, supporting actions like insertion, deletion, and traversal. It works with a polymorphic map structure where keys are integers and values can be of any type, enabling efficient associative data management. Use cases include scenarios requiring ordered key access, such as configuration systems or indexed data structures, with capabilities for filtering, splitting, and predicate-based searches.",
      "description_length": 498,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Client.MakeCluster.ConnectionSpecMap",
      "description": "This module provides operations for managing ordered maps with connection specifications as keys and generic values, enabling dynamic manipulation through adding, removing, updating, and merging entries. It supports advanced traversal and transformation tasks like folding, filtering, and splitting, alongside key-based lookups for minimum/maximum bindings or arbitrary selections. Use cases include efficiently handling runtime connection configurations or stateful data associations in systems requiring ordered, customizable key management.",
      "description_length": 543,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Client.MakeCluster.MassInsert",
      "description": "Provides batch command construction for database operations, including setting, deleting, and modifying keys and hash fields. Works with strings, integers, and lists to build structured commands for bulk execution. Used to efficiently manage multiple key-value operations in a single transaction.",
      "description_length": 296,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Cache.Make.StringBound",
      "description": "Converts a custom string-like type to its string representation. Operates on an abstract type that encapsulates string data with bounds checking. Used to safely generate output from validated string inputs in parsing or serialization workflows.",
      "description_length": 244,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Cache.Make.FloatBound",
      "description": "Converts a floating-point bound representation to a string, supporting both finite values and special cases like infinity. Operates on a custom type encapsulating float values with explicit bounds. Used to generate human-readable output for numerical constraints in validation or logging contexts.",
      "description_length": 297,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Cache.Make.SlotMap",
      "description": "The module provides operations for managing key-value mappings with integer keys, supporting creation, modification, and traversal through functions like adding, removing, and transforming entries. It includes specialized functionality for key-based access, such as retrieving minimum/maximum keys, splitting maps, and iterating over bindings, tailored for scenarios requiring efficient integer-indexed data manipulation. Use cases include configuration management or symbolic data structures where ordered, integer-based lookups are critical.",
      "description_length": 543,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Cache.Make.ConnectionSpecMap",
      "description": "The module provides functions for manipulating ordered maps with connection specifications as keys, supporting operations like adding, removing, and transforming entries, along with querying min/max keys and splitting maps. It enables efficient management of dynamic configurations or resource allocations where precise key-ordering and value manipulation are critical. The generic map structure allows flexibility in handling diverse data associations while ensuring structured traversal and modification.",
      "description_length": 506,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Cache.Make.MassInsert",
      "description": "Provides batch command construction for database operations, including setting, deleting, and modifying key-value and hash data. Works with strings, integers, and lists to build sequences of commands for efficient execution. Used to prepare and send multiple Redis-like operations in a single transaction.",
      "description_length": 305,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Pool.Make",
      "description": "This module offers asynchronous I/O and network functionalities, such as DNS resolution, socket management, and channel-based data transfer, alongside concurrency tools like mutexes and condition variables for synchronized thread operations. It handles data structures including sockets, file descriptors, channels, lists, and streams, enabling tasks like real-time data processing and parallel task execution. Use cases include building scalable network servers, managing asynchronous file operations, and coordinating concurrent workflows with precise synchronization.",
      "description_length": 570,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Utils.Option",
      "description": "Provides functions to handle optional values by extracting their contents, applying a function to them, or supplying a default. Works with the option type, which represents values that may be absent. Used to safely apply operations to potentially missing data, such as logging a value if present or substituting a fallback when it is None.",
      "description_length": 339,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Utils.List",
      "description": "Filters elements of a list by applying a function that may discard or transform each element, returning a new list with only the transformed values. Operates on lists of any type, producing lists of possibly different type. Used to safely extract and convert pairs from even-length lists, such as processing structured data streams.",
      "description_length": 332,
      "index": 33,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.Utils.String",
      "description": "Splits a string into parts based on a delimiter, returning a list of substrings or an option containing a tuple of the split components. It handles both full segmentation and partial splitting scenarios. Works with raw string data to extract or divide content for processing or analysis.",
      "description_length": 287,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Mutex.Make",
      "description": "The module offers asynchronous I/O and concurrency operations, including network address resolution, socket connections, and file descriptor management, along with monadic combinators for error handling. It works with data structures like lists, streams, mutexes, and conditions, enabling use cases such as building networked applications and managing concurrent resource access. Specific patterns include sequential and parallel processing of effectful computations, thread synchronization, and efficient channel-based input/output.",
      "description_length": 533,
      "index": 35,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.Client.Make",
      "description": "This module offers asynchronous I/O and network capabilities, handling DNS resolution, socket connections, and channel-based communication, while also supporting threaded list and stream manipulations with synchronization primitives like mutexes and conditions. It works with sockets, file descriptors, channels, lists, streams, and concurrency constructs, enabling tasks such as parallel data processing and thread-safe resource management. Use cases include building networked applications and orchestrating concurrent data transformations with robust error and state handling.",
      "description_length": 579,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Client.MakeCluster",
      "description": "This module offers asynchronous I/O and network operations, such as DNS resolution, socket management, and byte buffer handling, alongside monadic error propagation, enabling efficient networked application development. It also supports list/stream transformations, parallel/sequential execution control, and synchronization via mutexes/conditions, suitable for concurrent data processing or event-driven architectures. Use cases include building scalable network servers or managing complex asynchronous workflows with precise control over resource access and execution order.",
      "description_length": 577,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Cache.Make",
      "description": "Generates a unique string representation for a key, handles cache expiration with an optional integer, converts between string and data types using defined serialization functions. Operates on custom types `key` and `data` for structured data handling. Used to manage cached entries with time-based invalidation and ensure consistent data serialization.",
      "description_length": 353,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.IO",
      "description": "This module offers asynchronous operations for network communication, file management, and concurrency control, utilizing file descriptors, sockets, and byte buffers for I/O tasks, while also enabling stream processing and parallel execution via lists, streams, and synchronization primitives like mutexes. It supports use cases such as real-time data streaming, concurrent task orchestration, and efficient network protocol implementation through monadic error handling and structured execution patterns.",
      "description_length": 505,
      "index": 39,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.Client",
      "description": "manages network and file I/O, string and numeric conversions, and key-value data structures, enabling efficient data handling and transactional database operations. It includes asynchronous I/O, string formatting for custom types, numeric bound serialization, integer and ordered maps, and batch command building. Operations like real-time data processing, logging, caching, and bulk database updates are supported. Examples include building concurrent servers, generating human-readable logs, and managing connection configurations.",
      "description_length": 533,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.Params",
      "description": "Generates a cache key string from a `key` value, defines an optional cache expiration time, converts between `string` and `data` using `data_of_string` and `string_of_data`. Works with custom types `key` and `data` for serialized storage. Used to manage cached values with expiration and format data for persistence.",
      "description_length": 316,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.StringBound",
      "description": "Provides operations to convert internal representations to string format. Works with custom data types encapsulating string-bound values. Used to generate human-readable output from structured string data.",
      "description_length": 205,
      "index": 42,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.FloatBound",
      "description": "Converts a floating-point bound representation to a string, supporting both finite values and special cases like infinity. Works with a custom type that encapsulates float values and their bounds. Used to generate human-readable output for numerical limits in constraint-based systems.",
      "description_length": 285,
      "index": 43,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.SlotMap",
      "description": "This module offers operations for managing maps with integer keys and generic values, enabling efficient insertion, deletion, and lookup. It supports key-based traversal, transformation, and structural manipulations like splitting and folding, ideal for scenarios requiring dynamic data organization with integer identifiers. Use cases include resource tracking, configuration management, and systems needing fast access to structured data via numeric indices.",
      "description_length": 460,
      "index": 44,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S.ConnectionSpecMap",
      "description": "This module provides operations for managing ordered key-value mappings, including insertion, deletion, lookup, transformation, and traversal, with support for filtering and folding. It works with maps where keys are connection specifications and values are polymorphic, enabling structured data handling for connection-specific information. Use cases include efficiently managing network configuration states, session data, or resource bindings where ordered key access and dynamic updates are critical.",
      "description_length": 504,
      "index": 45,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.S.MassInsert",
      "description": "Provides batch command construction for database operations, including setting keys with expiration, deleting keys, manipulating hash fields, and incrementing/decrementing values. Works with strings, lists, and integer values to build structured commands. Used to efficiently execute multiple database writes in a single transaction.",
      "description_length": 333,
      "index": 46,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Redis.Cache",
      "description": "Encapsulates key serialization, cache expiration, and data conversion for structured storage and retrieval. Supports operations on custom types `key` and `data`, including time-limited cache invalidation. Enables consistent conversion between string representations and application-specific data formats. Example uses include caching API responses with TTL and serializing complex records for persistent storage.",
      "description_length": 412,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Client",
      "description": "Provides asynchronous I/O, network communication, and concurrency support through socket management, DNS resolution, and channel-based data flow, with robust error handling and synchronization mechanisms. It defines data types such as sockets, file descriptors, byte buffers, lists, and streams, and supports operations like parallel processing, stream transformations, and thread-safe resource access. Users can build scalable network servers, manage asynchronous workflows, or implement concurrent data pipelines with precise control over execution and state. Examples include handling multiple client connections, processing data streams in parallel, and coordinating threads with mutexes and conditions.",
      "description_length": 707,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Crc16",
      "description": "Calculates CRC16 using the XMODEM algorithm, applying a 16-bit polynomial (0x1021) with no input or output reflection and a zero initial value. It processes strings to produce a 16-bit integer checksum, matching the Redis Cluster key-hashing method. This is used to generate consistent hash values for distributed data partitioning.",
      "description_length": 332,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Mutex",
      "description": "provides asynchronous I/O and concurrency primitives, supporting network operations, file descriptors, and thread synchronization through mutexes and conditions. It defines effectful computations using monadic combinators, enabling structured error handling and composition. Operations include resolving network addresses, establishing socket connections, and managing concurrent access to shared resources. Examples include building scalable network servers and coordinating parallel tasks with safe resource sharing.",
      "description_length": 518,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Pool",
      "description": "Provides asynchronous I/O and network capabilities, including DNS resolution, socket management, and channel-based data transfer, along with concurrency primitives like mutexes and condition variables. It manages sockets, file descriptors, channels, and streams to support real-time data processing and parallel task execution. Tasks such as building scalable network servers or coordinating concurrent workflows can be efficiently implemented. Operations include asynchronous file reads, synchronized thread communication, and efficient data streaming across networks.",
      "description_length": 569,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.S",
      "description": "provides asynchronous I/O and concurrency tools for network and file operations, using file descriptors, sockets, and byte buffers to manage streams and parallel tasks. It includes data structures like maps, buffers, and key-value stores, along with serialization and formatting utilities for efficient data manipulation. Users can implement real-time data pipelines, build concurrent servers, and perform batch database operations. Examples include handling socket streams, logging structured data, and managing transactional key-value storage.",
      "description_length": 545,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis.Utils",
      "description": "Handles optional values, filters and transforms list elements, and splits strings into components. Provides operations for working with option types, list transformations, and string segmentation. Extracts values from options, filters lists to retain transformed elements, and splits strings into parts or tuples. Can log optional values, process structured data from lists, and parse delimited string content.",
      "description_length": 410,
      "index": 53,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "redis",
      "description": "Provides atomic operations for Redis keys such as increment, decrement, and get-set. Works with string, integer, and hash data types through a low-level protocol interface. Enables real-time data synchronization in applications requiring fast in-memory storage.",
      "description_length": 261,
      "index": 54,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Redis",
      "description": "combines key serialization, cache management, and data conversion with asynchronous I/O, network communication, and concurrency support, while offering CRC16 hashing and optional value handling. It manages custom types like `key` and `data`, supports asynchronous operations on sockets and streams, and provides CRC16 computation for consistent hashing. Users can implement caching with TTL, build scalable network servers, and process data streams with thread-safe operations. Examples include serializing records for storage, generating hash slots for Redis Cluster, and transforming optional values in list processing.",
      "description_length": 621,
      "index": 55,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 65,
    "meaningful_modules": 56,
    "filtered_empty_modules": 9,
    "retention_rate": 0.8615384615384616
  },
  "statistics": {
    "max_description_length": 707,
    "min_description_length": 205,
    "avg_description_length": 405.1607142857143,
    "embedding_file_size_mb": 0.20383358001708984
  }
}