{
  "package": "obi",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:30:00.884103",
  "modules": [
    {
      "module_path": "Obi.Index",
      "description": "This module handles serialization and deserialization of structured build data, including dependencies, package metadata, and results, into and out of S-expressions, alongside pretty-printing for human-readable output. It operates on nested OCaml types like `deps`, `result`, `metadata`, and `pkg`, tailored for representing opam2 build information. Use cases include storing build outputs, exchanging data between systems, and generating reports for build diagnostics.",
      "description_length": 469,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obi.Builds",
      "description": "Converts build-related data structures\u2014such as build results, package metadata, parameters, and batches\u2014between OCaml values and S-expression representations. Supports serialization and deserialization for structured build data used internally by the system. Designed for interoperability with tools that process build information through S-expressions.",
      "description_length": 353,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obi.VersionCompare",
      "description": "Compares two version strings according to semantic versioning rules, returning -1, 0, or 1 based on their relative order. It parses version numbers, handles pre-release and build metadata, and ensures accurate ordering for software release tracking. This function is used to determine if a dependency version meets a required minimum or to sort a list of package versions.",
      "description_length": 372,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obi.OpamJsonActions",
      "description": "Processes JSON input to extract and construct a list of package installations, mapping dependencies from a JSON structure to an index format. Works with Ezjsonm's value type and Index.deps records. Used to parse OPAM package installation plans from JSON files into a structured dependency format.",
      "description_length": 296,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "obi",
      "description": "Provides functions to query build status, retrieve logs, and manage package submissions to the opam2 bulk build system. Operates on structured data including build results, package metadata, and log entries. Used to monitor package compatibility, diagnose build failures, and automate reporting of build outcomes.",
      "description_length": 313,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Obi",
      "description": "handles serialization and deserialization of build data between OCaml types and S-expressions, including dependencies, metadata, and results, while supporting version comparison and JSON-based dependency parsing. It operates on types like `deps`, `result`, `metadata`, `pkg`, and version strings, enabling data exchange, report generation, and dependency resolution. Functions include pretty-printing, S-expression conversion, version ordering, and JSON-to-index transformation. Examples include storing build outputs, comparing package versions, and parsing installation plans from JSON.",
      "description_length": 588,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 588,
    "min_description_length": 296,
    "avg_description_length": 398.5,
    "embedding_file_size_mb": 0.022223472595214844
  }
}