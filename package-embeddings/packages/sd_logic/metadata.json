{
  "package": "sd_logic",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-07-15T23:08:48.602628",
  "modules": [
    {
      "module_path": "Sd_logic.Sd_lang.Let_syntax.Let_syntax.Open_on_rhs",
      "library": "sd_logic",
      "description": "This module provides functions to construct and manipulate temporal logic expressions involving state transitions, history, and past values. It works with data types representing state sets, default values, and temporal logic expressions over these states. Concrete use cases include defining signal dependencies, checking past state conditions, and building reactive system behaviors based on historical data.",
      "description_length": 410,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd_lang.Let_syntax.Let_syntax",
      "library": "sd_logic",
      "description": "This module enables the construction and manipulation of logic-based expressions using monadic operations like `return`, `map`, and `both`, working with values wrapped in the `'a Sd_logic.Sd_lang.t` type to support sequential composition and transformation. Its child module extends this functionality to temporal logic, allowing the definition of state transitions, history tracking, and past value dependencies through dedicated types and operations. Together, they support building complex logical and temporal expressions with let-binding syntax, such as composing signal dependencies or encoding reactive behaviors based on historical and current state data. Key data types include state sets, temporal expressions, and monadic wrappers, with operations for both immediate value transformation and historical state analysis.",
      "description_length": 829,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd.Packed",
      "library": "sd_logic",
      "description": "This module defines a packed type `t` that wraps values of type `'a Sd_logic.Sd.Packed.sd_t`, allowing heterogeneous values to be stored uniformly. It provides operations for equality checking, comparison, hashing, and conversion to string and S-expressions, enabling use in hash tables, sets, and persistent data representations. Concrete use cases include managing symbolic expressions with varying types in a uniform way and serializing complex data structures for storage or communication.",
      "description_length": 493,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd.Id",
      "library": "sd_logic",
      "description": "This module defines a type `t` representing identifiers with functions for comparison, serialization, and deserialization. It supports working with S-expressions through `t_of_sexp` and `sexp_of_t`, and provides a comparator for ordering. Concrete use cases include managing unique identifiers in data structures that require ordering or persistent storage in a serialized format.",
      "description_length": 380,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd_lang.Applicative_infix",
      "library": "sd_logic",
      "description": "This module provides applicative-style function application and sequencing operations for values wrapped in the `Sd_logic.Sd_lang.t` type. It supports combining effectful computations by applying functions within the context of the wrapper type, using operators like `<*>`, `<*`, `*>`, and `>>|`. These operations are useful for composing parser or computation pipelines where intermediate results are encapsulated in a monadic-like structure.",
      "description_length": 443,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sd_logic.Sd_lang.Let_syntax",
      "library": "sd_logic",
      "description": "This module enables the construction of logic and temporal expressions using monadic operations like `return`, `map`, and `both`, working with values wrapped in `'a Sd_logic.Sd_lang.t`. It supports sequential composition, state transitions, and history tracking, allowing expressions that depend on past and current state data. Key data types include temporal expressions and state sets, with operations for signal dependency and reactive behavior modeling. Example uses include encoding time-dependent logic and composing reactive systems with let-binding syntax.",
      "description_length": 564,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sd_logic.Sd",
      "library": "sd_logic",
      "description": "This module provides typed identifiers with runtime representations, supporting equality, hashing, and comparison, and integrates with S-expressions and packed types for serialization and uniform value handling. It enables creating unique identifiers associated with specific types, which can be used in sets, hash tables, and persisted through S-expressions, with support for comparison and ordering via built-in operations. The packed type `t` wraps heterogeneous values for uniform storage and manipulation, while identifier handling includes serialization and deserialization for persistent or networked data representations. Example uses include tracking typed symbols across systems, serializing complex configurations, and managing identifiers in ordered collections.",
      "description_length": 774,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Rs",
      "library": "sd_logic",
      "description": "This module implements a map-like structure for efficiently storing and retrieving data associated with Sd values, supporting operations like insertion, lookup, removal, and set manipulation. It provides logarithmic-time membership checks, finds, and updates using Sd or packed Sd keys, along with bulk operations for combining and filtering state. Concrete use cases include managing dynamic robot state data, selectively merging state snapshots, and trimming state to a known set of keys.",
      "description_length": 490,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sd_logic.Sd_lang",
      "library": "sd_logic",
      "description": "This module provides applicative and monadic operations for building and composing computations over values wrapped in `'a t`, enabling function application, sequencing, and combination of results using operators like `<*>`, `>>|`, and `both`. It supports constructing dependency-aware expressions, analyzing computation graphs, and writing chained transformations in a declarative style, with concrete applications in parser pipelines and reactive systems. The core type `'a t` underpins both applicative combinators for effectful computation composition and monadic constructs for stateful, temporal logic modeling. Example uses include encoding time-dependent logic, combining parser results, and expressing reactive behaviors with let-binding syntax.",
      "description_length": 754,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd_node",
      "library": "sd_logic",
      "description": "This module defines a node structure that combines a robot state logic expression with a set of estimated safety constraints. It provides operations to create nodes and execute logic evaluations under specified safety modes, producing robot state outputs. The module is used to model and evaluate decision-making logic for robotic systems, where safety constraints guide execution outcomes.",
      "description_length": 390,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Seq_model",
      "library": "sd_logic",
      "description": "This module implements a stateful sequence model that processes timed logic events using a list of nodes. It supports creating a model with a safety level (safe, warnings, or unsafe), advancing its state with `tick`, and running it for a specified number of ticks or duration. It is used to simulate and execute sequential logic in real-time environments, such as hardware emulation or timed signal processing.",
      "description_length": 410,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Robot_state",
      "library": "sd_logic",
      "description": "This module implements a finite map for storing and querying per-robot state, where each key is an `Sd` or `Packed.t` and the value can be any type. It supports efficient lookups, insertions, deletions, and bulk operations like merging and filtering based on specific key sets. Use cases include tracking dynamic robot configurations, managing per-robot data during execution, and synchronizing state across different subsystems.",
      "description_length": 429,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Robot_state_history",
      "library": "sd_logic",
      "description": "This module offers a history management system for robot states, enabling efficient insertion of new states and retrieval of current or past states with logarithmic or constant time complexity. It operates on a sequence-like structure storing `Sd` values, supporting precise queries to check existence or extract data from historical",
      "description_length": 333,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sd_logic",
      "library": "sd_logic",
      "description": "This module suite provides a comprehensive framework for modeling, manipulating, and executing logic-driven robotic systems with strong typing, serialization, and temporal behavior. Core data types include typed identifiers (`Sd`), packed values for uniform handling, maps for efficient state storage and retrieval, applicative and monadic structures for composing logic, and node-based sequences for time-dependent execution. Operations span from identity comparison and S-expression integration to stateful sequencing, safety-constrained evaluation, and historical state tracking. Example applications include building reactive control pipelines, simulating robot logic with safety constraints, persisting and synchronizing typed state across systems, and composing time-aware decision trees with declarative expressions.",
      "description_length": 823,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 16,
    "meaningful_modules": 14,
    "filtered_empty_modules": 2,
    "retention_rate": 0.875
  },
  "statistics": {
    "max_description_length": 829,
    "min_description_length": 333,
    "avg_description_length": 537.2857142857143,
    "embedding_file_size_mb": 0.051280975341796875
  }
}