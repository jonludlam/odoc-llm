{
  "package": "sd_logic",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 16,
  "creation_timestamp": "2025-06-18T16:34:38.942985",
  "modules": [
    {
      "module_path": "Sd_logic.Sd_lang.Let_syntax.Let_syntax.Open_on_rhs",
      "description": "Provides operations to construct and query time-based state transitions using a custom time tracking structure. Works with types like `Sd.t`, `Rs.t`, and `Rsh.t` to manage historical and current state data. Enables retrieval of past states, state sets, and full state histories for analysis or replay.",
      "description_length": 301,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd_lang.Let_syntax.Let_syntax",
      "description": "Manages time-dependent state transitions through specialized data structures, allowing retrieval of historical states, state sets, and full histories. Operates on types such as `Sd.t`, `Rs.t`, and `Rsh.t` to track and query changes over time. Supports analysis and replay by exposing past state values and transition sequences. Enables precise control over state evolution with time-based queries and modifications.",
      "description_length": 415,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd.Id",
      "description": "Compares identifiers using a custom ordering function, converts identifiers to and from S-expression representations, and provides a comparator for use in ordered data structures. It operates on a type `t` representing unique identifiers and a companion type `comparator_witness` for type-safe comparisons. This enables efficient storage and retrieval of identifiers in sorted collections.",
      "description_length": 389,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd.Packed",
      "description": "Provides operations to convert values to S-expressions, compare, hash, and check equality of packed data. Works with a generic type 'a sd_t and a sealed type t. Used to generate consistent string representations, enable hashing in data structures, and support ordered comparisons in sorted collections.",
      "description_length": 302,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sd_logic.Sd_lang.Applicative_infix",
      "description": "Applies a function wrapped in a context to a value in the same context, and lifts functions into a context for sequential transformation. Operates on monadic types, enabling chaining and combining computations. Used to sequence effectful operations and transform results within a computational context.",
      "description_length": 302,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd_lang.Let_syntax",
      "description": "Tracks time-dependent state changes using `Sd.t`, `Rs.t`, and `Rsh.t`, enabling retrieval of historical states, sets, and full histories. Supports querying past values and transition sequences for analysis and replay. Allows time-based modifications and precise control over state evolution. Examples include reconstructing system states at specific times or auditing transition sequences.",
      "description_length": 389,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Robot_state",
      "description": "Provides operations to manage key-value bindings where keys are of type 'a Sd.t or Sd.Packed.t, including checking existence, retrieving values, setting, and removing entries. Supports merging data from one structure into another, filtering by specific keys, and extracting all keys. Used to update robot configurations by applying changes from a source state or pruning unnecessary data.",
      "description_length": 388,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Robot_state_history",
      "description": "The module provides operations to manage a history of robot states, including creating, accessing, modifying, and querying past states, while tracking state properties. It works with a `t` type that encapsulates a collection of `Robot_state.t` values using a map for efficient data retrieval. Use cases include debugging robot behavior, analyzing state transitions, and real-time monitoring where historical data access is critical.",
      "description_length": 432,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Rs",
      "description": "Provides operations to manage key-value bindings where keys are of type 'a Sd.t or Sd.Packed.t, supporting efficient lookups, insertions, and deletions. Includes methods to merge states, filter bindings, and retrieve all keys present in the structure. Used to update robot state configurations by applying bindings from another state or restricting to a subset of keys.",
      "description_length": 369,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Rsh",
      "description": "This module handles operations for managing and querying sequences of robot states, including accessing, modifying, and analyzing historical state data. It works with structured data types like `Robot_state.t` and `Robot_state_history.t`, enabling efficient state tracking and attribute retrieval. Use cases include robotic system debugging, trajectory analysis, and real-time state monitoring where historical data precision is critical.",
      "description_length": 438,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd",
      "description": "Encapsulates identifier and data handling with custom comparison, serialization, and hashing capabilities. It defines type `t` for unique identifiers and `sd_t` for packed data, along with operations to convert to and from S-expressions, compare, hash, and check equality. The module supports ordered data structures through comparator functions and sealed type abstractions. Examples include sorting identifiers, generating consistent string representations, and enabling hash-based lookups.",
      "description_length": 492,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd_lang",
      "description": "Encapsulates monadic operations for sequencing and transforming values within computational contexts, along with time-aware state management for tracking and querying historical data. Supports operations on types like `Sd.t`, `Rs.t`, and `Rsh.t` to retrieve past states, sets, and transition histories. Enables chaining of effectful computations and precise control over state evolution over time. Can reconstruct system states at specific timestamps or analyze transition sequences for auditing purposes.",
      "description_length": 505,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic.Sd_node",
      "description": "Creates a node from a robot state and a set of packed statements, enabling execution with safety constraints. Operates on robot states, safety configurations, and result structures. Used to validate and apply state transitions in controlled environments.",
      "description_length": 254,
      "index": 12,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Sd_logic.Seq_model",
      "description": "Provides operations to construct a sequence model from a list of nodes, advance the model through time steps, and execute it with optional timing constraints. Works with node lists and an internal state type representing the model's progression. Used to simulate sequential processes with controlled execution and safety checks.",
      "description_length": 328,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "sd_logic",
      "description": "Manages transitions between states in a deterministic state machine, supporting actions and conditions at each step. It works with custom state definitions, action triggers, and condition checks. Used to model robot behavior through time-based state changes, such as moving between predefined locations with specific constraints.",
      "description_length": 329,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Sd_logic",
      "description": "Manages robot state data through key-value operations, history tracking, and sequence modeling. It includes structures for storing and manipulating robot states, with support for merging, filtering, and querying historical data. Operations on identifiers, packed data, and monadic state transitions enable precise control over system behavior and auditing. Examples include updating configurations, analyzing state changes, and simulating sequential processes with safety constraints.",
      "description_length": 484,
      "index": 15,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 17,
    "meaningful_modules": 16,
    "filtered_empty_modules": 1,
    "retention_rate": 0.9411764705882353
  },
  "statistics": {
    "max_description_length": 505,
    "min_description_length": 254,
    "avg_description_length": 382.3125,
    "embedding_file_size_mb": 0.05855560302734375
  }
}