{
  "package": "httpun-eio",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:52.642189",
  "modules": [
    {
      "module_path": "Httpun_eio.Server",
      "description": "Handles incoming HTTP connections by routing requests to a custom handler, with configurable error handling and integration with Eio's concurrency model. Processes stream sockets and HTTP request records, supporting asynchronous request processing. Used to build responsive, concurrent web servers with tailored request and error management.",
      "description_length": 341,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_eio.Client",
      "description": "Provides functions to establish and manage HTTP connections, send requests with custom headers and response handling, and gracefully shut down connections. Works with stream sockets, HTTP request and response objects, and a custom upgrade mechanism for protocols. Used to handle real-time communication and protocol transitions in networked applications.",
      "description_length": 354,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "httpun-eio",
      "description": "Provides HTTP request and response parsing, serialization, and handling using Angstrom and Faraday. Works with byte sequences, strings, and custom protocol structures. Enables building high-throughput web servers and clients with low memory overhead.",
      "description_length": 250,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Httpun_eio",
      "description": "manages HTTP communication through request routing, connection handling, and protocol upgrades, leveraging Eio's concurrency for efficient networked applications. It supports asynchronous processing of HTTP requests and responses, along with custom headers, error handling, and graceful shutdowns. Operations include routing incoming requests, sending outgoing messages, and managing stream sockets. Examples include building a concurrent web server, implementing real-time chat protocols, and handling HTTP/1.1 with custom upgrades.",
      "description_length": 533,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 533,
    "min_description_length": 250,
    "avg_description_length": 369.5,
    "embedding_file_size_mb": 0.014944076538085938
  }
}