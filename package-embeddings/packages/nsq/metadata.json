{
  "package": "nsq",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 9,
  "creation_timestamp": "2025-07-15T23:06:02.110170",
  "modules": [
    {
      "module_path": "Nsq.Consumer.Config",
      "library": "nsq",
      "description": "This module defines configuration parameters for an NSQ consumer, including timeouts, retry policies, and connection settings. It works with basic types like integers, floats, and strings, as well as custom time representations from the `Nsq.Seconds` module. Concrete use cases include setting up consumer behavior such as requeue delays, heartbeat intervals, and limiting concurrent message processing.",
      "description_length": 403,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Nsq.Consumer",
      "library": "nsq",
      "description": "This module manages message consumption from NSQ topics by connecting to NSQD or LookupD, allowing users to define message handlers and start consuming with `create` and `run`. It works directly with NSQ addresses, topics, channels, and raw payloads, enabling tasks like processing event notifications or background jobs. The child module configures consumer behavior using basic types and custom time values, supporting settings such as requeue delays, heartbeat intervals, and concurrency limits. Together, they provide a complete interface for building resilient and configurable NSQ consumers.",
      "description_length": 597,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nsq.Address",
      "library": "nsq",
      "description": "This module defines address representations for NSQ services, supporting both hostname-only and hostname-with-port formats. It provides constructors for creating addresses, a conversion to string, and comparison utilities. Use this module when configuring NSQ client connections or parsing network endpoints.",
      "description_length": 308,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nsq.Milliseconds",
      "library": "nsq",
      "description": "This module defines a type `t` representing durations in milliseconds. It provides conversions from `int64` values and from seconds via `Nsq.Seconds.t`. Use cases include handling time intervals in network communication and timeouts where precise millisecond resolution is required.",
      "description_length": 282,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nsq.Seconds",
      "library": "nsq",
      "description": "Represents time intervals in seconds as a float-backed type. Provides conversion to and from raw float values. Used to enforce type safety in time-based operations like message timeouts and connection health checks.",
      "description_length": 215,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nsq.Topic",
      "library": "nsq",
      "description": "This module defines a variant type for representing NSQ topics, including ephemeral topics, and provides a function to convert these topic values to their string representation. It works with string-based topic identifiers, distinguishing between standard and ephemeral topic types. Use this module when handling topic creation or routing in NSQ-based systems where ephemeral topics need explicit tagging.",
      "description_length": 405,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nsq.Producer",
      "library": "nsq",
      "description": "This module manages publishing messages to NSQ topics. It provides functions to create a producer connection to an NSQ address and send single or batched messages to a specified topic. The module works with byte strings and lists of byte strings, targeting use cases like event logging and message queuing.",
      "description_length": 306,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nsq.Channel",
      "library": "nsq",
      "description": "This module defines two variants of channels: persistent and ephemeral, represented as strings. It provides a function to convert these channel types to their string representation. Useful for constructing valid NSQ channel names when publishing or subscribing to topics.",
      "description_length": 271,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Nsq",
      "library": "nsq",
      "description": "This module provides a comprehensive interface for interacting with NSQ, enabling both message consumption and publication through typed, safe, and configurable APIs. It supports key NSQ concepts like topics, channels, and addresses, with precise handling of time intervals in milliseconds and seconds for timeouts and requeues. Users can connect to NSQ services, define message handlers, publish single or batched messages, and manage ephemeral and persistent channels and topics. Specific tasks include processing background jobs, handling event notifications, and ensuring reliable message delivery with custom concurrency and retry settings.",
      "description_length": 645,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 9,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 645,
    "min_description_length": 215,
    "avg_description_length": 381.3333333333333,
    "embedding_file_size_mb": 0.033138275146484375
  }
}