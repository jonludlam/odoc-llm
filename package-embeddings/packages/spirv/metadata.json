{
  "package": "spirv",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:30:34.302144",
  "modules": [
    {
      "module_path": "SpirV.IdMap.Exceptionless",
      "description": "Provides operations to retrieve values from a key-value store, including fetching a specific entry by key, and selecting an arbitrary key-value pair. Works with a polymorphic table structure that maps keys to values. Used to safely access configuration settings or lookup data without raising exceptions.",
      "description_length": 304,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SpirV.IdMap.Infix",
      "description": "Provides access to elements in a keyed data structure using a postfix operator and updates the structure with a key-value pair using a prefix operator. Works with associative structures that support key-based retrieval and modification. Used to efficiently retrieve values from a map and insert new entries in a concise, readable syntax.",
      "description_length": 337,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "SpirV.IdMap.Labels",
      "description": "Adds key-value pairs to a labeled collection, iterates over elements, transforms values or keys, filters entries based on criteria, and performs folds, comparisons, and equality checks. Operates on a polymorphic labeled data structure where each entry associates a key with a value. Used to manage annotated data sets, such as tagging records with metadata or enriching elements with contextual information.",
      "description_length": 407,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SpirV.IdMap",
      "description": "manages key-value associations through retrieval, modification, and transformation operations, supporting safe access, concise syntax for updates, and rich processing of labeled data. It handles polymorphic tables and associative structures, offering functions to fetch entries, insert new pairs, iterate, filter, and fold over collections. Users can safely retrieve configuration values, update maps with readable operators, and process annotated datasets with custom transformations. Examples include fetching a specific setting, inserting a new key-value pair, and filtering entries based on metadata.",
      "description_length": 604,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "spirv",
      "description": "Provides bitwise operations for manipulating 32-bit and 64-bit integers, including shifts, masks, and bitwise combinations. Works with raw integer values and structured data representing SPIR-V instructions. Used to decode and encode instruction operands in low-level GPU shader code.",
      "description_length": 284,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "SpirV",
      "description": "manages key-value associations with safe access, update operators, and data processing, supporting polymorphic tables and labeled data. It provides functions for fetching, inserting, iterating, filtering, and folding over entries, enabling tasks like retrieving configuration values, modifying maps, and transforming annotated datasets. Operations work across associative structures with concise syntax and type flexibility. Examples include fetching a specific setting, inserting a new pair, and filtering entries by metadata.",
      "description_length": 527,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 604,
    "min_description_length": 284,
    "avg_description_length": 410.5,
    "embedding_file_size_mb": 0.022212982177734375
  }
}