{
  "package": "coqide-server",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 8,
  "creation_timestamp": "2025-08-14T23:06:30.556853",
  "modules": [
    {
      "module_path": "Document",
      "library": "coqide-server.core",
      "description": "This module facilitates stack-based manipulation of sentences with state IDs and focus control, offering operations such as insertion, removal, error handling, and context-aware queries. It works with parameterized document structures containing nodes and formatting combinators, enabling tasks like inspecting focused regions, generating debug output, and connecting to external signals for real-time updates.",
      "description_length": 410,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xmlprotocol",
      "library": "coqide-server.protocol",
      "description": "This module enables IDE operations like manipulating proof states, querying hints, managing options, and interpreting code through structured input types and XML protocol calls. It handles",
      "description_length": 188,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xml_lexer",
      "library": "coqide-server.protocol",
      "description": "This module processes XML input by breaking it into tokens such as tags, text content, and end-of-file markers. It handles low-level parsing tasks including tracking positions in the input stream and restoring previous positions. It is used for reading and analyzing XML documents in a structured way, such as in XML parsers or data import tools.",
      "description_length": 346,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Xml_printer",
      "library": "coqide-server.protocol",
      "description": "This module provides functions to serialize XML data structures into strings or output channels, supporting both compact and formatted representations. It works with `xml` values defined in the `Xml_datatype` module, and handles escaping of special characters in text content. Use cases include generating XML payloads for APIs, logging structured data, or exporting configuration files in a human-readable format.",
      "description_length": 414,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Serialize",
      "library": "coqide-server.protocol",
      "description": "This module enables converting structured data to and from XML representations, focusing on common OCaml types like integers, strings, lists, and options, as well as custom types such as `Loc.t` and unions. It operates on XML trees (`Xml_datatype.xml`) to support use cases like persisting configuration data, exchanging structured information between systems, or parsing domain-specific formats into typed values. Core operations include building XML elements from typed data, extracting values with type-safe helpers, and managing nested or associative structures within XML nodes.",
      "description_length": 583,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Richpp",
      "library": "coqide-server.protocol",
      "description": "This module converts formatted text into semi-structured documents with positional annotations, supporting the extraction of annotated XML representations. It processes `Pp.t` formatting commands into located XML structures, tracks annotation positions in the output string, and generates XML with customizable tag and attribute rendering. Concrete use cases include generating styled text output with precise layout control and mapping annotations back to their original positions in the source string.",
      "description_length": 503,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Xml_parser",
      "library": "coqide-server.protocol",
      "description": "This module provides functions to create and configure an XML parser, handle parsing errors with detailed messages and positions, and parse XML documents from various sources into structured data. It works with XML data types, error types for parsing issues, and input sources like strings, channels, or lex buffers. Concrete use cases include validating and processing XML files, handling malformed XML input with precise error reporting, and extracting structured data from XML content.",
      "description_length": 488,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Interface",
      "library": "coqide-server.protocol",
      "description": "This module provides operations for proof state management, debugger control, and structured input/output handling during interactions with Coq. It works with data types such as state identifiers, Coq-specific representations (e.g., goals, evars, proof diffs), exceptions, XML, and configuration options to enable real-time goal querying, breakpoint management, and bidirectional communication between an IDE and the proof assistant. Specific use cases include synchronizing proof state changes, executing search constraints, and inspecting execution stacks during interactive theorem proving.",
      "description_length": 593,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 9,
    "meaningful_modules": 8,
    "filtered_empty_modules": 1,
    "retention_rate": 0.8888888888888888
  },
  "statistics": {
    "max_description_length": 593,
    "min_description_length": 188,
    "avg_description_length": 440.625,
    "embedding_file_size_mb": 0.11631298065185547
  }
}