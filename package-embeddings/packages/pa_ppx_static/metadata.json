{
  "package": "pa_ppx_static",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:30:08.427918",
  "modules": [
    {
      "module_path": "Pa_ppx_static_runtime.Static",
      "description": "Creates a mutable reference that holds a value initialized via a delayed computation. Accepts a function that produces a value and returns a reference to it. Used to safely capture and retrieve values in contexts where eager evaluation is undesirable.",
      "description_length": 251,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_static.ExprHash",
      "description": "This module offers operations for inserting, deleting, looking up, iterating, and transforming key-value pairs in a hash table, with a focus on OCaml expressions as keys and generic values. It enables constructing hash tables from sequences of pairs and updating them in place, making it suitable for tasks like symbolic computation or managing abstract syntax trees where dynamic key-value mappings are required.",
      "description_length": 413,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_static.Statics",
      "description": "Provides functions to construct, modify, and retrieve a list of module structure items. Operates on a custom type containing a list of OCaml structure items and strings. Used to dynamically build and inspect module content during parsing or transformation processes.",
      "description_length": 266,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "pa_ppx_static",
      "description": "Provides functions to manipulate and inspect static type information during compilation, including type checking, pattern matching, and type reconstruction. Works with OCaml's abstract syntax trees and type representations. Enables advanced metaprogramming tasks such as generating code based on type constraints.",
      "description_length": 313,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Pa_ppx_static_runtime",
      "description": "Provides a way to capture and retrieve values at runtime using a thunk-based approach. Works with the `'a t` type, which encapsulates a delayed computation. Used to safely access values that are initialized later in the program execution.",
      "description_length": 238,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Pa_ppx_static",
      "description": "manages dynamic key-value mappings and module structure items, with operations for building, modifying, and inspecting both. It supports hash tables with OCaml expressions as keys and arbitrary values, along with a custom type for handling lists of structure items and strings. Users can construct hash tables from sequences, update them in place, and build or analyze module content programmatically. Examples include managing symbol tables during parsing or generating code with custom module structures.",
      "description_length": 506,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 506,
    "min_description_length": 238,
    "avg_description_length": 331.1666666666667,
    "embedding_file_size_mb": 0.02220916748046875
  }
}