{
  "package": "choice",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:04:37.128082",
  "modules": [
    {
      "module_path": "Choice.Enum",
      "library": "choice",
      "description": "This module implements enumerations of choices, allowing operations like adding elements, combining pairs, and converting to lists. It supports deterministic and non-deterministic construction of sequences, with precise control over element order and combination logic. Concrete use cases include generating test inputs, modeling branching computations, and handling multiple possible outcomes in a structured way.",
      "description_length": 414,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Choice.Array",
      "library": "choice",
      "description": "Generates permutations and combinations of array elements using choice-based enumeration. Works directly with OCaml arrays of any type. Useful for combinatorial search problems and generating test cases with specific input arrangements.",
      "description_length": 236,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Choice.List",
      "library": "choice",
      "description": "Handles combinatorial operations on lists, including generating suffixes, permutations, and combinations. Works directly with `'a list` and produces results in the `Choice` monad or `Choice.Enum` for lazy evaluation. Useful for tasks like generating all possible orderings or selecting subsets of a specific size from a list.",
      "description_length": 325,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Choice",
      "library": "choice",
      "description": "This module models non-deterministic computations with backtracking using a monadic interface, where `'a t` represents multiple possible outcomes. It offers operations like `mplus` to combine choices, `bind` to sequence computations, and `guard` to filter results, while supporting fair and interleaved execution strategies. The module integrates with its submodules to handle sequences: one constructs enumerations of choices with controlled combination logic, another generates permutations and combinations of arrays, and a third does the same for lists, including suffixes and subsets. You can use it to solve combinatorial problems, parse ambiguous inputs, or explore all valid paths in a search space.",
      "description_length": 707,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 707,
    "min_description_length": 236,
    "avg_description_length": 420.5,
    "embedding_file_size_mb": 0.014937400817871094
  }
}