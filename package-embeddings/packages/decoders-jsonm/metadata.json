{
  "package": "decoders-jsonm",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-06-18T16:27:32.246986",
  "modules": [
    {
      "module_path": "Decoders_jsonm.Encode",
      "description": "This module enables streaming JSON encoding through operations that handle primitive types, collections, and custom encoders, translating OCaml values into structured JSON outputs. It utilizes a stateful environment to manage encoder transitions and a custom `value` type representing encoding actions, supporting features like optional/nullable fields and object/array construction. Use cases include real-time data serialization, efficient handling of large datasets, and integrating with I/O channels for incremental JSON generation.",
      "description_length": 536,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "decoders-jsonm",
      "description": "Parses JSON-like strings into custom OCaml types using a set of combinators that define how to extract and transform values. It supports common data structures such as records, variants, lists, and options, with explicit handling for nested and optional fields. This allows direct conversion of structured data from external sources into strongly typed OCaml values for safe processing.",
      "description_length": 386,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Decoders_jsonm",
      "description": "Encodes OCaml values into JSON streams using a stateful approach, with support for primitives, collections, and custom types through a `value` type that represents encoding steps. It allows for building objects and arrays incrementally, handling optional and nullable fields, and integrating with I/O channels for efficient, real-time serialization. Operations include encoding integers, strings, lists, and records, as well as custom transformations. Examples include generating JSON from large datasets without loading entire structures into memory and streaming results to a network socket.",
      "description_length": 593,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 593,
    "min_description_length": 386,
    "avg_description_length": 505.0,
    "embedding_file_size_mb": 0.011309623718261719
  }
}