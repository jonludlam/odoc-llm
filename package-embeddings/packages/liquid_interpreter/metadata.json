{
  "package": "liquid_interpreter",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:03.303296",
  "modules": [
    {
      "module_path": "Liquid_interpreter.Interpreter",
      "description": "This module specializes in evaluating and manipulating Liquid templates through operations like expression evaluation, conditional checks, and control flow execution, while maintaining a context for variable tracking and notifications. It works with structured data such as abstract syntax trees (ASTs), values, expressions, conditions, and context objects to enable dynamic template processing. Specific use cases include rendering templates with embedded logic, handling includes and styles, and updating context states during template execution.",
      "description_length": 548,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_interpreter.Interpreter_objects",
      "description": "Handles loop context creation and iteration control, operating on syntax context structures and integer bounds. Manages loop state transitions by updating context with start and end values. Used to generate dynamic content ranges during template rendering.",
      "description_length": 256,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "liquid_interpreter",
      "description": "Provides functions to parse and render Liquid templates, including template variables, filters, and control structures. Works with strings, maps, and custom data types to populate templates dynamically. Used to generate dynamic HTML or text outputs in web applications based on structured data.",
      "description_length": 294,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Liquid_interpreter",
      "description": "Evaluates and manipulates Liquid templates by processing abstract syntax trees, expressions, and conditions, while managing context and notifications to support dynamic content generation. It enables conditional logic, control flow, and loop iteration, using structured data to track variable states and manage template execution. Loop contexts are created and controlled with integer bounds, allowing for dynamic content ranges and state transitions. Examples include rendering templates with embedded logic, handling includes, and generating repeated content sections.",
      "description_length": 570,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 570,
    "min_description_length": 256,
    "avg_description_length": 417.0,
    "embedding_file_size_mb": 0.014929771423339844
  }
}