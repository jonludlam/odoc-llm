{
  "package": "liquid_interpreter",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:49.044061",
  "modules": [
    {
      "module_path": "Liquid_interpreter.Interpreter",
      "library": "liquid_interpreter",
      "description": "This module implements a templating engine interpreter with operations for state management, context manipulation, and control flow evaluation. It processes Liquid AST nodes, contexts, and string buffers to handle variable interpolation, conditionals, loops, cycles, and includes, while supporting error handling and context transformations. Key use cases include dynamic template rendering, stateful value tracking, and nested context operations during markup generation.",
      "description_length": 472,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_interpreter.Interpreter_objects",
      "library": "liquid_interpreter",
      "description": "This module provides functions to create a loop context for iterating over sequences and to generate a request value representing HTTP input data. It operates on Liquid syntax values and contexts, enabling dynamic variable binding during template execution. Concrete use cases include handling loop iterations in templates and accessing request parameters during web page rendering.",
      "description_length": 382,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Liquid_interpreter",
      "library": "liquid_interpreter",
      "description": "This module interprets Liquid templates by evaluating AST nodes against runtime contexts, supporting dynamic content generation with control flow, loops, and variable binding. It manages state through context transformations and handles HTTP request data to enable template-driven web rendering. Key data types include contexts, loop states, and Liquid syntax values, with operations for variable interpolation, conditional branching, and iterative processing. Examples include rendering personalized HTML pages with looped content sections and injecting request parameters into template variables during server-side rendering.",
      "description_length": 627,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 627,
    "min_description_length": 382,
    "avg_description_length": 493.6666666666667,
    "embedding_file_size_mb": 0.011310577392578125
  }
}