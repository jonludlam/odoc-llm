{
  "package": "process",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:35.625361",
  "modules": [
    {
      "module_path": "Process.Exit",
      "library": "process",
      "description": "This module defines types and functions for handling process exit statuses, including exit codes and signals that caused termination. It provides conversions from Unix process status values and utilities to format exit information as strings. Concrete use cases include logging process termination details and debugging subprocess failures.",
      "description_length": 340,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Process.Signal",
      "library": "process",
      "description": "This module defines a type `t` representing standard POSIX signal values, including both named signals like `SIGINT` and `SIGTERM` and an `Unknown` constructor for unrecognized signal numbers. It provides conversions between signal values and their integer and string representations. Use cases include handling process signals in system programming, such as responding to user interrupts, managing child process termination, or configuring signal handlers.",
      "description_length": 457,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Process.Output",
      "library": "process",
      "description": "Handles the result of executing external commands by capturing their exit status and output streams. It provides functions to run processes, collect their standard output and error as lists of lines, and return structured results. Useful for scripting tasks that require inspecting command outputs and handling errors based on exit codes.",
      "description_length": 338,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Process.S",
      "library": "process",
      "description": "This module executes external processes and captures their output. It provides `run` to start a process with optional input and expected exit status, returning an output handle, and `read_stdout` to retrieve the standard output as a list of lines. It works with byte sequences for input and strings for command arguments, targeting use cases like scripting shell commands or integrating system tools.",
      "description_length": 400,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Process",
      "library": "process",
      "description": "This module orchestrates process execution and interaction, enabling precise control over running external commands, managing input/output streams, and capturing structured results. It supports operations like launching processes with `run`, reading output incrementally with `read_stdout`, and handling input via byte sequences, while integrating submodules for detailed exit status inspection, signal handling, and output collection. Core data types include `t` for signals, process output structures, and exit status variants that distinguish normal termination from signal-based interruptions. Example uses include scripting command pipelines, logging subprocess outcomes, and integrating system tools with fine-grained error handling based on exit codes or signals.",
      "description_length": 770,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 770,
    "min_description_length": 338,
    "avg_description_length": 461.0,
    "embedding_file_size_mb": 0.01862049102783203
  }
}