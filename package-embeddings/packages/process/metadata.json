{
  "package": "process",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:59:36.164154",
  "modules": [
    {
      "module_path": "Process.Output",
      "library": "process",
      "description": "Handles the result of executing external commands by capturing their exit status, standard output, and standard error. It provides structured access to these outputs as lists of strings, along with the exit status encoded as a specific type. This module is used to inspect and react to the outcome of system processes, such as running shell commands or external programs.",
      "description_length": 371,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Process.Exit",
      "library": "process",
      "description": "This module defines types and functions for handling process exit statuses, including exit codes and signals. It provides conversions from Unix process statuses to structured exit information and utilities to format exit details as strings. Concrete use cases include logging process termination reasons and handling subprocess errors in system-level applications.",
      "description_length": 364,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Process.Signal",
      "library": "process",
      "description": "This module defines a type `t` representing standard POSIX signal values, such as `SIGINT`, `SIGTERM`, and `SIGKILL`, including a constructor for unknown signals. It provides conversions between signal values and their integer and string representations via `of_int` and `to_string`. Use this module when handling or responding to system signals in process management tasks, such as terminating processes gracefully or handling interruptions.",
      "description_length": 442,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Process",
      "library": "process",
      "description": "This module handles process execution and termination, providing functions to run external commands with optional input and expected exit statuses, and to read structured output or stdout. It works with strings, byte sequences, and process output types that encapsulate exit statuses and signal information. Concrete use cases include executing shell commands, capturing their output for analysis, and managing process termination through signal handling and exit status verification.",
      "description_length": 484,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 484,
    "min_description_length": 364,
    "avg_description_length": 415.25,
    "embedding_file_size_mb": 0.058380126953125
  }
}