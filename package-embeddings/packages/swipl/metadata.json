{
  "package": "swipl",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-07-15T23:08:17.024667",
  "modules": [
    {
      "module_path": "Swipl.Syntax",
      "library": "swipl.swipl",
      "description": "This module provides combinators for building Prolog terms using OCaml syntax, including operators for conjunction (`&&`) and disjunction (`||`), creating atoms (`!`), and applying predicates (`app`). It works with Prolog terms (`Swipl.t`), function symbols (`Swipl.fn`), and optional module qualifiers. Concrete use cases include constructing Prolog queries programmatically and embedding Prolog logic directly in OCaml code.",
      "description_length": 426,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Swipl",
      "library": "swipl.swipl",
      "description": "This module integrates a logic programming engine into OCaml, enabling bidirectional communication through Prolog terms (`t`), contexts (`ctx`), and variables. It supports evaluating queries, extracting typed values from Prolog, and encoding OCaml data into Prolog terms, with operations for managing atoms, modules, and execution. The embedded syntax combinators allow constructing Prolog expressions using familiar OCaml operators like `&&`, `||`, and `!`, and applying predicates with `app`. Example uses include embedding Prolog rules directly in OCaml, querying structured data, and transforming values between the two languages during execution.",
      "description_length": 651,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindings.Stubs.Database",
      "library": "bindings",
      "description": "This module defines constants used to configure database operations in logic programming contexts. It supports specifying insertion modes like `assertz` for appending facts or `asserta` for prepending, along with storage behaviors such as `create_thread_local` for thread-specific data or `create_incremental` for change tracking. These constants are directly used when defining dynamic predicates or managing fact persistence in Prolog-style engines.",
      "description_length": 451,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindings.Stubs.CVT",
      "library": "bindings",
      "description": "This module defines integer constants representing various type tags and flags used in term serialization and memory management. It includes values for basic data types like integers, floats, and strings, as well as control flags for writing and memory allocation. These constants are used to configure and control low-level term conversion and marshaling operations.",
      "description_length": 367,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindings.Stubs.Action",
      "library": "bindings",
      "description": "This module defines integer constants representing specific runtime actions and configuration options for memory management. It provides direct mappings to internal system behaviors such as tracing, debugging, halting, and console attachment. These values are used to control low-level execution and resource handling in embedded or system-level OCaml applications.",
      "description_length": 365,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindings.Stubs.Term",
      "library": "bindings",
      "description": "This module defines constants representing Prolog term types, such as variables, atoms, integers, floats, lists, and dictionaries. It provides direct mappings to internal Prolog type identifiers used in term construction and inspection. These constants are used in low-level term manipulation when interfacing with Prolog from OCaml.",
      "description_length": 333,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bindings.Stubs.File",
      "library": "bindings",
      "description": "This module defines constants representing file operations such as checking existence, reading, writing, and executing files. It works with integer values to specify file access modes and behaviors. These constants are used directly in system calls or low-level file handling where precise control over file operations is required.",
      "description_length": 331,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindings.Stubs.Q",
      "library": "bindings",
      "description": "This module defines integer constants used to configure behavior in a runtime or evaluation context. Each value represents a specific flag or option, such as exception handling modes (`catch_exception`, `pass_exception`) and execution controls (`allow_yield`, `nodebug`). These constants are typically used to set or check runtime flags in low-level execution loops or configuration settings.",
      "description_length": 392,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Bindings.Stubs.Result",
      "library": "bindings",
      "description": "This module defines integer constants representing specific result states, including exception, false, true, and last. These constants are used to encode outcome values in low-level operations. They are typically used in conjunction with result handling logic to signal special conditions or status codes directly in C stubs or system interfaces.",
      "description_length": 346,
      "index": 8,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bindings.Stubs.VersionInfo",
      "library": "bindings",
      "description": "This module defines constant integer values representing version numbers for various system components, including the core system, file handling, record management, query execution, and virtual machine. These constants are used to track or validate version compatibility in serialization, deserialization, and system initialization workflows. Direct use cases include checking version consistency during file loading or ensuring correct runtime behavior across different deployment environments.",
      "description_length": 495,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bindings.Stubs",
      "library": "bindings",
      "description": "This module provides a set of constant values that configure and control low-level behaviors across logic programming, term manipulation, memory management, and system operations. It includes constants for database insertion modes, term types, file operations, runtime flags, result states, and version identifiers, enabling precise control over execution, storage, and interoperability. These constants are used directly in system calls, term construction, runtime configuration, and compatibility checks, such as specifying `assertz` for fact appending, using `catch_exception` to handle errors, or validating version numbers during initialization.",
      "description_length": 650,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Bindings",
      "library": "bindings",
      "description": "This module defines a comprehensive set of constants that govern low-level operations across logic programming, memory, and system interfaces. Key data types include modes for database insertion, term classification, file handling, runtime flags, and version identifiers. These constants directly configure system behavior, such as appending facts with `assertz`, managing exceptions via `catch_exception`, or validating compatibility through version checks. They are used extensively in term construction, runtime configuration, and system calls to control execution flow and storage mechanisms.",
      "description_length": 596,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 651,
    "min_description_length": 331,
    "avg_description_length": 450.25,
    "embedding_file_size_mb": 0.044007301330566406
  }
}