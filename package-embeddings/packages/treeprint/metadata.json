{
  "package": "treeprint",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:28:54.757175",
  "modules": [
    {
      "module_path": "Treeprint.Token",
      "description": "Produces a string representation of token data and supports formatted output for debugging or logging. Operates on the abstract type `t` to encode and display token information. Used to generate human-readable outputs and integrate with logging systems that require formatted printer functions.",
      "description_length": 294,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Treeprint.OCaml",
      "description": "Generates formatted expressions and types by combining elements with specific syntax, such as sequencing expressions, conditional branches, and type annotations. Operates on a custom `ppr` type representing parsed or abstract syntax tree nodes. Used to construct and format OCaml code fragments for pretty-printing or code generation.",
      "description_length": 334,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Treeprint.MakeDrivers",
      "description": "Generates pretty-printed representations of driver configurations using a custom formatting function. Operates on a type `t` that encapsulates driver-specific metadata and settings. Used to produce human-readable output for debugging and configuration validation.",
      "description_length": 263,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "treeprint",
      "description": "Provides functions to construct and print tree-like structures with automatic insertion of parentheses based on associativity and precedence rules. Works with custom data types representing nodes and edges in a tree, including associativity and precedence information. Used to generate readable, correctly parenthesized output for expressions in a custom language or abstract syntax tree.",
      "description_length": 388,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Treeprint",
      "description": "Combines token, expression, and driver configuration formatting into a unified pretty-printing system. Provides operations on types `t` and `ppr` to generate readable string outputs, handle syntax structures, and display configuration details. Supports debugging, logging, and code generation by automatically inserting parentheses and formatting complex data. Examples include printing parsed OCaml expressions, logging token sequences, and displaying driver settings in a structured format.",
      "description_length": 492,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 492,
    "min_description_length": 263,
    "avg_description_length": 354.2,
    "embedding_file_size_mb": 0.018596649169921875
  }
}