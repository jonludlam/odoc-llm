{
  "package": "treeprint",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:09.307603",
  "modules": [
    {
      "module_path": "Treeprint.Token",
      "library": "treeprint",
      "description": "Handles low-level token representation and formatting for pretty-printed tree structures. Works with `t` type tokens, providing direct conversion to strings, formatted output, and debugging dumps. Used to construct and manipulate individual elements of a pretty-printed tree, such as parentheses, identifiers, and layout markers.",
      "description_length": 329,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Treeprint.OCaml",
      "library": "treeprint",
      "description": "This module implements a pretty-printing combinator library for constructing and formatting structured values with automatic parenthesis insertion. It operates on the `ppr` type, representing pretty-printing documents, and provides functions for building expressions like conditionals, tuples, arithmetic operations, function types, and type annotations. Concrete use cases include generating well-formatted OCaml code or type representations from abstract syntax trees.",
      "description_length": 470,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Treeprint.MakeDrivers",
      "library": "treeprint",
      "description": "This module provides functions to pretty-print values of type `M.t` to formatters, buffers, and strings, with optional control over associativity and precedence levels. It supports concrete data structures defined in the `M` module, such as expressions or syntax trees, enabling readable output for debugging or user-facing display. Use cases include generating well-formatted code representations, pretty-printing structured data for logging, or producing human-readable output from abstract syntax trees.",
      "description_length": 506,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Treeprint",
      "library": "treeprint",
      "description": "This library builds structured formatters for abstract syntax trees, combining monadic combinators with automatic layout, line breaks, and parenthesization based on precedence and associativity. It centers on the `ppr` type for constructing documents with expressions like conditionals, tuples, and function types, while supporting direct manipulation of low-level `t` tokens for custom formatting, such as inserting identifiers or parentheses. The module enables pretty-printing of structured values from data types defined in `M`, allowing output customization through associativity and precedence controls. Examples include generating readable OCaml code from ASTs, formatting complex expressions with correct operator grouping, and producing debug dumps of syntax trees with proper indentation and line breaks.",
      "description_length": 814,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 814,
    "min_description_length": 329,
    "avg_description_length": 529.75,
    "embedding_file_size_mb": 0.014942169189453125
  }
}