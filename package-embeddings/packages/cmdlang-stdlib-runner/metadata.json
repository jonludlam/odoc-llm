{
  "package": "cmdlang-stdlib-runner",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-06-18T16:33:17.956096",
  "modules": [
    {
      "module_path": "Cmdlang_stdlib_runner.Positional_state.One_pos",
      "description": "Provides operations to create and manipulate a single, non-optional value wrapped in a type-safe container, including lifting functions to operate on the contained value and checking for presence. Works with the 'a t type, which holds a single element or is empty, and the packed type, which represents a value with a known, fixed size. Used to enforce exactly one occurrence of a value in parsing or configuration validation scenarios.",
      "description_length": 436,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmdlang_stdlib_runner.Positional_state.Pos_all",
      "description": "Provides operations to pack and unpack values into a compact representation, including functions to serialize and deserialize data between different formats. Works with the 'a t type for structured data and the packed type for binary-encoded representations. Used to efficiently store and retrieve complex data structures in memory-constrained environments.",
      "description_length": 357,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmdlang_stdlib_runner.Command_selector.Selected",
      "description": "Provides functions to filter, map, and fold over a collection of selected elements, with support for adding and removing items from a set. Works with a polymorphic type 'a t that represents a structured collection of values. Used to manage user-selected items in a UI, such as filtering a list of options based on selection criteria.",
      "description_length": 333,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmdlang_stdlib_runner.Arg_state.Parse_error",
      "description": "Provides functions to construct, inspect, and format error messages during parsing. Works with a custom type representing error details, including position, expected tokens, and contextual information. Used to generate human-readable diagnostics when parsing input streams or abstract syntax trees.",
      "description_length": 298,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmdlang_stdlib_runner.Arg_runner",
      "description": "Evaluates a parsed command-line configuration to execute user-defined logic, extracting the final result from the internal representation. It operates on a type that encapsulates the parsed state and associated actions. Used to trigger the execution of a command-line tool after its arguments have been processed.",
      "description_length": 313,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmdlang_stdlib_runner.Arg_state",
      "description": "Manages intermediate parsing state for command line arguments, using mutable references to store parsed values. Supports constructing and reporting errors with detailed diagnostics, including positions and expected tokens. Enables tracking of flags, their names, documentation, and associated mutable storage. Allows for structured parsing of command line inputs and retrieval of parsed values through referenced variables.",
      "description_length": 423,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmdlang_stdlib_runner.Command_selector",
      "description": "Selects commands from a hierarchical structure based on command-line prefixes, returning both the matched command and the parsing index. It operates on a polymorphic collection type 'a t, supporting filtering, mapping, folding, and modifying elements. This enables dynamic management of command selections, such as refining a list of subcommands by user input. For instance, it can isolate a specific subcommand from a nested group and track where parsing should continue.",
      "description_length": 472,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Cmdlang_stdlib_runner.Param_parser",
      "description": "Parses command-line strings into typed values using parameter specifications, such as converting \"42\" to 42 as an integer. Works with parameter types defined in `Cmdlang_ast.Ast.Param`, including integers, strings, and custom types. Generates help documentation by extracting or formatting parameter values, such as displaying default values or usage examples.",
      "description_length": 360,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmdlang_stdlib_runner.Parser_state",
      "description": "Tracks and accumulates parsing data during command-line argument processing. Manages argument specifications, positional state, and finalizes into an executable expression. Processes command-line arguments into a structured form for evaluation.",
      "description_length": 244,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmdlang_stdlib_runner.Positional_state",
      "description": "Tracks and manages parsed positional argument values, supporting both single and structured data through type-safe containers and compact binary representations. It offers operations to create, check, and transform values within 'a t types, as well as pack and unpack data between structured and binary formats. Users can enforce exact occurrence constraints, lift functions over contained values, and efficiently serialize complex data. For example, it can validate that exactly one input file is provided or convert a configuration record into a binary blob for storage.",
      "description_length": 572,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "cmdlang-stdlib-runner",
      "description": "Provides a domain-specific language for defining command-line interfaces, supporting parsing of flags, options, and positional arguments. Works with OCaml's type system to generate structured representations of command-line inputs. Used to create custom CLI tools that integrate with existing execution frameworks like cmdliner and core.command.",
      "description_length": 345,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Cmdlang_stdlib_runner",
      "description": "Executes command-line configurations by processing parsed states, managing argument parsing with mutable references, and selecting commands based on input prefixes. It handles typed value conversion, tracks positional arguments, and supports structured data manipulation and serialization. Operations include error reporting, command selection, parameter parsing, and data transformation. Examples include validating input constraints, generating help text, and converting configurations to binary formats.",
      "description_length": 506,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 572,
    "min_description_length": 244,
    "avg_description_length": 388.25,
    "embedding_file_size_mb": 0.04400825500488281
  }
}