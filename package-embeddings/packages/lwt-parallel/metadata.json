{
  "package": "lwt-parallel",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 2,
  "creation_timestamp": "2025-07-15T23:03:55.834138",
  "modules": [
    {
      "module_path": "Parallel.Io",
      "library": "lwt-parallel",
      "description": "This module defines and applies serialization protocols for sending and receiving values over Lwt IO channels. It works with input and output channels from Lwt_io, supporting custom serialization logic per type. Concrete use cases include transmitting structured data like trees or custom binary formats between processes using Lwt-based concurrency.",
      "description_length": 350,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parallel",
      "library": "lwt-parallel",
      "description": "This module enables parallel execution of Lwt-based tasks across multiple OS processes, using safe forking to isolate workloads and prevent interference with Lwt's runtime. It provides primitives to spawn Lwt functions in separate processes and communicate with them through typed, serializable channels that support custom encoding and decoding logic. The child module handles structured data exchange, allowing values like trees or binary formats to be sent and received over Lwt IO channels. Example use cases include running concurrent network requests or CPU-heavy computations in isolated processes while coordinating results through typed communication pipes.",
      "description_length": 666,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 666,
    "min_description_length": 350,
    "avg_description_length": 508.0,
    "embedding_file_size_mb": 0.0076904296875
  }
}