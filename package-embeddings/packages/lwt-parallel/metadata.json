{
  "package": "lwt-parallel",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 2,
  "creation_timestamp": "2025-08-14T22:45:24.672234",
  "modules": [
    {
      "module_path": "Parallel.Io",
      "library": "lwt-parallel",
      "description": "This module defines serialization protocols for transmitting values over Lwt I/O channels. It supports custom serialization via user-defined `put` and `get` functions, and provides a built-in protocol using OCaml's `Marshal` module. It is used to send and receive values between processes in a parallel computation, ensuring data is correctly encoded and decoded during transmission.",
      "description_length": 383,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Parallel",
      "library": "lwt-parallel",
      "description": "This module enables parallel execution of Lwt computations across multiple OS processes, using a snapshot-based forking mechanism to avoid issues with Lwt and fork(2). It provides functions to run Lwt-typed functions in separate processes and exchange data between them using customizable serialization protocols. Concrete use cases include offloading independent Lwt-based tasks like network requests or CPU-bound computations to separate processes for improved performance and isolation.",
      "description_length": 489,
      "index": 1,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 2,
    "meaningful_modules": 2,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 489,
    "min_description_length": 383,
    "avg_description_length": 436.0,
    "embedding_file_size_mb": 0.02940082550048828
  }
}