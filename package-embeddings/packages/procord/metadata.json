{
  "package": "procord",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:31:49.212507",
  "modules": [
    {
      "module_path": "Procord_connection.Sync",
      "description": "Handles network connection setup with timeout and ping configuration, manages graceful disconnection, and facilitates message sending and receiving over a custom channel type. Operates on a tracked connection state and string-based data. Used to establish reliable communication links and exchange structured data in real-time applications.",
      "description_length": 340,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "procord",
      "description": "Provides functions to parse and generate Discord gateway protocol messages, including event handling and payload serialization. Operates on custom record types representing gateway events, commands, and heartbeats. Used to implement real-time communication in Discord bots by processing incoming payloads and constructing outgoing commands.",
      "description_length": 340,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Procord_connection",
      "description": "Manages network communication through a custom channel, supporting connection setup, message exchange, and disconnection with state tracking. Operates on string-based data and includes timeout and ping controls for reliability. Enables real-time data transfer in applications requiring stable, structured communication. Examples include sending heartbeat signals, transmitting logs, and handling session termination.",
      "description_length": 416,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Procord_process",
      "description": "Provides functions to create and manage processes with custom delegation, including handling standard error, sockets, and task delegation. Works with process and status types, as well as execution error representations. Used to run, monitor, and terminate child processes while capturing their execution results and errors.",
      "description_length": 323,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Procord_rope",
      "description": "Provides operations to create, manipulate, and inspect rope data structures, including concatenation, substring extraction, and string conversion. Works with the `t` type, which represents a rope, and supports iterating over its string components with offsets. Used for efficient handling of large text data, such as in text editors or log processing systems.",
      "description_length": 359,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Procord_task",
      "description": "Provides functions to create and manage tasks that process input of type 'a and produce output of type 'b, with customizable serialization and error handling. Includes methods to read input, write outputs, handle exceptions, and execute tasks, as well as functions to delegate task execution with separate input and output parsing. Used to encapsulate and execute independent processing units with defined data conversion and error reporting mechanisms.",
      "description_length": 453,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Procord_worker",
      "description": "This module handles configuration and execution control for worker processes, offering functions to manage task definitions, network parameters, and I/O redirection through setters, getters, and specialized run modes. It operates on data structures like task units, hostname/port settings, and output destinations, enabling precise control over process behavior. Use cases include setting up workers with custom input/output streams, managing task execution flows, and configuring networked operations with tailored redirection logic.",
      "description_length": 534,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Procord_protocol",
      "description": "This module facilitates structured data exchange through message transmission and reception, supporting specific message types such as tasks, values, exceptions, and errors, while managing custom output formatting via print destinations. It operates on connection objects, error representations, and a defined message type for encapsulating protocol-specific data. Use cases include inter-process communication, error reporting, and tailored logging in distributed systems.",
      "description_length": 473,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 534,
    "min_description_length": 323,
    "avg_description_length": 404.75,
    "embedding_file_size_mb": 0.029474258422851562
  }
}