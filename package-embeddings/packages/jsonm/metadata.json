{
  "package": "jsonm",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:27:58.422468",
  "modules": [
    {
      "module_path": "Jsonm.Manual",
      "description": "Provides functions to manage manual data input and output using byte buffers. It allows reading from a buffer into a decoder and writing to a buffer from an encoder, with precise control over byte ranges and remaining space. Used to handle streaming data where explicit buffer management is required.",
      "description_length": 300,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Jsonm.Uncut",
      "description": "Processes JSON with preserved whitespace and JavaScript comments, handling both as distinct tokens during decoding and encoding. Works with custom lexeme types, strings for whitespace, and comment annotations with line or block style. Used to maintain original formatting in JSON transformations, such as pretty-printing or diffing structured data.",
      "description_length": 348,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "jsonm",
      "description": "Processes JSON data through a streaming interface, supporting incremental decoding and encoding of JSON values. Works with input and output channels, as well as byte buffers, to handle large or continuous data flows. Enables real-time parsing of JSON streams in applications like network protocols or log processing.",
      "description_length": 316,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Jsonm",
      "description": "Encodes and decodes JSON with support for whitespace and JavaScript comments, preserving formatting details during processing. It offers low-level buffer manipulation for streaming data and custom token handling for precise control over input and output. Operations include reading from and writing to byte buffers, managing remaining space, and processing lexemes with comments. This enables tasks like pretty-printing JSON, diffing structured data, or handling non-standard JSON streams efficiently.",
      "description_length": 501,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 501,
    "min_description_length": 300,
    "avg_description_length": 366.25,
    "embedding_file_size_mb": 0.014962196350097656
  }
}