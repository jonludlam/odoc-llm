{
  "package": "h2-lwt-unix",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:53.961073",
  "modules": [
    {
      "module_path": "H2_lwt_unix.Client.SSL",
      "library": "h2-lwt-unix",
      "description": "This module implements an HTTP/2 client over SSL/TLS connections using Lwt for asynchronous I/O. It provides functions to establish a connection, send requests with headers and bodies, handle server-initiated pushes, send ping frames, and manage connection lifecycle events. The module works with SSL sockets and integrates with `H2.Client_connection` to process HTTP/2 requests and responses. Use cases include building asynchronous HTTP/2 clients for secure communication with web services, handling server push, and managing streaming uploads or downloads over TLS.",
      "description_length": 568,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_lwt_unix.Client.TLS",
      "library": "h2-lwt-unix",
      "description": "This module implements TLS-secured HTTP/2 client connections over Lwt_unix, managing encrypted communication with remote servers. It provides functions to create connections, send requests with optional trailers, handle server pushes, and manage connection lifecycle operations like shutdown and ping. Concrete use cases include building secure HTTP/2 clients for APIs, web scraping, or microservices communication over TLS.",
      "description_length": 424,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_lwt_unix.Server.TLS",
      "library": "h2-lwt-unix",
      "description": "This module implements TLS-based HTTP/2 server connections using Lwt for asynchronous I/O. It provides functions to create secure connection handlers that accept TLS sockets or raw file descriptors, supporting custom request and error handling per client address. Typical use cases include building high-performance, secure web servers that handle HTTP/2 traffic over TLS with per-connection configuration and logging.",
      "description_length": 418,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_lwt_unix.Server.SSL",
      "library": "h2-lwt-unix",
      "description": "This module implements SSL/TLS-based HTTP/2 server connections using Lwt for asynchronous I/O. It provides functions to create secure connection handlers that process incoming HTTP/2 requests over encrypted sockets, working directly with Unix socket addresses and file descriptors. It is used to build secure, asynchronous HTTP/2 servers that handle TLS termination with provided certificates and private keys.",
      "description_length": 410,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_lwt_unix.Client",
      "library": "h2-lwt-unix",
      "description": "This module manages asynchronous HTTP/2 client connections over both Unix sockets and TLS-secured channels, supporting operations like request submission with trailers, server push handling, ping frames, and graceful shutdowns. It directly works with file descriptors, SSL sockets, and HTTP/2 connection types, offering core functions to create connections, exchange messages, and control stream and connection lifecycle events. The child modules extend this functionality to TLS-enabled environments, enabling secure API clients, microservices communication, and streaming data transfers with support for server push and bidirectional data flow. Together, they provide a comprehensive interface for building and managing HTTP/2 clients in both plaintext and encrypted contexts.",
      "description_length": 778,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_lwt_unix.Server",
      "library": "h2-lwt-unix",
      "description": "This module implements HTTP/2 server logic for Unix domain sockets, handling connections with support for secure communication via TLS and SSL through its submodules. It provides functions to create connection handlers that process incoming requests and errors, enabling high-performance, protocol-compliant servers that can operate over both encrypted and unencrypted channels. The TLS and SSL submodules extend this functionality by supporting secure connections using Lwt for asynchronous I/O, allowing handlers to accept encrypted traffic from TLS sockets or raw file descriptors with custom per-client configurations. Example use cases include building secure web servers that terminate TLS, handle HTTP/2 traffic asynchronously, and log or filter requests based on client addresses or certificates.",
      "description_length": 804,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "H2_lwt_unix",
      "library": "h2-lwt-unix",
      "description": "This module provides asynchronous HTTP/2 client and server implementations for Unix sockets and TLS-secured channels, supporting bidirectional communication, server push, and stream management. Key data types include connection handles, streams, and request/response trailers, with operations for initiating and responding to HTTP/2 exchanges, handling TLS handshakes, and managing connection lifecycle events. It enables building secure microservices clients that send requests with trailers over TLS, or high-performance servers that accept encrypted HTTP/2 traffic and process requests with custom per-client logic. Specific capabilities include streaming data transfers, ping frame handling, and graceful shutdowns for both clients and servers.",
      "description_length": 748,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 804,
    "min_description_length": 410,
    "avg_description_length": 592.8571428571429,
    "embedding_file_size_mb": 0.025855064392089844
  }
}