{
  "package": "h2-lwt-unix",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-06-18T16:31:20.243271",
  "modules": [
    {
      "module_path": "H2_lwt_unix.Server.TLS",
      "description": "Handles TLS-secured HTTP/2 connections by creating and managing connection handlers that process requests and errors. Operates on Unix socket addresses and TLS-enabled sockets, using H2 server configuration and certificate files. Used to set up secure server endpoints that respond to HTTP/2 requests over encrypted channels.",
      "description_length": 325,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_lwt_unix.Server.SSL",
      "description": "Handles secure HTTP/2 connections by creating SSL-aware connection handlers that process requests and errors. Operates on Unix socket addresses and SSL socket types, using certificates and keys for secure communication. Used to set up HTTPS servers with custom request and error handling logic.",
      "description_length": 294,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_lwt_unix.Client.TLS",
      "description": "Provides functions to establish and manage HTTP/2 over TLS connections, send requests with custom headers and body handling, and send pings with optional payloads. Works with TLS sockets, connection runtime objects, and HTTP/2 request and response handlers. Used to create secure client connections, handle server push notifications, and control connection lifecycle during network communication.",
      "description_length": 396,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_lwt_unix.Client.SSL",
      "description": "Handles HTTP/2 over SSL connections, enabling creation of secure client connections, sending requests with custom headers and body writers, and managing connection shutdown and state. Operates on SSL sockets, HTTP/2 request objects, and response handlers to facilitate bidirectional communication. Used for establishing encrypted web service interactions, streaming data, and sending control frames like PING.",
      "description_length": 409,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "H2_lwt_unix.Server",
      "description": "Manages secure HTTP/2 server operations by handling TLS and SSL connections, processing requests and errors through dedicated handlers. Operates on Unix sockets and secure socket types, utilizing certificates and keys for encrypted communication. Supports custom request routing and error responses over HTTPS and H2. Enables deployment of secure, high-performance web servers with fine-grained control over connection management.",
      "description_length": 430,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "H2_lwt_unix.Client",
      "description": "Manages secure HTTP/2 over TLS/SSL connections, enabling request sending with custom headers and body handling, ping operations, and bidirectional communication. Supports SSL and TLS sockets, request/response handlers, and control frames like PING. Allows for connection lifecycle management, server push handling, and encrypted data streaming. Can be used to establish secure web service interactions, send controlled HTTP/2 frames, and manage connection states dynamically.",
      "description_length": 475,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "h2-lwt-unix",
      "description": "Provides functions for parsing and serializing HTTP/2 frames, handling connection management, and managing streams. Works with byte sequences, frame structures, and stream identifiers to enable low-level HTTP/2 communication. Used to build HTTP/2 clients and servers that interoperate with existing OCaml-based network stacks.",
      "description_length": 326,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "H2_lwt_unix",
      "description": "Handles secure HTTP/2 communication over TLS/SSL on Unix sockets, supporting both server and client operations with encrypted data transfer, custom routing, and bidirectional frame control. Key data types include SSL/TLS sockets, request/response handlers, and control frames like PING, with operations for connection management, error handling, and server push. It enables deployment of secure web services, custom header manipulation, and dynamic connection state control. Examples include establishing encrypted client-server interactions, sending HTTP/2 frames, and managing secure request routing with custom error responses.",
      "description_length": 630,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 630,
    "min_description_length": 294,
    "avg_description_length": 410.625,
    "embedding_file_size_mb": 0.029450416564941406
  }
}