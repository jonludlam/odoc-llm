{
  "package": "interval_crlibm",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-07-15T23:05:55.680023",
  "modules": [
    {
      "module_path": "Interval_crlibm.I.Precision",
      "library": "interval_crlibm",
      "description": "This module sets and retrieves the decimal precision used by the `pr` and `pp` functions in the interval arithmetic module. It controls how many decimal places are used when printing intervals, with an option to use as many digits as needed for accuracy. Use this module to configure interval output formatting for debugging or reporting.",
      "description_length": 338,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Interval_crlibm.I.U",
      "library": "interval_crlibm",
      "description": "This module restores the standard integer and floating-point arithmetic and comparison operators that are redefined by the parent interval arithmetic module. It provides basic operations like addition, subtraction, multiplication, division, and comparisons for integers and floats, ensuring correct behavior when temporarily needed within expressions involving interval operations. Use this module to mix regular arithmetic with interval computations without reopening other modules.",
      "description_length": 483,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Interval_crlibm.RoundUp",
      "library": "interval_crlibm",
      "description": "This module provides upward-rounded arithmetic operations (addition, multiplication, square root, etc.) and mathematical functions (logarithmic, trigonometric, hyperbolic) for floating-point values and intervals. It ensures strict upper bounds in computations, making it critical for verified numerical methods where overestimation guarantees safety, such as formal verification of mathematical proofs or error analysis in scientific computing. The functions directly operate on `float` and interval types to support rigorous approximation frameworks.",
      "description_length": 551,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Interval_crlibm.I",
      "library": "interval_crlibm",
      "description": "This module enables interval arithmetic with floating-point bounds, offering operations to create, compare, and compute on intervals with guaranteed error bounds. It redefines arithmetic operators for intervals, supports transcendental functions, and includes topological checks like disjointness and inclusion. The `P` submodule configures printing precision for readable or accurate interval output, while `B` restores standard arithmetic operators for seamless integration of regular and interval computations. Use it to verify numerical algorithms, debug with controlled precision, or combine interval and scalar operations safely.",
      "description_length": 635,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Interval_crlibm.DIRECTED",
      "library": "interval_crlibm",
      "description": "This module provides directed rounding operations for interval arithmetic, focusing on precise upper and lower bound calculations for scalar floating-point values. It supports fundamental arithmetic (addition, multiplication, exponentiation), transcendental functions (logarithms, trigonometric variants with \u03c0-scaled arguments), and specialized accuracy-preserving operations like `log1p` and `expm1`. These capabilities are particularly useful in numerical analysis and formal verification contexts where rigorous error bounds and correct rounding behavior are critical.",
      "description_length": 572,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Interval_crlibm.RoundDown",
      "library": "interval_crlibm",
      "description": "This module provides rounding-down operations for floating-point interval arithmetic, encompassing basic arithmetic, power functions, mathematical constants, and transcendental functions like logarithms, trigonometric, and hyperbolic operations. It operates on `float` and interval types to compute lower bounds with strict numerical accuracy, specifically for applications in formal verification, numerical analysis, and safety-critical systems requiring guaranteed error bounds.",
      "description_length": 480,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Interval_crlibm",
      "library": "interval_crlibm",
      "description": "This module implements precise interval arithmetic using the CRlibm library, ensuring mathematically proved rounding behavior for floating-point operations. It provides core data types for intervals as records with lower and upper bounds, along with basic arithmetic, trigonometric, and comparison operations, enabling reliable numerical computations in safety-critical applications such as scientific simulations or formal verification. Child modules refine this functionality with directed rounding modes\u2014offering strict upper and lower bound calculations, transcendental functions, and configurable printing\u2014supporting verified numerical methods, error analysis, and rigorous approximation frameworks. Specific capabilities include guaranteed error bounds, safe overestimation for formal proofs, and seamless integration of scalar and interval computations.",
      "description_length": 860,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 860,
    "min_description_length": 338,
    "avg_description_length": 559.8571428571429,
    "embedding_file_size_mb": 0.02585124969482422
  }
}