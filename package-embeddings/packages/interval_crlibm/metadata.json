{
  "package": "interval_crlibm",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:29:38.903540",
  "modules": [
    {
      "module_path": "Interval_crlibm.I.Precision",
      "description": "Sets and retrieves the decimal precision for printing interval values, controlling the number of digits displayed. Operates on integer values and optional parameters to define output formatting. Used to ensure consistent numerical representation in output functions.",
      "description_length": 266,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Interval_crlibm.I.U",
      "description": "Provides unary and binary arithmetic operations for integers and floats, including standard operators like +, -, *, /, and their float counterparts with a dot suffix. Supports comparison operations for any type and includes square root and exponentiation for floats. Enables temporary restoration of default operator behavior in contexts where they have been redefined.",
      "description_length": 369,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Interval_crlibm.I",
      "description": "Redefines arithmetic operators to handle interval operations, enabling precise control over numerical output and computation. Supports integer and float operations, comparisons, and mathematical functions like square root and exponentiation. Allows temporary restoration of original operator behavior and adjusts decimal precision for consistent interval display. Examples include adding intervals, comparing values, and formatting output with specified digit counts.",
      "description_length": 467,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Interval_crlibm.RoundDown",
      "description": "provides functions for rounding numerical values downward, with support for various numeric types. it includes operations such as floor for floats and integer division for integers. examples include rounding 3.7 to 3.0 or 5 divided by 2 to 2. the module offers straightforward, type-specific rounding behaviors.",
      "description_length": 311,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Interval_crlibm.RoundUp",
      "description": "Provides functions for rounding numerical values upward. Includes basic numeric types and operations for ceiling calculations. Supports integer and floating-point rounding with explicit conversion functions. Can be used to ensure values meet minimum thresholds in mathematical or financial computations.",
      "description_length": 303,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "interval_crlibm",
      "description": "Provides interval arithmetic operations such as addition, multiplication, and intersection, using precise bounds tracking. Works with the `Interval.t` type, representing intervals as pairs of floating-point numbers. Used for numerical analysis tasks requiring error propagation and range validation.",
      "description_length": 299,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 6,
    "filtered_empty_modules": 6,
    "retention_rate": 0.5
  },
  "statistics": {
    "max_description_length": 467,
    "min_description_length": 266,
    "avg_description_length": 335.8333333333333,
    "embedding_file_size_mb": 0.02220916748046875
  }
}