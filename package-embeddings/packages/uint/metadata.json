{
  "package": "uint",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:18:41.069159",
  "modules": [
    {
      "module_path": "Uint.Str_conv.Make",
      "library": "uint",
      "description": "This module implements string conversion and formatting for an unsigned integer type, supporting decimal, binary, octal, and hexadecimal representations. It provides functions to convert values to and from strings, along with formatters for pretty-printing in different bases. Use this to handle low-level numeric parsing and output, such as reading integer strings from input or formatting values for debugging.",
      "description_length": 412,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uint.Str_conv",
      "library": "uint",
      "description": "This module implements string conversion and formatting for an unsigned integer type, supporting decimal, binary, octal, and hexadecimal representations. It provides functions to convert values to and from strings, along with formatters for pretty-printing in different bases. Use this to handle low-level numeric parsing and output, such as reading integer strings from input or formatting values for debugging.",
      "description_length": 412,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uint",
      "library": "uint",
      "description": "This module implements string conversion and formatting for an unsigned integer type, supporting decimal, binary, octal, and hexadecimal representations. It provides functions to convert values to and from strings, along with formatters for pretty-printing in different bases. Use it to handle low-level numeric parsing and output, such as reading integer strings from input or formatting values for debugging.",
      "description_length": 410,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uint8",
      "library": "uint",
      "description": "Implements arithmetic and bitwise operations on 8-bit unsigned integers, including addition, shifts, and logical operations, with support for safe conversions to/from integers, floats, and strings. Provides utilities to format values in binary, hexadecimal, and decimal for debugging or serialization purposes. Designed for low-level systems programming, binary data manipulation, and scenarios requiring precise size constraints or bit-level control.",
      "description_length": 451,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uint32",
      "library": "uint",
      "description": "This module enables precise arithmetic and bitwise manipulation of 32-bit unsigned integers, including division, modulus, shifts, and logical operations. It supports conversions to and from integers, floats, and strings, with utilities for parsing and generating base-specific representations like hexadecimal or binary. These features are essential for low-level system programming, binary data serialization, and debugging scenarios requiring bit-level inspection or structured hexadecimal output.",
      "description_length": 499,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uint16",
      "library": "uint",
      "description": "This module supports arithmetic and bitwise operations on 16-bit unsigned integers, including overflow-aware calculations and bit-level manipulations like shifts and logical operations. It facilitates conversions to and from integers, floats, and strings, with support for binary, octal, and hexadecimal representations, alongside comparison utilities. These features are particularly valuable in systems programming, embedded systems, or protocols requiring strict control over numeric precision and memory layout.",
      "description_length": 515,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uint128",
      "library": "uint",
      "description": "This module offers arithmetic operations (addition, multiplication, division) and bitwise manipulations (AND, OR, shifts) for 128-bit unsigned integers, emphasizing overflow-safe calculations. It operates on the `uint128` type, an alias for `Stdint.Uint128.t`, and supports conversions to/from integers, base-specific strings (binary, octal, hex), and formatted output. Designed for cryptographic applications, numerical libraries, and systems requiring exact handling of values exceeding 64-bit limits.",
      "description_length": 503,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 7,
    "filtered_empty_modules": 1,
    "retention_rate": 0.875
  },
  "statistics": {
    "max_description_length": 515,
    "min_description_length": 410,
    "avg_description_length": 457.42857142857144,
    "embedding_file_size_mb": 0.08754253387451172
  }
}