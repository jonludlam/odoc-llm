{
  "package": "promela",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-06-18T16:32:57.270937",
  "modules": [
    {
      "module_path": "Promela.Identifier",
      "description": "Creates an opaque identifier type from a string and converts it back to a string representation. Works with a custom type `t` that encapsulates string-based identifiers. Used to safely generate and manipulate unique entity keys in a system.",
      "description_length": 240,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Promela.Identifierset",
      "description": "This module offers set operations like union, intersection, and difference, along with transformations using functional constructs such as mapping and folding, tailored for manipulating collections of identifiers. It supports querying capabilities including membership checks, min/max retrieval, and set splitting, with both strict and optional result variants for flexibility. Use cases include managing symbol tables, tracking unique elements in configurations, or handling dynamic data partitions in applications requiring efficient set management.",
      "description_length": 551,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Promela.Label",
      "description": "Creates labels with optional special attributes from identifiers, and converts labels to strings. Works with identifiers and a special type representing label modifiers. Used to generate unique label representations for compiler symbols and track end-of-list markers.",
      "description_length": 267,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Promela.Type",
      "description": "Converts values to strings and returns their size in bytes. Works with abstract data types encapsulating binary representations. Used to serialize protocol buffers and validate message lengths.",
      "description_length": 193,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Promela.Expression",
      "description": "Provides functions to transform expressions by renaming variables, convert expressions to strings, extract unique identifiers, and evaluate expressions to simplified forms. Operates on expression trees composed of binary and unary operators and identifiers. Used to preprocess mathematical expressions for symbolic manipulation or code generation.",
      "description_length": 347,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Promela.Declarations",
      "description": "Provides operations to manage a collection of key-value pairs where keys are identifiers and values are type-expression pairs. Supports adding, removing, checking membership, folding, merging, transforming, and filtering entries. Used to represent and manipulate symbol tables or scope environments in a compiler or interpreter.",
      "description_length": 328,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Promela.Statement",
      "description": "Provides functions to convert statements to strings, write them to output channels, and extract identifiers read, written, or present in statements. Supports transforming statements via variable renaming, mapping, and filtering. Operates on a polymorphic statement type and identifier sets, enabling manipulation and analysis of program statements.",
      "description_length": 348,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Promela.Process",
      "description": "Provides operations to construct and manipulate processes with a body of statements, including renaming variables, filtering, and mapping statements. Works with identifiers, declarations, and statement lists, and tracks read and written identifiers. Used to transform control flow structures and manage variable scope in code generation.",
      "description_length": 337,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Promela.Model",
      "description": "Manages a collection of processes and declarations, supporting operations to create, modify, and query process graphs. It handles process lists, declarations, and identifier sets, enabling transformations like variable renaming and statement filtering. Used to serialize, deserialize, and analyze process structures for program verification tasks.",
      "description_length": 347,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Promela.Normalization",
      "description": "Processes and modifies individual processes and models to ensure consistency in concurrent execution contexts. Operates on `Process.t` and `Model.t` types, applying transformations that enforce atomicity constraints. Used to refine simulation models and process definitions before execution.",
      "description_length": 291,
      "index": 9,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "promela",
      "description": "Processes and analyzes Promela models by parsing input specifications, extracting state transitions, and validating system properties. It operates on abstract syntax trees and state machine representations derived from Promela code. Used to verify deadlock freedom and liveness properties in concurrent system designs.",
      "description_length": 318,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Promela",
      "description": "manages identifiers, labels, sets, and data structures for symbolic manipulation, serialization, and process modeling. It provides operations on abstract types for generating unique keys, performing set algebra, creating labeled entities, serializing data, and transforming expressions, statements, and processes. Functions include renaming variables, extracting identifiers, evaluating expressions, and managing symbol tables or process graphs. It enables tasks like compiler symbol tracking, protocol validation, and concurrent model refinement.",
      "description_length": 547,
      "index": 11,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 12,
    "meaningful_modules": 12,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 551,
    "min_description_length": 193,
    "avg_description_length": 342.8333333333333,
    "embedding_file_size_mb": 0.044007301330566406
  }
}