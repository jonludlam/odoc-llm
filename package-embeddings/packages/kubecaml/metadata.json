{
  "package": "kubecaml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 1718,
  "creation_timestamp": "2025-06-18T18:02:47.977645",
  "modules": [
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Pods.By_name.Proxy.By_path",
      "description": "Provides HTTP methods (GET, PUT, POST, DELETE, OPTIONS, HEAD, PATCH) to interact with a pod-based resource system, using path, namespace, and name to construct requests. Operates with strings, Cohttp headers, and URI objects to route operations to specific endpoints. Used to manage pod configurations, lifecycle, and metadata within scoped environments like teams or projects.",
      "description_length": 377,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Services.By_name.Proxy.By_path",
      "description": "Provides HTTP method-specific request handlers for interacting with a service's API, using path, namespace, and name parameters to construct and send requests. Operates with string-based paths, namespace identifiers, resource names, and HTTP headers to target specific endpoints. Used to manage resources like teams and projects by sending GET, PUT, POST, DELETE, OPTIONS, HEAD, and PATCH requests to a proxy service.",
      "description_length": 417,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1.Watch.Namespaces.By_namespace.Podpresets.By_name",
      "description": "Provides operations to watch and retrieve Kubernetes resources by name, supporting parameters like namespace, resource version, and label selectors. Works with types such as `Uri.t` and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` to handle streaming updates and list queries. Used to monitor Pod presets in real time, with options to filter, limit results, and track changes over time.",
      "description_length": 410,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1.Watch.Namespaces.By_namespace.Events.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes event resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on namespace and name identifiers, along with query parameters like resource_version, label_selector, and timeout_seconds. Used to monitor changes to specific events in a cluster, fetch historical data, or limit results for efficient processing.",
      "description_length": 403,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces.By_namespace.Ingresses.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resources like Ingress, using types such as `Uri.t` and `Cohttp.Header.t` for HTTP interactions. Enables real-time monitoring of changes to specific objects in a namespace with customizable timeouts and label selectors.",
      "description_length": 367,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces.By_namespace.Deployments.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on Kubernetes objects such as Deployments, using types like `Uri.t` and `Cohttp.Header.t` for HTTP interactions. Enables monitoring changes to a specific Deployment in a namespace with customizable timeouts and resource version tracking.",
      "description_length": 389,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces.By_namespace.Networkpolicies.By_name",
      "description": "Provides operations to watch and retrieve network policy resources by name, supporting parameters for filtering, pagination, and version tracking. Works with string-based identifiers, timeouts, and HTTP headers to interact with Kubernetes APIs. Used to monitor real-time changes to network policies in a specific namespace, enabling automated response to policy updates.",
      "description_length": 370,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces.By_namespace.Daemonsets.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource types, including Daemon_set, using namespace and name identifiers. Enables real-time monitoring of resource changes with timeout and version control.",
      "description_length": 306,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces.By_namespace.Replicasets.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes Replica_set resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on strings, integers, and custom types like `Uri.t` and `Cohttp.Header.t` to interact with Kubernetes API endpoints. Used to monitor changes to specific Replica_set instances in a namespace, with options to limit results, filter by labels, and handle long-running watch requests.",
      "description_length": 443,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Ingresses.By_name.Status",
      "description": "Returns a URI template for status-related API requests. Handles reading, replacing, and partially updating Ingress objects in a Kubernetes cluster by namespace and name, using HTTP methods to interact with the API server. Accepts pretty-printing and custom headers for fine-grained control over request and response formatting.",
      "description_length": 327,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Deployments.By_name.Rollback",
      "description": "Provides functions to generate a path template for rollback requests and to initiate a deployment rollback with specified parameters. Operates on Kubernetes deployment rollback objects, HTTP context, and URI structures. Used to revert a deployment to a previous version via a REST API call with customizable formatting and headers.",
      "description_length": 331,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Deployments.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes Deployment. Operates on Kubernetes API objects such as `Scale` and `Patch` structures, and interacts with HTTP endpoints using Cohttp. Used to dynamically adjust resource allocations for deployments in a cluster.",
      "description_length": 313,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Deployments.By_name.Status",
      "description": "Provides functions to retrieve, replace, and update the status of a Kubernetes Deployment using HTTP requests. Operates on Kubernetes API types such as Deployment and Patch, along with Cohttp and Lwt for network interactions. Used to manage deployment states in a cluster, including fetching current configurations, applying full replacements, and performing incremental updates.",
      "description_length": 379,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Daemonsets.By_name.Status",
      "description": "Provides functions to retrieve, replace, and partially update the status of a Kubernetes DaemonSet using HTTP requests. Operates on Kubernetes-specific types such as Daemon_set and Patch, along with Cohttp and Lwt for network handling. Used to manage daemon set configurations in a cluster by interacting with the Kubernetes API directly.",
      "description_length": 338,
      "index": 13,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Replicationcontrollers.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes resource. Operates on Kubernetes API objects such as `Scale` and `Patch` structures, and interacts with HTTP endpoints using Cohttp. Used to adjust replica counts for deployments or stateful sets through direct API calls.",
      "description_length": 322,
      "index": 14,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Replicasets.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes ReplicaSet. Operates on Kubernetes API objects such as Scale and Patch, using HTTP requests with specified namespace and name. Enables programmatic control over replica counts in a cluster through RESTful interactions.",
      "description_length": 319,
      "index": 15,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Replicasets.By_name.Status",
      "description": "Provides functions to retrieve, replace, and partially update the status of a Kubernetes ReplicaSet using HTTP requests. Operates on Kubernetes API types such as Replica_set and Patch, and requires a URI, namespace, and name to target specific resources. Uses Cohttp for HTTP communication and returns results wrapped in Lwt promises.",
      "description_length": 334,
      "index": 16,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Watch.Namespaces.By_namespace.Horizontalpodautoscalers.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource types, specifically Horizontal_pod_autoscaler, with structured handling of watch events and HTTP requests. Enables real-time monitoring of resource changes with customizable timeouts and label-based selection.",
      "description_length": 366,
      "index": 17,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Namespaces.By_namespace.Horizontalpodautoscalers.By_name.Status",
      "description": "Provides operations to retrieve, replace, and update the status of a Kubernetes HorizontalPodAutoscaler using HTTP requests. Works with Kubernetes API types such as HorizontalPodAutoscaler and Patch, and requires a URI, namespace, and name for each operation. Retrieves or modifies resource states in a Kubernetes cluster via HTTP endpoints.",
      "description_length": 341,
      "index": 18,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Watch.Namespaces.By_namespace.Horizontalpodautoscalers.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource types, specifically Horizontal_pod_autoscaler, with structured handling of watch events and HTTP requests. Enables real-time monitoring of resource changes within a specified namespace and allows precise control over query limits and timeouts.",
      "description_length": 400,
      "index": 19,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Namespaces.By_namespace.Horizontalpodautoscalers.By_name.Status",
      "description": "Provides functions to retrieve, update, and partially modify the status of a Kubernetes HorizontalPodAutoscaler using HTTP requests. Operates on Kubernetes API resource types and HTTP URI endpoints. Used to interact with cluster autoscaling configurations in real-time, such as adjusting scaling policies based on metrics.",
      "description_length": 322,
      "index": 20,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Watch.Namespaces.By_namespace.Jobs.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resources, including Jobs, using structured data like namespace, name, and version strings. Enables real-time monitoring of changes to specific resources with customizable timeouts and label-based selection.",
      "description_length": 355,
      "index": 21,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Namespaces.By_namespace.Jobs.By_name.Status",
      "description": "Provides functions to retrieve, replace, and partially update the status of a Kubernetes Job resource using HTTP requests. Operates on Kubernetes API types such as Job and Patch, and requires a URI, namespace, and job name. Used to manage job states in a cluster, such as updating progress or applying incremental changes.",
      "description_length": 322,
      "index": 22,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Watch.Namespaces.By_namespace.Cronjobs.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource types, including Cron_job, using HTTP requests with Cohttp and Lwt. Enables real-time monitoring of changes to specific objects within a namespace.",
      "description_length": 304,
      "index": 23,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Namespaces.By_namespace.Cronjobs.By_name.Status",
      "description": "Provides functions to retrieve, replace, and partially update the status of a Kubernetes CronJob resource. Operates on Kubernetes API types such as Cron_job.t and Patch.t, using HTTP requests with customizable parameters. Used to manage CronJob states in a cluster, including fetching details, applying full updates, or making targeted changes.",
      "description_length": 344,
      "index": 24,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Watch.Namespaces.By_namespace.Cronjobs.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resources, including Cron_jobs, with structured data types like strings, integers, and headers. Used to monitor real-time changes to specific objects in a namespace, such as tracking updates to scheduled jobs.",
      "description_length": 357,
      "index": 25,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Namespaces.By_namespace.Cronjobs.By_name.Status",
      "description": "Returns a URI template for status-related API requests. Retrieves, replaces, or updates the status of a Kubernetes CronJob by sending HTTP GET, PUT, or PATCH requests with specified namespace, name, and request body. Operates on Kubernetes API types such as CronJob and Patch.",
      "description_length": 276,
      "index": 26,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Watch.Namespaces.By_namespace.Poddisruptionbudgets.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes resources by name, supporting parameters for filtering, pagination, and versioning. Operates on types like `Uri.t`, `string`, and `bool` to interact with Kubernetes API endpoints. Used to monitor changes to specific Pod_disruption_budget resources in a namespace, with support for timeouts, label selectors, and resource version tracking.",
      "description_length": 390,
      "index": 27,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Namespaces.By_namespace.Poddisruptionbudgets.By_name.Status",
      "description": "Provides functions to retrieve, update, and partially modify the status of a Kubernetes PodDisruptionBudget resource. Operates on types from the Kubernetes API, including PodDisruptionBudget and Patch. Used to manage cluster resilience settings by interacting with the Kubernetes API through HTTP requests.",
      "description_length": 306,
      "index": 28,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces.By_namespace.Deployments.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on types like `Uri.t`, `Cohttp.Header.t`, and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. Used to monitor changes to a specific Deployment in a namespace, with options to limit results, filter by labels, and handle long-running watch streams.",
      "description_length": 420,
      "index": 29,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces.By_namespace.Statefulsets.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes StatefulSet resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on strings for namespace, name, and query parameters, and returns watch events or errors. Used to monitor changes to specific StatefulSets in a cluster, enabling reactive updates in orchestration tools.",
      "description_length": 366,
      "index": 30,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces.By_namespace.Daemonsets.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes daemon set resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on string-based identifiers, timeouts, and structured metadata like resource versions and label selectors. Used to monitor changes to specific daemon sets in a namespace, fetch limited results, or track updates with a specified resource version.",
      "description_length": 408,
      "index": 31,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces.By_namespace.Controllerrevisions.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resources, including namespace, name, and version-specific queries. Used to monitor changes to controller revisions and fetch detailed object states with precise control over data retrieval.",
      "description_length": 338,
      "index": 32,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces.By_namespace.Replicasets.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes Replica_set resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on strings, integers, and custom types like `Uri.t` and `Cohttp.Header.t` to interact with Kubernetes API endpoints. Used to monitor changes to specific Replica_set instances in a namespace, with options to limit results, filter by labels, and handle long-running watch requests.",
      "description_length": 443,
      "index": 33,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Deployments.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes Deployment. Operates on Kubernetes API objects such as `Scale` and `Patch` structures, using HTTP requests to interact with cluster resources. Used to adjust replica counts or apply incremental changes to deployment configurations in a running cluster.",
      "description_length": 353,
      "index": 34,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Deployments.By_name.Status",
      "description": "Provides functions to retrieve, replace, and partially update the status of a Kubernetes Deployment. Operates on Kubernetes API types such as Deployment and Patch, and interacts with HTTP endpoints using Cohttp. Used to manage deployment states in a cluster, including fetching current configurations and applying updates.",
      "description_length": 322,
      "index": 35,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Statefulsets.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes StatefulSet. Operates on HTTP URIs, Cohttp headers, and Kubernetes API types such as Scale and Patch. Used to dynamically adjust resource allocations in a cluster, such as increasing replicas for a service under load.",
      "description_length": 318,
      "index": 36,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Statefulsets.By_name.Status",
      "description": "Provides functions to retrieve, replace, and partially update the status of a Kubernetes StatefulSet by constructing request paths, sending HTTP requests with custom headers and context, and handling JSON responses. Operates with Kubernetes API types such as Stateful_set and Patch, and HTTP-related types like Uri and Cohttp.Header. Used to manage dynamic state changes in a Kubernetes cluster, such as scaling or configuration updates.",
      "description_length": 437,
      "index": 37,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Daemonsets.By_name.Status",
      "description": "Provides functions to retrieve, update, and partially modify the status of a Kubernetes DaemonSet by sending HTTP requests to a specified URI. Operates on Kubernetes-specific types such as Daemon_set and Patch, and accepts parameters like namespace, name, and request headers. Used to interact with Kubernetes APIs for managing daemonized services across a cluster.",
      "description_length": 365,
      "index": 38,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Replicasets.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes ReplicaSet. Operates on Kubernetes API objects such as `Scale` and `Patch` structures, and interacts with HTTP endpoints using Cohttp. Enables programmatic control over replica counts in a cluster by sending PATCH, GET, and PUT requests to the appropriate API paths.",
      "description_length": 367,
      "index": 39,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Replicasets.By_name.Status",
      "description": "Returns a URI template for status-related API requests. Retrieves, updates, and partially modifies Kubernetes Replica_set resources by name and namespace, using HTTP clients and custom headers. Processes structured data types from the Kubernetes API to interact with cluster state.",
      "description_length": 281,
      "index": 40,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces.By_namespace.Deployments.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes resources by name, supporting parameters for filtering, pagination, and event streaming. Operates on types like `Uri.t`, `Cohttp.Header.t`, and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` to interact with cluster resources. Used to monitor real-time changes to a Deployment in a specific namespace, with options to limit results and handle large datasets through pagination.",
      "description_length": 451,
      "index": 41,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces.By_namespace.Statefulsets.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resources such as Stateful_sets, using namespace, name, and version identifiers. Enables real-time monitoring of changes to specific objects, with control over timeout, labels, and field selectors.",
      "description_length": 345,
      "index": 42,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces.By_namespace.Daemonsets.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource types, including Daemon_set, using namespace and name identifiers. Enables real-time monitoring of changes to specific resources with customizable timeouts and label-based selection.",
      "description_length": 339,
      "index": 43,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces.By_namespace.Controllerrevisions.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource objects, including Controller_revision, with detailed control over query behavior. Used to monitor real-time changes to specific resources within a namespace, enabling dynamic updates in applications.",
      "description_length": 357,
      "index": 44,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces.By_namespace.Replicasets.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes Replica_set resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on strings, integers, and custom types like `Uri.t` and `Cohttp.Header.t` to interact with Kubernetes API endpoints. Used to monitor changes to specific Replica_set instances in a namespace, with options to limit results, filter by labels, and handle long-running watch requests.",
      "description_length": 443,
      "index": 45,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Deployments.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes Deployment. Operates on Kubernetes API objects such as `Scale` and `Patch` structures, and interacts with HTTP endpoints using Cohttp. Used to dynamically adjust resource allocations for deployments based on load or policy.",
      "description_length": 324,
      "index": 46,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Deployments.By_name.Status",
      "description": "Provides functions to retrieve, replace, and update the status of a Kubernetes Deployment using HTTP requests. Operates on Kubernetes API types such as Deployment and Patch, and requires a URI, namespace, and name to target specific resources. Used to manage deployment configurations in a cluster, including partial updates and full replacements.",
      "description_length": 347,
      "index": 47,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Statefulsets.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes StatefulSet. Operates on Kubernetes API objects such as `Scale` and `Patch` structures, and interacts with HTTP endpoints using Cohttp. Enables programmatic control over scaling resources in a cluster by sending requests to specific API paths.",
      "description_length": 344,
      "index": 48,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Statefulsets.By_name.Status",
      "description": "Provides functions to retrieve, update, and partially modify the status of a Kubernetes StatefulSet by sending HTTP requests to a specified URI. Operates with Kubernetes API types such as StatefulSet and Patch, along with Cohttp headers and context. Used to interact with Kubernetes clusters to manage stateful applications through programmatic status adjustments.",
      "description_length": 364,
      "index": 49,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Daemonsets.By_name.Status",
      "description": "Provides functions to retrieve, update, and partially modify the status of a Kubernetes DaemonSet by sending HTTP requests to a specified URI. Operates with Kubernetes API types such as Daemon_set and Patch, and HTTP context and headers. Used to interact with a Kubernetes cluster to manage daemonized applications at scale.",
      "description_length": 324,
      "index": 50,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Replicasets.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes ReplicaSet. Operates on Kubernetes API objects such as `Scale` and `Patch` structures, and interacts with HTTP endpoints using Cohttp. Used to dynamically adjust resource allocation for scalable applications in a cluster.",
      "description_length": 322,
      "index": 51,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Replicasets.By_name.Status",
      "description": "Provides functions to retrieve, replace, and partially update the status of a Kubernetes ReplicaSet using HTTP requests. Operates on Kubernetes API types such as ReplicaSet and Patch, along with Cohttp and Lwt for asynchronous network operations. Used to manage ReplicaSet states in a cluster by interacting with specific endpoints and namespaces.",
      "description_length": 347,
      "index": 52,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch.Namespaces.By_namespace.Deployments.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on types like `Uri.t`, `Cohttp.Header.t`, and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. Used to monitor changes to a specific Deployment in a namespace, with options to limit results, filter by labels, and handle long-running watch requests.",
      "description_length": 421,
      "index": 53,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch.Namespaces.By_namespace.Statefulsets.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resources such as Stateful_sets, using namespace, name, and version identifiers. Enables real-time monitoring of changes to specific objects, with control over timeout, labels, and field selectors.",
      "description_length": 345,
      "index": 54,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch.Namespaces.By_namespace.Controllerrevisions.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resources, including namespace, name, and version-specific queries. Used to monitor changes to controller revisions and fetch detailed object states with precise control over data retrieval.",
      "description_length": 338,
      "index": 55,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace.Deployments.By_name.Rollback",
      "description": "Provides functions to request a rollback path template and initiate a deployment rollback with specific parameters. Operates with types like Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_rollback.t and HTTP-related types such as Uri.t and Cohttp.Header.t. Used to trigger controlled rollbacks of Kubernetes deployments with custom headers and context.",
      "description_length": 356,
      "index": 56,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace.Deployments.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes Deployment. Operates on Kubernetes API objects such as `Scale` and `Patch` structures, and interacts with HTTP endpoints using Cohttp. Used to dynamically adjust resource allocation for deployments in a cluster.",
      "description_length": 312,
      "index": 57,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace.Deployments.By_name.Status",
      "description": "Provides functions to retrieve, replace, and partially update the status of a Kubernetes Deployment by sending HTTP requests to a specified URI. Operates with Kubernetes API types such as Deployment and Patch, along with Cohttp headers and context. Used to manage deployment configurations in a cloud-native environment, such as adjusting rollout strategies or applying incremental changes.",
      "description_length": 390,
      "index": 58,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace.Statefulsets.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes StatefulSet. Operates on HTTP URIs, Cohttp headers, and Kubernetes API types such as Scale and Patch. Used to dynamically adjust resource allocations in a cluster through RESTful interactions.",
      "description_length": 293,
      "index": 59,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace.Statefulsets.By_name.Status",
      "description": "Provides functions to retrieve, update, and partially modify the status of a Kubernetes StatefulSet using HTTP requests. Operates with specific types such as `Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set.t` and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Patch.t`. Used to interact with Kubernetes APIs for managing stateful applications, including fetching current status, replacing it entirely, or applying incremental changes.",
      "description_length": 447,
      "index": 60,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1.Watch.Namespaces.By_namespace.Networkpolicies.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes network policy resources by name, supporting parameters for filtering, pagination, and version tracking. Operates on strings, integers, and custom types like `Uri.t` and `Cohttp.Header.t` to interact with Kubernetes API endpoints. Used to monitor real-time changes to network policies in a specific namespace, enabling dynamic configuration updates.",
      "description_length": 401,
      "index": 61,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Namespaces.By_namespace.Rolebindings.By_name",
      "description": "Provides functions to watch and retrieve Kubernetes Role_binding objects by name, supporting parameters for filtering, pagination, and version tracking. Operates on namespace, name, and resource version to fetch or monitor changes. Used to track real-time updates to role bindings in a specific namespace, ensuring consistent state synchronization.",
      "description_length": 348,
      "index": 62,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Namespaces.By_namespace.Roles.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource types, including namespaces, names, and versioned data. Used to monitor changes to a Role resource in real-time or fetch its current state with specific constraints.",
      "description_length": 322,
      "index": 63,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Namespaces.By_namespace.Rolebindings.By_name",
      "description": "Provides operations to watch and retrieve specific Kubernetes resources by name, supporting parameters for filtering, pagination, and version tracking. Works with Kubernetes API structures like `Watch_event` and handles HTTP requests with Cohttp and Lwt. Used to monitor changes to Role_binding objects in a specified namespace, enabling real-time updates and efficient data retrieval.",
      "description_length": 385,
      "index": 64,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Namespaces.By_namespace.Roles.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource types, including namespaces, names, and version strings, with detailed control over query behavior. Enables real-time monitoring of changes to a Role resource, with options to limit results, set timeouts, and handle large datasets through continuation tokens.",
      "description_length": 416,
      "index": 65,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Namespaces.By_namespace.Rolebindings.By_name",
      "description": "Provides operations to watch and retrieve specific Kubernetes resources by name, supporting parameters for filtering, pagination, and version tracking. Works with Kubernetes resource types like Role_binding, using namespace, name, and version-specific queries. Enables real-time monitoring of changes to resources, such as tracking updates to role bindings in a specific project.",
      "description_length": 379,
      "index": 66,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Namespaces.By_namespace.Roles.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resources such as Role, using types like string, int, and custom types from the Kubernetes.Definitions module. Enables real-time monitoring of changes to a specific Role within a namespace, with control over timeout, resource version, and label selectors.",
      "description_length": 403,
      "index": 67,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Api_service_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 68,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Api_service_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 69,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Service_reference.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and parsing tuples. Used to serialize configuration data or structured payloads for external systems.",
      "description_length": 262,
      "index": 70,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Api_service_list.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 71,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Api_service_spec.Object",
      "description": "Converts a nested associative list structure into a JSON representation and parses JSON back into this structure. Operates on a type representing key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 291,
      "index": 72,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Api_service.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 73,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Api_service_condition.Object",
      "description": "Converts a recursive data structure composed of key-value pairs to and from JSON format using Yojson. The structure represents nested associative lists where each entry is a string paired with another instance of the same type. This is useful for serializing and deserializing hierarchical data in applications requiring JSON interchange.",
      "description_length": 338,
      "index": 74,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Api_service_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 75,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Service_reference.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical settings.",
      "description_length": 295,
      "index": 76,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Api_service_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 77,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Api_service_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 78,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Api_service.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 79,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition_status.Object",
      "description": "Converts a recursive data structure composed of key-value pairs to and from JSON format using Yojson. The structure represents nested associative lists where each entry is a string key paired with another similar structure. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 328,
      "index": 80,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 81,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Json_schema_props_or_array.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 82,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Json.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 83,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize configuration data or structured payloads for external systems.",
      "description_length": 270,
      "index": 84,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.External_documentation.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data such as configuration trees or structured JSON payloads.",
      "description_length": 283,
      "index": 85,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Json_schema_props.Object",
      "description": "Converts a nested list of key-value pairs to and from JSON format using Yojson. Operates on a recursive data structure where each element is a tuple of a string and another element of the same type. Used to serialize and deserialize hierarchical data structures in applications requiring JSON interchange.",
      "description_length": 305,
      "index": 86,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Json_schema_props_or_bool.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 87,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition_list.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 88,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition_names.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 89,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_subresource_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 90,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_subresource_scale.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 91,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_subresources.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 92,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_validation.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested elements through a list of tuples where each tuple contains a string key and a value of the same type. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 352,
      "index": 93,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Json_schema_props_or_string_array.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 94,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition_condition.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 95,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.List_meta.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 96,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Group_version_for_discovery.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical configurations. Used to handle structured data in applications requiring JSON interchange, such as API responses or configuration files.",
      "description_length": 363,
      "index": 97,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Initializer.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 98,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Status_cause.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 99,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Object_meta.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Delete_options.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Api_group_list.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical configurations. Used to handle structured data in applications requiring JSON-based storage or communication.",
      "description_length": 336,
      "index": 102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Api_group.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Status_details.Object",
      "description": "Converts a nested associative list of strings to and from JSON representations using Yojson. Operates on a recursive data structure where each element is a key-value pair with string keys and nested values. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 310,
      "index": 104,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Initializers.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 105,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Micro_time.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Time.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Owner_reference.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Server_address_by_client_cidr.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize configuration data or structured payloads for external systems.",
      "description_length": 270,
      "index": 110,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Label_selector_requirement.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through a list of tuples where each tuple contains a string key and a corresponding value. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 348,
      "index": 111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Api_resource.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 112,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Api_versions.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and parsing tuples. Used to serialize complex data structures for API responses or configuration files.",
      "description_length": 264,
      "index": 113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Preconditions.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Patch.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 115,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Label_selector.Object",
      "description": "Converts a recursive data structure composed of key-value pairs to and from JSON format using Yojson. The structure represents nested associative lists where each entry is a string paired with another instance of the same type. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 332,
      "index": 117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Api_resource_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Pods.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on types like `Uri.t`, `Cohttp.Header.t`, and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. Used to monitor Pod state changes and fetch detailed metadata with specific labels or resource versions.",
      "description_length": 372,
      "index": 119,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Events.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes event resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on Kubernetes event objects within a specified namespace, using resource versions and labels to control data retrieval. Enables monitoring of event changes over time with configurable timeouts and response limits.",
      "description_length": 371,
      "index": 120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Services.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resources such as Services, using types like `Uri.t` and `Cohttp.Header.t` for HTTP interactions. Enables real-time monitoring of changes to a specific resource within a namespace, with control over timeout, labels, and resource versions.",
      "description_length": 386,
      "index": 121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Podtemplates.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and timeouts. Operates on Kubernetes resource types, including pods, using namespace and name identifiers. Enables real-time monitoring of changes to specific resources with customizable query options.",
      "description_length": 310,
      "index": 122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Serviceaccounts.By_name",
      "description": "Provides operations to watch and retrieve Kubernetes service account resources by name, supporting parameters for filtering, pagination, and version tracking. Works with types such as `Uri.t`, `Cohttp.Header.t`, and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. Used to monitor real-time changes to service accounts in a specific namespace, enabling automated responses to updates or deletions.",
      "description_length": 418,
      "index": 123,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Persistentvolumeclaims.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes persistent volume claims by name, supporting parameters like namespace, resource version, and label selectors. Operates on data types including strings, integers, and custom Kubernetes API structures. Used to monitor real-time changes to specific resources in a cluster, such as tracking updates to storage volumes during dynamic provisioning.",
      "description_length": 395,
      "index": 124,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Resourcequotas.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource objects, including namespace, name, and version identifiers. Used to monitor real-time changes to specific resources or fetch them with precise control over data retrieval.",
      "description_length": 329,
      "index": 125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Secrets.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes Secret resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on string-based identifiers, URI endpoints, and structured metadata including resource versions and label selectors. Used to monitor secret changes in a namespace, fetch secrets with specific labels, or retrieve secrets with a defined limit and pagination.",
      "description_length": 415,
      "index": 126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Limitranges.By_name",
      "description": "Provides a function to retrieve a path template and a detailed watch function for monitoring changes to Kubernetes resources by name. It operates on strings, integers, and custom types like `Uri.t` and `Cohttp.Header.t` to interact with Kubernetes APIs. Used to track real-time updates to specific resources, such as limit ranges, with precise control over filtering, timeouts, and resource versions.",
      "description_length": 400,
      "index": 127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Configmaps.By_name",
      "description": "Provides functions to retrieve and watch configuration maps by name, supporting parameters for filtering, pagination, and resource versioning. Operates on Kubernetes resources, specifically Config_map objects, with detailed control over query behavior. Enables real-time monitoring of changes to configuration maps within a specified namespace.",
      "description_length": 344,
      "index": 128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Replicationcontrollers.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes replication controller resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on string-based identifiers, timeouts, and structured metadata like resource versions and label selectors. Used to monitor changes to specific controllers in a namespace or fetch their current state with precise control over data retrieval.",
      "description_length": 415,
      "index": 129,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Endpoints.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes Endpoints resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on string-based identifiers, timeouts, and structured metadata like resource versions and label selectors. Used to monitor changes to specific endpoints in a namespace, fetch them with custom limits, and handle large result sets through continuation tokens.",
      "description_length": 419,
      "index": 130,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Pods.By_name.Attach",
      "description": "Returns a template string for constructing attach request paths. Handles HTTP GET and POST requests to interact with pod attach endpoints, supporting stream redirection for standard I/O and TTY allocation. Accepts parameters to specify namespace, pod name, container, and stream options for container runtime interactions.",
      "description_length": 322,
      "index": 131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Pods.By_name.Binding",
      "description": "Provides functions to create a Pod binding and retrieve a path template for API requests. Operates with Kubernetes API types such as Binding and Uri. Used to programmatically establish pod-to-node assignments in a Kubernetes cluster.",
      "description_length": 233,
      "index": 132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Pods.By_name.Eviction",
      "description": "Generates a path template for eviction requests and sends HTTP POST requests to create an eviction resource for a Pod. It operates with Kubernetes API types, including the Eviction record and HTTP context parameters. Used to programmatically evict a Pod in a specified namespace with optional pretty-printed output.",
      "description_length": 315,
      "index": 133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Pods.By_name.Exec",
      "description": "Provides functions to initiate GET and POST requests for executing commands in a Kubernetes pod, handling stream redirection for standard input, output, and error. Operates with parameters for namespace, pod name, container, command, and stream control, using Cohttp and Lwt for asynchronous HTTP interactions. Used to interact with Kubernetes APIs for remote command execution in specific container environments.",
      "description_length": 413,
      "index": 134,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Pods.By_name.Log",
      "description": "Provides functions to retrieve and format log data from a container, including options to filter by time, limit byte size, and follow log streams. Operates on structured data such as timestamps, byte limits, and container identifiers. Used to fetch logs from a specific pod with customizable output formatting and streaming behavior.",
      "description_length": 333,
      "index": 135,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Pods.By_name.Portforward",
      "description": "Handles HTTP GET and POST requests to establish port forwarding for a Kubernetes pod, using specified ports and authentication context. Operates on strings for namespace and pod names, and works with Cohttp headers and Lwt promises for asynchronous communication. Used to route WebSocket connections and manage network access in cluster environments.",
      "description_length": 350,
      "index": 136,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Pods.By_name.Proxy",
      "description": "Encapsulates HTTP operations for managing pod resources through structured endpoints, leveraging path, namespace, and name parameters. Supports headers, URIs, and string-based interactions to perform CRUD and metadata operations. Enables configuration updates, lifecycle management, and resource inspection within defined scopes. Examples include retrieving pod details, updating configurations, and deleting resources across namespaces.",
      "description_length": 437,
      "index": 137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Pods.By_name.Status",
      "description": "Provides functions to retrieve, replace, and partially update Pod status in a Kubernetes cluster using HTTP requests. Operates on Pod definitions, patch structures, and HTTP URI endpoints. Used to manage Pod state programmatically through REST API interactions.",
      "description_length": 261,
      "index": 138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Services.By_name.Proxy",
      "description": "handles HTTP method-specific interactions with a service's API, using string-based paths, namespaces, and resource names to construct and send requests. It supports operations such as GET, PUT, POST, DELETE, OPTIONS, HEAD, and PATCH to manage resources like teams and projects. Key data types include strings for paths, namespaces, and headers, along with HTTP methods. Examples include retrieving a team's data via a GET request or updating a project with a PUT call.",
      "description_length": 468,
      "index": 139,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Services.By_name.Status",
      "description": "Provides functions to retrieve, replace, and update the status of a Kubernetes Service resource using HTTP requests. Operates on Kubernetes API types such as Service and Patch, and requires a URI, namespace, and name to target specific resources. Used to manage service configurations in a Kubernetes cluster through direct API interactions.",
      "description_length": 341,
      "index": 140,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Persistentvolumeclaims.By_name.Status",
      "description": "Provides functions to retrieve, update, and partially modify the status of a Kubernetes PersistentVolumeClaim. Operates on Kubernetes API types such as Persistent_volume_claim.t and Patch.t, and interacts with HTTP endpoints using Cohttp. Retrieves or updates resources by namespace and name, supporting pretty-printed outputs and custom HTTP headers.",
      "description_length": 351,
      "index": 141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Resourcequotas.By_name.Status",
      "description": "Provides functions to retrieve, update, and partially modify Resource_quota objects in a Kubernetes cluster. Operates on Kubernetes API types such as Resource_quota and Patch, using HTTP requests with specified namespace, name, and URI. Enables interaction with cluster resources for managing resource limits and quotas.",
      "description_length": 320,
      "index": 142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Replicationcontrollers.By_name.Scale",
      "description": "Provides functions to retrieve, update, and partially modify the scale configuration of a Kubernetes replication controller. Operates on Kubernetes API types such as `Scale` and `Patch`, and interacts with HTTP endpoints using Cohttp. Used to dynamically adjust resource allocations in a cluster, such as increasing or decreasing replica counts via API calls.",
      "description_length": 359,
      "index": 143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Replicationcontrollers.By_name.Status",
      "description": "Returns a URI template for status-related API endpoints. Retrieves, updates, and partially modifies Kubernetes ReplicationController resources by name and namespace, using HTTP requests with customizable formatting and headers. Accepts patch operations with structured update data.",
      "description_length": 281,
      "index": 144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1.Watch.Namespaces.By_namespace.Podpresets",
      "description": "Monitors Kubernetes Pods through real-time streaming and list queries, using `Uri.t` and `Watch_event.t` to manage resource updates and filters. Supports namespace-specific queries, label selectors, and version tracking for precise data retrieval. Enables dynamic tracking of Pod preset changes, allowing for efficient state synchronization. Examples include watching for new Pod configurations or filtering presets by metadata labels.",
      "description_length": 435,
      "index": 145,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1.Namespaces.By_namespace.Podpresets.By_name",
      "description": "Provides functions to retrieve, update, delete, and partially modify Pod_preset resources in a Kubernetes cluster, using HTTP requests with customizable parameters like namespace, name, and export settings. Operates on data types such as Pod_preset, Delete_options, and Patch, with support for pretty printing and context-aware HTTP headers. Used to manage pod preset configurations dynamically within a cluster, including controlled deletion and partial updates.",
      "description_length": 463,
      "index": 146,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1.Watch.Namespaces.By_namespace.Events",
      "description": "Manages Kubernetes event resources with functions to fetch and watch events using namespace and name, while supporting filters, pagination, and real-time updates. Key data types include event objects, namespace identifiers, and query parameters such as resource_version and label_selector. Operations allow retrieval of historical event data, continuous monitoring of changes, and efficient result limiting. Example uses include tracking pod status changes or filtering events by specific labels.",
      "description_length": 496,
      "index": 147,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1.Namespaces.By_namespace.Events.By_name",
      "description": "Provides functions to retrieve, update, delete, and partially modify Event resources in a Kubernetes cluster, using HTTP requests with specified namespace, name, and optional parameters like pretty formatting, export settings, and deletion policies. Operates on data types such as Event, Delete_options, and Patch from the Kubernetes API. Used to manage event resources programmatically, including replacing an event's content, deleting events with custom grace periods, or applying partial updates.",
      "description_length": 499,
      "index": 148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces.By_namespace.Daemonsets",
      "description": "Manages Kubernetes daemon sets through retrieval, filtering, and real-time watching with support for namespace, name, pagination, and versioning. Key operations include fetching specific resources, monitoring changes, and applying filters. Data types include daemon set definitions, version markers, and watch events. Examples include tracking updates to a daemon set in a specific namespace or retrieving a historical version of a resource.",
      "description_length": 441,
      "index": 149,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces.By_namespace.Deployments",
      "description": "Manages Kubernetes resource interactions through retrieval, filtering, and real-time watching, using `Uri.t` and `Cohttp.Header.t` for HTTP communication. Supports operations on Deployments with namespace, timeout, and resource version controls. Allows continuous monitoring of Deployment state changes and selective data fetching. Enables precise control over data retrieval and event streaming for dynamic environments.",
      "description_length": 421,
      "index": 150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces.By_namespace.Ingresses",
      "description": "Manages Kubernetes Ingress resources by allowing retrieval, watching, and filtering with support for pagination, versioning, and label selectors. Utilizes `Uri.t` and `Cohttp.Header.t` to handle HTTP requests and responses, enabling real-time updates with customizable timeouts. Operations include fetching specific objects, monitoring changes, and applying dynamic filters. Examples include tracking updates to an Ingress in a namespace or retrieving a list of resources with a defined set of labels.",
      "description_length": 501,
      "index": 151,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces.By_namespace.Networkpolicies",
      "description": "Manages interactions with Kubernetes network policies through name-based queries, filtering, and real-time monitoring. Supports string identifiers, timeouts, and HTTP headers to fetch and track policy changes across namespaces. Enables automated responses to policy updates by observing modifications and retrieving historical versions. Allows pagination and parameterized filtering to handle large or dynamic policy sets efficiently.",
      "description_length": 434,
      "index": 152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces.By_namespace.Replicasets",
      "description": "Retrieves and monitors Kubernetes Replica_set resources with support for filtering, pagination, and real-time updates using string, integer, and custom types such as `Uri.t` and `Cohttp.Header.t`. Enables tracking of changes to specific Replica_set instances within a namespace, allowing label-based queries and handling of long-running watch operations. Operations include fetching by name, applying filters, and managing result streams. Examples include monitoring a Replica_set for configuration changes or retrieving a subset of resources based on metadata.",
      "description_length": 561,
      "index": 153,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Ingresses.By_name",
      "description": "Provides a URI template for status-based API interactions, enabling retrieval, modification, and partial updates of Ingress objects within a specific namespace and name. Supports HTTP methods and allows customization of request and response formatting through headers and pretty-printing. Key operations include reading, replacing, and patching Ingress resources. Example use cases include updating an Ingress's status or fetching its current configuration with tailored output.",
      "description_length": 478,
      "index": 154,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Deployments.By_name",
      "description": "manages Kubernetes deployment lifecycle operations through path generation, rollback, scaling, and status updates. it handles types like Deployment, Scale, Patch, and HTTP contexts, enabling actions such as reverting to previous versions, adjusting resource allocations, and modifying deployment states. functions support REST API interactions with customizable headers and formatting, allowing precise control over cluster resources. examples include rolling back a deployment, scaling replicas dynamically, and updating deployment configurations incrementally.",
      "description_length": 562,
      "index": 155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Networkpolicies.By_name",
      "description": "Provides functions to retrieve, replace, delete, and update Kubernetes Network_policy resources by name, using HTTP requests with customizable parameters like namespace, pretty formatting, and deletion options. Operates on specific Kubernetes API types such as Network_policy, Delete_options, and Patch. Used to manage network policies in a cluster, including partial updates and controlled deletions with grace periods.",
      "description_length": 420,
      "index": 156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Daemonsets.By_name",
      "description": "Handles HTTP interactions with the Kubernetes API to manage DaemonSet resources, supporting retrieval, modification, and partial updates through patch operations. Utilizes Kubernetes-specific types like Daemon_set and Patch, along with Cohttp and Lwt for asynchronous network communication. Allows direct manipulation of daemon set configurations, such as updating status fields or applying incremental changes. Examples include fetching the current state of a daemon set or modifying its spec through a strategic merge patch.",
      "description_length": 526,
      "index": 157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Replicationcontrollers.By_name",
      "description": "Handles dynamic adjustments to Kubernetes resource configurations by manipulating `Scale` and `Patch` objects through HTTP interactions. Supports retrieving current scale settings, updating replica counts, and applying partial modifications to resource definitions. Functions enable direct control over deployments and stateful sets by interacting with Kubernetes API endpoints. Examples include increasing replica counts or modifying resource limits via targeted API calls.",
      "description_length": 474,
      "index": 158,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Replicasets.By_name",
      "description": "manages Kubernetes ReplicaSet configurations and status through RESTful interactions, supporting scale adjustments and status updates. it handles Scale and Replica_set types, with operations like retrieval, replacement, and partial updates. functions require resource identifiers and utilize Cohttp for HTTP communication, returning results via Lwt. examples include changing replica counts or modifying status fields in a specified namespace.",
      "description_length": 443,
      "index": 159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Watch.Namespaces.By_namespace.Horizontalpodautoscalers",
      "description": "Manages Kubernetes horizontal pod autoscalers through retrieval, watching, and filtering operations. Supports label-based selection, pagination, and versioned access, with real-time updates via watch events. Handles HTTP requests and timeouts to customize monitoring behavior. Allows tracking of autoscaler metrics, scaling policies, and resource state changes dynamically.",
      "description_length": 373,
      "index": 160,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Namespaces.By_namespace.Horizontalpodautoscalers.By_name",
      "description": "Handles HTTP-based interactions with Kubernetes HorizontalPodAutoscaler resources, enabling retrieval, replacement, and updates through specific endpoints. Operates on types like HorizontalPodAutoscaler and Patch, requiring parameters such as URI, namespace, and name. Supports actions like fetching current autoscaler configurations or applying status changes. Example tasks include adjusting scaling limits or checking the health of deployed applications.",
      "description_length": 457,
      "index": 161,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Watch.Namespaces.By_namespace.Horizontalpodautoscalers",
      "description": "Manages Kubernetes horizontal pod autoscalers by enabling retrieval, watching, and filtering of resources with support for pagination, versioning, and real-time updates. Processes watch events and HTTP requests to monitor changes within a specific namespace, offering control over query limits and timeouts. Key data types include autoscaler configurations, watch events, and HTTP request parameters. Users can track autoscaler state changes, apply filters to narrow results, and manage long-running queries efficiently.",
      "description_length": 520,
      "index": 162,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Namespaces.By_namespace.Horizontalpodautoscalers.By_name",
      "description": "Handles real-time interaction with Kubernetes cluster autoscaling configurations by enabling retrieval, modification, and partial updates to HorizontalPodAutoscaler resources via HTTP. Operates on Kubernetes API resource types and URI endpoints to adjust scaling policies based on metrics. Supports operations like fetching current status, applying incremental changes, and updating configuration parameters. Examples include dynamically scaling pods in response to load or modifying threshold values for auto-scaling.",
      "description_length": 518,
      "index": 163,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Watch.Namespaces.By_namespace.Jobs",
      "description": "manages Kubernetes Jobs and related resources with fine-grained access controls, offering retrieval, filtering, and real-time watching capabilities. It handles structured data such as namespace, name, and version, and supports label-based queries and pagination. Operations include fetching specific resources, monitoring changes with timeout settings, and applying versioned filters. Users can track job status updates, retrieve historical versions, and filter jobs by metadata or labels.",
      "description_length": 489,
      "index": 164,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Namespaces.By_namespace.Jobs.By_name",
      "description": "Handles interactions with Kubernetes Job resources by allowing retrieval, modification, and partial updates through HTTP requests. Operates on types like Job and Patch, requiring parameters such as URI, namespace, and job name. Supports actions like updating job status or applying incremental changes to job configurations. Enables programmatic control over job states within a Kubernetes cluster.",
      "description_length": 398,
      "index": 165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Watch.Namespaces.By_namespace.Cronjobs",
      "description": "Manages Kubernetes cron jobs by enabling retrieval, filtering, and real-time watching of resources through HTTP interactions. Supports pagination, versioning, and namespace-specific queries, with operations tailored to Cron_job objects. Allows monitoring of changes and fetching of detailed state information. Examples include listing active jobs, tracking updates, and querying historical versions.",
      "description_length": 399,
      "index": 166,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Namespaces.By_namespace.Cronjobs.By_name",
      "description": "Handles interactions with Kubernetes CronJob resources by enabling status retrieval, replacement, and partial updates through HTTP requests. It works with types like Cron_job.t and Patch.t to modify or query specific aspects of CronJobs. Users can fetch detailed status information or apply targeted changes without rewriting entire resources. Examples include updating a CronJob's schedule or checking its current execution status.",
      "description_length": 432,
      "index": 167,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Watch.Namespaces.By_namespace.Cronjobs",
      "description": "Manages Kubernetes Cron_jobs through retrieval, filtering, and real-time monitoring with support for pagination and versioning. Operates on structured data types including strings, integers, and headers to interact with resource metadata. Enables tracking of updates to specific jobs within a namespace, allowing for dynamic responses to changes. Supports queries that narrow results by name, status, or schedule.",
      "description_length": 413,
      "index": 168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Namespaces.By_namespace.Cronjobs.By_name",
      "description": "Provides a URI template for interacting with Kubernetes CronJob status through HTTP methods. Supports operations like retrieving, updating, or replacing status using namespace and name parameters. Works with Kubernetes API types including CronJob and Patch. Example tasks include fetching the current status of a job or applying a status update via PATCH.",
      "description_length": 355,
      "index": 169,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Watch.Namespaces.By_namespace.Poddisruptionbudgets",
      "description": "Retrieves and watches Kubernetes resources with support for filtering, pagination, and versioning, using types like `Uri.t`, `string`, and `bool` to interact with API endpoints. Enables monitoring of Pod_disruption_budget resources in a namespace, including tracking changes via timeouts, label selectors, and resource versions. Functions allow fetching specific resources by name and observing updates in real time. Examples include querying a namespace for active disruptions or tracking resource version changes to ensure consistency.",
      "description_length": 537,
      "index": 170,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Namespaces.By_namespace.Poddisruptionbudgets.By_name",
      "description": "Retrieves, updates, and partially modifies Kubernetes PodDisruptionBudget resources using API-defined types like PodDisruptionBudget and Patch. Executes HTTP-based interactions to adjust cluster resilience settings dynamically. Supports targeted updates via patch operations while preserving unchanged fields. Examples include adjusting maxUnavailable values or checking current disruption thresholds.",
      "description_length": 401,
      "index": 171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces.By_namespace.Controllerrevisions",
      "description": "Manages Kubernetes controller revisions by enabling name-based resource retrieval and real-time watching with filters, pagination, and version control. Supports operations on namespace, name, and version to track changes and access detailed object states. Allows precise data fetching, such as listing revisions for a specific deployment or monitoring updates with a given version. Provides structured access to dynamic resource states through parameterized queries.",
      "description_length": 466,
      "index": 172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces.By_namespace.Daemonsets",
      "description": "Manages Kubernetes daemon set resources through retrieval, filtering, and real-time watching, using string identifiers, timeouts, and metadata such as resource versions and label selectors. Supports pagination and versioned updates to track changes in a namespace. Operations include fetching specific daemon sets, limiting results, and monitoring updates. Examples include retrieving a daemon set by name, filtering by labels, and watching for changes with a given resource version.",
      "description_length": 483,
      "index": 173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces.By_namespace.Deployments",
      "description": "Retrieves and monitors Kubernetes Deployments using structured types like `Uri.t` and `Cohttp.Header.t`, enabling real-time updates through watch streams. Supports filtering by labels, pagination, and namespace-specific queries. Operations include fetching deployment details, tracking changes, and managing long-running watches. Example tasks include tracking deployment status changes or retrieving scaled sets of deployments with custom filters.",
      "description_length": 448,
      "index": 174,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces.By_namespace.Replicasets",
      "description": "Retrieves and monitors Kubernetes Replica_set resources with support for filtering, pagination, and real-time updates. Processes strings, integers, `Uri.t`, and `Cohttp.Header.t` to interact with API endpoints and manage watch requests. Enables tracking of changes to specific Replica_set instances within a namespace, including label-based filtering and result limitation. Allows for efficient, dynamic observation of Replica_set states and modifications.",
      "description_length": 456,
      "index": 175,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces.By_namespace.Statefulsets",
      "description": "Retrieves and watches Kubernetes StatefulSet resources with string-based filtering, pagination, and real-time updates. Supports namespace, name, and query parameters, returning watch events or errors. Enables reactive monitoring of StatefulSet changes for orchestration tools. Examples include tracking configuration updates or scaling events in a cluster.",
      "description_length": 356,
      "index": 176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Deployments.By_name",
      "description": "Retrieves, updates, and modifies Kubernetes Deployment configurations and statuses using HTTP interactions with API objects like Scale, Deployment, and Patch. Supports adjusting replica counts, applying incremental changes, and managing deployment states. Functions include fetching current configurations, replacing entire states, and applying partial updates. Examples include scaling deployments dynamically or correcting deployment statuses without full replacements.",
      "description_length": 471,
      "index": 177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Statefulsets.By_name",
      "description": "manages Kubernetes StatefulSet configurations and states through HTTP interactions, enabling dynamic adjustments to resource allocations and operational parameters. It handles Scale and Stateful_set types, along with HTTP components like Uri and Cohttp.Header, to perform updates and queries. Operations include modifying replica counts, applying patches, and managing status transitions. Examples include scaling a service during traffic spikes or updating deployment configurations in real time.",
      "description_length": 497,
      "index": 178,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Daemonsets.By_name",
      "description": "Handles interactions with Kubernetes DaemonSets through HTTP requests, enabling status retrieval, updates, and partial modifications. Operates on types like Daemon_set and Patch, using parameters such as namespace, name, and headers. Supports actions like updating a daemonized service's configuration or querying its current state. Allows fine-grained control over cluster-wide deployments via direct API communication.",
      "description_length": 420,
      "index": 179,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Controllerrevisions.By_name",
      "description": "Provides functions to retrieve, update, delete, and partially modify Kubernetes Controller_revision resources by name, using HTTP requests with customizable parameters like namespace, pretty printing, and deletion policies. Operates on specific Kubernetes API types such as Controller_revision, Delete_options, and Patch. Used to manage application revisions in a cluster, including updating configurations and handling resource cleanup.",
      "description_length": 437,
      "index": 180,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Replicasets.By_name",
      "description": "Handles Kubernetes ReplicaSet scale and status operations through HTTP interactions, using `Scale` and `Patch` types to adjust replica counts and resource states. Provides URI templates for targeted API requests, enabling retrieval and modification of resources by name and namespace. Supports PATCH, GET, and PUT operations to dynamically manage cluster workloads. Examples include updating a ReplicaSet's replica count or fetching its current status.",
      "description_length": 452,
      "index": 181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces.By_namespace.Controllerrevisions",
      "description": "Retrieves and watches Kubernetes resources, including Controller_revision, with support for filtering, pagination, and versioning. Offers precise control over query parameters to track real-time changes within a namespace. Operations include fetching specific resources by name and monitoring updates dynamically. Examples include tracking revisions of a deployment or reacting to changes in resource versions.",
      "description_length": 410,
      "index": 182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces.By_namespace.Daemonsets",
      "description": "manages Kubernetes resource interactions with fine-grained control over retrieval, filtering, and real-time updates. It handles types like Daemon_set, using namespace and name to access and monitor resources, with support for labels, pagination, and versioning. Operations include fetching specific resources, watching for changes, and applying custom query parameters. Users can track updates to a daemon set in a namespace or filter by labels to detect configuration changes.",
      "description_length": 477,
      "index": 183,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces.By_namespace.Deployments",
      "description": "manages real-time monitoring of Kubernetes resources through retrieval and event streaming, leveraging types such as `Uri.t` and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` to track changes in deployments. It supports filtering, pagination, and namespace-specific queries to handle large-scale resource data efficiently. Operations include watching deployments for updates, limiting result sets, and processing continuous event streams. Example use cases involve tracking deployment status changes or automating responses to resource updates in a cluster.",
      "description_length": 580,
      "index": 184,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces.By_namespace.Replicasets",
      "description": "Retrieves and monitors Kubernetes Replica_set resources with support for filtering, pagination, and real-time updates. Processes strings, integers, `Uri.t`, and `Cohttp.Header.t` to interact with API endpoints and manage watch requests. Enables tracking of changes to specific Replica_set instances within a namespace, including label-based filtering and result limitation. Allows for dynamic observation of Replica_set states and modifications over time.",
      "description_length": 455,
      "index": 185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces.By_namespace.Statefulsets",
      "description": "manages Kubernetes stateful set resources by enabling retrieval, filtering, and real-time watching with precise control over namespace, name, and version. It supports operations like pagination, label-based selection, and field filtering to refine queries. Key data types include resource identifiers, version markers, and selector parameters. Users can monitor changes to specific stateful sets, retrieve historical versions, or apply dynamic filters to track evolving resource states.",
      "description_length": 486,
      "index": 186,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Deployments.By_name",
      "description": "manages Kubernetes Deployment configurations through HTTP interactions, offering precise control over scale settings and status updates. it handles `Scale`, `Deployment`, and `Patch` types, enabling dynamic resource adjustments and targeted modifications. operations include retrieving current states, applying partial updates, and replacing entire configurations. examples include increasing replica counts based on load or correcting deployment statuses via PATCH requests.",
      "description_length": 475,
      "index": 187,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Statefulsets.By_name",
      "description": "Manages Kubernetes StatefulSet configurations and status through HTTP interactions, using Cohttp for request handling and Kubernetes API types like Scale, Patch, and StatefulSet. Supports retrieving, updating, and partially modifying resources by targeting specific API endpoints. Functions include sending PATCH requests to adjust scale or status, applying structured updates, and handling API responses. Examples include dynamically resizing a StatefulSet or updating its operational status without full replacement.",
      "description_length": 518,
      "index": 188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Daemonsets.By_name",
      "description": "Handles HTTP interactions to manage Kubernetes DaemonSets, enabling status retrieval, updates, and partial modifications via PATCH requests. Operates on types like Daemon_set and Patch, using HTTP context and headers for communication. Supports dynamic cluster management by applying targeted changes to daemonized workloads. Example tasks include rolling updates, status checks, and conditional configuration adjustments.",
      "description_length": 422,
      "index": 189,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Controllerrevisions.By_name",
      "description": "Provides functions to retrieve, replace, delete, and update Kubernetes Controller_revision resources by name, using HTTP requests with specific parameters for namespace, name, and operation options. Operates on Kubernetes API types such as Controller_revision, Delete_options, and Patch, and interacts with HTTP clients and headers. Used to manage controller revisions in a Kubernetes cluster, including exact exports, graceful deletions, and partial updates.",
      "description_length": 459,
      "index": 190,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Replicasets.By_name",
      "description": "Handles dynamic adjustment and state management of Kubernetes ReplicaSets through HTTP interactions. Exposes operations to modify scale configurations and update status using Patch structures, with support for partial updates. Functions work with Kubernetes API objects like Scale, ReplicaSet, and Patch, leveraging Cohttp and Lwt for network communication. Examples include resizing a ReplicaSet or updating its status in a specific namespace.",
      "description_length": 444,
      "index": 191,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch.Namespaces.By_namespace.Controllerrevisions",
      "description": "Manages Kubernetes controller revisions by enabling name-based resource retrieval and real-time watching with filters, pagination, and version control. Supports operations on namespace, name, and version to track changes and access detailed object states. Allows precise data fetching, such as listing revisions for a specific deployment or monitoring updates with a given version. Provides tools to query and react to controller state changes efficiently.",
      "description_length": 456,
      "index": 192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch.Namespaces.By_namespace.Deployments",
      "description": "Retrieves and monitors Kubernetes resources with support for filtering, pagination, and real-time updates using types such as `Uri.t`, `Cohttp.Header.t`, and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. It enables tracking of specific Deployments within a namespace, allowing label-based filtering and handling of continuous watch streams. Operations include fetching resource states and subscribing to change events. Examples include monitoring a Deployment's status changes or retrieving a paginated list of resources with custom filters.",
      "description_length": 565,
      "index": 193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch.Namespaces.By_namespace.Statefulsets",
      "description": "manages Kubernetes stateful set resources by enabling retrieval, watching, and filtering based on namespace, name, and version. it supports real-time updates with customizable timeouts, labels, and field selectors. operations include fetching specific objects, monitoring changes, and paginating large result sets. examples include tracking updates to a named stateful set or querying based on label criteria.",
      "description_length": 409,
      "index": 194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace.Deployments.By_name",
      "description": "Offers functions to manage Kubernetes deployments through rollback, scaling, and status updates. Handles types like Deployment_rollback.t, Scale, Patch, and Deployment, along with HTTP components such as Uri.t and Cohttp.Header.t. Enables controlled rollbacks, dynamic resource adjustments, and configuration changes via HTTP requests. Examples include initiating a rollback with custom headers, modifying deployment scale, and updating rollout strategies.",
      "description_length": 456,
      "index": 195,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace.Statefulsets.By_name",
      "description": "Manages Kubernetes StatefulSet configurations and statuses through HTTP interactions, supporting scale adjustments and status updates. It handles types like Scale, Patch, and StatefulSet, enabling operations such as modifying resource limits or applying incremental changes. Functions include retrieving current states, updating configurations, and applying partial modifications. Examples include adjusting replica counts or patching specific fields in a StatefulSet's status.",
      "description_length": 477,
      "index": 196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace.Controllerrevisions.By_name",
      "description": "Provides functions to retrieve, update, delete, and partially modify Kubernetes Controller_revision resources by name, using HTTP requests with customizable parameters like namespace, pretty printing, and export settings. Operates on Kubernetes API types such as Controller_revision, Delete_options, and Patch. Used to manage controller revisions in a Kubernetes cluster, including updating their configuration or deleting them with specified policies.",
      "description_length": 452,
      "index": 197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1.Watch.Namespaces.By_namespace.Networkpolicies",
      "description": "manages Kubernetes network policy resources through retrieval, filtering, and real-time watching, using string, integer, and custom types like `Uri.t` and `Cohttp.Header.t` to interface with API endpoints. It supports namespace-specific monitoring and version-aware updates, enabling dynamic configuration adjustments. Operations include fetching policies by name, applying filters, and tracking changes over time. Example use cases include detecting policy modifications and synchronizing network settings across clusters.",
      "description_length": 523,
      "index": 198,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1.Namespaces.By_namespace.Networkpolicies.By_name",
      "description": "Provides functions to retrieve, update, delete, and patch Kubernetes NetworkPolicy resources by name, using HTTP requests with customizable parameters like namespace, pretty formatting, and deletion options. Operates on types such as NetworkPolicy, DeleteOptions, and Patch from the Kubernetes API. Used to manage network policies in a cluster, including updating configurations and handling deletion grace periods.",
      "description_length": 415,
      "index": 199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Namespaces.By_namespace.Rolebindings",
      "description": "Manages Kubernetes role bindings through name-based queries, supporting namespace-specific monitoring, filtering, and versioned state tracking. Key operations include retrieving and watching role bindings, with support for pagination and resource versioning. Data types include namespace, name, and resource version, enabling precise control over data retrieval. Examples include tracking real-time updates to role bindings in a namespace or fetching a specific binding with a known version.",
      "description_length": 491,
      "index": 200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Namespaces.By_namespace.Roles",
      "description": "manages Kubernetes resource interactions through name-based access, enabling real-time monitoring and state retrieval with filters, pagination, and version control. It handles structured data like namespaces, names, and versioned objects, supporting dynamic queries. Operations include fetching a Role's current state or tracking its changes over time. Examples include listing roles with specific labels or observing updates to a role's configuration.",
      "description_length": 452,
      "index": 201,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Namespaces.By_namespace.Rolebindings.By_name",
      "description": "Provides functions to retrieve, update, replace, delete, and partially update Role_binding resources in a Kubernetes cluster. Operates on Kubernetes API types such as Role_binding and Delete_options, using HTTP requests with Cohttp and Lwt. Enables programmatic management of role-based access control configurations within specified namespaces.",
      "description_length": 345,
      "index": 202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Namespaces.By_namespace.Roles.By_name",
      "description": "Provides functions to retrieve, replace, delete, and update Role resources in a Kubernetes cluster, using HTTP requests with Cohttp and Lwt. Operates on Kubernetes API types such as Role, Delete_options, and Patch, and requires namespace, name, and URI parameters. Supports operations like fetching a Role's details, updating its configuration, or deleting it with custom deletion policies.",
      "description_length": 390,
      "index": 203,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Namespaces.By_namespace.Rolebindings",
      "description": "Manages real-time monitoring and retrieval of Kubernetes resources, focusing on Role_binding objects within a namespace. Supports filtering, pagination, and version tracking using `Watch_event` and HTTP interactions via Cohttp and Lwt. Enables efficient querying and event-driven updates for dynamic resource states. Example tasks include tracking changes to role bindings or fetching paginated lists with specific filters.",
      "description_length": 423,
      "index": 204,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Namespaces.By_namespace.Roles",
      "description": "Manages Kubernetes Role resources with query, watch, and pagination capabilities, using names, namespaces, and versions to refine requests. Supports real-time updates, timeout controls, and continuation tokens for efficient data retrieval. Operations include filtering, versioned access, and event-driven monitoring. Examples include watching role changes in a specific namespace or fetching paginated results with custom parameters.",
      "description_length": 433,
      "index": 205,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Namespaces.By_namespace.Rolebindings.By_name",
      "description": "Provides functions to retrieve, replace, delete, and update Role_binding resources in a Kubernetes cluster. Operates on Kubernetes-specific types such as Role_binding and Delete_options, using HTTP requests with Cohttp and Lwt. Supports operations like fetching a role binding by name, updating its configuration, or deleting it with custom grace periods and propagation policies.",
      "description_length": 380,
      "index": 206,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Namespaces.By_namespace.Roles.By_name",
      "description": "Provides functions to retrieve, update, replace, delete, and patch a Kubernetes Role by name, using HTTP requests with Cohttp and Lwt. Operates on Kubernetes API types such as Role, Delete_options, and Patch. Used to manage role-based access control configurations in a specific namespace.",
      "description_length": 289,
      "index": 207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Namespaces.By_namespace.Rolebindings",
      "description": "Manages Kubernetes role bindings through query, watch, and version-aware retrieval operations. Supports namespace, name, and version-based filtering, enabling precise resource access and real-time change tracking. Allows monitoring of updates to role bindings within a specific project or across clusters. Facilitates automated responses to role binding modifications by providing structured access to their state and history.",
      "description_length": 426,
      "index": 208,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Namespaces.By_namespace.Roles",
      "description": "manages Kubernetes Role resources with query, watch, and version control capabilities. it handles string, int, and Kubernetes-specific types to fetch and monitor Roles, supporting filters, pagination, and label selectors. users can track real-time updates to a Role within a namespace, specifying timeouts and resource versions. examples include retrieving a Role's current state or observing changes as they occur.",
      "description_length": 415,
      "index": 209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Namespaces.By_namespace.Rolebindings.By_name",
      "description": "Provides operations to retrieve, replace, delete, and update Role_binding resources in a Kubernetes cluster. Works with Kubernetes API types such as Role_binding and Delete_options, and interacts with HTTP endpoints using Cohttp and Lwt. Enables programmatic management of role-based access control configurations within specified namespaces.",
      "description_length": 342,
      "index": 210,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Namespaces.By_namespace.Roles.By_name",
      "description": "Provides functions to retrieve, update, replace, delete, and patch Role resources in a Kubernetes cluster. Operates on Kubernetes API types such as Role, Delete_options, and Patch. Used to manage role-based access control configurations through HTTP requests to a Kubernetes API endpoint.",
      "description_length": 288,
      "index": 211,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Api_service",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data manipulation. Operates on recursive key-value pairs, supporting encoding to and decoding from JSON format. Allows for flexible data transformation in applications requiring nested data handling. Examples include converting configuration trees or hierarchical data structures to and from JSON.",
      "description_length": 393,
      "index": 212,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Api_service_condition",
      "description": "Encodes and decodes recursive string-based associative lists into and from JSON using Yojson. Supports nested structures where each level is a list of key-value pairs. Allows for seamless data transformation between in-memory representations and JSON payloads. Enables structured data exchange in applications requiring hierarchical, string-keyed data serialization.",
      "description_length": 366,
      "index": 213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Api_service_list",
      "description": "Converts nested associative lists to and from JSON, enabling serialization and deserialization of hierarchical data. The primary data type is a nested associative list, with operations for encoding and decoding using Yojson. This allows for structured data manipulation, such as converting a multi-level configuration into a JSON string or parsing a JSON response into a nested list format. Examples include exporting a tree-like data structure to JSON or reconstructing a complex model from a received JSON payload.",
      "description_length": 516,
      "index": 214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Api_service_spec",
      "description": "Encapsulates logic for serializing and deserializing hierarchical data structures into and from JSON. Operates on a nested key-value type where values may contain lists of the same type. Enables conversion between structured data and JSON format for communication. Can transform a list of headers into a JSON object and reconstruct the original structure from a JSON string.",
      "description_length": 374,
      "index": 215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Api_service_status",
      "description": "Converts nested string-based associative lists to and from JSON, supporting recursive structures for hierarchical data. Provides serialization and deserialization functions for complex data models using Yojson. Allows parsing JSON into nested lists and reconstructing JSON from structured data. Enables efficient handling of nested key-value pairs in API-related operations.",
      "description_length": 374,
      "index": 216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1.Service_reference",
      "description": "Handles conversion of nested key-value structures, where values are lists, to and from JSON using Yojson. Main data types include lists of tuples and JSON values, with operations for serialization and deserialization. Examples include converting configuration maps to JSON for API requests or parsing incoming structured data. Supports recursive processing of complex, nested data formats.",
      "description_length": 389,
      "index": 217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Api_service",
      "description": "Handles serialization and deserialization of nested, recursive data structures into and from JSON. Operates on lists of key-value pairs and recursive tuples, enabling structured data exchange. Supports deep nesting and complex hierarchies typical in API responses and requests. Example: converting a tree-like configuration into JSON for storage or transmission.",
      "description_length": 362,
      "index": 218,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Api_service_condition",
      "description": "Serializes and deserializes nested associative lists of string-keyed values to and from JSON using Yojson, enabling structured data exchange. The primary data type is a recursive associative list, with operations for converting between this structure and JSON strings. Functions support parsing JSON into nested records and generating JSON from complex, hierarchical data. This allows for efficient handling of tree-like data in applications requiring JSON-based communication.",
      "description_length": 477,
      "index": 219,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Api_service_list",
      "description": "Converts nested associative lists to and from JSON using Yojson, enabling structured data serialization and deserialization. Processes recursive key-value pairs, allowing for complex data transformations. Supports operations like parsing JSON strings into list structures and generating JSON output from nested lists. Example uses include storing configuration data or exchanging hierarchical information between systems.",
      "description_length": 421,
      "index": 220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Api_service_spec",
      "description": "Handles JSON serialization and deserialization of nested associative lists using Yojson. Provides functions to convert recursive key-value structures to and from JSON format. Enables structured data exchange in applications requiring secure, HTTPS-based communication. Examples include parsing server responses and generating request payloads.",
      "description_length": 343,
      "index": 221,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Api_service_status",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling structured data interchange. Supports recursive key-value pairs, allowing complex data representations to be serialized and reconstructed. Operations include parsing JSON strings into lists and converting lists back into JSON strings. This facilitates data handling in applications that require persistent or networked storage of hierarchical information.",
      "description_length": 440,
      "index": 222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1.Service_reference",
      "description": "Handles the conversion of nested associative lists into and out of JSON format using Yojson. The core data type is a recursive structure representing key-value pairs, where values may also be associative lists. This enables the serialization of complex, hierarchical data like configuration trees. Examples include parsing a nested settings structure from JSON or generating a JSON representation of a service configuration.",
      "description_length": 424,
      "index": 223,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition",
      "description": "Serializes and deserializes nested key-value structures into JSON using Yojson, supporting recursive serialization of lists. The main data type is a list of tuples representing key-value pairs, with values as lists. Operations include converting configuration data to JSON for API transmission or parsing incoming structured payloads. This enables seamless integration with external systems requiring nested JSON formats.",
      "description_length": 421,
      "index": 224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition_condition",
      "description": "Handles conversion between nested associative data structures and JSON, enabling serialization and deserialization of hierarchical information. Key data types include lists of key-value pairs with nested lists, and operations involve parsing and generating JSON using Yojson. This allows for structured data exchange, such as representing pod conditions with multiple attributes and their statuses. Example use cases include exporting pod state to JSON or parsing incoming condition data for processing.",
      "description_length": 503,
      "index": 225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition_list",
      "description": "Handles the serialization and deserialization of nested associative lists into and from JSON format. The core data type is a nested list of key-value pairs, with operations for converting between this structure and JSON. It enables efficient handling of hierarchical data models, such as configuration trees or nested metadata. Examples include parsing JSON configurations or generating structured data for API responses.",
      "description_length": 421,
      "index": 226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition_names",
      "description": "Encodes and decodes deeply nested associative lists into and from JSON, enabling structured data exchange. The primary data type is a nested list of key-value pairs, with operations for serialization and deserialization. It allows converting complex hierarchical data, such as configuration trees or nested metadata, into a JSON format suitable for storage or transmission. For example, it can transform a list of resource attributes with sublists into a JSON object and reconstruct the original structure from a JSON string.",
      "description_length": 525,
      "index": 227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition_spec",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Processes recursive key-value structures, enabling data to be stored, transmitted, and reconstructed accurately. Supports operations like converting a list of pairs into a JSON string and parsing a JSON string back into a list structure. Useful for applications needing to persist or exchange structured data in a standardized format.",
      "description_length": 439,
      "index": 228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_definition_status",
      "description": "Handles serialization and deserialization of deeply nested associative lists into and from JSON format using Yojson. The core data type is a recursive structure of string-keyed pairs, enabling manipulation of complex hierarchical data. Operations include converting between JSON and the internal representation, allowing for easy data exchange in applications with structured data requirements. For example, it can transform a nested configuration object into a JSON string or parse a JSON response into a typed OCaml structure.",
      "description_length": 528,
      "index": 229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_subresource_scale",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange. Operates on recursive key-value pairs, supporting conversion between OCaml lists and JSON formats. Allows applications to encode and decode complex data structures for custom resource scale operations. Examples include parsing configuration maps and generating JSON responses for API interactions.",
      "description_length": 408,
      "index": 230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_subresource_status",
      "description": "handles JSON serialization and deserialization of nested associative lists, specifically for the `.status` field in custom resources. it supports converting between recursive key-value structures and JSON format using Yojson, enabling structured data manipulation. operations include parsing and generating JSON from nested lists, allowing precise control over status updates. for example, it can transform a list like `[\"a\", \"b\", \"c\", \"d\"]` into a JSON object or extract the status portion from a custom resource payload.",
      "description_length": 522,
      "index": 231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_subresources",
      "description": "Provides bidirectional conversion between nested associative lists and JSON, using a recursive structure to represent hierarchical data. The core data type is a nested key-value pair, with operations for serialization and deserialization. This enables handling complex configurations or metadata by flattening or reconstructing them from JSON. For example, it can transform a configuration tree into a JSON string or parse a JSON document back into a structured associative list.",
      "description_length": 479,
      "index": 232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Custom_resource_validation",
      "description": "Converts recursive, nested data structures represented as lists of key-value pairs to and from JSON using Yojson, enabling seamless data serialization and deserialization. The primary data type is a list of tuples with string keys and recursively structured values. It allows operations such as encoding a deeply nested configuration into a JSON string or parsing a JSON document back into a structured list for further processing.",
      "description_length": 431,
      "index": 233,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.External_documentation",
      "description": "Converts nested associative lists to and from JSON, enabling structured data serialization and deserialization. Supports hierarchical key-value pairs with nested lists, allowing for complex data representations. Operations include parsing JSON into lists and generating JSON from list structures. Useful for handling configuration files, API payloads, or data exchange formats requiring nested organization.",
      "description_length": 407,
      "index": 234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Json",
      "description": "Encapsulates and manipulates JSON values through recursive structures, supporting serialization and deserialization of nested associative lists. Key data types include boolean, integer, float, string, lists, maps, and null. Operations allow converting between OCaml data structures and JSON representations, enabling seamless data interchange in applications. For example, it can transform a list of key-value pairs into a JSON object or parse a JSON string into a structured OCaml map.",
      "description_length": 486,
      "index": 235,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Json_schema_props",
      "description": "Serializes and deserializes recursive key-value structures into JSON using Yojson, supporting nested hierarchies. The core data type is a recursive tuple of strings and nested elements, with operations for converting between this structure and JSON strings. Functions enable parsing JSON into structured data and generating JSON from hierarchical records. Examples include converting configuration trees or nested JSON objects into OCaml tuples and vice versa.",
      "description_length": 460,
      "index": 236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Json_schema_props_or_array",
      "description": "Handles serialization and deserialization of nested associative lists into JSON, supporting both single objects and arrays of objects. Main data types include recursive lists of key-value pairs and JSON values, with operations for converting between them. Examples include parsing a JSON array of user records or encoding a configuration object with nested fields. Supports structured data interchange in applications requiring flexible, hierarchical JSON representation.",
      "description_length": 471,
      "index": 237,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Json_schema_props_or_bool",
      "description": "Encapsulates a boolean or a nested associative list structure, enabling flexible representation of JSON schema properties. Supports serialization and deserialization of hierarchical data using Yojson, allowing conversion between complex recursive data models and JSON format. Operations include parsing JSON into structured data and generating JSON from nested lists. Example uses include validating schema configurations and transforming nested data for API communication.",
      "description_length": 473,
      "index": 238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1.Json_schema_props_or_string_array",
      "description": "Handles conversion between nested associative lists and JSON, supporting recursive key-value structures. Provides functions to parse and generate JSON from lists of strings, enabling data serialization and deserialization. Key operations include encoding and decoding with Yojson, allowing structured data to be stored or transmitted as JSON. For example, a list like [(\"a\", \"b\"); (\"c\", [\"d\"; \"e\"])] can be converted to and from a valid JSON representation.",
      "description_length": 457,
      "index": 239,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Api.Resource.Quantity.Object",
      "description": "Converts a nested associative list of strings and values to and from JSON format. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 254,
      "index": 240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Api_group",
      "description": "Handles the conversion of nested associative lists to and from JSON format using Yojson. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. It enables structured data to be encoded into JSON and decoded back into nested lists for processing. This allows seamless data interchange in applications that require hierarchical data representation.",
      "description_length": 408,
      "index": 241,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Api_group_list",
      "description": "Handles nested associative data by converting lists of key-value pairs, where values are themselves lists of key-value pairs, to and from JSON using Yojson. Main data types include lists of tuples and nested lists, with operations for parsing and generating JSON. Examples include serializing configuration structures and deserializing hierarchical data from API responses. Supports structured data manipulation in applications requiring JSON-based data exchange.",
      "description_length": 463,
      "index": 242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Api_resource",
      "description": "Encapsulates hierarchical data structures as recursive key-value pairs, enabling conversion to and from JSON. Supports nested associative lists with string keys and values, allowing for complex data serialization and parsing. Operations include encoding structured configurations and decoding hierarchical metadata into accessible formats. Examples include transforming configuration trees into JSON for API transmission or parsing nested metadata from incoming requests.",
      "description_length": 471,
      "index": 243,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Api_resource_list",
      "description": "Provides a structured way to represent and manipulate lists of API resources, including their names, versions, and namespace status. Supports JSON serialization and deserialization of nested associative lists, enabling data exchange between systems. Allows conversion between complex data formats and JSON, facilitating integration with external services. Example operations include parsing a JSON string into a resource list and generating a JSON representation from a nested associative list.",
      "description_length": 494,
      "index": 244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Api_versions",
      "description": "Handles the conversion of nested key-value structures to and from JSON, using recursive serialization and parsing with Yojson. Main data types include lists of tuples and nested lists, with operations for encoding and decoding. It enables the representation of complex data in API responses or configuration files. For example, it can transform a list like [(\"a\", [1; 2; 3]); (\"b\", [\"x\"; \"y\"])] into a JSON object with corresponding nested arrays.",
      "description_length": 447,
      "index": 245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Delete_options",
      "description": "Encodes and decodes nested associative lists of strings to and from JSON using Yojson. Processes recursive key-value structures for data serialization and deserialization. Allows conversion of complex data formats into JSON and back, enabling data persistence or transmission. Example uses include saving configuration states or exchanging structured data between systems.",
      "description_length": 372,
      "index": 246,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Group_version_for_discovery",
      "description": "Encapsulates hierarchical data structures through nested key-value pairs, enabling serialization and deserialization to and from JSON. Supports operations for converting between structured data and JSON representations, facilitating data exchange in applications. Key types include nested associative arrays and JSON values, with functions for parsing and generating JSON. Examples include parsing API responses, generating configuration files, and transforming nested data for storage or transmission.",
      "description_length": 502,
      "index": 247,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Initializer",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa using Yojson. Represents data as recursive key-value pairs with string keys and nested values. Enables serialization of complex structured data for storage or transmission, and deserialization to reconstruct the original data structure in memory. Examples include converting configuration settings or hierarchical data models to JSON and parsing incoming JSON payloads into usable OCaml structures.",
      "description_length": 481,
      "index": 248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Initializers",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa using Yojson. Processes recursive key-value structures, enabling data serialization and deserialization for applications needing structured JSON interchange. Supports operations like parsing JSON strings into lists and generating JSON strings from lists. Example uses include saving configuration states or transmitting data between systems.",
      "description_length": 424,
      "index": 249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Label_selector",
      "description": "Provides a mechanism to evaluate label selectors against structured data, combining key-value pair operations with JSON serialization. Core data types include nested associative lists and boolean combinations derived from label matches. It supports parsing JSON into structured queries, applying them to resource labels, and determining matches using logical AND operations. Examples include filtering Kubernetes resources by labels or validating configuration sets against defined criteria.",
      "description_length": 491,
      "index": 250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Label_selector_requirement",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested objects through lists of key-value tuples. Provides operations to manipulate and transform these structures, including extracting values by key and applying operators to compare against label selectors. Allows for precise control over how data is serialized and deserialized, enabling efficient data interchange. For example, it can convert a list of (string * value) pairs into a JSON object or filter values based on a specified key and operator.",
      "description_length": 527,
      "index": 251,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.List_meta",
      "description": "Converts nested associative lists of strings to and from JSON using Yojson, enabling structured data serialization and deserialization. Operates on recursive key-value pair lists, supporting complex data hierarchies. Parses JSON into list structures and generates JSON from list representations. Example uses include storing configuration data, exchanging structured information between systems, and persisting nested metadata.",
      "description_length": 427,
      "index": 252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Micro_time",
      "description": "Converts nested associative lists of strings to and from JSON, supporting recursive structures for hierarchical data. Key operations include parsing JSON into nested lists and serializing nested lists into JSON format. This enables handling of complex, structured data within applications. For example, it can transform a nested configuration structure into a JSON string for storage or transmission.",
      "description_length": 400,
      "index": 253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Object_meta",
      "description": "Encapsulates metadata for persisted resources with structured key-value storage and JSON serialization. Supports recursive lists of string key-value pairs, enabling encoding and decoding of nested data structures. Allows conversion between in-memory representations and JSON format for storage or transmission. Example uses include saving configuration settings or object attributes in a standardized, serializable form.",
      "description_length": 420,
      "index": 254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Owner_reference",
      "description": "Encapsulates logic for handling nested associative lists as JSON, enabling serialization and deserialization of structured data. Supports recursive key-value pairs represented as lists, with operations to convert between JSON and OCaml structures. Examples include parsing configuration data or transmitting hierarchical information between systems. Provides direct manipulation of nested strings within a single namespace.",
      "description_length": 423,
      "index": 255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Patch",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling structured data manipulation. The core data type is a recursive list of key-value pairs, with operations for serialization and deserialization. It allows converting complex data structures into JSON strings and reconstructing them programmatically. This supports workflows where dynamic, hierarchical data needs to be exchanged or stored in a textual format.",
      "description_length": 443,
      "index": 256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Preconditions",
      "description": "Converts recursive data structures, represented as lists of key-value pairs with nested tuples, to and from JSON using Yojson. Supports serialization and deserialization of complex, hierarchical data. Operations include parsing JSON strings into structured data and generating JSON output from in-memory representations. Example uses include storing configuration trees, exchanging nested data between systems, and persisting structured information.",
      "description_length": 449,
      "index": 257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Server_address_by_client_cidr",
      "description": "Serializes and deserializes a list of key-value pairs, where values are lists, into JSON format using Yojson, supporting nested structures. The module enables configuration data exchange by converting between in-memory representations and JSON payloads. It allows for dynamic lookup of server addresses based on client CIDR ranges by processing structured input. Examples include parsing server routing rules from JSON files or generating configuration outputs for external services.",
      "description_length": 483,
      "index": 258,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Status",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested lists and string keys. Provides functions to transform between associative lists and JSON values, enabling structured data serialization and deserialization. Operations include parsing JSON strings into nested lists and converting nested lists back into JSON strings. Example uses include storing configuration trees or hierarchical datasets in a portable format.",
      "description_length": 442,
      "index": 259,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Status_cause",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested key-value pairs with recursive types. Provides functions to transform associative lists into JSON and reconstruct them from parsed data. Enables handling of complex error structures by serializing multiple failure causes into a structured format. Examples include converting configuration settings to JSON for storage or parsing error logs to extract detailed failure information.",
      "description_length": 459,
      "index": 260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Status_details",
      "description": "Provides functions to encode and decode nested associative lists of strings into JSON format using Yojson. The core data type is a recursive structure of key-value pairs, where each value can itself be a nested list. This enables structured data to be serialized for transmission or storage and reconstructed accurately. Examples include converting configuration settings or hierarchical data between JSON and OCaml representations.",
      "description_length": 432,
      "index": 261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Time",
      "description": "Converts nested associative lists of strings to and from JSON, supporting recursive structures for hierarchical data. Key operations include parsing JSON into nested lists and serializing lists back to JSON. This enables handling of complex, multi-level data representations. Examples include converting configuration trees or nested metadata into a transportable JSON format.",
      "description_length": 376,
      "index": 262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling structured data interchange. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. It allows converting complex data structures into JSON strings and reconstructing them programmatically. For example, it can transform a list like [(\"a\", \"b\"); (\"c\", (\"d\", \"e\"))] into a JSON object and back.",
      "description_length": 438,
      "index": 263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Util.Intstr.Int_or_string.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Configmaps",
      "description": "Retrieves and monitors Kubernetes Config_map objects with fine-grained query controls, including filtering, pagination, and version tracking. Supports real-time updates through watch mechanisms, allowing dynamic responses to configuration changes. Key operations include fetching by name, applying filters, and managing resource versions. Examples include tracking updates to a specific config map or retrieving a paginated list of configurations within a namespace.",
      "description_length": 466,
      "index": 265,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Endpoints",
      "description": "Manages Kubernetes Endpoints through name-based access, enabling retrieval and real-time watching with filters, pagination, and timeouts. Processes string identifiers, resource versions, and label selectors to fetch or monitor endpoint states. Supports continuation tokens for large datasets and allows custom query parameters. Examples include fetching endpoints in a namespace with specific labels or tracking updates as they occur.",
      "description_length": 434,
      "index": 266,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Events",
      "description": "Manages Kubernetes event resources with functions for retrieval, filtering, and real-time monitoring. Supports namespace-specific queries, label-based selection, and pagination using resource versions. Enables tracking of event changes over time with timeout and limit controls. Examples include watching pod creation events or filtering by specific error labels.",
      "description_length": 363,
      "index": 267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Limitranges",
      "description": "Retrieves path templates and monitors Kubernetes resources with real-time updates, using strings, integers, and custom types like `Uri.t` and `Cohttp.Header.t`. It supports filtering, timeouts, and resource version tracking for precise control over resource changes. Operations include fetching templates and setting up watches for specific resources like limit ranges. Examples include tracking updates to limit range configurations and managing dynamic resource adjustments.",
      "description_length": 476,
      "index": 268,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Persistentvolumeclaims",
      "description": "Retrieves and monitors Kubernetes persistent volume claims with fine-grained control over namespace, resource version, and labels. Supports real-time updates through watch mechanisms and operates on core types like strings, integers, and Kubernetes API objects. Enables tracking of storage volume changes during dynamic provisioning or configuration updates. Example tasks include observing modifications to a specific claim or filtering claims by labels across multiple namespaces.",
      "description_length": 482,
      "index": 269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Pods",
      "description": "manages interactions with Kubernetes Pods through retrieval, filtering, and real-time watching, leveraging `Uri.t`, `Cohttp.Header.t`, and `Watch_event.t` to handle metadata and state changes. It supports label-based queries, pagination, and continuous updates to track Pod lifecycle events. Operations include fetching detailed Pod information and subscribing to live changes in cluster state. Examples include monitoring Pod restarts or retrieving logs based on specific resource versions.",
      "description_length": 491,
      "index": 270,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Podtemplates",
      "description": "Retrieves and monitors Kubernetes resources like pods using namespace and name, with support for filtering, pagination, and timeouts. Offers real-time updates through watch mechanisms and customizable query parameters. Key data types include resource identifiers, query filters, and watch events. Examples include tracking pod state changes or fetching paginated lists of resources within a specific namespace.",
      "description_length": 410,
      "index": 271,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Replicationcontrollers",
      "description": "Retrieves and monitors Kubernetes replication controller resources with fine-grained control over filtering, pagination, and real-time updates. Processes string identifiers, timeouts, and structured metadata such as resource versions and label selectors. Supports fetching current states or watching for changes in specific controllers within a namespace. Enables dynamic interaction with controller configurations and status through parameterized queries and event-driven updates.",
      "description_length": 481,
      "index": 272,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Resourcequotas",
      "description": "Manages Kubernetes resource objects through retrieval, watching, and versioned access. Supports filtering, pagination, and namespace-based queries using name and version identifiers. Enables real-time monitoring of resource changes and precise data fetching. Examples include tracking pod updates or retrieving historical versions of a service.",
      "description_length": 344,
      "index": 273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Secrets",
      "description": "Manages Kubernetes Secrets through retrieval, watching, and filtering operations using string identifiers, URIs, and metadata. Supports real-time updates, label-based selection, and pagination for efficient secret monitoring. Allows fetching secrets by name, tracking changes in a namespace, or retrieving labeled secrets with specified limits. Operations include querying, watching, and filtering secrets based on resource versions and labels.",
      "description_length": 444,
      "index": 274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Serviceaccounts",
      "description": "Manages Kubernetes service account resources with real-time monitoring and retrieval capabilities, handling parameters like filtering, pagination, and version tracking. Operates on types such as `Uri.t`, `Cohttp.Header.t`, and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` to track changes in a specified namespace. Allows automated responses to service account updates, deletions, or additions. Supports efficient querying and event-driven processing of service account data.",
      "description_length": 499,
      "index": 275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace.Services",
      "description": "manages Kubernetes resource interactions through retrieval, watching, and filtering operations, utilizing HTTP-based communication with types like `Uri.t` and `Cohttp.Header.t`. it supports real-time monitoring of Services within a namespace, allowing control over timeouts, labels, and versioning. functions can fetch resources with pagination or watch for changes incrementally. examples include retrieving a service by name with specific labels or setting up a watch to track updates over time.",
      "description_length": 497,
      "index": 276,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Pods.By_name",
      "description": "Manages Kubernetes pod interactions through HTTP requests, supporting attach, exec, logs, port forwarding, eviction, and status updates. Operates on types like Binding, Eviction, Pod, and Uri, with functions for path templating, stream handling, and asynchronous I/O. Examples include executing commands in a container, fetching logs with time filters, and evicting a pod from a namespace. Provides low-level control over pod lifecycle and resource management via structured API operations.",
      "description_length": 490,
      "index": 277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Events.By_name",
      "description": "Provides functions to retrieve, update, delete, and partially modify Kubernetes Event resources by name, using HTTP requests with custom parameters like namespace, pretty formatting, and deletion options. Operates on types such as `Kubernetes.Definitions.Api.Core.V1.Event.t` and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Delete_options.t`. Used to manage event lifecycle operations in a Kubernetes cluster, including exact exports and garbage collection policies.",
      "description_length": 476,
      "index": 278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Services.By_name",
      "description": "Combines HTTP method handling with Kubernetes service management, enabling targeted API interactions through string-based paths and resource identifiers. It supports HTTP methods like GET, PUT, POST, and PATCH, and works with Kubernetes types such as Service and Patch to modify resource states. Users can retrieve service details, update configurations, or apply patches using specified namespaces and resource names. Examples include fetching a service's status or modifying its endpoints via a PATCH request.",
      "description_length": 511,
      "index": 279,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Podtemplates.By_name",
      "description": "Provides functions to retrieve, update, delete, and partially modify Pod_template resources in a Kubernetes cluster. Operates on types such as Pod_template, Delete_options, and Patch, using HTTP requests with custom headers and context. Supports precise control over resource operations, including exact exports, grace periods, and garbage collection policies.",
      "description_length": 360,
      "index": 280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Serviceaccounts.By_name",
      "description": "Provides functions to retrieve, update, delete, and patch Kubernetes Service_account resources using HTTP requests. Operates with types like Service_account, Delete_options, and Patch from the Kubernetes API. Enables programmatic management of service accounts within specific namespaces, including detailed control over deletion behavior and partial updates.",
      "description_length": 359,
      "index": 281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Persistentvolumeclaims.By_name",
      "description": "manages Kubernetes PersistentVolumeClaims through HTTP interactions, enabling retrieval, update, and partial modification by namespace and name. It works with types like Persistent_volume_claim.t and Patch.t, allowing precise control over resource states. Operations include fetching pretty-printed outputs and customizing HTTP headers for requests. Examples include updating a PVC's status or querying its current state within a specific namespace.",
      "description_length": 449,
      "index": 282,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Resourcequotas.By_name",
      "description": "Manages Kubernetes resource quotas through CRUD operations and partial updates using API types like Resource_quota and Patch. Supports namespace-specific interactions via HTTP requests with defined names and URIs. Allows adjustment of cluster resource limits and monitoring of quota usage. Examples include updating a quota's limits or fetching its current state.",
      "description_length": 363,
      "index": 283,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Secrets.By_name",
      "description": "Provides functions to retrieve, replace, delete, and patch Kubernetes Secrets by name, using HTTP requests with custom parameters for formatting, namespace, and deletion policies. Operates on types such as `Kubernetes.Definitions.Api.Core.V1.Secret.t` and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Delete_options.t`. Used to manage secret configurations in a Kubernetes cluster, including controlled deletion and partial updates.",
      "description_length": 441,
      "index": 284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Limitranges.By_name",
      "description": "Provides functions to retrieve, update, delete, and partially modify Kubernetes LimitRange resources by name, using HTTP requests with custom parameters like namespace, pretty formatting, and export settings. Operates on types such as Limit_range, Delete_options, and Patch, and interacts with Kubernetes API endpoints. Supports programmatic management of resource limits in specific namespaces, including graceful deletion and partial updates.",
      "description_length": 444,
      "index": 285,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Configmaps.By_name",
      "description": "Provides functions to retrieve, update, delete, and patch Kubernetes ConfigMaps using HTTP requests. Operates on types such as Config_map, Delete_options, and Patch, with parameters for namespace, name, and request configuration. Enables programmatic management of ConfigMap resources in a Kubernetes cluster.",
      "description_length": 309,
      "index": 286,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Replicationcontrollers.By_name",
      "description": "manages Kubernetes resource scaling and status updates through HTTP interactions, handling `Scale` and `ReplicationController` types with patch operations. It supports dynamic adjustments like changing replica counts and provides URI templates for targeted API requests. Operations include retrieving, updating, and modifying resources using structured data and custom headers. Examples include resizing a deployment or fetching status details for a specific controller.",
      "description_length": 470,
      "index": 287,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Endpoints.By_name",
      "description": "Provides functions to retrieve, update, delete, and patch Endpoints resources in a Kubernetes cluster. Operates on types such as `Endpoints.t`, `Delete_options.t`, and `Patch.t`, using HTTP requests with custom parameters like namespace, name, and export settings. Enables programmatic management of endpoint configurations in a distributed system.",
      "description_length": 348,
      "index": 288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Nodes.By_name.Proxy.By_path",
      "description": "Provides HTTP methods (GET, PUT, POST, DELETE, OPTIONS, HEAD, PATCH) to interact with a node's resource via a proxy, using path and name parameters. Operates with strings for paths and names, Cohttp headers, and URI endpoints. Executes asynchronous HTTP requests with context and custom headers for API communication.",
      "description_length": 317,
      "index": 289,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1.Namespaces.By_namespace.Localsubjectaccessreviews",
      "description": "Generates a path template for creating a local subject access review and sends a POST request with a subject access review object, including optional pretty-printing and context parameters. It operates on a Kubernetes authorization subject access review structure and a namespace. Used to check access permissions for a specific user or service account within a defined namespace.",
      "description_length": 380,
      "index": 290,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1beta1.Namespaces.By_namespace.Localsubjectaccessreviews",
      "description": "Generates a request path template for creating a local subject access review and sends a POST request with a subject access review object, namespace, and optional context parameters. It handles HTTP communication with Kubernetes using Cohttp and Lwt, working with the `Local_subject_access_review.t` type and URI-based endpoints. Used to check access permissions for specific users or groups within a defined namespace.",
      "description_length": 419,
      "index": 291,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1.Watch.Storageclasses.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes storage class resources by name, supporting parameters for filtering, pagination, and versioning. Operates on types like `Uri.t` and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` to handle HTTP requests and event streams. Used to monitor changes to storage class configurations in real time or fetch a snapshot of existing classes with specific constraints.",
      "description_length": 432,
      "index": 292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1alpha1.Watch.Volumeattachments.By_name",
      "description": "Provides functions to watch and retrieve Volume_attachment resources by name, supporting parameters for filtering, pagination, and versioning. Operates on OCaml types derived from Kubernetes API definitions, including watch events and HTTP headers. Used to monitor real-time changes to volume attachments in a Kubernetes cluster, with control over query limits and resource versions.",
      "description_length": 383,
      "index": 293,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1beta1.Watch.Storageclasses.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource types, including Storage_class, with detailed control over query behavior. Enables real-time monitoring of changes to storage class configurations and supports efficient data retrieval with pagination and label-based filtering.",
      "description_length": 384,
      "index": 294,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1beta1.Watch.Volumeattachments.By_name",
      "description": "Provides functions to watch and retrieve Volume_attachment resources by name, supporting parameters for filtering, pagination, and version tracking. Operates on OCaml types derived from Kubernetes API definitions, including watch events and HTTP request configurations. Used to monitor real-time changes to volume attachments in a Kubernetes cluster, enabling responsive infrastructure management.",
      "description_length": 397,
      "index": 295,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Certificates.V1beta1.Certificatesigningrequests.By_name.Approval",
      "description": "Provides functions to generate a request path template and submit a certificate signing request approval. Operates with Kubernetes certificate data structures and HTTP context parameters. Used to programmatically approve specific certificate requests in a Kubernetes cluster.",
      "description_length": 275,
      "index": 296,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Certificates.V1beta1.Certificatesigningrequests.By_name.Status",
      "description": "Generates a path template for requesting a CertificateSigningRequest resource and updates its status with a provided body, using HTTP PUT. It operates on a Certificate_signing_request.t type and a Cohttp header structure. This is used to programmatically update the status of a certificate request in a Kubernetes cluster.",
      "description_length": 322,
      "index": 297,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Certificates.V1beta1.Watch.Certificatesigningrequests.By_name",
      "description": "Provides functions to watch and retrieve specific Certificate_signing_request resources, supporting parameters like name, resource_version, and timeout for precise control over data retrieval. Operates on data types including strings, integers, and custom types from Kubernetes.Definitions for handling watch events and HTTP requests. Used to monitor real-time changes to certificate signing requests in a Kubernetes cluster, ensuring consistent and versioned data access.",
      "description_length": 472,
      "index": 298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1.Watch.Namespaces.By_namespace",
      "description": "Provides real-time monitoring of Kubernetes Pods using `Uri.t` for resource identification and `Watch_event.t` for event streaming, with support for namespace-specific queries and label-based filtering. Offers version tracking to ensure accurate state synchronization and enables dynamic updates on Pod configurations. Users can track new Pod creations, monitor changes in specific namespaces, or filter presets by metadata. Operations include streaming updates, list queries, and event-driven state management.",
      "description_length": 511,
      "index": 299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1.Namespaces.By_namespace.Podpresets",
      "description": "Manages Kubernetes pod preset configurations through CRUD and partial update operations, supporting namespace, name, and export parameters. Processes data types including Pod_preset, Delete_options, and Patch, with options for pretty printing and header customization. Enables dynamic adjustment of pod presets, allowing selective modifications without full replacement. Facilitates controlled deletion and precise configuration changes in cluster environments.",
      "description_length": 461,
      "index": 300,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1.Watch.Namespaces.By_namespace",
      "description": "Provides real-time and historical access to Kubernetes events through namespace and name-based queries, supporting filters, pagination, and continuous updates. Key data types include event records, namespace strings, and query parameters like resource_version and label_selector. Operations enable tracking of pod status changes, filtering events by labels, and retrieving limited result sets. Examples include monitoring deployment progress or isolating events for specific resources.",
      "description_length": 485,
      "index": 301,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1.Namespaces.By_namespace.Events",
      "description": "manages event resources in a Kubernetes cluster by enabling retrieval, modification, and deletion through HTTP interactions. It works with data types like Event, Delete_options, and Patch to perform actions such as replacing event content, deleting events with custom grace periods, or applying partial updates. Operations support namespace-specific targeting and optional formatting or export controls. Examples include updating an event's metadata, removing an event with a specified deletion policy, or patching a subset of an event's fields.",
      "description_length": 545,
      "index": 302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Scheduling.V1alpha1.Watch.Priorityclasses.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource types, including priority classes, with detailed control over query behavior. Enables real-time monitoring of resource changes and efficient data retrieval with customizable limits and selectors.",
      "description_length": 352,
      "index": 303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1.Watch.Apiservices.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes API resources, including watch events and metadata. Used to monitor real-time changes to specific API services and fetch structured data with precise control over query parameters.",
      "description_length": 328,
      "index": 304,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1.Apiservices.By_name.Status",
      "description": "Provides functions to retrieve a request path template and update the status of an Api_service resource. Operates with Kubernetes API types such as Api_service.t and HTTP-related types like Uri.t and Cohttp.Header.t. Used to programmatically modify the status of an API service in a Kubernetes cluster through HTTP requests.",
      "description_length": 324,
      "index": 305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1beta1.Watch.Apiservices.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on data types including strings, integers, and custom types like `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. Used to monitor changes to API services and fetch structured resource data with precise control over query parameters.",
      "description_length": 387,
      "index": 306,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1beta1.Apiservices.By_name.Status",
      "description": "Returns a preformatted URI template for API service requests. Accepts a Kubernetes API service object and sends an update request with optional pretty-printing, context, and headers. Used to programmatically modify the status of an API service in a Kubernetes cluster.",
      "description_length": 268,
      "index": 307,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Podsecuritypolicies.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and event streaming. Operates on Kubernetes resource types, including Pod_security_policy, with detailed control over query behavior. Enables real-time monitoring of changes to specific resources and efficient retrieval of large datasets through pagination and label-based filtering.",
      "description_length": 392,
      "index": 308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces.By_namespace",
      "description": "Provides unified management of Kubernetes resources including daemon sets, deployments, ingresses, network policies, and replica sets through retrieval, filtering, and real-time watching. Utilizes `Uri.t` and `Cohttp.Header.t` for HTTP interactions, supports namespace-specific queries, versioning, and dynamic filters, with operations like fetching, monitoring, and applying label-based selections. Enables tracking of resource changes, historical version retrieval, and efficient handling of large datasets via pagination and timeouts. Examples include monitoring deployment state changes, tracking ingress updates, or retrieving replica sets with specific labels.",
      "description_length": 666,
      "index": 309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Daemonsets",
      "description": "Manages Kubernetes DaemonSet resources via HTTP, enabling retrieval, modification, and partial updates using Kubernetes types like Daemon_set and Patch. Supports asynchronous operations with Cohttp and Lwt, allowing direct control over daemon set configurations. Users can fetch current states, update specs with strategic merge patches, or adjust status fields. Examples include modifying node selectors or rolling out configuration changes without full replacements.",
      "description_length": 468,
      "index": 310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Deployments",
      "description": "manages Kubernetes deployment lifecycle with operations like rollback, scaling, and status updates, using types such as Deployment, Scale, and Patch to manipulate cluster resources. it supports REST API interactions with customizable headers, enabling precise control over deployment states and configurations. actions include reverting to prior versions, adjusting replica counts, and applying incremental updates. examples cover dynamic scaling of services and targeted configuration changes without full redeployment.",
      "description_length": 520,
      "index": 311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Ingresses",
      "description": "Handles URI templates for status-driven API interactions, allowing retrieval, modification, and partial updates of Ingress objects within a specific namespace and name. It supports HTTP methods and customizes request and response formatting via headers and pretty-printing. Key data types include Ingress objects and URI templates, with operations for reading, replacing, and patching. Users can update an Ingress's status or fetch its configuration with specific formatting options.",
      "description_length": 483,
      "index": 312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Networkpolicies",
      "description": "manages Kubernetes network policies through CRUD operations and partial updates, leveraging HTTP requests with customizable parameters. It handles types such as Network_policy, Delete_options, and Patch to manipulate policy configurations and lifecycle. Users can retrieve policies by name, apply targeted changes with patches, or delete them with specified grace periods. Examples include updating ingress rules or removing policies while ensuring cluster stability.",
      "description_length": 467,
      "index": 313,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Replicasets",
      "description": "manages Kubernetes ReplicaSet configurations and status through RESTful interactions, handling scale adjustments and status updates with Scale and Replica_set types. it supports retrieval, replacement, and partial updates using resource identifiers and Cohttp for HTTP communication, returning results via Lwt. users can adjust replica counts or modify status fields within a specified namespace. operations enable dynamic control over ReplicaSet resources in a Kubernetes cluster.",
      "description_length": 481,
      "index": 314,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace.Replicationcontrollers",
      "description": "Manages Kubernetes resource scaling and configuration through direct API interactions, focusing on adjusting replica counts and applying partial updates. Key operations include retrieving and modifying `Scale` and `Patch` objects, enabling precise control over deployments and stateful sets. Users can increase replicas or update resource limits by sending targeted API requests. Examples include dynamically adjusting cluster capacity or refining resource allocations without full configuration replacements.",
      "description_length": 509,
      "index": 315,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Watch.Namespaces.By_namespace",
      "description": "Manages Kubernetes horizontal pod autoscalers with dynamic retrieval, watching, and filtering, using label selectors and pagination. Supports real-time updates through watch events, HTTP request customization, and versioned access to track scaling policies and resource changes. Operations include fetching current states, monitoring metric trends, and applying filters to isolate specific autoscalers. Example tasks include identifying autoscalers with specific labels, observing scaling events, and retrieving historical state data.",
      "description_length": 534,
      "index": 316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Namespaces.By_namespace.Horizontalpodautoscalers",
      "description": "Manages Kubernetes HorizontalPodAutoscaler resources via HTTP, supporting operations like retrieval, replacement, and updates using types such as HorizontalPodAutoscaler and Patch. It processes parameters including URI, namespace, and name to interact with specific autoscaler instances. Users can adjust scaling thresholds, apply configuration patches, or monitor application health. Tasks include modifying max/min replicas or inspecting current scaling states.",
      "description_length": 463,
      "index": 317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Watch.Namespaces.By_namespace",
      "description": "Manages Kubernetes horizontal pod autoscalers within a namespace, enabling retrieval, watching, and filtering of resources with support for pagination and real-time updates. Key data types include autoscaler configurations, watch events, and HTTP request parameters, with operations for processing events and handling queries. Users can track state changes, apply filters, and control query limits and timeouts. Examples include monitoring autoscaler adjustments, filtering by resource names, and managing long-running watch requests.",
      "description_length": 534,
      "index": 318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Namespaces.By_namespace.Horizontalpodautoscalers",
      "description": "Manages Kubernetes cluster autoscaling settings by interacting with HorizontalPodAutoscaler resources through HTTP, allowing retrieval, modification, and partial updates. It works with API resource types and endpoints to adjust scaling policies based on metrics. Operations include fetching current configurations, applying incremental changes, and updating threshold values. Examples include scaling pods automatically based on CPU usage or modifying target metrics for more precise control.",
      "description_length": 492,
      "index": 319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Watch.Namespaces.By_namespace",
      "description": "Manages Kubernetes Jobs and related resources with precise access controls, enabling retrieval, filtering, and real-time monitoring. It processes structured data like namespace, name, and version, and supports label-based queries, pagination, and versioned filters. Users can fetch specific jobs, track status changes, retrieve historical versions, and filter by metadata. Operations include watching for updates with timeout configurations and applying dynamic query parameters.",
      "description_length": 479,
      "index": 320,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Namespaces.By_namespace.Jobs",
      "description": "Manages Kubernetes Job resources by enabling retrieval, modification, and partial updates via HTTP, working with types such as Job and Patch. It processes parameters like URI, namespace, and job name to perform actions like adjusting job configurations or updating statuses. Users can apply incremental changes or control job states programmatically. Examples include modifying a job's environment variables or resuming a paused job.",
      "description_length": 433,
      "index": 321,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Watch.Namespaces.By_namespace",
      "description": "Handles Kubernetes cron job management through HTTP, enabling retrieval, filtering, and real-time monitoring with namespace-specific queries. Operates on Cron_job objects, supporting pagination, versioning, and state tracking. Users can list active jobs, track updates, and access historical versions. Provides structured access to cron job data with efficient querying and change detection.",
      "description_length": 391,
      "index": 322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Namespaces.By_namespace.Cronjobs",
      "description": "Manages Kubernetes CronJob resources by allowing status queries, full replacements, and partial updates via HTTP, using types like Cron_job.t and Patch.t to manipulate specific fields. It supports operations such as modifying a CronJob's schedule or inspecting its execution status. Users can apply targeted changes without reconstructing entire resources. Examples include adjusting a job's timing or diagnosing failures through status checks.",
      "description_length": 444,
      "index": 323,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Watch.Namespaces.By_namespace",
      "description": "Handles Kubernetes cron jobs within a namespace by retrieving, filtering, and monitoring them in real time, with support for pagination and versioning. Operates on structured data types such as strings, integers, and headers to manipulate and query job metadata. Allows filtering by name, status, or schedule, and tracks updates to dynamically respond to changes. Enables precise control over job lifecycle management within a specific namespace.",
      "description_length": 446,
      "index": 324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Namespaces.By_namespace.Cronjobs",
      "description": "Manages interactions with Kubernetes CronJob status via HTTP, enabling retrieval, update, and replacement using namespace and name. Operates on types such as CronJob and Patch, supporting methods like GET, PATCH, and PUT. Users can fetch real-time job status or apply targeted updates to job configurations. Example tasks include monitoring job progress or modifying scheduled execution parameters.",
      "description_length": 398,
      "index": 325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Watch.Podsecuritypolicies.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and event streaming. Operates on data types including strings, integers, and custom types like `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. Used to monitor changes to Pod_security_policy resources, fetch them with specific labels, and handle long-running watch requests with timeout and resource version controls.",
      "description_length": 447,
      "index": 326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Watch.Namespaces.By_namespace",
      "description": "manages Kubernetes resource interactions within a namespace, offering real-time monitoring, filtering, and version control. It utilizes types such as `Uri.t`, `string`, and `bool` to handle API requests and responses, supporting operations like fetching specific resources by name or observing updates through label selectors. It enables tracking of Pod_disruption_budget changes, including real-time updates and resource version synchronization. Users can query active disruptions in a namespace or ensure data consistency by monitoring version increments.",
      "description_length": 557,
      "index": 327,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Namespaces.By_namespace.Poddisruptionbudgets",
      "description": "Manages Kubernetes PodDisruptionBudget resources through retrieval, update, and patch operations, using types such as PodDisruptionBudget and Patch to interact with cluster configurations. It allows precise modifications like adjusting maxUnavailable values without altering other settings. Operations include checking current disruption thresholds and applying targeted changes to resilience policies. Examples include dynamically tuning cluster stability settings or verifying compliance with disruption limits.",
      "description_length": 513,
      "index": 328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces.By_namespace",
      "description": "Provides real-time monitoring and structured retrieval of Kubernetes resources including controller revisions, daemon sets, deployments, replica sets, and stateful sets. Utilizes types like `Uri.t`, `Cohttp.Header.t`, and string-based filters to enable namespace-specific queries, versioned updates, and label-based filtering. Supports operations such as listing revisions for a deployment, watching daemon set changes with a resource version, or tracking deployment status through watch streams. Examples include monitoring scaling events in stateful sets or fetching replica sets with custom pagination and label constraints.",
      "description_length": 627,
      "index": 329,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Controllerrevisions",
      "description": "Manages Kubernetes controller revisions through CRUD and partial update operations, supporting parameters like namespace and deletion policies. Handles types such as Controller_revision, Delete_options, and Patch to control application versions and resource lifecycle. Allows retrieval of specific revisions, modification of configurations, and controlled deletion of resources. Enables precise management of application states during deployments and rollbacks.",
      "description_length": 461,
      "index": 330,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Daemonsets",
      "description": "Manages Kubernetes DaemonSets via HTTP, supporting status checks, updates, and partial changes using types like Daemon_set and Patch. Processes parameters such as namespace, name, and headers to interact with cluster-wide deployments. Enables modifying service configurations or inspecting their state directly through the API. Examples include updating a daemon's spec or retrieving its current status.",
      "description_length": 403,
      "index": 331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Deployments",
      "description": "Manages Kubernetes Deployment lifecycle through HTTP interactions, handling configurations, statuses, and scale adjustments. Key operations include fetching, replacing, and patching Deployment objects, with support for modifying replica counts and applying incremental updates. It works with API types such as Scale, Deployment, and Patch to control deployment states. Users can dynamically scale applications or correct deployment issues without redeploying entire configurations.",
      "description_length": 481,
      "index": 332,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Replicasets",
      "description": "Manages Kubernetes ReplicaSet scaling and status via HTTP, utilizing `Scale` and `Patch` types to modify replica counts and resource states. Offers URI templates for precise API interactions, supporting PATCH, GET, and PUT to adjust or retrieve specific resources. Enables dynamic workload management by updating replica counts or fetching status details. Examples include increasing replicas for a service or checking the current state of a deployment.",
      "description_length": 453,
      "index": 333,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace.Statefulsets",
      "description": "Manages Kubernetes StatefulSet configurations and states via HTTP, supporting dynamic adjustments to resource allocations and operational parameters. It processes Scale and Stateful_set types, utilizing Uri and Cohttp.Header for communication, and enables operations such as modifying replica counts and applying patches. It facilitates real-time updates, like scaling services during traffic spikes or adjusting deployment settings. Examples include programmatically triggering state transitions or modifying configurations without manual intervention.",
      "description_length": 553,
      "index": 334,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces.By_namespace",
      "description": "Provides real-time monitoring and retrieval of Kubernetes resources across multiple types, including deployments, daemon sets, replica sets, stateful sets, and controller revisions, within a namespace. It supports filtering, pagination, versioning, and label-based queries, with operations such as fetching specific resources, watching for updates, and processing event streams. Key data types include `Uri.t`, `Cohttp.Header.t`, and watch event structures, enabling dynamic interaction with API endpoints. Examples include tracking deployment status changes, monitoring replica set modifications, or detecting configuration updates in stateful sets.",
      "description_length": 650,
      "index": 335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Controllerrevisions",
      "description": "Manages Kubernetes controller revisions through HTTP interactions, supporting retrieval, modification, and deletion with precise parameters. Operates on types like Controller_revision, Delete_options, and Patch, enabling actions such as exporting specific revisions, performing graceful deletions, and applying partial updates. Functions accept namespace, name, and operation-specific arguments to control API requests. Examples include updating a revision's spec or removing a revision with a grace period.",
      "description_length": 507,
      "index": 336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Daemonsets",
      "description": "Manages Kubernetes DaemonSets through HTTP interactions, supporting status retrieval, updates, and PATCH-based modifications. Works with types such as Daemon_set and Patch, leveraging HTTP context and headers for communication. Enables dynamic cluster management by applying targeted changes to daemonized workloads. Examples include performing rolling updates, checking status, and adjusting configurations conditionally.",
      "description_length": 422,
      "index": 337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Deployments",
      "description": "manages Kubernetes Deployment configurations via HTTP, supporting `Scale`, `Deployment`, and `Patch` types to adjust resources and modify settings. it enables retrieving deployment states, applying partial updates, and replacing full configurations. users can scale replicas dynamically or fix deployment issues with PATCH operations. examples include automating replica increases during traffic spikes or correcting misconfigured deployments.",
      "description_length": 443,
      "index": 338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Replicasets",
      "description": "Manages Kubernetes ReplicaSet configurations and states via HTTP, enabling scale adjustments and status updates through Patch operations. It works with Scale, ReplicaSet, and Patch types, using Cohttp and Lwt for asynchronous communication. Users can dynamically resize a ReplicaSet or apply targeted status changes within a namespace. Operations support partial updates, allowing precise control over ReplicaSet parameters without full object replacement.",
      "description_length": 456,
      "index": 339,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace.Statefulsets",
      "description": "Handles Kubernetes StatefulSet management via HTTP, leveraging Cohttp and API types such as Scale and Patch to manipulate configurations and status. Provides functions for sending PATCH requests to adjust scale, apply updates, and manage resource states efficiently. Operations include dynamically resizing deployments and modifying operational status without full replacement. Examples include updating a StatefulSet's replica count or applying targeted configuration changes through partial updates.",
      "description_length": 501,
      "index": 340,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch.Namespaces.By_namespace",
      "description": "handles Kubernetes resource management with namespace-centric operations, enabling retrieval, real-time watching, and filtering of controllers, deployments, and stateful sets. it utilizes types like `Uri.t`, `Cohttp.Header.t`, and `Watch_event.t` to support versioned queries, label-based filtering, and continuous updates. users can track deployment status changes, monitor stateful set updates, or fetch paginated resource lists with custom selectors. operations include versioned revision lookups, label-driven filtering, and real-time stream handling.",
      "description_length": 555,
      "index": 341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace.Controllerrevisions",
      "description": "Handles CRUD and partial update operations for Kubernetes controller revisions through HTTP interactions, supporting parameters like namespace and export. Utilizes types such as Controller_revision, Delete_options, and Patch to manipulate resource states. Allows actions like updating a revision's configuration or deleting it with a specified policy. Enables programmatic management of controller revisions within a Kubernetes cluster.",
      "description_length": 436,
      "index": 342,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace.Deployments",
      "description": "Manages Kubernetes deployments with rollback, scaling, and status update capabilities, using types like Deployment_rollback.t, Scale, Patch, and Deployment alongside HTTP utilities such as Uri.t and Cohttp.Header.t. Supports actions like executing rollbacks with custom headers, adjusting replica counts, and modifying rollout strategies through HTTP interactions. Provides direct control over deployment lifecycle events with precise configuration changes. Examples include reverting to a previous revision, increasing instance counts, and applying patch updates.",
      "description_length": 564,
      "index": 343,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace.Statefulsets",
      "description": "Handles Kubernetes StatefulSet management via HTTP, supporting scale adjustments and status updates with types like Scale, Patch, and StatefulSet. It enables modifying resource limits, applying patches, and retrieving or updating configurations. Operations include adjusting replica counts or updating specific status fields. Examples include dynamically resizing a StatefulSet or applying targeted configuration changes.",
      "description_length": 421,
      "index": 344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiextensions.V1beta1.Watch.Customresourcedefinitions.By_name",
      "description": "Provides functions to watch and retrieve custom resource definitions, supporting parameters like name, timeout, resource version, and label selectors. Operates on data types including strings, integers, and Cohttp headers to interact with Kubernetes APIs. Used to monitor real-time changes to specific resources and fetch filtered lists with pagination.",
      "description_length": 353,
      "index": 345,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiextensions.V1beta1.Customresourcedefinitions.By_name.Status",
      "description": "Returns the URI template used for status requests. Handles updating the status of a custom resource definition with optional pretty printing, context, and headers. Used to modify the status of a Kubernetes custom resource definition through an HTTP PUT request.",
      "description_length": 261,
      "index": 346,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1alpha1.Watch.Initializerconfigurations.By_name",
      "description": "Provides functions to watch and retrieve specific resources by name, supporting parameters like timeout, resource version, and label selectors. Operates on data types including URI, HTTP headers, and Kubernetes watch events. Used to monitor real-time changes to a specific Initializer_configurationparameter resource in a Kubernetes cluster.",
      "description_length": 341,
      "index": 347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1beta1.Watch.Mutatingwebhookconfigurations.By_name",
      "description": "Provides functions to watch and retrieve specific Kubernetes resources by name, supporting parameters like resource version, timeout, and label selectors. Operates on data types including strings, integers, and custom Kubernetes API structures such as `Watch_event.t`. Used to monitor real-time changes to MutatingWebhookConfiguration resources, enabling dynamic updates in cluster management systems.",
      "description_length": 401,
      "index": 348,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1beta1.Watch.Validatingwebhookconfigurations.By_name",
      "description": "Provides functions to watch and retrieve specific Kubernetes resources by name, supporting parameters like resource version, timeout, and label selectors. Operates on data types including strings, integers, and custom Kubernetes API structures. Used to monitor real-time changes to ValidatingWebhookConfiguration objects and fetch filtered lists with pagination.",
      "description_length": 362,
      "index": 349,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1.Watch.Namespaces.By_namespace",
      "description": "Handles Kubernetes network policies with namespace-specific filtering and real-time updates, utilizing types such as `Uri.t` and `Cohttp.Header.t` for API interactions. It supports fetching, modifying, and monitoring policies, with operations like name-based retrieval and change tracking. Custom logic enables dynamic configuration adjustments based on policy updates. Examples include detecting policy changes and maintaining consistent network settings across clusters.",
      "description_length": 472,
      "index": 350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1.Namespaces.By_namespace.Networkpolicies",
      "description": "Manages Kubernetes NetworkPolicy resources through CRUD and patch operations, supporting parameters like namespace and deletion grace periods. Handles types including NetworkPolicy, DeleteOptions, and Patch to modify and remove network configurations. Allows precise control over policy updates, deletions, and partial modifications. Examples include updating a policy's rules or deleting a policy with a specified grace period.",
      "description_length": 428,
      "index": 351,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Clusterrolebindings.By_name",
      "description": "Provides functions to watch and retrieve Cluster_role_binding resources by name, supporting parameters like watch, timeout, resource_version, and label selectors. Operates on OCaml types including strings, integers, and custom types from the Kubernetes.Definitions module. Used to monitor real-time changes to cluster role bindings in a Kubernetes cluster.",
      "description_length": 356,
      "index": 352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Namespaces.By_namespace",
      "description": "Provides name-based management of Kubernetes resources, enabling real-time monitoring, filtering, and versioned state retrieval. It supports operations on structured data such as namespaces, names, and versioned objects, with capabilities for pagination and dynamic queries. Users can track changes to role bindings or fetch specific resources with precise version control. Examples include observing updates to a role's configuration or listing roles with custom labels.",
      "description_length": 471,
      "index": 353,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Clusterroles.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes resource types, including Cluster_roleparameter, with detailed control over query behavior. Enables real-time monitoring of resource changes and efficient data retrieval with customizable limits and selectors.",
      "description_length": 357,
      "index": 354,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Namespaces.By_namespace.Rolebindings",
      "description": "Manages role-based access control in Kubernetes through CRUD and partial update operations on role bindings. Supports types like Role_binding and Delete_options, with methods for interacting with the Kubernetes API via HTTP. Allows programmatic control over user and service account permissions within specific namespaces. Examples include binding a user to a role in a namespace or removing an existing binding.",
      "description_length": 412,
      "index": 355,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Namespaces.By_namespace.Roles",
      "description": "manages Kubernetes Role resources through HTTP interactions, handling creation, retrieval, update, and deletion using Cohttp and Lwt. It works with types like Role, Delete_options, and Patch, requiring namespace, name, and URI inputs for operations. Users can fetch a Role's metadata, apply configuration changes, or remove a Role with specified deletion policies. Examples include updating a Role's permissions or deleting it with a grace period.",
      "description_length": 447,
      "index": 356,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Clusterrolebindings.By_name",
      "description": "Provides functions to watch and retrieve Cluster_role_binding resources by name, supporting parameters like watch, timeout, resource_version, and label selectors. Operates on OCaml types including strings, integers, and custom types from Kubernetes.Definitions. Used to monitor real-time changes to cluster role bindings in a Kubernetes cluster.",
      "description_length": 345,
      "index": 357,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Namespaces.By_namespace",
      "description": "Provides real-time monitoring and query capabilities for Kubernetes Role and Role_binding resources within specific namespaces, using watch events and HTTP interactions. Supports filtering, pagination, version tracking, and event-driven updates through operations like `Watch_event` and continuation tokens. Users can track changes to role bindings, fetch paginated role lists, or monitor role updates with versioned queries. Operations include dynamic filtering by name, namespace, or version, enabling efficient resource management in Kubernetes environments.",
      "description_length": 561,
      "index": 358,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Clusterroles.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters for filtering, pagination, and versioning. Operates on data types including strings, integers, and custom types like `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. Used to monitor changes to cluster role parameters in real-time with precise control over query limits and resource versions.",
      "description_length": 394,
      "index": 359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Namespaces.By_namespace.Rolebindings",
      "description": "Manages Kubernetes role bindings through CRUD operations, leveraging HTTP interactions with Cohttp and Lwt. Handles types like Role_binding and Delete_options, enabling precise control over access policies. Allows fetching, modifying, or removing role bindings with customizable deletion parameters. Examples include updating a binding's subjects or deleting a binding with a specified grace period.",
      "description_length": 399,
      "index": 360,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Namespaces.By_namespace.Roles",
      "description": "Manages Kubernetes role-based access control through HTTP interactions with the Kubernetes API, supporting CRUD and partial updates. Operates on types like Role, Delete_options, and Patch, enabling direct manipulation of access policies within a namespace. Allows retrieval of role details, modification of permissions, and deletion of roles as needed. Example tasks include granting new permissions to a role or removing outdated access rules.",
      "description_length": 444,
      "index": 361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Clusterrolebindings.By_name",
      "description": "Provides functions to watch and retrieve Cluster_role_binding resources by name, supporting parameters like watch, timeout, resource_version, and label selectors. Operates on OCaml types including strings, integers, and custom types from Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event. Used to monitor real-time changes to cluster role bindings in a Kubernetes cluster, enabling automated response to configuration updates.",
      "description_length": 441,
      "index": 362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Namespaces.By_namespace",
      "description": "Provides structured access to Kubernetes Role and RoleBinding resources through query, watch, and version-aware operations. Supports filtering by namespace, name, version, and labels, with capabilities for real-time monitoring and state retrieval. Users can fetch current Role configurations, track changes over time, and respond to updates programmatically. Operations handle Kubernetes-specific types and include pagination, timeouts, and resource version control.",
      "description_length": 466,
      "index": 363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Clusterroles.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters like timeout, resource version, and label selectors. Operates on Kubernetes resource types, including Cluster_roleparameter, and handles streaming watch events. Used to monitor real-time changes to specific resources or fetch limited subsets of data with pagination.",
      "description_length": 348,
      "index": 364,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Namespaces.By_namespace.Rolebindings",
      "description": "Manages role-based access control in Kubernetes by handling operations on Role_binding resources, including retrieval, modification, and deletion. It works with types like Role_binding and Delete_options, and uses Cohttp and Lwt for API interactions. Users can programmatically adjust access permissions within specific namespaces. Examples include updating a role binding to grant new permissions or removing outdated bindings.",
      "description_length": 428,
      "index": 365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Namespaces.By_namespace.Roles",
      "description": "Manages Kubernetes role-based access control by performing CRUD and patch operations on Role resources using API types like Role, Delete_options, and Patch. Supports direct interaction with Kubernetes clusters through HTTP requests. Allows modifying permissions, removing roles, and updating configurations programmatically. Examples include creating a new role, updating existing permissions, or deleting a role definition.",
      "description_length": 424,
      "index": 366,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Subject_access_review.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data exchange scenarios.",
      "description_length": 299,
      "index": 367,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Self_subject_access_review.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data interchange scenarios.",
      "description_length": 302,
      "index": 368,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Self_subject_access_review_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Self_subject_rules_review.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data such as configuration trees or structured payloads.",
      "description_length": 278,
      "index": 370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Resource_rule.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 371,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Resource_attributes.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of tuples with string keys and recursive values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 295,
      "index": 372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Non_resource_rule.Object",
      "description": "Converts a recursive data structure composed of key-value pairs to and from JSON format using Yojson. The structure represents nested associative lists where each entry is a string key paired with another similar structure. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 328,
      "index": 373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Local_subject_access_review.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Subject_rules_review_status.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of tuples with string keys and recursive values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 295,
      "index": 375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Subject_access_review_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Self_subject_rules_review_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Non_resource_attributes.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize complex data structures for storage or transmission in JSON format.",
      "description_length": 274,
      "index": 378,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Subject_access_review_status.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive nesting in data exchange scenarios.",
      "description_length": 292,
      "index": 379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Subject_access_review.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 380,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Self_subject_access_review.Object",
      "description": "Converts a recursive data structure composed of key-value pairs to and from JSON format using Yojson. The structure represents nested associative lists where each entry is a string paired with another instance of the same type. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 332,
      "index": 381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Self_subject_access_review_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Self_subject_rules_review.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Resource_rule.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data structures.",
      "description_length": 276,
      "index": 384,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Resource_attributes.Object",
      "description": "Converts a nested associative list structure into a JSON representation and parses JSON back into the same structure. Operates on a type representing key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data structures in a format compatible with JSON-based data exchange.",
      "description_length": 333,
      "index": 385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Non_resource_rule.Object",
      "description": "Converts a nested associative list of strings to and from JSON representations using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 275,
      "index": 386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Local_subject_access_review.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 387,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Subject_rules_review_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 388,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Subject_access_review_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Self_subject_rules_review_spec.Object",
      "description": "Converts a nested list of key-value pairs into a JSON object representation and parses JSON back into this structure. Operates on a recursive list type where each element is a string key paired with another instance of the same type. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 312,
      "index": 390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Non_resource_attributes.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of tuples with string keys and recursive values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 295,
      "index": 391,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Subject_access_review_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1.Storage_class_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 393,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1.Storage_class.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from a custom tree-like data representation.",
      "description_length": 280,
      "index": 394,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_attachment_source.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents objects as lists of key-value pairs, where values can themselves be nested objects. Used to serialize and deserialize hierarchical data in applications requiring JSON interchange.",
      "description_length": 287,
      "index": 395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_attachment_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 396,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_error.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 397,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_attachment_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 398,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_attachment.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 399,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_attachment_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 400,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_attachment_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from a custom tree-like data representation.",
      "description_length": 280,
      "index": 401,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_attachment_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 402,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Storage_class_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from a custom tree-like data representation.",
      "description_length": 280,
      "index": 403,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_error.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 404,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_attachment_list.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_attachment.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 406,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_attachment_spec.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 407,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Storage_class.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates.V1beta1.Certificate_signing_request_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates.V1beta1.Certificate_signing_request_status.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of tuples with string keys and recursive values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 295,
      "index": 410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates.V1beta1.Certificate_signing_request_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a string-keyed pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 259,
      "index": 411,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates.V1beta1.Certificate_signing_request_spec.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical configurations. Used to handle structured data in applications requiring JSON-based storage or communication.",
      "description_length": 336,
      "index": 412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates.V1beta1.Certificate_signing_request.Object",
      "description": "Converts a nested associative structure of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data such as configuration trees or structured logs.",
      "description_length": 280,
      "index": 413,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1.Token_review.Object",
      "description": "Converts a nested associative list structure into and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 279,
      "index": 414,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1.User_info.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 415,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1.Token_review_spec.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data interchange scenarios.",
      "description_length": 302,
      "index": 416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1.Token_review_status.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize configuration data or structured payloads for external systems.",
      "description_length": 270,
      "index": 417,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1beta1.Token_review.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize configuration trees or hierarchical data for storage or transmission.",
      "description_length": 295,
      "index": 418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1beta1.User_info.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with string keys and nested values. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 291,
      "index": 419,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1beta1.Token_review_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on recursive tuples representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 420,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1beta1.Token_review_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 421,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Settings.V1alpha1.Pod_preset.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Settings.V1alpha1.Pod_preset_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 423,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Settings.V1alpha1.Pod_preset_spec.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Events.V1beta1.Event_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 425,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Events.V1beta1.Event_series.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Events.V1beta1.Event.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 427,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Scheduling.V1alpha1.Priority_class_list.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize configuration data or structured payloads for API communication.",
      "description_length": 271,
      "index": 428,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Scheduling.V1alpha1.Priority_class.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_peer.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 430,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_ingress_rule.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_list.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 433,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 434,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on recursive list structures where each element is a key-value pair. Used to serialize and deserialize hierarchical data structures in JSON-based configurations.",
      "description_length": 254,
      "index": 435,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Supplemental_groups_strategy_options.Object",
      "description": "Converts a nested associative list of strings to and from JSON representations using Yojson. Operates on recursive type t, which represents structured key-value pairs. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 246,
      "index": 436,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_condition.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 437,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Pod_security_policy_spec.Object",
      "description": "Converts a nested associative list of strings and values to and from JSON format. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 264,
      "index": 438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Rolling_update_deployment.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Allowed_flex_volume.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive nesting in data exchange scenarios.",
      "description_length": 292,
      "index": 440,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_rollback.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 441,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Se_linux_strategy_options.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Rolling_update_daemon_set.Object",
      "description": "Converts a nested associative structure of strings to and from JSON format using Yojson. The module operates on a recursive list of key-value pairs where each value is another instance of the same structure. It is used to serialize and deserialize hierarchical data such as configuration trees or structured JSON payloads.",
      "description_length": 322,
      "index": 443,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_strategy.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents objects as lists of key-value pairs where values can be nested objects. Used to serialize and deserialize hierarchical data models in applications handling structured data.",
      "description_length": 280,
      "index": 444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Replica_set.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 445,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_spec.Object",
      "description": "Converts a recursive data structure composed of key-value pairs to and from JSON format using Yojson. The structure represents nested associative lists where each entry is a string key paired with another similar structure. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 328,
      "index": 446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Id_range.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Pod_security_policy_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 448,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 449,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Pod_security_policy.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical settings.",
      "description_length": 295,
      "index": 450,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 451,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Replica_set_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 452,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set_update_strategy.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 453,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_port.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 454,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 455,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Allowed_host_path.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 457,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 458,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Scale_spec.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 459,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Replica_set_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 460,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Replica_set_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 461,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 462,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Rollback_config.Object",
      "description": "Converts a nested associative structure, represented as a list of key-value pairs, to and from JSON format using Yojson. The module enables serialization and deserialization of hierarchical data where each entry is a string key paired with another instance of the same structure. This is useful for handling tree-like data in configurations or structured payloads.",
      "description_length": 364,
      "index": 463,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Fs_group_strategy_options.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 464,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Scale_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 465,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Scale.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 466,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ip_block.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 467,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Replica_set_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 468,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_tls.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 469,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 470,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Http_ingress_path.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 471,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Host_port_range.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 472,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_status.Object",
      "description": "Converts a nested associative list structure into a JSON representation and parses JSON back into the same structure. Operates on a type representing key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize structured data in a format compatible with JSON-based data exchange.",
      "description_length": 320,
      "index": 473,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_backend.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 474,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_list.Object",
      "description": "Converts a nested associative list structure, where each entry is a string key paired with a value list, to and from JSON format using Yojson. The module enables serialization and deserialization of hierarchical data structures representing objects with nested properties. It is used to process configuration data or structured payloads in applications requiring JSON interchange.",
      "description_length": 380,
      "index": 475,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 476,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Http_ingress_rule_value.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 477,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_rule.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing each level. Used to serialize configuration trees or hierarchical data for storage or transmission.",
      "description_length": 297,
      "index": 478,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 479,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Run_as_user_strategy_options.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 480,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_egress_rule.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from a JSON representation using Yojson. Processes nested structures represented as associative lists. Used to serialize and deserialize hierarchical data in applications handling structured configuration or data exchange.",
      "description_length": 299,
      "index": 481,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Horizontal_pod_autoscaler_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 482,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Metric_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 483,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Horizontal_pod_autoscaler_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 484,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Horizontal_pod_autoscaler_spec.Object",
      "description": "Converts a nested associative list structure into a JSON representation and parses JSON back into this structure. Operates on a type representing key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 291,
      "index": 485,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Cross_version_object_reference.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 486,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Pods_metric_source.Object",
      "description": "Converts a nested list of key-value pairs into a JSON object representation and parses JSON objects back into this structure. Works with a recursive type representing associative lists where each entry is a string key paired with another instance of the same type. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 343,
      "index": 487,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Pods_metric_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 488,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Object_metric_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 489,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Horizontal_pod_autoscaler_status.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested associations where each entry is a string key paired with another instance of the same type. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 322,
      "index": 490,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.External_metric_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 491,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Resource_metric_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 492,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Resource_metric_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 493,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Metric_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 494,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.External_metric_source.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and parsing tuples. Used to serialize complex data models into JSON for API responses or configuration files.",
      "description_length": 270,
      "index": 495,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Object_metric_source.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 496,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Horizontal_pod_autoscaler.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 497,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Horizontal_pod_autoscaler_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 498,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Horizontal_pod_autoscaler_spec.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize configuration trees or hierarchical data for storage or transmission.",
      "description_length": 295,
      "index": 499,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Cross_version_object_reference.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 500,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Horizontal_pod_autoscaler_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 501,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Scale_spec.Object",
      "description": "Converts a recursive data structure composed of key-value pairs to and from JSON format using Yojson. The structure represents nested associative lists where each entry is a string paired with another instance of the same type. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 332,
      "index": 502,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Scale_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 503,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Scale.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data exchange scenarios.",
      "description_length": 299,
      "index": 504,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Horizontal_pod_autoscaler.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested elements by allowing tuples of strings and itself. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 300,
      "index": 505,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Security_context.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 506,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Host_alias.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of tuples with string keys and recursive values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 295,
      "index": 507,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_address.Object",
      "description": "Converts a nested associative structure of strings and values to and from JSON format. Operates on a list of key-value pairs where values can be nested lists. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 252,
      "index": 508,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Load_balancer_status.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive nesting in data exchange scenarios.",
      "description_length": 292,
      "index": 509,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Exec_action.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of tuples with string keys and recursive values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 295,
      "index": 510,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_selector_requirement.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize configuration trees or hierarchical data for storage or transmission.",
      "description_length": 295,
      "index": 511,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Flex_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical data models.",
      "description_length": 298,
      "index": 512,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_list.Object",
      "description": "Converts a nested associative structure of strings to JSON and parses JSON back into the same structure. Operates on a list of key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data such as configuration trees or structured logs.",
      "description_length": 293,
      "index": 513,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Volume_device.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of tuples with string keys and recursive values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 295,
      "index": 514,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_env_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 515,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects by allowing tuples of strings and nested lists. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 305,
      "index": 516,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_quota_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 517,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_state_terminated.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 518,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Env_var.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 519,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Event_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 520,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Env_from_source.Object",
      "description": "Converts a nested associative list of strings and values to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with string keys and nested values. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 302,
      "index": 521,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Photon_persistent_disk_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 522,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 523,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_config_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 524,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Endpoint_address.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 525,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Scale_io_persistent_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 526,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Key_to_path.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Operates on nested associative structures represented as tuples of strings and lists. Used to serialize and deserialize hierarchical data structures in JSON-based configurations or data exchanges.",
      "description_length": 304,
      "index": 527,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Host_path_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 528,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_system_info.Object",
      "description": "Converts a nested associative structure of strings to JSON and parses JSON back into the same structure. Operates on a list of key-value pairs where values can be nested lists. Used to serialize and deserialize hierarchical data such as configuration trees or structured logs.",
      "description_length": 276,
      "index": 529,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Limit_range.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 530,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 531,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_port.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 532,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Event_series.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of tuples with string keys and recursive values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 295,
      "index": 533,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 534,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 535,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Storage_os_persistent_volume_source.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 536,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_security_context.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 537,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim_condition.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested objects as recursive tuples. Used to serialize and deserialize hierarchical data structures in JSON-based configurations.",
      "description_length": 280,
      "index": 538,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Endpoint_subset.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 539,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map_key_selector.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data interchange scenarios.",
      "description_length": 321,
      "index": 540,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Downward_api_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 541,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Rbd_persistent_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 542,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Ceph_fs_persistent_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 543,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Event_source.Object",
      "description": "Converts a nested list of key-value pairs into a JSON object representation and parses JSON back into this structure. Works with a recursive type representing associative lists with string keys and nested values. Used to serialize and deserialize structured data in JSON format within a parsing pipeline.",
      "description_length": 304,
      "index": 544,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_dns_config_option.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize configuration data or structured payloads for external systems.",
      "description_length": 270,
      "index": 545,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Preferred_scheduling_term.Object",
      "description": "Converts a nested associative structure of strings and values to and from JSON format. Operates on a recursive list type where each element is a string-keyed pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 257,
      "index": 546,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_state_running.Object",
      "description": "Converts a nested associative list structure into a JSON representation and parses JSON back into this structure. Operates on a type representing key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data structures in a format compatible with JSON-based data exchange.",
      "description_length": 329,
      "index": 547,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_state_waiting.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 548,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Lifecycle.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 549,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Rbd_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 550,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_template.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 551,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Weighted_pod_affinity_term.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 552,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on recursive tuples representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 553,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Downward_api_projection.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 554,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Azure_file_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 555,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 556,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Probe.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 557,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Flex_persistent_volume_source.Object",
      "description": "Converts a recursive data structure composed of key-value pairs to and from JSON format using Yojson. The structure represents nested associations where each element is a string paired with another instance of the same type. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 329,
      "index": 558,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Flocker_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 559,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Handler.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 560,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Toleration.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 561,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_reference.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 562,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on recursive tuples representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 563,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_affinity_term.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle structured data in applications requiring JSON interchange, such as configuration files or API responses.",
      "description_length": 353,
      "index": 564,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Namespace.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 565,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Iscsi_volume_source.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize configuration data or structured payloads for external systems.",
      "description_length": 270,
      "index": 566,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Scale_io_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 567,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_dns_config.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 568,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_status.Object",
      "description": "Converts a nested list of key-value pairs to and from JSON format using Yojson. Operates on a recursive data structure where each element is a tuple of a string and another element of the same type. Used to serialize and deserialize hierarchical data structures in applications requiring JSON interchange.",
      "description_length": 305,
      "index": 569,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Limit_range_spec.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize configuration trees or hierarchical data for storage or transmission.",
      "description_length": 295,
      "index": 570,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_status.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from a JSON representation using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to transform configuration data between OCaml and JSON formats.",
      "description_length": 292,
      "index": 571,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_image.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 572,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 573,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Endpoint_port.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 574,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from a custom tree-like data representation.",
      "description_length": 280,
      "index": 575,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Limit_range_item.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 576,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Component_status_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 577,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Vsphere_virtual_disk_volume_source.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents objects as lists of key-value pairs, where values can themselves be nested objects. Used to serialize and deserialize hierarchical data in applications requiring JSON interchange.",
      "description_length": 287,
      "index": 578,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Object_field_selector.Object",
      "description": "Converts a recursive JSON-like structure to and from Yojson representations, handling nested key-value pairs. Operates on a list of string-keyed tuples where each value can itself be a similar structure. Used to serialize and deserialize hierarchical data such as configuration trees or nested JSON objects.",
      "description_length": 307,
      "index": 579,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Session_affinity_config.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 580,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_affinity.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of tuples with string keys and recursive values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 295,
      "index": 581,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_key_selector.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 582,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_quota.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be recursively nested. Used to serialize and deserialize complex data hierarchies in applications requiring JSON interchange.",
      "description_length": 266,
      "index": 583,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Http_header.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 584,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_field_selector.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 585,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 586,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Csi_persistent_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 587,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Cinder_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 588,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Empty_dir_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 589,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Azure_disk_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 590,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 591,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Volume_node_affinity.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and parsing tuples. Used to serialize complex data models into JSON for API responses or configuration files.",
      "description_length": 270,
      "index": 592,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Se_linux_options.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 593,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Namespace_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with string keys and nested values. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 291,
      "index": 594,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_selector_term.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 595,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 596,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Capabilities.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 597,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map_projection.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data exchange scenarios.",
      "description_length": 299,
      "index": 598,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Endpoints_list.Object",
      "description": "Converts a nested associative structure of strings to and from JSON format using Yojson. The module operates on a recursive list of key-value pairs where each value is another instance of the same structure. It is used to serialize and deserialize hierarchical data such as configuration trees or structured JSON payloads.",
      "description_length": 322,
      "index": 599,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Namespace_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 600,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_account.Object",
      "description": "Converts a nested associative list of strings to and from JSON representations using Yojson. Operates on a recursive list structure where each element is a string key paired with a value of the same type. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 308,
      "index": 601,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 602,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Env_var_source.Object",
      "description": "Converts a nested list of key-value pairs into a JSON object representation and parses JSON back into this structure. Works with a recursive type representing key-value associations. Used to serialize and deserialize structured data in applications handling hierarchical configurations.",
      "description_length": 286,
      "index": 603,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Object_reference.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 604,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Client_ip_config.Object",
      "description": "Converts a recursive data structure composed of key-value pairs to and from JSON format using Yojson. The structure represents nested associative lists where each entry is a string key paired with another similar structure. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 328,
      "index": 605,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map.Object",
      "description": "Converts a nested list of key-value pairs into a JSON object representation and parses JSON back into this structure. Works with a recursive type representing associative lists. Used to serialize and deserialize structured data in JSON format.",
      "description_length": 243,
      "index": 606,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Replication_controller_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on recursive tuples representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 607,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 608,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_quota_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical data models.",
      "description_length": 298,
      "index": 609,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Limit_range_list.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 610,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_template_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 611,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Http_get_action.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 612,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_projection.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 613,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Projected_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 614,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Namespace_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 615,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Tcp_socket_action.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of tuples with string keys and recursive values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 295,
      "index": 616,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_spec.Object",
      "description": "Converts a nested associative structure of strings to and from JSON format using Yojson. The module operates on a recursive list type where each element is a key-value pair. It is used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 283,
      "index": 617,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Gce_persistent_disk_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 618,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 619,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Glusterfs_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on recursive tuples representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 620,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Storage_os_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 621,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Downward_api_volume_file.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 622,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node.Object",
      "description": "Converts a nested associative list structure into a JSON representation and parses JSON back into this structure. Operates on a type representing key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 291,
      "index": 623,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Replication_controller.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 624,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Event.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 246,
      "index": 625,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_account_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 626,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Daemon_endpoint.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 627,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 628,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_selector.Object",
      "description": "Converts a nested associative structure of strings to and from JSON format using Yojson. The module operates on a recursive list type where each element is a string key paired with a value of the same type. It is used to serialize and deserialize structured data in applications requiring JSON encoding and decoding of hierarchical key-value pairs.",
      "description_length": 348,
      "index": 629,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_port.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 630,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_status.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents objects as lists of key-value pairs, where values can themselves be nested objects. Used to serialize and deserialize hierarchical data in applications requiring JSON interchange.",
      "description_length": 287,
      "index": 631,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Portworx_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 632,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Aws_elastic_block_store_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 633,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Attached_volume.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 634,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_spec.Object",
      "description": "Converts a recursive associative list of strings to and from JSON format using Yojson. The structure represents nested key-value pairs where values can themselves be similar lists. Used to serialize and deserialize hierarchical data structures in applications requiring JSON interchange.",
      "description_length": 287,
      "index": 635,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Component_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 636,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Azure_file_persistent_volume_source.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 637,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Replication_controller_list.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 638,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map_env_source.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 639,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_template_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 640,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Ceph_fs_volume_source.Object",
      "description": "Converts a nested list of key-value pairs into a JSON object and parses JSON back into this structure. Operates on a recursive list type where each element is a string key paired with another instance of the same type. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 297,
      "index": 641,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_anti_affinity.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data exchange scenarios.",
      "description_length": 299,
      "index": 642,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Replication_controller_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 643,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Fc_volume_source.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested objects as recursive lists. Used to serialize and deserialize hierarchical data structures in JSON-based configurations.",
      "description_length": 279,
      "index": 644,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Local_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 645,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. Operates on nested lists where each element is a tuple of a string and another instance of the same structure. Used to serialize and deserialize hierarchical data such as configuration trees or structured JSON payloads.",
      "description_length": 312,
      "index": 646,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical data models.",
      "description_length": 298,
      "index": 647,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Nfs_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 648,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 649,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 650,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_quota_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 651,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Replication_controller_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 652,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Binding.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 653,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_requirements.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 654,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Quobyte_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 655,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_state.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 656,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Endpoints.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 657,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Volume_mount.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on recursive tuples representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 658,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Iscsi_persistent_volume_source.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 659,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 660,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_daemon_endpoints.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of strings and values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 269,
      "index": 661,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Local_object_reference.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data exchange scenarios.",
      "description_length": 299,
      "index": 662,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Taint.Object",
      "description": "Converts a nested associative list structure, where each entry is a string key paired with a value of the same type, to and from JSON format using Yojson. The operations enable serialization and deserialization of hierarchical data structures resembling JSON objects. This is useful for processing configuration data or structured payloads in applications requiring JSON interchange.",
      "description_length": 383,
      "index": 663,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_list.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data exchange scenarios.",
      "description_length": 299,
      "index": 664,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Volume_projection.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 665,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Git_repo_volume_source.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 666,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Component_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 667,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Volume.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 668,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Load_balancer_ingress.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 669,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Affinity.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through a list of tuples where each tuple contains a string key and a corresponding value. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 348,
      "index": 670,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_affinity.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 671,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1.Job_spec.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested associative lists where each entry is a string key paired with another similar structure. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 319,
      "index": 672,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1.Job_list.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Operates on nested associative lists structured as tuples of strings and recursive lists. Used to serialize and deserialize hierarchical data structures in JSON-based configurations or data exchanges.",
      "description_length": 308,
      "index": 673,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1.Job.Object",
      "description": "Converts a nested associative structure of strings to and from JSON format using Yojson. The module operates on a recursive list of key-value pairs where each value is another instance of the same structure. It is used to serialize and deserialize hierarchical data models into JSON representations.",
      "description_length": 299,
      "index": 674,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1.Job_status.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from a JSON representation using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data interchange scenarios.",
      "description_length": 312,
      "index": 675,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1.Job_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical data models.",
      "description_length": 298,
      "index": 676,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1beta1.Cron_job_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 677,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1beta1.Cron_job_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 678,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1beta1.Cron_job.Object",
      "description": "Converts a nested associative list structure into a JSON representation and parses JSON back into this structure. Operates on a recursive type where each element is a key-value pair with string keys and nested values. Used to serialize and deserialize hierarchical data in applications requiring JSON interchange.",
      "description_length": 313,
      "index": 679,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1beta1.Job_template_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 680,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1beta1.Cron_job_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 681,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V2alpha1.Cron_job_status.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 682,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V2alpha1.Cron_job_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 683,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V2alpha1.Cron_job.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 684,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V2alpha1.Job_template_spec.Object",
      "description": "Converts a nested list of key-value pairs into a JSON object representation and parses JSON objects back into this structure. Operates on a recursive list type where each element is a string key paired with another instance of the same type. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 320,
      "index": 685,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V2alpha1.Cron_job_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 686,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Supplemental_groups_strategy_options.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and parsing tuples. Used to serialize complex data structures for API responses or configuration files.",
      "description_length": 264,
      "index": 687,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_security_policy_spec.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 688,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_disruption_budget.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 689,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Allowed_flex_volume.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 690,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Se_linux_strategy_options.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive nesting in data exchange scenarios.",
      "description_length": 292,
      "index": 691,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_disruption_budget_spec.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 692,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Id_range.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 693,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Eviction.Object",
      "description": "Converts a nested list of key-value pairs into a JSON object representation and parses JSON back into this structure. Works with a recursive list type where each element is a string key paired with a value of the same type. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 302,
      "index": 694,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_security_policy_list.Object",
      "description": "Converts a nested list of key-value pairs into a JSON object representation and parses JSON back into this structure. Operates on a recursive list type where each element is a string key paired with another instance of the same type. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 312,
      "index": 695,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_security_policy.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical data models.",
      "description_length": 298,
      "index": 696,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Allowed_host_path.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Used to serialize structured data for storage or transmission and to parse incoming JSON into a typed representation.",
      "description_length": 306,
      "index": 697,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Fs_group_strategy_options.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 698,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Host_port_range.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 699,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_disruption_budget_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 700,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_disruption_budget_status.Object",
      "description": "Converts a recursive data structure composed of key-value pairs to and from JSON format. Operates on a type representing nested associative lists where each entry is a string key paired with another instance of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 328,
      "index": 701,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Run_as_user_strategy_options.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 702,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Controller_revision_list.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 703,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set_update_strategy.Object",
      "description": "Converts a nested list of key-value pairs into a JSON representation and parses JSON back into this structure. Works with a recursive type representing associative lists. Used to serialize and deserialize structured data in JSON format.",
      "description_length": 236,
      "index": 704,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set_spec.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 705,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 706,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 707,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on recursive tuples representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 708,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Rolling_update_deployment.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 709,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Rolling_update_stateful_set_strategy.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from a JSON representation using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to transform complex, recursive data structures into a format compatible with JSON-based data exchange.",
      "description_length": 332,
      "index": 710,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Rolling_update_daemon_set.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 711,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment_strategy.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 712,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Replica_set.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 713,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Replica_set_status.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to transform complex, recursive data structures into a JSON-compatible format for storage or communication.",
      "description_length": 345,
      "index": 714,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical data models.",
      "description_length": 298,
      "index": 715,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set_update_strategy.Object",
      "description": "Converts a nested structure of key-value pairs into a JSON representation and parses JSON back into this structure. Works with a recursive list type where each element is a string key paired with another instance of the same type. Used to serialize and deserialize hierarchical data formats such as configuration trees or structured data payloads.",
      "description_length": 347,
      "index": 716,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 717,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Controller_revision.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 718,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 719,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 720,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Scale_spec.Object",
      "description": "Converts a nested associative list of strings and values to and from JSON format. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 254,
      "index": 721,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Replica_set_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 722,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Replica_set_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 723,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment_spec.Object",
      "description": "Converts a nested list of key-value pairs to and from JSON format using Yojson. Operates on a recursive data structure representing objects as lists of strings and values. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 265,
      "index": 724,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Scale_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 725,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Scale.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 726,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Replica_set_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 727,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical data models.",
      "description_length": 298,
      "index": 728,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 729,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 730,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 731,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set_condition.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Operates on nested associative structures represented as tuples of strings and lists. Used to serialize and deserialize hierarchical data structures in JSON-based configurations.",
      "description_length": 286,
      "index": 732,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data exchange scenarios.",
      "description_length": 299,
      "index": 733,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Controller_revision_list.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle structured data in applications requiring JSON interchange, such as configuration files or API responses.",
      "description_length": 353,
      "index": 734,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set_update_strategy.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on recursive tuples representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 735,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical data models.",
      "description_length": 298,
      "index": 736,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set_status.Object",
      "description": "Converts a nested associative structure of strings to JSON and parses JSON back into the same structure. Works with a recursive list of key-value pairs where values can themselves be similar structures. Used to serialize and deserialize hierarchical data such as configuration trees or nested metadata.",
      "description_length": 302,
      "index": 737,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set_status.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data exchange scenarios.",
      "description_length": 299,
      "index": 738,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 739,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Rolling_update_deployment.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 740,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Rolling_update_stateful_set_strategy.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 741,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Rolling_update_daemon_set.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 742,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment_strategy.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical data models.",
      "description_length": 298,
      "index": 743,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Replica_set.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 744,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Replica_set_status.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data exchange scenarios.",
      "description_length": 299,
      "index": 745,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set_spec.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 746,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set_update_strategy.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 747,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through a list of tuples where each tuple contains a string key and a corresponding value. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 348,
      "index": 748,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Controller_revision.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 749,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 750,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set.Object",
      "description": "Converts a nested associative structure of strings to and from JSON format using Yojson. The module operates on a recursive list type where each element is a string-keyed pair. It is used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 276,
      "index": 751,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Replica_set_condition.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 752,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Replica_set_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 753,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 754,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Replica_set_spec.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 755,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 756,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 757,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data in applications requiring hierarchical JSON representation.",
      "description_length": 301,
      "index": 758,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set_condition.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data exchange scenarios.",
      "description_length": 299,
      "index": 759,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set_condition.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 760,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 761,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Controller_revision_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON representations using Yojson. Operates on recursive tuples where each element is a string paired with another instance of the same structure. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 283,
      "index": 762,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set_update_strategy.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 763,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 764,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_condition.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle structured data in applications requiring JSON interchange.",
      "description_length": 288,
      "index": 765,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Rolling_update_deployment.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical data models.",
      "description_length": 298,
      "index": 766,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Rolling_update_stateful_set_strategy.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 767,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_rollback.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 768,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_strategy.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 769,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 770,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 771,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Controller_revision.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 772,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_status.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 773,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Scale_spec.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested objects as recursive tuples. Used to serialize and deserialize hierarchical data structures in JSON-based configurations.",
      "description_length": 280,
      "index": 774,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 775,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Rollback_config.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 776,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Scale_status.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 777,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Scale.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 778,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 779,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set_list.Object",
      "description": "Converts a nested list of key-value pairs into a JSON object representation and parses JSON back into this structure. Operates on a recursive list type where each element is a string key paired with another instance of the same type. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 312,
      "index": 780,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set_condition.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 781,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment.Object",
      "description": "Converts a nested associative list of strings and values to and from JSON format. Operates on a recursive list structure where each element is a pair of a string key and a value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 272,
      "index": 782,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1alpha1.Initializer.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 783,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1alpha1.Rule.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 784,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1alpha1.Initializer_configuration_list.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data interchange scenarios.",
      "description_length": 302,
      "index": 785,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1alpha1.Initializer_configuration.Object",
      "description": "Converts a nested associative list structure, where each entry is a string key paired with a value list, to and from JSON format using Yojson. The functions handle recursive data by traversing the list of key-value pairs. This is useful for serializing and deserializing structured data in applications that require JSON interchange.",
      "description_length": 333,
      "index": 786,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Mutating_webhook_configuration.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle structured data in applications requiring JSON interchange, such as configuration files or API responses.",
      "description_length": 353,
      "index": 787,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Validating_webhook_configuration.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 788,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Webhook.Object",
      "description": "Converts a nested list of key-value pairs into a JSON representation and parses JSON back into this structure. Operates on a recursive type representing associative lists with string keys and nested values. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 300,
      "index": 789,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Webhook_client_config.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. Handles nested structures by recursively serializing and deserializing elements. Useful for processing structured data in applications that require JSON interchange.",
      "description_length": 273,
      "index": 790,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Mutating_webhook_configuration_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from a custom tree-like data representation.",
      "description_length": 280,
      "index": 791,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Service_reference.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 792,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Validating_webhook_configuration_list.Object",
      "description": "Converts a nested associative list of strings and values to and from JSON format. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 254,
      "index": 793,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Rule_with_operations.Object",
      "description": "Converts a recursive data structure composed of key-value pairs to and from JSON format using Yojson. The structure represents nested associative lists where each entry is a string paired with another instance of the same type. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 332,
      "index": 794,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_peer.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 795,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_ingress_rule.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 796,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_spec.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 797,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 798,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_list.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical configurations. Used to handle structured data in applications requiring JSON interchange with complex, recursive mappings.",
      "description_length": 350,
      "index": 799,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_port.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 800,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Ip_block.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 801,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_egress_rule.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 802,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Aggregation_rule.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 803,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Subject.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize hierarchical data in applications requiring JSON interchange.",
      "description_length": 274,
      "index": 804,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Role_binding.Object",
      "description": "Converts a nested associative structure of strings to and from JSON representations using Yojson. Operates on a recursive list type where each element is a string-keyed pair. Used to serialize and deserialize hierarchical data structures in JSON format.",
      "description_length": 253,
      "index": 805,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Role.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON-encoded objects with recursive fields in data exchange scenarios.",
      "description_length": 299,
      "index": 806,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Role_ref.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data structures.",
      "description_length": 276,
      "index": 807,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Cluster_role_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 808,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Role_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 809,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Cluster_role.Object",
      "description": "Converts a nested associative structure of strings and values to and from JSON format. Operates on a recursive list type where each element is a key-value pair. Used to serialize and deserialize complex data structures in JSON-based communication protocols.",
      "description_length": 257,
      "index": 810,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Cluster_role_binding.Object",
      "description": "Converts a nested associative structure of strings to and from JSON representations using Yojson. Operates on a recursive list of key-value pairs where each value is another instance of the same structure. Used to serialize and deserialize hierarchical data such as configuration trees or structured logs.",
      "description_length": 305,
      "index": 811,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Cluster_role_binding_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive type representing key-value pairs where values can themselves be associative lists. Used to serialize and deserialize structured data such as configuration trees or hierarchical metadata.",
      "description_length": 295,
      "index": 812,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Policy_rule.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 813,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Role_binding_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 814,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Aggregation_rule.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 815,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Subject.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 816,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Role_binding.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 817,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Role.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 818,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Role_ref.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 819,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Cluster_role_list.Object",
      "description": "Converts a list of key-value pairs, where each value is another list of key-value pairs, to and from JSON format using Yojson. The structure represents nested objects as recursive lists. Used to serialize and deserialize hierarchical data structures in JSON-based configurations.",
      "description_length": 279,
      "index": 820,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Role_list.Object",
      "description": "Converts a nested associative structure of strings to and from JSON format using Yojson. The module operates on a recursive list of key-value pairs where each value is another instance of the same structure. It is used to serialize and deserialize hierarchical data such as configuration trees or structured JSON payloads.",
      "description_length": 322,
      "index": 821,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Cluster_role.Object",
      "description": "Converts a recursive data structure of key-value pairs to and from JSON format using Yojson. The structure represents nested objects as lists of tuples with string keys and recursive values. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 295,
      "index": 822,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Cluster_role_binding.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested elements by allowing tuples of strings and itself. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 300,
      "index": 823,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Cluster_role_binding_list.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical configurations. Used to handle structured data in applications requiring JSON interchange with a tree-like format.",
      "description_length": 322,
      "index": 824,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Policy_rule.Object",
      "description": "Converts a recursive associative list, where each key maps to another such list, to and from a JSON representation using Yojson. The structure supports nested key-value pairs, enabling serialization of hierarchical data. Used to encode and decode complex, tree-like data structures in JSON format.",
      "description_length": 297,
      "index": 825,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Role_binding_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on recursive tuples representing key-value pairs. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 236,
      "index": 826,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Aggregation_rule.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 827,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Subject.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 828,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Role_binding.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 829,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Role.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through a list of tuples where each tuple contains a string key and a corresponding value. This is useful for serializing and deserializing hierarchical data in applications requiring JSON interchange.",
      "description_length": 354,
      "index": 830,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Role_ref.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 831,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Cluster_role_list.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursive data models.",
      "description_length": 272,
      "index": 832,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Role_list.Object",
      "description": "Converts a nested associative list structure to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists of the same type. Used to serialize and deserialize hierarchical data models in applications requiring JSON interchange.",
      "description_length": 277,
      "index": 833,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Cluster_role.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON encoding and decoding.",
      "description_length": 266,
      "index": 834,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Cluster_role_binding.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive list structure where each element is a key-value pair. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 256,
      "index": 835,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Cluster_role_binding_list.Object",
      "description": "Converts a nested list of key-value pairs to and from JSON format using Yojson. Operates on a recursive data structure where each element is a tuple of a string and another element of the same type. Used to serialize and deserialize hierarchical data structures such as configuration trees or structured JSON payloads.",
      "description_length": 318,
      "index": 836,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Policy_rule.Object",
      "description": "Converts a list of key-value pairs, where each value is another list, to and from JSON format using Yojson. The structure represents nested associative data, suitable for parsing and serializing hierarchical data. Used to handle JSON objects with recursive fields in data exchange scenarios.",
      "description_length": 291,
      "index": 837,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Role_binding_list.Object",
      "description": "Converts a recursive data structure represented as a list of key-value pairs to and from JSON format using Yojson. The structure supports nested objects through recursive tuples. Used to serialize and deserialize complex, hierarchical data in applications requiring JSON interchange.",
      "description_length": 283,
      "index": 838,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1",
      "description": "Encapsulates logic for converting nested key-value structures, where values may be lists, to and from JSON using Yojson. Primary data types include lists of tuples and JSON values, with operations for encoding and decoding. Enables structured data manipulation, such as transforming configuration maps into JSON or parsing hierarchical API responses. Supports recursive processing of complex, nested data formats for seamless data exchange.",
      "description_length": 440,
      "index": 839,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration.V1beta1",
      "description": "Handles JSON serialization and deserialization of nested associative lists, supporting recursive key-value structures for structured data exchange. The primary data type is a recursive list of string-keyed values, with operations to parse JSON into these structures and generate JSON from them. It enables efficient handling of hierarchical data, such as converting a configuration tree into a JSON string for storage or transmitting a nested settings structure from a server. Examples include parsing API responses and generating request payloads with complex, nested content.",
      "description_length": 577,
      "index": 840,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions.V1beta1",
      "description": "Provides bidirectional conversion between nested associative lists and JSON, using recursive key-value structures. Core data types include lists of string-keyed tuples with nested values, supporting complex hierarchical data. Operations enable parsing JSON into structured lists or encoding lists into JSON, useful for handling configuration trees, API payloads, or custom resource status fields. For example, it can transform a list like [(\"status\", [\"ready\"; \"true\"]); (\"metadata\", [\"name\", \"pod1\"])] into a JSON object or reconstruct the original structure from a JSON string.",
      "description_length": 579,
      "index": 841,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Api.Resource.Quantity",
      "description": "Encodes and decodes nested associative lists into JSON format, enabling structured data exchange. Processes recursive key-value pairs, supporting serialization and deserialization of complex data hierarchies. Converts a list like `[(\"a\", 1); (\"b\", [(\"c\", \"d\")])]` to `{\"a\": 1, \"b\": {\"c\": \"d\"}}` and vice versa. Facilitates data transformation in applications needing consistent JSON representation.",
      "description_length": 398,
      "index": 842,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1",
      "description": "Provides a unified mechanism for converting nested associative lists into and out of JSON format using Yojson, with support for recursive structures and hierarchical data. Core data types include recursive lists of key-value pairs, tuples, and nested lists, enabling serialization of complex configurations, API responses, and metadata. Operations allow parsing JSON into structured OCaml data, generating JSON from nested lists, and manipulating hierarchical data for storage, transmission, or processing. Examples include converting configuration trees to JSON for API exchange or parsing nested metadata from incoming requests.",
      "description_length": 630,
      "index": 843,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Version.Info.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. Operates on a recursive data structure where each element is a key-value pair with a string key and a nested value. Used to serialize and deserialize structured data in applications requiring JSON interchange.",
      "description_length": 293,
      "index": 844,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Runtime.Raw_extension.Object",
      "description": "Converts a nested associative list of strings to and from JSON format using Yojson. The structure represents key-value pairs where values can be nested lists, enabling serialization of hierarchical data. Used to parse and generate JSON from complex, recursively structured data.",
      "description_length": 278,
      "index": 845,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Util.Intstr.Int_or_string",
      "description": "Converts nested associative lists of strings to and from JSON, supporting recursive structures for hierarchical data. Provides functions to serialize and deserialize complex data models using Yojson. Key operations include parsing JSON into nested lists and converting nested lists back to JSON strings. Example uses include storing configuration trees or hierarchical datasets in JSON format and reconstructing them programmatically.",
      "description_length": 434,
      "index": 846,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_name",
      "description": "Provides functions to retrieve and watch Kubernetes namespace resources with precise control over query parameters like name, timeout, resource version, and label selectors. Operates on types such as `Uri.t` and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` to handle HTTP requests and streaming updates. Used to monitor real-time changes to namespaces or fetch filtered lists with specific constraints.",
      "description_length": 426,
      "index": 847,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces.By_namespace",
      "description": "Provides unified access to Kubernetes resources through namespace-specific queries, real-time watching, and versioned data retrieval. Operates on core types like strings, integers, `Uri.t`, and `Cohttp.Header.t`, with support for filters, pagination, and label-based selection. Enables dynamic monitoring of config maps, endpoints, events, pods, secrets, and other resources, allowing tasks such as tracking pod state changes or fetching labeled secrets. Supports event-driven updates and precise control over resource versions for efficient cluster management.",
      "description_length": 561,
      "index": 848,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Nodes.By_name",
      "description": "Provides functions to retrieve and watch Node resources by name, supporting parameters for filtering, pagination, and real-time updates. Operates on types like `Uri.t` and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` to interact with Kubernetes APIs. Used to monitor Node status changes or fetch detailed Node information with specific query constraints.",
      "description_length": 378,
      "index": 849,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Persistentvolumes.By_name",
      "description": "Provides functions to retrieve and watch resources by name, supporting parameters like timeout, resource version, and label selectors. Operates on Kubernetes API objects, including watch events and resource metadata. Used to monitor changes to persistent volumes in real-time or fetch their current state with specific filters.",
      "description_length": 327,
      "index": 850,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Bindings",
      "description": "Provides functions to retrieve a path template for binding requests and to create a binding resource using HTTP POST. Operates with types such as `Kubernetes.Definitions.Api.Core.V1.Binding.t`, `Uri.t`, and `Cohttp.Header.t`. Used to dynamically generate API endpoints and submit binding configurations in a Kubernetes context.",
      "description_length": 327,
      "index": 851,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Configmaps",
      "description": "Handles CRUD and patch operations for Kubernetes ConfigMaps through HTTP, using types like Config_map, Delete_options, and Patch. Supports namespace and name parameters to target specific resources, with customizable request configurations. Allows programmatic updates to configuration data, deletion of obsolete entries, and incremental changes via patches. Example tasks include dynamically updating application settings or removing outdated configurations.",
      "description_length": 459,
      "index": 852,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Endpoints",
      "description": "Manages Kubernetes Endpoints resources through CRUD and patch operations, handling types like `Endpoints.t`, `Delete_options.t`, and `Patch.t`. Supports namespace-specific actions and custom HTTP parameters for fine-grained control. Allows updating service endpoint configurations, deleting resources with options, and applying partial changes via patches. Enables automation of network configuration in dynamic cluster environments.",
      "description_length": 433,
      "index": 853,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Events",
      "description": "manages Kubernetes event lifecycle operations through HTTP requests, supporting retrieval, update, deletion, and partial modification of events with customizable parameters. It works with types like `Kubernetes.Definitions.Api.Core.V1.Event.t` and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Delete_options.t` to handle namespace-specific events and deletion policies. Users can export events exactly as they appear or apply garbage collection rules during deletion. Examples include updating event annotations or removing old events with specified cleanup strategies.",
      "description_length": 578,
      "index": 854,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Limitranges",
      "description": "manages Kubernetes resource limits through HTTP interactions, enabling retrieval, modification, and deletion of LimitRange objects within specified namespaces. It handles types like Limit_range, Delete_options, and Patch, supporting operations such as partial updates and graceful deletions. Users can adjust resource constraints using custom parameters like pretty and export. Examples include updating memory limits or removing ranges while preserving cluster stability.",
      "description_length": 472,
      "index": 855,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Persistentvolumeclaims",
      "description": "handles Kubernetes PersistentVolumeClaims via HTTP, supporting retrieval, update, and partial modification using types like Persistent_volume_claim.t and Patch.t. It allows fetching detailed resource states and adjusting request headers for fine-grained control. Users can modify PVC statuses or query specific claims within a namespace. Operations include pretty-printed outputs and targeted state adjustments.",
      "description_length": 411,
      "index": 856,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Pods",
      "description": "Handles Kubernetes pod lifecycle management and interaction via HTTP, supporting attach, exec, logs, port forwarding, eviction, and status updates. Operates on types such as Binding, Eviction, Pod, and Uri, with functions for path templating, stream handling, and asynchronous I/O. Executes commands in containers, retrieves logs with time-based filtering, and evicts pods from namespaces. Enables direct manipulation of pod resources through structured API calls.",
      "description_length": 464,
      "index": 857,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Podtemplates",
      "description": "Manages Kubernetes Pod_template resources through CRUD and partial update operations, handling types like Pod_template, Delete_options, and Patch. Executes HTTP requests with context-aware headers and parameters for fine-grained control over resource lifecycle. Supports exact exports, custom grace periods, and garbage collection policies. Examples include updating a pod's configuration or deleting a template with specified cleanup rules.",
      "description_length": 441,
      "index": 858,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Replicationcontrollers",
      "description": "handles Kubernetes resource scaling and status updates via HTTP, using `Scale` and `ReplicationController` types with patch operations to adjust replica counts and retrieve status information. It provides URI templates for precise API interactions, enabling actions like resizing deployments or fetching detailed controller states. Operations include structured data retrieval, updates, and modifications with custom headers. Examples include dynamically changing replica counts and querying specific controller metrics.",
      "description_length": 520,
      "index": 859,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Resourcequotas",
      "description": "Manages Kubernetes resource quotas with CRUD and partial update capabilities, utilizing API types such as Resource_quota and Patch. Performs namespace-specific operations through HTTP requests, enabling adjustments to cluster resource limits and real-time usage tracking. Users can update quota limits or retrieve the current state of a quota. Operations are tailored for precise control over resource allocation and monitoring.",
      "description_length": 428,
      "index": 860,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Secrets",
      "description": "Manages Kubernetes Secrets through HTTP operations, supporting retrieval, modification, and deletion with fine-grained control over formatting, namespaces, and deletion policies. Works with types like `Kubernetes.Definitions.Api.Core.V1.Secret.t` and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Delete_options.t` to manipulate secret data. Allows partial updates via patch operations and ensures safe deletions with specified policies. Example tasks include updating a secret's data without replacing the entire object or deleting a secret with a grace period.",
      "description_length": 570,
      "index": 861,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Serviceaccounts",
      "description": "Manages Kubernetes service accounts through HTTP interactions, supporting retrieval, modification, and deletion within specified namespaces. It handles types such as Service_account, Delete_options, and Patch to enable precise control over account lifecycle and configuration. Operations include full updates, selective patches, and customizable deletion policies. Users can dynamically adjust service account settings or remove them with fine-grained options.",
      "description_length": 460,
      "index": 862,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace.Services",
      "description": "Handles HTTP methods and Kubernetes service operations, allowing manipulation of resources via string paths and identifiers. It works with types like Service and Patch, supporting actions such as retrieving status, updating configurations, and applying patches. Users can fetch service details or modify endpoints using namespace and resource names. Examples include updating a service's endpoints or checking its current state through API calls.",
      "description_length": 446,
      "index": 863,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_name.Finalize",
      "description": "Provides functions to retrieve a path template for namespace operations and to update a namespace with optional pretty printing. Operates on strings, Kubernetes namespace objects, and HTTP-related types like URI and headers. Used to programmatically modify namespace configurations in a Kubernetes cluster.",
      "description_length": 306,
      "index": 864,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_name.Status",
      "description": "Provides functions to retrieve, replace, and update the status of a Kubernetes Namespace through HTTP requests. Operates with `string`, `Uri.t`, and Kubernetes-specific types like `Namespace.t` and `Patch.t`. Used to interact with Kubernetes API endpoints for managing namespace configurations dynamically.",
      "description_length": 306,
      "index": 865,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Nodes.By_name.Proxy",
      "description": "offers HTTP method execution for API interaction, handling paths, names, and headers to route requests through a proxy. It supports asynchronous operations with context and custom headers, enabling flexible communication with remote endpoints. Key data types include strings for paths and names, Cohttp headers, and URI endpoints. Examples include fetching data with GET, updating resources with PUT, or sending structured payloads with POST.",
      "description_length": 442,
      "index": 866,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Nodes.By_name.Status",
      "description": "Provides functions to retrieve, replace, and update the status of a Kubernetes Node through HTTP requests. Operates with `Kubernetes.Definitions.Api.Core.V1.Node.t` for data exchange and uses `Uri.t` for endpoint identification. Enables direct interaction with Kubernetes API endpoints to manage node states programmatically.",
      "description_length": 325,
      "index": 867,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Persistentvolumes.By_name.Status",
      "description": "Provides functions to retrieve, update, and partially modify the status of a Kubernetes PersistentVolume using HTTP requests. Operates on types from the Kubernetes API, including Persistent_volume and Patch. Used to interact with a Kubernetes API endpoint to manage volume states programmatically.",
      "description_length": 297,
      "index": 868,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1.Namespaces.By_namespace",
      "description": "Handles subject access reviews within a specific Kubernetes namespace by generating path templates and issuing POST requests. Operates on subject access review objects, incorporating optional formatting and contextual parameters. Supports access control checks for users or service accounts in a targeted namespace. Example: Verifying if a user has read access to resources in a given namespace.",
      "description_length": 395,
      "index": 869,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1beta1.Namespaces.By_namespace",
      "description": "Manages Kubernetes subject access reviews within a specific namespace by constructing and sending HTTP POST requests with subject access review data. It operates on the `Local_subject_access_review.t` type and uses URI templates to interact with Kubernetes APIs. The module enables checking user or group access permissions in a controlled namespace environment. Examples include validating user access to resources or auditing group permissions in a cluster.",
      "description_length": 459,
      "index": 870,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1.Storageclasses.By_name",
      "description": "Provides functions to retrieve, update, create, and delete Kubernetes StorageClass resources using HTTP requests. Operates on types such as Storage_class, Delete_options, and Patch, interacting with Kubernetes API endpoints. Supports operations like fetching a specific StorageClass, replacing its configuration, deleting it with custom policies, and applying partial updates.",
      "description_length": 376,
      "index": 871,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1.Watch.Storageclasses",
      "description": "manages Kubernetes storage class resources through retrieval and real-time watching, handling HTTP requests and event streams using types like `Uri.t` and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. It supports filtering, pagination, and versioning to refine data access. Users can fetch snapshots of storage classes with specific constraints or monitor configuration changes dynamically. Operations include querying by name, processing watch events, and managing request parameters for efficient data retrieval.",
      "description_length": 538,
      "index": 872,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1alpha1.Watch.Volumeattachments",
      "description": "Manages interactions with volume attachment resources, enabling real-time monitoring through watch operations and retrieval by name with customizable filters, pagination, and versioning. Processes OCaml types based on Kubernetes API structures, handling watch events and HTTP headers for precise control. Supports queries that limit results and track changes over time. Examples include tracking attachment status updates or fetching a specific attachment with a defined resource version.",
      "description_length": 488,
      "index": 873,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1alpha1.Volumeattachments.By_name",
      "description": "Provides functions to retrieve, replace, delete, and update Volume_attachment resources using their name. Operates on OCaml types representing Kubernetes API objects and HTTP request/response structures. Enables direct manipulation of volume attachments in a Kubernetes cluster with fine-grained control over request parameters and response formatting.",
      "description_length": 352,
      "index": 874,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1beta1.Storageclasses.By_name",
      "description": "Provides functions to retrieve, update, delete, and patch a Kubernetes StorageClass resource using HTTP requests. Operates on types such as StorageClass, DeleteOptions, and Patch, and interacts with Kubernetes API endpoints. Supports precise control over request parameters like name, pretty formatting, and deletion policies.",
      "description_length": 326,
      "index": 875,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1beta1.Watch.Storageclasses",
      "description": "Manages Kubernetes storage class resources with query, filtering, and real-time monitoring capabilities. Supports name-based retrieval, pagination, and versioned access, allowing precise control over data retrieval. Operations include watching for configuration changes and applying label-based filters to narrow results. Enables efficient interaction with storage class definitions across clusters.",
      "description_length": 399,
      "index": 876,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1beta1.Watch.Volumeattachments",
      "description": "Manages real-time monitoring and retrieval of volume attachment resources with support for filtering, pagination, and version tracking. Operates on OCaml types derived from Kubernetes API, handling watch events and HTTP configurations. Allows retrieval of specific volume attachments by name and tracking of changes over time. Enables dynamic infrastructure adjustments based on evolving volume attachment states.",
      "description_length": 413,
      "index": 877,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1beta1.Volumeattachments.By_name",
      "description": "Provides functions to retrieve, replace, delete, and update Volume_attachment resources in a Kubernetes cluster. Operates on specific types such as Volume_attachment, Delete_options, and Patch. Enables direct manipulation of storage volume attachments through HTTP requests with customizable parameters like name, pretty output, and deletion policies.",
      "description_length": 351,
      "index": 878,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Certificates.V1beta1.Certificatesigningrequests.By_name",
      "description": "Generates and submits certificate signing request approvals using Kubernetes data structures and HTTP operations. Handles path templates and status updates for Certificate_signing_request.t via PUT requests with Cohttp headers. Enables programmatic management of certificate request approvals and status changes. Can be used to automate approval workflows and update request states in a cluster.",
      "description_length": 395,
      "index": 879,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Certificates.V1beta1.Watch.Certificatesigningrequests",
      "description": "Handles real-time monitoring and retrieval of certificate signing requests with fine-grained control through parameters like name, resource_version, and timeout. Utilizes strings, integers, and custom Kubernetes-defined types to manage watch events and HTTP interactions. Supports operations such as fetching a specific request by name or tracking changes across versions. Enables consistent data access and event-driven responses in Kubernetes environments.",
      "description_length": 458,
      "index": 880,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1.Watch.Namespaces",
      "description": "Monitors Kubernetes Pods through real-time event streams using `Uri.t` for resource identification and `Watch_event.t` for tracking changes. Supports namespace-specific and label-based queries, enabling dynamic updates and version-controlled state synchronization. Users can observe Pod creation, track configuration changes, and filter events by metadata. Operations include streaming live updates, listing resources, and managing event-driven state.",
      "description_length": 451,
      "index": 881,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1.Watch.Podpresets",
      "description": "Provides functions to retrieve and watch Pod presets, including a request path template and a watch operation with parameters for filtering, pagination, and timeout. Operates on data types such as URI, Cohttp headers, and Kubernetes watch events. Used to monitor real-time changes to Pod presets in a Kubernetes cluster with customizable query parameters.",
      "description_length": 355,
      "index": 882,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1.Namespaces.By_namespace",
      "description": "Handles Kubernetes pod preset management with create, read, update, and delete operations, supporting namespace, name, and export parameters. Supports data types such as Pod_preset, Delete_options, and Patch, enabling partial updates and custom headers. Allows dynamic adjustments to pod configurations without full replacement, and facilitates controlled deletions. Examples include modifying specific pod settings, exporting configurations, and applying targeted patches.",
      "description_length": 473,
      "index": 883,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1.Watch.Events",
      "description": "Provides functions to watch and retrieve event resources from a Kubernetes API, supporting parameters for filtering, pagination, and version tracking. Operates on URI endpoints and returns event streams or lists with detailed metadata. Used to monitor real-time changes to cluster events, such as pod status updates or service modifications.",
      "description_length": 341,
      "index": 884,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1.Watch.Namespaces",
      "description": "offers real-time and historical access to Kubernetes events via namespace and name queries, with support for filtering, pagination, and continuous updates. it handles event records, namespace strings, and query parameters such as resource_version and label_selector. users can track pod status changes, filter events by labels, and retrieve paginated results. examples include monitoring deployment progress or isolating events for specific resources.",
      "description_length": 451,
      "index": 885,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1.Namespaces.By_namespace",
      "description": "manages event resources within specific Kubernetes namespaces by handling HTTP-based interactions for retrieving, modifying, and deleting events. It utilizes types such as Event, Delete_options, and Patch to perform actions like updating metadata, deleting with custom policies, or applying partial field updates. Operations are scoped to namespaces and support formatting or export options. Examples include replacing an event's content, removing an event with a grace period, or patching specific fields without full replacement.",
      "description_length": 531,
      "index": 886,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Scheduling.V1alpha1.Priorityclasses.By_name",
      "description": "Provides functions to retrieve, replace, delete, and update Priority_class resources in a Kubernetes cluster. Operates on types such as Priority_class, Delete_options, and Patch, using HTTP requests with Cohttp and Lwt. Supports actions like fetching a specific priority class, updating its configuration, or deleting it with custom grace periods and propagation policies.",
      "description_length": 372,
      "index": 887,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Scheduling.V1alpha1.Watch.Priorityclasses",
      "description": "Retrieves and monitors Kubernetes priority classes with fine-grained query controls, including filtering, pagination, and versioning. Supports real-time updates and custom selectors to manage resource data efficiently. Operations include fetching by name, applying filters, and setting retrieval limits. Examples include tracking changes to priority class configurations and querying specific subsets of resources.",
      "description_length": 414,
      "index": 888,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1.Watch.Apiservices",
      "description": "Retrieves and watches Kubernetes API resources with support for filtering, pagination, and versioning, enabling real-time monitoring and structured data fetching. Key operations include name-based resource lookup and event streaming, with metadata handling and query parameter customization. Data types include resource definitions, watch events, and query configurations. Users can track changes to specific services, paginate large result sets, and filter responses based on version or metadata criteria.",
      "description_length": 506,
      "index": 889,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1.Apiservices.By_name",
      "description": "Retrieves and updates Kubernetes API service resources using HTTP, leveraging types like Api_service.t, Uri.t, and Cohttp.Header.t. It enables programmatic manipulation of API service status through path templates and HTTP headers. Operations include fetching templates for request construction and modifying resource states. Examples include updating an API service's status or extracting path components for dynamic requests.",
      "description_length": 427,
      "index": 890,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1beta1.Watch.Apiservices",
      "description": "manages API resource interactions through retrieval and watch operations, enabling precise data fetching with filters, pagination, and version control. It handles core types such as strings, integers, and specialized structures like `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. Users can monitor real-time changes to API resources and retrieve structured data with customized query parameters. Examples include tracking updates to Kubernetes objects or fetching paginated lists of cluster resources.",
      "description_length": 524,
      "index": 891,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1beta1.Apiservices.By_name",
      "description": "Generates and manages URI templates for Kubernetes API service interactions, enabling programmatic updates with customizable parameters. It handles service objects, supports pretty-printing, and integrates context and headers for flexible request configuration. Operations include constructing URLs, sending update requests, and modifying API service statuses. Examples include updating a service's status with specific headers or formatting the response for readability.",
      "description_length": 471,
      "index": 892,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Podsecuritypolicies.By_name",
      "description": "Provides functions to retrieve, update, delete, and patch a Pod_security_policy by name, using HTTP requests with customizable parameters like pretty formatting and export settings. Operates on Kubernetes API types such as Pod_security_policy, Delete_options, and Patch. Used to manage pod security policies in a Kubernetes cluster, including updating configurations and deleting resources with fine-grained control over deletion behavior.",
      "description_length": 439,
      "index": 893,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Daemonsets",
      "description": "Provides functions to watch and retrieve DaemonSet resources with detailed filtering options. Operates on Kubernetes API structures like Watch_event and handles parameters for versioning, timeouts, and label-based selection. Used to monitor real-time changes to DaemonSet configurations in a cluster.",
      "description_length": 300,
      "index": 894,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Deployments",
      "description": "Provides functions to retrieve and watch deployment resources, including parameters for filtering, pagination, and versioning. Operates on Kubernetes API types such as `Watch_event.t` and handles HTTP requests with Cohttp. Used to monitor real-time changes to deployments or fetch limited subsets of deployment data with specific labels or versions.",
      "description_length": 349,
      "index": 895,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Ingresses",
      "description": "Provides functions to retrieve and watch Ingress resources, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes API structures like Watch_event and Uri for interacting with cluster resources. Used to monitor real-time changes to Ingress configurations and fetch structured data with precise control over query parameters.",
      "description_length": 357,
      "index": 896,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Namespaces",
      "description": "Manages Kubernetes resources such as deployments, ingresses, and replica sets with precise filtering, real-time watching, and namespace-aware queries. Operates on types like `Uri.t` and `Cohttp.Header.t`, supporting label-based selections, version tracking, and efficient data retrieval. It enables monitoring of resource state transitions, historical data access, and scalable handling of large clusters. Examples include tracking ingress configuration changes or fetching deployment revisions with specific labels.",
      "description_length": 516,
      "index": 897,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Networkpolicies",
      "description": "Provides functions to watch and list network policies with detailed parameters for filtering, pagination, and versioning. Operates on Kubernetes resource types including watch events and metadata structures. Used to monitor real-time changes to network policies in a cluster, supporting efficient retrieval of large datasets through pagination and label-based filtering.",
      "description_length": 370,
      "index": 898,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Podsecuritypolicies",
      "description": "Manages Kubernetes pod security policies through query, monitoring, and filtering capabilities. Supports named resource retrieval, real-time event streaming, and pagination to handle large or dynamic datasets. Operations include label-based filtering and selective data fetching. Enables tracking of policy changes and efficient access to policy configurations.",
      "description_length": 361,
      "index": 899,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch.Replicasets",
      "description": "Provides functions to watch and retrieve ReplicaSet resources with fine-grained control over filtering, pagination, and versioning. Operates on types like `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` and `Uri.t`, supporting parameters for labels, resource versions, and timeouts. Enables real-time monitoring of cluster state changes and efficient retrieval of large datasets through pagination and selective filtering.",
      "description_length": 443,
      "index": 900,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces.By_namespace",
      "description": "manages Kubernetes resources through targeted API interactions, supporting retrieval, modification, and partial updates for DaemonSet, Deployment, Ingress, NetworkPolicy, ReplicaSet, and Scale objects. it provides operations like patching, scaling, and status updates, using HTTP with Cohttp and Lwt for asynchronous handling. users can adjust node selectors, roll back deployments, update ingress configurations, or modify replica counts with precise control. examples include applying strategic merge patches to daemon sets or dynamically scaling services without full redeployment.",
      "description_length": 584,
      "index": 901,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Watch.Horizontalpodautoscalers",
      "description": "Provides functions to watch and retrieve horizontal pod autoscaler resources with fine-grained control over filtering, pagination, and event streaming. Operates on Kubernetes API types such as `Watch_event` and interacts with HTTP endpoints using Cohttp and Lwt for asynchronous communication. Supports real-time monitoring of cluster scaling policies and dynamic resource adjustments.",
      "description_length": 385,
      "index": 902,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Watch.Namespaces",
      "description": "Manages Kubernetes horizontal pod autoscalers with dynamic retrieval, watching, and filtering using label selectors and pagination. Supports real-time updates via watch events, HTTP customization, and versioned access to track scaling policies and resource changes. Operations include fetching current states, monitoring metric trends, and applying filters to isolate specific autoscalers. Examples include identifying autoscalers with specific labels, observing scaling events, and retrieving historical state data.",
      "description_length": 516,
      "index": 903,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Namespaces.By_namespace",
      "description": "Handles Kubernetes HorizontalPodAutoscaler resources through HTTP, enabling retrieval, replacement, and updates with operations like adjusting scaling limits and applying patches. It uses types such as HorizontalPodAutoscaler and Patch, and processes parameters like URI, namespace, and name to target specific resources. Users can modify max/min replicas, inspect scaling states, or apply configuration changes dynamically. Examples include updating scaling thresholds or monitoring autoscaler health in real time.",
      "description_length": 515,
      "index": 904,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Watch.Horizontalpodautoscalers",
      "description": "Provides functions to retrieve and watch changes to horizontal pod autoscaler resources, supporting parameters for filtering, pagination, and versioned queries. Operates on Kubernetes API structures including watch events and resource metadata. Used to monitor real-time updates to autoscaling configurations in a cluster.",
      "description_length": 322,
      "index": 905,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Watch.Namespaces",
      "description": "Handles Kubernetes horizontal pod autoscalers within namespaces, offering real-time monitoring, filtering, and query management. It processes autoscaler configurations, watch events, and HTTP parameters, supporting state tracking, resource filtering, and controlled query execution. Users can monitor scaling activity, filter by specific names, and manage long-running watch operations. Operations include event processing, query parameter handling, and real-time updates for dynamic environments.",
      "description_length": 497,
      "index": 906,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Namespaces.By_namespace",
      "description": "Handles Kubernetes cluster autoscaling by manipulating HorizontalPodAutoscaler resources via HTTP, enabling retrieval, modification, and partial updates of scaling policies. It operates on metrics-driven configurations, supporting adjustments to CPU-based or custom target metrics. Users can fetch current settings, apply incremental changes, or redefine scaling thresholds. Examples include dynamically scaling pod counts in response to load or refining metrics for more accurate autoscaling behavior.",
      "description_length": 502,
      "index": 907,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Watch.Jobs",
      "description": "Provides functions to watch and retrieve Job resources with detailed filtering and streaming capabilities. Operates on URI endpoints and returns structured event streams with metadata and resource versions. Supports real-time monitoring of job changes, pagination, and label-based selection for dynamic cluster management.",
      "description_length": 322,
      "index": 908,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Watch.Namespaces",
      "description": "Handles Kubernetes job management with fine-grained access control, supporting real-time monitoring, structured data queries, and versioned retrieval. Key data types include namespace, name, version, and labels, with operations like filtering by metadata, pagination, and watching for status changes. Users can fetch specific jobs, track historical versions, and apply dynamic query parameters. Examples include monitoring job progress, retrieving job history, and filtering jobs by custom labels.",
      "description_length": 497,
      "index": 909,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Namespaces.By_namespace",
      "description": "Handles Kubernetes Job management through HTTP interactions, supporting retrieval, modification, and partial updates using types like Job and Patch. It operates on parameters such as URI, namespace, and job name to adjust configurations or control job states. Users can apply incremental changes, such as updating environment variables or resuming paused jobs. Operations include targeted updates and status modifications within specified namespaces.",
      "description_length": 450,
      "index": 910,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Watch.Cronjobs",
      "description": "Provides functions to watch and retrieve CronJob resources with detailed query parameters for filtering, pagination, and versioning. Operates on Kubernetes API structures including watch events, labels, and resource versions. Used to monitor real-time changes to CronJob configurations in a Kubernetes cluster.",
      "description_length": 310,
      "index": 911,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Watch.Namespaces",
      "description": "Manages Kubernetes cron jobs via HTTP, allowing users to query, filter, and monitor jobs within specific namespaces. It works with Cron_job objects, offering pagination, version tracking, and real-time updates. Users can retrieve active jobs, inspect historical versions, and detect state changes. Operations include listing jobs, filtering by namespace, and accessing detailed job metadata.",
      "description_length": 391,
      "index": 912,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Namespaces.By_namespace",
      "description": "Handles Kubernetes CronJob management with direct HTTP interactions, enabling status checks, full replacements, and field-specific updates using types like Cron_job.t and Patch.t. It allows precise modifications such as changing schedules or inspecting job statuses without full resource reconstruction. Users can diagnose issues through detailed status reports or adjust configurations dynamically. Examples include updating a job's execution time or tracing failure causes via status logs.",
      "description_length": 491,
      "index": 913,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Watch.Cronjobs",
      "description": "Provides functions to watch and retrieve CronJob resources with detailed query parameters for filtering, pagination, and versioning. Operates on Kubernetes API structures including watch events, labels, and resource versions. Used to monitor real-time changes to CronJob configurations in a Kubernetes cluster.",
      "description_length": 310,
      "index": 914,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Watch.Namespaces",
      "description": "Manages Kubernetes cron jobs within a namespace through retrieval, filtering, and real-time monitoring, supporting pagination and versioning. Processes structured data types like strings, integers, and headers to query and manipulate job metadata. Filters jobs by name, status, or schedule and tracks updates to adapt to changes dynamically. Enables precise lifecycle control, such as pausing, resuming, or inspecting job execution details.",
      "description_length": 440,
      "index": 915,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Namespaces.By_namespace",
      "description": "Handles Kubernetes CronJob status through HTTP, allowing retrieval, modification, and replacement using namespace and name. Works with types like CronJob and Patch, supporting HTTP methods GET, PATCH, and PUT. Users can track job execution or adjust scheduling details dynamically. Examples include updating a job's schedule or checking its current status.",
      "description_length": 356,
      "index": 916,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Podsecuritypolicies.By_name",
      "description": "Provides functions to retrieve, replace, delete, and update Pod_security_policy resources in a Kubernetes cluster, using HTTP requests with customizable parameters like name, pretty formatting, and export settings. Operates on specific Kubernetes types such as Pod_security_policy, Delete_options, and Patch. Used for programmatic management of pod security policies, including exact exports, grace periods, and garbage collection policies.",
      "description_length": 440,
      "index": 917,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Watch.Namespaces",
      "description": "manages Kubernetes namespace-level resource interactions with real-time monitoring and version control, using `Uri.t`, `string`, and `bool` to handle API operations. It supports fetching resources by name, observing updates via label selectors, and tracking changes to Pod_disruption_budgets. Users can query active disruptions or ensure data consistency through version tracking. Operations include filtering, real-time updates, and synchronization of resource versions.",
      "description_length": 471,
      "index": 918,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Watch.Poddisruptionbudgets",
      "description": "Provides functions to retrieve and watch PodDisruptionBudget resources, supporting parameters for filtering, pagination, and version tracking. Operates on Kubernetes API structures including watch events, labels, and resource versions. Used to monitor cluster disruptions and ensure application resilience during maintenance.",
      "description_length": 325,
      "index": 919,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Watch.Podsecuritypolicies",
      "description": "Retrieves and monitors Pod_security_policy resources with fine-grained control over filtering, pagination, and event streaming. Supports operations on strings, integers, and custom types such as `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. Enables fetching policies by name or label, tracking changes in real time, and managing watch sessions with timeouts and resource versions. Examples include monitoring policy updates, querying specific subsets of policies, and handling continuous event streams.",
      "description_length": 526,
      "index": 920,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Namespaces.By_namespace",
      "description": "Handles Kubernetes PodDisruptionBudget resources with operations to retrieve, update, and patch, using types like PodDisruptionBudget and Patch to modify cluster configurations. It enables targeted adjustments, such as changing maxUnavailable values, while preserving other settings. Users can dynamically adjust cluster resilience policies or validate adherence to disruption limits. Specific use cases include fine-tuning stability thresholds or ensuring compliance with operational constraints.",
      "description_length": 497,
      "index": 921,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Controllerrevisions",
      "description": "Provides functions to watch and retrieve controller revisions, supporting parameters like resource_version, timeout, and label selectors to filter and control the data stream. Works with HTTP requests and responses using Cohttp and Lwt, handling watch events and pagination. Used to monitor real-time changes in Kubernetes controller revisions and fetch structured metadata.",
      "description_length": 374,
      "index": 922,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Daemonsets",
      "description": "Provides functions to watch and retrieve DaemonSet resources with detailed filtering options. Operates on Kubernetes API structures like Watch_event and handles parameters such as resource_version, label_selector, and timeout_seconds. Used to monitor real-time changes to DaemonSets in a cluster, supporting pagination and event streaming.",
      "description_length": 339,
      "index": 923,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Deployments",
      "description": "Provides functions to retrieve and watch deployment resources with fine-grained control over filtering, pagination, and resource versioning. Operates on Kubernetes API types such as `Watch_event.t` and interacts with HTTP endpoints using Cohttp and Lwt for asynchronous communication. Enables real-time monitoring of deployment changes and efficient retrieval of large datasets through pagination and label-based filtering.",
      "description_length": 423,
      "index": 924,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Namespaces",
      "description": "Monitors and retrieves Kubernetes resources with namespace-specific queries, supporting operations like listing controller revisions, watching daemon set changes, and tracking deployment status. Key data types include `Uri.t`, `Cohttp.Header.t`, and string-based filters, enabling versioned updates and label-based selection. It allows for real-time tracking of scaling events in stateful sets and fetching replica sets with custom pagination. Examples include filtering deployments by labels, retrieving resource versions for incremental updates, and streaming changes to replica sets.",
      "description_length": 586,
      "index": 925,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Replicasets",
      "description": "Provides functions to watch and retrieve ReplicaSet resources with fine-grained control over filtering, pagination, and versioning. Operates on types like `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` and `Uri.t` to handle streaming updates and HTTP requests. Used to monitor real-time changes to ReplicaSet configurations in a Kubernetes cluster, supporting long-running watches and efficient data retrieval.",
      "description_length": 432,
      "index": 926,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch.Statefulsets",
      "description": "Provides functions to retrieve and watch StatefulSet resources with precise control over filtering, pagination, and versioning. Operates on types like `Uri.t`, `Cohttp.Header.t`, and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` to interact with Kubernetes APIs. Enables real-time monitoring of StatefulSet changes and efficient listing with parameters like `label_selector`, `resource_version`, and `limit`.",
      "description_length": 431,
      "index": 927,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces.By_namespace",
      "description": "Provides HTTP-based management of Kubernetes workloads, including controller revisions, daemon sets, deployments, replicasets, and stateful sets. Supports CRUD operations, partial updates, and status checks using types like Controller_revision, Daemon_set, Deployment, Scale, and Patch. Enables dynamic scaling, configuration changes, and state management across cluster resources, such as adjusting replica counts or updating deployment specs. Facilitates automated deployment workflows, rollback capabilities, and real-time resource adjustments through API interactions.",
      "description_length": 572,
      "index": 928,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Controllerrevisions",
      "description": "Provides functions to watch and retrieve controller revisions, supporting parameters like resource_version, timeout_seconds, and label_selector for filtering and streaming updates. Operates on Kubernetes API structures such as Watch_event and handles HTTP requests with Cohttp and Lwt. Used to monitor changes in controller revisions in real-time, enabling reactive updates in cluster management systems.",
      "description_length": 404,
      "index": 929,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Daemonsets",
      "description": "Provides functions to watch and retrieve DaemonSet resources with detailed filtering options. Operates on Kubernetes API structures like Watch_event and handles parameters such as resource_version, label_selector, and timeout_seconds. Used to monitor real-time changes to DaemonSet configurations in a Kubernetes cluster.",
      "description_length": 321,
      "index": 930,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Deployments",
      "description": "Provides functions to retrieve and watch deployment resources with fine-grained control over filtering, pagination, and resource versioning. Operates on Kubernetes API structures such as `Watch_event.t` and interacts with HTTP endpoints using Cohttp and Lwt for asynchronous communication. Enables real-time monitoring of deployment changes and efficient retrieval of large datasets through pagination and label-based filtering.",
      "description_length": 428,
      "index": 931,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Namespaces",
      "description": "Monitors and retrieves Kubernetes resources across multiple types within a namespace, supporting real-time updates, filtering, and query-based access. Key data types include `Uri.t`, `Cohttp.Header.t`, and watch event structures, enabling interaction with API endpoints. Operations allow tracking deployment status, monitoring replica set changes, and detecting configuration updates in stateful sets. It processes event streams and supports versioned resource retrieval with pagination.",
      "description_length": 487,
      "index": 932,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Replicasets",
      "description": "Provides functions to watch and retrieve ReplicaSet resources with fine-grained control over filtering, pagination, and versioning. Operates on types like `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` and `Uri.t` to handle streaming updates and HTTP requests. Used to monitor real-time changes to ReplicaSet configurations in a Kubernetes cluster, supporting long-running watches and efficient data retrieval.",
      "description_length": 432,
      "index": 933,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch.Statefulsets",
      "description": "Provides functions to watch and retrieve stateful set resources with detailed query parameters like resource_version, label_selector, and timeout_seconds. Operates on Kubernetes API structures such as Watch_event and Uri for interacting with cluster resources. Used to monitor real-time changes to stateful sets and fetch filtered lists with pagination support.",
      "description_length": 361,
      "index": 934,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces.By_namespace",
      "description": "Manages Kubernetes resource configurations through HTTP, handling revisions, daemonized workloads, deployments, replicas, and stateful sets. It supports operations like scaling, patching, and status checks using types such as Controller_revision, Daemon_set, Deployment, ReplicaSet, and Patch. Users can dynamically adjust replicas, apply partial updates, or modify configurations without full replacements. Examples include scaling deployments during traffic surges, updating StatefulSet replicas, or patching daemonized services.",
      "description_length": 531,
      "index": 935,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch.Controllerrevisions",
      "description": "Provides functions to watch and retrieve controller revisions, supporting parameters like resource_version, timeout_seconds, and label_selector for precise data filtering. Operates on Kubernetes API structures such as Watch_event and handles HTTP requests with Cohttp_lwt_unix. Used to monitor real-time changes in controller revisions and fetch paginated results with continuation tokens.",
      "description_length": 389,
      "index": 936,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch.Deployments",
      "description": "Provides functions to retrieve and watch deployment resources, including parameters for filtering, pagination, and versioning. Operates on Kubernetes API types such as `Watch_event.t` and handles HTTP requests with custom headers and context. Used to monitor real-time changes to deployments or fetch a snapshot of deployed resources with specific constraints.",
      "description_length": 360,
      "index": 937,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch.Namespaces",
      "description": "manages Kubernetes namespaces by providing tools to retrieve, watch, and filter resources such as controllers, deployments, and stateful sets. it supports operations like versioned queries, label-based filtering, and real-time event streaming using types like `Uri.t`, `Cohttp.Header.t`, and `Watch_event.t`. users can track deployment status changes, monitor stateful set updates, and fetch paginated resource lists with custom selectors. it enables dynamic interaction with cluster resources through continuous updates and selective data retrieval.",
      "description_length": 550,
      "index": 938,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch.Statefulsets",
      "description": "Provides functions to retrieve and watch StatefulSet resources with precise control over filtering, pagination, and versioning. Operates on types like `Uri.t`, `Cohttp.Header.t`, and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` to handle HTTP requests and streaming updates. Used to monitor real-time changes to StatefulSet configurations in a Kubernetes cluster, supporting efficient, versioned data retrieval.",
      "description_length": 435,
      "index": 939,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces.By_namespace",
      "description": "Manages Kubernetes controller revisions, deployments, and stateful sets through HTTP-based operations, supporting CRUD, rollbacks, scaling, and configuration updates. Key types include Controller_revision, Deployment_rollback.t, Scale, Patch, and StatefulSet, with operations like updating configurations, rolling back deployments, and resizing stateful sets. Actions such as deleting resources with custom policies, adjusting replica counts, and applying targeted patches are directly supported. Examples include reverting to a prior deployment version, modifying resource limits, and updating specific status fields in a stateful set.",
      "description_length": 636,
      "index": 940,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiextensions.V1beta1.Watch.Customresourcedefinitions",
      "description": "Monitors and retrieves custom resource definitions through watch and get operations, using parameters such as name, timeout, and label selectors. Handles data types like strings, integers, and Cohttp headers to interface with Kubernetes APIs. Supports real-time updates, filtered queries, and paginated results for dynamic resource management. Examples include tracking changes to a specific resource or listing all resources matching a label.",
      "description_length": 443,
      "index": 941,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiextensions.V1beta1.Customresourcedefinitions.By_name",
      "description": "Provides a mechanism to construct and manage URI templates for status updates in Kubernetes custom resources. It supports HTTP PUT requests with customizable headers, context, and pretty-printed responses. Key operations include template generation, status modification, and request configuration. Example use cases include updating resource states in a controlled, structured manner within a Kubernetes environment.",
      "description_length": 416,
      "index": 942,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1alpha1.Initializerconfigurations.By_name",
      "description": "Provides functions to retrieve, update, delete, and patch a Kubernetes Initializer_configuration by name, using HTTP requests with customizable parameters like pretty printing and export settings. Operates on types such as `Initializer_configuration.t`, `Delete_options.t`, and `Patch.t` within the Kubernetes API. Used to manage dynamic admission control configurations in a Kubernetes cluster through direct API interactions.",
      "description_length": 427,
      "index": 943,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1alpha1.Watch.Initializerconfigurations",
      "description": "Monitors and retrieves resources with fine-grained control through parameters such as timeout and label selectors, enabling real-time tracking of changes. It processes URIs, HTTP headers, and Kubernetes watch events to interact with configuration data. Users can fetch specific resource versions or track updates dynamically. For example, it can detect modifications to a service's configuration or poll for status changes within a defined namespace.",
      "description_length": 450,
      "index": 944,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1beta1.Mutatingwebhookconfigurations.By_name",
      "description": "Provides functions to retrieve, update, delete, and patch a MutatingWebhookConfiguration in a Kubernetes cluster, using HTTP requests with customizable parameters like pretty formatting and export settings. Operates on specific Kubernetes API types such as MutatingWebhookConfiguration and DeleteOptions. Used to manage webhook configurations dynamically, including updating their definitions or deleting them with controlled garbage collection policies.",
      "description_length": 454,
      "index": 945,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1beta1.Validatingwebhookconfigurations.By_name",
      "description": "Provides functions to retrieve, update, delete, and patch a Validating_webhook_configuration resource in a Kubernetes cluster. Operates on specific types such as Admissionregistration.V1beta1.Validating_webhook_configuration and Apimachinery.Pkg.Apis.Meta.V1.Delete_options. Enables programmatic management of webhook configurations, including exact or exported data retrieval and controlled deletion with grace periods.",
      "description_length": 420,
      "index": 946,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1beta1.Watch.Mutatingwebhookconfigurations",
      "description": "Monitors and retrieves Kubernetes MutatingWebhookConfiguration resources with real-time updates through watch events, supporting parameters like resource version and label selectors. Handles data types such as strings, integers, and `Watch_event.t` to track changes dynamically. Allows systems to react to configuration updates as they occur. Example uses include auto-scaling adjustments and policy enforcement based on webhook changes.",
      "description_length": 437,
      "index": 947,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1beta1.Watch.Validatingwebhookconfigurations",
      "description": "Monitors and retrieves Kubernetes resources with real-time updates, supporting filters, pagination, and timeouts. Handles data types such as strings, integers, and Kubernetes API structures to manage ValidatingWebhookConfiguration objects. Allows fetching specific configurations by name or querying with label selectors. Enables dynamic tracking of changes and efficient data retrieval in distributed systems.",
      "description_length": 410,
      "index": 948,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1.Watch.Namespaces",
      "description": "Manages Kubernetes network policies with namespace-specific filtering and real-time updates, using `Uri.t` and `Cohttp.Header.t` for API communication. It provides operations for fetching, modifying, and monitoring policies, with support for name-based retrieval and change tracking. Custom logic allows dynamic configuration adjustments in response to policy updates. Examples include detecting policy changes and ensuring consistent network settings across clusters.",
      "description_length": 468,
      "index": 949,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1.Watch.Networkpolicies",
      "description": "Provides functions to watch and list network policies with detailed filtering and pagination controls. Operates on Kubernetes resource types including watch events, labels, and field selectors. Enables real-time monitoring of network policy changes with timeout, resource version, and label-based filtering.",
      "description_length": 307,
      "index": 950,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1.Namespaces.By_namespace",
      "description": "Handles Kubernetes NetworkPolicy resources with CRUD and patch operations, using parameters such as namespace and deletion grace periods. It works with types like NetworkPolicy, DeleteOptions, and Patch to enable updates, deletions, and partial modifications of network configurations. Users can adjust policy rules or remove policies with custom grace periods. Specific tasks include modifying ingress/egress rules or safely removing policies during maintenance windows.",
      "description_length": 471,
      "index": 951,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Clusterrolebindings.By_name",
      "description": "Provides functions to retrieve, update, replace, delete, and patch Cluster_role_binding resources using HTTP requests. Operates with specific Kubernetes types such as Cluster_role_binding, Delete_options, and Patch. Used to manage cluster role bindings in a Kubernetes cluster through programmatic API interactions.",
      "description_length": 315,
      "index": 952,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Clusterrolebindings",
      "description": "Manages cluster role bindings through watch and retrieval operations, enabling real-time monitoring with customizable parameters. Supports string, integer, and Kubernetes.Definitions-based types for resource manipulation. Allows filtering by name, label selectors, and version tracking. Enables dynamic response to cluster role binding updates and queries.",
      "description_length": 356,
      "index": 953,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Clusterroles",
      "description": "manages Kubernetes cluster-level access controls by enabling retrieval, watching, and filtering of cluster role resources. It supports named queries, pagination, versioning, and real-time updates, with operations tailored for Cluster_roleparameter types. Users can apply selectors to narrow results, set limits on returned data, and track changes dynamically. Examples include fetching a specific cluster role, monitoring updates, or listing roles with custom filters.",
      "description_length": 468,
      "index": 954,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Namespaces",
      "description": "Manages Kubernetes resources through name-based access, offering real-time updates, versioned state, and dynamic filtering. It handles structured data like namespaces, names, and versioned objects, supporting pagination and custom queries. Users can track role binding changes or retrieve roles with specific labels. Operations include monitoring, versioned retrieval, and label-based filtering.",
      "description_length": 395,
      "index": 955,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Rolebindings",
      "description": "Provides functions to watch and retrieve role bindings from a Kubernetes API, supporting parameters like resource version, timeout, and label selectors. Operates on data types including URI, Cohttp headers, and Kubernetes watch events. Used to monitor real-time changes to role bindings in a cluster, enabling dynamic access control updates.",
      "description_length": 341,
      "index": 956,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch.Roles",
      "description": "Provides functions to watch and list Role resources with detailed filtering and streaming capabilities. Operates on URI endpoints and returns structured watch events or errors. Supports parameters like label selectors, resource versions, and timeouts to control data retrieval and real-time updates.",
      "description_length": 299,
      "index": 957,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Namespaces.By_namespace",
      "description": "Handles role-based access control and role management in Kubernetes namespaces, offering CRUD and partial update operations for role bindings and roles. It supports types such as Role_binding, Role, Delete_options, and Patch, enabling interactions with the Kubernetes API through HTTP. Users can bind users or service accounts to roles, modify role permissions, or delete resources with specified policies. Examples include granting access to a namespace or updating a role's rules dynamically.",
      "description_length": 494,
      "index": 958,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Clusterroles.By_name",
      "description": "Provides functions to retrieve, update, replace, delete, and patch a Kubernetes ClusterRole resource using HTTP requests. Operates on specific types such as Cluster_role, Delete_options, and Patch, with support for query parameters like pretty and grace_period_seconds. Used to manage ClusterRole objects in a Kubernetes cluster through direct API interactions.",
      "description_length": 361,
      "index": 959,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Clusterrolebindings.By_name",
      "description": "Provides functions to retrieve, update, replace, delete, and patch a Kubernetes Cluster_role_binding by name, using HTTP requests with custom parameters like pretty formatting and deletion options. Operates on specific Kubernetes API types such as Cluster_role_binding and Delete_options. Used to manage cluster role bindings in a Kubernetes cluster through direct API interactions.",
      "description_length": 382,
      "index": 960,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Clusterrolebindings",
      "description": "Manages cluster role bindings through retrieval and real-time monitoring functions, accepting parameters such as watch mode, timeout, and label selectors. Operates on OCaml types like strings, integers, and Kubernetes-specific definitions. Allows users to fetch specific bindings by name or track updates across the cluster. Supports dynamic interaction with Kubernetes resources through typed operations.",
      "description_length": 405,
      "index": 961,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Clusterroles",
      "description": "manages real-time monitoring of cluster role configurations through name-based retrieval and event watching, with support for filtering, pagination, and version control. It handles string, integer, and custom types such as `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` to track changes efficiently. Operations include fetching specific cluster roles and observing updates with defined query parameters. Examples include tracking versioned changes to role definitions or limiting results to a specific subset of resources.",
      "description_length": 544,
      "index": 962,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Namespaces",
      "description": "Monitors and queries Kubernetes Role and Role_binding resources within namespaces, using watch events and HTTP to track changes in real time. Supports filtering, pagination, and versioned queries, with operations like `Watch_event` and continuation tokens for efficient resource management. Users can fetch paginated role lists, track role binding updates, or apply dynamic filters by name, namespace, or version. Enables event-driven updates and precise control over Kubernetes namespace-specific roles.",
      "description_length": 504,
      "index": 963,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Rolebindings",
      "description": "Provides functions to watch and retrieve role bindings from a Kubernetes API, supporting parameters like resource version, timeout, and label selectors. Operates on data types including URI, Cohttp headers, and Kubernetes watch events. Used to monitor real-time changes to role bindings in a cluster, enabling dynamic access control updates.",
      "description_length": 341,
      "index": 964,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch.Roles",
      "description": "Provides a function to retrieve a path template for role-related API endpoints and a function to watch for changes to a list of roles, supporting parameters like watch, timeout, resource version, and label selectors. Operates with OCaml types such as `Uri.t`, `Cohttp.Header.t`, and custom Kubernetes types like `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. Used to monitor real-time updates to role configurations in a Kubernetes cluster, enabling dynamic policy enforcement and state synchronization.",
      "description_length": 526,
      "index": 965,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Namespaces.By_namespace",
      "description": "Handles Kubernetes role and role binding management within a namespace, supporting CRUD and partial updates via HTTP with Cohttp and Lwt. Operates on types such as Role, Role_binding, Delete_options, and Patch, enabling precise control over access policies. Users can update role permissions, modify binding subjects, or delete resources with customizable options. Examples include adding new rules to a role or removing a binding with a specified grace period.",
      "description_length": 461,
      "index": 966,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Clusterroles.By_name",
      "description": "Provides functions to retrieve, replace, delete, and update Cluster_role resources using HTTP requests. Operates with specific Kubernetes types such as Cluster_role and Delete_options, and interacts with HTTP clients and headers. Enables programmatic management of cluster roles in a Kubernetes environment through direct API calls.",
      "description_length": 332,
      "index": 967,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Clusterrolebindings.By_name",
      "description": "Provides functions to retrieve, replace, delete, and update Cluster_role_binding resources using HTTP requests. Operates with specific Kubernetes types such as Cluster_role_binding and Delete_options, and interacts with HTTP URIs. Supports operations like fetching a binding by name, updating its configuration, or deleting it with custom grace periods and propagation policies.",
      "description_length": 378,
      "index": 968,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Clusterrolebindings",
      "description": "Manages real-time monitoring and retrieval of cluster role bindings in Kubernetes, supporting parameters such as watch, timeout, and label selectors. Operates on OCaml types like strings, integers, and custom types from Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event. Enables tracking of changes to cluster role bindings, allowing automated actions based on updates. Examples include detecting new bindings, updating access controls dynamically, or logging configuration changes.",
      "description_length": 497,
      "index": 969,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Clusterroles",
      "description": "Manages Kubernetes cluster-level access controls by enabling retrieval, watching, and filtering of cluster role resources. Supports operations such as fetching by name, applying label selectors, and streaming real-time updates with timeout and versioning controls. Allows pagination and targeted data retrieval from large clusters. Example tasks include monitoring role changes, querying specific roles, and synchronizing with cluster state.",
      "description_length": 441,
      "index": 970,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Namespaces",
      "description": "Manages Kubernetes Role and RoleBinding resources with query, watch, and version-aware operations. Supports filtering by namespace, name, version, and labels, enabling real-time monitoring and state retrieval. Users can fetch current configurations, track changes, and respond to updates programmatically. Operations include pagination, timeouts, and resource version control for reliable interaction with Kubernetes types.",
      "description_length": 423,
      "index": 971,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Rolebindings",
      "description": "Provides functions to watch and retrieve role bindings from a Kubernetes API, supporting parameters like resource version, label selectors, and timeouts. Operates on data types including URI, HTTP headers, and watch events from the Kubernetes API. Used to monitor real-time changes to role bindings in a cluster, enabling dynamic access control updates.",
      "description_length": 353,
      "index": 972,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch.Roles",
      "description": "Provides functions to watch and list Role resources with fine-grained control over filtering, pagination, and resource versioning. Operates on Kubernetes API types including watch events, URI endpoints, and HTTP headers. Used to monitor real-time changes to Role configurations in a cluster, supporting efficient, incremental data retrieval.",
      "description_length": 341,
      "index": 973,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Namespaces.By_namespace",
      "description": "Handles Kubernetes role-based access control by managing Role and Role_binding resources through CRUD and patch operations. It supports types such as Role, Role_binding, Delete_options, and Patch, and interacts with Kubernetes APIs using Cohttp and Lwt. Users can create, update, delete, or patch roles and role bindings within specific namespaces. Examples include defining new permissions, revoking access, or modifying existing role configurations.",
      "description_length": 451,
      "index": 974,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Clusterroles.By_name",
      "description": "Provides functions to retrieve, update, replace, delete, and patch a Kubernetes ClusterRole resource using HTTP requests. Operates on specific types such as Cluster_role, Delete_options, and Patch, and requires a URI and optional parameters like name and pretty formatting. Used to manage cluster-level role configurations in a Kubernetes cluster through direct API interactions.",
      "description_length": 379,
      "index": 975,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Local_subject_access_review",
      "description": "handles the conversion of nested associative lists into JSON format and vice versa, enabling the serialization and deserialization of hierarchical data structures. it supports recursive nesting, allowing for complex data representations to be stored and retrieved efficiently. operations include parsing JSON strings into structured data and generating JSON output from in-memory representations. this capability is essential for managing policy configurations and access control rules within a namespace.",
      "description_length": 505,
      "index": 976,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Non_resource_attributes",
      "description": "Encodes and decodes nested key-value structures into JSON, supporting recursive serialization of lists within lists. Processes data as a list of tuples, where each tuple contains a string key and a list of string values. Enables storage and transmission of complex authorization attributes by converting them to and from JSON format. Example: transforms `[(\"role\", [\"admin\"; \"user\"])` into `{\"role\": [\"admin\", \"user\"]}`.",
      "description_length": 420,
      "index": 977,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Non_resource_rule",
      "description": "Converts nested associative lists of string keys and values to and from JSON using Yojson, enabling structured data serialization and deserialization. The primary data type is a recursive key-value structure, with operations for encoding and decoding between this format and JSON. This allows for handling complex, hierarchical data in applications that require JSON-based communication. For example, it can represent and transmit configuration trees or nested policy definitions.",
      "description_length": 480,
      "index": 978,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Resource_attributes",
      "description": "Encodes and decodes nested key-value structures into JSON, supporting recursive hierarchies through lists of string-keyed tuples. Provides functions to transform data between OCaml representations and JSON format. Allows handling of complex, structured data in authorization workflows. Example: serializing a nested access control policy to JSON for API transmission.",
      "description_length": 367,
      "index": 979,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Resource_rule",
      "description": "Manages structured data through JSON serialization and deserialization, handling nested associative lists of strings. Key operations include converting between JSON and recursive list structures, enabling data persistence and communication. Functions support parsing and generating JSON from complex, hierarchical data. Examples include storing configuration settings or exchanging data between systems.",
      "description_length": 403,
      "index": 980,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Self_subject_access_review",
      "description": "handles the conversion of nested associative data structures between JSON and OCaml lists of key-value pairs, enabling serialization and deserialization of hierarchical data. it supports recursive field structures, allowing for complex data representations to be stored and retrieved. this capability is essential for processing structured data in access control decisions. for example, it can transform a JSON object representing user permissions into an OCaml list for evaluation against access rules.",
      "description_length": 503,
      "index": 981,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Self_subject_access_review_spec",
      "description": "Handles JSON serialization and deserialization of nested associative lists, ensuring structured data is accurately represented in and out of JSON format. The primary data type is a recursive list of key-value pairs, with operations for converting between this structure and JSON. This enables applications to manage complex, hierarchical data in a standardized format. For example, it can transform a list like [(\"user\", \"alice\"); (\"roles\", [(\"admin\", \"true\")])] into a valid JSON object.",
      "description_length": 488,
      "index": 982,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Self_subject_rules_review",
      "description": "Provides a mechanism to convert nested associative lists into and out of JSON format, enabling structured data handling. The primary data type is a nested list of key-value pairs, with operations for serialization and deserialization. This allows for efficient manipulation of hierarchical configurations or payloads. For example, it can transform a configuration tree into a JSON string for storage or transmission, and reconstruct it back into a usable data structure.",
      "description_length": 470,
      "index": 983,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Self_subject_rules_review_spec",
      "description": "Serializes and deserializes nested associative lists into JSON, supporting recursive structures for hierarchical data. Key operations include parsing JSON strings into nested lists and converting nested lists back into JSON format. The primary data type is a nested list of strings, with functions for bidirectional conversion. This enables handling of complex data models, such as transforming a nested configuration structure into a JSON string or reconstructing a data tree from a JSON input.",
      "description_length": 495,
      "index": 984,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Subject_access_review",
      "description": "Handles conversion of nested associative data structures between JSON and OCaml lists of key-value pairs, enabling seamless data exchange. Supports recursive field serialization and deserialization using Yojson, with operations for encoding and decoding complex, hierarchical data. Examples include parsing JSON responses from APIs and generating structured data for storage or transmission. Key types include lists of (string * t) pairs and JSON values, with functions for transforming between them.",
      "description_length": 500,
      "index": 985,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Subject_access_review_spec",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive key-value structures, enabling structured data interchange. Supports converting complex, hierarchical data between OCaml and JSON representations. Can be used to store or transmit access request configurations in a standardized format.",
      "description_length": 362,
      "index": 986,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Subject_access_review_status",
      "description": "Encodes and decodes nested associative data structures represented as lists of key-value pairs, where values may themselves be lists, using Yojson. The primary data types include lists of tuples and JSON values, with operations for serialization and deserialization. This enables handling complex, recursive data in data exchange formats. For example, it can transform a list like [(\"a\", [\"b\", \"c\"])] into a JSON object {\"a\": [\"b\", \"c\"]} and back.",
      "description_length": 447,
      "index": 987,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1.Subject_rules_review_status",
      "description": "Handles the conversion of nested key-value structures to and from JSON, enabling data serialization and deserialization. The core data type is a recursive list of string-keyed tuples, supporting complex hierarchical data. Operations include parsing JSON into this structure and generating JSON from it. This allows for efficient storage, transmission, and manipulation of structured authorization data.",
      "description_length": 402,
      "index": 988,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Local_subject_access_review",
      "description": "handles the conversion of nested associative lists to and from JSON, enabling structured data interchange in applications. it supports recursive key-value pair structures, allowing for complex data serialization and deserialization. operations include parsing JSON strings into nested lists and generating JSON output from such structures. for example, it can transform a list like [(\"a\", [(\"b\", \"c\")])] into a JSON object {\"a\": {\"b\": \"c\"}}.",
      "description_length": 441,
      "index": 989,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Non_resource_attributes",
      "description": "Encodes and decodes nested key-value structures into JSON, supporting hierarchical data representation through lists of string-keyed tuples. The primary data type is a recursive structure that can contain strings, lists, or nested tuples. This enables efficient data serialization for non-resource authorization requests, allowing for the conversion of complex configurations into JSON and back. For example, it can transform a multi-level access control policy into a JSON string for storage or transmission.",
      "description_length": 509,
      "index": 990,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Non_resource_rule",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa using Yojson. Operates on recursive lists where each element is a key-value pair, enabling structured data manipulation. Supports serialization and deserialization of complex data structures in applications requiring JSON interoperability. Examples include parsing configuration data or transmitting structured information over networks.",
      "description_length": 420,
      "index": 991,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Resource_attributes",
      "description": "Encapsulates and manipulates hierarchical key-value data structures, enabling conversion to and from JSON. Supports nested lists and arbitrary key-value pairings, facilitating data exchange in systems requiring structured attribute representation. Allows for the serialization of complex resource attribute configurations and their reconstruction from external sources. Enables efficient handling of nested authorization parameters in distributed or API-driven environments.",
      "description_length": 474,
      "index": 992,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Resource_rule",
      "description": "Handles the conversion of hierarchical string-based data structures to and from JSON, enabling serialization and deserialization of nested associative lists. Supports recursive value structures, allowing for the representation of complex, multi-level data. Operations include parsing JSON into nested lists and converting nested lists back into JSON format. Example uses include storing and retrieving configuration data or structured metadata in a portable format.",
      "description_length": 465,
      "index": 993,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Self_subject_access_review",
      "description": "handles the conversion of nested associative data structures to and from JSON, enabling seamless data interchange in applications with hierarchical needs. it supports recursive key-value pairs, where each value can itself be a similar structure, and uses Yojson for serialization and deserialization. this capability allows developers to store and retrieve complex data models, such as configuration trees or nested permissions, in a structured JSON format. for example, it can transform a multi-level access control list into a JSON string for storage or transmission.",
      "description_length": 569,
      "index": 994,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Self_subject_access_review_spec",
      "description": "Encapsulates access request details with either resource or non-resource attributes, enabling precise access control decisions. Supports nested string-based key-value structures serialized to and from JSON, allowing flexible representation of hierarchical data. Operations include parsing and generating JSON from complex, recursively nested associative lists. Example uses include storing and retrieving access policies with deep data structures or validating request parameters against nested configurations.",
      "description_length": 510,
      "index": 995,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Self_subject_rules_review",
      "description": "provides a mechanism to convert nested associative lists into and from JSON, enabling structured data interchange. It supports recursive key-value pairs and is used for serializing complex data structures. Operations include parsing JSON strings into lists and generating JSON from lists. This capability is essential for applications needing to exchange data in a standardized format.",
      "description_length": 385,
      "index": 996,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Self_subject_rules_review_spec",
      "description": "Transforms nested key-value lists into JSON objects and reconstructs them, enabling bidirectional conversion of hierarchical data. The core data type is a recursive list of string keys paired with sublists, supporting deep nesting. Operations include serialization to and parsing from JSON, allowing structured data to be stored, transmitted, and reassembled. For example, a configuration tree or nested settings can be encoded and decoded seamlessly.",
      "description_length": 451,
      "index": 997,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Subject_access_review",
      "description": "Handles serialization and deserialization of nested associative lists between JSON and OCaml's recursive key-value structure. Provides functions to convert between string-based JSON representations and structured data types. Examples include parsing user permissions from a JSON string or generating a JSON payload from a nested configuration. Supports recursive data transformations essential for data interchange in access control systems.",
      "description_length": 441,
      "index": 998,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Subject_access_review_spec",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. Supports nested key-value pairs with recursive lists, enabling structured data representation. Provides functions to convert between associative lists and JSON, facilitating data exchange in complex models. Used to process access request specifications with nested attributes.",
      "description_length": 381,
      "index": 999,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Subject_access_review_status",
      "description": "Encodes and decodes nested associative lists into JSON format, enabling structured data exchange. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. It allows converting complex data structures into JSON strings and reconstructing them programmatically. This supports applications needing to persist or transmit structured information in a standardized format.",
      "description_length": 426,
      "index": 1000,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1.Subject_rules_review_status",
      "description": "Encapsulates the outcome of authorization rule evaluations, handling incomplete results and ensuring safe permission assumptions. Supports conversion of nested string-based associative lists to and from JSON, enabling structured data serialization and deserialization. Operations include parsing JSON into hierarchical records and generating JSON from nested key-value structures. Can be used to store and retrieve authorization state in a format compatible with external systems.",
      "description_length": 480,
      "index": 1001,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1.Storage_class",
      "description": "Handles the conversion of hierarchical data structures into and out of JSON format, enabling structured data manipulation. The primary data type is a nested associative list of strings, with operations for serialization and deserialization. For example, it can transform a tree of configuration parameters into a JSON string or parse a JSON response into a nested list structure. This supports efficient data handling in dynamic provisioning scenarios.",
      "description_length": 452,
      "index": 1002,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1.Storage_class_list",
      "description": "Serializes and deserializes nested associative lists into JSON, supporting recursive structures for hierarchical data. The primary data type is a nested list of key-value pairs, with operations for converting between this structure and JSON strings. Functions allow parsing complex data from JSON and generating JSON output from structured lists. Examples include converting configuration trees or nested data models to and from JSON format.",
      "description_length": 441,
      "index": 1003,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_attachment",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange. Operates on recursive key-value pairs with string keys and nested values. Supports converting complex data structures to and from JSON format. Useful for storing or transmitting configuration-like data between systems.",
      "description_length": 329,
      "index": 1004,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_attachment_list",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format. Operates on recursive structures where each node contains a string key and a potentially nested value. Supports converting complex data hierarchies to and from JSON for data interchange. Example: transforming a multi-level configuration map into a JSON string or parsing a JSON response into a structured list.",
      "description_length": 402,
      "index": 1005,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_attachment_source",
      "description": "Handles the conversion of nested associative list structures to and from JSON, enabling serialization and deserialization of hierarchical data. The primary data type is a nested list of key-value pairs, with operations for encoding and decoding JSON. This allows for structured data manipulation, such as transforming configuration objects or representing complex data models in a JSON-compatible format.",
      "description_length": 404,
      "index": 1006,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_attachment_spec",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. It supports nested key-value pairs with recursive lists, enabling structured data representation. Operations include parsing JSON into associative lists and converting associative lists back to JSON. This allows for efficient manipulation of complex data models in applications requiring persistent or networked storage.",
      "description_length": 425,
      "index": 1007,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_attachment_status",
      "description": "Handles the serialization and deserialization of nested associative lists into and from JSON format. Uses a recursive type where keys map to values that can themselves be associative lists. Supports operations like parsing JSON strings into structured data and converting data back into JSON format. Enables efficient handling of hierarchical configurations or metadata in applications.",
      "description_length": 386,
      "index": 1008,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1.Volume_error",
      "description": "Encapsulates error handling for volume operations with structured data serialization. Supports recursive string-based associative lists converted to and from JSON using Yojson. Enables data persistence and transmission by encoding complex nested structures. Examples include saving error states to files or transmitting them over networks.",
      "description_length": 339,
      "index": 1009,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Storage_class",
      "description": "Handles the conversion of hierarchical data structures into and out of JSON format, enabling seamless serialization and deserialization of nested key-value pairs. The primary data type is a nested associative list of strings, with operations for parsing and generating JSON. This allows for efficient manipulation of complex data models, such as converting a storage class configuration into a JSON payload for API communication. Examples include serializing a storage class definition for storage in etcd or parsing incoming JSON to extract configuration parameters.",
      "description_length": 567,
      "index": 1010,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Storage_class_list",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested key-value pairs with list values. The primary data type is a nested associative list of strings, with operations for serialization and deserialization. It allows converting complex tree-like structures into JSON and reconstructing them programmatically. For example, it can transform a multi-level configuration into a JSON string and parse it back into a structured list.",
      "description_length": 451,
      "index": 1011,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_attachment",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa, supporting recursive structures for hierarchical data. Key data types include nested lists and JSON values, with operations for parsing and generating JSON. This enables seamless integration of complex data structures in configurations or API interactions. For example, it can serialize a multi-level configuration map or deserialize a nested JSON response into a structured OCaml value.",
      "description_length": 471,
      "index": 1012,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_attachment_list",
      "description": "Encodes and decodes recursive data structures as JSON, supporting nested objects via tuples. Key types include lists of key-value pairs and recursive tuples, with operations for serialization and deserialization. It enables handling of complex hierarchical data in applications needing JSON interoperability. For example, it can convert a nested configuration structure into a JSON string or parse a JSON response into a structured OCaml value.",
      "description_length": 444,
      "index": 1013,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_attachment_source",
      "description": "Volume_attachment_source manages the configuration for attaching volumes, focusing on persistent volumes with support for structured data representation. It handles conversion between nested associative lists and JSON, allowing for the serialization and deserialization of complex, hierarchical data. Operations include parsing JSON into a structured format and generating JSON from a tree-like data model. This enables precise control over volume attachment parameters, such as setting nested metadata or configuration options.",
      "description_length": 528,
      "index": 1014,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_attachment_spec",
      "description": "Encodes and decodes recursive data structures, represented as lists of key-value pairs with nested tuples, into and from JSON format. Supports hierarchical data modeling through recursive serialization and deserialization. Operations include parsing JSON strings into structured data and generating JSON output from in-memory representations. Example uses include storing configuration trees or nested metadata in a format compatible with web services.",
      "description_length": 452,
      "index": 1015,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_attachment_status",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. Provides functions to convert nested associative lists of strings into JSON and vice versa, supporting recursive nesting. Operations include parsing JSON strings into structured data and generating JSON output from in-memory representations. Example uses include storing and retrieving complex configuration data or transmitting structured information over a network.",
      "description_length": 472,
      "index": 1016,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1.Volume_error",
      "description": "Handles serialization and deserialization of nested associative lists into JSON format, enabling structured data exchange. Supports recursive key-value pairs where values may themselves be lists, allowing representation of complex data hierarchies. Converts between OCaml data structures and JSON strings using Yojson. Example: parsing a JSON string into a nested list of configuration settings or exporting a hierarchical data model to JSON.",
      "description_length": 442,
      "index": 1017,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates.V1beta1.Certificate_signing_request",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format using Yojson. The main data type is a nested associative structure represented as a map of strings to either strings or lists of the same type. Operations include converting between this structure and JSON strings, enabling tasks like saving configuration trees or parsing structured logs. For example, it can transform a nested configuration into a JSON string for storage or read a JSON-formatted log entry into a structured map for processing.",
      "description_length": 550,
      "index": 1018,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates.V1beta1.Certificate_signing_request_condition",
      "description": "Handles the conversion of nested associative lists into and out of JSON format, supporting recursive structures for complex data modeling. Key data types include nested lists and associative structures, with operations for parsing and generating JSON. This enables tasks such as serializing configuration trees or deserializing hierarchical data from external sources. Examples include converting a multi-level settings structure to JSON or reconstructing a nested data model from a JSON string.",
      "description_length": 495,
      "index": 1019,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates.V1beta1.Certificate_signing_request_list",
      "description": "Handles the serialization and deserialization of recursive, string-keyed associative lists into and from JSON format using Yojson. Represents structured data through nested lists of key-value pairs, enabling data exchange in applications requiring JSON support. Supports operations like parsing JSON strings into list structures and converting lists back to JSON strings. Example uses include storing configuration data, transmitting structured information over networks, and persisting complex in-memory data.",
      "description_length": 510,
      "index": 1020,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates.V1beta1.Certificate_signing_request_spec",
      "description": "Handles the serialization and deserialization of nested configuration data using JSON, enabling structured data exchange. Key types include lists of key-value pairs and nested associative structures, with operations for converting between OCaml and JSON formats. This allows for precise manipulation of request parameters and usage definitions during certificate signing requests. For example, it can parse a JSON-formatted list of usages into an OCaml list or generate JSON from a request's metadata.",
      "description_length": 501,
      "index": 1021,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates.V1beta1.Certificate_signing_request_status",
      "description": "Handles the serialization and deserialization of nested key-value structures into and from JSON format using Yojson. Represents objects as lists of string-keyed tuples with recursive values, enabling efficient data interchange. Supports operations like parsing JSON strings into structured data and converting structured data back to JSON. Can be used to manage complex configurations or data models that require hierarchical representation.",
      "description_length": 441,
      "index": 1022,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1.Token_review",
      "description": "Handles the conversion of nested associative lists to and from JSON, enabling structured data serialization and deserialization. The primary data type is a nested list of key-value pairs, with operations for parsing and generating JSON. This allows for efficient data exchange in systems requiring hierarchical data representation, such as parsing and reconstructing token metadata.",
      "description_length": 382,
      "index": 1023,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1.Token_review_spec",
      "description": "Encodes and decodes nested associative data structures using Yojson, handling lists of key-value pairs with recursive values. The main data type is a list of tuples representing key-value pairs, with values potentially containing nested lists. Operations include parsing JSON strings into this structure and generating JSON from it. This enables seamless data interchange for complex, hierarchical token authentication requests.",
      "description_length": 428,
      "index": 1024,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1.Token_review_status",
      "description": "Serializes and deserializes nested key-value structures into JSON, supporting recursive encoding and decoding of lists within lists. Core data types include lists of tuples and nested list structures, with operations for converting between these and JSON representations. This enables efficient handling of complex configuration data, such as mapping user permissions or storing hierarchical settings. Examples include exporting review status metadata or parsing incoming structured requests.",
      "description_length": 492,
      "index": 1025,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1.User_info",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling data persistence and transmission. The primary data type is a recursive structure of string-keyed pairs, supporting nested values. Operations include converting between JSON and structured data, allowing seamless integration with web services or configuration files. For example, it can transform a user's profile data into a JSON string for storage or send it over a network.",
      "description_length": 461,
      "index": 1026,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1beta1.Token_review",
      "description": "Serializes and deserializes nested key-value structures into JSON using Yojson, enabling storage or transmission of hierarchical data. Supports recursive conversion, allowing complex configurations to be represented and parsed accurately. Operations include parsing JSON strings into nested maps and generating JSON output from structured data. Examples include converting user token metadata into a serializable format or reconstructing configuration trees from stored data.",
      "description_length": 475,
      "index": 1027,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1beta1.Token_review_spec",
      "description": "Encodes and decodes nested associative lists into JSON using Yojson, handling recursive tuple structures. Key operations include parsing and generating JSON from structured data. Supports complex data transformations in authentication workflows. Example: converting a request's parameters into a JSON string for API transmission.",
      "description_length": 329,
      "index": 1028,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1beta1.Token_review_status",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested lists and string keys. Provides functions to transform between associative lists and JSON values, enabling structured data manipulation. Operations include parsing JSON strings into nested lists and serializing lists back to JSON. Examples include converting a review status tree into a JSON payload for API transmission or extracting status details from a received JSON response.",
      "description_length": 459,
      "index": 1029,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1beta1.User_info",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling data serialization and deserialization. Processes recursive structures with string keys and arbitrarily nested values, supporting complex data representations. Allows conversion between in-memory data and JSON strings for storage or transmission. Example: transforming a user profile with nested preferences into a JSON string for API submission.",
      "description_length": 431,
      "index": 1030,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Settings.V1alpha1.Pod_preset",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. It supports nested key-value pairs with list values, enabling structured data manipulation. Operations include parsing JSON into associative lists and converting associative lists back to JSON. This allows for efficient handling of complex, recursive data models in policy configurations.",
      "description_length": 393,
      "index": 1031,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Settings.V1alpha1.Pod_preset_list",
      "description": "Encapsulates and manages a recursive list of key-value pairs, enabling conversion between nested associative lists and JSON format. Supports serialization and deserialization of structured data using Yojson, with operations that handle nested recursion. Allows for parsing JSON strings into list structures and generating JSON output from list representations. Example uses include storing configuration settings, transmitting data over networks, or persisting complex data hierarchies.",
      "description_length": 486,
      "index": 1032,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Settings.V1alpha1.Pod_preset_spec",
      "description": "Converts nested associative lists to and from JSON, enabling serialization and deserialization of hierarchical data structures. The primary data type is a nested list of key-value pairs, with operations for parsing and generating JSON. It supports complex data models where values may contain sublists, allowing for structured data exchange. For example, it can transform a list of configuration options with nested parameters into a JSON object for API transmission.",
      "description_length": 467,
      "index": 1033,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Events.V1beta1.Event",
      "description": "Encodes and decodes hierarchical string-based data structures into and from JSON format. Supports recursive key-value pairs where values can themselves be nested structures. Enables serialization of complex, structured information for storage or transmission. Example: converting a tree of event attributes into a JSON string for logging or API exchange.",
      "description_length": 354,
      "index": 1034,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Events.V1beta1.Event_list",
      "description": "Converts nested associative lists into JSON format and vice versa, supporting recursive structures with string keys and list values. The primary data type is a nested associative list, with operations for parsing and generating JSON. It enables handling of hierarchical data, such as converting a list of events with nested metadata into a JSON string or reconstructing the structure from a JSON input.",
      "description_length": 402,
      "index": 1035,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Events.V1beta1.Event_series",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested lists and string keys. The main data type is a nested associative list, with operations for serialization and deserialization. It allows converting complex event metadata into a JSON format and reconstructing it back into OCaml structures. For example, it can represent and transmit event timelines with nested attributes like timestamps and locations.",
      "description_length": 431,
      "index": 1036,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Scheduling.V1alpha1.Priority_class",
      "description": "Encapsulates hierarchical data models with nested key-value structures, enabling conversion to and from JSON format. Supports recursive serialization and deserialization of associative lists containing integer priorities and nested elements. Operations include parsing JSON strings into structured data and generating JSON output from in-memory representations. Example tasks include storing configuration trees or priority-based hierarchies in JSON files and reconstructing them programmatically.",
      "description_length": 497,
      "index": 1037,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Scheduling.V1alpha1.Priority_class_list",
      "description": "Converts nested list-of-key-value structures to and from JSON, supporting recursive serialization and deserialization. Operates on lists of tuples and nested lists, enabling structured data exchange. Examples include exporting configuration settings or parsing API responses with hierarchical data. Provides direct manipulation of JSON-encoded priority-based data.",
      "description_length": 364,
      "index": 1038,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Allowed_flex_volume",
      "description": "Handles nested associative data through JSON serialization and deserialization using Yojson, enabling structured data exchange. Key types include lists of key-value pairs with nested lists, supporting recursive data structures. Operations allow converting between JSON and structured data formats. Examples include parsing configuration files or transmitting hierarchical data between systems.",
      "description_length": 393,
      "index": 1039,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Allowed_host_path",
      "description": "Handles the conversion of nested associative lists into JSON format, enabling the serialization and deserialization of hierarchical data structures. Key types include nested lists and associative arrays, with operations for parsing and generating JSON. This allows for structured representation of host path policies, such as converting a policy's path conditions into a JSON-compatible format. Examples include serializing a list of allowed path prefixes or parsing a policy configuration from a JSON string.",
      "description_length": 509,
      "index": 1040,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set",
      "description": "Handles serialization and deserialization of nested associative lists to and from JSON using Yojson. Key data types include nested lists and key-value pairs, with operations for converting between structured data and JSON format. Examples include parsing configuration trees from JSON and generating JSON output from in-memory data structures. Designed for applications needing to exchange hierarchical data via JSON.",
      "description_length": 417,
      "index": 1041,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set_condition",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling structured data interchange. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. This allows applications to persist or transmit complex data structures in a standardized format. For example, it can convert a configuration tree into a JSON string for storage or network transmission.",
      "description_length": 433,
      "index": 1042,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set_list",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa, using Yojson for serialization and deserialization. The primary data type is a recursive list of key-value pairs, with operations for encoding and decoding between this structure and JSON. It enables structured data to be stored, transmitted, and reconstructed in applications requiring JSON-based data exchange. For example, it can transform a list like `[(\"a\", [(\"b\", \"c\")])` into `{\"a\": {\"b\": \"c\"}}` and back.",
      "description_length": 496,
      "index": 1043,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set_spec",
      "description": "Handles the serialization and deserialization of hierarchical data structures using JSON. It supports nested key-value pairs with list values, enabling structured data to be represented and reconstructed. Operations include parsing JSON into a nested associative list and converting such structures back to JSON. This allows for efficient data exchange and manipulation of complex, recursive data formats.",
      "description_length": 405,
      "index": 1044,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set_status",
      "description": "Handles the serialization and deserialization of nested associative lists into and from JSON format using Yojson. Processes recursive key-value structures, enabling data to be stored, transmitted, or reconstructed in applications requiring structured JSON interchange. Supports operations like converting a list structure to a JSON string and parsing a JSON string back into a list. Example uses include saving daemon set configurations to a file or loading them from a network request.",
      "description_length": 486,
      "index": 1045,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Daemon_set_update_strategy",
      "description": "Serializes and deserializes hierarchical data structures represented as nested associative lists into and from JSON format. The core data type is a recursive list of key-value pairs, with operations for parsing and generating JSON. Functions handle deep nesting, allowing conversion of complex data models between OCaml and JSON. For example, it can transform a nested configuration structure into a JSON string for storage or transmission.",
      "description_length": 440,
      "index": 1046,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment",
      "description": "handles the conversion of nested associative lists to and from JSON, enabling structured data interchange. it supports recursive key-value pairs with nested lists, using Yojson for serialization and deserialization. examples include parsing configuration trees or transforming hierarchical data for API communication. operations allow bidirectional conversion of complex, nested data structures.",
      "description_length": 395,
      "index": 1047,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_condition",
      "description": "Handles conversion between nested associative data structures and JSON, enabling serialization and deserialization of hierarchical key-value pairs. Supports recursive field structures, allowing complex data to be represented and manipulated as lists of tuples. Operations include parsing JSON strings into structured lists and generating JSON output from nested data. Example uses include storing deployment configurations and exchanging structured deployment state between systems.",
      "description_length": 482,
      "index": 1048,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_list",
      "description": "Converts nested associative lists between JSON and OCaml representations, supporting hierarchical data structures. It handles string-keyed entries with value lists, enabling serialization and deserialization of complex configurations. Operations include parsing JSON strings into nested lists and generating JSON from structured data. This facilitates data exchange in applications requiring nested, key-value based payloads.",
      "description_length": 425,
      "index": 1049,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_rollback",
      "description": "Encapsulates logic for serializing and deserializing nested associative lists into JSON format using Yojson. Processes recursive key-value structures, enabling data transformation for storage or transmission. Supports bidirectional conversion between structured data and JSON representations. Can be used to persist deployment state or retrieve it in a format compatible with external systems.",
      "description_length": 393,
      "index": 1050,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_spec",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling structured data exchange. Processes recursive key-value pairs, allowing for flexible representation of hierarchical data. Supports serialization of configuration-like structures and parsing of external JSON inputs. Examples include converting deployment settings to JSON for storage or reading configuration from a JSON file.",
      "description_length": 410,
      "index": 1051,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_status",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. The main data type is a nested associative list of strings, supporting recursive nesting. Operations include converting between JSON and this structured format, enabling efficient data exchange. For example, it can transform a deeply nested configuration into a JSON string for storage or transmission.",
      "description_length": 407,
      "index": 1052,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Deployment_strategy",
      "description": "Handles serialization and deserialization of hierarchical data models using JSON. Operates on nested associative lists, converting them to and from JSON format with Yojson. Supports complex data structures where values may themselves be nested lists of key-value pairs. Enables efficient data exchange in systems requiring structured, hierarchical information.",
      "description_length": 360,
      "index": 1053,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Fs_group_strategy_options",
      "description": "Encapsulates strategies for handling grouped data through a recursive associative list structure, enabling serialization and deserialization to and from JSON. Provides functions to convert between nested lists and JSON representations, supporting complex data interchange. Key operations include parsing and generating JSON from structured key-value pairs. Examples include storing configuration settings or hierarchical data in a portable format.",
      "description_length": 447,
      "index": 1054,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Host_port_range",
      "description": "Manages host port ranges by defining start and end port values, enabling policies for pod network configurations. Supports serialization and deserialization of nested string-based associative lists to and from JSON format. Provides functions to manipulate and convert structured data for use in network policy definitions. Examples include parsing JSON configurations, validating port range boundaries, and generating JSON output for deployment.",
      "description_length": 445,
      "index": 1055,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Http_ingress_path",
      "description": "Associates URL paths with backends using regex patterns, enabling dynamic routing of incoming requests. Supports hierarchical data modeling through nested associative lists, with serialization and deserialization capabilities via Yojson. Operations include parsing JSON into structured data and converting structured data back into JSON. For example, it can process a JSON configuration defining multiple routes and their corresponding backend services.",
      "description_length": 453,
      "index": 1056,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Http_ingress_rule_value",
      "description": "Handles structured data conversion between nested associative lists and JSON, enabling seamless data interchange. Main data types include recursive key-value lists and JSON values, with operations for serialization and deserialization. For example, it can transform a list like [(\"path\", [(\"prefix\", \"/api\")])] into a JSON object {\"path\": {\"prefix\": \"/api\"}}. This allows applications to dynamically configure HTTP routing rules based on parsed JSON configurations.",
      "description_length": 465,
      "index": 1057,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Id_range",
      "description": "Id_range manages ranges of identifiers through structured data transformations. It supports parsing and generating JSON from nested associative lists, allowing for the serialization and deserialization of hierarchical key-value structures. Operations include converting between JSON and OCaml data, handling recursive nesting, and preserving string-based keys. This enables efficient storage and exchange of complex data configurations within defined identifier boundaries.",
      "description_length": 473,
      "index": 1058,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Provides functions to convert between structured data and JSON representations, supporting recursive key-value pairs with string keys. Enables efficient data interchange in applications requiring JSON-based configuration or storage. For example, it can transform a complex routing rule structure into a JSON document for external configuration or API communication.",
      "description_length": 470,
      "index": 1059,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_backend",
      "description": "Handles the conversion of nested associative data structures between OCaml lists and JSON format using Yojson, enabling seamless data exchange. The main data type is a list of key-value pairs, where values can themselves be lists, allowing for recursive nesting. Operations include parsing JSON into this structure and serializing the structure back into JSON. This enables efficient handling of complex, hierarchical data in service endpoints.",
      "description_length": 444,
      "index": 1060,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_list",
      "description": "Converts recursive key-value list structures to and from JSON, supporting nested objects via recursive tuples. Handles serialization and deserialization of hierarchical data, enabling seamless JSON interchange. Operations include parsing JSON into structured lists and generating JSON from nested tuples. Examples include converting configuration trees or nested data models to and from JSON format.",
      "description_length": 399,
      "index": 1061,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_rule",
      "description": "Encodes and decodes hierarchical data structures into and from JSON, supporting nested key-value pairs through recursive serialization. Provides functions to transform configuration trees into JSON strings and parse JSON back into structured data. Operations include reading, writing, and manipulating nested mappings for use in routing configurations. Example: Convert a host-to-backend mapping into a JSON representation for external configuration files.",
      "description_length": 456,
      "index": 1062,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_spec",
      "description": "Encodes and decodes nested associative lists as JSON using Yojson, enabling seamless data transformation between structured in-memory representations and JSON format. The primary data type is a recursive key-value structure, with operations for serialization and deserialization. It allows converting a deeply nested configuration into a JSON string or parsing a JSON document back into a structured format. This supports applications needing to store, transmit, or manipulate hierarchical data in a standardized way.",
      "description_length": 517,
      "index": 1063,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_status",
      "description": "Converts between nested associative lists and JSON, enabling structured data serialization and deserialization. The core type represents key-value pairs with nested list values, supporting recursive data structures. Operations include encoding a list of key-value pairs into a JSON string and decoding a JSON string back into the original structure. This allows seamless data exchange between OCaml applications and JSON-based systems.",
      "description_length": 435,
      "index": 1064,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_tls",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested objects through recursive tuples. Key operations include parsing and generating JSON from lists of key-value pairs. This enables seamless data transformation for secure communication protocols. Examples include serializing configuration settings or parsing encrypted payload headers.",
      "description_length": 362,
      "index": 1065,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Ip_block",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange. Supports recursive key-value pairs with list values, facilitating complex data modeling. Can parse a JSON structure like `{\"a\": [{\"b\": \"c\"}]}` into a nested list or convert such a structure back to JSON. Used to manage network policy configurations involving CIDR blocks and exclusion rules.",
      "description_length": 402,
      "index": 1066,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy",
      "description": "Serializes and deserializes hierarchical data models using JSON, supporting nested key-value structures. The main data type is a nested associative list, with operations for converting between this structure and JSON format. This enables efficient handling of complex, nested data in network policy configurations. For example, it allows parsing a JSON representation of a policy's rules into a structured OCaml type for further processing.",
      "description_length": 440,
      "index": 1067,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_egress_rule",
      "description": "Handles serialization and deserialization of hierarchical data structures, particularly lists of key-value pairs with nested lists, using Yojson. Supports converting between JSON and OCaml associative lists, enabling structured data manipulation. Allows for flexible representation of network policy egress rules with port and destination specifications. Enables configuration management and data exchange in systems requiring nested data modeling.",
      "description_length": 448,
      "index": 1068,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_ingress_rule",
      "description": "Provides JSON serialization and deserialization for nested associative lists, enabling structured data interchange. Operates on recursive key-value pairs, supporting conversion between OCaml structures and JSON format. Allows for precise manipulation of network policy ingress rules by encoding and decoding complex configurations. Example uses include storing rule definitions in files or transmitting them over networks.",
      "description_length": 422,
      "index": 1069,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_list",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive list structures where each element is a key-value pair, enabling structured data interchange. Supports converting complex, nested data into JSON and reconstructing it back into OCaml's list format. Useful for applications needing to store or transmit network policy configurations in a portable format.",
      "description_length": 429,
      "index": 1070,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_peer",
      "description": "Handles conversion of nested associative data structures between JSON and OCaml lists of key-value pairs, using Yojson for serialization and deserialization. The primary data type is a list of tuples, where each tuple contains a key and a list of values, enabling representation of complex, hierarchical data. This allows for parsing and generating JSON with recursive fields, such as representing network policy configurations with multiple peer definitions. Examples include converting a JSON object with nested arrays into an OCaml list structure and vice versa.",
      "description_length": 565,
      "index": 1071,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_port",
      "description": "Handles the conversion of nested associative lists into and out of JSON format using Yojson. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. It enables structured data to be stored or transmitted in JSON, allowing for easy integration with systems that rely on this format. For example, it can transform a list like [(\"a\", \"b\"); (\"c\", [\"d\", \"e\"])] into a corresponding JSON object.",
      "description_length": 450,
      "index": 1072,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Network_policy_spec",
      "description": "Handles serialization and deserialization of nested associative lists into and from JSON format using Yojson. Operates on recursive key-value structures, enabling conversion between hierarchical data and JSON representations. Supports complex configurations by preserving nested relationships during encoding and decoding. Example: converting a policy rule structure with multiple conditions into a JSON string for storage or transmission.",
      "description_length": 439,
      "index": 1073,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Pod_security_policy",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. Utilizes a recursive key-value pair type to represent nested configurations, enabling structured data manipulation. Supports operations like encoding complex settings into JSON and decoding JSON back into nested associative lists. Can be used to manage and transform security policy configurations in a flexible, hierarchical manner.",
      "description_length": 438,
      "index": 1074,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Pod_security_policy_list",
      "description": "Provides JSON serialization and deserialization for nested associative lists representing pod security policies. Supports recursive key-value structures using Yojson for data interchange. Allows conversion between structured data and JSON format for storage or transmission. Enables efficient handling of policy configurations in applications requiring flexible data representation.",
      "description_length": 382,
      "index": 1075,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Pod_security_policy_spec",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format, enabling structured data manipulation. Key operations include encoding and decoding recursive key-value pairs, supporting complex data hierarchies. Examples include converting a policy configuration into a JSON string for storage or parsing a JSON document into a structured list for processing. This facilitates efficient data handling in systems requiring flexible, nested data representation.",
      "description_length": 487,
      "index": 1076,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Replica_set",
      "description": "Handles serialization and deserialization of nested associative lists to and from JSON, enabling structured data interchange. Key data types include nested lists and key-value pairs, with operations for converting between JSON and OCaml structures. This allows applications to manage hierarchical data models efficiently. For example, it can transform a complex configuration into a JSON string for storage or transmission.",
      "description_length": 423,
      "index": 1077,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Replica_set_condition",
      "description": "Encapsulates the state of a replica set through structured data manipulation. Supports conversion between nested associative lists and JSON, enabling data persistence and transmission. Key operations include parsing and generating JSON from recursive key-value structures. Example tasks include saving configuration states or exchanging data between system components.",
      "description_length": 368,
      "index": 1078,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Replica_set_list",
      "description": "Encodes and decodes nested associative lists into JSON, supporting recursive structures with key-value pairs. Processes string-based data hierarchies for data interchange between systems. Parses a JSON object into a list of pairs, and generates JSON from a list structure. Enables seamless conversion between structured data and JSON format for storage or transmission.",
      "description_length": 369,
      "index": 1079,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Replica_set_spec",
      "description": "Handles the conversion of nested associative lists into and out of JSON format using Yojson. Operates on recursive list structures where each element is a key-value pair, enabling structured data serialization and deserialization. Supports complex data transformations in applications needing JSON-based data interchange. For example, it can convert a list like [(\"a\", [(\"b\", \"c\")])] to a JSON object and back.",
      "description_length": 410,
      "index": 1080,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Replica_set_status",
      "description": "Encodes and decodes hierarchical data structures into and from JSON using Yojson, supporting nested key-value pairs. The primary data type is a nested associative list of strings, with operations for serialization and deserialization. This enables handling of complex, recursive data models in distributed systems. For example, it can convert a replica set's configuration tree into a JSON string for storage or transmission.",
      "description_length": 425,
      "index": 1081,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Rollback_config",
      "description": "Serializes and deserializes nested associative structures, represented as lists of string-keyed pairs, to and from JSON using Yojson. The module supports hierarchical data where each value can itself be a nested structure, enabling manipulation of tree-like configurations. Operations include converting between OCaml lists and JSON representations, preserving depth and key relationships. Example uses include parsing configuration files or transmitting structured data across systems.",
      "description_length": 486,
      "index": 1082,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Rolling_update_daemon_set",
      "description": "Handles recursive serialization and deserialization of nested string-based data structures into and from JSON format. Operates on a tree-like list of key-value pairs, enabling manipulation of hierarchical configurations. Supports converting complex, nested data into JSON and reconstructing it back into the original structure. Useful for managing structured updates in daemon set configurations through precise data transformation.",
      "description_length": 432,
      "index": 1083,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Rolling_update_deployment",
      "description": "Handles serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive key-value structures, enabling structured data to be stored and retrieved in applications. Supports conversion between complex data representations and JSON for interoperability. Examples include saving configuration states or exchanging data between systems.",
      "description_length": 382,
      "index": 1084,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Run_as_user_strategy_options",
      "description": "Encapsulates strategies for running user-specific operations with configurable options, supporting serialization and deserialization of nested data structures. Processes recursive key-value pairs as JSON, enabling structured data exchange between systems. Allows conversion of complex, nested associative lists into JSON format and vice versa. Facilitates data persistence, configuration storage, and inter-process communication with user-specific settings.",
      "description_length": 457,
      "index": 1085,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Scale",
      "description": "Encodes and decodes nested associative lists into JSON, supporting recursive structures where values may also be lists. Processes hierarchical data like configuration trees by converting between structured in-memory representations and JSON format. Allows for seamless serialization and deserialization of complex, nested data. Example: transforming a multi-level settings structure into a JSON string for storage or transmission.",
      "description_length": 430,
      "index": 1086,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Scale_spec",
      "description": "Handles the conversion of nested associative data structures between JSON and OCaml lists of key-value pairs, enabling seamless data exchange. The primary data type is a list of tuples with string keys and nested list values, supporting recursive serialization and deserialization. Operations include parsing JSON strings into structured lists and generating JSON output from in-memory data. This allows for efficient manipulation of hierarchical data, such as configuration settings or nested metadata.",
      "description_length": 503,
      "index": 1087,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Scale_status",
      "description": "Encodes and decodes nested associative lists into JSON format, enabling data serialization and deserialization. Supports recursive key-value structures represented as lists, with operations for converting between OCaml and JSON representations. Examples include parsing configuration data from JSON strings and generating JSON output from in-memory lists. Provides direct manipulation of structured data in applications requiring interoperability with JSON-based systems.",
      "description_length": 471,
      "index": 1088,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Se_linux_strategy_options",
      "description": "Encodes and decodes nested associative lists into JSON, enabling structured data exchange. The primary data type is a nested list of key-value pairs, with operations for serialization and deserialization. It supports complex data models by preserving hierarchy during conversion. For example, it can transform a configuration tree into a JSON string or parse a JSON response into a structured list.",
      "description_length": 398,
      "index": 1089,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1.Supplemental_groups_strategy_options",
      "description": "Encapsulates hierarchical data structures through recursive type t, enabling conversion between nested associative lists and JSON formats. Supports serialization and deserialization operations, allowing structured data to be stored or transmitted as JSON. Provides functions to manipulate and inspect key-value pairs at multiple levels of nesting. Example tasks include parsing a JSON configuration file or generating a JSON response from a nested data structure.",
      "description_length": 463,
      "index": 1090,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Cross_version_object_reference",
      "description": "Converts nested associative lists into JSON format and vice versa using Yojson, enabling structured data serialization and deserialization. Operates on recursive lists where each element is a key-value pair, allowing for complex data representation. Supports bidirectional conversion between in-memory data structures and JSON strings. Can be used to store configuration data, transmit structured information over networks, or persist application state.",
      "description_length": 453,
      "index": 1091,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.External_metric_source",
      "description": "Handles conversion of nested key-value structures to and from JSON, enabling serialization of complex data models for external metric integration. Supports recursive serialization of tuples and lists, facilitating structured data exchange. Can transform queue length or QPS data into JSON format for external monitoring systems. Parses incoming JSON to extract metrics for scaling decisions based on external sources.",
      "description_length": 417,
      "index": 1092,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.External_metric_status",
      "description": "Encodes and decodes nested associative lists into JSON, enabling structured data exchange. The primary data type is a recursive list of key-value pairs, with functions for serialization and deserialization. It allows converting complex data structures into JSON strings and reconstructing them programmatically. This supports scenarios where hierarchical data needs to be stored, transmitted, or parsed in external systems.",
      "description_length": 423,
      "index": 1093,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Horizontal_pod_autoscaler",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data manipulation. Supports recursive key-value pairs represented as lists, with operations for converting between OCaml and JSON formats. Allows for flexible data handling in scenarios requiring dynamic configuration exchange. Example: parsing and generating JSON configurations for autoscaling policies.",
      "description_length": 401,
      "index": 1094,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Horizontal_pod_autoscaler_condition",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested lists and string keys. The module handles recursive data models by converting them to and from associative lists. It enables parsing of complex configurations and generation of structured JSON outputs. Examples include serializing autoscaler states with nested metrics and deserializing configuration files into accessible data formats.",
      "description_length": 415,
      "index": 1095,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Horizontal_pod_autoscaler_list",
      "description": "Handles JSON serialization and deserialization of nested associative lists representing structured data. Supports recursive key-value pair structures, enabling conversion between OCaml and JSON formats. Allows for flexible data manipulation in applications requiring structured data interchange. Examples include parsing configuration files or transmitting data over networks in a standardized format.",
      "description_length": 401,
      "index": 1096,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Horizontal_pod_autoscaler_spec",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON. Operates on a nested key-value type where values may contain lists of the same structure. Enables conversion between structured data and JSON, allowing for easy storage, transmission, and reconstruction of complex configurations. For example, it can transform a nested configuration into a JSON string and later parse that string back into the original structure.",
      "description_length": 461,
      "index": 1097,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Horizontal_pod_autoscaler_status",
      "description": "Serializes and deserializes hierarchical key-value data structures into JSON using Yojson, enabling structured data exchange. The primary data type is a recursive association list, with operations for converting between this structure and JSON representations. This allows for handling nested configurations or metadata in applications that require JSON-based data persistence or communication. For example, it can manage complex state information from a Kubernetes autoscaler, preserving its hierarchical nature during storage or transmission.",
      "description_length": 544,
      "index": 1098,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Metric_spec",
      "description": "handles the conversion of nested associative lists to and from JSON, enabling the serialization and deserialization of hierarchical data structures. it supports recursive nesting, allowing for complex data representations to be encoded and decoded efficiently. key types include nested lists of strings and JSON values, with operations for parsing and generating JSON. examples include converting a multi-level configuration structure to JSON or reconstructing a nested data map from a JSON string.",
      "description_length": 498,
      "index": 1099,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Metric_status",
      "description": "Encapsulates and manipulates structured metric data through JSON serialization and deserialization. Handles recursive key-value pairs represented as nested associative lists, enabling conversion between in-memory structures and JSON format. Supports reading and writing complex metric states for storage or transmission. Example uses include saving metric configurations to files or parsing incoming JSON data for processing.",
      "description_length": 425,
      "index": 1100,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Object_metric_source",
      "description": "Handles the serialization and deserialization of hierarchical key-value data structures into and from JSON format. Utilizes nested associative lists to represent complex, nested data models, enabling structured data exchange. Supports operations such as converting between JSON and OCaml data types, allowing for flexible manipulation of metric-related configurations. For example, it can transform a nested list of object metrics into a JSON string for storage or transmission.",
      "description_length": 478,
      "index": 1101,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Object_metric_status",
      "description": "Handles the conversion of hierarchical string-based data structures to and from JSON, enabling seamless serialization and deserialization of nested key-value pairs. Supports recursive nesting, allowing representation of complex metric data within Kubernetes objects. Operations include parsing JSON into structured lists and converting structured lists back into JSON format. For example, it can transform a metric like \"hits_per_second\" into a JSON object for storage or transmission.",
      "description_length": 485,
      "index": 1102,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Pods_metric_source",
      "description": "Processes hierarchical data by converting nested key-value pairs into JSON and back, using a recursive associative list structure. Supports operations like serialization, deserialization, and traversal of nested data. Can extract and aggregate metrics from structured data, such as averaging pod-specific values for scaling decisions. Enables precise manipulation of complex metric hierarchies in a scalable system.",
      "description_length": 415,
      "index": 1103,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Pods_metric_status",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format, enabling structured data interchange. The core data type is a recursive list of key-value pairs, with operations for converting between this structure and JSON. Functions allow parsing JSON into nested lists and generating JSON from structured data. This enables efficient data handling in systems that require dynamic metric representation and exchange.",
      "description_length": 446,
      "index": 1104,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Resource_metric_source",
      "description": "Handles the conversion of hierarchical string-based data structures to and from JSON, enabling the serialization and deserialization of nested key-value pairs. This supports complex data models used in resource metric configurations, such as specifying CPU or memory thresholds with nested parameters. Operations include parsing JSON into a structured format and generating JSON from in-memory representations. Examples include converting a metric configuration with nested resource limits into a JSON payload for API communication or extracting target values from a serialized metric definition.",
      "description_length": 596,
      "index": 1105,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1.Resource_metric_status",
      "description": "Handles the conversion of hierarchical resource metric data between JSON and OCaml structures, enabling seamless data exchange. It supports nested key-value pairs with recursive lists, allowing for detailed representation of Kubernetes resource metrics. This capability is essential for processing and analyzing metrics like CPU and memory usage across pods. Examples include parsing JSON responses from Kubernetes APIs and serializing custom metric configurations.",
      "description_length": 465,
      "index": 1106,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Cross_version_object_reference",
      "description": "Encodes and decodes recursive data structures, represented as lists of key-value pairs, into and from JSON using Yojson, supporting nested objects via recursive tuples. The primary data types include lists of key-value pairs and recursive tuples, with operations for serialization and deserialization. This enables handling of complex, hierarchical data in applications needing JSON-based data interchange. For example, it can convert a nested configuration structure into a JSON string or parse a JSON response into a structured OCaml representation.",
      "description_length": 551,
      "index": 1107,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Horizontal_pod_autoscaler",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON, using nested lists of key-value pairs. Supports tuples of strings and recursive elements, enabling structured data representation. Operations include parsing JSON into nested lists and converting these back into JSON format. Useful for managing configuration data that requires deep nesting, such as pod autoscaling policies.",
      "description_length": 423,
      "index": 1108,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Horizontal_pod_autoscaler_list",
      "description": "Provides JSON serialization and deserialization for nested associative lists, enabling structured data interchange. Operates on recursive key-value pairs, supporting conversion between OCaml and JSON formats. Examples include parsing configuration data from JSON strings and generating JSON output from complex nested structures. Facilitates data handling in applications requiring dynamic, hierarchical data representation.",
      "description_length": 424,
      "index": 1109,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Horizontal_pod_autoscaler_spec",
      "description": "Serializes and deserializes hierarchical configuration data using JSON, supporting nested key-value structures. Operates on lists of pairs, where values can themselves be lists of pairs, enabling representation of complex configurations. Provides functions to convert between OCaml data structures and JSON format. Examples include exporting autoscaler settings for API communication or persisting configuration trees in a structured format.",
      "description_length": 441,
      "index": 1110,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Horizontal_pod_autoscaler_status",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. Utilizes recursive key-value pairs to represent complex nested information, enabling structured data exchange. Supports parsing and generating JSON for models with deep nesting and variable types. Examples include converting configuration trees or status reports into JSON for API communication or storage.",
      "description_length": 411,
      "index": 1111,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Scale",
      "description": "Encodes and decodes nested associative data structures using JSON, enabling seamless data exchange with recursive field support. Key types include lists of key-value pairs and nested lists, with operations for serialization and deserialization. This allows parsing complex JSON objects into OCaml structures and reconstructing JSON from in-memory data. For example, it can transform a JSON object representing a configuration with nested parameters into a typed OCaml structure and vice versa.",
      "description_length": 493,
      "index": 1112,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Scale_spec",
      "description": "Encodes and decodes deeply nested associative lists using JSON, enabling structured data exchange. The core data type is a recursive key-value structure where each value can itself be a similar structure. Operations include parsing JSON strings into this format and generating JSON from the data. This allows for flexible representation and manipulation of hierarchical data, such as configuration trees or nested metadata.",
      "description_length": 423,
      "index": 1113,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1.Scale_status",
      "description": "Handles the conversion of nested associative lists into and out of JSON format, enabling structured data interchange. The core data type is a recursive key-value structure with string keys and nested values. It supports serialization and deserialization, allowing for the storage and retrieval of complex data hierarchies. For example, it can transform a multi-level configuration map into a JSON string or parse a JSON response into a nested OCaml structure.",
      "description_length": 459,
      "index": 1114,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Affinity",
      "description": "Converts nested recursive data structures between JSON and list-of-pair representations using Yojson, enabling seamless serialization and deserialization of hierarchical data. Key types include lists of string-value pairs and JSON values, with operations for encoding and decoding. This allows applications to store and retrieve complex data models in JSON format. For example, a configuration tree can be saved as JSON and later reconstructed as a nested list structure.",
      "description_length": 471,
      "index": 1115,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Attached_volume",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa, supporting recursive structures for hierarchical data. Key data types include nested lists and JSON values, with operations for parsing and generating JSON. This enables tasks such as serializing configuration trees or deserializing complex data structures from external sources. Examples include converting a multi-level settings map to JSON or reconstructing a nested data structure from a JSON string.",
      "description_length": 488,
      "index": 1116,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Aws_elastic_block_store_volume_source",
      "description": "Handles the serialization and deserialization of structured data using JSON format via Yojson, enabling data exchange in applications. Operates on recursive key-value pairs, allowing for complex data transformations. Supports converting nested associative lists into JSON and vice versa. Useful for managing configuration or state information that needs to be stored or transmitted in a standardized format.",
      "description_length": 407,
      "index": 1117,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Azure_disk_volume_source",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format, enabling structured data exchange. Operates on recursive key-value pairs, supporting complex data transformations. Examples include converting configuration maps to JSON for API calls or parsing incoming data structures. Provides direct manipulation of nested lists as first-class values.",
      "description_length": 380,
      "index": 1118,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Azure_file_persistent_volume_source",
      "description": "Handles conversion of nested associative data structures between JSON and OCaml lists of key-value pairs, enabling structured data exchange. Supports recursive field parsing and serialization using Yojson, allowing for complex data manipulation. Can parse Azure File Service configurations and generate valid JSON representations for use in cloud infrastructure setups. Enables seamless integration of hierarchical data within pod configurations and host mounts.",
      "description_length": 462,
      "index": 1119,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Azure_file_volume_source",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format using Yojson. It supports nested key-value pairs, allowing for the representation of complex data within Azure File Service configurations. This enables precise control over how data is structured and transferred between systems. For example, it can convert a nested configuration list into a JSON string for storage or transmission.",
      "description_length": 437,
      "index": 1120,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Binding",
      "description": "Handles the conversion of nested associative lists to and from JSON, enabling structured data serialization and deserialization. Operates on recursive key-value pairs, supporting complex data representations. Examples include parsing configuration maps or exporting pod metadata in JSON format. The core data type is a nested list of strings, with functions for encoding and decoding.",
      "description_length": 384,
      "index": 1121,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Capabilities",
      "description": "Handles serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive key-value structures, enabling structured data manipulation in applications requiring JSON interchange. Provides functions to convert between OCaml lists and JSON representations. Examples include parsing configuration data or transmitting structured information over network protocols.",
      "description_length": 409,
      "index": 1122,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Ceph_fs_persistent_volume_source",
      "description": "Provides a mechanism for serializing and deserializing nested associative lists into JSON format, enabling structured data interchange. The core data type is a recursive list of key-value pairs, with operations for converting between this structure and JSON. This allows applications to persist and retrieve complex data configurations using CephFS volumes. For example, it can store and load pod-specific mount parameters or configuration settings.",
      "description_length": 449,
      "index": 1123,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Ceph_fs_volume_source",
      "description": "Manages hierarchical data serialization and deserialization using a recursive list structure, enabling structured data to be represented and parsed as JSON. Key operations include converting between nested key-value pairs and JSON objects, supporting deep nesting for complex configurations. This allows for dynamic configuration handling in CephFS volume setups. Examples include storing mount options, metadata, or access control settings in a structured, serializable format.",
      "description_length": 478,
      "index": 1124,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Cinder_volume_source",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format, enabling structured data interchange. Provides functions to convert between recursive key-value pairs and JSON representations. This capability supports the configuration and management of Cinder volume resources by allowing complex data structures to be stored and retrieved efficiently. For example, it can encode volume metadata or access policies for use in OpenStack interactions.",
      "description_length": 477,
      "index": 1125,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Client_ip_config",
      "description": "Handles the serialization and deserialization of nested associative list structures into and from JSON format using Yojson. The primary data type is a recursive key-value structure, with operations for converting between JSON and OCaml representations. This enables efficient handling of hierarchical session affinity configurations, such as parsing a JSON document containing client IP rules or generating JSON output from a structured OCaml value.",
      "description_length": 449,
      "index": 1126,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Component_condition",
      "description": "Encodes and decodes nested associative lists of strings into and from JSON format using Yojson. Processes recursive key-value structures, enabling data serialization and deserialization. Supports operations like parsing JSON strings into lists and converting lists back to JSON strings. Useful for applications needing to store or transmit structured data in a lightweight, human-readable format.",
      "description_length": 396,
      "index": 1127,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Component_status",
      "description": "Serializes and deserializes hierarchical data structures into and from JSON using Yojson, supporting nested key-value pairs. The main data type is a recursive associative list of strings, with operations for converting between this structure and JSON format. This enables handling of complex, nested data models in cluster validation contexts, such as parsing configuration trees or generating status reports.",
      "description_length": 409,
      "index": 1128,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Component_status_list",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, handling recursive structures with key-value pairs. Provides functions to transform structured data between in-memory representations and JSON strings. Supports serialization of component status information for storage or transmission. Examples include converting a list of condition statuses to a JSON string for API delivery or parsing incoming JSON into a typed list for processing.",
      "description_length": 461,
      "index": 1129,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map",
      "description": "Converts nested key-value lists into JSON objects and reconstructs them, using a recursive associative list type for structured data manipulation. Supports serialization and deserialization of hierarchical configurations. Allows extracting values by path, merging configurations, and validating structure against expected formats. Example tasks include loading pod settings from a file, modifying nested parameters, and generating JSON output for external systems.",
      "description_length": 464,
      "index": 1130,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map_env_source",
      "description": "loads and converts nested key-value data between JSON and OCaml lists, enabling structured data handling for environment configuration. it supports recursive data structures, allowing for complex mappings to be serialized and deserialized. this facilitates the transformation of hierarchical data into environment variables for application use. for example, a JSON object like {\"a\": [\"b\", \"c\"]} can be converted into a list-based structure for further processing.",
      "description_length": 463,
      "index": 1131,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map_key_selector",
      "description": "Converts nested key-value structures between JSON and OCaml data types, enabling serialization and deserialization of hierarchical data. Supports lists of key-value pairs with recursive nesting, allowing for complex data transformations. Operations include parsing JSON strings into nested records and generating JSON output from structured data. Example uses include reading configuration files with nested sections or exporting structured data to external systems.",
      "description_length": 466,
      "index": 1132,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map_list",
      "description": "Converts nested associative lists into JSON format and vice versa, supporting recursive structures with string keys and list-valued entries. The main data type is a list of key-value pairs, where values may themselves be nested lists. Operations include parsing JSON into this structure and serializing the structure back to JSON. This enables handling of hierarchical data, such as configuration trees, with full round-trip fidelity.",
      "description_length": 434,
      "index": 1133,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map_projection",
      "description": "Transforms nested key-value structures into JSON format, enabling serialization and deserialization of hierarchical data. The module supports converting between OCaml lists of pairs and JSON, with recursive field handling for complex data exchanges. It allows mapping keys to specific file paths within a projected volume, customizing how data is structured and accessed. This enables precise control over how Config_map contents are represented as files in a volume.",
      "description_length": 467,
      "index": 1134,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Config_map_volume_source",
      "description": "Converts a Config_map's data into a volume structure, mapping keys to files or specified paths, with support for ownership and labeling. Handles nested string associations, enabling JSON serialization and deserialization of hierarchical data. Allows precise control over how configuration data is exposed as files within a volume. For example, a key \"app/config.json\" can be mapped to a specific path, or a nested structure can be flattened into multiple files.",
      "description_length": 461,
      "index": 1135,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container",
      "description": "Encodes and decodes nested associative lists into JSON, supporting recursive structures where values may contain additional key-value pairs. Provides functions to parse and generate JSON from a custom recursive type, enabling manipulation of hierarchical data. Operations include converting between JSON and the internal representation, allowing for easy configuration management. Example uses include storing and retrieving nested settings or metadata within a container.",
      "description_length": 472,
      "index": 1136,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_image",
      "description": "Encodes and decodes nested associative lists into JSON using Yojson, supporting recursive key-value structures. The primary data type is a recursive list of string key-value pairs, with operations for serialization and deserialization. It enables structured data to be stored or transmitted in JSON format, such as converting configuration settings or hierarchical data. Examples include saving application state to a file or parsing incoming JSON payloads.",
      "description_length": 457,
      "index": 1137,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_port",
      "description": "Encodes and decodes hierarchical data structures into and from JSON using recursive associative lists. Supports nested key-value pairs with string keys and arbitrary nested list values. Enables serialization of complex data models for network port configurations. Examples include parsing port mappings from JSON and generating structured port definitions for container setups.",
      "description_length": 377,
      "index": 1138,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_state",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Represents data as recursive key-value pairs, with operations to convert between structured data and JSON strings. Supports complex data transformations in applications requiring JSON-based data interchange. Example: converting a list of configuration parameters to a JSON string for storage or transmission.",
      "description_length": 413,
      "index": 1139,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_state_running",
      "description": "Provides serialization and deserialization of nested key-value structures into and from JSON. Operates on a type where values can be nested lists of the same key-value structure, enabling hierarchical data manipulation. Allows converting a complex data layout into a JSON string for storage or transmission, and reconstructing the original structure from JSON input. For example, it can transform a configuration tree into a JSON string and later parse it back into the same nested format.",
      "description_length": 489,
      "index": 1140,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_state_terminated",
      "description": "Handles conversion of nested associative data structures between JSON and OCaml lists of key-value pairs, enabling serialization and deserialization of hierarchical data. The main data type is a list of tuples representing key-value pairs, with values potentially being nested lists. Operations include parsing JSON strings into this structure and generating JSON from it. This allows for efficient handling of recursive data in container state management.",
      "description_length": 456,
      "index": 1141,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_state_waiting",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange. Operates on recursive key-value pairs represented as lists, with functions to convert between JSON and OCaml data structures. Examples include parsing configuration data from JSON strings and generating JSON output from nested list structures. Supports deep nesting, making it suitable for complex data modeling scenarios.",
      "description_length": 433,
      "index": 1142,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Container_status",
      "description": "Encapsulates hierarchical data as a recursive structure of string-keyed elements, enabling serialization and deserialization to and from JSON. Supports operations to parse and generate JSON from nested key-value lists, allowing structured data to be stored or transmitted. Examples include converting a multi-level configuration tree to a JSON string or reconstructing a data model from an incoming JSON payload. The core data type is a recursive list of tuples representing key-value pairs.",
      "description_length": 491,
      "index": 1143,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Csi_persistent_volume_source",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive key-value structures, enabling structured data to be stored and retrieved efficiently. Supports operations like encoding a list of configuration parameters into a JSON string or parsing a JSON response into a nested list. Useful for managing external storage configurations in applications leveraging CSI volume drivers.",
      "description_length": 447,
      "index": 1144,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Daemon_endpoint",
      "description": "Converts nested associative lists into JSON format and vice versa, supporting recursive structures for hierarchical data. Operates on associative lists and JSON values, providing parsing and serialization functions. Allows manipulation of complex data by encoding nested key-value pairs into JSON and decoding them back into structured lists. Enables seamless data exchange between OCaml and external systems using a well-defined format.",
      "description_length": 437,
      "index": 1145,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Downward_api_projection",
      "description": "Handles the conversion of nested associative lists to and from JSON, enabling structured data serialization and deserialization. Operates on recursive key-value pairs, supporting complex data transformations. Examples include parsing configuration maps or exporting data structures for API communication. Provides direct manipulation of string-based nested lists in JSON format.",
      "description_length": 378,
      "index": 1146,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Downward_api_volume_file",
      "description": "Encodes and decodes hierarchical data structures into JSON using Yojson, supporting nested key-value pairs and lists. The primary data type is a nested associative list, with operations for serialization and deserialization. It allows parsing JSON into structured data and generating JSON from complex recursive models. For example, it can transform a pod metadata structure into a JSON file for use in a Kubernetes downward API volume.",
      "description_length": 436,
      "index": 1147,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Downward_api_volume_source",
      "description": "Provides a mechanism for handling structured data within downward API volumes, enabling serialization and deserialization of nested associative lists. Supports JSON conversion using Yojson, allowing manipulation of key-value pairs in recursive list structures. Enables applications to store and retrieve configuration or metadata in a standardized format. Examples include extracting pod information or injecting environment variables into containers.",
      "description_length": 451,
      "index": 1148,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Empty_dir_volume_source",
      "description": "Handles hierarchical data serialization and deserialization using JSON, enabling structured data manipulation through nested key-value pairs. Supports recursive conversion between OCaml associative lists and JSON formats, facilitating data exchange in complex configurations. Allows for precise control over data representation, suitable for scenarios requiring nested structures. Can be used to generate or parse configuration files with layered data elements.",
      "description_length": 461,
      "index": 1149,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Endpoint_address",
      "description": "Encapsulates an IP address with associated endpoints, enabling structured data manipulation through recursive key-value pairs. Supports JSON serialization and deserialization of nested associative lists using Yojson. Allows conversion between in-memory data structures and JSON format for data exchange. Example tasks include parsing configuration files and transmitting endpoint information over networks.",
      "description_length": 406,
      "index": 1150,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Endpoint_port",
      "description": "Encapsulates port information with JSON serialization and deserialization capabilities. Processes recursive key-value structures using Yojson, enabling data transformation between nested associative lists and JSON format. Supports reading and writing complex data models that represent port configurations. Example uses include saving port settings to a file or parsing incoming JSON data into a structured format.",
      "description_length": 414,
      "index": 1151,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Endpoint_subset",
      "description": "Provides a structured way to represent and manipulate groups of network endpoints formed by combining addresses and ports. Main data types include address and port records, with operations for generating Cartesian products and serializing/deserializing hierarchical data. Examples include creating endpoint lists from address-port combinations and converting nested data structures to JSON. The module supports efficient handling of complex, nested configurations in network-related applications.",
      "description_length": 496,
      "index": 1152,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Endpoints",
      "description": "Manages structured endpoint configurations through recursive key-value pairs, enabling serialization and deserialization to and from JSON. Core data types include nested associative lists and JSON representations, with operations for converting between them. Examples include parsing endpoint definitions with IP addresses and port mappings, and generating JSON output for service configuration files. Supports complex data transformations required for service discovery and network management.",
      "description_length": 494,
      "index": 1153,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Endpoints_list",
      "description": "Encodes and decodes recursive key-value structures into JSON, handling nested associations of strings. The primary data type is a list of pairs, where each value can itself be a list of pairs. It supports serializing configuration trees and structured data, allowing conversion between in-memory representations and JSON format. For example, it can transform a nested list of settings into a JSON string or parse a JSON object back into a structured list.",
      "description_length": 455,
      "index": 1154,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Env_from_source",
      "description": "Converts nested associative lists into JSON format and vice versa using Yojson, enabling structured data serialization and deserialization. Operates on recursive key-value pairs with string keys and arbitrary nested values. Supports reading and writing complex configurations in applications needing JSON interoperability. For example, it can transform a configuration tree into a JSON string for storage or transmission, or parse a JSON input back into a structured in-memory representation.",
      "description_length": 492,
      "index": 1155,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Env_var",
      "description": "Encodes and decodes nested associative lists into JSON, enabling structured data manipulation. Supports recursive key-value pairs where values may also be lists, facilitating complex data representation. Allows conversion of configuration trees and hierarchical metadata between JSON and OCaml structures. Examples include parsing environment variables from JSON and generating JSON output from nested data.",
      "description_length": 407,
      "index": 1156,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Env_var_source",
      "description": "Encodes and decodes hierarchical configuration data using a recursive key-value structure. Supports JSON serialization and deserialization of nested lists into structured representations. Allows manipulation of nested associations through conversion functions. Enables efficient storage and retrieval of complex configuration settings in applications.",
      "description_length": 351,
      "index": 1157,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Event",
      "description": "Encodes and decodes nested associative lists into JSON using Yojson, supporting recursive key-value structures. The primary data type is a recursive variant representing nested pairs, with operations for serialization and deserialization. This enables structured data to be stored, transmitted, or processed in JSON format. For example, a configuration tree or event metadata can be converted to and from JSON for persistence or communication.",
      "description_length": 443,
      "index": 1158,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Event_list",
      "description": "Encodes and decodes recursive associative lists into JSON format, enabling structured data exchange. Processes key-value pairs at each level of nesting, supporting complex data transformations. Allows conversion between nested string-based structures and JSON representations. Examples include serializing configuration trees or parsing hierarchical event logs.",
      "description_length": 361,
      "index": 1159,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Event_series",
      "description": "Handles the serialization and deserialization of nested key-value structures into and from JSON format. Represents data as lists of tuples with string keys and recursive values, enabling efficient handling of complex, hierarchical data. Supports operations to convert between OCaml data types and JSON strings, facilitating data interchange in applications. For example, it can transform a deeply nested event configuration into a JSON string for storage or transmission.",
      "description_length": 471,
      "index": 1160,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Event_source",
      "description": "Converts nested key-value structures into JSON and reconstructs them, using a recursive associative list type with string keys. Supports serialization and deserialization of complex, nested data within a parsing pipeline. Can transform a list like `[(\"a\", 1); (\"b\", [(\"c\", \"d\")])]` into `{\"a\": 1, \"b\": {\"c\": \"d\"}}` and vice versa. Enables structured data manipulation in applications requiring JSON-based data exchange.",
      "description_length": 419,
      "index": 1161,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Exec_action",
      "description": "Handles the serialization and deserialization of nested key-value structures into JSON format using Yojson. The primary data type is a recursive list of string-keyed tuples, supporting complex hierarchical data. Operations include converting between this structure and JSON strings, enabling seamless data exchange in containerized environments. For example, it can transform a nested configuration object into a JSON string for logging or API transmission.",
      "description_length": 457,
      "index": 1162,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Fc_volume_source",
      "description": "Manages Fibre Channel volume configurations through nested key-value structures, enabling serialization and deserialization of hierarchical data. Core operations include parsing and generating JSON from recursive lists, supporting complex volume settings. Allows for precise control over volume properties, such as ownership and security labels. Example tasks include storing mount configurations and applying SELinux policies during volume initialization.",
      "description_length": 456,
      "index": 1163,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Flex_persistent_volume_source",
      "description": "Serializes and deserializes nested key-value structures into JSON using Yojson, enabling efficient data interchange in hierarchical applications. The core data type is a recursive association list, with operations for converting between JSON and structured data. This allows for storing and retrieving complex configurations or state information. For example, it can represent and persist nested settings or hierarchical metadata.",
      "description_length": 430,
      "index": 1164,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Flex_volume_source",
      "description": "Flex_volume_source enables the serialization and deserialization of nested associative lists into and from JSON, using Yojson for structured data representation. It handles recursive key-value pairs where values may also be associative lists, allowing for complex data transformations. Operations include parsing JSON strings into nested structures and converting these structures back into JSON format. This capability supports tasks like managing configuration trees or persisting hierarchical data models.",
      "description_length": 508,
      "index": 1165,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Flocker_volume_source",
      "description": "Encapsulates Flocker volume configuration with strict enforcement of either dataset name or UUID. Supports JSON serialization of nested key-value structures, enabling storage and retrieval of hierarchical metadata. Operations include parsing and generating JSON with recursive nesting, ensuring data integrity during transmission. Example use includes storing volume metadata with custom attributes in a structured, portable format.",
      "description_length": 432,
      "index": 1166,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Gce_persistent_disk_volume_source",
      "description": "Provides a structured way to represent and manipulate Google Compute Engine persistent disk configurations through a recursive key-value data model. Supports JSON serialization and deserialization of nested data structures, enabling flexible configuration management. Allows operations such as converting configuration trees to JSON for storage or transmission, and reconstructing them into in-memory representations. Enables precise control over disk mounting options, ownership, and labeling through hierarchical data manipulation.",
      "description_length": 533,
      "index": 1167,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Git_repo_volume_source",
      "description": "Provides a mechanism to serialize and deserialize hierarchical data structures using JSON, enabling seamless data interchange. The core data type is a recursive list of key-value pairs, with support for nested objects through tuples. Operations include parsing JSON into this structure and generating JSON from it. This capability is essential for managing configuration or state data within a git repo volume.",
      "description_length": 410,
      "index": 1168,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Glusterfs_volume_source",
      "description": "Handles JSON serialization and deserialization of nested associative lists using Yojson, enabling structured data manipulation. Operates on recursive tuples of string keys and values, facilitating data exchange in applications requiring JSON compatibility. Supports converting complex data structures to and from JSON format for storage or transmission. Example use cases include persisting configuration data or exchanging information between services.",
      "description_length": 453,
      "index": 1169,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Handler",
      "description": "Encodes and decodes nested associative lists as JSON, enabling data serialization and deserialization. Processes recursive key-value structures where each level is a list of pairs. Converts between OCaml's list-based data and JSON format for interoperability. Example: transforms a list like `[\"a\", [\"b\", \"c\"]]` into `{\"a\": {\"b\": \"c\"}}` and back.",
      "description_length": 346,
      "index": 1170,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Host_alias",
      "description": "Handles the conversion of nested key-value structures to and from JSON, enabling seamless data serialization and deserialization. The primary data type is a recursive structure of string keys and values, represented as lists of tuples. Operations include parsing JSON into this structure and generating JSON from it. This allows for efficient handling of hierarchical data, such as mapping IP addresses to hostnames for pod configuration.",
      "description_length": 438,
      "index": 1171,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Host_path_volume_source",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format, enabling structured data exchange. Operates on recursive key-value pairs, supporting complex data transformations. Examples include parsing configuration maps or exporting pod volume settings. Provides direct manipulation of JSON structures without additional metadata or security features.",
      "description_length": 382,
      "index": 1172,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Http_get_action",
      "description": "Handles conversion between nested associative lists and JSON using Yojson, enabling structured data serialization and deserialization. Key data types include recursive key-value pairs and JSON values, with operations for parsing and generating JSON. It allows applications to encode complex data structures for HTTP transmission or decode incoming JSON payloads. For example, it can transform a multi-level association list into a JSON string or parse a JSON response into a nested OCaml structure.",
      "description_length": 498,
      "index": 1173,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Http_header",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested key-value pairs through recursive tuples. The primary data type is a list of tuples representing key-value pairs, with nested structures embedded as tuples within the list. Operations include parsing JSON strings into this structure and generating JSON from it. This enables efficient handling of complex data in HTTP headers, such as embedding multi-level metadata or configuration settings.",
      "description_length": 471,
      "index": 1174,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Iscsi_persistent_volume_source",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format using Yojson. Provides functions to convert nested associative lists of strings into JSON and vice versa, enabling structured data manipulation. Supports complex data transformations essential for configuring and managing Iscsi volume parameters. Allows for precise control over volume settings through nested key-value representations.",
      "description_length": 440,
      "index": 1175,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Iscsi_volume_source",
      "description": "Serializes and deserializes nested key-value structures into JSON, enabling configuration management for iSCSI volumes. Supports operations on lists and maps, with recursive handling of complex data types. Examples include storing volume metadata, transmitting setup parameters, and parsing external configuration files. Integrates with iSCSI volume management to ensure consistent data representation across system components.",
      "description_length": 427,
      "index": 1176,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Key_to_path",
      "description": "Encodes and decodes nested key-value structures into JSON, handling lists of tuples with string keys and list values. Supports serialization and deserialization of hierarchical data, enabling storage and retrieval of structured information. Operations include parsing JSON strings into in-memory representations and converting those back to JSON format. Example uses include saving configuration trees or exchanging data between systems with nested key-based organization.",
      "description_length": 472,
      "index": 1177,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Lifecycle",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange. Supports recursive key-value pairs where values may themselves be lists, facilitating complex data representation. Operations include converting between OCaml structures and JSON strings, allowing for easy integration with external systems. Example use cases include storing configuration hierarchies or logging detailed event metadata in a portable format.",
      "description_length": 468,
      "index": 1178,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Limit_range",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa, enabling structured data interchange. Operates on recursive lists of key-value pairs, with functions for serialization and deserialization. Supports complex data structures by traversing nested levels and mapping them to JSON representations. Example uses include saving configuration settings or transmitting data between systems.",
      "description_length": 415,
      "index": 1179,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Limit_range_item",
      "description": "Encapsulates and manages resource usage limits through a structured, serializable format. Supports recursive key-value pairs represented as lists, with JSON encoding and decoding capabilities. Enables storage and retrieval of complex limit configurations across system boundaries. Allows for precise control and transfer of resource constraints in distributed or persistent environments.",
      "description_length": 387,
      "index": 1180,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Limit_range_list",
      "description": "Converts nested associative lists into JSON format and vice versa, enabling structured data exchange. Key types include nested lists and JSON values, with operations for parsing and generating JSON. It supports complex data models with recursive key-value relationships. For example, it can serialize a configuration with nested parameters or parse a JSON response containing hierarchical settings.",
      "description_length": 398,
      "index": 1181,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Limit_range_spec",
      "description": "Encapsulates min and max resource usage constraints with flexible key-based matching. Supports serialization and deserialization of nested key-value structures into JSON, enabling storage or transfer of complex configuration data. Operations include parsing and generating JSON from hierarchical data, with recursive handling of nested lists. Example uses include saving system resource limits or loading configuration trees from files.",
      "description_length": 436,
      "index": 1182,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Load_balancer_ingress",
      "description": "Handles the serialization and deserialization of nested associative list structures into and from JSON format. Supports hierarchical data models with key-value pairs and nested lists, using Yojson for efficient data interchange. Examples include converting configuration trees to JSON for API transmission or parsing incoming JSON into structured data for processing. Operations include encoding, decoding, and manipulating nested key-value hierarchies.",
      "description_length": 453,
      "index": 1183,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Load_balancer_status",
      "description": "Encodes and decodes nested associative data structures from and to JSON, supporting recursive hierarchies. It handles lists of key-value pairs where values can themselves be lists, enabling structured data representation. Operations include parsing JSON strings into these nested lists and converting them back to JSON format. This allows for efficient data exchange between systems requiring complex, hierarchical data modeling.",
      "description_length": 429,
      "index": 1184,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Local_object_reference",
      "description": "Encodes and decodes nested associative data structures using JSON, enabling seamless data exchange with recursive fields. The primary data type is a list of key-value pairs, where values can themselves be lists, forming a hierarchical structure. Operations include parsing JSON strings into this structure and serializing the structure back into JSON. This allows for efficient handling of complex, nested data within a single namespace.",
      "description_length": 437,
      "index": 1185,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Local_volume_source",
      "description": "Provides JSON serialization and deserialization for nested associative lists, enabling structured data manipulation. Uses recursive key-value pairs to represent complex data hierarchies. Converts between JSON and OCaml lists, allowing data to be stored, transmitted, and reconstructed. Example: serializing a configuration tree or parsing a nested settings structure.",
      "description_length": 367,
      "index": 1186,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Namespace",
      "description": "Encapsulates hierarchical data models through nested associative lists, enabling serialization and deserialization to and from JSON. Supports recursive structures where values may contain lists of the same key-value format. Operations include converting between JSON and nested lists, allowing structured data to be stored or transmitted. Example uses include saving configuration trees or exchanging complex data between systems.",
      "description_length": 430,
      "index": 1187,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Namespace_list",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa using Yojson. It works with recursive structures where each node contains string keys and potentially nested values. Operations include parsing JSON strings into these structures and generating JSON output from them. This enables seamless data interchange in applications dealing with hierarchical, string-based configurations.",
      "description_length": 410,
      "index": 1188,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Namespace_spec",
      "description": "Encodes and decodes nested associative lists into JSON, enabling structured data exchange. Processes recursive key-value pairs, supporting serialization and deserialization of complex data hierarchies. Allows conversion between in-memory representations and JSON strings for storage or transmission. Example: transforming a list like `[\"a\", [\"b\", \"c\"]]` into `{\"a\": {\"b\": \"c\"}}` and back.",
      "description_length": 388,
      "index": 1189,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Namespace_status",
      "description": "Encapsulates and manipulates hierarchical data structures through JSON serialization and deserialization. It handles recursive key-value pairs, allowing nested associations to be stored and retrieved as JSON. Operations include converting between OCaml's nested list format and JSON strings. This enables efficient storage and transmission of complex, structured data like configuration settings or metadata hierarchies.",
      "description_length": 420,
      "index": 1190,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Nfs_volume_source",
      "description": "Handles JSON serialization and deserialization of nested associative lists using Yojson, enabling structured data manipulation. Operates on a recursive key-value pair type, allowing for complex data transformations. Supports reading and writing configuration-like data structures in applications requiring persistent or networked storage. Examples include storing pod-specific NFS mount parameters or persisting hierarchical settings in a portable format.",
      "description_length": 455,
      "index": 1191,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node",
      "description": "handles the conversion between nested associative lists and JSON, enabling structured data to be stored and retrieved efficiently. it works with a key-value type that supports nested lists, allowing for complex data hierarchies. this capability is essential for managing node-specific configurations and metadata. for example, it can serialize a node's resource limits or deserialize a stored configuration back into a usable structure.",
      "description_length": 436,
      "index": 1192,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_address",
      "description": "Converts nested associative structures into and out of JSON format, handling lists of key-value pairs with nested values. Supports serialization and deserialization of structured data for JSON-based communication. Operations include encoding a list of strings and values into a JSON string and decoding a JSON string back into a structured list. Example uses include storing configuration data or transmitting node metadata across systems.",
      "description_length": 439,
      "index": 1193,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_affinity",
      "description": "Handles the serialization and deserialization of nested associative lists of strings into and from JSON format using Yojson. The primary data type is a recursive list of key-value pairs, with operations for converting between this structure and JSON. It enables structured data to be stored, transmitted, and reconstructed in applications requiring JSON-based data exchange. For example, it can transform a list like `[(\"a\", \"b\"); (\"c\", [\"d\", \"e\"])]` into a corresponding JSON object.",
      "description_length": 484,
      "index": 1194,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_condition",
      "description": "Encapsulates and manipulates node condition data through a recursive associative list structure. Supports bidirectional conversion between this structure and JSON format using Yojson, enabling data persistence and communication. Key operations include parsing JSON into lists and generating JSON from nested key-value pairs. Example uses include storing configuration states and transmitting node data across systems.",
      "description_length": 417,
      "index": 1195,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_config_source",
      "description": "Provides a mechanism for handling node configuration data through a structured, JSON-based representation. The core data type is a recursive list of key-value pairs, with operations for converting between this structure and JSON format. It enables serialization of complex configurations for storage or transmission and deserialization for runtime use. For example, it can transform a nested configuration like `[\"a\", \"b\"; \"c\", [\"d\", \"e\"]]` into a JSON object and back.",
      "description_length": 469,
      "index": 1196,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_daemon_endpoints",
      "description": "Handles serialization and deserialization of nested key-value structures into JSON format. Uses lists of strings to represent objects and supports recursive data transformations. Enables efficient data interchange in applications requiring hierarchical data handling. Examples include converting configuration trees to JSON for API responses or parsing incoming JSON into structured data for internal processing.",
      "description_length": 412,
      "index": 1197,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_list",
      "description": "Handles conversion between nested associative data structures and JSON, enabling serialization and deserialization of hierarchical data. Supports lists of key-value pairs where values may themselves be lists, facilitating structured data exchange. Operations include parsing JSON into nested lists and generating JSON from such structures. Example: converting a list of node configurations with sublists into a JSON string for storage or transmission.",
      "description_length": 451,
      "index": 1198,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_selector",
      "description": "Provides a way to encode and decode hierarchical key-value structures into JSON, using a recursive list type where each element is a string key paired with a value of the same type. The module supports converting between nested associative data and JSON format, enabling data persistence and transmission. It allows for operations such as serializing a list of node attributes or parsing a JSON string into a structured node representation. This functionality is essential for handling complex data within node selection logic.",
      "description_length": 527,
      "index": 1199,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_selector_requirement",
      "description": "Encapsulates key-value pair structures with operators for node selection, enabling complex filtering logic. Supports serialization and deserialization of nested key-value lists to and from JSON, facilitating data persistence and exchange. Operations include parsing, generating, and manipulating hierarchical configurations. Example uses include storing cluster node constraints or translating configuration trees between formats.",
      "description_length": 430,
      "index": 1200,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_selector_term",
      "description": "Serializes and deserializes hierarchical data structures using JSON, supporting nested key-value pairs and lists. The core data type is a nested associative list, with operations for converting between this structure and JSON format. This enables parsing complex configurations or data models from JSON and reconstructing them as structured OCaml values. For example, a JSON object with nested arrays can be transformed into a list of lists, preserving its hierarchical relationships.",
      "description_length": 484,
      "index": 1201,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_spec",
      "description": "Encodes and decodes nested associative lists into JSON, enabling structured data exchange. Key operations include parsing JSON strings into nested records and converting such records back to JSON format. The primary data type is a recursive associative list, represented as a list of key-value pairs where values may also be nested lists. This allows for handling complex, hierarchical data in applications that require JSON-based configuration or communication.",
      "description_length": 462,
      "index": 1202,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_status",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested key-value pairs and lists. The primary data type is a nested associative list, with operations for serialization and deserialization. It allows converting complex tree-like structures into JSON strings and reconstructing them into OCaml values. This enables efficient data exchange between systems using a structured, nested format.",
      "description_length": 411,
      "index": 1203,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Node_system_info",
      "description": "Encapsulates and manipulates hierarchical data through JSON serialization and deserialization. Processes lists of key-value pairs, supporting nested structures for complex data representation. Enables conversion between structured data and JSON format for storage or transmission. Examples include serializing configuration settings or parsing log entries with multi-level keys.",
      "description_length": 378,
      "index": 1204,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Object_field_selector",
      "description": "Selects and manipulates fields within nested, versioned object structures by converting between recursive JSON-like representations and Yojson. It works with lists of string-keyed tuples, enabling traversal and modification of hierarchical data. Operations include serializing configuration trees and extracting specific fields from deeply nested objects. For example, it can retrieve a versioned API field from a complex data structure or transform a nested JSON object into a structured list.",
      "description_length": 494,
      "index": 1205,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Object_reference",
      "description": "Converts nested associative lists to and from JSON, enabling structured data serialization and deserialization. Operates on recursive lists of key-value pairs, with functions to parse and generate JSON content. Supports complex data transformations in applications needing JSON interoperability. Examples include converting configuration data to JSON for storage or parsing incoming JSON payloads into structured OCaml values.",
      "description_length": 426,
      "index": 1206,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume",
      "description": "Handles the serialization and deserialization of nested, hierarchical data structures into and from JSON format. Supports complex data types including lists of key-value pairs and nested tuples of strings and lists. Enables efficient data interchange in applications requiring structured, persistent storage. Examples include storing configuration trees, persisting application state, and exchanging data between system components.",
      "description_length": 431,
      "index": 1207,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim",
      "description": "Handles serialization and deserialization of nested associative data structures into and from JSON. Operates on a recursive key-value pair type, enabling manipulation of hierarchical data. Supports tasks like storing and retrieving complex configuration settings or metadata. Examples include converting a nested config tree to JSON for storage or parsing incoming JSON data into a structured format.",
      "description_length": 400,
      "index": 1208,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim_condition",
      "description": "Handles serialization and deserialization of nested key-value structures into and from JSON, using recursive tuples to represent hierarchical data. Main data types include lists of tuples and JSON values, with operations for converting between them. Examples include parsing configuration trees and generating JSON outputs from complex data models.",
      "description_length": 348,
      "index": 1209,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim_list",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange. Operates on recursive key-value pairs, supporting conversion between OCaml lists and JSON formats. Allows parsing and generating JSON from complex, nested data structures. Examples include converting configuration maps or hierarchical data to and from JSON.",
      "description_length": 368,
      "index": 1210,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim_spec",
      "description": "Handles the conversion of nested associative lists into and out of JSON format, enabling structured data serialization and deserialization. Operates on a recursive type where keys map to values that may also be associative lists. Supports operations like parsing JSON strings into structured data and generating JSON output from in-memory representations. Useful for managing configuration trees or hierarchical models in a persistent volume claim context.",
      "description_length": 456,
      "index": 1211,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim_status",
      "description": "Provides bidirectional conversion between nested associative lists and JSON format, enabling structured data serialization and deserialization. Operates on recursive key-value pairs, supporting complex data hierarchies. Allows parsing JSON into list structures and generating JSON from nested associations. Useful for storing and retrieving configuration or state information in applications.",
      "description_length": 392,
      "index": 1212,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_claim_volume_source",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data manipulation. Supports recursive key-value pairs where values may contain lists, facilitating complex data modeling. Allows conversion between OCaml data structures and JSON format for storage or transmission. Enables efficient handling of hierarchical configurations within Kubernetes volume sources.",
      "description_length": 402,
      "index": 1213,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_list",
      "description": "Handles serialization and deserialization of hierarchical data structures into and from JSON format. Supports nested associative lists with string keys and recursive values, enabling structured data representation. Provides functions to convert between OCaml data types and JSON strings. Examples include parsing configuration files or exporting data models to JSON for external processing.",
      "description_length": 390,
      "index": 1214,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_spec",
      "description": "Encodes and decodes nested associative lists into JSON using Yojson, supporting recursive structures where values may contain sublists. The primary data type is a recursive key-value pair structure, with operations for serialization and deserialization. This enables handling of complex data formats like configuration files or nested metadata. For example, it can convert a tree of settings into a JSON string or parse a JSON document back into a structured list.",
      "description_length": 464,
      "index": 1215,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Persistent_volume_status",
      "description": "Encodes and decodes nested associative lists into JSON using recursive tuple structures. Supports bidirectional conversion between structured data and JSON format. Enables efficient data serialization for applications handling complex, hierarchical information. Examples include storing configuration states or exchanging data between systems with consistent key-value mappings.",
      "description_length": 378,
      "index": 1216,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Photon_persistent_disk_volume_source",
      "description": "Encapsulates a persistent disk resource with JSON serialization capabilities for nested data structures. Supports conversion between associative lists and JSON, enabling structured data storage and retrieval. Operations include parsing and generating JSON from recursive key-value pairs. Useful for saving and loading complex configurations or state information.",
      "description_length": 362,
      "index": 1217,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa, enabling structured data exchange. The core data type is a nested list of key-value pairs, with operations for parsing and generating JSON. It supports recursive structures, allowing representation of complex hierarchies in configurations or metadata. For example, it can serialize a configuration tree with multiple levels of settings or deserialize a JSON response into a structured OCaml value.",
      "description_length": 481,
      "index": 1218,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_affinity",
      "description": "Handles the serialization and deserialization of nested key-value structures into and from JSON format. Utilizes Yojson to manage recursive data, allowing for the conversion of hierarchical data represented as lists of string-keyed tuples. Operations include parsing JSON strings into structured data and generating JSON output from in-memory representations. Examples include converting configuration trees or nested metadata between storage formats and runtime objects.",
      "description_length": 471,
      "index": 1219,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_affinity_term",
      "description": "Handles structured data conversion between nested key-value pairs and JSON format, enabling seamless data interchange. Supports parsing and serialization of hierarchical data using Yojson, with operations for encoding and decoding complex nested structures. Examples include converting configuration settings or API responses into readable JSON and reconstructing data structures from incoming payloads. Key types include lists of key-value pairs and JSON values, with functions for bidirectional transformation.",
      "description_length": 512,
      "index": 1220,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_anti_affinity",
      "description": "Handles conversion between nested associative data structures and JSON, enabling serialization and deserialization of hierarchical data. Supports lists of key-value pairs with nested lists as values, facilitating data exchange in scheduling contexts. Operations include parsing JSON into structured records and generating JSON from in-memory representations. Example: converting a list of pod labels with affinity rules into a JSON object for configuration storage or transmission.",
      "description_length": 481,
      "index": 1221,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_condition",
      "description": "Converts nested associative lists of strings to and from JSON, supporting recursive structures for hierarchical data. Key operations include parsing and generating JSON with arbitrary nesting levels. This enables seamless serialization and deserialization of complex data formats. For example, it can transform a list of configuration settings with sublists into a JSON string or reconstruct the original structure from a JSON input.",
      "description_length": 433,
      "index": 1222,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_dns_config",
      "description": "Handles the serialization and deserialization of nested key-value structures into and from JSON format. Utilizes Yojson to manage hierarchical data models where values may include nested lists of the same type. Supports operations like converting a list of (string * t) pairs to JSON and parsing JSON back into this structure. Enables efficient data interchange in systems requiring structured, nested configuration storage.",
      "description_length": 424,
      "index": 1223,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_dns_config_option",
      "description": "Serializes and deserializes nested key-value configurations into JSON using Yojson, supporting recursive structures. Core data types include lists of tuples and nested lists, with operations for converting between these structures and JSON. This enables efficient handling of complex DNS resolver settings, such as parsing and generating configuration payloads for pod-based DNS resolution. Example tasks include exporting a list of DNS server entries or importing custom options from a JSON file.",
      "description_length": 497,
      "index": 1224,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_list",
      "description": "Handles serialization and deserialization of nested associative structures into and from JSON, working with lists of key-value pairs that may contain nested lists. Main data types include associative lists and JSON values, with operations for conversion and parsing. Allows structured data like configuration trees or logs to be stored and retrieved in a consistent format. Example: converting a list of environment variables with nested sections into a JSON string and reconstructing it accurately.",
      "description_length": 499,
      "index": 1225,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_security_context",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange. Operates on recursive key-value pairs, supporting bidirectional conversion between OCaml lists and JSON formats. Allows for flexible manipulation of hierarchical data structures within security context configurations. Can be used to encode or decode security policies or configuration maps stored as JSON.",
      "description_length": 416,
      "index": 1226,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_spec",
      "description": "Encodes and decodes recursive key-value structures into JSON using Yojson, enabling data serialization and deserialization. The core data type is a nested list of key-value pairs, with operations for converting between this structure and JSON strings. Functions allow parsing JSON into structured data and generating JSON from nested lists. This supports applications needing to store or transmit complex, hierarchical data in a standardized format.",
      "description_length": 449,
      "index": 1227,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_status",
      "description": "Converts nested associative data between OCaml and JSON formats, handling lists of key-value pairs with nested lists as values. Provides functions to parse and generate JSON from structured data, enabling seamless data exchange. Operations include encoding and decoding with support for hierarchical configurations. Example: transform a list of environment variables with nested values into a JSON object for external processing.",
      "description_length": 429,
      "index": 1228,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_template",
      "description": "Converts nested associative lists to and from JSON, enabling structured data serialization and deserialization. Operates on recursive key-value pairs, supporting complex data transformations. Examples include parsing configuration data from JSON strings and generating JSON output from in-memory lists. Provides direct manipulation of nested structures without external dependencies.",
      "description_length": 383,
      "index": 1229,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_template_list",
      "description": "Encodes and decodes recursive key-value structures into JSON, enabling data persistence and transmission. Processes nested associative lists with string keys and mixed-value elements. Supports bidirectional conversion for structured data in applications needing JSON interoperability. Example: serializing a configuration tree or parsing a nested API response.",
      "description_length": 360,
      "index": 1230,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Pod_template_spec",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa using Yojson, enabling structured data to be serialized and deserialized. The primary data type is a recursive list of key-value pairs, with operations for encoding and decoding between this structure and JSON. This allows for flexible data manipulation in systems that rely on JSON for communication or storage. For example, it can transform a configuration tree into a JSON string for API transmission or parse incoming JSON into a navigable list structure.",
      "description_length": 542,
      "index": 1231,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Portworx_volume_source",
      "description": "Encapsulates and manipulates structured data representing a Portworx volume through recursive key-value pairs. Supports serialization and deserialization to and from JSON using Yojson, enabling data exchange in applications. Operations include converting between nested associative lists and JSON strings, allowing for flexible data handling. Example uses include storing configuration details or persisting volume metadata in a portable format.",
      "description_length": 445,
      "index": 1232,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Preferred_scheduling_term",
      "description": "Handles conversion between nested associative structures and JSON, using a recursive list type for key-value pairs. Supports serialization and deserialization of structured data for JSON-based communication. Can transform complex data formats into JSON and reconstruct them accurately. Enables efficient data interchange in applications requiring structured, hierarchical data representation.",
      "description_length": 392,
      "index": 1233,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Probe",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive key-value structures, enabling structured data to be exchanged between systems. Supports converting complex data hierarchies to and from JSON for configuration or communication purposes. For example, it can transform a list like `[\"a\", \"b\", [\"c\", \"d\"]]` into a JSON object or parse a JSON string back into this nested format.",
      "description_length": 452,
      "index": 1234,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Projected_volume_source",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling data serialization and deserialization. Processes recursive key-value structures, allowing for flexible representation of hierarchical data. Supports converting complex nested lists into JSON strings and reconstructing them into OCaml lists. Example uses include storing configuration data, transmitting structured information over networks, or persisting application state.",
      "description_length": 459,
      "index": 1235,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Quobyte_volume_source",
      "description": "Encapsulates a Quobyte mount for pod-wide use, handling structured data serialization and deserialization. Supports recursive key-value pairs in JSON format via Yojson, enabling data transformation between nested lists and JSON strings. Allows applications to persist and retrieve complex configurations or metadata. Examples include storing mount options, configuration parameters, or state information in a structured, portable format.",
      "description_length": 437,
      "index": 1236,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Rbd_persistent_volume_source",
      "description": "Handles serialization and deserialization of nested associative lists into JSON format, enabling structured data exchange. Utilizes recursive key-value pairs for complex data representation. Supports operations like encoding and decoding JSON structures within applications requiring persistent volume configuration. Enables precise manipulation of volume parameters and metadata during pod lifecycle management.",
      "description_length": 412,
      "index": 1237,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Rbd_volume_source",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data manipulation. Provides functions to convert between recursive key-value pairs and JSON format. Supports complex data transformations in applications requiring persistent storage or communication. Examples include storing configuration settings or managing volume metadata in a pod-based environment.",
      "description_length": 400,
      "index": 1238,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Replication_controller",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa, enabling structured data interchange. It works with recursive list structures where each element is a key-value pair, using Yojson for serialization and deserialization. This allows applications to persist or transmit complex data configurations efficiently. For example, it can transform a list like `[\"a\", \"b\", [\"c\", \"d\"]]` into a JSON object and back.",
      "description_length": 438,
      "index": 1239,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Replication_controller_condition",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive tuples that represent key-value pairs, enabling structured data interchange. Allows for converting complex data structures to and from JSON for storage or communication. Examples include parsing configuration data or transmitting state information across systems.",
      "description_length": 390,
      "index": 1240,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Replication_controller_list",
      "description": "Handles conversion between nested associative data structures and JSON, enabling serialization and deserialization of hierarchical data. Key types include lists of key-value pairs with nested lists, and operations include parsing and generating JSON. Examples include converting a list of replication controller configurations to JSON and reconstructing the structure from a JSON string. Supports data exchange between systems requiring recursive field handling.",
      "description_length": 462,
      "index": 1241,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Replication_controller_spec",
      "description": "Encodes and decodes nested associative lists into JSON using Yojson, enabling data serialization and deserialization. Processes recursive key-value structures, allowing for flexible representation of hierarchical data. Supports converting complex data formats into JSON for storage or transmission, and reconstructing them back into OCaml structures. Example uses include saving configuration states or exchanging data between systems.",
      "description_length": 435,
      "index": 1242,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Replication_controller_status",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. It supports nested key-value pairs with list values, enabling structured data representation. Operations include converting between JSON and associative lists, allowing for flexible data manipulation. This enables tasks such as storing configuration states or transmitting structured information across systems.",
      "description_length": 416,
      "index": 1243,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_field_selector",
      "description": "Handles the conversion of nested associative lists into and out of JSON format using Yojson, enabling structured data serialization and deserialization. Operates on recursive list structures where each element is a key-value pair, allowing for complex data representation. Supports applications needing to exchange data in JSON, such as configuration parsing or API communication. Examples include converting a resource configuration into a JSON string or parsing a JSON response into a structured list.",
      "description_length": 503,
      "index": 1244,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_quota",
      "description": "Serializes and deserializes nested associative lists into JSON, enabling structured data exchange. Key data types include nested lists and JSON values, with operations for conversion and traversal. This allows applications to manage hierarchical configurations or settings in a portable format. For example, it can transform a multi-level configuration into a JSON string for storage or transmission.",
      "description_length": 400,
      "index": 1245,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_quota_list",
      "description": "Handles serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on a recursive type where keys map to values that may also be associative lists. Supports converting complex hierarchical data structures, such as configuration trees, into and out of JSON. Provides functions to parse and generate JSON from nested string-based key-value pairs.",
      "description_length": 387,
      "index": 1246,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_quota_spec",
      "description": "Encodes and decodes nested associative lists of strings into JSON format using Yojson, enabling structured data interchange. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. This allows applications to persist or transmit complex data structures in a standardized format. For example, it can convert a list like [(\"a\", \"1\"); (\"b\", [(\"c\", \"2\")])] into a JSON object and back.",
      "description_length": 442,
      "index": 1247,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_quota_status",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested key-value pairs with recursive types. Provides functions to transform structured data like configuration trees into and from JSON format. Operations include parsing, generating, and manipulating nested associative lists. Examples include serializing system resource limits or deserializing hierarchical metadata for monitoring.",
      "description_length": 406,
      "index": 1248,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Resource_requirements",
      "description": "Encodes and decodes nested associative lists of strings into JSON format using Yojson, enabling structured data interchange. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. It allows converting complex data structures into JSON strings and reconstructing them programmatically. For example, it can transform a list like [(\"cpu\", \"4\"); (\"memory\", \"16Gi\")] into a JSON object and back.",
      "description_length": 452,
      "index": 1249,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Scale_io_persistent_volume_source",
      "description": "Encapsulates and manages structured data for persistent Scale_io volumes through JSON serialization and deserialization. Processes recursive key-value lists, enabling data storage and retrieval in applications. Supports conversion between nested associative lists and JSON formats for seamless data interchange. Facilitates operations like saving configuration states or parsing external data sources.",
      "description_length": 401,
      "index": 1250,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Scale_io_volume_source",
      "description": "Handles serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive data structures with string keys and nested values, enabling structured data interchange. Supports converting complex, hierarchical data into JSON and reconstructing it back into OCaml structures. Useful for storing or transmitting configuration-like data in applications using Scale_io volumes.",
      "description_length": 418,
      "index": 1251,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Se_linux_options",
      "description": "Handles the conversion of nested key-value data structures to and from JSON, enabling structured data exchange. The primary data type is a list of tuples with nested lists, supporting recursive serialization and parsing. It allows for transforming complex configurations into JSON format and reconstructing them programmatically. This enables seamless integration with systems requiring hierarchical data representation.",
      "description_length": 420,
      "index": 1252,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret",
      "description": "Encapsulates and manages secret data with size constraints, enabling safe storage and manipulation. Provides operations to convert nested associative lists into JSON format and vice versa, using recursive structures for complex data. Supports serialization and deserialization of structured data for application interoperability. Examples include storing configuration secrets and exchanging data between systems.",
      "description_length": 413,
      "index": 1253,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_env_source",
      "description": "Handles the conversion of nested associative lists to and from JSON, enabling structured data serialization and deserialization. Operates on recursive key-value pairs, allowing for flexible data manipulation in applications that require JSON interchange. Provides functions to parse JSON into nested lists and generate JSON from structured data. Can be used to transform environment variable configurations between in-memory representations and JSON formats.",
      "description_length": 458,
      "index": 1254,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_key_selector",
      "description": "Encodes and decodes nested associative lists of strings into and from JSON format using Yojson. Processes recursive key-value structures where each value can itself be a nested list. Supports serialization and deserialization of complex, hierarchical data for JSON-based communication. Allows conversion of data like configuration trees or nested settings between in-memory representations and JSON strings.",
      "description_length": 407,
      "index": 1255,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_list",
      "description": "Encodes and decodes nested associative lists into JSON, supporting recursive structures where values may also be lists. Processes data using a custom type that represents key-value pairs with nested entries. Allows for converting configuration trees or hierarchical data between OCaml and JSON formats. Example: serializing a nested settings structure or parsing a JSON-based metadata file.",
      "description_length": 390,
      "index": 1256,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_projection",
      "description": "Encodes and decodes nested associative lists into JSON format, enabling structured data manipulation. Processes recursive key-value pairs, allowing for complex data serialization and deserialization. Supports application-specific data handling by mapping keys to file names in a secret's data. Enables precise control over how secret contents are represented as files in a volume.",
      "description_length": 380,
      "index": 1257,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_reference",
      "description": "Encapsulates and manages secret references with JSON serialization capabilities. Supports recursive string-based associative lists, enabling conversion between nested data structures and JSON format. Allows for structured data manipulation, such as encoding a configuration tree into a JSON string or parsing a JSON response into a nested list. Facilitates secure data handling across different namespaces by maintaining reference integrity during serialization.",
      "description_length": 462,
      "index": 1258,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Secret_volume_source",
      "description": "Injects Secret data into a volume by mapping keys to files, supporting ownership and security labeling. Processes nested associative lists as JSON, enabling structured data serialization and deserialization. Allows for dynamic volume configuration based on Secret content and facilitates data exchange between systems. Example uses include mounting secrets as files in containers and transferring configuration data securely.",
      "description_length": 425,
      "index": 1259,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Security_context",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange. Supports recursive key-value pairs represented as lists, with operations to convert between OCaml and JSON formats. Can be used to encode security configurations into JSON for storage or transmission, and decode them back into structured data for processing. Facilitates consistent data handling in security-related workflows where nested data structures are required.",
      "description_length": 479,
      "index": 1260,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service",
      "description": "Encapsulates a software service with a local port and a selector for routing requests. Supports serialization and deserialization of nested key-value structures into JSON, enabling manipulation of hierarchical data like configuration trees. Operations include converting between JSON and structured data, allowing for dynamic configuration updates. Example tasks include parsing service configurations, modifying nested parameters, and generating JSON payloads for external systems.",
      "description_length": 482,
      "index": 1261,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_account",
      "description": "binds together a user-facing name, an authenticatable principal, and associated secrets, enabling structured data handling through JSON serialization and deserialization. operates on recursive lists of string keys and values, supporting nested data structures. allows conversion between in-memory representations and JSON formats for storage or transmission. examples include encoding a configuration with nested fields or decoding a received JSON payload into a typed structure.",
      "description_length": 479,
      "index": 1262,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_account_list",
      "description": "Encodes and decodes hierarchical data structures into and from JSON using recursive associative lists. Supports nested key-value pairs with string keys and arbitrary nested list values. Enables parsing of complex JSON configurations and generation of structured output. Examples include serializing service account metadata and deserializing configuration files with layered data.",
      "description_length": 380,
      "index": 1263,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_list",
      "description": "Encodes and decodes nested associative lists into JSON, supporting recursive structures where values may also be lists. Processes data using a custom recursive type that represents key-value pairs with nested entries. Allows for converting configuration trees or hierarchical metadata between JSON and OCaml representations. Example: serializing a nested service configuration or parsing a JSON-based service registry.",
      "description_length": 418,
      "index": 1264,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_port",
      "description": "Converts nested associative lists of strings to and from JSON using Yojson, enabling structured data serialization and deserialization. Operates on recursive list structures where each element is a key-value pair, allowing for complex data representation. Supports operations like parsing JSON strings into lists and generating JSON output from list structures. Can be used to store and retrieve configuration data or hierarchical information in applications requiring JSON interoperability.",
      "description_length": 491,
      "index": 1265,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_spec",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling structured data interchange. Processes recursive key-value pairs, allowing for complex data serialization and reconstruction. Supports operations like parsing JSON strings into lists and converting lists back to JSON strings. Example uses include storing configuration data and transmitting hierarchical information between systems.",
      "description_length": 417,
      "index": 1266,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Service_status",
      "description": "Converts nested associative lists to and from JSON, enabling structured data serialization and deserialization. Key operations include parsing JSON strings into lists and converting lists back to JSON strings. The primary data type is a nested list of key-value pairs, where values may recursively contain similar structures. This allows for efficient handling of complex, hierarchical data in applications requiring JSON-based communication.",
      "description_length": 442,
      "index": 1267,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Session_affinity_config",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling structured data interchange. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. It allows converting configuration data into a JSON string for storage or transmission and reconstructing it back into a list structure. This supports applications that need to persist or share session affinity settings in a human-readable format.",
      "description_length": 478,
      "index": 1268,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Storage_os_persistent_volume_source",
      "description": "Handles the serialization and deserialization of nested associative list structures into and from JSON format using Yojson. The primary data type is a nested list of key-value pairs, with operations for converting between this structure and JSON. It enables applications to manage hierarchical data models, such as configuration trees or nested metadata, by encoding and decoding them efficiently. For example, it can transform a complex configuration into a JSON string for storage or transmission and reconstruct it back into a structured list.",
      "description_length": 546,
      "index": 1269,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Storage_os_volume_source",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. The primary data type is a recursive structure of string-keyed pairs with nested values, supporting operations like parsing and generating JSON. This enables structured data to be stored, transmitted, and reconstructed within applications. For example, it can convert a configuration tree into a JSON string for storage or parse a JSON response into a nested record for processing.",
      "description_length": 486,
      "index": 1270,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Taint",
      "description": "Encodes and decodes nested associative lists into JSON, facilitating data exchange and configuration handling. The primary data type is a nested associative list, with operations for serialization and deserialization. It allows converting complex structures into JSON strings and reconstructing them programmatically. For example, it can transform a configuration tree into a JSON string for storage or transmission and later parse it back into a structured OCaml value.",
      "description_length": 470,
      "index": 1271,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Tcp_socket_action",
      "description": "Handles serialization and deserialization of nested key-value structures into JSON format using Yojson. The primary data type is a recursive list of string-keyed tuples, supporting complex hierarchical data. Operations include converting between OCaml structures and JSON strings, enabling data exchange in networked applications. Example uses include sending configuration trees or nested data payloads over TCP sockets.",
      "description_length": 421,
      "index": 1272,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Toleration",
      "description": "Provides JSON serialization and deserialization for nested associative lists, enabling structured data exchange. Operates on recursive key-value pairs represented as lists, with conversions handled by Yojson. Allows storing and retrieving complex data structures in applications requiring JSON interoperability. Examples include converting configuration settings or hierarchical data between OCaml and JSON formats.",
      "description_length": 415,
      "index": 1273,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Volume",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa, enabling structured data serialization and deserialization. Key data types include nested lists and associative structures, with operations for parsing and generating JSON. This allows for the storage and retrieval of hierarchical data within pod configurations. Examples include serializing container volume mappings or deserializing pod specifications from JSON.",
      "description_length": 448,
      "index": 1274,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Volume_device",
      "description": "manages the serialization and deserialization of nested key-value structures into JSON, enabling data persistence and exchange. It supports recursive data types where values can themselves be structured, using lists of string-keyed tuples. Operations include parsing JSON strings into in-memory representations and converting those back to JSON format. This allows for efficient handling of complex data hierarchies in containerized environments.",
      "description_length": 446,
      "index": 1275,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Volume_mount",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive tuples to represent structured key-value data. Allows for converting complex data structures to and from JSON for interchange between systems. Example uses include storing configuration settings or transmitting data over networks.",
      "description_length": 357,
      "index": 1276,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Volume_node_affinity",
      "description": "Handles JSON serialization and deserialization of nested key-value structures, converting between OCaml tuples and JSON formats. Main data types include lists of tuples and nested lists, with operations for encoding and decoding. Examples include converting a list of node affinity rules into a JSON string for API transmission or parsing a configuration file into an in-memory structure. Supports recursive processing of complex data models within the volume node affinity system.",
      "description_length": 481,
      "index": 1277,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Volume_projection",
      "description": "Encodes and decodes nested associative lists into JSON format, enabling structured data exchange. Processes recursive key-value pairs, supporting serialization and deserialization operations. Allows conversion of complex data structures into JSON strings and vice versa. Example: transforming a list of configuration settings into a JSON string for storage or transmission.",
      "description_length": 373,
      "index": 1278,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Vsphere_virtual_disk_volume_source",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. Utilizes a nested associative list representation, allowing for flexible manipulation of complex object hierarchies. Supports operations such as converting a list of key-value pairs into a JSON string and parsing JSON back into a structured list format. Enables seamless data exchange in applications working with vSphere volume configurations.",
      "description_length": 449,
      "index": 1279,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1.Weighted_pod_affinity_term",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange. Processes recursive key-value pairs, supporting conversion between OCaml and JSON formats. Allows for encoding complex data structures into JSON strings and decoding them back into OCaml lists. Example: converting a list like [(\"a\", [\"b\", \"c\"]) ; (\"d\", [])] to and from a JSON object.",
      "description_length": 395,
      "index": 1280,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1.Job",
      "description": "Encodes and decodes recursive key-value structures into JSON, handling nested hierarchies of string-based data. The core data type is a list of pairs, where each value can itself be a list of pairs. Operations include converting a structured data model to a JSON string and parsing a JSON string back into the structured format. This enables seamless storage and transmission of complex, hierarchical job configurations.",
      "description_length": 420,
      "index": 1281,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1.Job_condition",
      "description": "Encodes and decodes nested associative lists into JSON, supporting recursive structures where values may contain sublists. Processes data using a custom recursive type that models key-value pairs with nested elements. Allows conversion of configuration trees and hierarchical data models between OCaml and JSON formats. Enables seamless data persistence and exchange in applications requiring structured, nested information.",
      "description_length": 424,
      "index": 1282,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1.Job_list",
      "description": "Handles the serialization and deserialization of nested associative lists\u2014composed of string keys and recursive value lists\u2014into and from JSON format using Yojson. Main data types include nested tuples of strings and lists, with operations for converting between these structures and JSON. For example, it can transform a configuration with nested job parameters into a JSON string or parse a JSON file back into a structured list. This enables efficient handling of hierarchical data in job-related workflows.",
      "description_length": 510,
      "index": 1283,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1.Job_spec",
      "description": "Encodes and decodes nested associative lists into and from JSON using Yojson, enabling structured data exchange. The primary data type is a recursive key-value structure, with operations for serialization and deserialization. It allows preserving complex hierarchies during data transmission or storage. For example, it can convert a configuration tree into a JSON string or parse a JSON response into a nested record.",
      "description_length": 418,
      "index": 1284,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1.Job_status",
      "description": "Encodes and decodes nested associative data structures using JSON, enabling seamless data interchange. Supports lists of key-value pairs with recursive values, allowing for complex data representation. Operations include parsing JSON into structured data and generating JSON from in-memory representations. Example uses include serializing job metadata with nested fields or deserializing configuration data with hierarchical keys.",
      "description_length": 431,
      "index": 1285,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1beta1.Cron_job",
      "description": "Converts between nested associative lists and JSON, enabling structured data serialization and deserialization. The core data type is a recursive key-value structure with string keys and nested values, supporting operations for encoding and decoding. This allows for seamless data interchange in applications handling hierarchical configurations. For example, it can transform a complex configuration tree into a JSON string for storage or transmission and reconstruct it back into a nested list structure.",
      "description_length": 506,
      "index": 1286,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1beta1.Cron_job_list",
      "description": "Handles serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive list structures where each element is a key-value pair. Supports converting complex data structures to and from JSON for data interchange. Examples include saving job configurations to files or parsing incoming JSON data into structured job definitions.",
      "description_length": 376,
      "index": 1287,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1beta1.Cron_job_spec",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive key-value structures, enabling data to be stored and retrieved in a structured, interoperable format. Supports operations such as converting a list of job parameters into a JSON string and parsing JSON back into a list. Useful for persisting job configurations or exchanging data between systems.",
      "description_length": 423,
      "index": 1288,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1beta1.Cron_job_status",
      "description": "Encodes and decodes nested associative lists into JSON, enabling structured data exchange. Processes recursive key-value pairs, supporting serialization and deserialization of complex data formats. Allows conversion between in-memory representations and JSON strings for storage or transmission. Example uses include saving job states to files or sending status updates over a network.",
      "description_length": 385,
      "index": 1289,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1beta1.Job_template_spec",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested key-value pairs and lists. The primary data type is a nested associative list, with operations for parsing and generating JSON. It enables seamless conversion between structured data and JSON, allowing for the storage and transmission of complex job templates. For example, it can serialize a job configuration with nested parameters or deserialize a JSON file into a structured OCaml value.",
      "description_length": 470,
      "index": 1290,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V2alpha1.Cron_job",
      "description": "Handles the serialization and deserialization of structured data into and from JSON format. Utilizes a recursive key-value pair structure with string keys and nested values. Supports converting complex configurations to JSON and reconstructing them programmatically. Enables seamless data interchange in applications requiring persistent or networked storage of job definitions.",
      "description_length": 378,
      "index": 1291,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V2alpha1.Cron_job_list",
      "description": "Handles the conversion of nested string-based associative lists to and from JSON, supporting recursive structures for complex data modeling. Provides functions to serialize and deserialize hierarchical data using Yojson. Allows manipulation of nested key-value pairs, such as extracting specific fields or flattening structures. Enables seamless integration with external systems requiring JSON input or output.",
      "description_length": 411,
      "index": 1292,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V2alpha1.Cron_job_spec",
      "description": "Handles the serialization and deserialization of hierarchical job configurations using JSON. It supports nested key-value structures with lists as values, enabling precise representation of complex data. Operations include parsing JSON into structured data and converting structured data back to JSON. This allows for flexible storage, transmission, and reconstruction of job specifications.",
      "description_length": 391,
      "index": 1293,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V2alpha1.Cron_job_status",
      "description": "Encodes and decodes hierarchical key-value structures into and from JSON, supporting nested lists of the same type. Provides functions to parse JSON strings into structured data and convert structured data back into JSON strings. Operations include mapping over nested elements and extracting specific keys from deep within the structure. For example, it can transform a JSON object representing job schedules into a typed OCaml structure or extract a specific job's status from a complex configuration.",
      "description_length": 503,
      "index": 1294,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V2alpha1.Job_template_spec",
      "description": "Transforms nested key-value structures into JSON and reconstructs them, using a recursive list type where each element pairs a string key with another list of the same structure. Supports serialization and deserialization of hierarchical data, enabling storage and retrieval of complex configurations. Examples include converting a list of job parameters into a JSON string and parsing a JSON response into a structured format for processing. Operations handle nested fields, ensuring accurate representation of multi-level data.",
      "description_length": 529,
      "index": 1295,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Allowed_flex_volume",
      "description": "Handles conversion of nested associative data structures between JSON and OCaml lists of key-value pairs, enabling serialization and deserialization of hierarchical data. Core data types include lists of tuples representing key-value pairs and nested lists for recursive structures. Operations include parsing JSON strings into these structures and generating JSON output from them. This enables efficient data exchange, such as converting configuration settings or nested metadata into a transportable format.",
      "description_length": 510,
      "index": 1296,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Allowed_host_path",
      "description": "Encapsulates host path validation logic by parsing and generating JSON structures that represent allowed volume paths. Supports nested key-value pairs with list values, enabling structured data representation and exchange. Operations include serialization to and deserialization from JSON, ensuring consistent data handling. Example uses include storing policy configurations and parsing incoming host path restrictions.",
      "description_length": 420,
      "index": 1297,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Eviction",
      "description": "Handles hierarchical data serialization and deserialization using a recursive key-value structure, enabling structured data to be represented and reconstructed as JSON. Supports operations like converting nested lists to JSON objects and parsing JSON back into the same format. This facilitates efficient data manipulation in scenarios requiring nested, typed data storage. For example, it can transform a list like [(\"a\", [(\"b\", \"c\")])] into a JSON object {\"a\": {\"b\": \"c\"}} and vice versa.",
      "description_length": 490,
      "index": 1298,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Fs_group_strategy_options",
      "description": "Encapsulates logic for converting nested associative lists of strings to and from JSON, enabling structured data serialization and deserialization. Processes recursive key-value pairs, supporting bidirectional transformation between in-memory representations and JSON format. Allows applications to persist or transmit complex data structures efficiently. Examples include saving configuration settings or exchanging data between systems.",
      "description_length": 438,
      "index": 1299,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Host_port_range",
      "description": "Manages host port ranges by defining start and end values, with support for serializing and deserializing nested structured data. Key data types include associative lists and JSON representations, with operations for conversion and validation. It enables parsing complex configurations and generating JSON outputs for policy definitions. For example, it can transform a nested list of port settings into a JSON object for use in cluster policies.",
      "description_length": 446,
      "index": 1300,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Id_range",
      "description": "Provides a mechanism for converting nested associative lists of strings to and from JSON format using Yojson. The core data type is a recursive list of key-value pairs, with operations for serialization and deserialization. It enables structured data to be stored or transmitted in JSON, allowing for easy integration with web services or configuration files. For example, a list representing user settings can be encoded into a JSON string and later decoded back into its original structure.",
      "description_length": 492,
      "index": 1301,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_disruption_budget",
      "description": "Handles serialization and deserialization of hierarchical data structures into and from JSON format. Operates on a recursive key-value pair type, enabling manipulation of nested configurations. Allows conversion of complex, structured data like pod policies or metadata trees. Supports operations such as parsing JSON strings into in-memory representations or generating JSON output from nested associative lists.",
      "description_length": 413,
      "index": 1302,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_disruption_budget_list",
      "description": "Handles JSON serialization and deserialization of nested associative lists representing pod disruption budgets. Supports recursive key-value structures using Yojson for data interchange. Allows conversion between structured data and JSON format for storage or transmission. Enables efficient manipulation and exchange of complex configuration data within Kubernetes-related applications.",
      "description_length": 387,
      "index": 1303,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_disruption_budget_spec",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested objects via recursive tuples. Key types include lists of key-value pairs and recursive tuples, with operations for serialization and deserialization. Converts complex configurations into JSON and reconstructs them into structured data. Example uses include storing and retrieving pod disruption policies with nested parameters.",
      "description_length": 406,
      "index": 1304,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_disruption_budget_status",
      "description": "Encapsulates hierarchical data through nested associative lists, enabling serialization and deserialization to and from JSON. Supports operations to convert between structured data and JSON representations, facilitating data interchange in complex models. Allows manipulation of key-value pairs at multiple levels, such as extracting specific fields or modifying nested entries. Example tasks include parsing a JSON document into a structured format or generating a JSON string from a deeply nested data model.",
      "description_length": 510,
      "index": 1305,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_security_policy",
      "description": "Manages structured data through recursive key-value pair operations, enabling serialization and deserialization between nested associative lists and JSON. Core data types include recursive lists and JSON values, with operations for conversion and manipulation. This allows for handling complex configurations, such as transforming security context settings into a serializable format or parsing policy definitions from JSON. Examples include converting a policy's hierarchical parameters into a JSON string for storage or reading a policy from a file and processing its nested fields.",
      "description_length": 584,
      "index": 1306,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_security_policy_list",
      "description": "Encapsulates hierarchical data as a recursive list of key-value pairs, enabling serialization to and parsing from JSON. Supports nested structures where each entry consists of a string key and a sub-list. Allows conversion between structured data and JSON format for storage or transmission. Example uses include representing configuration trees or policy hierarchies in a machine-readable form.",
      "description_length": 395,
      "index": 1307,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Pod_security_policy_spec",
      "description": "Converts nested associative lists to and from JSON, enabling serialization and deserialization of hierarchical data structures. The primary data type is a nested list of key-value pairs, with operations for parsing and generating JSON. This allows for efficient handling of complex data models in applications that require JSON-based data exchange. For example, it can transform a policy configuration into a JSON string for storage or transmission.",
      "description_length": 449,
      "index": 1308,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Run_as_user_strategy_options",
      "description": "Encapsulates strategy configuration through a recursive string-based associative list, enabling serialization and deserialization to and from JSON. Provides functions to convert between nested list structures and JSON representations, supporting complex data hierarchies. Operations include parsing JSON into structured lists and generating JSON from nested key-value pairs. This allows seamless data exchange in systems requiring dynamic strategy definitions.",
      "description_length": 460,
      "index": 1309,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Se_linux_strategy_options",
      "description": "Encapsulates strategies with configurable options, enabling structured data manipulation through nested key-value pairs. Supports serialization and deserialization of complex, recursively nested data structures into and from JSON format. Operations include parsing JSON into structured records and generating JSON from in-memory representations. Example uses include storing policy configurations and exchanging hierarchical data between systems.",
      "description_length": 446,
      "index": 1310,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1.Supplemental_groups_strategy_options",
      "description": "Serializes and deserializes nested list-of-pair structures to and from JSON, supporting recursive serialization of tuples. Key data types include lists of key-value pairs and nested tuples, with operations for converting between these structures and JSON. This enables efficient handling of complex data in API responses or configuration files. For example, it can transform a list like [(\"a\", [\"b\"; \"c\"]), (\"d\", [])] into a JSON object and back.",
      "description_length": 446,
      "index": 1311,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Controller_revision",
      "description": "Provides JSON serialization and deserialization for nested associative lists, enabling structured data exchange. Supports recursive key-value pairs, allowing conversion between complex data structures and JSON format. Used to encode and decode state information for immutable snapshots, facilitating data persistence and communication. Enables applications to manage state data in a format compatible with API interactions and external systems.",
      "description_length": 444,
      "index": 1312,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Controller_revision_list",
      "description": "Converts recursive, nested data structures between JSON and OCaml lists of key-value pairs, supporting deep hierarchies through recursive tuples. The module handles serialization and deserialization of complex objects, enabling structured data exchange. It provides functions to parse JSON strings into nested lists and to generate JSON from such structures. This allows for efficient manipulation of hierarchical data in applications requiring JSON-based communication.",
      "description_length": 470,
      "index": 1313,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data manipulation. Operates on recursive key-value pairs, supporting conversion between OCaml lists and JSON formats. Examples include parsing configuration files or transmitting data over networks. Provides direct access to nested fields through list traversal and transformation functions.",
      "description_length": 387,
      "index": 1314,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set_condition",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling structured data serialization and deserialization. The primary data type is a recursive list of key-value pairs, with operations for converting between this structure and JSON strings. This allows applications to persist or transmit complex data configurations in a standardized format. For example, a daemon configuration can be saved to a file or sent over a network as a JSON string.",
      "description_length": 471,
      "index": 1315,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set_list",
      "description": "Handles serialization and deserialization of nested associative lists into and from JSON format. Operates on a recursive key-value structure where values may contain additional nested lists. Supports operations like parsing JSON strings into structured data and converting data back to JSON. Enables manipulation of hierarchical configurations, such as reading and writing complex settings files.",
      "description_length": 396,
      "index": 1316,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set_spec",
      "description": "Handles the conversion of nested associative data structures, represented as lists of key-value pairs, into and out of JSON format using Yojson. The main data type is a list of tuples with string keys and list values, supporting recursive nesting. Operations include parsing JSON strings into these structures and generating JSON output from them. This enables efficient data exchange and manipulation of hierarchical configurations.",
      "description_length": 433,
      "index": 1317,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set_status",
      "description": "Handles the serialization and deserialization of nested associative lists into and from JSON format. Uses recursive structures with string keys and nested values, enabling structured data manipulation. Supports operations like parsing JSON strings into in-memory representations and converting data back to JSON. Examples include storing configuration states or transmitting status information across systems.",
      "description_length": 409,
      "index": 1318,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Daemon_set_update_strategy",
      "description": "Encapsulates a recursive key-value structure for hierarchical data, enabling serialization to and parsing from JSON. Supports operations to traverse, modify, and convert nested data trees. Allows manipulation of configuration-like structures by adding, removing, or updating key-value pairs at any level. Example tasks include exporting a configuration to JSON or reloading a structured payload from a file.",
      "description_length": 407,
      "index": 1319,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment",
      "description": "handles bidirectional conversion of nested associative data structures between JSON and OCaml lists of key-value pairs, using Yojson for serialization and parsing. it supports recursive field structures, enabling structured data exchange in applications requiring hierarchical data representation. operations include parsing JSON strings into nested lists and generating JSON from such structures. examples include converting configuration objects or API responses that contain nested maps and lists.",
      "description_length": 500,
      "index": 1320,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment_condition",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Processes recursive tuples that represent key-value pairs, enabling structured data exchange. Supports converting complex data structures to and from JSON for application interoperability. Example uses include storing deployment configurations or transmitting state information across systems.",
      "description_length": 398,
      "index": 1321,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment_list",
      "description": "Converts nested associative lists of strings to and from JSON using Yojson, enabling structured data serialization and deserialization. Operates on recursive list structures where each element is a key-value pair, allowing for complex data representation. Supports reading and writing JSON files, transforming nested data between in-memory and persistent formats. Example uses include saving deployment configurations to a file or loading them into a program for processing.",
      "description_length": 474,
      "index": 1322,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment_spec",
      "description": "Encodes and decodes nested key-value structures into JSON, supporting recursive object representations. Processes data as lists of strings and values, enabling seamless serialization and deserialization. Allows conversion between structured in-memory data and JSON format for external use. Example: transforming a list of environment variables into a JSON string for API transmission.",
      "description_length": 384,
      "index": 1323,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment_status",
      "description": "Handles the serialization and deserialization of hierarchical deployment data using JSON. Represents data as nested associative lists, supporting recursive structures for complex models. Converts between JSON and OCaml structures, enabling easy integration with external systems. Allows parsing of deployment status from JSON strings and generating JSON output for monitoring or logging.",
      "description_length": 387,
      "index": 1324,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Deployment_strategy",
      "description": "Handles the conversion of hierarchical data structures to and from JSON, enabling seamless data interchange. The core data type is a nested associative list, with operations for serialization and deserialization. For example, it can transform a configuration tree into a JSON string or parse a JSON response into a structured list. This supports dynamic configuration management in deployment workflows.",
      "description_length": 403,
      "index": 1325,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Replica_set",
      "description": "Handles JSON serialization and deserialization of nested associative lists, supporting recursive structures for hierarchical data. Provides functions to convert between OCaml's nested list format and JSON, enabling data exchange with external systems. Operations include parsing JSON into structured lists and generating JSON from nested key-value pairs. Useful for configuring or inspecting replica set definitions that require nested data representation.",
      "description_length": 456,
      "index": 1326,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Replica_set_condition",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested key-value pairs and recursive elements. The primary data type is a nested associative list of strings, with operations for serialization and deserialization. It allows converting complex data models into JSON format and reconstructing them programmatically. This enables efficient data exchange and storage of structured, hierarchical information.",
      "description_length": 426,
      "index": 1327,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Replica_set_list",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, supporting recursive structures. Processes key-value pairs as the primary data type, enabling serialization and deserialization of complex data hierarchies. Allows conversion between in-memory data structures and JSON strings for data exchange. Example uses include storing configuration settings or transmitting structured data over a network.",
      "description_length": 420,
      "index": 1328,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Replica_set_spec",
      "description": "Encodes and decodes nested associative lists of strings into and from JSON using Yojson, enabling structured data interchange. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. It allows converting complex data structures into JSON strings for storage or transmission and reconstructing them back into lists. For example, it can transform a list like [(\"a\", \"1\"); (\"b\", [(\"c\", \"2\")])] into a JSON object and vice versa.",
      "description_length": 486,
      "index": 1329,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Replica_set_status",
      "description": "Encodes and decodes nested associative data structures into and from JSON, enabling storage and transmission of hierarchical information. The primary data type is a list of key-value pairs, where values can themselves be lists of key-value pairs. This allows for representing and manipulating complex, recursive data such as configuration trees or nested metadata. Examples include serializing a cluster's state or parsing a distributed system's status from a JSON file.",
      "description_length": 470,
      "index": 1330,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Rolling_update_daemon_set",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange. Key operations include converting between JSON and recursive key-value pairs. Examples include parsing configuration data or exporting state information in a standardized format. Supports complex data structures through recursive processing and Yojson integration.",
      "description_length": 375,
      "index": 1331,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Rolling_update_deployment",
      "description": "Encodes and decodes nested associative lists of strings to and from JSON, supporting recursive structures. Provides functions to transform data between in-memory representations and JSON format. Examples include serializing configuration settings or parsing user-defined parameters from a JSON file. Operations are tailored for applications needing structured data exchange in a flexible, hierarchical format.",
      "description_length": 409,
      "index": 1332,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Rolling_update_stateful_set_strategy",
      "description": "Encapsulates logic for converting nested associative data between JSON and OCaml lists of key-value pairs, enabling serialization and deserialization of hierarchical structures. Supports recursive data transformations using Yojson, allowing structured data to be exchanged in JSON format. Operations include parsing JSON strings into nested lists and generating JSON output from complex data. Examples include converting configuration settings or stateful set parameters into a JSON-compatible format for API communication.",
      "description_length": 523,
      "index": 1333,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Scale",
      "description": "Handles the conversion of nested associative lists into and out of JSON format, enabling structured data to be stored and retrieved. The core data type is a recursive key-value structure, where values may also be associative lists. Operations include parsing JSON strings into this structure and generating JSON from it. This allows for efficient handling of complex, hierarchical data like configuration files or nested metadata.",
      "description_length": 430,
      "index": 1334,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Scale_spec",
      "description": "Encapsulates and manages structured data through recursive key-value pairs, enabling serialization and deserialization to and from JSON. Supports nested data structures where each level consists of string keys mapped to values, allowing for complex data representation. Operations include converting between JSON and in-memory representations, facilitating data exchange in applications that require structured information. Examples include parsing configuration files, transmitting data over networks, and storing hierarchical information persistently.",
      "description_length": 553,
      "index": 1335,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Scale_status",
      "description": "Handles the conversion of nested associative lists into and out of JSON format, supporting recursive structures for hierarchical data. Key data types include nested lists and JSON values, with operations for parsing and generating JSON. This enables tasks such as serializing configuration data or deserializing complex API responses. Examples include converting a multi-level settings structure to JSON or reconstructing a nested data model from a JSON string.",
      "description_length": 461,
      "index": 1336,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set",
      "description": "Manages stateful pod configurations with stable network and storage identities, enabling consistent pod behavior across restarts and rescheduling. Supports serialization and deserialization of nested associative lists into JSON, facilitating data exchange and persistence. Operations include parsing, generating, and manipulating hierarchical data structures. Example tasks include storing pod metadata in JSON format and reconstructing it for configuration updates.",
      "description_length": 466,
      "index": 1337,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set_condition",
      "description": "Encapsulates and manipulates the state of a statefulset through nested associative structures. Supports converting tuples of strings and lists into JSON and vice versa, enabling structured data representation and retrieval. Allows for efficient handling of hierarchical configurations within dynamic system states. Example operations include serializing a list of status updates or parsing a JSON-defined set of policies.",
      "description_length": 421,
      "index": 1338,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set_list",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa, supporting recursive structures for hierarchical data. Key data types include nested lists and JSON values, with operations for parsing and generating JSON. It enables tasks such as serializing configuration trees or deserializing complex data from external sources. Examples include converting a multi-level settings structure to JSON or reconstructing a nested list from a JSON string.",
      "description_length": 471,
      "index": 1339,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set_spec",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested key-value pairs with recursive values. The core data type is a recursive associative list, allowing representation of complex, structured information. Operations include parsing JSON into this format and converting the structure back to JSON. This enables handling of configuration trees, where each level can contain additional nested settings.",
      "description_length": 424,
      "index": 1340,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set_status",
      "description": "Encapsulates and manages hierarchical data structures through JSON serialization and deserialization. Supports recursive key-value pairs where values may contain nested lists, enabling structured data manipulation. Allows conversion between in-memory representations and JSON format for storage or transmission. Examples include parsing configuration trees, updating metadata, and persisting complex state information.",
      "description_length": 418,
      "index": 1341,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2.Stateful_set_update_strategy",
      "description": "Manages the serialization and deserialization of update strategy configurations using a recursive associative list structure. Supports converting between nested key-value pairs and JSON format for data persistence or transmission. Enables structured data manipulation, such as extracting specific parameters or modifying update strategy settings. Examples include parsing a JSON update strategy definition or generating a JSON payload from a configured strategy.",
      "description_length": 462,
      "index": 1342,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Controller_revision",
      "description": "Provides immutable state snapshots with serialization capabilities for structured data. Supports conversion between nested associative lists and JSON, enabling data persistence and exchange. Clients can serialize internal state for storage or transmission and deserialize it for reconstruction. Ensures data integrity by preventing mutations after creation, while allowing deletion when needed.",
      "description_length": 394,
      "index": 1343,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Controller_revision_list",
      "description": "Encodes and decodes nested associative data structures into and from JSON, enabling seamless data interchange. The primary data type is a list of key-value pairs, where each value may itself be a list of key-value pairs. This allows for parsing complex configurations or API responses, such as converting a JSON object representing multiple controller revisions into an OCaml list structure. Operations include serializing a list of revisions into a JSON string or deserializing a JSON input into a structured OCaml representation.",
      "description_length": 531,
      "index": 1344,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set",
      "description": "Handles serialization and deserialization of nested string-keyed structures into and from JSON format using Yojson. Operates on a recursive list type where each element is a key-value pair. Supports converting complex configurations to and from JSON for data interchange. Enables structured data manipulation in applications requiring JSON-based communication.",
      "description_length": 360,
      "index": 1345,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set_condition",
      "description": "Handles conversion between nested associative data structures and JSON, enabling serialization and deserialization of hierarchical key-value pairs. Core data types include lists of (string * string list) pairs, with operations for parsing and generating JSON. Examples include converting a configuration tree to a JSON string or extracting nested values from a parsed object. Supports recursive field handling for complex data exchange scenarios.",
      "description_length": 446,
      "index": 1346,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set_list",
      "description": "Handles the conversion of nested associative lists into and out of JSON format using Yojson. Operates on recursive list structures where each element is a key-value pair, enabling structured data serialization and deserialization. Supports complex data transformations in applications needing JSON-based data interchange. For example, it can convert a list like `[(\"a\", [(\"b\", \"c\")])` into a JSON object and back.",
      "description_length": 413,
      "index": 1347,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set_spec",
      "description": "Handles the serialization and deserialization of nested associative lists into and from JSON format using Yojson. Operates on a recursive type where keys map to values that can themselves be associative lists. Supports operations like parsing JSON strings into structured data and converting data back into JSON format. Enables efficient handling of hierarchical configurations or data models in applications requiring persistent storage or network transmission.",
      "description_length": 462,
      "index": 1348,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set_status",
      "description": "Encodes and decodes nested string-based data structures into and from JSON, supporting recursive key-value hierarchies. The primary data type is a list of pairs, where each value may recursively contain the same structure. This enables handling of complex configurations, such as flattening or extracting specific branches from a nested metadata tree. Operations include serializing a configuration into a JSON string or parsing a JSON input into a structured list for programmatic access.",
      "description_length": 489,
      "index": 1349,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Daemon_set_update_strategy",
      "description": "Handles serialization and deserialization of nested associative lists into JSON format, enabling structured data exchange. Operates on recursive key-value pairs, supporting complex data transformations. Examples include converting configuration trees to JSON for storage or parsing incoming JSON into a typed structure for processing. Provides direct manipulation of nested string-based data through Yojson integration.",
      "description_length": 419,
      "index": 1350,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment",
      "description": "handles the conversion of nested associative lists to and from JSON, enabling structured data interchange. It operates on recursive key-value pairs, supporting serialization and deserialization of complex data structures. This allows for easy integration of configuration or state data in applications. For example, it can transform a list of environment variables into a JSON string for storage or transmission.",
      "description_length": 412,
      "index": 1351,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment_condition",
      "description": "Handles the conversion of nested string-based associative lists to and from JSON, enabling the serialization and deserialization of hierarchical data structures. Key types include nested lists and JSON values, with operations for parsing and generating JSON. This allows for structured data representation in deployment states, such as encoding configuration trees or extracting deployment parameters from JSON payloads.",
      "description_length": 420,
      "index": 1352,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment_list",
      "description": "Converts nested associative lists into JSON format and vice versa, supporting recursive structures for hierarchical data. Key data types include nested lists and JSON values, with operations for parsing and generating JSON. It enables handling of complex data models by traversing and serializing nested key-value pairs. For example, it can transform a list of deployment configurations into a JSON string or reconstruct a deployment structure from a JSON input.",
      "description_length": 462,
      "index": 1353,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment_spec",
      "description": "Handles the serialization and deserialization of nested associative lists into and from JSON format using Yojson. Operates on a recursive key-value pair structure, enabling structured data manipulation. Converts complex data representations into JSON for storage or transmission and reconstructs them back into native OCaml types. Examples include saving configuration settings to a file or parsing incoming JSON payloads into a typed data structure.",
      "description_length": 450,
      "index": 1354,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment_status",
      "description": "Handles the serialization and deserialization of nested associative lists into and from JSON format using Yojson. Operates on recursive key-value structures, enabling structured data to be exchanged in applications. Supports converting complex, hierarchical data between OCaml and JSON representations. Examples include saving deployment configurations to files or parsing incoming JSON payloads for deployment tracking.",
      "description_length": 420,
      "index": 1355,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Deployment_strategy",
      "description": "Handles the serialization and deserialization of hierarchical data structures using JSON. Operates on a recursive key-value pair type, enabling manipulation of nested configurations. Allows conversion between structured data and JSON format for storage or transmission. Can be used to manage deployment configurations or dynamic settings in a modular way.",
      "description_length": 355,
      "index": 1356,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Replica_set",
      "description": "Manages structured data through JSON serialization and deserialization, handling nested associative lists of strings. Provides functions to convert between recursive key-value pairs and JSON representations. Enables data persistence and communication across systems requiring structured data exchange. Examples include storing configuration settings and transmitting state between services.",
      "description_length": 390,
      "index": 1357,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Replica_set_condition",
      "description": "Handles conversion between nested associative data structures and JSON, enabling serialization and deserialization of hierarchical data. Key types include lists of key-value pairs with nested lists, and operations include parsing and generating JSON using Yojson. This allows for structured data exchange, such as representing replica set states with complex, recursive fields. Example uses include storing and retrieving configuration details or status information in a consistent format.",
      "description_length": 489,
      "index": 1358,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Replica_set_list",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling structured data interchange. Processes recursive key-value pairs, allowing for complex data serialization and reconstruction. Supports operations like parsing JSON strings into in-memory representations and converting those structures back into JSON. Examples include storing configuration data in JSON and reloading it, or transmitting hierarchical data between systems.",
      "description_length": 456,
      "index": 1359,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Replica_set_spec",
      "description": "Converts nested associative lists to and from JSON, enabling serialization and deserialization of hierarchical data structures. The primary data type is a nested list of key-value pairs, with operations for parsing and generating JSON. This allows applications to store and retrieve complex data models in a structured format. For example, it can represent and exchange configuration settings or nested data hierarchies.",
      "description_length": 420,
      "index": 1360,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Replica_set_status",
      "description": "Handles conversion of nested associative data structures between JSON and OCaml lists of key-value pairs, enabling serialization and deserialization of hierarchical data. The main data type is a list of (string * t) pairs, where t can be another list, allowing recursive nesting. Operations include parsing JSON strings into this structure and generating JSON from it. This supports tasks like storing and retrieving complex configurations or state information in a structured format.",
      "description_length": 484,
      "index": 1361,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Rolling_update_daemon_set",
      "description": "Handles the serialization and deserialization of nested key-value structures into JSON, enabling efficient data interchange. The primary data type is a nested associative list, with operations for converting between this structure and JSON format. This allows for easy manipulation and storage of hierarchical data models, such as configuration settings or structured logs. For example, it can transform a complex configuration tree into a JSON string for API transmission or read a JSON response into a structured OCaml value for processing.",
      "description_length": 542,
      "index": 1362,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Rolling_update_deployment",
      "description": "Handles the conversion of nested associative lists into and out of JSON format, enabling structured data serialization and deserialization. Key data types include nested lists and JSON values, with operations for parsing and generating JSON. This allows for efficient manipulation of hierarchical data in deployment configurations. For example, it can transform a multi-level configuration into a JSON string for storage or transmission.",
      "description_length": 437,
      "index": 1363,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Rolling_update_stateful_set_strategy",
      "description": "Handles serialization and deserialization of nested associative lists into JSON format, enabling structured data exchange. Utilizes recursive key-value pairs to represent complex data hierarchies. Supports converting configurations between OCaml and JSON, such as transforming a list of update parameters into a JSON object for API communication. Provides direct manipulation of nested data structures through JSON encoding and decoding functions.",
      "description_length": 447,
      "index": 1364,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set",
      "description": "Manages hierarchical data structures through JSON serialization and deserialization, enabling the conversion of nested key-value pairs into and from JSON format. Supports complex data modeling with recursive structures, allowing for flexible data manipulation and storage. Operations include parsing JSON strings into structured data and generating JSON output from in-memory representations. Useful for configuring and persisting stateful pod configurations with consistent identities and storage mappings.",
      "description_length": 507,
      "index": 1365,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set_condition",
      "description": "Encapsulates and manages hierarchical state information through a nested associative list structure, enabling serialization and deserialization to and from JSON. Key data types include nested lists and key-value pairs, with operations for converting between JSON and in-memory representations. This allows for structured data manipulation, such as extracting specific fields from complex state models or generating JSON outputs for external systems. Examples include parsing a statefulset's status into a readable format or updating nested fields before re-serializing the data.",
      "description_length": 578,
      "index": 1366,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set_list",
      "description": "Encapsulates and manipulates hierarchical data structures through JSON serialization and deserialization. Processes recursive key-value pairs where values may contain nested lists, enabling structured data handling. Supports converting between nested associative lists and JSON format for data persistence or communication. Examples include storing configuration trees or parsing complex API responses.",
      "description_length": 402,
      "index": 1367,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set_spec",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. Utilizes nested associative lists to represent complex key-value relationships, supporting recursive nesting. Operations include converting between JSON and OCaml structures, enabling efficient data interchange. Example uses include storing configuration trees or nested metadata in a structured, portable format.",
      "description_length": 418,
      "index": 1368,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set_status",
      "description": "Encodes and decodes nested associative data structures using JSON, supporting recursive field representations. Provides functions to convert between lists of key-value pairs and JSON values, enabling structured data manipulation. Operations include parsing, generating, and transforming hierarchical data for interoperability. Examples include serializing status information from a stateful set or reconstructing complex configurations from stored JSON.",
      "description_length": 453,
      "index": 1369,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1.Stateful_set_update_strategy",
      "description": "Handles the conversion of nested associative lists to and from JSON, enabling structured data serialization and deserialization. Uses recursive tuples to represent key-value pairs, supporting complex data transformations. Allows applications to encode and decode hierarchical data for storage or communication. Examples include converting configuration maps to JSON strings and reconstructing them into nested tuples.",
      "description_length": 417,
      "index": 1370,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Controller_revision",
      "description": "provides a mechanism for serializing and deserializing hierarchical data structures into JSON, enabling storage and transmission of nested key-value configurations. It supports recursive nesting, allowing complex data models to be represented as associative lists and converted to JSON format. This facilitates the creation of immutable state snapshots, which can be stored and retrieved without modification. Examples include converting a configuration tree into a JSON string for storage or parsing a JSON response into a structured list for processing.",
      "description_length": 555,
      "index": 1371,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Controller_revision_list",
      "description": "Encapsulates hierarchical data as recursive tuples of string pairs, enabling bidirectional conversion to and from JSON via Yojson. Supports serialization and deserialization of nested structures, allowing preservation of complex, tree-like data during storage or transmission. Operations include parsing JSON strings into structured tuples and generating JSON output from in-memory representations. Example uses include storing configuration trees or versioned control data in a portable format.",
      "description_length": 495,
      "index": 1372,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment",
      "description": "Manages structured data serialization and deserialization through recursive key-value pairs, enabling JSON interchange for complex data formats. Provides functions to convert between nested associative lists and JSON strings, supporting deep data transformations. Operations include encoding and decoding with flexible handling of nested structures. Example use cases include storing configuration settings, exchanging data between services, and persisting application state.",
      "description_length": 475,
      "index": 1373,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_condition",
      "description": "Encapsulates deployment state through structured key-value pairs, enabling serialization and deserialization of nested data via JSON. Supports operations to transform hierarchical data between OCaml lists and JSON formats. Examples include parsing deployment configurations from JSON strings and generating JSON output from internal data structures. Key types include lists of tuples and JSON values, with functions for bidirectional conversion.",
      "description_length": 445,
      "index": 1374,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_list",
      "description": "Converts nested associative lists of strings to and from JSON using Yojson, enabling structured data serialization and deserialization. Operates on recursive list structures where each element is a key-value pair, supporting complex data transformations. Allows applications to read and write nested data in JSON format, such as converting configuration trees or hierarchical settings. Examples include parsing deployment parameters from a JSON file or generating JSON output for API responses.",
      "description_length": 494,
      "index": 1375,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_rollback",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling structured data persistence and retrieval. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. It allows applications to store deployment configurations and restore them during rollbacks. For example, it can convert a deployment's state into a JSON string for storage or parse a saved JSON back into a usable data structure.",
      "description_length": 474,
      "index": 1376,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_spec",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested key-value pairs and lists. The primary data type is a nested associative list, with operations for serialization and deserialization. It allows converting complex configurations into JSON and reconstructing them into OCaml data structures. For example, it can transform a multi-level configuration into a JSON string and parse it back into a structured list.",
      "description_length": 437,
      "index": 1377,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_status",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Operates on recursive key-value structures, enabling data to be stored and retrieved in a structured, interoperable format. Supports complex data transformations between in-memory representations and JSON strings. For example, it can convert a list like `[\"a\", \"b\", [\"c\", \"d\"]]` into a JSON object and back.",
      "description_length": 412,
      "index": 1378,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Deployment_strategy",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format, enabling structured data exchange. Operates on recursive key-value pairs, supporting complex data transformations. Examples include converting configuration maps to JSON for API requests or parsing incoming JSON into internal data structures for deployment logic. Provides direct manipulation of string-based nested lists through JSON encoding and decoding functions.",
      "description_length": 459,
      "index": 1379,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Rollback_config",
      "description": "Encodes and decodes nested associative lists into JSON, supporting recursive structures where values may also be lists. The primary data type is a recursive key-value structure, with operations for serialization and deserialization. It enables handling of complex, hierarchical data like configuration trees by converting them to and from JSON format. For example, it can transform a nested list of settings into a JSON string for storage or transmission.",
      "description_length": 455,
      "index": 1380,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Rolling_update_deployment",
      "description": "Handles serialization and deserialization of nested associative lists between JSON and OCaml structures, enabling structured data manipulation. Main data types include recursive key-value pairs, with operations for converting between JSON and OCaml representations. Examples include parsing configuration files, modifying hierarchical settings, and generating JSON outputs from nested data structures.",
      "description_length": 401,
      "index": 1381,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Rolling_update_stateful_set_strategy",
      "description": "Handles serialization and deserialization of nested associative lists into JSON format using Yojson. Processes recursive key-value structures, enabling structured data exchange in applications. Supports converting complex data between OCaml and JSON representations. Example: transforming a configuration tree into a JSON string for API transmission or parsing incoming JSON into a typed OCaml structure.",
      "description_length": 404,
      "index": 1382,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Scale",
      "description": "Handles the conversion of nested associative lists into JSON format and vice versa, enabling structured data exchange. Operates on recursive lists where each element is a key-value pair, using Yojson for serialization and deserialization. Supports complex data transformations in applications needing to persist or transmit hierarchical data. For example, it can convert a list like `[\"a\", [\"b\", \"c\"]]` into a JSON object and reconstruct it accurately.",
      "description_length": 452,
      "index": 1383,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Scale_spec",
      "description": "Encodes and decodes nested hierarchical data structures using JSON, representing them as recursive tuples. Key data types include lists of key-value pairs and nested tuples, with operations for serialization and deserialization. Functions convert between JSON strings and structured data, enabling configuration management. For example, a musical scale's intervals and properties can be stored and retrieved as a nested JSON object.",
      "description_length": 432,
      "index": 1384,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Scale_status",
      "description": "Handles the conversion of nested associative list structures to and from JSON, enabling seamless data interchange. The primary data type is a nested list of key-value pairs, with operations for serialization and deserialization. It supports complex hierarchical data models by recursively processing nested elements. For example, it can transform a list like `[(\"a\", 1); (\"b\", [(\"c\", \"d\")])]` into a JSON object and back.",
      "description_length": 421,
      "index": 1385,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set",
      "description": "Manages stateful pod configurations with stable identities, handling network and storage consistency. Supports JSON serialization and deserialization of nested key-value structures, enabling data exchange with recursive field handling. Allows conversion between structured data and JSON, facilitating configuration management and persistence. Enables reliable storage mapping and network identity tracking for pod deployments.",
      "description_length": 426,
      "index": 1386,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set_condition",
      "description": "Encapsulates and manipulates the state of a statefulset through a structured, nested associative list format. Supports bidirectional conversion between this structure and JSON, enabling storage, transmission, and reconstruction of complex, hierarchical data. Operations include parsing JSON into the internal representation and serializing the internal state back to JSON. Example uses include saving the current state of a statefulset for auditing or restoring it during system recovery.",
      "description_length": 488,
      "index": 1387,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set_list",
      "description": "Transforms nested key-value lists into JSON objects and reconstructs them, using a recursive list structure where each element pairs a string key with another list. Supports hierarchical data serialization and deserialization, enabling structured data manipulation. Operations include converting between JSON and the internal list format, preserving nested relationships. Example: serializing a configuration tree with multiple levels of settings and retrieving it intact.",
      "description_length": 472,
      "index": 1388,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set_spec",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. Utilizes nested associative lists of strings to represent complex, recursive data models. Supports converting between structured data and JSON, enabling easy integration with external systems. Examples include parsing a JSON configuration file into a nested list structure or exporting a data model to a JSON string for storage or transmission.",
      "description_length": 449,
      "index": 1389,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set_status",
      "description": "Encodes and decodes recursive string-keyed associative lists into JSON format. Supports nested structures with string keys and arbitrary values, enabling data serialization and deserialization. Allows conversion between in-memory representations and JSON strings for storage or transmission. Example uses include saving configuration states or exchanging data between systems.",
      "description_length": 376,
      "index": 1390,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1.Stateful_set_update_strategy",
      "description": "handles the conversion of nested associative data structures between JSON and OCaml, enabling serialization and deserialization of hierarchical key-value pairs. it supports recursive field structures, allowing for complex data representations in stateful set update configurations. operations include parsing JSON strings into OCaml lists and generating JSON output from structured data. for example, it can transform a list of update strategy parameters into a JSON object for API communication or read a JSON configuration to apply specific update logic.",
      "description_length": 556,
      "index": 1391,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1alpha1.Initializer",
      "description": "Encapsulates logic for converting recursive data structures, represented as lists of key-value pairs and nested tuples, to and from JSON using Yojson. Supports serialization and deserialization of complex, hierarchical data, enabling seamless data interchange. Operations include parsing JSON strings into structured data and generating JSON output from in-memory representations. Examples include storing configuration trees, transmitting nested data over networks, and persisting hierarchical state in files.",
      "description_length": 510,
      "index": 1392,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1alpha1.Initializer_configuration",
      "description": "Converts nested associative lists, structured as string keys with value lists, to and from JSON using Yojson, enabling data serialization and deserialization. The module supports recursive traversal of key-value pairs, ensuring complex structures are accurately represented. Operations include parsing JSON into structured lists and generating JSON from nested associations. Examples include saving configuration states or exchanging data between systems.",
      "description_length": 455,
      "index": 1393,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1alpha1.Initializer_configuration_list",
      "description": "Handles conversion between nested key-value lists and JSON, enabling serialization and deserialization of hierarchical data structures. The primary data type is a list of tuples representing key-value pairs, with values potentially being nested lists. Operations include parsing JSON strings into this structure and generating JSON from it. For example, it can transform a JSON object like `{\"a\": [{\"b\": \"c\"}]}` into a list structure and vice versa.",
      "description_length": 449,
      "index": 1394,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1alpha1.Rule",
      "description": "Encapsulates structured data through a tuple of API groups, versions, and resources, enabling precise configuration and validation. Supports bidirectional conversion of nested key-value lists to and from JSON, facilitating data exchange with recursive structures. Operations include parsing complex JSON objects and generating valid serialized representations. Example tasks include deserializing API definitions and exporting hierarchical configurations for external systems.",
      "description_length": 476,
      "index": 1395,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Mutating_webhook_configuration",
      "description": "Handles the conversion of nested key-value structures to and from JSON, enabling structured data manipulation. Core data types include lists of tuples and nested associative arrays, with operations for serialization and deserialization. This allows for dynamic configuration adjustments in webhook processing pipelines. For example, it can parse a JSON configuration to modify admission rules or generate response payloads based on incoming requests.",
      "description_length": 450,
      "index": 1396,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Mutating_webhook_configuration_list",
      "description": "Provides a structured way to handle lists of mutating webhook configurations through JSON serialization. Supports nested key-value pairs with list values, enabling conversion between custom tree-like data and JSON format. Operations include parsing JSON into structured data and generating JSON from in-memory representations. Example tasks include loading webhook settings from a configuration file and exporting them in a standardized format.",
      "description_length": 444,
      "index": 1397,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Rule_with_operations",
      "description": "Encapsulates recursive key-value structures for JSON serialization and deserialization. Supports nested associative lists with string keys and values of the same type, enabling bidirectional conversion between data and JSON. Operations include parsing JSON into structured data and generating JSON from nested records. Example uses include storing configuration trees or hierarchical datasets in a portable format.",
      "description_length": 414,
      "index": 1398,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Service_reference",
      "description": "Handles the conversion of nested associative lists into and out of JSON format using Yojson, supporting hierarchical and recursive data structures. Key data types include nested lists and associative arrays, with operations for serialization and deserialization. Examples include parsing a multi-level configuration structure or generating a JSON response from a deeply nested data model.",
      "description_length": 388,
      "index": 1399,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Validating_webhook_configuration",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Provides functions to convert between recursive key-value structures and JSON strings, enabling data interchange in webhook configurations. Operations include parsing JSON into lists and generating JSON from structured data. Example use cases include storing and retrieving webhook rules or validating incoming request payloads.",
      "description_length": 433,
      "index": 1400,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Validating_webhook_configuration_list",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format, enabling structured data exchange. It supports recursive key-value pair operations, allowing for complex data transformations. Users can convert configuration data into JSON for transmission or parse incoming JSON into structured lists. This capability is essential for managing webhook configurations in a flexible and interoperable manner.",
      "description_length": 433,
      "index": 1401,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Webhook",
      "description": "Encapsulates structured data using a recursive associative list type, enabling conversion to and from JSON. Supports nested key-value pairs, allowing for complex data serialization and parsing. Operations include encoding arbitrary data structures into JSON and decoding JSON into nested lists. Can represent and manipulate configuration settings, event payloads, or resource metadata in a flexible, hierarchical format.",
      "description_length": 420,
      "index": 1402,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1.Webhook_client_config",
      "description": "Encodes and decodes nested key-value structures into JSON using Yojson, supporting recursive serialization and deserialization. Processes lists of lists and maps for structured data exchange. Allows conversion between in-memory representations and JSON strings for web interactions. Enables handling of complex configurations in webhook communication workflows.",
      "description_length": 361,
      "index": 1403,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Ip_block",
      "description": "Handles the conversion of structured data between nested associative lists and JSON format, enabling seamless data interchange. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. For example, it can transform a list like `[\"a\", \"b\", \"c\", [\"d\", \"e\"]]` into a JSON object or parse a JSON string back into this structure. This supports efficient data handling in applications working with complex, nested configurations.",
      "description_length": 483,
      "index": 1404,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange. Processes recursive key-value pairs, supporting conversion between OCaml lists and JSON formats. Allows for easy integration with systems requiring JSON-based network policy representation. Example: converting a policy rule list into a JSON string for API transmission.",
      "description_length": 380,
      "index": 1405,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_egress_rule",
      "description": "handles the conversion of structured data between nested associative lists and JSON format, enabling seamless data interchange. it supports recursive key-value pairs and provides serialization and deserialization functions. operations include parsing JSON into lists and generating JSON from list structures. for example, it can transform a list representing egress rules into a JSON object for API transmission or read such data from a configuration file.",
      "description_length": 456,
      "index": 1406,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_ingress_rule",
      "description": "Handles the serialization and deserialization of network policy ingress rules, enabling structured data to be represented as JSON. It supports nested key-value pairs with list values, allowing for the conversion of complex, recursive data models. Operations include parsing JSON into structured records and generating JSON from in-memory representations. This facilitates the exchange of policy configurations between systems, such as converting a rule's port and source specifications into a JSON format for API transmission.",
      "description_length": 526,
      "index": 1407,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_list",
      "description": "Handles the conversion of nested associative data structures into and out of JSON format, enabling seamless data interchange. The primary data type is a list of key-value pairs, where values can themselves be lists of key-value pairs, allowing for recursive data representation. Operations include parsing JSON strings into this structure and generating JSON from it. For example, it can serialize a list of network policies with nested parameters or deserialize a configuration file containing policy rules.",
      "description_length": 508,
      "index": 1408,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_peer",
      "description": "handles the serialization and deserialization of hierarchical data structures into and from JSON format. it operates on a recursive key-value pair type, enabling the representation of nested configurations. this capability allows for the precise encoding and decoding of complex, structured data. for example, it can convert a configuration tree into a JSON string or parse a JSON document into a nested associative list.",
      "description_length": 421,
      "index": 1409,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_port",
      "description": "Encodes and decodes hierarchical port configurations using JSON, supporting nested structures through associative lists. Key data types include nested lists and string-keyed maps, with operations for serialization and deserialization. It enables parsing of complex port rules from JSON and generating structured data for network policy enforcement. For example, it can transform a JSON representation of allowed ports into an internal data structure for validation or logging.",
      "description_length": 476,
      "index": 1410,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1.Network_policy_spec",
      "description": "Encodes and decodes nested associative lists into JSON using Yojson, enabling data serialization and deserialization. Processes recursive key-value structures where each level contains string keys and mixed-value elements. Supports converting complex data representations into JSON format for storage or transmission, and reconstructing them back into native OCaml structures. Example uses include saving policy configurations to files or transmitting them over networks.",
      "description_length": 471,
      "index": 1411,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Aggregation_rule",
      "description": "Handles the serialization and deserialization of nested associative lists into JSON format using Yojson. Processes recursive key-value structures, enabling data to be stored, transmitted, and reconstructed. Supports operations like converting a list of role mappings to a JSON string or parsing a JSON input back into a structured list. Useful for applications needing to manage and exchange clustered role configurations in a standardized format.",
      "description_length": 447,
      "index": 1412,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Cluster_role",
      "description": "Handles serialization and deserialization of nested associative structures into JSON, using a recursive list format for key-value pairs. Supports operations to encode and decode complex data for communication protocols. Allows manipulation of structured data through direct access to keys and nested values. Enables efficient data exchange in cluster management systems by transforming policy configurations into transportable JSON format.",
      "description_length": 439,
      "index": 1413,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Cluster_role_binding",
      "description": "manages relationships between subjects and cluster roles by linking to a cluster role through a reference and defining access via subjects. it works with data types such as subject lists and role references, enabling operations like parsing and generating JSON structures from nested key-value pairs. it allows for the creation of bindings that grant specific subjects access to predefined cluster roles. examples include serializing a role binding configuration or extracting subject information from a JSON document.",
      "description_length": 518,
      "index": 1414,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Cluster_role_binding_list",
      "description": "Handles the serialization and deserialization of hierarchical data structures into and from JSON format. Operates on a recursive associative list type where keys map to either values or nested lists. Supports operations like parsing JSON strings into structured data and converting structured data back into JSON strings. Enables efficient manipulation of complex configurations or metadata stored in nested key-value formats.",
      "description_length": 426,
      "index": 1415,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Cluster_role_list",
      "description": "Encapsulates and manages structured data through JSON serialization and deserialization. Processes recursive key-value pairs represented as nested associative lists, enabling data transformation for storage or communication. Supports bidirectional conversion between JSON and in-memory structures, allowing for flexible data handling. Examples include parsing configuration files or transmitting hierarchical data across systems.",
      "description_length": 429,
      "index": 1416,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Policy_rule",
      "description": "Encapsulates hierarchical data through nested associative lists, supporting bidirectional conversion to and from JSON using Yojson. Key operations include parsing JSON into structured lists and serializing lists back into JSON format. This enables handling of recursive data models within policy-related configurations. Examples include transforming policy conditions into JSON for storage or interpreting JSON-formatted rules into internal representations.",
      "description_length": 457,
      "index": 1417,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Role",
      "description": "Encapsulates nested associative data structures, enabling conversion between list-of-pairs and JSON format. Supports recursive field handling, allowing serialization and deserialization of complex, hierarchical data. Operations include parsing JSON into structured lists and generating JSON from nested key-value pairs. Useful for exchanging data between systems that require nested, structured representations.",
      "description_length": 411,
      "index": 1418,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Role_binding",
      "description": "provides a mechanism for associating subjects with roles across namespaces, using a structured format that supports serialization and deserialization of nested data. it defines a recursive list type for hierarchical data and includes operations to convert between this structure and JSON. examples include storing role assignments in a JSON file and parsing them back into a structured format for use in access control decisions. it enables flexible representation of role bindings that can be shared and manipulated across different contexts.",
      "description_length": 543,
      "index": 1419,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Role_binding_list",
      "description": "Encodes and decodes recursive string-based associative lists into and from JSON format. Processes nested structures where each level consists of key-value pairs. Supports serialization and deserialization of complex data hierarchies. Enables data exchange between systems by converting between OCaml lists and JSON representations.",
      "description_length": 331,
      "index": 1420,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Role_list",
      "description": "Encodes and decodes recursive string-based associative lists into and from JSON format. Processes nested structures where each level consists of key-value pairs. Supports serialization for data exchange and deserialization for reconstructing structured information. Enables handling of complex, hierarchical data within applications requiring JSON integration.",
      "description_length": 360,
      "index": 1421,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Role_ref",
      "description": "Converts nested associative lists into JSON and vice versa, supporting recursive structures for hierarchical data. Key operations include parsing and generating JSON from string representations. The primary data type is a nested associative list, where each entry maps a string to a list of string pairs. This enables handling of complex data, such as converting a list of user roles with nested permissions into a JSON object.",
      "description_length": 427,
      "index": 1422,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1.Subject",
      "description": "Manages hierarchical data through recursive key-value structures, enabling serialization and deserialization to and from JSON. Supports nested objects via recursive tuples and handles both direct object references and non-object values like user and group names. Operations include converting between JSON and structured data, allowing flexible data manipulation in applications requiring nested representations. Examples include storing role bindings with user names or object IDs and exchanging structured data across system boundaries.",
      "description_length": 538,
      "index": 1423,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Aggregation_rule",
      "description": "Handles the conversion of nested string-based associative lists to and from JSON, enabling the storage and retrieval of hierarchical data structures. The primary data type is a nested list of key-value pairs, with operations for parsing and generating JSON. This allows for the structured representation of aggregation rules, such as mapping multiple cluster roles into a single aggregated role.",
      "description_length": 395,
      "index": 1424,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Cluster_role",
      "description": "Handles the serialization and deserialization of nested key-value structures into and from JSON format. Utilizes Yojson to manage hierarchical data represented as lists of string-keyed tuples. Supports operations for converting complex, recursive data between OCaml and JSON. Enables efficient data interchange in systems requiring structured, nested configuration or policy representations.",
      "description_length": 391,
      "index": 1425,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Cluster_role_binding",
      "description": "manages relationships between subjects and cluster roles by mapping subjects to specific cluster roles through a structured, serializable format. it defines a data type for representing these mappings, including subjects and references to cluster roles, and provides functions to encode and decode this structure into and from JSON. operations include parsing JSON input into the internal representation, generating JSON output, and manipulating nested elements within the structure. for example, it can convert a list of subject-role associations into a JSON object for API transmission or reconstruct the structure from a received JSON payload.",
      "description_length": 646,
      "index": 1426,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Cluster_role_binding_list",
      "description": "Converts nested associative data between JSON and OCaml lists of key-value pairs, enabling structured configuration handling. Supports bidirectional serialization of hierarchical data, with each key mapping to a list of values. Operations include parsing JSON strings into structured lists and generating JSON from these structures. Example uses include loading and saving configuration trees or exchanging data between systems using a tree-based JSON format.",
      "description_length": 459,
      "index": 1427,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Cluster_role_list",
      "description": "Encodes and decodes nested key-value structures into JSON, supporting recursive lists for hierarchical data. The primary data type is a list of pairs, where values can themselves be lists of pairs. This enables serialization of complex configurations, such as role-based access controls with nested permissions. Operations include parsing JSON strings into structured lists and generating JSON output from in-memory representations.",
      "description_length": 432,
      "index": 1428,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Policy_rule",
      "description": "Encodes and decodes hierarchical data structures using JSON, supporting nested key-value pairs through recursive associative lists. The module handles serialization and deserialization of tree-like data, allowing for structured representation of policy-related information. Operations include converting between JSON and list formats, preserving nested relationships. Example uses include storing policy conditions, thresholds, or configuration parameters in a nested, structured way.",
      "description_length": 484,
      "index": 1429,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Role",
      "description": "Manages hierarchical data through JSON serialization and deserialization, enabling structured data manipulation. Supports nested key-value pairs with list values, allowing for complex data representation. Provides functions to convert between OCaml associative lists and JSON formats. Enables efficient data storage, retrieval, and transformation in applications requiring nested data structures.",
      "description_length": 396,
      "index": 1430,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Role_binding",
      "description": "provides a mechanism for associating subjects with roles across namespaces, using structured data to represent relationships and permissions. It handles nested associative lists through JSON serialization, enabling the storage and retrieval of hierarchical configurations. Operations include parsing, generating, and manipulating these structures to define access controls. Examples include binding a user to a role in a specific namespace or exporting role assignments for external processing.",
      "description_length": 494,
      "index": 1431,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Role_binding_list",
      "description": "Encodes and decodes nested associative lists into JSON using recursive tuple structures. Processes string-based key-value pairs, enabling data serialization and deserialization. Supports complex data transformations in applications needing structured JSON handling. Example: converting a multi-level configuration map to a JSON string or parsing a JSON response into a nested tuple structure.",
      "description_length": 392,
      "index": 1432,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Role_list",
      "description": "Serializes and deserializes recursive key-value structures into and from JSON, supporting nested configurations and data hierarchies. The module works with lists of pairs where each value can itself be a list of pairs, enabling complex data representations. It allows converting a structured JSON object into a nested list format and vice versa. For example, it can transform a JSON configuration with multiple levels of settings into a flat list of key-value pairs for easier manipulation.",
      "description_length": 490,
      "index": 1433,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Role_ref",
      "description": "Encodes and decodes nested associative lists into JSON format, enabling data serialization and deserialization. Processes recursive key-value structures, allowing for flexible representation of hierarchical data. Supports conversion between OCaml lists and JSON strings, facilitating data exchange in applications. Examples include storing configuration settings or transmitting structured data over a network.",
      "description_length": 410,
      "index": 1434,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1.Subject",
      "description": "Manages hierarchical data through JSON serialization and deserialization, supporting nested structures and recursive types. Provides functions to convert between associative lists and JSON, enabling flexible data manipulation. Handles both object references and non-object identifiers, such as user and group names. Allows for structured data exchange in role-binding contexts, facilitating complex data modeling and transformation.",
      "description_length": 432,
      "index": 1435,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Aggregation_rule",
      "description": "Handles the conversion of nested associative data structures between JSON and OCaml lists of key-value pairs, enabling serialization and deserialization of hierarchical data. Key types include lists of (string * 'a list) pairs, with operations for parsing and generating JSON using Yojson. This allows for structured data exchange, such as transforming a JSON object with nested arrays into an OCaml list for further processing. Example use cases include reading configuration files or API responses containing recursive data formats.",
      "description_length": 534,
      "index": 1436,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Cluster_role",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data manipulation. Supports recursive key-value pairs, allowing for complex data transformations. Examples include converting policy configurations to JSON for storage or parsing incoming JSON data into a usable format. Operations focus on encoding and decoding, with direct support for string-based nested structures.",
      "description_length": 414,
      "index": 1437,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Cluster_role_binding",
      "description": "Manages cluster role bindings by associating subjects with cluster roles through a structured data format. Utilizes a recursive list of key-value pairs for representing and exchanging data in JSON. Supports serialization and deserialization of complex nested structures, enabling flexible data handling in cluster management systems. Allows for precise control over how subjects are linked to roles in a global namespace.",
      "description_length": 421,
      "index": 1438,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Cluster_role_binding_list",
      "description": "Handles the serialization and deserialization of nested key-value structures into and from JSON, using Yojson for efficient data conversion. The primary data type is a recursive tuple structure consisting of strings and nested elements, enabling representation of complex hierarchical data. Operations include parsing JSON strings into these structures and converting them back into formatted JSON. This allows for easy manipulation of configuration trees or nested data payloads within applications.",
      "description_length": 500,
      "index": 1439,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Cluster_role_list",
      "description": "Converts nested associative lists of strings to and from JSON, supporting recursive structures for hierarchical data. Key operations include parsing JSON into nested lists and serializing lists back to JSON format. This enables handling of complex data models with deep nesting through simple, direct transformations. Examples include converting configuration trees or hierarchical datasets between in-memory representations and JSON files.",
      "description_length": 440,
      "index": 1440,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Policy_rule",
      "description": "Encapsulates and manipulates policy rules as nested associative structures, enabling serialization and deserialization of complex data formats. Supports operations to convert between JSON and structured lists, facilitating data exchange with recursive elements. Examples include parsing a JSON object into a nested list of key-value pairs and generating JSON from a structured rule representation. The primary data type is a list of key-value pairs with nested lists as values.",
      "description_length": 477,
      "index": 1441,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Role",
      "description": "Encapsulates hierarchical data structures as lists of key-value pairs, enabling conversion to and from JSON via Yojson. Supports nested objects through tuple-based representations, allowing for flexible data serialization and parsing. Operations include encoding complex nested structures into JSON and decoding JSON back into structured lists. This enables seamless data interchange in applications requiring structured, hierarchical data handling.",
      "description_length": 449,
      "index": 1442,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Role_binding",
      "description": "provides a mechanism for associating subjects with roles across namespaces, using structured data to represent relationships and permissions. it defines types for subjects, roles, and namespace contexts, along with operations to create, inspect, and manage these associations. examples include binding a user to a role within a specific namespace or referencing a cluster role globally. the module integrates with JSON serialization to enable data persistence and exchange.",
      "description_length": 473,
      "index": 1443,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Role_binding_list",
      "description": "Encodes and decodes recursive data structures represented as lists of key-value pairs into and from JSON, supporting nested objects via recursive tuples. Key data types include lists of pairs and recursive tuples, with operations for serialization and deserialization. Examples include converting a nested configuration structure to JSON for storage or parsing a JSON document into a structured OCaml representation. The module enables seamless data interchange in applications dealing with hierarchical information.",
      "description_length": 516,
      "index": 1444,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Role_list",
      "description": "Converts nested associative lists into JSON format and vice versa, supporting recursive structures with key-value pairs and nested lists. The primary data type is a nested associative list, with operations for parsing and generating JSON. It enables seamless data transformation for hierarchical models, such as converting a list of roles with sub-roles into a JSON object and reconstructing it back into the original structure.",
      "description_length": 428,
      "index": 1445,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Role_ref",
      "description": "Encodes and decodes nested associative lists into JSON format using Yojson, enabling structured data exchange. The primary data type is a recursive list of key-value pairs, with operations for serialization and deserialization. It allows converting complex data structures into JSON strings and reconstructing them programmatically. This supports applications needing to store or transmit hierarchical data in a standardized format.",
      "description_length": 432,
      "index": 1446,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1.Subject",
      "description": "Manages structured data through JSON serialization and deserialization, handling nested associative lists of strings. Supports conversion between recursive key-value pairs and JSON format using Yojson. Enables storage and retrieval of complex data structures in applications requiring flexible data representation. Examples include encoding user roles or configuration settings into JSON and parsing them back into structured lists.",
      "description_length": 432,
      "index": 1447,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis.Apiregistration",
      "description": "Converts nested key-value structures, including lists and recursive associative lists, to and from JSON using Yojson. Operates on lists of tuples and recursive string-keyed value lists, providing encode and decode functions for structured data manipulation. Enables tasks like parsing API responses into nested configurations or serializing complex settings for transmission. Examples include transforming configuration maps into JSON and generating request payloads with hierarchical content.",
      "description_length": 493,
      "index": 1448,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis.Apiextensions",
      "description": "Converts between nested associative lists and JSON, enabling structured data manipulation through recursive key-value pairs. Core types include string-keyed tuples with nested values, supporting hierarchical data representation. Operations include parsing JSON into lists and encoding lists into JSON, ideal for processing configuration trees or API responses. For instance, it can serialize a list of key-value pairs into a JSON object or deserialize a JSON string back into its original list form.",
      "description_length": 499,
      "index": 1449,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Api.Resource",
      "description": "Handles the conversion of nested associative lists to and from JSON, managing recursive structures with ease. Supports operations on key-value pairs where values can themselves be lists or nested objects. For example, it transforms `[(\"x\", [\"y\", \"z\"]); (\"w\", (\"a\", 1))]` into `{\"x\": [\"y\", \"z\"], \"w\": {\"a\": 1}}` and reconstructs the original structure from JSON. This enables seamless data interchange in applications requiring structured, hierarchical data handling.",
      "description_length": 466,
      "index": 1450,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta",
      "description": "Converts nested associative lists to and from JSON using Yojson, handling recursive and hierarchical structures. Core types include recursive key-value lists, tuples, and nested lists, with operations for parsing, generating, and manipulating structured data. It enables tasks like serializing configuration trees for API communication or extracting metadata from incoming requests. Examples include transforming nested settings into JSON format or parsing complex hierarchical responses into OCaml values.",
      "description_length": 506,
      "index": 1451,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Version.Info",
      "description": "Encodes and decodes nested associative lists into JSON, enabling structured data exchange. The core data type is a recursive key-value structure with string keys and nested values. It supports serialization for data storage or transmission and deserialization for parsing external JSON inputs. Examples include converting configuration settings or hierarchical data between formats.",
      "description_length": 382,
      "index": 1452,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Runtime.Raw_extension",
      "description": "Handles serialization and deserialization of nested data structures between JSON and OCaml types, enabling storage and retrieval of complex, hierarchical data within a raw extension field. Supports conversion between external and internal representations, allowing dynamic unpacking of unknown types into a generic object. Key data types include nested associative lists and raw extension fields, with operations for encoding to and decoding from JSON. For example, a plugin's nested configuration can be stored as a raw extension and later converted into a specific plugin type during object creation.",
      "description_length": 602,
      "index": 1453,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Util.Intstr",
      "description": "Encodes and decodes nested associative lists of strings into JSON, enabling bidirectional conversion of hierarchical data structures. Supports recursive parsing and serialization, allowing complex data models to be stored and retrieved as JSON. Operations include converting nested lists to JSON strings and parsing JSON into structured lists. This facilitates handling configuration trees, nested datasets, or hierarchical metadata in a programmable format.",
      "description_length": 458,
      "index": 1454,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Componentstatuses.By_name",
      "description": "Provides functions to retrieve a Component_status by name, including a path template for requests. Operates with strings, Cohttp headers, and URI structures. Used to fetch detailed status information from a Kubernetes API endpoint with optional formatting.",
      "description_length": 256,
      "index": 1455,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Configmaps",
      "description": "Provides functions to retrieve and watch ConfigMap resources with detailed query parameters such as resource version, label selectors, and timeouts. Operates on types like `Uri.t` and returns results containing `Watch_event.t` or error strings. Used to monitor real-time changes to ConfigMaps in a Kubernetes cluster, supporting pagination and filtering.",
      "description_length": 354,
      "index": 1456,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Endpoints",
      "description": "Provides functions to retrieve and watch Endpoints resources with fine-grained control over query parameters like label selectors, resource versions, and timeouts. Operates on URI endpoints and returns results in a structured format including watch events and metadata. Used to monitor real-time changes to service endpoints in a Kubernetes cluster, supporting pagination and filtering for large datasets.",
      "description_length": 405,
      "index": 1457,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Events",
      "description": "Provides functions to watch and retrieve event resources from a Kubernetes API, supporting parameters like watch, timeout_seconds, and resource_version for real-time updates and filtering. Operates on URI endpoints and returns structured event data including add, update, and remove notifications. Used to monitor cluster events, track resource changes, and handle large result sets through pagination with the continue parameter.",
      "description_length": 430,
      "index": 1458,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Limitranges",
      "description": "Provides functions to retrieve and watch LimitRange resources with precise control over query parameters like resource_version, limit, and label_selector. Operates on Kubernetes API endpoints using HTTP requests with custom headers and context. Enables real-time monitoring of resource changes and paginated retrieval of large datasets.",
      "description_length": 336,
      "index": 1459,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Namespaces",
      "description": "Handles Kubernetes namespace interactions by enabling retrieval and real-time watching of resources with fine-grained control over queries, timeouts, and labels. Operates on types such as `Uri.t`, `Watch_event.t`, and `Cohttp.Header.t` to manage HTTP requests, streaming updates, and resource filtering. Supports tasks like monitoring pod state changes, fetching labeled secrets, or retrieving config maps with specific version constraints. Provides namespace-aware access to cluster resources with event-driven updates and efficient data retrieval.",
      "description_length": 549,
      "index": 1460,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Nodes",
      "description": "Manages interactions with Kubernetes Node resources, enabling retrieval and real-time monitoring through named queries, filters, and pagination. Processes types such as `Uri.t` and `Watch_event.t` to handle API requests and event streams. Supports fetching node details with custom parameters or tracking status changes dynamically. Examples include querying nodes by label, fetching paginated results, or subscribing to live updates on node state.",
      "description_length": 448,
      "index": 1461,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Persistentvolumeclaims",
      "description": "Provides functions to watch and retrieve persistent volume claims, supporting parameters for filtering, pagination, and version tracking. Operates on Kubernetes API resources, including watch events and metadata. Used to monitor real-time changes to storage configurations in a cluster.",
      "description_length": 286,
      "index": 1462,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Persistentvolumes",
      "description": "manages interactions with Kubernetes persistent volumes through retrieval and real-time monitoring capabilities. It handles resource metadata, watch events, and filtering via label selectors, timeout, and resource version parameters. Operations include fetching current states or streaming updates for specific volumes. Examples include tracking changes to a volume's status or querying volumes with particular labels.",
      "description_length": 418,
      "index": 1463,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Pods",
      "description": "Provides functions to retrieve and watch Pod resources with fine-grained control over filtering, pagination, and streaming. Operates on data types including URI, HTTP headers, and Kubernetes-specific objects like Watch_event. Used to monitor real-time changes to Pod configurations and status in a Kubernetes cluster.",
      "description_length": 317,
      "index": 1464,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Podtemplates",
      "description": "Provides functions to retrieve and watch pod templates, supporting parameters for filtering, pagination, and versioning. Operates on URI endpoints and returns structured watch events or error strings. Enables real-time monitoring of pod template changes with precise control over data retrieval.",
      "description_length": 295,
      "index": 1465,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Replicationcontrollers",
      "description": "Provides functions to retrieve and watch ReplicationController resources with fine-grained filtering and pagination. Operates on types like `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` and handles parameters for label selection, resource versioning, and timeout control. Used to monitor real-time changes to controller configurations in a Kubernetes cluster.",
      "description_length": 382,
      "index": 1466,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Resourcequotas",
      "description": "Provides functions to watch and retrieve resource quotas from a Kubernetes API, supporting parameters like watch, timeout_seconds, and resource_version for precise control over data retrieval. Operates on URI endpoints and returns structured events with metadata, including labels, fields, and resource versions. Used to monitor real-time changes in resource quotas and fetch filtered lists with pagination.",
      "description_length": 407,
      "index": 1467,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Secrets",
      "description": "Provides functions to watch and retrieve secret resources from a Kubernetes API, supporting parameters like resource_version, timeout, and label selectors to filter and control the data stream. Operates on URI endpoints and returns watch events or errors, with support for continuous retrieval via the `continue` parameter. Enables real-time monitoring of secret changes, including additions, updates, and deletions.",
      "description_length": 416,
      "index": 1468,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Serviceaccounts",
      "description": "Provides functions to retrieve and watch service account resources with fine-grained filtering and pagination. Operates on Kubernetes API types including watch events and URI endpoints. Enables real-time monitoring of service account changes with parameters for versioning, timeouts, and label-based selection.",
      "description_length": 310,
      "index": 1469,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch.Services",
      "description": "Provides functions to retrieve and watch Service resources from a Kubernetes API, supporting parameters like timeout, resource version, and label selectors. Operates on data types including URI, HTTP headers, and custom Kubernetes event structures. Used to monitor real-time changes to service configurations or fetch limited subsets of services for processing.",
      "description_length": 361,
      "index": 1470,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_name",
      "description": "Handles namespace management in Kubernetes by enabling path template generation, configuration updates, and status manipulation through HTTP interactions. Supports operations on strings, URIs, namespace objects, and patch structures to dynamically adjust cluster resources. Allows for programmatic modification of namespace settings and status via API calls. Examples include updating namespace metadata, applying patches, and retrieving status information.",
      "description_length": 457,
      "index": 1471,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces.By_namespace",
      "description": "Provides HTTP-based interaction with Kubernetes resources, enabling CRUD, patch, and lifecycle operations across multiple object types. Supports types such as Binding, Config_map, Endpoints, Event, Limit_range, PVC, Pod, Scale, Resource_quota, Secret, Service_account, and Service, with operations tailored to namespace-specific contexts. Examples include updating configuration maps, managing pod lifecycles, scaling deployments, and deleting secrets with custom policies. Offers fine-grained control through headers, parameters, and patch operations for dynamic cluster management.",
      "description_length": 583,
      "index": 1472,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Nodes.By_name",
      "description": "handles HTTP interactions by routing requests through a proxy using path, name, and header configurations, supporting asynchronous operations with custom context and headers. it works with string-based paths, Cohttp headers, and URI endpoints to execute methods like GET, PUT, and POST. it also enables management of Kubernetes node statuses using `Kubernetes.Definitions.Api.Core.V1.Node.t` and `Uri.t`, allowing updates to node states via direct API calls. examples include fetching remote data, sending JSON payloads, and modifying node conditions in a cluster.",
      "description_length": 564,
      "index": 1473,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Persistentvolumes.By_name",
      "description": "Handles HTTP interactions to manage Kubernetes PersistentVolume states, supporting retrieval, updates, and partial modifications via PATCH operations. Works with types such as Persistent_volume and Patch to manipulate volume status programmatically. Allows developers to query current states, apply targeted changes, and synchronize volume configurations with a Kubernetes cluster. Examples include updating a volume's phase or applying specific metadata changes without full replacement.",
      "description_length": 488,
      "index": 1474,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1.Namespaces",
      "description": "Manages access control within Kubernetes namespaces by processing subject access review requests through path templates and HTTP POST operations. It works with subject access review objects, allowing checks for user or service account permissions using namespace-specific parameters. Operations include validating read, write, or admin access based on contextual inputs. Example: Confirming a service account's ability to list pods in a restricted namespace.",
      "description_length": 458,
      "index": 1475,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1.Selfsubjectaccessreviews",
      "description": "Generates a request path template for Kubernetes self-subject access reviews and sends a POST request with a self-subject-access-review body to check authorization status. Accepts HTTP context, headers, and pretty-printing parameters. Used to validate user permissions against cluster policies in real-time.",
      "description_length": 307,
      "index": 1476,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1.Selfsubjectrulesreviews",
      "description": "Generates a request path template for self-subject rules review operations and sends a POST request with a self-subject rules review object, handling pretty-printed responses and HTTP context. It processes Kubernetes authorization data structures and interacts with HTTP endpoints using Cohttp. Used to fetch or submit authorization rules for the current user in a Kubernetes cluster.",
      "description_length": 384,
      "index": 1477,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1.Subjectaccessreviews",
      "description": "Generates a path template for subject access review requests and sends a POST request with a subject access review object, handling HTTP context and headers. Works with Kubernetes authorization data structures and Cohttp Lwt types. Used to check user or service account permissions against cluster resources.",
      "description_length": 308,
      "index": 1478,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1beta1.Namespaces",
      "description": "Handles Kubernetes subject access reviews within a namespace by processing `Local_subject_access_review.t` data through HTTP POST requests using URI templates. It provides methods to check user and group access permissions in isolated namespace environments. Users can validate access to specific resources or perform permission audits. Examples include verifying user authorization for a deployment or reviewing group access rights in a cluster.",
      "description_length": 446,
      "index": 1479,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1beta1.Selfsubjectaccessreviews",
      "description": "Generates a request path template for Kubernetes self-subject-access-review endpoints and sends a POST request with a self-subject-access-review object, handling HTTP context and headers. It processes Kubernetes API objects of type Self_subject_access_review.t and supports pretty-printing responses. Used to validate user permissions against cluster resources through the Kubernetes API.",
      "description_length": 388,
      "index": 1480,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1beta1.Selfsubjectrulesreviews",
      "description": "Returns the path template for self-subject rules review requests. Accepts a body of type Self_subject_rules_review.t and sends a POST request with optional pretty-printing, context, and headers to a specified URI, returning the result as a Lwt promise. Used to dynamically generate and execute authorization rule checks against a Kubernetes API endpoint.",
      "description_length": 354,
      "index": 1481,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1beta1.Subjectaccessreviews",
      "description": "Generates a path template for subject access review requests and sends a POST request with a subject access review object, handling HTTP context and headers. Works with Kubernetes API structures for authorization reviews. Used to check user or service account permissions against cluster policies.",
      "description_length": 297,
      "index": 1482,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1.Storageclasses",
      "description": "Handles CRUD operations for Kubernetes StorageClass resources through HTTP interactions. Processes types like Storage_class, Delete_options, and Patch to manage configurations, deletions, and partial updates. Enables fetching specific classes, replacing their definitions, and deleting with custom options. Supports dynamic cluster storage management via direct API manipulation.",
      "description_length": 379,
      "index": 1483,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1.Watch",
      "description": "manages Kubernetes storage class resources by retrieving snapshots and monitoring changes in real time, using `Uri.t` for request handling and `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t` to process event streams. It enables filtering by name, pagination, and versioning to control data retrieval. Users can query specific storage classes or track configuration updates dynamically. Operations include fetching structured data, parsing watch events, and adjusting request parameters for optimized access.",
      "description_length": 528,
      "index": 1484,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1alpha1.Volumeattachments",
      "description": "manages Kubernetes volume attachments through CRUD operations based on resource names, utilizing OCaml types for API objects and HTTP interactions. It supports retrieving, modifying, and removing volume attachments with precise control over request and response structures. Operations include updating attachment configurations and deleting attachments by identifier. Examples include attaching a volume to a node or adjusting attachment parameters dynamically.",
      "description_length": 461,
      "index": 1485,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1alpha1.Watch",
      "description": "Monitors volume attachments via real-time watch operations, supporting name-based retrieval with filters, pagination, and versioning. Processes Kubernetes-derived OCaml types, handling watch events and HTTP headers for precise data control. Enables tracking of status changes and fetching of specific attachments using resource versions. Examples include monitoring attachment updates or retrieving a named attachment with a known version.",
      "description_length": 439,
      "index": 1486,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1beta1.Storageclasses",
      "description": "Manages Kubernetes StorageClass resources through HTTP interactions, enabling retrieval, modification, and removal with fine-grained control over parameters. Processes types including StorageClass, DeleteOptions, and Patch to execute targeted API operations. Allows actions such as updating storage configurations, deleting classes with specified policies, and applying partial updates. Supports customizing request formatting and resource identification.",
      "description_length": 455,
      "index": 1487,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1beta1.Volumeattachments",
      "description": "Manages Kubernetes volume attachments through CRUD operations and patches, handling types like Volume_attachment, Delete_options, and Patch. Supports HTTP interactions with customizable parameters for fine-grained control over storage resources. Allows updating attachment configurations, removing volumes with specified policies, and applying targeted changes. Examples include modifying attachment metadata, deleting volumes with grace periods, and applying partial updates to attachment definitions.",
      "description_length": 502,
      "index": 1488,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1beta1.Watch",
      "description": "Provides real-time monitoring and query capabilities for Kubernetes storage resources, including storage classes and volume attachments. Supports name-based and label-based filtering, pagination, and versioned access to retrieve and track changes in resource states. Operations include watching for configuration updates and dynamically adjusting to infrastructure changes. Enables precise control over storage class definitions and volume attachment tracking across clusters.",
      "description_length": 476,
      "index": 1489,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Certificates.V1beta1.Certificatesigningrequests",
      "description": "Manages certificate signing request approvals through Kubernetes API interactions, using HTTP operations and Cohttp for request handling. Supports manipulation of Certificate_signing_request.t structures via PUT methods, including path template expansion and status updates. Automates approval processes and enables real-time state modifications for certificate requests. Examples include programmatically approving a request or updating its status based on external conditions.",
      "description_length": 478,
      "index": 1490,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Certificates.V1beta1.Watch",
      "description": "Manages real-time certificate signing request monitoring using parameters like name, resource_version, and timeout, with support for fetching specific requests or tracking version changes. Operates on strings, integers, and Kubernetes-specific types to handle watch events and HTTP interactions. Allows for event-driven responses by continuously observing updates or retrieving historical data. Examples include tracking a request's lifecycle or reacting to version-specific changes in a Kubernetes cluster.",
      "description_length": 507,
      "index": 1491,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authentication.V1.Tokenreviews",
      "description": "Generates a path template for token review requests and sends POST requests with token review data, including optional pretty printing. It handles Kubernetes token review objects and HTTP client context. Used to submit token reviews to a Kubernetes API endpoint for validation.",
      "description_length": 277,
      "index": 1492,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authentication.V1beta1.Tokenreviews",
      "description": "Returns a pre-configured path template for token review requests. Accepts a token review object, context, headers, and a pretty flag to send a POST request to the Kubernetes API and receive a token review response. Used to validate tokens against the Kubernetes authentication system.",
      "description_length": 284,
      "index": 1493,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1.Namespaces",
      "description": "Manages Kubernetes pod presets with CRUD operations, supporting namespace, name, and export parameters. Utilizes data types like Pod_preset, Delete_options, and Patch for partial updates and custom headers. Enables dynamic configuration changes and controlled deletions, such as adjusting pod settings or exporting configurations. Applies targeted patches to modify specific aspects of pod definitions.",
      "description_length": 402,
      "index": 1494,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1.Podpresets",
      "description": "Provides functions to retrieve and watch Pod_preset resources with detailed query parameters such as label selectors, resource versions, and timeouts. Operates on Kubernetes API structures like `Pod_preset_list` and interacts with HTTP clients using Cohttp. Used to monitor pod configurations in real-time or fetch filtered lists for cluster management tasks.",
      "description_length": 359,
      "index": 1495,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1.Watch",
      "description": "Streams real-time Kubernetes Pod and preset changes using `Uri.t` and `Watch_event.t`, enabling dynamic observation of resource states. Supports namespace, label, and query-based filtering for precise event tracking. Operations include live streaming, state synchronization, and parameterized watching with timeout and pagination. Users can monitor Pod creation, configuration updates, and preset modifications in real time.",
      "description_length": 424,
      "index": 1496,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1.Events",
      "description": "Provides functions to retrieve and watch Kubernetes event resources, supporting parameters for filtering, pagination, and real-time updates. Operates on URI endpoints and returns event lists or streams with detailed metadata. Enables monitoring of cluster activity and debugging by fetching events with specific labels, resource versions, and timeouts.",
      "description_length": 352,
      "index": 1497,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1.Namespaces",
      "description": "handles namespace-specific event management through HTTP interactions, supporting operations like retrieving, updating, and deleting events with fine-grained control. it works with types such as Event, Delete_options, and Patch to enable actions like metadata updates, grace-period deletions, and partial field patches. operations are confined to namespaces and allow for formatting or export customization. examples include modifying an event's content, removing an event with a specified delay, or updating only specific fields using patches.",
      "description_length": 544,
      "index": 1498,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1.Watch",
      "description": "manages Kubernetes event monitoring through real-time and historical data retrieval, supporting namespace and name-based queries with filtering, pagination, and version tracking. it processes event records, namespace strings, and query parameters like resource_version and label_selector. users can track pod status changes, filter events by labels, and retrieve paginated results. examples include monitoring deployment progress or isolating events for specific resources.",
      "description_length": 473,
      "index": 1499,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Scheduling.V1alpha1.Priorityclasses",
      "description": "Manages Kubernetes priority class resources through HTTP interactions, handling creation, retrieval, update, and deletion. Operates on types like Priority_class, Delete_options, and Patch, enabling precise control over cluster scheduling policies. Allows fetching specific priority classes, modifying their parameters, or deleting them with customized deletion settings. Supports fine-grained operations such as updating priority class configurations or removing resources with defined propagation strategies.",
      "description_length": 509,
      "index": 1500,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Scheduling.V1alpha1.Watch",
      "description": "Manages Kubernetes priority classes with precise querying, real-time updates, and dynamic filtering. Key data types include priority class definitions, selectors, and versioned snapshots. Operations allow fetching by name, applying custom filters, and retrieving paginated results. Users can track configuration changes and isolate specific resource subsets for analysis.",
      "description_length": 371,
      "index": 1501,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1.Apiservices",
      "description": "Manages Kubernetes API service resources through HTTP interactions, utilizing types such as Api_service.t, Uri.t, and Cohttp.Header.t to construct and modify requests. It supports fetching path templates for dynamic request building and adjusting resource states via headers and endpoints. Users can update an API service's status or extract URI components for targeted operations. Specific tasks include modifying service configurations and generating structured HTTP requests based on template parameters.",
      "description_length": 507,
      "index": 1502,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1.Watch",
      "description": "Manages real-time monitoring of Kubernetes resources through efficient querying, filtering, and event streaming. It handles resource definitions, watch events, and query parameters to support dynamic data retrieval. Users can track service changes, paginate results, and apply version-specific filters. Operations include structured lookups and customizable event processing for precise resource tracking.",
      "description_length": 405,
      "index": 1503,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1beta1.Apiservices",
      "description": "Constructs and manipulates URI templates for Kubernetes API interactions, handling service objects, headers, and context to enable dynamic request generation. Supports URL construction, status updates, and pretty-printing of responses. Operations include parameterized URL building and service status modifications. Examples include updating a service with custom headers or formatting API responses for clarity.",
      "description_length": 412,
      "index": 1504,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1beta1.Watch",
      "description": "Manages API resource interactions with retrieval and watch operations, supporting filters, pagination, and version control. It works with core types like strings and integers, as well as specialized structures such as `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`. Users can track real-time changes to Kubernetes objects or fetch paginated lists of cluster resources. Operations include monitoring updates and retrieving structured data with custom query parameters.",
      "description_length": 489,
      "index": 1505,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Daemonsets",
      "description": "Provides functions to list or watch Daemon_set resources with parameters for filtering, pagination, and versioning. Operates on Kubernetes API structures like Daemon_set_list and handles HTTP requests with Cohttp and Lwt. Used to monitor cluster daemon deployments and retrieve filtered, versioned state information.",
      "description_length": 316,
      "index": 1506,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Deployments",
      "description": "Provides functions to retrieve and watch Kubernetes Deployment resources, supporting parameters for filtering, pagination, and streaming updates. Operates on types like Deployment_list.t and interacts with HTTP endpoints using Cohttp and Lwt. Used to monitor cluster state changes or fetch deployment configurations with specific labels or versioning.",
      "description_length": 351,
      "index": 1507,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Ingresses",
      "description": "Provides functions to retrieve and watch Ingress resources from a Kubernetes API, supporting parameters for filtering, pagination, and versioning. Operates on types like `Kubernetes.Definitions.Api.Extensions.V1beta1.Ingress_list.t` and handles HTTP requests with custom headers and context. Used to monitor real-time changes to Ingress configurations or fetch a snapshot of current Ingress objects with specific labels or limits.",
      "description_length": 430,
      "index": 1508,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Namespaces",
      "description": "manages Kubernetes resources via API, enabling retrieval, modification, and partial updates for core objects like DaemonSet, Deployment, and Ingress. it supports patching, scaling, and status checks using Cohttp and Lwt for asynchronous operations. users can adjust node selectors, roll back deployments, or update ingress rules with fine-grained control. examples include applying strategic merge patches to daemon sets or dynamically scaling services without full redeployment.",
      "description_length": 479,
      "index": 1509,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Networkpolicies",
      "description": "Provides functions to retrieve and watch Kubernetes network policies, supporting parameters like watch, timeout, resource version, and label selectors. Operates on Kubernetes API types such as Network_policy_list and handles HTTP requests with Cohttp. Used to monitor network policy changes in real-time or fetch a snapshot of existing policies.",
      "description_length": 345,
      "index": 1510,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Podsecuritypolicies",
      "description": "Handles CRUD and patch operations for Kubernetes pod security policies, supporting customizable HTTP parameters and resource management. Operates on types like Pod_security_policy, Delete_options, and Patch to modify cluster configurations. Allows precise control over policy updates, deletions, and data formatting. Examples include updating a policy's restrictions or deleting a policy with specific cascade options.",
      "description_length": 418,
      "index": 1511,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Replicasets",
      "description": "Provides functions to retrieve and watch Replica_set resources, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes API data structures such as Replica_set_list and handles HTTP requests with Cohttp. Used to monitor changes in replica sets or fetch a paginated list of replicas with specific labels or fields.",
      "description_length": 345,
      "index": 1512,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1.Watch",
      "description": "Offers real-time monitoring and data retrieval for multiple Kubernetes resource types, including DaemonSets, deployments, ingresses, network policies, and ReplicaSets. It supports filtering by labels, versioning, pagination, and timeout controls, operating on types like `Watch_event.t`, `Uri.t`, and `Cohttp.Header.t`. Users can track configuration changes, fetch specific revisions, or retrieve subsets of data with precise parameters. Examples include monitoring ingress updates, listing deployment revisions, or querying network policy changes.",
      "description_length": 548,
      "index": 1513,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Horizontalpodautoscalers",
      "description": "Provides functions to retrieve and watch Kubernetes horizontal pod autoscaler resources, supporting parameters for filtering, pagination, and event streaming. Operates on data structures like `Horizontal_pod_autoscaler_list.t` and handles HTTP requests with custom context and headers. Used to monitor real-time scaling configurations and manage large sets of autoscaler objects efficiently.",
      "description_length": 391,
      "index": 1514,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Namespaces",
      "description": "Manages Kubernetes HorizontalPodAutoscaler resources via HTTP, supporting retrieval, replacement, and updates with operations like adjusting scaling limits and applying patches. It works with types such as HorizontalPodAutoscaler and Patch, and processes parameters like URI, namespace, and name to target specific resources. Users can modify max/min replicas, inspect scaling states, or apply configuration changes dynamically. Examples include updating scaling thresholds or monitoring autoscaler health in real time.",
      "description_length": 519,
      "index": 1515,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1.Watch",
      "description": "Provides functions for monitoring and retrieving horizontal pod autoscaler resources with real-time updates, filtering, and pagination. Operates on types like `Watch_event` and uses Cohttp and Lwt for asynchronous communication. Supports label-based selection, event streaming, and historical state retrieval. Examples include tracking autoscalers with specific labels, observing scaling events, and fetching versioned metrics.",
      "description_length": 427,
      "index": 1516,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Horizontalpodautoscalers",
      "description": "Provides functions to retrieve and watch Kubernetes horizontal pod autoscaler resources, supporting parameters for filtering, pagination, and event streaming. Operates on Kubernetes API types including `Horizontal_pod_autoscaler_list` and related metadata. Used to monitor scaling configurations in real-time and fetch filtered lists for cluster management tasks.",
      "description_length": 363,
      "index": 1517,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Namespaces",
      "description": "Manages Kubernetes cluster autoscaling through HorizontalPodAutoscaler resources, allowing retrieval, modification, and partial updates of scaling policies based on CPU or custom metrics. It supports dynamic adjustments to pod counts and refines scaling thresholds using metric data. Operations include fetching current configurations, applying incremental changes, and redefining metrics for precise control. Users can respond to load changes in real time or optimize scaling behavior with custom targets.",
      "description_length": 506,
      "index": 1518,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1.Watch",
      "description": "Manages real-time monitoring of Kubernetes horizontal pod autoscalers across namespaces, supporting filtering, pagination, and versioned queries. It processes watch events, resource metadata, and HTTP parameters to track scaling configurations dynamically. Operations include event handling, state tracking, and controlled query execution for precise monitoring. Users can filter by name, manage long-running watches, and retrieve updated autoscaler data in real time.",
      "description_length": 468,
      "index": 1519,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Jobs",
      "description": "Provides functions to retrieve and watch Kubernetes Job resources, supporting parameters for filtering, pagination, and real-time updates. Operates on URI endpoints and returns Job lists or streams with detailed metadata. Enables monitoring of job status changes and efficient retrieval of large job datasets.",
      "description_length": 309,
      "index": 1520,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Namespaces",
      "description": "Manages Kubernetes Jobs via HTTP, enabling retrieval, modification, and partial updates with types like Job and Patch. It processes parameters such as URI, namespace, and job name to adjust configurations or control job states. Users can apply incremental changes, such as updating environment variables or resuming paused jobs. Operations support targeted updates and status modifications within specified namespaces.",
      "description_length": 418,
      "index": 1521,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1.Watch",
      "description": "manages job resources through real-time watching, filtering, and versioned retrieval, leveraging URI endpoints and structured event streams. It handles namespace, name, version, and label-based queries, enabling dynamic cluster management and historical job tracking. Operations include pagination, status monitoring, and label-driven selection, supporting tasks like job progress tracking and custom label filtering. Users can fetch specific job details, monitor changes, and retrieve historical versions with precise query parameters.",
      "description_length": 536,
      "index": 1522,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Cronjobs",
      "description": "Provides functions to retrieve and watch Kubernetes CronJob resources, supporting parameters for filtering, pagination, and real-time updates. Operates on data types including CronJob lists, resource versions, and HTTP headers. Used to monitor job schedules and manage batch processing tasks in a Kubernetes cluster.",
      "description_length": 316,
      "index": 1523,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Namespaces",
      "description": "Manages Kubernetes CronJobs through HTTP, supporting status checks, full replacements, and field-level updates using types like Cron_job.t and Patch.t. It enables dynamic configuration changes, such as modifying schedules or inspecting job statuses, without reconstructing entire resources. Operations include diagnosing failures via status logs or adjusting execution times on the fly. Users can perform targeted updates and retrieve detailed operational insights.",
      "description_length": 465,
      "index": 1524,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1.Watch",
      "description": "Provides functions to monitor and retrieve Kubernetes CronJob resources with support for filtering, pagination, and version tracking. Operates on Cron_job objects and watch events, enabling real-time observation of configuration changes and state transitions. Users can query jobs within specific namespaces, access historical versions, and track updates through HTTP interactions. Examples include listing active jobs, filtering by labels, and detecting changes in job metadata.",
      "description_length": 479,
      "index": 1525,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Cronjobs",
      "description": "Provides functions to retrieve and watch Kubernetes CronJob resources, supporting parameters for filtering, pagination, and real-time updates. Operates on Kubernetes API data structures such as `Cron_job_list.t` and interacts with HTTP endpoints using Cohttp. Used to monitor job schedules and manage batch processing tasks dynamically.",
      "description_length": 336,
      "index": 1526,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Namespaces",
      "description": "Manages Kubernetes CronJob status via HTTP, enabling retrieval, modification, and replacement using namespace and name. It works with types such as CronJob and Patch, supporting GET, PATCH, and PUT operations. Users can dynamically adjust scheduling parameters or monitor job execution. For example, it allows changing a job's schedule or querying its latest status.",
      "description_length": 366,
      "index": 1527,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1.Watch",
      "description": "Monitors and manages Kubernetes cron jobs with real-time updates, supporting detailed filtering by name, status, or schedule, and handling pagination and resource versioning. Processes structured data types such as strings, integers, and headers to query and manipulate job metadata efficiently. Enables dynamic tracking of job changes, allowing actions like pausing, resuming, or inspecting execution details. Retrieves CronJob resources with customizable query parameters for precise control over monitoring and data retrieval.",
      "description_length": 529,
      "index": 1528,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Namespaces",
      "description": "Manages Kubernetes PodDisruptionBudget resources with methods to retrieve, update, and patch, utilizing types like PodDisruptionBudget and Patch to alter cluster configurations. It supports precise modifications, such as adjusting maxUnavailable values, without affecting other settings. Users can dynamically refine cluster resilience policies or verify compliance with disruption limits. Examples include optimizing stability thresholds or enforcing operational constraints in real-time.",
      "description_length": 489,
      "index": 1529,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Poddisruptionbudgets",
      "description": "Provides functions to retrieve and watch PodDisruptionBudget resources with precise control over filtering, pagination, and resource versioning. Operates on Kubernetes API types including Pod_disruption_budget_list and supports parameters like label_selector, resource_version, and limit. Used to monitor cluster resilience and manage disruption thresholds for applications.",
      "description_length": 374,
      "index": 1530,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Podsecuritypolicies",
      "description": "Manages Kubernetes pod security policies through CRUD operations and custom HTTP requests, handling types like Pod_security_policy, Delete_options, and Patch. Supports actions such as exporting policies exactly, setting grace periods, and defining garbage collection strategies. Allows programmatic control over policy lifecycle and configuration. Examples include updating a policy's restrictions or deleting a policy with specified cleanup parameters.",
      "description_length": 453,
      "index": 1531,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1.Watch",
      "description": "manages Kubernetes resource interactions with real-time monitoring, version tracking, and filtering across multiple resource types. It handles operations on `Uri.t`, `string`, `bool`, and custom types like `Kubernetes.Definitions.Apimachinery.Pkg.Apis.Meta.V1.Watch_event.t`, enabling users to fetch, observe, and synchronize resources such as Pod_disruption_budgets and Pod_security_policies. Functions support label-based filtering, pagination, and event streaming, allowing for continuous monitoring of policy and disruption changes. Examples include tracking real-time updates to security policies, querying active disruptions, and ensuring consistent resource states across cluster operations.",
      "description_length": 698,
      "index": 1532,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Controllerrevisions",
      "description": "Provides functions to retrieve and watch controller revisions from a Kubernetes API, supporting parameters for filtering, pagination, and resource version tracking. Operates on data types including `Uri.t` and `Kubernetes.Definitions.Api.Apps.V1beta2.Controller_revision_list.t`. Enables watching for real-time updates or fetching a snapshot of revisions with specific labels, limits, and timeouts.",
      "description_length": 398,
      "index": 1533,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Daemonsets",
      "description": "Provides functions to retrieve and watch DaemonSet resources with precise control over filtering, pagination, and response formatting. Operates on Kubernetes API types such as Daemon_set_list and handles parameters like label_selector, resource_version, and timeout_seconds. Used to monitor cluster state changes or fetch filtered lists of daemon-managed pods in real-time.",
      "description_length": 373,
      "index": 1534,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Deployments",
      "description": "Provides functions to retrieve and watch Kubernetes Deployment resources, supporting parameters for filtering, pagination, and real-time updates. Operates on data types including Deployment lists and HTTP context structures. Used to monitor application deployments and manage large sets of resources efficiently.",
      "description_length": 312,
      "index": 1535,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Namespaces",
      "description": "Manages Kubernetes workloads through HTTP APIs, handling controller revisions, daemon sets, deployments, replicasets, and stateful sets with CRUD, partial updates, and status checks. Key types include Controller_revision, Daemon_set, Deployment, Scale, and Patch, enabling operations like adjusting replica counts, updating specs, and rolling back changes. It supports dynamic scaling and real-time configuration adjustments, allowing for automated deployment workflows and cluster state management. Examples include modifying a deployment's replica count or applying a patch to update a daemon set's image.",
      "description_length": 607,
      "index": 1536,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Replicasets",
      "description": "Provides functions to retrieve and watch ReplicaSet resources from a Kubernetes API, supporting parameters like label selectors, resource versions, and pagination. Operates on data types such as `Uri.t` and returns results in `Kubernetes.Definitions.Api.Apps.V1beta2.Replica_set_list.t`. Enables monitoring changes in real-time or fetching a snapshot of ReplicaSet objects with customizable filters and timeouts.",
      "description_length": 412,
      "index": 1537,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Statefulsets",
      "description": "Provides functions to retrieve and watch stateful set resources with detailed filtering and pagination controls. Operates on Kubernetes API data structures such as `Stateful_set_list` and handles HTTP requests with custom context and headers. Enables real-time monitoring of stateful sets and efficient retrieval of large datasets through pagination and label-based filtering.",
      "description_length": 376,
      "index": 1538,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2.Watch",
      "description": "Offers real-time monitoring and retrieval of Kubernetes resources including controller revisions, DaemonSets, deployments, ReplicaSets, and StatefulSets. Supports filtering via label selectors, versioning with resource_version, and pagination, using types like `Watch_event.t`, `Uri.t`, and `Cohttp.Header.t` for structured data handling. Enables operations such as streaming updates for deployments, tracking replica set changes, and fetching stateful set status with custom parameters. Examples include filtering deployments by labels, retrieving incremental updates with resource versions, and monitoring real-time scaling events.",
      "description_length": 633,
      "index": 1539,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Controllerrevisions",
      "description": "Provides functions to retrieve and watch controller revisions from a Kubernetes API, supporting parameters for filtering, pagination, and resource version tracking. Operates on data types including `Uri.t` and `Kubernetes.Definitions.Api.Apps.V1.Controller_revision_list.t`. Used to monitor changes in controller revisions over time or fetch a snapshot of existing revisions with specific constraints.",
      "description_length": 401,
      "index": 1540,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Daemonsets",
      "description": "Provides functions to list or watch Kubernetes DaemonSet resources with precise control over filtering, pagination, and streaming. Operates on types like `Kubernetes.Definitions.Api.Apps.V1.Daemon_set_list.t` and handles parameters such as label selectors, resource versions, and timeouts. Used to monitor real-time changes in DaemonSet configurations or retrieve filtered lists for deployment management.",
      "description_length": 405,
      "index": 1541,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Deployments",
      "description": "Provides functions to retrieve and watch Kubernetes Deployment resources, supporting parameters like label selectors, resource versions, and pagination. Operates on types such as `Kubernetes.Definitions.Api.Apps.V1.Deployment_list.t` and HTTP-related structures like `Uri.t` and `Cohttp.Header.t`. Used to monitor live changes in deployments or fetch filtered lists with specific constraints.",
      "description_length": 392,
      "index": 1542,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Namespaces",
      "description": "Handles Kubernetes resource management via HTTP, enabling dynamic adjustments to workloads, deployments, and stateful sets. It defines types like Controller_revision, Daemon_set, Deployment, ReplicaSet, and Patch, supporting operations such as scaling, patching, and status checks. Users can modify replicas, apply incremental updates, or adjust configurations without full replacements. Examples include increasing deployment replicas during peak load or patching a daemon set to update service configurations.",
      "description_length": 511,
      "index": 1543,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Replicasets",
      "description": "Provides functions to retrieve and watch ReplicaSet resources from a Kubernetes API, supporting parameters like label selectors, resource versions, and pagination. Operates on data types such as `Uri.t` and `Kubernetes.Definitions.Api.Apps.V1.Replica_set_list.t` to handle list responses and streaming updates. Enables efficient querying of cluster state with options for filtering, limiting results, and tracking changes over time.",
      "description_length": 432,
      "index": 1544,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Statefulsets",
      "description": "Provides functions to retrieve and watch stateful set resources from a Kubernetes API, supporting parameters for filtering, pagination, and versioning. Operates on data types including `Kubernetes.Definitions.Api.Apps.V1.Stateful_set_list.t` and HTTP-related types like `Uri.t` and `Cohttp.Header.t`. Used to monitor changes in stateful sets or fetch a limited subset of stateful set objects with specific labels or fields.",
      "description_length": 423,
      "index": 1545,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1.Watch",
      "description": "Offers real-time monitoring of Kubernetes resources including controller revisions, DaemonSets, deployments, ReplicaSets, and stateful sets. Supports filtering via label selectors, versioning, and pagination, with operations on types like Watch_event.t, Uri.t, and Cohttp.Header.t. Enables tracking of configuration changes, replica set updates, and deployment status through asynchronous HTTP streams. Examples include monitoring live updates to deployment configurations or fetching filtered lists of stateful set resources.",
      "description_length": 526,
      "index": 1546,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Controllerrevisions",
      "description": "Provides functions to retrieve and watch controller revisions, supporting parameters for filtering, pagination, and resource version tracking. Operates on Kubernetes API resources of type `Controller_revision_list` and HTTP request contexts. Used to monitor changes in controller revisions or fetch a limited set of revisions with specific labels or fields.",
      "description_length": 357,
      "index": 1547,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Deployments",
      "description": "Provides functions to retrieve and watch deployment resources from a Kubernetes API, supporting parameters for filtering, pagination, and real-time updates. Operates on data types including deployment lists and URI endpoints, with support for query parameters like label selectors and resource versions. Used to monitor application deployments and fetch structured deployment data for orchestration or monitoring systems.",
      "description_length": 421,
      "index": 1548,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Namespaces",
      "description": "Manages Kubernetes controller revisions, deployments, and stateful sets via HTTP, enabling CRUD, rollbacks, scaling, and configuration updates. Key types include Controller_revision, Deployment_rollback.t, Scale, Patch, and StatefulSet, with operations for updating configurations, rolling back changes, and resizing resources. Actions like deleting with custom policies, adjusting replica counts, and applying patches are directly supported. Examples include reverting to a previous deployment version, modifying resource limits, and updating specific status fields in a stateful set.",
      "description_length": 585,
      "index": 1549,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Statefulsets",
      "description": "Provides functions to retrieve and watch stateful set resources with detailed filtering and pagination. Operates on Kubernetes API types including `Stateful_set_list` and handles parameters like label selectors, resource versions, and timeouts. Enables real-time monitoring of stateful set changes and efficient retrieval of large datasets through pagination.",
      "description_length": 359,
      "index": 1550,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1.Watch",
      "description": "manages real-time monitoring and retrieval of Kubernetes resources including controller revisions, deployments, and stateful sets. it supports filtering via label selectors, versioned queries, and pagination using types like `Watch_event.t`, `Uri.t`, and `Cohttp.Header.t`. functions enable tracking of deployment status, stateful set updates, and continuous resource streaming with custom headers and timeouts. examples include monitoring live changes to deployments or fetching paginated lists of controller revisions with specific version constraints.",
      "description_length": 554,
      "index": 1551,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiextensions.V1beta1.Customresourcedefinitions",
      "description": "Constructs and manages URI templates for Kubernetes custom resource status updates, enabling structured HTTP PUT operations with configurable headers and context. Core data types include templates, request configurations, and status payloads, supporting operations like template expansion and status patching. Users can dynamically generate URLs, apply controlled state changes, and manage response formatting. Examples include updating resource states with custom headers or pretty-printed JSON responses.",
      "description_length": 506,
      "index": 1552,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiextensions.V1beta1.Watch",
      "description": "Monitors and retrieves custom resource definitions via watch and get operations, supporting parameters like name, timeout, and label selectors. Processes data types including strings, integers, and Cohttp headers to interact with Kubernetes APIs. Enables real-time updates, filtered queries, and paginated results for dynamic resource management. Examples include tracking changes to a specific deployment or listing all services with a given label.",
      "description_length": 449,
      "index": 1553,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1alpha1.Initializerconfigurations",
      "description": "Handles CRUD and patch operations for Kubernetes Initializer_configurations, supporting custom HTTP parameters. Works with types like `Initializer_configuration.t`, `Delete_options.t`, and `Patch.t` to modify admission control settings. Allows fetching configurations by name, updating their definitions, or removing them with specific options. Enables fine-grained control over cluster behavior through direct API manipulation.",
      "description_length": 428,
      "index": 1554,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1alpha1.Watch",
      "description": "Manages real-time resource monitoring by processing URIs, HTTP headers, and Kubernetes events, with support for timeouts and label selectors to filter data. It handles versioned resource retrieval and dynamic updates, allowing precise control over what is tracked. Operations include fetching specific configurations or tracking changes in a namespace. Examples include detecting service config updates or polling for status changes.",
      "description_length": 433,
      "index": 1555,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1beta1.Mutatingwebhookconfigurations",
      "description": "Handles CRUD and patch operations for Kubernetes webhook configurations, supporting parameters like pretty and export for fine-grained control. Operates on types such as MutatingWebhookConfiguration and DeleteOptions to manage webhooks dynamically. Allows updating webhook definitions, deleting configurations with specified garbage collection policies, and modifying settings via HTTP requests. Enables programmatic management of cluster-wide webhooks with customizable request behavior.",
      "description_length": 488,
      "index": 1556,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1beta1.Validatingwebhookconfigurations",
      "description": "Manages Kubernetes ValidatingWebhookConfigurations through CRUD and patch operations, handling types like Admissionregistration.V1beta1.ValidatingWebhookConfiguration and Apimachinery.Pkg.Apis.Meta.V1.DeleteOptions. Supports fetching configurations by name, modifying their definitions, and deleting them with specified grace periods. Allows for precise control over webhook setup and teardown in cluster environments. Example tasks include updating a webhook's failure policy or removing a configuration with a custom deletion timeout.",
      "description_length": 536,
      "index": 1557,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1beta1.Watch",
      "description": "Monitors and retrieves Kubernetes webhook configurations with real-time updates, supporting filters, pagination, and timeouts. Handles strings, integers, and API-specific structures to track changes in MutatingWebhookConfiguration and ValidatingWebhookConfiguration resources. Enables dynamic responses to configuration updates, such as adjusting auto-scaling policies or enforcing admission control rules. Supports querying by name, label selectors, or resource version for precise and efficient resource management.",
      "description_length": 517,
      "index": 1558,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1.Namespaces",
      "description": "Manages Kubernetes NetworkPolicy resources through create, read, update, and delete operations, supporting partial updates via patches. It utilizes types such as NetworkPolicy, DeleteOptions, and Patch to manipulate network configurations within specified namespaces. Operations include adjusting ingress and egress rules or scheduling deletions with custom grace periods. Users can dynamically modify network policies or safely remove them during maintenance windows.",
      "description_length": 468,
      "index": 1559,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1.Networkpolicies",
      "description": "Provides functions to retrieve and watch Kubernetes network policy resources, supporting parameters for filtering, pagination, and version tracking. Operates on types like `Kubernetes.Definitions.Api.Networking.V1.Network_policy_list.t` and HTTP request contexts. Used to monitor network policy changes in real-time or fetch a snapshot of policies with specific labels or resource versions.",
      "description_length": 390,
      "index": 1560,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1.Watch",
      "description": "Manages Kubernetes network policies with real-time updates, supporting namespace-specific filtering and dynamic configuration adjustments through `Uri.t` and `Cohttp.Header.t`. It enables fetching, modifying, and monitoring policies with name-based retrieval, label-based filtering, and pagination. Operations include detecting policy changes, tracking resource versions, and applying custom logic to maintain consistent network settings. Examples include monitoring policy updates across clusters and enforcing policy constraints based on watch events.",
      "description_length": 553,
      "index": 1561,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Clusterrolebindings",
      "description": "handles CRUD and patch operations for cluster role bindings in Kubernetes, using HTTP interactions with specific resource types. It supports operations on Cluster_role_binding, Delete_options, and Patch structures. Users can programmatically manage cluster-level role assignments and permissions. Examples include creating new bindings, updating existing ones, or removing outdated configurations.",
      "description_length": 397,
      "index": 1562,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Clusterroles",
      "description": "Manages Kubernetes ClusterRole resources through CRUD and patch operations, handling types like Cluster_role, Delete_options, and Patch. Supports query parameters such as pretty and grace_period_seconds to refine API requests. Allows direct manipulation of cluster-wide role definitions and their configurations. Examples include creating a new cluster role, updating its permissions, or deleting it with specified grace periods.",
      "description_length": 429,
      "index": 1563,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Namespaces",
      "description": "Manages role-based access control within Kubernetes namespaces, supporting creation, modification, and deletion of role bindings and roles. It utilizes types like Role_binding, Role, Delete_options, and Patch to interact with the Kubernetes API via HTTP. Operations include binding users to roles, adjusting permissions, and dynamically updating role definitions. Users can grant access to specific namespaces or refine role rules without restarting services.",
      "description_length": 459,
      "index": 1564,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Rolebindings",
      "description": "Provides functions to retrieve and watch Kubernetes Role_binding resources, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes API data structures such as Role_binding_list and handles HTTP requests with Cohttp and Lwt. Used to monitor role bindings in a cluster, fetch them with specific labels, and manage large result sets through pagination.",
      "description_length": 382,
      "index": 1565,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Roles",
      "description": "Provides functions to retrieve and watch Kubernetes Role objects, supporting parameters for filtering, pagination, and version tracking. Operates on URI endpoints and returns results in a structured format compatible with Kubernetes API responses. Enables real-time monitoring of role changes and efficient data retrieval with customizable query options.",
      "description_length": 354,
      "index": 1566,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1.Watch",
      "description": "manages Kubernetes cluster access controls through real-time watching and retrieval of role and cluster role resources, supporting filtering by name, labels, and version. It handles structured data types such as namespaces, resource versions, and watch events, enabling dynamic updates and precise queries. Users can monitor role binding changes, fetch specific roles with custom filters, or track updates with version tracking. Operations include real-time streaming, pagination, and parameterized retrieval across cluster and namespace scopes.",
      "description_length": 545,
      "index": 1567,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Clusterrolebindings",
      "description": "Manages Kubernetes cluster role bindings through direct API interactions, supporting CRUD and patch operations with customizable HTTP parameters. Handles types such as Cluster_role_binding and Delete_options to modify access controls at the cluster level. Allows retrieval of specific bindings by name, updates to their configurations, and controlled deletions with options. Enables programmatic management of user and service account permissions across the entire cluster.",
      "description_length": 473,
      "index": 1568,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Clusterroles",
      "description": "Manages Kubernetes cluster roles through HTTP interactions, supporting retrieval, modification, and deletion of Cluster_role objects. Utilizes types like Cluster_role and Delete_options, along with HTTP clients and headers, to execute API-level operations. Allows programmatic control over cluster role configurations, such as updating permissions or removing outdated roles. Examples include fetching role definitions, applying policy changes, and cleaning up obsolete entries.",
      "description_length": 478,
      "index": 1569,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Namespaces",
      "description": "Manages Kubernetes role and role binding configurations within a namespace, supporting creation, retrieval, update, and deletion operations. It works with types like Role, Role_binding, Delete_options, and Patch to manipulate access controls and permissions. Operations include modifying role rules, adjusting binding subjects, and deleting resources with tailored options. Users can apply incremental updates to roles or remove bindings using specified deletion parameters.",
      "description_length": 474,
      "index": 1570,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Rolebindings",
      "description": "Provides functions to retrieve and watch Kubernetes Role_binding resources, supporting parameters like watch, timeout, resource_version, and label selectors. Operates on Kubernetes API data structures such as Role_binding_list and handles HTTP requests with Cohttp. Used to monitor role bindings in a cluster for real-time updates or batch retrieval.",
      "description_length": 350,
      "index": 1571,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Roles",
      "description": "Provides functions to retrieve and watch Kubernetes Role objects, supporting parameters for filtering, pagination, and resource versioning. Operates on Kubernetes API data structures such as Role_list and handles HTTP requests with Cohttp. Used to monitor changes in role configurations or fetch role lists with specific constraints like label selectors and timeouts.",
      "description_length": 367,
      "index": 1572,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1.Watch",
      "description": "Provides real-time monitoring and retrieval of Kubernetes role-based access control resources, including role bindings and cluster roles, through watch events and API queries. Supports parameters like watch mode, timeout, label selectors, and resource versions, operating on types such as `Uri.t`, `Cohttp.Header.t`, and custom Kubernetes event structures. Users can track updates to specific roles, paginate results, filter by namespace or name, and manage versioned changes dynamically. Examples include observing role binding modifications, fetching paginated role lists, and synchronizing access policies in response to cluster events.",
      "description_length": 639,
      "index": 1573,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Clusterrolebindings",
      "description": "Manages Kubernetes cluster-level role bindings through CRUD operations, using HTTP to interact with resources like Cluster_role_binding. Supports fetching, updating, and deleting bindings with fine-grained control over deletion parameters. Operations include modifying configurations, removing bindings with specified grace periods, and handling HTTP URIs directly. Examples include updating a binding's role reference or deleting a binding with a custom propagation policy.",
      "description_length": 474,
      "index": 1574,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Clusterroles",
      "description": "manages Kubernetes cluster-level role configurations by enabling CRUD and patch operations on Cluster_role, Delete_options, and Patch types through HTTP requests. It supports actions like retrieving role details, modifying permissions, or removing roles using a specified URI and optional parameters. Operations can be tailored with formatting options and resource names for precise control. Examples include updating access policies or deleting outdated roles directly from the Kubernetes API.",
      "description_length": 494,
      "index": 1575,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Namespaces",
      "description": "Manages Kubernetes RBAC resources with CRUD and patch operations, supporting Role, Role_binding, Delete_options, and Patch types. It interacts with Kubernetes APIs via Cohttp and Lwt, enabling namespace-specific modifications. Users can define new permissions, revoke access, or adjust role configurations. Operations include creating roles, binding roles to users, and updating access policies within defined namespaces.",
      "description_length": 421,
      "index": 1576,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Rolebindings",
      "description": "Provides functions to retrieve and watch Kubernetes Role_binding resources, supporting parameters like watch, timeout, resource_version, and label selectors. Operates on Kubernetes API types, including Role_binding_list, and handles HTTP requests with Cohttp. Used to monitor role bindings in a cluster, filter by labels, and manage large result sets through pagination.",
      "description_length": 370,
      "index": 1577,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Roles",
      "description": "Provides functions to list or watch Kubernetes Role objects with detailed filtering and streaming capabilities. Accepts parameters like label_selector, resource_version, and timeout_seconds to control query behavior and response size. Supports continuous retrieval of results through the continue token and real-time updates via watch.",
      "description_length": 335,
      "index": 1578,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1.Watch",
      "description": "Provides real-time monitoring and management of Kubernetes access control resources, including cluster roles, role bindings, and roles, with support for filtering, versioning, and streaming updates. Operates on types such as watch events, URIs, HTTP headers, and resource versions, enabling dynamic tracking of configuration changes. Users can monitor role bindings for new entries, fetch specific roles with label selectors, and synchronize with cluster state efficiently. Examples include updating access controls in response to changes, logging role modifications, and querying role configurations with pagination.",
      "description_length": 617,
      "index": 1579,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1",
      "description": "Converts nested key-value structures between OCaml lists and JSON, supporting recursive hierarchies and complex data representations. Primary data types include recursive lists of string-keyed tuples and JSON values, with operations for bidirectional conversion. Examples include serializing access control policies or configuration trees into JSON and reconstructing them into OCaml data structures for processing. This enables efficient data exchange and manipulation in systems requiring structured, hierarchical information.",
      "description_length": 528,
      "index": 1580,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization.V1beta1",
      "description": "Handles bidirectional conversion between nested associative lists and JSON, supporting recursive key-value structures for structured data interchange. The primary data type is a recursive list of string-keyed tuples, with operations for parsing JSON into nested lists and generating JSON from such structures. It enables serialization of complex configurations, access control policies, and authorization states, such as converting a multi-level access control list into a JSON string or reconstructing a nested permission structure from a JSON payload. Examples include storing configuration data, transmitting structured metadata, and managing hierarchical authorization parameters.",
      "description_length": 684,
      "index": 1581,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1",
      "description": "Converts hierarchical data between nested associative lists and JSON, enabling structured data manipulation through serialization and deserialization. The core data type is a nested list of key-value pairs, with functions to parse JSON into this structure or generate JSON from it. It supports recursive data models, allowing transformations of complex configurations or data trees. For instance, it can serialize a nested settings structure into a JSON string or parse a JSON response into a hierarchical list.",
      "description_length": 511,
      "index": 1582,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1alpha1",
      "description": "Encapsulates JSON serialization and deserialization for nested associative lists, supporting recursive key-value structures with string keys. Primary data types include nested lists and recursive maps, with operations for encoding and decoding JSON. It enables transforming multi-level configurations into JSON strings or parsing JSON responses into structured data. Examples include storing hierarchical metadata, transmitting error states, or representing complex data models in a portable format.",
      "description_length": 499,
      "index": 1583,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage.V1beta1",
      "description": "Provides seamless conversion between nested associative lists and JSON, supporting recursive structures and hierarchical data modeling. Key data types include nested lists, key-value pairs, and recursive tuples, with operations for parsing and generating JSON. It enables tasks such as serializing configuration trees for storage or parsing nested API responses into structured OCaml values. Examples include converting a volume attachment configuration into a JSON payload or reconstructing a multi-level settings structure from a JSON string.",
      "description_length": 544,
      "index": 1584,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates.V1beta1",
      "description": "Provides JSON serialization and deserialization for nested, recursive key-value structures using Yojson. Main data types include associative maps, nested lists, and string-keyed tuples, with operations to convert between OCaml structures and JSON strings. It enables tasks such as parsing hierarchical configurations, transmitting structured data, and reconstructing complex models from external sources. For example, it can transform a multi-level settings object into a JSON string or parse a certificate request's metadata from a JSON input.",
      "description_length": 544,
      "index": 1585,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1",
      "description": "Converts nested associative lists to and from JSON, supporting recursive structures and hierarchical data representation. The core data type is a list of string-keyed tuples with nested values, with operations for parsing and generating JSON. It enables efficient data exchange for complex structures like token metadata, user profiles, and configuration settings. Examples include serializing review status data, parsing authentication requests, and transmitting user permissions over a network.",
      "description_length": 496,
      "index": 1586,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication.V1beta1",
      "description": "Provides JSON serialization and deserialization for nested associative lists and hierarchical data structures, supporting recursive conversions and arbitrary nesting. Key data types include nested maps, lists, and tuples, with operations for parsing and generating JSON from structured in-memory representations. It enables tasks such as converting user profiles or authentication parameters into transmitable JSON formats or reconstructing configuration trees from stored data. Examples include serializing review status hierarchies or transforming token metadata into a serializable form.",
      "description_length": 590,
      "index": 1587,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Settings.V1alpha1",
      "description": "Converts between nested associative lists and JSON, supporting hierarchical data structures with recursive key-value pairs and list values. The primary data type is a nested list of key-value pairs, with operations for parsing JSON strings into lists and generating JSON from list structures. It enables efficient handling of complex data models, such as policy configurations or configuration settings with nested parameters. Examples include serializing a list of options with sublists into a JSON object for API use or deserializing a JSON response into a structured list for processing.",
      "description_length": 590,
      "index": 1588,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Events.V1beta1",
      "description": "Encodes and decodes hierarchical data structures, including nested associative lists and recursive key-value pairs, into and from JSON. Primary data types include nested lists and associative structures with string keys, supporting operations for serialization and deserialization. It enables conversion of complex event metadata, such as timelines with timestamps and locations, into JSON for transmission or storage. Examples include logging event attributes or reconstructing nested event data from JSON input.",
      "description_length": 513,
      "index": 1589,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Scheduling.V1alpha1",
      "description": "Combines hierarchical data handling with JSON serialization, supporting nested key-value structures and lists of tuples for recursive data conversion. Main data types include associative lists, priority integers, and nested lists, with operations for parsing and generating JSON. It enables tasks like saving configuration trees to files or parsing API responses with complex nested structures. Examples include converting priority-based hierarchies to JSON and reconstructing in-memory data from encoded strings.",
      "description_length": 513,
      "index": 1590,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions.V1beta1",
      "description": "Handles serialization and deserialization of nested associative lists into JSON format, enabling structured data interchange. Key types include recursive key-value pairs and nested lists, with operations for converting between OCaml structures and JSON. Examples include parsing configuration trees, serializing policy rules, and transforming hierarchical data for storage or transmission.",
      "description_length": 389,
      "index": 1591,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V1",
      "description": "Encodes and decodes deeply nested associative structures using JSON, with support for recursive key-value pairs and nested lists. Core data types include lists of key-value pairs and recursive tuples, enabling structured representation of complex configurations and hierarchical data. Operations allow parsing JSON into OCaml structures and generating JSON from in-memory data, such as converting a nested configuration into a JSON string or reconstructing a status report from a JSON response. This facilitates data interchange in applications requiring dynamic, hierarchical data handling.",
      "description_length": 591,
      "index": 1592,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling.V2beta1",
      "description": "Converts nested associative lists to and from JSON, enabling structured data serialization and deserialization. The core data type is a recursive list of key-value pairs, supporting complex hierarchical representations. It allows for parsing and generating JSON from metrics, configurations, or state data, such as converting autoscaler settings into a JSON string or reconstructing a nested metric structure from a serialized input. Operations include bidirectional conversion, making it suitable for storing, transmitting, or processing dynamic data in systems like Kubernetes.",
      "description_length": 579,
      "index": 1593,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core.V1",
      "description": "The module provides JSON serialization and deserialization for nested associative lists, enabling structured data exchange. It operates on recursive key-value pairs, represented as lists of string tuples, with functions to convert between these structures and JSON. This allows applications to store and retrieve complex configurations, such as converting a multi-level settings map to JSON or reconstructing a nested data structure from a JSON string. It supports deep nesting, making it suitable for managing hierarchical data in cloud infrastructure, container configurations, and network settings.",
      "description_length": 601,
      "index": 1594,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1",
      "description": "Encodes and decodes nested associative lists into and from JSON, supporting recursive structures with string keys and nested value lists. The primary data type is a recursive list of key-value pairs, with operations for converting between this structure and JSON strings. It enables handling of complex, hierarchical data such as job configurations or nested settings. For example, it can serialize a configuration with nested parameters into a JSON string or parse a JSON file into a structured list.",
      "description_length": 501,
      "index": 1595,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V1beta1",
      "description": "Encodes and decodes nested associative lists into JSON, working with recursive key-value structures that support hierarchical data. Provides operations to convert complex configurations into JSON strings and reconstruct them into in-memory representations. Examples include serializing job parameters for storage or parsing incoming JSON data into structured definitions. Supports seamless data interchange between systems handling nested, structured information.",
      "description_length": 463,
      "index": 1596,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch.V2alpha1",
      "description": "Encapsulates JSON-based serialization and deserialization of hierarchical data structures, supporting nested key-value pairs and lists. Provides operations to parse JSON into OCaml structures, manipulate nested fields, and convert structured data back to JSON strings. Functions include extracting specific keys, flattening structures, and mapping over nested elements. Examples include converting job configurations to JSON, parsing job schedules, and retrieving status information from complex data.",
      "description_length": 501,
      "index": 1597,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy.V1beta1",
      "description": "Provides bidirectional conversion between nested associative lists and JSON, supporting recursive key-value structures. Core data types include lists of tuples and nested lists, with operations for parsing and generating JSON. It enables efficient serialization of complex data, such as converting a list [(\"a\", [(\"b\", \"c\")])] into {\"a\": {\"b\": \"c\"}} or parsing host path policies from JSON. Examples include storing configuration settings, exchanging pod disruption budgets, and managing port range definitions.",
      "description_length": 511,
      "index": 1598,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1",
      "description": "Provides serialization and deserialization of nested associative lists into and from JSON, operating on recursive key-value structures where each value may itself be a list. Supports converting complex configurations, state snapshots, or hierarchical data between OCaml and JSON formats, enabling data persistence, transmission, and structured manipulation. Examples include serializing a deployment configuration into a JSON string or parsing a JSON payload into a nested list for programmatic access. Key operations include parsing, generating, and transforming hierarchical data with consistent, recursive representations.",
      "description_length": 625,
      "index": 1599,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta1",
      "description": "Provides bidirectional conversion between nested associative lists and JSON, enabling structured data serialization and deserialization. Key data types include recursive lists of string key-value pairs and JSON values, with operations for encoding and decoding complex hierarchical structures. Examples include converting configuration trees to JSON for storage, parsing deployment parameters from JSON files, and reconstructing nested data from serialized strings. Supports deep nesting and recursive processing for accurate data transformation in applications.",
      "description_length": 562,
      "index": 1600,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps.V1beta2",
      "description": "Encodes and decodes nested associative lists into JSON, supporting recursive key-value structures for hierarchical data. Primary data types include recursive lists of string keys and nested values, with operations for parsing JSON strings into structured lists and generating JSON from in-memory representations. Enables tasks like serializing configuration files, transmitting state information, or converting deployment settings into a standardized format. Examples include transforming a list like [(\"a\", \"1\"); (\"b\", [(\"c\", \"2\")])] into a JSON object or parsing a JSON response into a nested OCaml structure.",
      "description_length": 611,
      "index": 1601,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1alpha1",
      "description": "Converts nested key-value structures, including lists of tuples and associative lists, to and from JSON using Yojson, enabling bidirectional data serialization and deserialization. Primary data types include nested lists, tuples, and string-keyed associations, with operations for parsing and generating JSON. It supports complex hierarchical data, such as transforming JSON objects into structured lists or serializing API definitions. Examples include storing configuration trees, transmitting nested data, and validating API resource structures.",
      "description_length": 548,
      "index": 1602,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration.V1beta1",
      "description": "Handles the conversion of nested key-value structures to and from JSON, supporting recursive and hierarchical data types such as associative lists, nested tuples, and multi-level maps. It enables serialization and deserialization operations that facilitate dynamic configuration management, data interchange, and structured payload generation. Users can parse JSON into complex in-memory representations or generate JSON from nested records, useful for modifying webhook rules, storing configuration trees, or validating request payloads. Examples include converting multi-level settings from a config file into a usable format or generating response data from deeply nested structures.",
      "description_length": 686,
      "index": 1603,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking.V1",
      "description": "Provides JSON serialization and deserialization for nested associative lists, supporting recursive key-value structures. It handles conversions between OCaml lists and JSON, enabling structured data exchange in applications like network policy management. Operations include parsing JSON into nested lists and generating JSON from in-memory representations. For example, it can convert a list of egress rules or port configurations into a JSON format suitable for API transmission or configuration files.",
      "description_length": 504,
      "index": 1604,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1",
      "description": "Encapsulates nested associative structures for JSON serialization and deserialization, operating on recursive key-value pairs represented as lists. Supports bidirectional conversion between OCaml data and JSON, enabling manipulation of hierarchical configurations, role bindings, and policy definitions. Operations include parsing JSON into structured lists, serializing lists into JSON strings, and extracting or generating nested data like role mappings or subject-access relationships. Examples include converting a list of user roles with permissions into a JSON object or reconstructing a policy configuration from a stored JSON string.",
      "description_length": 641,
      "index": 1605,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1alpha1",
      "description": "Handles bidirectional conversion between nested associative lists and JSON, enabling structured storage and retrieval of hierarchical data. The core data type is a recursive list of string-keyed pairs, with operations for parsing, generating, and manipulating nested structures. It supports complex configurations like role mappings, policy conditions, and multi-level settings, allowing for tasks such as converting a subject-role association list into a JSON object or reconstructing a configuration tree from a JSON string.",
      "description_length": 526,
      "index": 1606,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac.V1beta1",
      "description": "Handles the conversion of nested associative data structures between JSON and OCaml lists of key-value pairs, using Yojson for efficient serialization and deserialization. Key data types include recursive lists of (string * 'a list) pairs and nested tuples, enabling structured manipulation of hierarchical data. Operations support parsing JSON into OCaml structures and generating JSON from nested lists, allowing tasks like converting configuration files, policy rules, or cluster role bindings into and from JSON. Examples include transforming API responses, storing policy configurations, or managing subject-role associations in a structured format.",
      "description_length": 654,
      "index": 1607,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg.Apis",
      "description": "Encodes and decodes nested key-value structures, including lists and recursive associative lists, to and from JSON using Yojson. Supports operations on lists of tuples and string-keyed value lists, enabling structured data manipulation. Tasks such as parsing API responses into nested configurations or serializing hierarchical settings are facilitated. Examples include converting configuration maps to JSON and building request payloads with nested content.",
      "description_length": 459,
      "index": 1608,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg.Apis",
      "description": "Converts between nested associative lists and JSON, allowing for structured data manipulation through recursive key-value pairs. It handles string-keyed tuples with nested values, enabling hierarchical data representation. Operations include parsing JSON into lists and encoding lists into JSON, suitable for processing configuration trees or API responses. For example, it can transform a list of key-value pairs into a JSON object or reverse the process to extract data from a JSON string.",
      "description_length": 491,
      "index": 1609,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Api",
      "description": "Converts nested associative lists to and from JSON, preserving complex hierarchical structures through recursive processing. It handles key-value pairs with values that may be lists or nested objects, enabling bidirectional data transformation. Operations include serializing structured data into JSON format and deserializing JSON back into nested list representations. For instance, it can transform `[(\"x\", [\"y\", \"z\"]); (\"w\", (\"a\", 1))]` into `{\"x\": [\"y\", \"z\"], \"w\": {\"a\": 1}}` and vice versa.",
      "description_length": 496,
      "index": 1610,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Apis",
      "description": "Converts nested associative lists to and from JSON using Yojson, supporting recursive and hierarchical data structures. Core types include recursive key-value lists, tuples, and nested lists, with operations for parsing, generating, and modifying structured data. It allows serializing configuration trees for API interactions or extracting metadata from incoming requests. For example, it can transform a nested settings structure into JSON or parse a deeply nested API response into OCaml values.",
      "description_length": 498,
      "index": 1611,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Runtime",
      "description": "Encodes and decodes nested data structures between JSON and OCaml types, facilitating storage and dynamic reconstruction of complex hierarchies. It works with nested associative lists and raw extension fields, offering functions to serialize and deserialize data. This enables storing a plugin's configuration as a raw extension and later converting it into a typed structure. For instance, a deeply nested configuration can be unpacked into a specific plugin type during runtime.",
      "description_length": 480,
      "index": 1612,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Util",
      "description": "Converts nested associative lists of strings to and from JSON, enabling seamless storage and retrieval of hierarchical data. Key operations include serialization to JSON strings and deserialization into structured lists, with support for recursion. This allows manipulation of configuration trees, nested datasets, or metadata structures. For example, a multi-level settings structure can be encoded into a JSON string and later parsed back into a list of key-value pairs.",
      "description_length": 472,
      "index": 1613,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg.Version",
      "description": "Encodes and decodes nested associative lists into JSON, using a recursive key-value structure with string keys and nested values. It enables data serialization for storage or transmission and deserialization for parsing external inputs. Users can convert configuration settings or hierarchical data between formats. Operations include encoding a list of user profiles with nested attributes or decoding a JSON response from an API.",
      "description_length": 431,
      "index": 1614,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Componentstatuses",
      "description": "Handles retrieval of component status details from a Kubernetes API using named queries, path templates, and HTTP headers. Operates on strings, URIs, and Cohttp headers to construct and execute requests. Supports formatted responses and integrates with API endpoints for status inspection. Examples include fetching a specific component's status or querying with custom headers.",
      "description_length": 378,
      "index": 1615,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Configmaps",
      "description": "Provides functions to retrieve and watch Kubernetes ConfigMap resources with detailed query parameters. Operates on types like `Uri.t` and returns results containing `Kubernetes.Definitions.Api.Core.V1.Config_map_list.t`. Enables efficient listing of ConfigMaps with pagination, filtering, and real-time updates.",
      "description_length": 312,
      "index": 1616,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Endpoints",
      "description": "Provides functions to retrieve and watch Kubernetes Endpoints resources, supporting parameters like watch, timeout, resource version, and label selectors. Operates on URI endpoints and returns structured data of type Kubernetes.Definitions.Api.Core.V1.Endpoints_list.t. Used to monitor service endpoints in a cluster, filter results by labels, and handle large result sets through pagination with the continue token.",
      "description_length": 416,
      "index": 1617,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Events",
      "description": "Provides functions to retrieve and watch Kubernetes event resources, supporting parameters for filtering, pagination, and real-time updates. Operates on URI endpoints and returns event lists or streams with detailed metadata. Enables monitoring of cluster activity by tracking changes through resource versions and label selectors.",
      "description_length": 331,
      "index": 1618,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Limitranges",
      "description": "Provides functions to retrieve and watch Kubernetes LimitRange resources with precise control over query parameters like resource version, timeout, and label selectors. Operates on Kubernetes API types such as Limit_range_list and handles HTTP requests with custom context and headers. Used to monitor resource limits in a cluster dynamically or fetch a limited set of configured limits for analysis.",
      "description_length": 400,
      "index": 1619,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Namespaces",
      "description": "Manages Kubernetes resources through HTTP interactions, supporting CRUD, patch, and lifecycle operations on a range of object types within namespace contexts. Handles string manipulation, URI generation, and patch application to dynamically adjust cluster configurations and resource states. Enables updates to configuration maps, pod scaling, secret deletion, and namespace status tracking. Provides direct API-level control over cluster elements with tailored operations for each resource type.",
      "description_length": 496,
      "index": 1620,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Nodes",
      "description": "manages HTTP interactions through a proxy, routing requests with path, name, and header configurations, and supports asynchronous operations with custom contexts. it processes string-based paths, Cohttp headers, and URI endpoints to execute HTTP methods and manipulate Kubernetes node states using `Kubernetes.Definitions.Api.Core.V1.Node.t` and `Uri.t`. it enables fetching remote data, sending JSON payloads, and updating node conditions directly via API. examples include retrieving node information, posting status updates, and modifying cluster node configurations.",
      "description_length": 570,
      "index": 1621,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Persistentvolumeclaims",
      "description": "Provides functions to retrieve and watch Kubernetes persistent volume claims, supporting parameters for filtering, pagination, and resource version tracking. Operates on Kubernetes API data structures such as `Persistent_volume_claim_list`. Used to monitor storage resource allocations in a cluster, fetch detailed claims with labels, and handle large result sets through pagination.",
      "description_length": 383,
      "index": 1622,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Persistentvolumes",
      "description": "Manages Kubernetes PersistentVolume states through HTTP, enabling retrieval, updates, and PATCH-based modifications using types like Persistent_volume and Patch. Supports targeted configuration changes, such as updating a volume's phase or metadata. Developers can synchronize volume states with a cluster, apply incremental updates, and query current statuses. Examples include adjusting volume availability or injecting new labels without overwriting existing data.",
      "description_length": 467,
      "index": 1623,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Pods",
      "description": "Provides functions to retrieve and watch Pod resources from a Kubernetes API, supporting parameters like label selectors, resource versions, and timeouts. Operates on data types such as Pod lists, URI endpoints, and HTTP headers. Used to monitor real-time changes in pod states or fetch filtered pod listings for orchestration tasks.",
      "description_length": 333,
      "index": 1624,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Podtemplates",
      "description": "Provides functions to retrieve and watch Pod_template resources with detailed query parameters like label selectors, resource versions, and timeouts. Operates on types such as `Kubernetes.Definitions.Api.Core.V1.Pod_template_list.t` and interacts with HTTP endpoints using Cohttp. Enables efficient listing of pods with pagination and real-time updates through watch mechanisms.",
      "description_length": 378,
      "index": 1625,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Replicationcontrollers",
      "description": "Provides functions to retrieve and watch replication controller resources with precise control over filtering, pagination, and event streaming. Operates on data types including replication controller lists and associated metadata. Used to monitor cluster state changes, filter resources by labels, and handle large result sets through pagination.",
      "description_length": 346,
      "index": 1626,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Resourcequotas",
      "description": "Provides functions to retrieve and watch Kubernetes resource quotas, supporting parameters for filtering, pagination, and versioning. Operates on Kubernetes API objects of type `Resource_quota_list` and HTTP request contexts. Used to monitor resource usage changes in a cluster or fetch quota details with specific constraints like label selectors and timeouts.",
      "description_length": 361,
      "index": 1627,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Secrets",
      "description": "Provides functions to retrieve and watch Kubernetes secrets, supporting parameters for filtering, pagination, and resource version tracking. Operates on URI endpoints and returns secret lists or streams with detailed metadata. Enables real-time monitoring of secret changes and controlled data retrieval from Kubernetes clusters.",
      "description_length": 329,
      "index": 1628,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Serviceaccounts",
      "description": "Provides functions to retrieve and watch service account resources with detailed query parameters, including filtering by labels, limiting results, and handling pagination. Operates on data types such as `Kubernetes.Definitions.Api.Core.V1.Service_account_list.t` and HTTP-related structures like `Uri.t` and `Cohttp.Header.t`. Used to fetch service account lists with specific constraints or monitor changes in real-time through watch mechanisms.",
      "description_length": 447,
      "index": 1629,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Services",
      "description": "Provides functions to retrieve and watch Kubernetes Service resources, supporting parameters like watch, timeout, label selectors, and pagination. Operates on URI endpoints and returns Service lists or streams with detailed metadata. Enables real-time monitoring of service changes and filtered retrieval of service objects.",
      "description_length": 324,
      "index": 1630,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1.Watch",
      "description": "Provides real-time monitoring and retrieval capabilities for various Kubernetes resources, including ConfigMaps, Endpoints, Events, LimitRanges, Namespaces, Nodes, PersistentVolumeClaims, PersistentVolumes, Pods, PodTemplates, ReplicationControllers, ResourceQuotas, Secrets, ServiceAccounts, and Services. Operates on types such as `Uri.t`, `Watch_event.t`, and HTTP headers, supporting parameters like resource version, label selectors, timeouts, and pagination to filter and stream updates. Enables tasks like tracking pod state changes, monitoring secret updates, or fetching labeled services with precise control over data retrieval. Returns structured events or errors, facilitating event-driven interactions with Kubernetes clusters.",
      "description_length": 740,
      "index": 1631,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1",
      "description": "Handles Kubernetes authorization checks by generating and executing HTTP POST requests for access reviews, self-subject reviews, and rules reviews. It processes subject access review and self-subject access review objects, validating permissions and fetching authorization rules through Cohttp Lwt. Operations include checking read, write, or admin access and retrieving user-specific rules in real-time. Examples include verifying a service account's pod listing rights or fetching authorization rules for a logged-in user.",
      "description_length": 524,
      "index": 1632,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization.V1beta1",
      "description": "provides HTTP-based authorization checks for Kubernetes resources by generating and executing subject access review requests. It handles data types such as `Local_subject_access_review.t`, `Self_subject_access_review.t`, and `Self_subject_rules_review.t`, enabling access validation, permission audits, and rule-based authorization checks. Operations include sending POST requests with structured review objects, managing HTTP context, and returning results as Lwt promises. Examples include verifying user access to deployments, checking group permissions, and dynamically evaluating authorization rules against cluster policies.",
      "description_length": 630,
      "index": 1633,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1",
      "description": "Manages Kubernetes storage class resources through HTTP interactions, supporting CRUD operations with types like Storage_class, Delete_options, and Patch for configuration management. Enables real-time monitoring of changes using watch events and URI-based requests, allowing filtering, pagination, and version control. Users can fetch specific storage classes, track updates dynamically, and modify configurations with partial updates or deletions. Operations include replacing definitions, parsing event streams, and adjusting request parameters for efficient data retrieval.",
      "description_length": 577,
      "index": 1634,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1alpha1",
      "description": "manages Kubernetes volume attachments through CRUD operations and real-time monitoring, using OCaml types for API objects and HTTP interactions. It supports creating, updating, deleting, and watching attachments, with filters, pagination, and versioning for precise control. Operations include attaching volumes to nodes, adjusting configurations, and tracking status changes. Examples include dynamically modifying attachment parameters or retrieving a specific attachment using a known version.",
      "description_length": 496,
      "index": 1635,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage.V1beta1",
      "description": "Manages Kubernetes storage resources through HTTP, supporting CRUD operations, patches, and real-time monitoring for storage classes and volume attachments. Processes types such as StorageClass, Volume_attachment, DeleteOptions, and Patch to enable configuration updates, deletions, and dynamic tracking of changes. Allows customized requests, targeted modifications, and filtering by name or label for precise control. Examples include updating storage class parameters, deleting volume attachments with grace periods, and watching for configuration changes across clusters.",
      "description_length": 575,
      "index": 1636,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Certificates.V1beta1",
      "description": "Handles certificate signing request lifecycle management through Kubernetes API interactions, supporting approval, status updates, and real-time monitoring. Operates on Certificate_signing_request.t, strings, and integers, enabling programmatic control and event-driven responses. Supports PUT operations for modifying request states and watch mechanisms for tracking changes over time. Examples include automating approvals, updating statuses based on external triggers, and observing version-specific updates in a cluster.",
      "description_length": 524,
      "index": 1637,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authentication.V1",
      "description": "Handles token review requests by generating path templates and sending POST requests with Kubernetes token review data, including optional pretty printing. It processes Kubernetes token review objects and manages HTTP client context during request submission. Supports validation of tokens against a Kubernetes API endpoint. Example use includes submitting a token for authentication verification and retrieving structured response data.",
      "description_length": 437,
      "index": 1638,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authentication.V1beta1",
      "description": "Provides a method to validate Kubernetes authentication tokens by constructing and sending a token review request. Accepts a token review object, context, headers, and a pretty flag to issue a POST request. Returns a token review response containing validation results. Can be used to verify the authenticity and permissions of a bearer token.",
      "description_length": 343,
      "index": 1639,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings.V1alpha1",
      "description": "Manages Kubernetes pod presets through CRUD operations, allowing dynamic configuration adjustments, deletions, and targeted patches using types like Pod_preset and Patch. Retrieves and watches pod preset resources with query parameters, leveraging structures such as Pod_preset_list and Cohttp for real-time monitoring. Streams real-time changes via Watch_event.t, enabling event-driven observation of pod and preset modifications with filtering and pagination. Users can monitor configuration updates, export settings, and synchronize cluster states efficiently.",
      "description_length": 563,
      "index": 1640,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events.V1beta1",
      "description": "manages Kubernetes event interactions through retrieval, monitoring, and modification operations, supporting real-time updates, filtering, and namespace-specific actions. it handles types like Event, Delete_options, and Patch, enabling tasks such as updating event metadata, deleting with grace periods, or applying partial field updates. it supports querying events by namespace, name, labels, or resource versions, allowing tracking of resource changes and debugging of cluster activity. examples include monitoring pod status, isolating events for specific deployments, or retrieving paginated event lists with custom filters.",
      "description_length": 629,
      "index": 1641,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Scheduling.V1alpha1",
      "description": "Handles Kubernetes priority class management with HTTP-based operations and real-time querying capabilities. Key data types include priority_class, delete_options, patch, selectors, and versioned snapshots, supporting creation, modification, deletion, and dynamic filtering of scheduling policies. Users can fetch specific classes by name, apply custom filters, and retrieve paginated results with version tracking. Operations include updating configurations, deleting resources with propagation strategies, and monitoring changes through real-time updates.",
      "description_length": 557,
      "index": 1642,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1",
      "description": "Handles Kubernetes resource management and monitoring through HTTP interactions and real-time event streaming. It works with types like Api_service.t, Uri.t, and Cohttp.Header.t to build requests, update service states, and extract URI components, while also supporting watch-based monitoring, query filtering, and event processing. Users can modify service configurations, generate dynamic requests, and track resource changes in real time. Specific tasks include adjusting API service status, paginating through results, and applying versioned filters to monitored data.",
      "description_length": 572,
      "index": 1643,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration.V1beta1",
      "description": "Handles URI template construction and API resource interaction for Kubernetes, enabling dynamic request generation and real-time data monitoring. It supports parameterized URL building, status updates, and watch operations on Kubernetes objects, using types like strings, integers, and `Watch_event.t`. Users can update services with custom headers, format API responses, and track changes to cluster resources. Operations include fetching paginated lists and applying filters to retrieve structured data efficiently.",
      "description_length": 517,
      "index": 1644,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions.V1beta1",
      "description": "manages Kubernetes resource interactions through asynchronous HTTP operations, supporting retrieval, watching, and modification of DaemonSets, Deployments, Ingresses, NetworkPolicies, ReplicaSets, and PodSecurityPolicies. it operates on API-specific types like Daemon_set_list, Deployment_list.t, and Network_policy_list, enabling filtering, pagination, and versioned data access. users can monitor real-time changes, fetch specific resource revisions, or apply patches to update configurations. examples include tracking ingress rule updates, listing deployment revisions, or modifying pod security policies with custom headers.",
      "description_length": 629,
      "index": 1645,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V1",
      "description": "Provides functions for retrieving, monitoring, and modifying Kubernetes horizontal pod autoscaler configurations, supporting real-time event streaming, filtering, and pagination. Operates on types such as `Horizontal_pod_autoscaler_list` and related metadata, enabling dynamic scaling adjustments based on CPU or custom metrics. Users can track autoscaler changes across namespaces, apply incremental updates, and refine scaling policies with precise metric thresholds. Examples include monitoring pod count adjustments in response to load, filtering autoscalers by name, and fetching updated configurations during long-running watches.",
      "description_length": 636,
      "index": 1646,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling.V2beta1",
      "description": "Handles Kubernetes horizontal pod autoscaler management through retrieval, monitoring, and modification operations. It works with types such as `Horizontal_pod_autoscaler_list.t`, `HorizontalPodAutoscaler`, `Patch`, and `Watch_event`, supporting HTTP interactions, real-time event streaming, and label-based filtering. Users can adjust scaling parameters, track autoscaler changes, and fetch historical metrics. Examples include updating replica limits, observing scaling events, and monitoring specific resources across namespaces.",
      "description_length": 532,
      "index": 1647,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1",
      "description": "handles Kubernetes Job resources through retrieval, modification, and real-time watching, supporting parameters like namespace, name, and labels. it works with types such as Job and Patch, enabling operations like status updates, incremental changes, and versioned data access. users can monitor job progress, apply targeted updates, and fetch historical job versions with precise queries. it supports streaming updates, pagination, and label-based filtering for dynamic cluster management.",
      "description_length": 490,
      "index": 1648,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V1beta1",
      "description": "Combines capabilities for monitoring, managing, and updating Kubernetes CronJobs through HTTP, supporting real-time watches, filtered queries, and targeted updates. Operates on types such as Cron_job.t, Patch.t, and watch events, enabling dynamic adjustments to job schedules and status tracking. Users can inspect job configurations, modify execution parameters without full replacements, and observe changes across namespaces. Examples include updating a job's schedule, filtering jobs by labels, and tracking versioned changes in real time.",
      "description_length": 543,
      "index": 1649,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch.V2alpha1",
      "description": "Retrieves, monitors, and manages Kubernetes CronJob resources with real-time updates, filtering, and pagination. It handles types like `Cron_job_list.t`, `CronJob`, and `Patch`, supporting HTTP operations to query, modify, and track job schedules and statuses. Users can adjust job schedules, inspect execution details, or filter jobs by name or status. Examples include dynamically updating a job's schedule or retrieving job lists with custom query parameters.",
      "description_length": 462,
      "index": 1650,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy.V1beta1",
      "description": "Manages Kubernetes cluster policies and resources with operations on PodDisruptionBudgets, PodSecurityPolicies, and related types, enabling dynamic updates, monitoring, and filtering. Supports real-time event streaming, versioned queries, and precise control over disruption and security configurations. Users can adjust maxUnavailable thresholds, track policy changes, and enforce constraints through programmatic interactions. Examples include optimizing resilience settings, exporting security policies, and synchronizing resource states across the cluster.",
      "description_length": 560,
      "index": 1651,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1",
      "description": "Provides real-time monitoring and retrieval of Kubernetes resources including controller revisions, DaemonSets, deployments, ReplicaSets, and stateful sets. Operates on types such as `Uri.t`, `Kubernetes.Definitions.Api.Apps.V1.*_list.t`, and `Watch_event.t`, supporting filtering, pagination, and version tracking. Users can track configuration changes, fetch filtered lists, or monitor live updates for deployment management. Examples include scaling deployments, patching DaemonSets, or observing stateful set modifications through HTTP streams.",
      "description_length": 548,
      "index": 1652,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta1",
      "description": "manages Kubernetes resource monitoring and manipulation, offering retrieval and real-time watching of controller revisions, deployments, and stateful sets with support for filtering, pagination, and version tracking. Key types include Controller_revision_list, Deployment_list, Stateful_set_list, Watch_event.t, and Uri.t, with operations for querying, updating, rolling back, and scaling resources. It enables actions such as reverting deployments, adjusting replica counts, and fetching paginated data with label selectors or resource versions. Examples include tracking live deployment changes, applying patches to stateful sets, and retrieving filtered lists of controller revisions.",
      "description_length": 687,
      "index": 1653,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps.V1beta2",
      "description": "Manages Kubernetes workloads by providing functions to retrieve and watch controller revisions, DaemonSets, deployments, ReplicaSets, and StatefulSets, with support for filtering, pagination, and real-time updates. Key data types include `Uri.t`, `Kubernetes.Definitions.Api.Apps.V1beta2.Controller_revision_list.t`, `Daemon_set_list`, `Deployment`, `Replica_set_list`, and `Stateful_set_list`, enabling operations like adjusting replica counts, applying patches, and tracking resource changes. Functions allow fetching snapshots with label selectors, monitoring real-time updates via resource version tracking, and handling HTTP context for structured data retrieval. Examples include updating a deployment's spec, watching for ReplicaSet changes, and retrieving stateful set status with custom filters.",
      "description_length": 804,
      "index": 1654,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiextensions.V1beta1",
      "description": "Generates and manages URI templates for Kubernetes status updates, while monitoring and retrieving custom resource definitions through watch and get operations. Core data types include templates, status payloads, strings, integers, and HTTP headers, with operations for template expansion, status patching, and resource querying. Users can dynamically construct URLs with custom headers, apply state changes, and track real-time resource updates. Examples include updating a resource's status with a specific payload or listing services filtered by labels.",
      "description_length": 556,
      "index": 1655,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1alpha1",
      "description": "Provides CRUD and patch operations for Kubernetes initializer configurations, along with real-time monitoring of resource changes. It works with types such as `Initializer_configuration.t`, `Delete_options.t`, and `Patch.t` to manage admission control settings, while also processing events and URIs to track resource updates. Users can fetch, update, or delete configurations and monitor specific namespaces or services for changes. Examples include modifying cluster admission policies or detecting real-time service configuration updates.",
      "description_length": 541,
      "index": 1656,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration.V1beta1",
      "description": "Manages Kubernetes webhook configurations through CRUD, patch, and monitoring operations, supporting both mutating and validating webhooks with fine-grained control over parameters like pretty, export, and timeout. Operates on types such as MutatingWebhookConfiguration, ValidatingWebhookConfiguration, and DeleteOptions, enabling updates, deletions, and real-time configuration tracking. Allows tasks like modifying a webhook's failure policy, deleting configurations with custom grace periods, or querying resources with label selectors. Provides dynamic interaction with cluster-wide admission control settings, including real-time updates and efficient resource filtering.",
      "description_length": 676,
      "index": 1657,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking.V1",
      "description": "handles Kubernetes network policy management with create, read, update, and delete operations, including partial updates via patches, and supports dynamic configuration through types like NetworkPolicy, Patch, and DeleteOptions. It enables real-time monitoring and snapshot retrieval of network policies using list types, HTTP contexts, and version tracking, with filtering by labels or resource versions. Operations include adjusting ingress/egress rules, scheduling deletions, and applying custom logic to maintain policy consistency across clusters. Examples include tracking policy changes during deployments or enforcing constraints based on watch events.",
      "description_length": 660,
      "index": 1658,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1",
      "description": "handles CRUD, patch, and watch operations for Kubernetes role and cluster role resources, including bindings, roles, and cluster roles, through HTTP interactions. It supports types like Role_binding, Cluster_role_binding, Role, Cluster_role, Delete_options, and Patch, enabling programmatic management of access controls and permissions. Users can create, update, delete, and monitor role configurations across namespaces and clusters, with support for filtering, pagination, and real-time updates. Examples include binding users to roles in specific namespaces, updating cluster-wide permissions, and watching for changes in role definitions.",
      "description_length": 643,
      "index": 1659,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1alpha1",
      "description": "Manages Kubernetes RBAC resources through direct API interactions, enabling CRUD, patch, and watch operations on cluster and namespace-level roles and bindings. Supports types such as Cluster_role_binding, Cluster_role, Role, Role_binding, and associated options for fine-grained control over access policies. Allows real-time monitoring of changes, programmatic updates to permissions, and efficient retrieval of role configurations with filtering and pagination. Examples include updating role rules, watching for binding modifications, and cleaning up obsolete cluster roles.",
      "description_length": 578,
      "index": 1660,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac.V1beta1",
      "description": "manages Kubernetes RBAC resources through CRUD, patch, and watch operations, supporting Cluster_role, Role, Role_binding, and related types. It enables namespace-specific modifications, real-time monitoring, and HTTP-based interactions with fine-grained control over deletions, updates, and filtering. Users can update role references, delete bindings with custom policies, and monitor changes via watch events or label selectors. Examples include dynamically adjusting access controls, logging role modifications, and fetching role configurations with pagination.",
      "description_length": 564,
      "index": 1661,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Admissionregistration",
      "description": "Converts complex nested key-value structures, including lists, tuples, and associative maps, to and from JSON, enabling seamless data interchange and serialization. It supports recursive and hierarchical data, allowing users to parse JSON into structured in-memory representations or generate JSON from nested records. Operations include transforming API definitions, managing dynamic configurations, and validating request payloads. Examples include serializing webhook rules, converting multi-level settings from config files, and transmitting nested data structures.",
      "description_length": 569,
      "index": 1662,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Apps",
      "description": "Handles bidirectional conversion between nested associative lists and JSON, supporting recursive key-value structures for hierarchical data. Core data types include recursive lists of string keys and nested values, with operations for parsing, generating, and transforming complex configurations. It enables serialization of deployment settings, parsing of JSON payloads, and structured manipulation of hierarchical data. For example, it can convert a nested list into a JSON string or reconstruct a list from a serialized JSON object.",
      "description_length": 535,
      "index": 1663,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authentication",
      "description": "Handles JSON encoding and decoding of nested associative structures, using lists of string-keyed tuples with recursive support. Core data types include nested maps, lists, and tuples, enabling operations to serialize and deserialize complex data like user profiles, token metadata, and configuration trees. It allows converting hierarchical review statuses into JSON or reconstructing authentication parameters from stored representations. Specific use cases include transmitting user permissions over a network or parsing nested authentication requests.",
      "description_length": 554,
      "index": 1664,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Authorization",
      "description": "Converts between nested associative lists and JSON, supporting recursive key-value structures for structured data interchange. Primary data types include recursive lists of string-keyed tuples, with operations for parsing and generating JSON. It enables serialization of access control policies, configuration trees, and authorization states, such as converting a multi-level access control list into a JSON string or reconstructing a nested permission structure from a JSON payload. This facilitates efficient data exchange and manipulation in systems requiring hierarchical information.",
      "description_length": 588,
      "index": 1665,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Autoscaling",
      "description": "Encodes and decodes deeply nested associative structures using JSON, supporting recursive key-value pairs and nested lists. Core data types include recursive lists and tuples, enabling structured representation of complex configurations and metrics. Operations allow bidirectional conversion between in-memory data and JSON, such as serializing autoscaler settings or reconstructing hierarchical status reports. This facilitates dynamic data handling in systems requiring flexible, nested data representations.",
      "description_length": 510,
      "index": 1666,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Batch",
      "description": "Encodes and decodes hierarchical data structures using nested associative lists, supporting recursive key-value pairs and lists. Primary data types include recursive lists and JSON strings, with operations for parsing, serializing, and manipulating nested configurations. It enables tasks such as converting job parameters to JSON, extracting specific fields from complex data, and reconstructing structured definitions from incoming data. Functions include flattening, mapping, and key extraction, facilitating seamless data handling in systems with nested information.",
      "description_length": 570,
      "index": 1667,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Certificates",
      "description": "Handles JSON encoding and decoding of complex, nested data structures, including associative maps, lists, and string-keyed tuples. Supports bidirectional conversion between OCaml values and JSON strings for structured data manipulation. Enables parsing of hierarchical configurations and reconstruction of models from external inputs. For instance, it can serialize a certificate's nested attributes into a JSON string or extract a request's metadata from a JSON payload.",
      "description_length": 471,
      "index": 1668,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Core",
      "description": "Serializes and deserializes nested associative lists into JSON, handling recursive key-value structures represented as string tuples. It enables conversion between hierarchical data and JSON formats, supporting deep nesting for complex configurations. Applications can store multi-level settings, reconstruct container or network configurations, and manage cloud infrastructure data. Operations include parsing JSON strings into nested lists and generating JSON from structured maps.",
      "description_length": 483,
      "index": 1669,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Events",
      "description": "Encodes and decodes hierarchical data structures, such as nested lists and associative lists with string keys, into and from JSON. It supports serialization and deserialization of complex event metadata, including timelines with timestamps and locations. Operations allow converting event attributes to JSON for storage or transmission and reconstructing nested event data from JSON input. Examples include logging detailed event information and parsing structured event logs.",
      "description_length": 476,
      "index": 1670,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Extensions",
      "description": "Converts nested associative lists to and from JSON, supporting recursive key-value structures and nested lists. Core operations include parsing, serialization, and transformation of hierarchical data. It enables tasks such as loading configuration files, exporting policy definitions, and preparing data for network transmission. The module works with OCaml's native data structures and JSON representations.",
      "description_length": 408,
      "index": 1671,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Networking",
      "description": "Handles JSON serialization and deserialization of nested associative lists, enabling structured data exchange through recursive key-value conversions. It supports parsing JSON into OCaml lists and generating JSON from in-memory data structures, such as network policies or port configurations. Operations include transforming egress rules or configuration trees into JSON for API communication or storage. This facilitates efficient data handling in network-related applications.",
      "description_length": 479,
      "index": 1672,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Policy",
      "description": "Converts between nested associative lists and JSON, handling recursive structures with core types like lists of tuples and nested lists. Operations include parsing JSON into structured data and serializing data into JSON format. It supports use cases such as configuring system policies, exchanging resource definitions, and representing hierarchical data. For example, it can transform [(\"a\", [(\"b\", \"c\")])] into {\"a\": {\"b\": \"c\"}} or read host path policies from a JSON file.",
      "description_length": 476,
      "index": 1673,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Rbac",
      "description": "Provides bidirectional conversion between nested associative lists and JSON, enabling structured handling of hierarchical data such as role mappings, policy configurations, and access controls. Core data types include recursive lists of string-keyed pairs and nested tuples, with operations for parsing, generating, and manipulating complex structures. It supports tasks like converting user-role lists to JSON, reconstructing policy trees from stored data, and serializing configuration files. Examples include transforming API responses, storing multi-level settings, and managing subject-access relationships in a structured format.",
      "description_length": 635,
      "index": 1674,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Scheduling",
      "description": "Handles hierarchical data with JSON serialization, supporting nested structures and tuple lists for recursive conversions. Key types include associative lists, priority integers, and nested lists, with parsing and generation operations. It allows saving configuration trees to files or reconstructing data from encoded strings. For example, it can convert a priority-based hierarchy into JSON or parse a nested API response into in-memory structures.",
      "description_length": 450,
      "index": 1675,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Settings",
      "description": "Converts between nested associative lists and JSON, enabling structured data manipulation through recursive key-value pairs and lists. The core data type is a nested list, with functions to parse JSON strings into this format and serialize lists back into JSON. It supports complex data models like policy configurations, allowing operations such as converting a list of options with sublists into a JSON object for API transmission or parsing a JSON response into a hierarchical list for internal processing.",
      "description_length": 509,
      "index": 1676,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api.Storage",
      "description": "Converts between nested associative lists and JSON, supporting recursive and hierarchical data structures through parsing and serialization. Core data types include nested lists, key-value pairs, and recursive maps, with operations to encode or decode structured data. It enables tasks like serializing configuration trees, parsing API responses, or transmitting nested metadata. For example, it can transform a multi-level settings structure into a JSON string or reconstruct a volume attachment configuration from a JSON payload.",
      "description_length": 531,
      "index": 1677,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator.Pkg",
      "description": "Encodes and decodes complex nested key-value structures, including lists and recursive associative lists, to and from JSON using Yojson. It handles operations on lists of tuples and string-keyed value lists, enabling structured data manipulation. Tasks like parsing API responses into nested configurations or serializing hierarchical settings are supported. Examples include converting configuration maps to JSON and constructing request payloads with nested content.",
      "description_length": 468,
      "index": 1678,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver.Pkg",
      "description": "Converts between nested associative lists and JSON, enabling structured data manipulation through recursive key-value pairs. It supports string-keyed tuples with nested values, allowing hierarchical data representation. Operations include parsing JSON into lists and encoding lists into JSON, suitable for processing configuration trees or API responses. For example, it can transform a list of key-value pairs into a JSON object or reverse the process to extract data from a JSON string.",
      "description_length": 488,
      "index": 1679,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery.Pkg",
      "description": "Provides bidirectional conversion between nested associative lists and JSON, supporting complex hierarchical structures through recursive processing. Core data types include nested lists, tuples, and key-value pairs, with operations for serialization, deserialization, and modification. It enables tasks such as converting configuration trees into JSON or parsing API responses into OCaml values. For example, it can transform `[(\"a\", [(\"b\", 1); (\"c\", \"d\")])]` into `{\"a\": {\"b\": 1, \"c\": \"d\"}}` and back.",
      "description_length": 503,
      "index": 1680,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api.V1",
      "description": "Provides real-time monitoring and data retrieval for a wide range of Kubernetes resources, including ConfigMaps, Endpoints, Events, and more. Operates on types like `Uri.t`, `Watch_event.t`, and HTTP headers, supporting parameters such as label selectors, resource versions, and timeouts to filter and stream updates. Enables tasks like tracking pod state changes, monitoring secret updates, or fetching labeled services with precise control. Returns structured events or errors, facilitating event-driven interactions with Kubernetes clusters.",
      "description_length": 544,
      "index": 1681,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Logs.By_logpath",
      "description": "Extracts a predefined path template for log requests and retrieves log data from a specified endpoint using HTTP. It operates with strings, HTTP headers, and URI structures, and is used to fetch logs from a remote server based on a given path. The function supports custom client contexts and headers for flexible integration with logging services.",
      "description_length": 348,
      "index": 1682,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Admissionregistration",
      "description": "Handles Kubernetes admission control by enabling CRUD, patch, and real-time monitoring operations on initializer and webhook configurations. It works with types like `Initializer_configuration.t`, `MutatingWebhookConfiguration`, and `Delete_options.t` to manage cluster policies and service interactions. Users can update webhook failure policies, delete configurations with custom timeouts, or track namespace-specific changes. Examples include adjusting admission rules dynamically or detecting service configuration updates as they occur.",
      "description_length": 541,
      "index": 1683,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiextensions",
      "description": "Constructs and manages URI templates for Kubernetes status interactions, enabling dynamic URL generation and real-time resource monitoring via watch and get operations. Core types include templates, status payloads, strings, integers, and HTTP headers, with functions for expanding templates, applying status patches, and querying resources. Users can update resource states with custom payloads, filter results using labels, and track changes through continuous watches. Examples include modifying a deployment's status with a specific update or retrieving services based on metadata criteria.",
      "description_length": 594,
      "index": 1684,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apiregistration",
      "description": "Manages Kubernetes resource interactions through HTTP and real-time monitoring, utilizing types such as Api_service.t, Uri.t, and Watch_event.t to construct requests, update service states, and process streaming events. It enables dynamic URI generation, status adjustments, and filtered data retrieval, supporting operations like paginated listings and versioned queries. Users can track resource changes, apply custom headers, and format responses based on structured API data. Specific tasks include modifying service configurations, monitoring cluster objects, and generating parameterized URLs for targeted resource access.",
      "description_length": 628,
      "index": 1685,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Apps",
      "description": "Provides real-time monitoring and management of Kubernetes workloads, including deployments, stateful sets, DaemonSets, and controller revisions, with support for filtering, pagination, and version tracking. Key data types include `Uri.t`, various list types like `Deployment_list`, `Stateful_set_list`, and `Watch_event.t`, enabling operations such as scaling, patching, and watching resource changes. Users can fetch filtered resource lists, monitor live updates through HTTP streams, and apply configuration changes dynamically. Examples include adjusting replica counts, observing stateful set modifications, and retrieving paginated deployment data with label selectors.",
      "description_length": 675,
      "index": 1686,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authentication",
      "description": "Manages Kubernetes token validation through HTTP requests, processing token review objects and returning structured validation results. Supports generating path templates, sending POST requests with authentication data, and handling pretty-printed responses. Accepts tokens, context, headers, and flags to customize validation workflows. Enables verification of bearer token authenticity and permissions against a Kubernetes API endpoint.",
      "description_length": 438,
      "index": 1687,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Authorization",
      "description": "Handles Kubernetes authorization checks by generating and executing HTTP POST requests for access, self-subject, and rules reviews, validating permissions and retrieving real-time authorization rules. It works with types like `Local_subject_access_review.t`, `Self_subject_access_review.t`, and `Self_subject_rules_review.t`, enabling access validation, audit, and rule evaluation. Operations include checking read, write, or admin access and fetching user-specific rules through Cohttp Lwt. Examples include verifying a service account's ability to list pods or dynamically assessing user permissions against cluster policies.",
      "description_length": 627,
      "index": 1688,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Autoscaling",
      "description": "Manages Kubernetes horizontal pod autoscaler configurations through retrieval, monitoring, and modification, supporting real-time event streaming and label-based filtering. It operates on types like `Horizontal_pod_autoscaler_list.t`, `HorizontalPodAutoscaler`, `Patch`, and `Watch_event`, enabling dynamic scaling adjustments and historical metric tracking. Users can update replica counts, filter autoscalers by name or namespace, and observe scaling behavior in response to load changes. Examples include adjusting CPU thresholds, applying incremental configuration patches, and tracking autoscaler events during long-running watches.",
      "description_length": 637,
      "index": 1689,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Batch",
      "description": "manages Kubernetes Job and CronJob resources with real-time monitoring, filtering, and modification capabilities. it handles types such as Job, Cron_job.t, Patch.t, and watch events, enabling operations like schedule updates, status tracking, and versioned data access. users can dynamically adjust job configurations, filter by labels or names, and stream changes across namespaces. examples include updating a CronJob's schedule, retrieving paginated job lists, and observing job status changes in real time.",
      "description_length": 510,
      "index": 1690,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Certificates",
      "description": "Manages certificate signing requests via Kubernetes API, handling approvals, status changes, and real-time updates. Processes Certificate_signing_request.t values, strings, and integers, with PUT operations for state modifications and watch mechanisms for event tracking. Automates approval workflows, updates statuses in response to external events, and monitors cluster-specific changes. Enables programmatic control over certificate lifecycle stages with direct API integration.",
      "description_length": 481,
      "index": 1691,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Events",
      "description": "manages Kubernetes event interactions by enabling retrieval, monitoring, and modification of events with real-time updates and namespace-specific operations. it works with types such as Event, Delete_options, and Patch to perform actions like updating metadata, deleting with grace periods, or applying partial updates. it supports filtering events by namespace, name, labels, or resource versions, allowing precise tracking of resource changes. examples include monitoring pod status changes, isolating events for specific deployments, or fetching paginated event lists with custom criteria.",
      "description_length": 592,
      "index": 1692,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Extensions",
      "description": "handles asynchronous Kubernetes resource interactions, supporting retrieval, watching, and modification of key resource types through API-specific data structures. it enables filtering, pagination, and versioned access, allowing real-time monitoring and configuration updates. users can track ingress rule changes, list deployment revisions, or apply patches to pod security policies. operations work with types like Daemon_set_list and Deployment_list.t, supporting custom headers and targeted updates.",
      "description_length": 503,
      "index": 1693,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Networking",
      "description": "manages Kubernetes network policies through CRUD operations, patches, and dynamic configuration, leveraging types such as NetworkPolicy, Patch, and DeleteOptions. It supports real-time monitoring, versioned snapshots, and label-based filtering, enabling adjustments to ingress/egress rules and policy consistency across clusters. Operations include applying custom logic during watch events and scheduling deletions. Examples include tracking policy changes during deployments or enforcing constraints based on resource versions.",
      "description_length": 529,
      "index": 1694,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Policy",
      "description": "Manages Kubernetes cluster policies through operations on PodDisruptionBudgets and PodSecurityPolicies, supporting dynamic updates, real-time event streaming, and versioned queries. Key data types include policy configurations, disruption thresholds, and security constraints, with operations for adjusting settings, tracking changes, and enforcing rules. Users can optimize resilience by modifying maxUnavailable values, export security policies for auditing, and synchronize resource states across the cluster. The module enables precise control over policy enforcement and cluster stability.",
      "description_length": 594,
      "index": 1695,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Rbac",
      "description": "manages Kubernetes RBAC resources through CRUD, patch, and watch operations, supporting types like Role, Cluster_role, Role_binding, and Cluster_role_binding. It enables namespace and cluster-level modifications, real-time monitoring, and HTTP-based interactions with fine-grained control over access policies. Users can bind users to roles, update role rules, and watch for configuration changes. Examples include dynamically adjusting permissions, cleaning up obsolete roles, and retrieving role data with pagination and filters.",
      "description_length": 531,
      "index": 1696,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Scheduling",
      "description": "manages Kubernetes priority class lifecycle through HTTP interactions, enabling real-time querying, versioned snapshots, and dynamic policy adjustments. It supports operations on priority_class, delete_options, patch, and selectors, allowing users to create, update, delete, and filter scheduling policies. Specific tasks include retrieving classes by name, applying custom selectors, and tracking changes across versions. It also facilitates deletion with propagation control and real-time monitoring of scheduling configurations.",
      "description_length": 531,
      "index": 1697,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Settings",
      "description": "manages Kubernetes pod presets with full CRUD capabilities, supporting dynamic updates, deletions, and targeted patches using types like Pod_preset and Patch. It handles retrieval and real-time watching of pod preset resources through structures such as Pod_preset_list and Cohttp, enabling event-driven monitoring via Watch_event.t. Users can filter, paginate, and observe changes in pod configurations, export settings, and maintain cluster synchronization. Operations include creating custom presets, applying incremental changes, and tracking modifications across distributed environments.",
      "description_length": 593,
      "index": 1698,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis.Storage",
      "description": "handles Kubernetes storage-related resources via HTTP, offering CRUD operations, real-time monitoring, and configuration management for storage classes and volume attachments. It works with types like Storage_class, Volume_attachment, Delete_options, and Patch to enable dynamic updates, deletions, and event tracking. Users can fetch specific resources, apply partial updates, and monitor changes with filters and versioning. Examples include modifying storage class parameters, deleting attachments with grace periods, and watching for configuration changes in real time.",
      "description_length": 573,
      "index": 1699,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Api",
      "description": "Provides bidirectional conversion between nested associative lists and JSON, supporting recursive key-value structures, lists, and tuples for hierarchical data manipulation. Core data types include nested lists, string-keyed tuples, and recursive maps, with operations for parsing, generating, and transforming complex configurations. It enables tasks such as serializing user permissions, reconstructing policy trees from JSON, and converting multi-level settings into structured formats. Examples include transmitting webhook rules, parsing event metadata, and managing access control policies.",
      "description_length": 596,
      "index": 1700,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apiextensions_apiserver",
      "description": "Handles bidirectional conversion between nested associative lists and JSON, facilitating structured data handling through recursive key-value structures. It operates on string-keyed tuples with nested values, supporting parsing and encoding operations. This enables tasks like flattening configuration trees or extracting information from API responses. For instance, it can convert a list of key-value pairs into a JSON object or parse a JSON string into a nested list structure.",
      "description_length": 480,
      "index": 1701,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Apimachinery",
      "description": "Handles bidirectional conversion between nested associative lists and JSON, enabling structured data manipulation. Core types include nested lists, tuples, and key-value pairs, with operations for serialization, deserialization, and modification. It allows transforming complex data representations, such as converting `[(\"x\", [(\"y\", true); (\"z\", [1; 2])])]` into `{\"x\": {\"y\": true, \"z\": [1; 2]}}` and vice versa. This supports tasks like API data parsing and configuration management.",
      "description_length": 485,
      "index": 1702,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions.Kube_aggregator",
      "description": "Encodes and decodes nested key-value structures, including lists and recursive associative lists, to and from JSON using Yojson. It supports operations on tuples and string-keyed value lists, enabling structured data manipulation. Parsing API responses into nested configurations or serializing hierarchical settings is possible. Examples include converting configuration maps to JSON and building request payloads with nested content.",
      "description_length": 435,
      "index": 1703,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Definitions",
      "description": "Provides bidirectional conversion between nested associative lists and JSON, supporting recursive structures, lists, and tuples for hierarchical data manipulation. Core data types include nested lists, string-keyed tuples, and recursive maps, with operations for parsing, generating, and transforming complex configurations. It enables tasks such as serializing user permissions, parsing event metadata, and converting multi-level settings into structured formats. For example, it can transform `[(\"x\", [(\"y\", true); (\"z\", [1; 2])])]` into `{\"x\": {\"y\": true, \"z\": [1; 2]}}` and decode JSON responses into nested list structures.",
      "description_length": 628,
      "index": 1704,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Api",
      "description": "Monitors and retrieves real-time data from Kubernetes resources using types like `Uri.t` and `Watch_event.t`, with support for label selectors, resource versions, and timeouts. Processes HTTP headers and streams updates to track changes in pods, secrets, and services. Enables precise control over data retrieval, returning structured events or errors for event-driven interactions. Examples include tracking pod state transitions or fetching labeled services with custom filters.",
      "description_length": 480,
      "index": 1705,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Apis",
      "description": "Provides comprehensive Kubernetes resource management through HTTP and real-time monitoring, supporting CRUD, patch, and watch operations across a wide range of resource types. It handles core data types such as `Uri.t`, `Watch_event.t`, `Patch`, and resource-specific records like `Deployment`, `NetworkPolicy`, and `Role`, enabling dynamic configuration, status updates, and event-driven workflows. Users can monitor pod status changes, adjust autoscaler thresholds, manage RBAC policies, and track storage class modifications in real time. Specific tasks include updating webhook failure policies, applying label-based filters to job listings, and automating certificate approvals through API interactions.",
      "description_length": 709,
      "index": 1706,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Kubernetes.Logs",
      "description": "Extracts and processes log data from a remote endpoint by applying a predefined path template, using strings, HTTP headers, and URIs. It enables fetching logs with customizable client contexts and headers, allowing integration with various logging services. Operations include constructing request URLs, sending HTTP queries, and handling response data. Examples include retrieving logs for a specific time range or filtering by request ID.",
      "description_length": 440,
      "index": 1707,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes.Version",
      "description": "Returns the path template used for version requests. Operates on HTTP context and headers to fetch version information from a Kubernetes API endpoint. Retrieves version details as a structured info object.",
      "description_length": 205,
      "index": 1708,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Object.Make",
      "description": "Converts between a custom `value` type and JSON representations using Yojson, enabling serialization and deserialization of structured data. The module supports parsing JSON into `value` and generating JSON from `value` instances. It is used to handle configuration data and API responses that require precise type checking and transformation.",
      "description_length": 343,
      "index": 1709,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Object.Of_strings",
      "description": "Converts a list of key-value string pairs into a JSON object representation and parses JSON objects back into such a list. Works with lists of string tuples representing key-value pairs. Used to serialize configuration data and deserialize user input from JSON format.",
      "description_length": 268,
      "index": 1710,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Object.Of_floats",
      "description": "Converts a list of string-number pairs to and from JSON format. Operates on a list of tuples where each tuple contains a string and a float. Used to serialize and deserialize structured numerical data in JSON-based configurations or data exchanges.",
      "description_length": 248,
      "index": 1711,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Object.Of_ints",
      "description": "Converts a list of string-int pairs to and from JSON format using Yojson. Operates on a list of tuples where each tuple contains a string and an integer. Used to serialize and deserialize structured data like configuration settings or key-value mappings.",
      "description_length": 254,
      "index": 1712,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml.Object.Of_bools",
      "description": "Converts a list of (string, bool) pairs to and from JSON format using Yojson. Processes structured boolean data for serialization and deserialization. Used to encode configuration flags or settings into JSON and reconstruct them accurately.",
      "description_length": 240,
      "index": 1713,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Object",
      "description": "Converts a structured data type to and from JSON format using Yojson. Operates on lists of key-value pairs where keys are strings and values are polymorphic. Used to serialize and deserialize configuration objects or data payloads in a strict format.",
      "description_length": 250,
      "index": 1714,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Kubecaml.Kubernetes",
      "description": "Handles bidirectional JSON and nested list conversion, real-time resource monitoring, and Kubernetes API interactions. Core types include `Uri.t`, `Watch_event.t`, `Patch`, and resource records, with operations for parsing, watching, patching, and logging. It enables tasks like converting configuration structures, tracking pod state changes, and fetching version details. Examples include serializing permissions, monitoring service updates, and retrieving logs with custom filters.",
      "description_length": 484,
      "index": 1715,
      "embedding_norm": 1.0
    },
    {
      "module_path": "kubecaml",
      "description": "Provides functions to interact with Kubernetes API endpoints, including creating, reading, updating, and deleting resources like pods, services, and deployments. Works with OCaml types generated from Kubernetes API schemas, such as `V1Pod`, `V1Service`, and `V1Deployment`. Used to dynamically manage cluster resources, automate deployment workflows, and monitor application states within a Kubernetes environment.",
      "description_length": 414,
      "index": 1716,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Kubecaml",
      "description": "Encapsulates JSON serialization, deserialization, and Kubernetes resource interaction through structured data manipulation. Supports operations on `Uri.t`, `Watch_event.t`, `Patch`, and resource records, enabling real-time monitoring and API communication. It converts configuration objects to JSON, tracks pod state changes, and retrieves logs with filters. Examples include serializing permissions, applying patches, and parsing nested list structures.",
      "description_length": 454,
      "index": 1717,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 1718,
    "meaningful_modules": 1718,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 804,
    "min_description_length": 205,
    "avg_description_length": 392.0710128055879,
    "embedding_file_size_mb": 5.563658714294434
  }
}