{
  "package": "conformist",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-06-18T16:29:18.868998",
  "modules": [
    {
      "module_path": "Conformist.Make.Field",
      "description": "Provides functions to extract metadata, names, validation errors, and type information from fields, along with checks for optional status and encoding of default values. Operates on a custom field type that includes metadata and value types, and a list structure specific to field definitions. Used to process and validate structured data inputs against schema-defined fields.",
      "description_length": 376,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conformist.Field",
      "description": "Provides functions to retrieve metadata, names, validation errors, and type information from fields, along with methods to check if a field is optional and encode default values. Operates on a custom field type that includes metadata and value types, and a specialized list structure for fields. Used to validate and process structured data inputs, such as parsing and checking form fields or configuration parameters.",
      "description_length": 418,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conformist.Make",
      "description": "Produces error values for invalid input of specific types, including boolean, integer, float, string, date, and datetime. Constructs errors from string representations or indicates missing values. Used to validate and report malformed or absent data in parsing or conversion workflows.",
      "description_length": 285,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "conformist",
      "description": "Provides functions to define schema structures, validate data against those schemas, and decode values into typed representations. Works with custom type definitions, records, and variant types to enforce strict type checking during data processing. Used to ensure data integrity when parsing external inputs like JSON or configuration files.",
      "description_length": 342,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Conformist",
      "description": "manages structured data validation and error reporting through custom field types and type-specific error constructors. It supports retrieving metadata, checking field properties, and encoding defaults, while also generating detailed error messages for invalid or missing values. Operations include parsing form inputs, validating configuration parameters, and translating raw data into safe, typed representations. Examples include checking if a field is optional, generating errors for invalid dates, and encoding default string values.",
      "description_length": 538,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 538,
    "min_description_length": 285,
    "avg_description_length": 391.8,
    "embedding_file_size_mb": 0.018598556518554688
  }
}