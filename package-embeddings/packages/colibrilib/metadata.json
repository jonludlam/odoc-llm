{
  "package": "colibrilib",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 14,
  "creation_timestamp": "2025-07-15T23:08:28.889932",
  "modules": [
    {
      "module_path": "Colibrilib.Interval.Union.Make.Increasing.Binary",
      "library": "colibrilib",
      "description": "This module implements interval arithmetic operations for rational numbers using a binary representation, supporting addition, multiplication, inversion, and division of intervals. It provides functions to manipulate intervals with custom operations, handle bounds with presence types, and perform precise splitting and merging based on rational values. Concrete use cases include exact numeric computations over continuous ranges and symbolic manipulation of interval-based expressions.",
      "description_length": 487,
      "index": 0,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Colibrilib.Interval.Union.Make.Increasing.Unary",
      "library": "colibrilib",
      "description": "This module implements unary operations on intervals represented by the `t` type, specifically handling increasing functions and constants. It supports operations like negation, multiplication by a constant, and applying increasing scalar functions to intervals. These functions are used to compute interval bounds for mathematical expressions involving rational numbers (`Q.t`).",
      "description_length": 379,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrilib.Interval.Union.Make.Increasing",
      "library": "colibrilib",
      "description": "This module manages strictly increasing intervals through core operations for merging, splitting, and querying ranges, while its submodules extend functionality to rational arithmetic and unary transformations. It provides the `t` type for representing intervals, with operations like union, overlap checking, and boundary manipulation, enabling precise handling of non-overlapping time or numeric ranges. The first child module supports interval arithmetic on rational numbers, including addition, multiplication, and inversion, useful for exact computations over continuous ranges. The second child module applies increasing unary functions and constants to intervals, allowing transformation of interval bounds through scalar operations involving `Q.t`.",
      "description_length": 756,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Colibrilib.Interval.Union.Make.NonIncreasing",
      "library": "colibrilib",
      "description": "This module implements interval union operations with non-increasing functions, supporting transformations like ceiling, floor, truncation, and ReLU on interval data. It provides specialized operators for applying unary functions under constraints such as saturation, intersection, and waiting conditions. These operations are used for precise interval arithmetic in domains like signal processing or constrained numerical computations.",
      "description_length": 436,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Colibrilib.Interval.Union.Make.IsComparable",
      "library": "colibrilib",
      "description": "This module implements comparisons between intervals, determining their ordering or equality. It works with interval types and a boolean flag to check if one interval is strictly less than, greater than, or equal to another. Concrete use cases include validating interval overlaps, sorting intervals, or checking disjointness in numerical ranges.",
      "description_length": 346,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrilib.Interval.Convexe.Make",
      "library": "colibrilib",
      "description": "This module supports arithmetic operations (addition, scalar multiplication), interval union, intersection, and splitting, along with comparisons and utility functions for convex intervals over rational numbers. The intervals, represented with finite or infinite bounds, enable precise range analysis, constraint solving, and mathematical modeling tasks such as validating interval types (e.g., integer or real subsets) or selecting representative values within ranges. Predefined intervals and construction utilities further simplify common numerical workflows.",
      "description_length": 562,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Colibrilib.Interval.Union.Make",
      "library": "colibrilib",
      "description": "This module constructs and manipulates intervals with rational bounds, supporting set operations, bound comparisons, and membership checks over recursive interval types that encode inclusive or exclusive endpoints. It provides the core `t` type and operations like union, intersection, and difference, enabling precise handling of overlapping or disjoint ranges under constraints such as monotonicity. The first child module extends intervals with rational arithmetic and unary transformations, allowing operations like addition and scalar multiplication on interval bounds. A second child module applies non-increasing unary functions such as floor and ReLU, while a third handles comparisons between intervals, determining strict ordering or equality for tasks like sorting or overlap validation.",
      "description_length": 798,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrilib.Interval.Bound",
      "library": "colibrilib",
      "description": "This module defines two bound types, `Strict` and `Large`, representing open and closed interval boundaries. It provides the `inv_bound` function to invert a bound, converting `Strict` to `Large` and vice versa. Useful for interval arithmetic and range manipulation where boundary inclusion needs to be dynamically adjusted.",
      "description_length": 324,
      "index": 7,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Colibrilib.Interval.Convexe",
      "library": "colibrilib",
      "description": "This module provides arithmetic and set operations on convex intervals over rational numbers, supporting addition, scalar multiplication, union, intersection, and splitting. It includes comparisons and utilities to validate interval types, select representative values, and model constraints with infinite or finite bounds. Specific examples include solving range constraints, analyzing numerical ranges for functions, and constructing intervals for precise mathematical modeling. Predefined intervals and builders streamline common tasks in numerical analysis and constraint programming.",
      "description_length": 588,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Colibrilib.Interval.Union",
      "library": "colibrilib",
      "description": "This module handles intervals with rational bounds through recursive types that encode inclusive or exclusive endpoints, supporting set operations, membership checks, and bound comparisons. It provides core data types and operations for interval arithmetic, including union, intersection, difference, and transformations under monotonic functions such as addition, scalar multiplication, floor, and ReLU. The module enables precise manipulation of overlapping or disjoint ranges, and supports ordering and equality checks for tasks like sorting or overlap validation. Examples include computing the union of two intervals, applying a scaling factor to interval bounds, or evaluating the floor of an interval's endpoints.",
      "description_length": 720,
      "index": 9,
      "embedding_norm": 0.9999998807907104
    },
    {
      "module_path": "Colibrilib.QUtils",
      "library": "colibrilib",
      "description": "This module extends rational number operations with functions for computing floors, ceilings, and divisibility-based bounds. It works with `Q.t` rational numbers and `Z.t` integers, providing precise arithmetic for tasks like interval alignment and modular constraints. Use cases include exact division checks, snapping values to multiples, and computing integer bounds for rational numbers.",
      "description_length": 391,
      "index": 10,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Colibrilib.Interval",
      "library": "colibrilib",
      "description": "This module provides a comprehensive framework for defining and manipulating intervals over rational numbers, with support for both open and closed boundaries using `Strict` and `Large` bound types. It enables arithmetic operations like addition and scalar multiplication, set operations such as union, intersection, and difference, and transformations under monotonic functions including floor and ReLU. The module supports membership checks, bound comparisons, and interval splitting, making it suitable for tasks like solving range constraints, modeling numerical ranges, and performing precise interval arithmetic. Examples include computing the union of overlapping intervals, scaling interval bounds, and evaluating function outputs over ranges with mixed open/closed endpoints.",
      "description_length": 784,
      "index": 11,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Colibrilib.Ord",
      "library": "colibrilib",
      "description": "This module defines a comparison result type with three variants: equal (`Eq`), less than (`Lt`), and greater than (`Gt`). It is used to represent the outcome of ordered comparisons between values. Concrete use cases include implementing custom ordering logic for data structures like sets and maps, and determining relative positions in sorted sequences.",
      "description_length": 355,
      "index": 12,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Colibrilib",
      "library": "colibrilib",
      "description": "This library provides precise rational number arithmetic, interval manipulation, and comparison result handling. It supports operations on rational numbers with functions for floors, ceilings, and divisibility checks, while its interval system allows for arithmetic, union, intersection, and transformations over ranges with open or closed bounds. The comparison module introduces a three-way result type for ordered comparisons, enabling custom ordering logic. Example tasks include aligning values to integer multiples, computing exact interval bounds under functions, and implementing ordered data structures.",
      "description_length": 612,
      "index": 13,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 14,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 798,
    "min_description_length": 324,
    "avg_description_length": 538.4285714285714,
    "embedding_file_size_mb": 0.051285743713378906
  }
}