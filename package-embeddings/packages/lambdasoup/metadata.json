{
  "package": "lambdasoup",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:26.372516",
  "modules": [
    {
      "module_path": "Soup.Infix",
      "library": "lambdasoup",
      "description": "This module defines infix operators for concise DOM traversal and element selection using CSS selectors. It works with `Soup.node` values, applying selector strings to extract elements or lists of elements. Use these operators to navigate and query HTML documents directly, such as selecting all links or finding a specific heading element.",
      "description_length": 340,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Soup.R",
      "library": "lambdasoup",
      "description": "This module provides functions that operate on HTML nodes and elements, such as selecting elements by CSS selectors, retrieving attributes and text content, navigating the DOM tree (e.g., parent, siblings, children), and accessing specific nodes by index or position. It works with data types representing HTML nodes, elements, and collections of nodes. Concrete use cases include extracting structured data from HTML documents, navigating document structure to find related elements, and retrieving specific attributes or text content from selected nodes.",
      "description_length": 556,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lambdasoup.Infix",
      "library": "lambdasoup",
      "description": "This module provides infix operators for querying and manipulating HTML or XML documents using CSS selectors. It supports operations to select elements (`$`), optional elements (`$?`), and multiple elements (`$$`) from a node. Concrete use cases include extracting specific nodes from a parsed document, traversing DOM structures, and filtering elements based on selector patterns.",
      "description_length": 381,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Lambdasoup.R",
      "library": "lambdasoup",
      "description": "This module provides functions for navigating and extracting data from HTML or XML node trees, with operations to select elements by tag, attribute, or position, retrieve text content, and traverse parent-child or sibling relationships. It works with node and element types representing structured document trees. Concrete use cases include parsing web pages, extracting specific elements like headlines or links, and traversing document structure for data scraping or transformation.",
      "description_length": 484,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Lambdasoup",
      "library": "lambdasoup",
      "description": "This library enables CSS selector-based navigation and manipulation of HTML/XML documents parsed into hierarchical node trees. It supports functional transformations over node sequences, file-based parsing, and common workflows like content extraction and DOM restructuring through composable operations such as filtering, mapping, and tree modification. Infix operators allow concise element selection (`$`), optional selection (`$?`), and multiple selection (`$$`), while traversal functions support tag-based, attribute-based, and positional navigation, enabling tasks like scraping headlines or restructuring document layouts. Key data types include nodes and elements, with operations to inspect attributes, retrieve text, and modify tree structures directly.",
      "description_length": 764,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Soup",
      "library": "lambdasoup",
      "description": "This library enables functional HTML parsing, CSS selector-based querying, and DOM manipulation through operations like element selection, node traversal, and structural modifications. It works with parsed HTML documents and individual nodes, supporting tasks like web scraping, HTML-to-HTML transformations, and programmatic document analysis or rewriting. Infix operators allow concise DOM navigation and selection, while core functions handle attribute access, text extraction, and tree traversal. Examples include selecting all links, extracting structured data from documents, or rewriting HTML content programmatically.",
      "description_length": 625,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 764,
    "min_description_length": 340,
    "avg_description_length": 525.0,
    "embedding_file_size_mb": 0.022222518920898438
  }
}