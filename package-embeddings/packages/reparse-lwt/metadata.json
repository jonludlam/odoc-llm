{
  "package": "reparse-lwt",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:31:52.944421",
  "modules": [
    {
      "module_path": "Reparse_lwt.Stream.Let_syntax.Let_syntax",
      "description": "Provides operations to sequence and transform values within a monadic context, including lifting values, applying functions, and combining multiple monadic values. Works with generic monadic types that support chaining and transformation. Enables concise handling of asynchronous computations, error propagation, and nested data structures.",
      "description_length": 340,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Reparse_lwt.Stream.Infix",
      "description": "Provides monadic and applicative operations for sequencing and transforming parsers, including binding, mapping, and combining parser results. Works with parser types that encapsulate values and parsing state, supporting sequential evaluation and error handling. Enables constructing complex parsers by chaining simple ones, such as parsing a character and converting it to its ASCII code, or combining multiple parsers with error messages.",
      "description_length": 440,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Reparse_lwt.Stream.Let_syntax",
      "description": "Sequences and transforms values within monadic contexts, supporting chaining, lifting, and combination of monadic values. Operates on types like option, result, and async, enabling clean handling of errors, asynchronous flows, and nested structures. Functions include binding, mapping, and combining multiple monadic computations. Examples include safely unwrapping nested options, composing async operations, and propagating errors through a chain of transformations.",
      "description_length": 468,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Reparse_lwt.Stream.Promise",
      "description": "Handles asynchronous value resolution and error propagation, supporting chaining of operations through bind and map operators. Works with a promise type that represents values computed asynchronously. Enables non-blocking I/O operations and error handling in event-driven applications.",
      "description_length": 285,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Reparse_lwt.Stream",
      "description": "Combines monadic and applicative operations for parsing, sequencing, and transforming values across different contexts, including parsers, options, results, and promises. Supports chaining, mapping, and error handling to build complex workflows, such as parsing structured data, unwrapping nested options, or managing asynchronous I/O. Operations work with parser states, error propagation, and non-blocking execution, enabling tasks like converting characters to ASCII codes or composing async workflows. Examples include combining parsers for protocol validation, safely extracting values from nested options, and handling asynchronous network responses.",
      "description_length": 656,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "reparse-lwt",
      "description": "Provides combinators for building recursive descent parsers, including sequence, choice, and repetition operations. Works with input streams and produces abstract syntax trees through monadic binding. Used to parse domain-specific languages and structured text formats with custom grammar rules.",
      "description_length": 295,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Reparse_lwt",
      "description": "Combines monadic and applicative operations to parse, sequence, and transform values across parsers, options, results, and promises, enabling complex workflows through chaining, mapping, and error handling. It manages parser states, error propagation, and asynchronous execution, supporting tasks like converting characters to ASCII codes or composing async network interactions. Operations allow safe extraction from nested options and coordination of asynchronous I/O. Examples include validating protocol data, unwrapping nested optional values, and handling non-blocking network responses.",
      "description_length": 593,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 656,
    "min_description_length": 285,
    "avg_description_length": 439.57142857142856,
    "embedding_file_size_mb": 0.025839805603027344
  }
}