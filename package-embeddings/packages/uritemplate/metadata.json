{
  "package": "uritemplate",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-06-18T16:30:40.355792",
  "modules": [
    {
      "module_path": "Uritemplate.Template",
      "description": "The module provides functions for constructing and manipulating templates with literals and expandable expressions, operating on types like `template_part` and `variable_expression` to handle dynamic content generation. It supports parsing templated strings, extracting variable names and modifiers, and managing expansion behaviors, useful for scenarios like generating configuration files or processing user-defined templates.",
      "description_length": 428,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uritemplate.Parser",
      "description": "Parses a string into a template structure, handling malformed input without error reporting. Works with raw string inputs and the Template.t type. Used to convert user-provided template syntax into an executable format for rendering.",
      "description_length": 233,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uritemplate.Expansion",
      "description": "Expands templated strings by substituting variables with values, supporting different data formats like direct strings, lists, and association lists. It processes templates represented as `Template.t` and replaces placeholders with structured data. Used to generate dynamic configuration files, personalized messages, and code snippets with complex variable structures.",
      "description_length": 369,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uritemplate.Expansion_type",
      "description": "Converts between string representations and a custom type for expansion semantics, with specific characters for variable separation. Works with a private type representing distinct expansion behaviors. Used to determine the delimiter for expanded variable lists in parsing scenarios.",
      "description_length": 283,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "uritemplate",
      "description": "Handles expansion and parsing of URI templates according to RFC6570, supporting complex syntax elements like reserved segments, default values, and encoding modifiers. Operates on strings and associative lists to represent template variables and their values. Enables dynamic URL generation in web applications requiring parameterized endpoints.",
      "description_length": 345,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uritemplate",
      "description": "Encapsulates template processing through parsing, expansion, and representation conversion, handling dynamic content with structured variable substitution. It operates on types such as `template_part`, `variable_expression`, and `Template.t`, enabling tasks like extracting variables, rendering configurations, and managing delimiter semantics. Functions include parsing raw strings into template structures, expanding placeholders with values from lists or associations, and converting between string formats and internal representation. Examples include generating personalized emails, creating dynamic code snippets, and processing user-defined configuration templates.",
      "description_length": 672,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 672,
    "min_description_length": 233,
    "avg_description_length": 388.3333333333333,
    "embedding_file_size_mb": 0.022217750549316406
  }
}