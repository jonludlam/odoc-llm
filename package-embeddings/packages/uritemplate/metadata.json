{
  "package": "uritemplate",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 5,
  "creation_timestamp": "2025-07-15T23:05:41.622434",
  "modules": [
    {
      "module_path": "Uritemplate.Expansion",
      "library": "uritemplate",
      "description": "This module handles URI template expansion by substituting variables into a template string. It supports variables of type string, list of strings, or association lists of strings. Concrete use cases include generating URLs with dynamic segments or query parameters from structured data.",
      "description_length": 287,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Uritemplate.Expansion_type",
      "library": "uritemplate",
      "description": "This module defines and manipulates URI template expansion types such as Simple, Reserved, Fragment, and FormQuery. It provides functions to convert between string representations and expansion types, and to retrieve separators for variable expansion. Use cases include parsing and generating URI templates according to RFC 6570, particularly when expanding variables into URLs with specific formatting rules.",
      "description_length": 409,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uritemplate.Template",
      "library": "uritemplate",
      "description": "This module enables constructing and manipulating URI templates by combining literals and variable expressions, supporting incremental assembly and component inspection. It operates on structured representations like template parts, variable expressions, and value modifiers, allowing extraction of variable names, expansion types, and modifiers. Typical applications include dynamic URI generation with placeholders, parsing existing templates to analyze or modify their components, and serializing template structures to string formats for storage or transmission.",
      "description_length": 566,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uritemplate.Parser",
      "library": "uritemplate",
      "description": "Parses URI templates from strings into structured template values, handling malformed syntax without error reporting. Works directly with strings and constructs `Uritemplate.Template.t` values representing the parsed structure. Useful for converting raw URI template strings into a manipulable format for expansion or analysis.",
      "description_length": 327,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uritemplate",
      "library": "uritemplate",
      "description": "This module provides URI template expansion following RFC6570, allowing substitution of variables with strings, lists, and associative lists to generate URLs for REST APIs, handle query parameters, and construct complex URIs. It supports different expansion types like Simple, Reserved, and FormQuery, with functions to convert between string templates and structured representations, and to extract or modify template components. Submodules enable parsing raw templates into structured values, building templates from literals and variables, and retrieving formatting details such as separators and expansion rules. Examples include generating URLs with dynamic path segments, serializing templates for storage, and parsing and modifying existing URI templates.",
      "description_length": 762,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 762,
    "min_description_length": 287,
    "avg_description_length": 470.2,
    "embedding_file_size_mb": 0.018602371215820312
  }
}