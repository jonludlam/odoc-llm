{
  "package": "uritemplate",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T23:00:42.510383",
  "modules": [
    {
      "module_path": "Uritemplate.Expansion_type",
      "library": "uritemplate",
      "description": "This module defines types and functions for handling URI template expansion types such as Simple, Reserved, Fragment, and others, each corresponding to specific variable expansion behaviors in URI templates. It provides conversions between expansion types and their string representations, along with the appropriate separator characters for encoding multiple variables. Concrete use cases include parsing and generating URI templates according to RFC 6570, particularly when expanding variables into URLs with correct formatting and delimiters.",
      "description_length": 545,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uritemplate.Template",
      "library": "uritemplate",
      "description": "This module enables constructing and analyzing URI templates composed of literals and dynamic expressions, supporting operations like parsing variable expressions with modifiers (prefix length, composite expansion) and converting template components to strings. It works with structured types such as `template_part`, `variable_expression`, and `value_modifier` to represent template elements and their properties programmatically. Typical applications include dynamic URI generation, template introspection for variable extraction, and serializing template structures into valid URI strings.",
      "description_length": 592,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uritemplate.Expansion",
      "library": "uritemplate",
      "description": "This module handles URI template expansion by substituting variables into a template string. It supports variables of type string, list of strings, or association lists, allowing structured data to be injected into URLs. Use it to generate URLs dynamically from templates with embedded variables, such as building API endpoints with query parameters or path segments.",
      "description_length": 367,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uritemplate.Parser",
      "library": "uritemplate",
      "description": "Parses URI templates from strings into structured template values, handling malformed syntax without error reporting. Works directly with strings and constructs `Uritemplate.Template.t` values representing the parsed templates. Useful for converting raw template strings into a format suitable for variable expansion.",
      "description_length": 317,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Uritemplate",
      "library": "uritemplate",
      "description": "This module processes URI templates by parsing, constructing, and expanding them with variables of different types. It supports operations such as parsing a template string into structured components, substituting variables into templates, and handling different expansion behaviors like simple, reserved, and fragment types. Concrete use cases include generating URLs for APIs with dynamic path segments, query parameters, or matrix parameters, using structured input such as strings, lists, or association lists.",
      "description_length": 514,
      "index": 4,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 592,
    "min_description_length": 317,
    "avg_description_length": 467.0,
    "embedding_file_size_mb": 0.0728607177734375
  }
}