{
  "package": "autofonce_share",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T22:49:32.088851",
  "modules": [
    {
      "module_path": "Autofonce_share.Tree.Internal",
      "library": "autofonce_share",
      "description": "This module handles file path manipulation and chunking operations. It provides a constant string identifier, a function to split file paths into directory components, and a predefined list of file names. It is used to process and organize file hierarchies in a tree structure.",
      "description_length": 277,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_share.Tree",
      "library": "autofonce_share",
      "description": "This module provides functions to read, hash, and determine the size of files, working with file paths as strings. It includes a predefined list of file names for reference and uses the Internal module to handle path splitting and directory organization. Concrete use cases include analyzing file hierarchies, computing file metadata, and preparing file data for tree-based storage or comparison.",
      "description_length": 396,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_share.Files",
      "library": "autofonce_share",
      "description": "Reads and returns the contents of a file given its path. Works with string values representing file paths and handles standard file I/O operations. Useful for loading configuration files or textual data directly into memory.",
      "description_length": 224,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_share.Version",
      "library": "autofonce_share",
      "description": "Stores and exposes version metadata including the version string, commit hash, and commit date. Works with string and option types to handle optional build-time information. Used to report version details in logs, diagnostics, or API responses.",
      "description_length": 244,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_share.Main",
      "library": "autofonce_share",
      "description": "Implements the entry point for the application, coordinating core execution flow and initializing system components. Works with basic system resources and predefined configuration settings. Used to launch the main processing loop and manage initial setup tasks.",
      "description_length": 261,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_share",
      "library": "autofonce_share",
      "description": "This module organizes file-based data processing, version tracking, and application initialization. It reads and hashes files, manages execution flow, and exposes build metadata. Direct use cases include loading configuration files, analyzing directory structures, and reporting version information in diagnostics.",
      "description_length": 314,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 396,
    "min_description_length": 224,
    "avg_description_length": 286.0,
    "embedding_file_size_mb": 0.08730125427246094
  }
}