{
  "package": "autofonce_share",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 6,
  "creation_timestamp": "2025-07-15T23:05:15.240234",
  "modules": [
    {
      "module_path": "Autofonce_share.Tree.Internal",
      "library": "autofonce_share",
      "description": "This module handles file path manipulation and chunking operations. It provides a constant string identifier and functions to split file paths into chunks or list files. It works with strings and lists to manage hierarchical file data in a tree structure. Use cases include parsing file paths for traversal or organizing files in a directory tree.",
      "description_length": 347,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_share.Main",
      "library": "autofonce_share",
      "description": "Implements the entry point for the application, coordinating core initialization and execution flow. It directly invokes the main function that starts the program, typically handling command-line arguments and launching the primary event loop or processing pipeline. This module is used to bootstrap the application and trigger its central operations.",
      "description_length": 351,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_share.Files",
      "library": "autofonce_share",
      "description": "Reads and returns the contents of a file given its path. Works with string-based file paths and text content. Useful for loading configuration files or static resources directly into memory.",
      "description_length": 190,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_share.Tree",
      "library": "autofonce_share",
      "description": "This module processes files in a hierarchical tree structure, using string identifiers to retrieve contents, compute hashes, and obtain metadata like file sizes, with optional return types to handle errors. Its child module manages path manipulation and chunking, enabling operations such as splitting paths into components or listing directory contents. Together, they support tasks like traversing directory trees, organizing files by path hierarchy, and computing file hashes for integrity checks. Key data types include strings for identifiers and paths, optional types for safe error handling, and lists for managing file chunks or directory contents.",
      "description_length": 656,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Autofonce_share.Version",
      "library": "autofonce_share",
      "description": "Stores and exposes version metadata including the version string, commit hash, and commit date. Works with string and option types to represent version information. Used to provide build-time details for debugging, logging, or API responses.",
      "description_length": 241,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Autofonce_share",
      "library": "autofonce_share",
      "description": "This module provides the foundation for application initialization, file handling, and version tracking. It coordinates program startup through a main entry point, processes command-line arguments, and launches core execution, while offering utilities to read file contents, traverse directory structures, and compute file metadata such as hashes and sizes. Version information like the version string and commit details are exposed for logging and debugging purposes. Example uses include bootstrapping the app, loading configuration files, and verifying file integrity through hash computation.",
      "description_length": 596,
      "index": 5,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 656,
    "min_description_length": 190,
    "avg_description_length": 396.8333333333333,
    "embedding_file_size_mb": 0.022241592407226562
  }
}