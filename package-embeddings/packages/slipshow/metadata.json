{
  "package": "slipshow",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T23:04:45.433027",
  "modules": [
    {
      "module_path": "Previewer",
      "library": "slipshow.previewer",
      "description": "Manages live document previews in a web interface. Accepts raw content or precompiled fragments for rendering, updating a specified DOM element. Tracks progress through an integer stage value, optionally notifying listeners when stages change.",
      "description_length": 243,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Data_contents.Internal",
      "library": "slipshow.datafiles",
      "description": "This module provides operations to retrieve and manage a collection of precomputed string values associated with unique identifiers, such as MD5 hashes or hexadecimal keys. It works with static string constants, primarily used for internal data referencing, configuration, or initialization purposes, and includes utilities for file path segmentation into string lists. The data structures serve as fixed identifiers, lookup keys, or encoded payloads in scenarios like serialization, content addressing, or system configuration.",
      "description_length": 528,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Data_contents",
      "library": "slipshow.datafiles",
      "description": "This module manages a collection of precomputed string values associated with unique identifiers such as MD5 hashes or hexadecimal keys. It provides operations to retrieve file contents by identifier, compute hashes, determine content size, and access a list of known file identifiers. These capabilities support content-based data integrity checks, static resource resolution, and content-addressed storage workflows.",
      "description_length": 418,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Data_files",
      "library": "slipshow.datafiles",
      "description": "This module maps specific file types to their string contents, providing direct access to embedded resources like JavaScript and CSS files. It supports reading predefined static files such as `Slipshow_js`, `Mathjax_js`, and syntax highlighting assets. Use this module to retrieve raw string data of embedded frontend resources for web-based presentations or code rendering.",
      "description_length": 374,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Slipshow",
      "library": "slipshow",
      "description": "This module handles the conversion and rendering of slide presentations, supporting both local and remote assets. It provides functions to delay resolution of the starting state, convert content with customizable themes and assets, and serialize or deserialize delayed states. Concrete use cases include server-side rendering of slides with dynamic image resolution and client-controlled starting positions.",
      "description_length": 407,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Communication",
      "library": "slipshow.communication",
      "description": "This module defines a communication protocol for exchanging state updates and readiness signals between components. It supports parsing and serializing messages to and from JSON strings, enabling inter-process or network communication. The primary data structures are a `payload` type with `State` and `Ready` variants, and a `t` record containing an `id` and `payload`.",
      "description_length": 370,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 528,
    "min_description_length": 243,
    "avg_description_length": 390.0,
    "embedding_file_size_mb": 0.08735466003417969
  }
}