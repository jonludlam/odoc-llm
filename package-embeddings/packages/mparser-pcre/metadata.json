{
  "package": "mparser-pcre",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 3,
  "creation_timestamp": "2025-07-15T23:04:53.475632",
  "modules": [
    {
      "module_path": "MParser_PCRE.Tokens",
      "library": "mparser-pcre",
      "description": "This module provides token-level parsing operations for structural elements like symbols, parenthetical groups, and delimiter-separated lists, along with numeric literal recognition across bases and formats. It operates on string-based input streams using PCRE regex, producing results within a monadic parser context. Typical applications include lexing programming language syntax, processing configuration files, or extracting structured data from textual sources requiring precise tokenization and numeric conversion.",
      "description_length": 521,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "MParser_PCRE.Regexp",
      "library": "mparser-pcre",
      "description": "This module compiles and executes PCRE regular expressions against byte buffers, enabling pattern matching with support for capturing groups. It provides functions to extract specific or all matched substrings from a match result, handling optional capture groups gracefully. Use cases include parsing structured binary data, log file analysis, and implementing custom text-based protocols.",
      "description_length": 390,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "MParser_PCRE",
      "library": "mparser-pcre",
      "description": "This module combines regex-based parsing with structured tokenization and byte-level pattern matching to handle both textual and binary data. It provides core types like regular expressions and match results, with operations for compiling patterns, capturing groups, and extracting values in a parser monad. You can parse log entries into structured fields, tokenize programming language syntax, or extract numeric values from text, while the byte buffer support enables parsing binary formats or custom protocols. Submodules enhance this foundation with specialized tools for lexical analysis and low-level data extraction.",
      "description_length": 624,
      "index": 2,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 3,
    "meaningful_modules": 3,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 624,
    "min_description_length": 390,
    "avg_description_length": 511.6666666666667,
    "embedding_file_size_mb": 0.011308670043945312
  }
}