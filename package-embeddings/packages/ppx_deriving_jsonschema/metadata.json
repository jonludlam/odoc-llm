{
  "package": "ppx_deriving_jsonschema",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-06-18T16:28:31.073528",
  "modules": [
    {
      "module_path": "Ppx_deriving_jsonschema.Schema",
      "description": "Generates AST expressions for schema definitions, including type references, constant values, null, character types, and complex structures like arrays, tuples, and unions. Works with OCaml AST nodes and location metadata to construct schema-related expressions. Used to build JSON schema representations or type-checking constraints during code transformation.",
      "description_length": 361,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "ppx_deriving_jsonschema",
      "description": "Generates JSON schema definitions from OCaml type definitions using a PPX syntax extension. It processes variant types, records, and polymorphic variants to produce corresponding JSON schema structures. This enables automatic schema generation for serialization formats that require schema validation.",
      "description_length": 301,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Ppx_deriving_jsonschema_runtime",
      "description": "Provides functions to generate JSON schema representations from OCaml types, supporting custom metadata like id, title, and description. Works with associative lists and nested schema structures to build valid JSON schema documents. Used to dynamically produce schema definitions for serialization libraries or API documentation tools.",
      "description_length": 335,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Ppx_deriving_jsonschema",
      "description": "Encodes OCaml types into JSON schema representations using AST expressions, supporting basic types, arrays, tuples, and unions while preserving polymorphic variant structures. Handles type references, constants, and null values, with options to encode variants as strings or maintain implicit tuples. Allows for custom schema generation during code transformation, enabling type-safe JSON serialization. Examples include generating schema for a variant type with string tags or defining a tuple-based data structure with explicit type constraints.",
      "description_length": 547,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 547,
    "min_description_length": 301,
    "avg_description_length": 386.0,
    "embedding_file_size_mb": 0.014945030212402344
  }
}