{
  "package": "async_websocket",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 12,
  "creation_timestamp": "2025-06-18T16:32:13.525014",
  "modules": [
    {
      "module_path": "Websocket.Frame.Frame_reader.Read_result",
      "description": "Provides serialization and deserialization between a custom type and S-expressions using `t_of_sexp` and `sexp_of_t`. Works with a polymorphic variant type that represents the outcome of a read operation. Used to parse and generate S-expressions for logging or configuration data.",
      "description_length": 280,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket.Frame.Frame_reader.Expert",
      "description": "Handles frame parsing with support for partial or incomplete payloads, allowing incremental processing of WebSocket frames. Accepts an opaque handler function to process frame metadata and payload fragments as they become available. Designed for scenarios where the full frame is not yet received or the downstream buffer cannot be resized.",
      "description_length": 340,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket.Frame.Error",
      "description": "Provides serialization of error representations to S-expressions using a custom type `t` that includes an error message and an optional backtrace. Works with structured error data to enable debugging and logging. Used to generate human-readable and machine-parsable error outputs in diagnostic tools.",
      "description_length": 300,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket.Frame.Iobuf_writer",
      "description": "Writes WebSocket frames by managing frame headers and content alignment, supporting client and server roles. Operates on Iobuf buffers, ensuring proper byte alignment for frame content and headers. Used to construct frames with specific opcodes, content lengths, and final flags, suitable for network protocol implementation.",
      "description_length": 325,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket.Frame.Frame_reader",
      "description": "Encapsulates the ability to parse and generate S-expressions for custom types, along with handling incremental WebSocket frame processing. Supports polymorphic variant types for read outcomes and opaque handler functions for processing frame metadata and partial payloads. Enables logging, configuration, and real-time data streaming by managing incomplete data and custom serialization. Examples include parsing log entries from S-expressions and processing WebSocket frames as they arrive in chunks.",
      "description_length": 501,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket.Opcode",
      "description": "Converts between integer values and a custom opcode type, with support for equality checks, S-expression serialization, and property-based testing. Operates on an opaque type `t` and a related `kind` type, enabling safe manipulation of numeric opcode representations. Used to validate and generate test cases for opcode values in a constrained numeric range.",
      "description_length": 358,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket.Connection_close_reason",
      "description": "Encodes and decodes connection close reasons as integers, mapping specific numeric codes to their semantic meanings. Provides equality checks, serialization to S-expressions, and properties for property-based testing. Supports conversion between integer status codes and their corresponding symbolic representations.",
      "description_length": 316,
      "index": 6,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket.Frame",
      "description": "Encapsulates error serialization, WebSocket frame handling, and S-expression parsing into a unified interface for diagnostic and network operations. Supports custom error types with messages and backtraces, Iobuf-based frame construction with opcodes and content lengths, and incremental processing of S-expressions and WebSocket data. Enables tasks such as logging structured errors, building protocol-compliant WebSocket messages, and parsing partial data streams. Examples include generating debug logs, transmitting binary payloads over WebSockets, and processing streaming configuration data.",
      "description_length": 597,
      "index": 7,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Websocket.Content_reassembler",
      "description": "Processes WebSocket frames to reassemble fragmented content into a continuous buffer, handling text and binary data. Works with Iobuf.t structures and maintains an internal buffer to minimize memory allocations. Used to reconstruct partial messages during WebSocket communication, preserving incomplete data until the final frame is received.",
      "description_length": 342,
      "index": 8,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket.Websocket_role",
      "description": "Provides serialization of connection roles to S-expressions. Works with a custom type representing roles in a WebSocket handshake. Used to encode role information for logging or configuration purposes.",
      "description_length": 201,
      "index": 9,
      "embedding_norm": 1.0
    },
    {
      "module_path": "async_websocket",
      "description": "Provides functions to establish WebSocket connections, send and receive messages asynchronously, and handle connection closures. Works with socket endpoints, message buffers, and asynchronous event loops. Used to implement real-time communication in web applications, such as live updates or chat systems.",
      "description_length": 305,
      "index": 10,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Websocket",
      "description": "Encapsulates WebSocket protocol handling through a set of interrelated modules, offering type-safe conversions between integers and opcodes, status codes, and roles, along with serialization and parsing capabilities. Supports frame construction, error logging, and data reassembly using Iobuf.t, enabling efficient and structured network communication. Operations include validating opcode ranges, encoding close reasons, and reconstructing fragmented messages. Examples include generating debug logs, transmitting binary data, and processing streaming content.",
      "description_length": 561,
      "index": 11,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 14,
    "meaningful_modules": 12,
    "filtered_empty_modules": 2,
    "retention_rate": 0.8571428571428571
  },
  "statistics": {
    "max_description_length": 597,
    "min_description_length": 201,
    "avg_description_length": 368.8333333333333,
    "embedding_file_size_mb": 0.044030189514160156
  }
}