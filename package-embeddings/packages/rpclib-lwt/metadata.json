{
  "package": "rpclib-lwt",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 5,
  "creation_timestamp": "2025-08-14T22:54:15.921468",
  "modules": [
    {
      "module_path": "Rpc_lwt.GenServer",
      "library": "rpclib-lwt",
      "description": "This module constructs Lwt-based RPC server implementations from interface descriptions, defining functions with typed parameters and return values. It works with `Rpc_lwt.server_implementation`, function types built using `@->` and `noargs`, and supports both regular and notification-style RPCs. Concrete use cases include implementing JSON-RPC services where asynchronous handling of requests and notifications is required.",
      "description_length": 426,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpc_lwt.ErrM",
      "library": "rpclib-lwt",
      "description": "This module handles error propagation and result chaining in Lwt-based RPC workflows. It provides functions to create success or error results, bind operations with error handling, and sequence asynchronous computations that may fail. Use cases include composing network service calls with fallbacks, validating inputs before async operations, and handling distributed system errors.",
      "description_length": 383,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpc_lwt.GenClient",
      "library": "rpclib-lwt",
      "description": "This module constructs Lwt-based RPC clients using function type declarations and interface descriptions. It supports defining RPC methods with type-safe parameters and return values, including notifications. Concrete use cases include generating client stubs for JSON-RPC APIs with strong typing and implementing asynchronous remote procedure calls over networks.",
      "description_length": 364,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Rpc_lwt.T",
      "library": "rpclib-lwt",
      "description": "This module implements a monadic interface for handling remote procedure calls (RPCs) with Lwt promises. It provides operations to lift functions into the monad, chain asynchronous computations with `bind`, and wrap or extract Lwt threads using `put` and `get`. Concrete use cases include building composable RPC clients and servers where each RPC call returns a promise that can be sequenced or transformed.",
      "description_length": 408,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Rpc_lwt",
      "library": "rpclib-lwt",
      "description": "This module implements a monadic interface for handling remote procedure calls (RPCs) with Lwt promises. It provides operations to lift functions into the monad, chain asynchronous computations with `bind`, and wrap or extract Lwt threads using `put` and `get`. Concrete use cases include building composable RPC clients and servers where each RPC call returns a promise that can be sequenced or transformed.",
      "description_length": 408,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 5,
    "meaningful_modules": 5,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 426,
    "min_description_length": 364,
    "avg_description_length": 397.8,
    "embedding_file_size_mb": 0.0585174560546875
  }
}