{
  "package": "xxhash",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 4,
  "creation_timestamp": "2025-07-15T23:05:12.458171",
  "modules": [
    {
      "module_path": "XXHash.XXH32",
      "library": "xxhash",
      "description": "This module computes 32-bit xxHash hashes from input strings, supporting both one-shot and streaming operations. It works with `hash` values representing 32-bit hashes and `state` objects for incremental hashing. Use it to generate fast, non-cryptographic hashes for data integrity checks, checksums, or hash tables where speed is critical.",
      "description_length": 340,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "XXHash.XXHASH",
      "library": "xxhash",
      "description": "Implements the xxHash algorithm for fast hashing of strings. Provides functions to compute hashes in both one-shot and streaming modes. Use for checksumming large data streams or generating unique identifiers for string content.",
      "description_length": 228,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "XXHash.XXH64",
      "library": "xxhash",
      "description": "This module implements the XXH64 hash algorithm, providing functions to hash strings with optional seeding. It supports both one-shot hashing and streaming updates using a state object that can be reset, updated incrementally, and freed. Use cases include fast checksum generation for data integrity verification and incremental hashing of large inputs.",
      "description_length": 353,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "XXHash",
      "library": "xxhash",
      "description": "This module implements the XXHash algorithm for fast, non-cryptographic hashing, offering both 32-bit and 64-bit variants. It supports one-shot and streaming hash computation over strings and raw memory, with state objects enabling incremental updates and finalization. The 32-bit submodule handles basic hash generation and streaming, while the 64-bit submodule adds seed support and enhanced performance for large data. Use it to checksum data streams, generate hash keys for hash tables, or verify integrity in high-performance scenarios.",
      "description_length": 541,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 541,
    "min_description_length": 228,
    "avg_description_length": 365.5,
    "embedding_file_size_mb": 0.014931678771972656
  }
}