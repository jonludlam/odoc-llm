{
  "package": "socketcan",
  "embedding_model": "Qwen/Qwen3-Embedding-0.6B",
  "embedding_dimension": 1024,
  "total_modules": 8,
  "creation_timestamp": "2025-07-15T23:06:11.122797",
  "modules": [
    {
      "module_path": "Socketcan.BCM",
      "library": "socketcan",
      "description": "This module supports configuring and managing CAN message transmission and reception in kernel space using the Broadcast Manager (BCM) protocol. It provides operations to set up periodic transmissions, define receive filters, and manage timers with precise control over message handling flags. Concrete use cases include scheduling periodic CAN frame broadcasts and monitoring specific CAN IDs for changes or timeouts.",
      "description_length": 418,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Socketcan.Filter",
      "library": "socketcan",
      "description": "This module defines filters for incoming CAN messages based on message IDs and masks. It allows specifying whether to include extended or remote frames in the filter criteria. Use this module to configure which CAN messages a socket should receive based on identifier patterns and frame types.",
      "description_length": 293,
      "index": 1,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Socketcan.Socket",
      "library": "socketcan",
      "description": "This module implements low-level CAN socket operations for interacting with Linux SocketCAN interfaces. It provides functions to open and close CAN sockets, send and receive CAN frames, apply receive filters, and configure error handling. It works directly with CAN frame and filter types, enabling precise control over message reception and transmission on a specific CAN interface.",
      "description_length": 383,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Socketcan.Mask",
      "library": "socketcan",
      "description": "This module defines and manipulates CAN identifier masks used for filtering messages. It supports two primary data types: standard frame format (11-bit) and extended frame format (29-bit) masks. Concrete operations include creating masks from integers, converting masks back to integers, and accessing predefined standard and extended format masks. Use cases involve configuring CAN bus filters to match specific message identifiers based on bitwise masking.",
      "description_length": 458,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Socketcan.Error",
      "library": "socketcan",
      "description": "This module defines error codes and status flags specific to CAN bus communication errors, including transmission timeouts, arbitration loss, controller and protocol errors, and physical layer issues. It provides functions to parse error information from a CAN frame and convert error codes to human-readable strings. Use this module to diagnose and handle communication failures in CAN bus systems, such as identifying bus-off conditions or electrical faults.",
      "description_length": 460,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Socketcan.Id",
      "library": "socketcan",
      "description": "This module handles creation, transformation, and inspection of CAN frame identifiers, supporting both 11-bit standard (SFF) and 29-bit extended (EFF) formats. It provides functions to construct identifiers from integers, convert between formats, and check the current format of an identifier. Use cases include preparing CAN message IDs for transmission and validating received ID formats in a Linux SocketCAN environment.",
      "description_length": 423,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Socketcan.Frame",
      "library": "socketcan",
      "description": "This module handles the manipulation and representation of raw CAN message data, supporting operations to construct and validate frames with standard or extended identifiers, control flags like remote transmission requests, and variable-length payloads. It works with timestamped frame structures that encapsulate binary data, providing utilities to enforce format constraints and convert frames into textual diagnostics. Typical applications include automotive network communication, embedded systems monitoring, and industrial control protocols where precise message framing and interpretation are critical.",
      "description_length": 609,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Socketcan",
      "library": "socketcan",
      "description": "This module provides comprehensive access to Linux SocketCAN features, enabling configuration of CAN interfaces, message filtering, and error handling. It supports key operations such as setting up periodic message transmission, defining ID-based receive filters using bitmasking, and sending or receiving raw CAN frames with precise control over identifiers and flags. Developers can use it to schedule CAN frame broadcasts, filter incoming messages by ID or type, diagnose communication errors, and manipulate CAN identifiers and masks for both standard and extended frame formats. Example tasks include monitoring specific CAN IDs for changes, diagnosing bus errors, and constructing or parsing CAN frames for transmission on automotive or industrial networks.",
      "description_length": 763,
      "index": 7,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 8,
    "meaningful_modules": 8,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 763,
    "min_description_length": 293,
    "avg_description_length": 475.875,
    "embedding_file_size_mb": 0.02947521209716797
  }
}