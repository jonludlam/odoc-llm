{
  "package": "win-error",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 4,
  "creation_timestamp": "2025-08-14T22:55:30.775881",
  "modules": [
    {
      "module_path": "Win_error_to_string",
      "library": "win-error",
      "description": "Converts Windows error codes into human-readable string messages. Works with the `Win_error_t.t` enumerated type representing system error codes. Useful for logging or displaying detailed error information when handling system-level operations on Windows platforms.",
      "description_length": 265,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Win_error_of_int",
      "library": "win-error",
      "description": "Converts integer error codes to corresponding values in the `Win_error_t` enumerated type. It operates on raw integers and returns an optional `Win_error_t.t` value, allowing precise error handling based on system-level integer codes. This is useful when interfacing with Windows APIs that return error codes as integers.",
      "description_length": 321,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Win_error_t",
      "library": "win-error",
      "description": "This module defines a comprehensive set of Windows error codes as a polymorphic variant type, enabling precise error handling and propagation in system-level applications. It includes direct mappings to Win32 API error constants, covering file operations, network issues, memory constraints, and device-specific failures. Use cases include interpreting system call results, validating resource access, and debugging low-level application behavior on Windows platforms.",
      "description_length": 468,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Win_error",
      "library": "win-error",
      "description": "This module defines a comprehensive set of Windows system error codes as a variant type and provides functions to convert these errors to human-readable strings. It includes `of_unix_error` to map Unix errors to Windows equivalents, `to_string` and `pp` for string representation, and `error_message` to decode both Unix and Windows errors into descriptive messages. Concrete use cases include handling file system operations, network communication errors, and system-level resource management on Windows platforms.",
      "description_length": 515,
      "index": 3,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 4,
    "meaningful_modules": 4,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 515,
    "min_description_length": 265,
    "avg_description_length": 392.25,
    "embedding_file_size_mb": 0.058376312255859375
  }
}