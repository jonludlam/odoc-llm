{
  "package": "OSCADml",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 7,
  "creation_timestamp": "2025-08-14T23:01:17.408965",
  "modules": [
    {
      "module_path": "OSCADml.Export.ExtMap",
      "library": "OSCADml",
      "description": "This module implements ordered maps with string-based keys, supporting operations like insertion, modification, and ordered traversal while preserving key sequence. It provides functions for structured transformations, filtering, and range-based queries, along with conversions to ordered sequences and lists. Such capabilities are useful for managing hierarchical configuration data, ordered key-value associations, or structured model parameters requiring deterministic traversal.",
      "description_length": 482,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OSCADml.Color",
      "library": "OSCADml",
      "description": "This module defines a type `t` representing colors in various formats, including RGB values, hex strings, and a comprehensive list of named CSS colors. It provides a `to_string` function that converts color values to their string representations, suitable for generating SCAD code. Use cases include specifying colors for 3D models in OpenSCAD exports or visualizing geometric shapes with distinct color identifiers.",
      "description_length": 416,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OSCADml.Text",
      "library": "OSCADml",
      "description": "This module defines types for text alignment and direction used in 3D text rendering. It includes horizontal and vertical alignment options, as well as text flow directions. These types configure how text elements are positioned and oriented in generated 3D models.",
      "description_length": 265,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OSCADml.Scad",
      "library": "OSCADml",
      "description": "This module enables constructing and transforming 2D and 3D shapes using primitives like cubes, spheres, and cylinders, alongside dimensionally-safe boolean operations (union, difference, intersection) and geometric manipulations (extrusion, projection, revolution). It operates on a recursive type system with distinct 2D and 3D representations (`d2`, `d3`), enforcing affine transformations and spatial compositions via quaternions, scaling, or mirroring. Use cases include parametric modeling workflows, CAD design automation, and importing/converting external geometry (meshes, paths) into strongly-typed SCAD models for rendering or 3D printing.",
      "description_length": 650,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OSCADml.Debug",
      "library": "OSCADml",
      "description": "This module visualizes geometric structures by converting paths and meshes into 3D shapes with indexed styling. It applies a given styling function to each element, allowing distinct visual identification of components like edges or vertices. Use it to debug spatial constructions by rendering path segments or mesh elements with varying colors or sizes based on their index.",
      "description_length": 375,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OSCADml.Export",
      "library": "OSCADml",
      "description": "This module exports functions to generate OpenSCAD `.scad` scripts and render 2D/3D models into image files using the OpenSCAD CLI. It supports exporting to formats like STL, SVG, and PNG, with configurable camera settings, color schemes, and projections. Concrete use cases include automating 3D model exports, generating preview images with specific visual styles, and scripting batch conversions of CAD designs.",
      "description_length": 414,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OSCADml",
      "library": "OSCADml",
      "description": "This module provides a domain-specific language for constructing and manipulating 2D and 3D geometric models with precise transformations and boolean operations. It works with dimensionally-typed representations (`d2`, `d3`) and supports color, text, and export configurations for rendering and output. Use it to programmatically generate OpenSCAD models, automate CAD workflows, and produce 3D-printable files or visualizations.",
      "description_length": 429,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 650,
    "min_description_length": 265,
    "avg_description_length": 433.0,
    "embedding_file_size_mb": 0.10178947448730469
  }
}