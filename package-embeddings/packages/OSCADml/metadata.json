{
  "package": "OSCADml",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:30:49.770319",
  "modules": [
    {
      "module_path": "OSCADml.Export.ExtMap",
      "description": "This module provides operations for constructing, modifying, and querying ordered maps, including key-value insertion, deletion, updates, and custom merging, with support for arbitrary key and value types. It enables ordered traversal, filtering, and transformation of map entries, preserving structural integrity during operations like sequence-based population or conditional selection. Specific use cases include managing string-keyed data with ordered processing, efficiently merging maps, and building maps from iterable sources while maintaining key order.",
      "description_length": 562,
      "index": 0,
      "embedding_norm": 1.0000001192092896
    },
    {
      "module_path": "OSCADml.Scad",
      "description": "The functions provide 3D and 2D geometric shape creation, transformations (translate, rotate, scale), and Boolean operations (union, difference, intersection), along with advanced operations like minkowski sums and extrusions, working with dimensional types (d2/d3) and vector types (V2/V3). They enable precise modeling of complex geometries, file import/export, and spatial manipulations through recursive object representations and infix operators for affine transformations. Use cases include building parametric models, combining shapes, and converting OCaml data structures to OpenSCAD-compatible outputs.",
      "description_length": 611,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OSCADml.Color",
      "description": "Provides functions to create and convert color values using RGB tuples or hex strings, with support for alpha channels. Works with float triplets for RGB and string representations for hex codes in various formats. Converts color instances to string representations for use in 3D modeling outputs.",
      "description_length": 297,
      "index": 2,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OSCADml.Text",
      "description": "Provides functions to define horizontal and vertical alignment options, and direction settings for text rendering. Works with custom type aliases for layout configuration. Used to specify text placement in 2D and 3D graphical outputs.",
      "description_length": 234,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OSCADml.Export",
      "description": "provides ordered map manipulation with key-value operations, supporting insertion, deletion, and custom merging across arbitrary types. it enables traversal, filtering, and transformation of map entries while preserving order during construction or modification. users can manage string-keyed data, merge maps efficiently, and build maps from iterables. examples include maintaining ordered configuration settings or combining multiple data sources into a single structured map.",
      "description_length": 478,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OSCADml.Debug",
      "description": "Generates 3D visualizations by placing custom shapes along paths or mesh points. Accepts a function to generate shapes based on index and applies them to OCADml.Path2, OCADml.Path3, or OCADml.Mesh structures. Used to inspect geometric data by rendering elements at specific locations in 3D space.",
      "description_length": 296,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "OSCADml",
      "description": "Combines geometric modeling, color handling, text alignment, ordered map operations, and path-based visualization into a unified framework for creating and manipulating 3D and 2D models. It supports d2/d3 shapes, V2/V3 vectors, RGB/HEX colors, and ordered maps with key-value operations, enabling precise control over model construction and rendering. Users can generate complex geometries, apply transformations, define text placement, merge data structures, and render objects along paths. Examples include building parametric models, exporting colorized geometries, aligning text in 3D space, and visualizing data on mesh surfaces.",
      "description_length": 634,
      "index": 6,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 634,
    "min_description_length": 234,
    "avg_description_length": 444.57142857142856,
    "embedding_file_size_mb": 0.02584552764892578
  }
}