{
  "package": "packstream",
  "embedding_model": "Qwen/Qwen3-Embedding-8B",
  "embedding_dimension": 4096,
  "total_modules": 6,
  "creation_timestamp": "2025-08-14T22:59:11.641628",
  "modules": [
    {
      "module_path": "Packstream.Path",
      "library": "packstream",
      "description": "This module represents and manipulates graph paths composed of nodes, unbound relationships, and entity IDs. It provides pretty-printing and string conversion functions for visualizing path structures. Useful for inspecting or logging graph traversal results in a human-readable format.",
      "description_length": 286,
      "index": 0,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Packstream.Node",
      "library": "packstream",
      "description": "This module defines a node structure with an integer ID, a list of string labels, and a list of key-value pairs where values are of type `Packstream.Message.t`. It provides functions to format and convert node instances to strings, primarily used for serializing and displaying graph node data in a structured format. Concrete use cases include representing nodes in a graph database or network structure with associated metadata and properties.",
      "description_length": 445,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Packstream.Relationship",
      "library": "packstream",
      "description": "This module defines a type `t` representing a relationship with identifiers for the relationship itself and its connected nodes, a type label, and a list of properties. It provides functions `pp` and `show` for pretty-printing and converting relationship values to strings. This module is used to serialize and display relationship data in formats suitable for debugging or logging.",
      "description_length": 382,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Packstream.Message",
      "library": "packstream",
      "description": "This module defines a variant type for representing values in a binary protocol, including primitives like integers, floats, strings, and complex types like lists, dictionaries, and structured data with tags. It provides functions to extract specific types from the variant, such as `get_int` and `get_string`, returning results for safe decoding. It is used to serialize and deserialize data exchanged in a network protocol, handling both simple and composite data structures with precision.",
      "description_length": 492,
      "index": 3,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Packstream.UnboundRelationship",
      "library": "packstream",
      "description": "This module represents unbound relationships in a graph database context, with operations to construct and display relationship data. It works with structured data containing identifiers, relationship types, and key-value property pairs encoded using Packstream message types. Concrete use cases include serializing and debugging relationship elements during graph data transmission or storage.",
      "description_length": 394,
      "index": 4,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Packstream",
      "library": "packstream",
      "description": "This module transforms structured data into binary representations and reconstructs it, handling primitive values like integers and strings alongside composite types such as lists, dictionaries, and graph entities (nodes, relationships, paths). It provides utilities to serialize messages and key-value collections into bitstrings, ensuring safe decoding and efficient encoding for data integrity. Applications include network communication and graph database systems requiring compact binary formats for transmission or storage.",
      "description_length": 529,
      "index": 5,
      "embedding_norm": 0.9999999403953552
    }
  ],
  "filtering": {
    "total_modules_in_package": 6,
    "meaningful_modules": 6,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 529,
    "min_description_length": 286,
    "avg_description_length": 421.3333333333333,
    "embedding_file_size_mb": 0.08733844757080078
  }
}