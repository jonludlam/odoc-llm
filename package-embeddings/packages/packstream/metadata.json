{
  "package": "packstream",
  "embedding_model": "BAAI/bge-base-en-v1.5",
  "embedding_dimension": 1024,
  "total_modules": 7,
  "creation_timestamp": "2025-06-18T16:30:08.733088",
  "modules": [
    {
      "module_path": "Packstream.Message",
      "description": "Formats and extracts structured data from messages, supporting string, node, relationship, and integer values with error handling. Works with custom types including nodes, relationships, and unbound relationships. Used to parse and serialize message payloads in a graph database context.",
      "description_length": 287,
      "index": 0,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Packstream.Node",
      "description": "Prints a structured representation of a node to a formatter and returns a string representation of the node's data. Works with a record type containing fields for node identifiers, attributes, and child nodes. Used to generate human-readable output for debugging or logging purposes.",
      "description_length": 283,
      "index": 1,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Packstream.Relationship",
      "description": "Prints and converts relationship data structures to human-readable formats. Works with a record type containing identifiers and connection details. Used to serialize relationship information for logging and debugging purposes.",
      "description_length": 226,
      "index": 2,
      "embedding_norm": 0.9999999403953552
    },
    {
      "module_path": "Packstream.UnboundRelationship",
      "description": "Prints and converts relationship data between entities, supporting pretty-printing and string representation. Operates on a structured type containing identifiers and metadata for entity links. Used to generate human-readable outputs for debugging and logging purposes.",
      "description_length": 269,
      "index": 3,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Packstream.Path",
      "description": "Formats and converts path representations into human-readable strings, supporting pretty-printing to a formatter and string serialization. Works with a structured type representing file system paths, including components and separators. Used to generate debug output and display path information in logs or user interfaces.",
      "description_length": 323,
      "index": 4,
      "embedding_norm": 1.0
    },
    {
      "module_path": "packstream",
      "description": "Provides functions to serialize and deserialize data using the Packstream format, supporting integers, strings, lists, and maps. Works with OCaml's native data types, converting them to and from binary representations. Used in scenarios requiring efficient data exchange, such as database communication or network protocols.",
      "description_length": 324,
      "index": 5,
      "embedding_norm": 1.0
    },
    {
      "module_path": "Packstream",
      "description": "provides a set of utilities for formatting, printing, and converting graph and file system data structures into human-readable forms. It handles node, relationship, and path types, offering serialization, pretty-printing, and string conversion capabilities. Operations include parsing message payloads, generating debug logs, and representing complex data in a structured way. Examples include converting a node to a string, serializing a relationship for logging, and displaying a file path in a readable format.",
      "description_length": 513,
      "index": 6,
      "embedding_norm": 1.0
    }
  ],
  "filtering": {
    "total_modules_in_package": 7,
    "meaningful_modules": 7,
    "filtered_empty_modules": 0,
    "retention_rate": 1.0
  },
  "statistics": {
    "max_description_length": 513,
    "min_description_length": 226,
    "avg_description_length": 317.85714285714283,
    "embedding_file_size_mb": 0.025857925415039062
  }
}